/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 11-Apr-2007.
 */
#include "Base.h"

/**************************************************************/
/*                                                            */
/*  BaseIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_BaseIncludes::ASN1C_BaseIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_BaseIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_BaseIncludes (ASN1CTXT* ctxt_p, ASN1T_BaseIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_BaseIncludes: start\n");


   rtdiag ("asn1PE_BaseIncludes: end\n");
   return (stat);
}

int ASN1C_BaseIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BaseIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_BaseIncludes (ASN1CTXT* ctxt_p, ASN1T_BaseIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_BaseIncludes: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_BaseIncludes: end\n");

   return (stat);
}

int ASN1C_BaseIncludes::Decode ()
{
   return asn1PD_BaseIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  BaseExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_BaseExports::ASN1C_BaseExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_BaseExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_BaseExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_BaseExports: end\n");
   return (stat);
}

int ASN1C_BaseExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BaseExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_BaseExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_BaseExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_BaseExports: end\n");

   return (stat);
}

int ASN1C_BaseExports::Decode ()
{
   return asn1PD_BaseExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumTypeLocalisation                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeLocalisation::ASN1C_EnumTypeLocalisation (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeLocalisation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeLocalisation (ASN1CTXT* ctxt_p, ASN1T_EnumTypeLocalisation value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeLocalisation: start\n");

   switch (value) {
      case EnumTypeLocalisation::circle: ui = 0; break;
      case EnumTypeLocalisation::ellipse: ui = 1; break;
      case EnumTypeLocalisation::line: ui = 2; break;
      case EnumTypeLocalisation::polygon: ui = 3; break;
      case EnumTypeLocalisation::point: ui = 4; break;
      case EnumTypeLocalisation::sector: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeLocalisation: end\n");
   return (stat);
}

int ASN1C_EnumTypeLocalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeLocalisation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeLocalisation (ASN1CTXT* ctxt_p, ASN1T_EnumTypeLocalisation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeLocalisation: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeLocalisation::circle; break;
      case 1: *pvalue = EnumTypeLocalisation::ellipse; break;
      case 2: *pvalue = EnumTypeLocalisation::line; break;
      case 3: *pvalue = EnumTypeLocalisation::polygon; break;
      case 4: *pvalue = EnumTypeLocalisation::point; break;
      case 5: *pvalue = EnumTypeLocalisation::sector; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeLocalisation: end\n");

   return (stat);
}

int ASN1C_EnumTypeLocalisation::Decode ()
{
   return asn1PD_EnumTypeLocalisation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CoordUTM                                                  */
/*                                                            */
/**************************************************************/

ASN1C_CoordUTM::ASN1C_CoordUTM (
   ASN1MessageBuffer& msgBuf, ASN1T_CoordUTM& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CoordUTM (ASN1CTXT* ctxt_p, ASN1T_CoordUTM value)
{
   Asn1SizeCnst lsize1 = { 0, 15, 15, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PE_CoordUTM: start\n");

   stat = pu_addSizeConstraint (ctxt_p, &lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pe_OctetString (ctxt_p, value.numocts, value.data);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_CoordUTM: end\n");
   return (stat);
}

int ASN1C_CoordUTM::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CoordUTM (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_CoordUTM (ASN1CTXT* ctxt_p, ASN1T_CoordUTM* pvalue)
{
   Asn1SizeCnst lsize1 = { 0, 15, 15, 0 };
   int stat = ASN_OK;

   rtdiag ("asn1PD_CoordUTM: start\n");

   stat = pu_addSizeConstraint (ctxt_p, &lsize1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   stat = pd_OctetString (ctxt_p,
                          &pvalue->numocts,
                          pvalue->data,
                          sizeof(pvalue->data));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_CoordUTM: end\n");

   return (stat);
}

int ASN1C_CoordUTM::Decode ()
{
   return asn1PD_CoordUTM (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfCoordUTM                                            */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfCoordUTM::ASN1C__SeqOfCoordUTM (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfCoordUTM& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfCoordUTM (ASN1CTXT* ctxt_p, ASN1T__SeqOfCoordUTM* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfCoordUTM: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_CoordUTM (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfCoordUTM: end\n");
   return (stat);
}

int ASN1C__SeqOfCoordUTM::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfCoordUTM (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfCoordUTM (ASN1CTXT* ctxt_p, ASN1T__SeqOfCoordUTM* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfCoordUTM: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_CoordUTM);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_CoordUTM (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfCoordUTM: end\n");

   return (stat);
}

int ASN1C__SeqOfCoordUTM::Decode ()
{
   return asn1PD__SeqOfCoordUTM (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Localisation                                              */
/*                                                            */
/**************************************************************/

ASN1C_Localisation::ASN1C_Localisation (
   ASN1MessageBuffer& msgBuf, ASN1T_Localisation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Localisation (ASN1CTXT* ctxt_p, ASN1T_Localisation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Localisation: start\n");

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumTypeLocalisation (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode vecteur_point */

   PU_PUSHNAME (ctxt_p, "vecteur_point");

   stat = asn1PE__SeqOfCoordUTM (ctxt_p, &pvalue->vecteur_point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Localisation: end\n");
   return (stat);
}

int ASN1C_Localisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Localisation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Localisation (ASN1CTXT* ctxt_p, ASN1T_Localisation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Localisation: start\n");

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumTypeLocalisation (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode vecteur_point */

   PU_PUSHNAME (ctxt_p, "vecteur_point");

   stat = asn1PD__SeqOfCoordUTM (ctxt_p, &pvalue->vecteur_point);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Localisation: end\n");

   return (stat);
}

int ASN1C_Localisation::Decode ()
{
   return asn1PD_Localisation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Point                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Point::ASN1C_Point (
   ASN1MessageBuffer& msgBuf, ASN1T_Point& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Point (ASN1CTXT* ctxt_p, ASN1T_Point* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Point: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Point: end\n");
   return (stat);
}

int ASN1C_Point::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Point (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Point (ASN1CTXT* ctxt_p, ASN1T_Point* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Point: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Point: end\n");

   return (stat);
}

int ASN1C_Point::Decode ()
{
   return asn1PD_Point (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Line                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Line::ASN1C_Line (
   ASN1MessageBuffer& msgBuf, ASN1T_Line& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Line (ASN1CTXT* ctxt_p, ASN1T_Line* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Line: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Line: end\n");
   return (stat);
}

int ASN1C_Line::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Line (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Line (ASN1CTXT* ctxt_p, ASN1T_Line* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Line: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Line: end\n");

   return (stat);
}

int ASN1C_Line::Decode ()
{
   return asn1PD_Line (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Itineraire                                                */
/*                                                            */
/**************************************************************/

ASN1C_Itineraire::ASN1C_Itineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_Itineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Itineraire (ASN1CTXT* ctxt_p, ASN1T_Itineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Itineraire: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Itineraire: end\n");
   return (stat);
}

int ASN1C_Itineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Itineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Itineraire (ASN1CTXT* ctxt_p, ASN1T_Itineraire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Itineraire: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Itineraire: end\n");

   return (stat);
}

int ASN1C_Itineraire::Decode ()
{
   return asn1PD_Itineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Polygon                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Polygon::ASN1C_Polygon (
   ASN1MessageBuffer& msgBuf, ASN1T_Polygon& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Polygon (ASN1CTXT* ctxt_p, ASN1T_Polygon* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Polygon: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Polygon: end\n");
   return (stat);
}

int ASN1C_Polygon::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Polygon (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Polygon (ASN1CTXT* ctxt_p, ASN1T_Polygon* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Polygon: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Polygon: end\n");

   return (stat);
}

int ASN1C_Polygon::Decode ()
{
   return asn1PD_Polygon (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Segment                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Segment::ASN1C_Segment (
   ASN1MessageBuffer& msgBuf, ASN1T_Segment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Segment (ASN1CTXT* ctxt_p, ASN1T_Segment* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Segment: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Segment: end\n");
   return (stat);
}

int ASN1C_Segment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Segment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Segment (ASN1CTXT* ctxt_p, ASN1T_Segment* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Segment: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Segment: end\n");

   return (stat);
}

int ASN1C_Segment::Decode ()
{
   return asn1PD_Segment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/

ASN1C_Circle::ASN1C_Circle (
   ASN1MessageBuffer& msgBuf, ASN1T_Circle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Circle (ASN1CTXT* ctxt_p, ASN1T_Circle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Circle: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Circle: end\n");
   return (stat);
}

int ASN1C_Circle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Circle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Circle (ASN1CTXT* ctxt_p, ASN1T_Circle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Circle: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Circle: end\n");

   return (stat);
}

int ASN1C_Circle::Decode ()
{
   return asn1PD_Circle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Ellipse                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Ellipse::ASN1C_Ellipse (
   ASN1MessageBuffer& msgBuf, ASN1T_Ellipse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Ellipse (ASN1CTXT* ctxt_p, ASN1T_Ellipse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Ellipse: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Ellipse: end\n");
   return (stat);
}

int ASN1C_Ellipse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Ellipse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Ellipse (ASN1CTXT* ctxt_p, ASN1T_Ellipse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Ellipse: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Ellipse: end\n");

   return (stat);
}

int ASN1C_Ellipse::Decode ()
{
   return asn1PD_Ellipse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Sector                                                    */
/*                                                            */
/**************************************************************/

ASN1C_Sector::ASN1C_Sector (
   ASN1MessageBuffer& msgBuf, ASN1T_Sector& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Sector (ASN1CTXT* ctxt_p, ASN1T_Sector* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Sector: start\n");

   stat = asn1PE_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Sector: end\n");
   return (stat);
}

int ASN1C_Sector::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Sector (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Sector (ASN1CTXT* ctxt_p, ASN1T_Sector* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Sector: start\n");

   stat = asn1PD_Localisation (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Sector: end\n");

   return (stat);
}

int ASN1C_Sector::Decode ()
{
   return asn1PD_Sector (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListLocalisation                                          */
/*                                                            */
/**************************************************************/

ASN1C_ListLocalisation::ASN1C_ListLocalisation (
   ASN1MessageBuffer& msgBuf, ASN1T_ListLocalisation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListLocalisation (ASN1CTXT* ctxt_p, ASN1T_ListLocalisation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListLocalisation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Localisation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListLocalisation: end\n");
   return (stat);
}

int ASN1C_ListLocalisation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListLocalisation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListLocalisation (ASN1CTXT* ctxt_p, ASN1T_ListLocalisation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListLocalisation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Localisation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Localisation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListLocalisation: end\n");

   return (stat);
}

int ASN1C_ListLocalisation::Decode ()
{
   return asn1PD_ListLocalisation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListPolygon                                               */
/*                                                            */
/**************************************************************/

ASN1C_ListPolygon::ASN1C_ListPolygon (
   ASN1MessageBuffer& msgBuf, ASN1T_ListPolygon& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListPolygon (ASN1CTXT* ctxt_p, ASN1T_ListPolygon* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListPolygon: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Polygon (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListPolygon: end\n");
   return (stat);
}

int ASN1C_ListPolygon::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListPolygon (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListPolygon (ASN1CTXT* ctxt_p, ASN1T_ListPolygon* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListPolygon: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Polygon);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Polygon (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListPolygon: end\n");

   return (stat);
}

int ASN1C_ListPolygon::Decode ()
{
   return asn1PD_ListPolygon (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListItineraire                                            */
/*                                                            */
/**************************************************************/

ASN1C_ListItineraire::ASN1C_ListItineraire (
   ASN1MessageBuffer& msgBuf, ASN1T_ListItineraire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListItineraire (ASN1CTXT* ctxt_p, ASN1T_ListItineraire* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListItineraire: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Itineraire (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListItineraire: end\n");
   return (stat);
}

int ASN1C_ListItineraire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListItineraire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListItineraire (ASN1CTXT* ctxt_p, ASN1T_ListItineraire* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListItineraire: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Itineraire);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Itineraire (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListItineraire: end\n");

   return (stat);
}

int ASN1C_ListItineraire::Decode ()
{
   return asn1PD_ListItineraire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListPoint                                                 */
/*                                                            */
/**************************************************************/

ASN1C_ListPoint::ASN1C_ListPoint (
   ASN1MessageBuffer& msgBuf, ASN1T_ListPoint& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListPoint (ASN1CTXT* ctxt_p, ASN1T_ListPoint* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListPoint: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Point (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListPoint: end\n");
   return (stat);
}

int ASN1C_ListPoint::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListPoint (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListPoint (ASN1CTXT* ctxt_p, ASN1T_ListPoint* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListPoint: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Point);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Point (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListPoint: end\n");

   return (stat);
}

int ASN1C_ListPoint::Decode ()
{
   return asn1PD_ListPoint (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OID                                                       */
/*                                                            */
/**************************************************************/

ASN1C_OID::ASN1C_OID (
   ASN1MessageBuffer& msgBuf, ASN1T_OID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OID (ASN1CTXT* ctxt_p, ASN1T_OID value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_OID: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_OID: end\n");
   return (stat);
}

int ASN1C_OID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OID (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OID (ASN1CTXT* ctxt_p, ASN1T_OID* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_OID: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_OID: end\n");

   return (stat);
}

int ASN1C_OID::Decode ()
{
   return asn1PD_OID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListOID                                                   */
/*                                                            */
/**************************************************************/

ASN1C_ListOID::ASN1C_ListOID (
   ASN1MessageBuffer& msgBuf, ASN1T_ListOID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListOID (ASN1CTXT* ctxt_p, ASN1T_ListOID* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListOID: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_OID (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListOID: end\n");
   return (stat);
}

int ASN1C_ListOID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListOID (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListOID (ASN1CTXT* ctxt_p, ASN1T_ListOID* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListOID: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_OID);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_OID (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListOID: end\n");

   return (stat);
}

int ASN1C_ListOID::Decode ()
{
   return asn1PD_ListOID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TirPion                                                   */
/*                                                            */
/**************************************************************/

ASN1C_TirPion::ASN1C_TirPion (
   ASN1MessageBuffer& msgBuf, ASN1T_TirPion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TirPion (ASN1CTXT* ctxt_p, ASN1T_TirPion value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TirPion: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TirPion: end\n");
   return (stat);
}

int ASN1C_TirPion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TirPion (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TirPion (ASN1CTXT* ctxt_p, ASN1T_TirPion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TirPion: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TirPion: end\n");

   return (stat);
}

int ASN1C_TirPion::Decode ()
{
   return asn1PD_TirPion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TirPopulation                                             */
/*                                                            */
/**************************************************************/

ASN1C_TirPopulation::ASN1C_TirPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_TirPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TirPopulation (ASN1CTXT* ctxt_p, ASN1T_TirPopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TirPopulation: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TirPopulation: end\n");
   return (stat);
}

int ASN1C_TirPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TirPopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TirPopulation (ASN1CTXT* ctxt_p, ASN1T_TirPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TirPopulation: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TirPopulation: end\n");

   return (stat);
}

int ASN1C_TirPopulation::Decode ()
{
   return asn1PD_TirPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Agent                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Agent::ASN1C_Agent (
   ASN1MessageBuffer& msgBuf, ASN1T_Agent& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Agent (ASN1CTXT* ctxt_p, ASN1T_Agent value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Agent: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Agent: end\n");
   return (stat);
}

int ASN1C_Agent::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Agent (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Agent (ASN1CTXT* ctxt_p, ASN1T_Agent* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Agent: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Agent: end\n");

   return (stat);
}

int ASN1C_Agent::Decode ()
{
   return asn1PD_Agent (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Automate                                                  */
/*                                                            */
/**************************************************************/

ASN1C_Automate::ASN1C_Automate (
   ASN1MessageBuffer& msgBuf, ASN1T_Automate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Automate (ASN1CTXT* ctxt_p, ASN1T_Automate value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Automate: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Automate: end\n");
   return (stat);
}

int ASN1C_Automate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Automate (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Automate (ASN1CTXT* ctxt_p, ASN1T_Automate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Automate: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Automate: end\n");

   return (stat);
}

int ASN1C_Automate::Decode ()
{
   return asn1PD_Automate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Population                                                */
/*                                                            */
/**************************************************************/

ASN1C_Population::ASN1C_Population (
   ASN1MessageBuffer& msgBuf, ASN1T_Population& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Population (ASN1CTXT* ctxt_p, ASN1T_Population value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Population: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Population: end\n");
   return (stat);
}

int ASN1C_Population::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Population (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Population (ASN1CTXT* ctxt_p, ASN1T_Population* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Population: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Population: end\n");

   return (stat);
}

int ASN1C_Population::Decode ()
{
   return asn1PD_Population (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Camp                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Camp::ASN1C_Camp (
   ASN1MessageBuffer& msgBuf, ASN1T_Camp& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Camp (ASN1CTXT* ctxt_p, ASN1T_Camp value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Camp: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Camp: end\n");
   return (stat);
}

int ASN1C_Camp::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Camp (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Camp (ASN1CTXT* ctxt_p, ASN1T_Camp* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Camp: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Camp: end\n");

   return (stat);
}

int ASN1C_Camp::Decode ()
{
   return asn1PD_Camp (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Formation                                                 */
/*                                                            */
/**************************************************************/

ASN1C_Formation::ASN1C_Formation (
   ASN1MessageBuffer& msgBuf, ASN1T_Formation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Formation (ASN1CTXT* ctxt_p, ASN1T_Formation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Formation: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Formation: end\n");
   return (stat);
}

int ASN1C_Formation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Formation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Formation (ASN1CTXT* ctxt_p, ASN1T_Formation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Formation: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Formation: end\n");

   return (stat);
}

int ASN1C_Formation::Decode ()
{
   return asn1PD_Formation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  KnowledgeGroup                                            */
/*                                                            */
/**************************************************************/

ASN1C_KnowledgeGroup::ASN1C_KnowledgeGroup (
   ASN1MessageBuffer& msgBuf, ASN1T_KnowledgeGroup& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_KnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_KnowledgeGroup value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_KnowledgeGroup: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_KnowledgeGroup: end\n");
   return (stat);
}

int ASN1C_KnowledgeGroup::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_KnowledgeGroup (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_KnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_KnowledgeGroup* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_KnowledgeGroup: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_KnowledgeGroup: end\n");

   return (stat);
}

int ASN1C_KnowledgeGroup::Decode ()
{
   return asn1PD_KnowledgeGroup (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  KnowledgeAgent                                            */
/*                                                            */
/**************************************************************/

ASN1C_KnowledgeAgent::ASN1C_KnowledgeAgent (
   ASN1MessageBuffer& msgBuf, ASN1T_KnowledgeAgent& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_KnowledgeAgent (ASN1CTXT* ctxt_p, ASN1T_KnowledgeAgent value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_KnowledgeAgent: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_KnowledgeAgent: end\n");
   return (stat);
}

int ASN1C_KnowledgeAgent::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_KnowledgeAgent (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_KnowledgeAgent (ASN1CTXT* ctxt_p, ASN1T_KnowledgeAgent* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_KnowledgeAgent: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_KnowledgeAgent: end\n");

   return (stat);
}

int ASN1C_KnowledgeAgent::Decode ()
{
   return asn1PD_KnowledgeAgent (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  KnowledgeObject                                           */
/*                                                            */
/**************************************************************/

ASN1C_KnowledgeObject::ASN1C_KnowledgeObject (
   ASN1MessageBuffer& msgBuf, ASN1T_KnowledgeObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_KnowledgeObject (ASN1CTXT* ctxt_p, ASN1T_KnowledgeObject value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_KnowledgeObject: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_KnowledgeObject: end\n");
   return (stat);
}

int ASN1C_KnowledgeObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_KnowledgeObject (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_KnowledgeObject (ASN1CTXT* ctxt_p, ASN1T_KnowledgeObject* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_KnowledgeObject: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_KnowledgeObject: end\n");

   return (stat);
}

int ASN1C_KnowledgeObject::Decode ()
{
   return asn1PD_KnowledgeObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  KnowledgePopulation                                       */
/*                                                            */
/**************************************************************/

ASN1C_KnowledgePopulation::ASN1C_KnowledgePopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_KnowledgePopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_KnowledgePopulation (ASN1CTXT* ctxt_p, ASN1T_KnowledgePopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_KnowledgePopulation: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_KnowledgePopulation: end\n");
   return (stat);
}

int ASN1C_KnowledgePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_KnowledgePopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_KnowledgePopulation (ASN1CTXT* ctxt_p, ASN1T_KnowledgePopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_KnowledgePopulation: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_KnowledgePopulation: end\n");

   return (stat);
}

int ASN1C_KnowledgePopulation::Decode ()
{
   return asn1PD_KnowledgePopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListAutomate                                              */
/*                                                            */
/**************************************************************/

ASN1C_ListAutomate::ASN1C_ListAutomate (
   ASN1MessageBuffer& msgBuf, ASN1T_ListAutomate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListAutomate (ASN1CTXT* ctxt_p, ASN1T_ListAutomate* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListAutomate: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Automate (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListAutomate: end\n");
   return (stat);
}

int ASN1C_ListAutomate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListAutomate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListAutomate (ASN1CTXT* ctxt_p, ASN1T_ListAutomate* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListAutomate: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Automate);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Automate (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListAutomate: end\n");

   return (stat);
}

int ASN1C_ListAutomate::Decode ()
{
   return asn1PD_ListAutomate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListAgent                                                 */
/*                                                            */
/**************************************************************/

ASN1C_ListAgent::ASN1C_ListAgent (
   ASN1MessageBuffer& msgBuf, ASN1T_ListAgent& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListAgent (ASN1CTXT* ctxt_p, ASN1T_ListAgent* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListAgent: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Agent (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListAgent: end\n");
   return (stat);
}

int ASN1C_ListAgent::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListAgent (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListAgent (ASN1CTXT* ctxt_p, ASN1T_ListAgent* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListAgent: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Agent);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Agent (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListAgent: end\n");

   return (stat);
}

int ASN1C_ListAgent::Decode ()
{
   return asn1PD_ListAgent (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListKnowledgeAgent                                        */
/*                                                            */
/**************************************************************/

ASN1C_ListKnowledgeAgent::ASN1C_ListKnowledgeAgent (
   ASN1MessageBuffer& msgBuf, ASN1T_ListKnowledgeAgent& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListKnowledgeAgent (ASN1CTXT* ctxt_p, ASN1T_ListKnowledgeAgent* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListKnowledgeAgent: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_KnowledgeAgent (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListKnowledgeAgent: end\n");
   return (stat);
}

int ASN1C_ListKnowledgeAgent::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListKnowledgeAgent (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListKnowledgeAgent (ASN1CTXT* ctxt_p, ASN1T_ListKnowledgeAgent* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListKnowledgeAgent: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_KnowledgeAgent);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_KnowledgeAgent (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListKnowledgeAgent: end\n");

   return (stat);
}

int ASN1C_ListKnowledgeAgent::Decode ()
{
   return asn1PD_ListKnowledgeAgent (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListKnowledgeObject                                       */
/*                                                            */
/**************************************************************/

ASN1C_ListKnowledgeObject::ASN1C_ListKnowledgeObject (
   ASN1MessageBuffer& msgBuf, ASN1T_ListKnowledgeObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListKnowledgeObject (ASN1CTXT* ctxt_p, ASN1T_ListKnowledgeObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListKnowledgeObject: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_KnowledgeObject (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListKnowledgeObject: end\n");
   return (stat);
}

int ASN1C_ListKnowledgeObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListKnowledgeObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListKnowledgeObject (ASN1CTXT* ctxt_p, ASN1T_ListKnowledgeObject* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListKnowledgeObject: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_KnowledgeObject);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_KnowledgeObject (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListKnowledgeObject: end\n");

   return (stat);
}

int ASN1C_ListKnowledgeObject::Decode ()
{
   return asn1PD_ListKnowledgeObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListCamp                                                  */
/*                                                            */
/**************************************************************/

ASN1C_ListCamp::ASN1C_ListCamp (
   ASN1MessageBuffer& msgBuf, ASN1T_ListCamp& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListCamp (ASN1CTXT* ctxt_p, ASN1T_ListCamp* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListCamp: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Camp (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListCamp: end\n");
   return (stat);
}

int ASN1C_ListCamp::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListCamp (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListCamp (ASN1CTXT* ctxt_p, ASN1T_ListCamp* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListCamp: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Camp);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Camp (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListCamp: end\n");

   return (stat);
}

int ASN1C_ListCamp::Decode ()
{
   return asn1PD_ListCamp (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListPopulation                                            */
/*                                                            */
/**************************************************************/

ASN1C_ListPopulation::ASN1C_ListPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_ListPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListPopulation (ASN1CTXT* ctxt_p, ASN1T_ListPopulation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListPopulation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Population (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListPopulation: end\n");
   return (stat);
}

int ASN1C_ListPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListPopulation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListPopulation (ASN1CTXT* ctxt_p, ASN1T_ListPopulation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListPopulation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Population);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Population (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListPopulation: end\n");

   return (stat);
}

int ASN1C_ListPopulation::Decode ()
{
   return asn1PD_ListPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListFormation                                             */
/*                                                            */
/**************************************************************/

ASN1C_ListFormation::ASN1C_ListFormation (
   ASN1MessageBuffer& msgBuf, ASN1T_ListFormation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListFormation (ASN1CTXT* ctxt_p, ASN1T_ListFormation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ListFormation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Formation (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ListFormation: end\n");
   return (stat);
}

int ASN1C_ListFormation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListFormation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListFormation (ASN1CTXT* ctxt_p, ASN1T_ListFormation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ListFormation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Formation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Formation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ListFormation: end\n");

   return (stat);
}

int ASN1C_ListFormation::Decode ()
{
   return asn1PD_ListFormation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypeEquipement                                            */
/*                                                            */
/**************************************************************/

ASN1C_TypeEquipement::ASN1C_TypeEquipement (
   ASN1MessageBuffer& msgBuf, ASN1T_TypeEquipement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypeEquipement (ASN1CTXT* ctxt_p, ASN1T_TypeEquipement value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypeEquipement: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypeEquipement: end\n");
   return (stat);
}

int ASN1C_TypeEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypeEquipement (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypeEquipement (ASN1CTXT* ctxt_p, ASN1T_TypeEquipement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypeEquipement: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypeEquipement: end\n");

   return (stat);
}

int ASN1C_TypeEquipement::Decode ()
{
   return asn1PD_TypeEquipement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypeDotation                                              */
/*                                                            */
/**************************************************************/

ASN1C_TypeDotation::ASN1C_TypeDotation (
   ASN1MessageBuffer& msgBuf, ASN1T_TypeDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypeDotation (ASN1CTXT* ctxt_p, ASN1T_TypeDotation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypeDotation: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypeDotation: end\n");
   return (stat);
}

int ASN1C_TypeDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypeDotation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypeDotation (ASN1CTXT* ctxt_p, ASN1T_TypeDotation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypeDotation: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypeDotation: end\n");

   return (stat);
}

int ASN1C_TypeDotation::Decode ()
{
   return asn1PD_TypeDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypeDotationTrancheD                                      */
/*                                                            */
/**************************************************************/

ASN1C_TypeDotationTrancheD::ASN1C_TypeDotationTrancheD (
   ASN1MessageBuffer& msgBuf, ASN1T_TypeDotationTrancheD& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypeDotationTrancheD (ASN1CTXT* ctxt_p, ASN1T_TypeDotationTrancheD value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypeDotationTrancheD: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypeDotationTrancheD: end\n");
   return (stat);
}

int ASN1C_TypeDotationTrancheD::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypeDotationTrancheD (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypeDotationTrancheD (ASN1CTXT* ctxt_p, ASN1T_TypeDotationTrancheD* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypeDotationTrancheD: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypeDotationTrancheD: end\n");

   return (stat);
}

int ASN1C_TypeDotationTrancheD::Decode ()
{
   return asn1PD_TypeDotationTrancheD (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypePanne                                                 */
/*                                                            */
/**************************************************************/

ASN1C_TypePanne::ASN1C_TypePanne (
   ASN1MessageBuffer& msgBuf, ASN1T_TypePanne& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypePanne (ASN1CTXT* ctxt_p, ASN1T_TypePanne value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypePanne: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypePanne: end\n");
   return (stat);
}

int ASN1C_TypePanne::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypePanne (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypePanne (ASN1CTXT* ctxt_p, ASN1T_TypePanne* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypePanne: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypePanne: end\n");

   return (stat);
}

int ASN1C_TypePanne::Decode ()
{
   return asn1PD_TypePanne (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypePion                                                  */
/*                                                            */
/**************************************************************/

ASN1C_TypePion::ASN1C_TypePion (
   ASN1MessageBuffer& msgBuf, ASN1T_TypePion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypePion (ASN1CTXT* ctxt_p, ASN1T_TypePion value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypePion: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypePion: end\n");
   return (stat);
}

int ASN1C_TypePion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypePion (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypePion (ASN1CTXT* ctxt_p, ASN1T_TypePion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypePion: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypePion: end\n");

   return (stat);
}

int ASN1C_TypePion::Decode ()
{
   return asn1PD_TypePion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypeAutomate                                              */
/*                                                            */
/**************************************************************/

ASN1C_TypeAutomate::ASN1C_TypeAutomate (
   ASN1MessageBuffer& msgBuf, ASN1T_TypeAutomate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypeAutomate (ASN1CTXT* ctxt_p, ASN1T_TypeAutomate value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypeAutomate: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypeAutomate: end\n");
   return (stat);
}

int ASN1C_TypeAutomate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypeAutomate (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypeAutomate (ASN1CTXT* ctxt_p, ASN1T_TypeAutomate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypeAutomate: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypeAutomate: end\n");

   return (stat);
}

int ASN1C_TypeAutomate::Decode ()
{
   return asn1PD_TypeAutomate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TypePopulation                                            */
/*                                                            */
/**************************************************************/

ASN1C_TypePopulation::ASN1C_TypePopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_TypePopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TypePopulation (ASN1CTXT* ctxt_p, ASN1T_TypePopulation value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TypePopulation: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_TypePopulation: end\n");
   return (stat);
}

int ASN1C_TypePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TypePopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_TypePopulation (ASN1CTXT* ctxt_p, ASN1T_TypePopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TypePopulation: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_TypePopulation: end\n");

   return (stat);
}

int ASN1C_TypePopulation::Decode ()
{
   return asn1PD_TypePopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Pourcentage                                               */
/*                                                            */
/**************************************************************/

ASN1C_Pourcentage::ASN1C_Pourcentage (
   ASN1MessageBuffer& msgBuf, ASN1T_Pourcentage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Pourcentage (ASN1CTXT* ctxt_p, ASN1T_Pourcentage value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Pourcentage: start\n");

   if ( (value >= 0 && value <= 100) ) {
      stat = pe_ConsInteger (ctxt_p, value, 0, 100);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);


   rtdiag ("asn1PE_Pourcentage: end\n");
   return (stat);
}

int ASN1C_Pourcentage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Pourcentage (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Pourcentage (ASN1CTXT* ctxt_p, ASN1T_Pourcentage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Pourcentage: start\n");

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 100);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Pourcentage: end\n");

   return (stat);
}

int ASN1C_Pourcentage::Decode ()
{
   return asn1PD_Pourcentage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PourcentageLibre                                          */
/*                                                            */
/**************************************************************/

ASN1C_PourcentageLibre::ASN1C_PourcentageLibre (
   ASN1MessageBuffer& msgBuf, ASN1T_PourcentageLibre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PourcentageLibre (ASN1CTXT* ctxt_p, ASN1T_PourcentageLibre value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_PourcentageLibre: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_PourcentageLibre: end\n");
   return (stat);
}

int ASN1C_PourcentageLibre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PourcentageLibre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_PourcentageLibre (ASN1CTXT* ctxt_p, ASN1T_PourcentageLibre* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_PourcentageLibre: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_PourcentageLibre: end\n");

   return (stat);
}

int ASN1C_PourcentageLibre::Decode ()
{
   return asn1PD_PourcentageLibre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Hauteur                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Hauteur::ASN1C_Hauteur (
   ASN1MessageBuffer& msgBuf, ASN1T_Hauteur& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Hauteur (ASN1CTXT* ctxt_p, ASN1T_Hauteur value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Hauteur: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Hauteur: end\n");
   return (stat);
}

int ASN1C_Hauteur::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Hauteur (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Hauteur (ASN1CTXT* ctxt_p, ASN1T_Hauteur* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Hauteur: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Hauteur: end\n");

   return (stat);
}

int ASN1C_Hauteur::Decode ()
{
   return asn1PD_Hauteur (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Altitude                                                  */
/*                                                            */
/**************************************************************/

ASN1C_Altitude::ASN1C_Altitude (
   ASN1MessageBuffer& msgBuf, ASN1T_Altitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Altitude (ASN1CTXT* ctxt_p, ASN1T_Altitude value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Altitude: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Altitude: end\n");
   return (stat);
}

int ASN1C_Altitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Altitude (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Altitude (ASN1CTXT* ctxt_p, ASN1T_Altitude* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Altitude: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Altitude: end\n");

   return (stat);
}

int ASN1C_Altitude::Decode ()
{
   return asn1PD_Altitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Vitesse                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Vitesse::ASN1C_Vitesse (
   ASN1MessageBuffer& msgBuf, ASN1T_Vitesse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Vitesse (ASN1CTXT* ctxt_p, ASN1T_Vitesse value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Vitesse: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Vitesse: end\n");
   return (stat);
}

int ASN1C_Vitesse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Vitesse (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Vitesse (ASN1CTXT* ctxt_p, ASN1T_Vitesse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Vitesse: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Vitesse: end\n");

   return (stat);
}

int ASN1C_Vitesse::Decode ()
{
   return asn1PD_Vitesse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Angle                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Angle::ASN1C_Angle (
   ASN1MessageBuffer& msgBuf, ASN1T_Angle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Angle (ASN1CTXT* ctxt_p, ASN1T_Angle value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Angle: start\n");

   if ( (value >= 0 && value <= 360) ) {
      stat = pe_ConsInteger (ctxt_p, value, 0, 360);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);


   rtdiag ("asn1PE_Angle: end\n");
   return (stat);
}

int ASN1C_Angle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Angle (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Angle (ASN1CTXT* ctxt_p, ASN1T_Angle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Angle: start\n");

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 360);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Angle: end\n");

   return (stat);
}

int ASN1C_Angle::Decode ()
{
   return asn1PD_Angle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Direction                                                 */
/*                                                            */
/**************************************************************/

ASN1C_Direction::ASN1C_Direction (
   ASN1MessageBuffer& msgBuf, ASN1T_Direction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Direction (ASN1CTXT* ctxt_p, ASN1T_Direction value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Direction: start\n");

   if ( (value >= 0 && value <= 360) ) {
      stat = pe_ConsInteger (ctxt_p, value, 0, 360);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   }
   else
      return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);


   rtdiag ("asn1PE_Direction: end\n");
   return (stat);
}

int ASN1C_Direction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Direction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Direction (ASN1CTXT* ctxt_p, ASN1T_Direction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Direction: start\n");

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 360);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_Direction: end\n");

   return (stat);
}

int ASN1C_Direction::Decode ()
{
   return asn1PD_Direction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumGDH_Qualificatif                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumGDH_Qualificatif::ASN1C_EnumGDH_Qualificatif (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumGDH_Qualificatif& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumGDH_Qualificatif (ASN1CTXT* ctxt_p, ASN1T_EnumGDH_Qualificatif value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumGDH_Qualificatif: start\n");

   switch (value) {
      case EnumGDH_Qualificatif::at: ui = 0; break;
      case EnumGDH_Qualificatif::after: ui = 1; break;
      case EnumGDH_Qualificatif::as_of: ui = 2; break;
      case EnumGDH_Qualificatif::before: ui = 3; break;
      case EnumGDH_Qualificatif::cleared: ui = 4; break;
      case EnumGDH_Qualificatif::due: ui = 5; break;
      case EnumGDH_Qualificatif::end: ui = 6; break;
      case EnumGDH_Qualificatif::off: ui = 7; break;
      case EnumGDH_Qualificatif::on: ui = 8; break;
      case EnumGDH_Qualificatif::since: ui = 9; break;
      case EnumGDH_Qualificatif::start: ui = 10; break;
      case EnumGDH_Qualificatif::until: ui = 11; break;
      case EnumGDH_Qualificatif::wef: ui = 12; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumGDH_Qualificatif: end\n");
   return (stat);
}

int ASN1C_EnumGDH_Qualificatif::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumGDH_Qualificatif (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumGDH_Qualificatif (ASN1CTXT* ctxt_p, ASN1T_EnumGDH_Qualificatif* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumGDH_Qualificatif: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumGDH_Qualificatif::at; break;
      case 1: *pvalue = EnumGDH_Qualificatif::after; break;
      case 2: *pvalue = EnumGDH_Qualificatif::as_of; break;
      case 3: *pvalue = EnumGDH_Qualificatif::before; break;
      case 4: *pvalue = EnumGDH_Qualificatif::cleared; break;
      case 5: *pvalue = EnumGDH_Qualificatif::due; break;
      case 6: *pvalue = EnumGDH_Qualificatif::end; break;
      case 7: *pvalue = EnumGDH_Qualificatif::off; break;
      case 8: *pvalue = EnumGDH_Qualificatif::on; break;
      case 9: *pvalue = EnumGDH_Qualificatif::since; break;
      case 10: *pvalue = EnumGDH_Qualificatif::start; break;
      case 11: *pvalue = EnumGDH_Qualificatif::until; break;
      case 12: *pvalue = EnumGDH_Qualificatif::wef; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumGDH_Qualificatif: end\n");

   return (stat);
}

int ASN1C_EnumGDH_Qualificatif::Decode ()
{
   return asn1PD_EnumGDH_Qualificatif (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  GDH                                                       */
/*                                                            */
/**************************************************************/

ASN1C_GDH::ASN1C_GDH (
   ASN1MessageBuffer& msgBuf, ASN1T_GDH& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_GDH (ASN1CTXT* ctxt_p, ASN1T_GDH* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_GDH: start\n");

   /* encode datation */

   PU_PUSHNAME (ctxt_p, "datation");

   stat = pe_UnconsInteger (ctxt_p, pvalue->datation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode qualificatif */

   PU_PUSHNAME (ctxt_p, "qualificatif");

   stat = asn1PE_EnumGDH_Qualificatif (ctxt_p, pvalue->qualificatif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_GDH: end\n");
   return (stat);
}

int ASN1C_GDH::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_GDH (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_GDH (ASN1CTXT* ctxt_p, ASN1T_GDH* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_GDH: start\n");

   /* decode datation */

   PU_PUSHNAME (ctxt_p, "datation");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->datation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode qualificatif */

   PU_PUSHNAME (ctxt_p, "qualificatif");

   stat = asn1PD_EnumGDH_Qualificatif (ctxt_p, &pvalue->qualificatif);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_GDH: end\n");

   return (stat);
}

int ASN1C_GDH::Decode ()
{
   return asn1PD_GDH (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumFamilleDotation                                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumFamilleDotation::ASN1C_EnumFamilleDotation (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumFamilleDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumFamilleDotation (ASN1CTXT* ctxt_p, ASN1T_EnumFamilleDotation value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumFamilleDotation: start\n");

   switch (value) {
      case EnumFamilleDotation::munition: ui = 0; break;
      case EnumFamilleDotation::carburant: ui = 1; break;
      case EnumFamilleDotation::explosif: ui = 2; break;
      case EnumFamilleDotation::mine: ui = 3; break;
      case EnumFamilleDotation::barbele: ui = 4; break;
      case EnumFamilleDotation::piece: ui = 5; break;
      case EnumFamilleDotation::ration: ui = 6; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumFamilleDotation: end\n");
   return (stat);
}

int ASN1C_EnumFamilleDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumFamilleDotation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumFamilleDotation (ASN1CTXT* ctxt_p, ASN1T_EnumFamilleDotation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumFamilleDotation: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumFamilleDotation::munition; break;
      case 1: *pvalue = EnumFamilleDotation::carburant; break;
      case 2: *pvalue = EnumFamilleDotation::explosif; break;
      case 3: *pvalue = EnumFamilleDotation::mine; break;
      case 4: *pvalue = EnumFamilleDotation::barbele; break;
      case 5: *pvalue = EnumFamilleDotation::piece; break;
      case 6: *pvalue = EnumFamilleDotation::ration; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumFamilleDotation: end\n");

   return (stat);
}

int ASN1C_EnumFamilleDotation::Decode ()
{
   return asn1PD_EnumFamilleDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumFamilleMunition                                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumFamilleMunition::ASN1C_EnumFamilleMunition (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumFamilleMunition& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumFamilleMunition (ASN1CTXT* ctxt_p, ASN1T_EnumFamilleMunition value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumFamilleMunition: start\n");

   switch (value) {
      case EnumFamilleMunition::obus: ui = 0; break;
      case EnumFamilleMunition::missile_air: ui = 1; break;
      case EnumFamilleMunition::missile_sol: ui = 2; break;
      case EnumFamilleMunition::mitraille: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumFamilleMunition: end\n");
   return (stat);
}

int ASN1C_EnumFamilleMunition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumFamilleMunition (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumFamilleMunition (ASN1CTXT* ctxt_p, ASN1T_EnumFamilleMunition* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumFamilleMunition: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumFamilleMunition::obus; break;
      case 1: *pvalue = EnumFamilleMunition::missile_air; break;
      case 2: *pvalue = EnumFamilleMunition::missile_sol; break;
      case 3: *pvalue = EnumFamilleMunition::mitraille; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumFamilleMunition: end\n");

   return (stat);
}

int ASN1C_EnumFamilleMunition::Decode ()
{
   return asn1PD_EnumFamilleMunition (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitIdentificationLevel                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitIdentificationLevel::ASN1C_EnumUnitIdentificationLevel (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitIdentificationLevel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitIdentificationLevel (ASN1CTXT* ctxt_p, ASN1T_EnumUnitIdentificationLevel value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitIdentificationLevel: start\n");

   switch (value) {
      case EnumUnitIdentificationLevel::identifiee: ui = 0; break;
      case EnumUnitIdentificationLevel::reconnue: ui = 1; break;
      case EnumUnitIdentificationLevel::detectee: ui = 2; break;
      case EnumUnitIdentificationLevel::signale: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitIdentificationLevel: end\n");
   return (stat);
}

int ASN1C_EnumUnitIdentificationLevel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitIdentificationLevel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitIdentificationLevel (ASN1CTXT* ctxt_p, ASN1T_EnumUnitIdentificationLevel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitIdentificationLevel: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitIdentificationLevel::identifiee; break;
      case 1: *pvalue = EnumUnitIdentificationLevel::reconnue; break;
      case 2: *pvalue = EnumUnitIdentificationLevel::detectee; break;
      case 3: *pvalue = EnumUnitIdentificationLevel::signale; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitIdentificationLevel: end\n");

   return (stat);
}

int ASN1C_EnumUnitIdentificationLevel::Decode ()
{
   return asn1PD_EnumUnitIdentificationLevel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumNatureLevel                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumNatureLevel::ASN1C_EnumNatureLevel (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumNatureLevel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumNatureLevel (ASN1CTXT* ctxt_p, ASN1T_EnumNatureLevel value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumNatureLevel: start\n");

   switch (value) {
      case EnumNatureLevel::none: ui = 0; break;
      case EnumNatureLevel::o: ui = 1; break;
      case EnumNatureLevel::oo: ui = 2; break;
      case EnumNatureLevel::ooo: ui = 3; break;
      case EnumNatureLevel::i: ui = 4; break;
      case EnumNatureLevel::ii: ui = 5; break;
      case EnumNatureLevel::iii: ui = 6; break;
      case EnumNatureLevel::x: ui = 7; break;
      case EnumNatureLevel::xx: ui = 8; break;
      case EnumNatureLevel::xxx: ui = 9; break;
      case EnumNatureLevel::xxxx: ui = 10; break;
      case EnumNatureLevel::xxxxx: ui = 11; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 11);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumNatureLevel: end\n");
   return (stat);
}

int ASN1C_EnumNatureLevel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumNatureLevel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumNatureLevel (ASN1CTXT* ctxt_p, ASN1T_EnumNatureLevel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumNatureLevel: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 11);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumNatureLevel::none; break;
      case 1: *pvalue = EnumNatureLevel::o; break;
      case 2: *pvalue = EnumNatureLevel::oo; break;
      case 3: *pvalue = EnumNatureLevel::ooo; break;
      case 4: *pvalue = EnumNatureLevel::i; break;
      case 5: *pvalue = EnumNatureLevel::ii; break;
      case 6: *pvalue = EnumNatureLevel::iii; break;
      case 7: *pvalue = EnumNatureLevel::x; break;
      case 8: *pvalue = EnumNatureLevel::xx; break;
      case 9: *pvalue = EnumNatureLevel::xxx; break;
      case 10: *pvalue = EnumNatureLevel::xxxx; break;
      case 11: *pvalue = EnumNatureLevel::xxxxx; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumNatureLevel: end\n");

   return (stat);
}

int ASN1C_EnumNatureLevel::Decode ()
{
   return asn1PD_EnumNatureLevel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  NatureAtlas                                               */
/*                                                            */
/**************************************************************/

ASN1C_NatureAtlas::ASN1C_NatureAtlas (
   ASN1MessageBuffer& msgBuf, ASN1T_NatureAtlas& data) :
   ASN1CBitStr (msgBuf, data.data, data.numbits, 16), msgData(data)
{}

EXTERN int asn1PE_NatureAtlas (ASN1CTXT* ctxt_p, ASN1T_NatureAtlas value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_NatureAtlas: start\n");

   stat = pe_BitString (ctxt_p, value.numbits, value.data);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_NatureAtlas: end\n");
   return (stat);
}

int ASN1C_NatureAtlas::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_NatureAtlas (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_NatureAtlas (ASN1CTXT* ctxt_p, ASN1T_NatureAtlas* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_NatureAtlas: start\n");

   stat = pd_BitString (ctxt_p,
                        &pvalue->numbits,
                        pvalue->data,
                        sizeof(pvalue->data));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_NatureAtlas: end\n");

   return (stat);
}

int ASN1C_NatureAtlas::Decode ()
{
   return asn1PD_NatureAtlas (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumHumanWound                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumHumanWound::ASN1C_EnumHumanWound (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumHumanWound& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumHumanWound (ASN1CTXT* ctxt_p, ASN1T_EnumHumanWound value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumHumanWound: start\n");

   switch (value) {
      case EnumHumanWound::non_blesse: ui = 0; break;
      case EnumHumanWound::mort: ui = 1; break;
      case EnumHumanWound::blesse_urgence_1: ui = 2; break;
      case EnumHumanWound::blesse_urgence_2: ui = 3; break;
      case EnumHumanWound::blesse_urgence_3: ui = 4; break;
      case EnumHumanWound::blesse_urgence_extreme: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumHumanWound: end\n");
   return (stat);
}

int ASN1C_EnumHumanWound::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumHumanWound (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumHumanWound (ASN1CTXT* ctxt_p, ASN1T_EnumHumanWound* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumHumanWound: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumHumanWound::non_blesse; break;
      case 1: *pvalue = EnumHumanWound::mort; break;
      case 2: *pvalue = EnumHumanWound::blesse_urgence_1; break;
      case 3: *pvalue = EnumHumanWound::blesse_urgence_2; break;
      case 4: *pvalue = EnumHumanWound::blesse_urgence_3; break;
      case 5: *pvalue = EnumHumanWound::blesse_urgence_extreme; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumHumanWound: end\n");

   return (stat);
}

int ASN1C_EnumHumanWound::Decode ()
{
   return asn1PD_EnumHumanWound (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumHumanRank                                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumHumanRank::ASN1C_EnumHumanRank (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumHumanRank& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumHumanRank (ASN1CTXT* ctxt_p, ASN1T_EnumHumanRank value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumHumanRank: start\n");

   switch (value) {
      case EnumHumanRank::officier: ui = 0; break;
      case EnumHumanRank::sous_officer: ui = 1; break;
      case EnumHumanRank::mdr: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumHumanRank: end\n");
   return (stat);
}

int ASN1C_EnumHumanRank::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumHumanRank (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumHumanRank (ASN1CTXT* ctxt_p, ASN1T_EnumHumanRank* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumHumanRank: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumHumanRank::officier; break;
      case 1: *pvalue = EnumHumanRank::sous_officer; break;
      case 2: *pvalue = EnumHumanRank::mdr; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumHumanRank: end\n");

   return (stat);
}

int ASN1C_EnumHumanRank::Decode ()
{
   return asn1PD_EnumHumanRank (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeHierarchyErrorCode                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeHierarchyErrorCode::ASN1C_EnumChangeHierarchyErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeHierarchyErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeHierarchyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeHierarchyErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeHierarchyErrorCode: start\n");

   switch (value) {
      case EnumChangeHierarchyErrorCode::no_error: ui = 0; break;
      case EnumChangeHierarchyErrorCode::error_invalid_pion: ui = 1; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate: ui = 2; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_tc2: ui = 3; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_maintenance: ui = 4; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_sante: ui = 5; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_ravitaillement: ui = 6; break;
      case EnumChangeHierarchyErrorCode::error_unit_surrendered: ui = 7; break;
      case EnumChangeHierarchyErrorCode::error_invalid_camp: ui = 8; break;
      case EnumChangeHierarchyErrorCode::error_invalid_groupe_connaissance: ui = 9; break;
      case EnumChangeHierarchyErrorCode::error_camps_incompatibles: ui = 10; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 10);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeHierarchyErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeHierarchyErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeHierarchyErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeHierarchyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeHierarchyErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeHierarchyErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 10);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeHierarchyErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_pion; break;
      case 2: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate; break;
      case 3: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_tc2; break;
      case 4: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_maintenance; break;
      case 5: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_sante; break;
      case 6: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_ravitaillement; break;
      case 7: *pvalue = EnumChangeHierarchyErrorCode::error_unit_surrendered; break;
      case 8: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_camp; break;
      case 9: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_groupe_connaissance; break;
      case 10: *pvalue = EnumChangeHierarchyErrorCode::error_camps_incompatibles; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeHierarchyErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeHierarchyErrorCode::Decode ()
{
   return asn1PD_EnumChangeHierarchyErrorCode (mpContext->GetPtr(), &msgData);
}


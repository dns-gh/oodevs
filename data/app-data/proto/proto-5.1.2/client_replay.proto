// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @file
 *  @brief Messages from clients to the replay module
 *  @addtogroup Replay
 *  @{
 */

/** @struct ControlSkipToTick
    @brief Skips to a given tick

    @see ControlSkipToTickAck
*/
message ControlSkipToTick {
    //! The tick number
    required int32 tick = 1;
}

/** @struct TimeTableRequest
    @brief Requests datetime information in a specified tick range

    @see TimeTableRequestAck
*/
message TimeTableRequest {
    /** @struct TimeRange
        @brief A time range
    */
    message TimeRange {
        //! The range first tick
        required int32 begin_tick = 1;
        //! The range last tick
        required int32 end_tick   = 2;
    }
    //! The time range
    required TimeRange tick_range = 1;
}

/** @struct ForceRefreshDataRequest
    @brief Force replayer to refresh data
*/
message ForceRefreshDataRequest {
}

/** @struct ClientToReplay
    @brief Wraps available messages going from client to replay

    This is the actual message sent over the network.
*/
message ClientToReplay {
    /** @struct Content
        @brief The possible messages contained in a client to replay
               message
        @warning Each Content message must contain exactly one of the
                 possible messages.
    */
    message Content {
        //! A message to skip to a given tick
        optional ControlSkipToTick       control_skip_to_tick       = 1;
        //! A message to change the time factor of the replay
        optional ControlChangeTimeFactor control_change_time_factor = 2;
        //! A message to stop the replay
        optional ControlStop             control_stop               = 3;
        //! A message to pause the replay
        optional ControlPause            control_pause              = 4;
        //! A message to resume the replay
        optional ControlResume           control_resume             = 5;
        //! A message to request datetime information
        optional TimeTableRequest        time_table_request         = 6;
        //! A message to force data reload
        optional ForceRefreshDataRequest force_refresh_data_request = 7;
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is used to fill the "context" fields in the response
        messages. This context allows the client application to put an
        unique identifier (based for instance on MAC address), thus
        allowing to track response message matching a specific request
        emitted by the client.
    */
    optional int32   context = 1;
    //! A field containing one of the messages to be sent
    required Content message = 2;
}

/** @}*/

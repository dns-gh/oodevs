use_priority        =   no;
max_instances       =   10;
max_activations     =   10;

actuators = deplacement, ordre;

default Default()
{
}

behavior BEH_Defaut( id nDummy )
{
    /*
    DEC_Maintenance_ActiverChaine();
    DEC_Sante_ActiverChaine();
    DEC_Ravitaillement_ActiverChaine();
    */
            
 //   DEC_RC( eRC_Trace, "cock shut up" );
//    DEC_RC( eRC_TraceID, 2.4 );
}

behavior BEH_MoveTo( T_Mission_Pion_Test_MoveTo mission )
{
    when updated:
    {
/*        persistent T_PerceptionPoint perception  = 0;
        persistent T_PerceptionPoint perception2 = 0;
        persistent bool         bPerceptionFinished  = false;
        persistent bool         bPerception2Finished = false;
    
        if ( DIA_ModuleBegins() )
        {
            perception2 = DEC_Perception_StartReconnaissancePoint( DEC_ListePoints_GetAt( mission.itineraire_, 0 ), 1000, bPerception2Finished, 0.68 );
            perception  = DEC_Perception_StartReconnaissancePoint( mission.pointDirLocked_, 1000, bPerceptionFinished );
            DEC_Debug( "Debut perception sur " + DEC_PointToString( mission.pointDirLocked_ ) );
            DEC_Debug( "Debut perception sur " + DEC_PointToString( DEC_ListePoints_GetAt( mission.itineraire_, 0 ) ) );
        }
        
        if ( bPerceptionFinished == true && perception != 0 )
        {
            DEC_Perception_StopReconnaissancePoint( perception );
            DEC_Debug( "Fin perception sur " + DEC_PointToString( mission.pointDirLocked_ ) );
            perception = 0;
        }
        
        if ( bPerception2Finished == true && perception2 != 0 )
        {
            DEC_Perception_StopReconnaissancePoint( perception2 );
            DEC_Debug( "Fin perception sur " + DEC_PointToString( DEC_ListePoints_GetAt( mission.itineraire_, 0 ) ) );
            perception2 = 0;
        }
*/    
        persistent T_Itineraire            itineraire = 0;
        persistent T_Action                actionMove;
        persistent E_EtatActionDeplacement nEtatDeplacement;
               
        if( itineraire == 0 )
        {
            itineraire = DEC_CreerItineraireListe( mission.itineraire_, mission.typeItineraire_ );            
            //itineraire = DEC_CreerItineraireListe( mission.itineraire_, ePathSurete, ePathIgnoreAll, ePathInfoEvitement );
            //itineraire = DEC_CreerItineraire( DEC_Agent_Position(), nTypePath, nTypePathIgnore, nTypePathInfo );
        }
      
        
        E_EtatCalculItineraire nEtatChemin = DEC_Itineraire_Etat( itineraire );
        switch( nEtatChemin )
        {
            case eItineraire_Impossible:
            case eItineraire_Annule:
            {       
                DEC_Debug( "Fin calcul chemin : " + EnumToString( nEtatChemin, E_EtatCalculItineraire ) );
                halt;
            }       
            case eItineraire_CalculEnCours:
            {       
                DEC_Debug( "Calcul chemin en cours" );
                break;
            }       
            case eItineraire_Invalide:
            {       
                DEC_Debug( "Calcul chemin invalide XXXXXXXXXX NE DEVRAIT PAS ARRIVER" );
                break;
            }        
            
            case eItineraire_Valide:
            case eItineraire_Partiel:
            {
                if( actionMove == 0 )
                {
                    if ( mission.verrouillageVision_ == E_Verrouillage_Direction )
                    {
                        DEC_Debug( "Vision verrouillee sur direction" );
                        DEC_Perception_VisionVerrouilleeSurDirection( mission.visionDirection_ );
                    }
                    else if ( mission.verrouillageVision_ == E_Verrouillage_Point )
                    {
                        DEC_Debug( "Vision verrouillee sur position" );
                        DEC_Perception_VisionVerrouilleeSurPoint( mission.visionPoint_ );
                    }
                    else
                    {
                        DEC_Debug( "Vision non verrouillee" );
                        DEC_Perception_VisionNormale();
                    }

                    actionMove = DEC_StartDeplacement( nEtatDeplacement, itineraire );
                } 
                DEC_Debug( "Deplacement etat : " + EnumToString( nEtatDeplacement, E_EtatActionDeplacement ) );                   

                T_Point vExtr1 = DEC_Itineraire_ExtrapolerPosition( 10, true );
                T_Point vExtr2 = DEC_Itineraire_ExtrapolerPosition( 10, false );

                DEC_Debug( "Points extrapolation : " + DEC_PointToString( vExtr1 ) + " " + DEC_PointToString( vExtr2 ) );
                
                DEC_Geometrie_DetruirePoint( vExtr1 );
                DEC_Geometrie_DetruirePoint( vExtr2 );
                    
                T_ConnaissanceObjet objet;
                float               rDist;
                E_ValiditeRequete   nValidite;
                if( DEC_Itineraire_ProchainObjet( objet, rDist, eTypeObjectNuageNBC, eTypeObjectBouchonMines ) )
                    DEC_Debug( "PROCHAIN OBJET SUR L'ITINERAIRE : " + FloatToString( rDist ) + " mètres"  + " Type : " + EnumToString( DEC_ConnaissanceObjet_Type( objet, nValidite ), E_TypeObject ) );
                else
                    DEC_Debug( "PAS D'OBJET SUR L'ITINERAIRE" );                
                        
                break;
            }
        }
        
        persistent float rBMS = 0;
        rBMS = rBMS + 1;
        if( rBMS == 50 )
        {
            if( actionMove != 0 )
                DEC_PauseAction( actionMove );
        }
        else if( rBMS == 100 )
        {
            if( actionMove != 0 )
                DEC_ReprendAction( actionMove );
            rBMS = 0;
        }       
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        DEC_DetruireItineraire( itineraire );
    }    
}

behavior MIS_Pion_Test_MoveTo( T_Mission_Pion_Test_MoveTo mission, id nDummy )
{
    when updated:
    {
        //DEC_Perception_Furtivite( 0 );
        persistent T_Action                       currentAction;
        persistent E_EtatActionEmbarquerDebarquer nDebarquementReturn;
        
        behavior BEH_MoveTo( mission );

        if( DIA_ModuleBegins() )
        {
            DEC_RC( eRC_RAS );
            //DEC_RC( eRC_DemandeAppui, eDemandeAppui_Genie );
        }
    }
    on spontaneous end:
    {
        //DEC_Perception_Furtivite( 1 );
        DEC_Debug( "MIS_Pion_Test_MoveTo : on spontaneous end" );
        DEC_StopAction( currentAction );
    }
}



behavior MIS_Pion_Test_CreateBypass( T_Mission_Pion_Test_CreateBypass mission, id nDummy )
{
    when updated:
    {
        persistent T_Action                       currentAction;
        persistent E_EtatActionObjet              nState;

        if( DIA_ModuleBegins() )
        {
            E_ValiditeRequete nFusse;
            //DEC_Circulation_EquiperItineraireLogistique( mission.objet_, nFusse );
        }
    }
    on spontaneous end:
    {
    }    
}


behavior MIS_Pion_LOG_SeDeployer( T_Mission_Pion_LOG_SeDeployer mission, id nDummy )
{
/*    when updated:
    {
        persistent float rTimer = 0;
        persistent T_Pion monPC = DEC_Pion_PionPC();
        persistent bool   bPret = false;
    
        DEC_Debug( FloatToString( rTimer ) );
        DEC_Debug( "Etat pret : " + BoolToString( bPret ) );
    
        rTimer = rTimer + 1;
                
        if ( rTimer == 10 )        
            DEC_Sante_StartPreterVSRAM( monPC, 4, bPret );
            
        if ( rTimer == 200 )
            DEC_Sante_RecupererVSRAM( monPC, 3 );
            
        if ( rTimer == 300 )
            DEC_Sante_RecupererVSRAM( monPC, 1 );
     }
*/
    when updated:
    {
        persistent T_Action actionPreterVSRAM = 0;
    
        if( DIA_ModuleBegins() )
        {
            DEC_Maintenance_ActiverChaine();
            DEC_Sante_ActiverChaine();
            DEC_Ravitaillement_ActiverChaine();
        }
    
    	selection ordres_recus = DIA_GetCategory( "ordres_recus" );
    	with ( x in ordres_recus)
    	{
    		Rep_OrdreConduite ordre = x;
			switch( ordre.eOrdre_ )
			{
                case eOrdreConduite_ModifierPrioritesReparations :
                {
                    Rep_OrderConduite_ModifierPrioritesReparations tmp = ordre;
                    DEC_Maintenance_ChangerPriorites( tmp.orderConduiteModifierPrioritesReparations_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }
                
                case eOrdreConduite_ModifierPrioritesBlesses :
                {
                    Rep_OrderConduite_ModifierPrioritesBlesses tmp = ordre;
                    DEC_Sante_ChangerPriorites( tmp.orderConduiteModifierPrioritesBlesses_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }                
                
                case eOrdreConduite_ModifierPrioritesTactiquesReparations :
                {
                    Rep_OrderConduite_ModifierPrioritesTactiquesReparations tmp = ordre;
                    DEC_Maintenance_ChangerPrioritesTactiques( tmp.orderConduiteModifierPrioritesTactiquesReparations_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }
                
                case eOrdreConduite_ModifierPrioritesTactiquesBlesses :
                {
                    Rep_OrderConduite_ModifierPrioritesTactiquesBlesses tmp = ordre;
                    DEC_Sante_ChangerPrioritesTactiques( tmp.orderConduiteModifierPrioritesTactiquesBlesses_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }
                
                
                case eOrdreConduite_ModifierTempsBordeeMaintenance:
                {
                    Rep_OrderConduite_ModifierTempsBordeeMaintenance tmp = ordre;
                    DEC_Maintenance_ChangerTempsBordee( tmp.orderConduiteModifierTempsBordeeMaintenance_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }
                
                case eOrdreConduite_ModifierTempsBordeeSante:
                {
                    Rep_OrderConduite_ModifierTempsBordeeSante tmp = ordre;
                    DEC_Sante_ChangerTempsBordee( tmp.orderConduiteModifierTempsBordeeSante_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }
                
                case eOrdreConduite_Pion_RenforcerEnVSRAM:
                {
                    Rep_OrderConduite_Pion_RenforcerEnVSRAM tmp = ordre;
                    //DEC_Sante_PreterVSRAM( tmp.pionARenforcer_, tmp.nbrAmbulances_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
				    
				    bool bDummy;
				    actionPreterVSRAM = DEC_Sante_StartPreterVSRAM( tmp.pionARenforcer_, tmp.nbrAmbulances_, bDummy );
                    break;
                }                
                
                case eOrdreConduite_Pion_ReprendreAuxOrdresVSRAM:
                {                   
                    Rep_OrderConduite_Pion_ReprendreAuxOrdresVSRAM tmp = ordre;
                    DEC_Sante_RecupererVSRAM( tmp.pionRenforce_, tmp.nbrAmbulances_ );
                    DIA_RemoveFromCategory( "ordres_recus", ordre );
				    DIA_DeleteRepresentation( ordre );
                    break;
                }                        
            }
        }
    }
    on spontaneous end:
    {
        if( actionPreterVSRAM != 0 )
        {
            DEC_StopAction( actionPreterVSRAM );
            actionPreterVSRAM = 0;
        }
    
        DEC_Maintenance_DesactiverChaine();
        DEC_Sante_DesactiverChaine();
        DEC_Ravitaillement_DesactiverChaine();
    }
}


behavior BEH_MoveToTmp( T_Point point )
{
    when updated:
    {
        persistent T_Itineraire            itineraire = 0;
        persistent T_Action                actionMove;
        persistent E_EtatActionDeplacement nEtatDeplacement;
               
        if( itineraire == 0 )
            itineraire = DEC_CreerItineraire( point, eTypeItiAttaque );     
        
        E_EtatCalculItineraire nEtatChemin = DEC_Itineraire_Etat( itineraire );
        switch( nEtatChemin )
        {
            case eItineraire_Impossible:
            case eItineraire_Annule:
            {       
                DEC_Debug( "Fin calcul chemin : " + EnumToString( nEtatChemin, E_EtatCalculItineraire ) );
                halt;
            }       
            case eItineraire_CalculEnCours:
            {       
                DEC_Debug( "Calcul chemin en cours" );
                break;
            }       
            case eItineraire_Invalide:
            {       
                DEC_Debug( "Calcul chemin invalide XXXXXXXXXX NE DEVRAIT PAS ARRIVER" );
                break;
            }        
            
            case eItineraire_Valide:
            case eItineraire_Partiel:
            {
                if( actionMove == 0 )
                    actionMove = DEC_StartDeplacement( nEtatDeplacement, itineraire );
                DEC_Debug( "Deplacement etat : " + EnumToString( nEtatDeplacement, E_EtatActionDeplacement ) );                   
                break;
            }
        }
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        DEC_DetruireItineraire( itineraire );
    }    
}

action ACT_RC( E_TypeRC rc )
{
    if( DIA_ModuleBegins() )
        DEC_RC( rc );
}


behavior MIS_Pion_LOG_Convoyer( T_Mission_Pion_LOG_Convoyer mission, id nDummy )
{   
    when updated:
    {
        persistent E_TestConvoyerStep nStep                   = eTestConvoyerStep_DeplacementVersPointChargement;
        persistent T_Action           supplyAction            = 0;
        persistent bool               bSupplyActionReturnCode = false;
    
        if( DIA_ModuleBegins() )
        {                   
            if( DEC_Ravitaillement_Convoi_DechargementEffectue() )
                nStep = eTestConvoyerStep_DeplacementRetour;
            else if( DEC_Ravitaillement_Convoi_ChargementEffectue() )
                nStep = eTestConvoyerStep_DeplacementVersPointDechargement;
            else
                nStep = eTestConvoyerStep_DeplacementVersPointChargement;
        }
        
        DEC_Debug( "MIS_Pion_LOG_Convoyer : " + EnumToString( nStep, E_TestConvoyerStep ) );
        
        if( nStep == eTestConvoyerStep_DeplacementVersPointChargement )
        {
            action ACT_RC( eRC_Convoi_DeplacementVersPointChargement );        
            behavior BEH_MoveToTmp( DEC_Ravitaillement_Convoi_PointChargement() );
            if( DEC_Geometrie_PositionsEgales( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_PointChargement() ) )
                nStep = eTestConvoyerStep_Chargement; 
        }
        
        if( nStep == eTestConvoyerStep_Chargement )
        {
            action ACT_RC( eRC_Convoi_ChargementEnCours );
            if( supplyAction == 0 )
                supplyAction = DEC_Ravitaillement_Convoi_StartCharger( bSupplyActionReturnCode );
            if( bSupplyActionReturnCode )
            {
                DEC_RC( eRC_Convoi_ChargementEffectue );
                DEC_StopAction( supplyAction );
                supplyAction = 0;
                nStep = eTestConvoyerStep_DeplacementVersPointDechargement;
            }           
        }
        
        if( nStep == eTestConvoyerStep_DeplacementVersPointDechargement )
        {
            action ACT_RC( eRC_Convoi_DeplacementVersPointDechargement );
            behavior BEH_MoveToTmp( DEC_Ravitaillement_Convoi_PointDechargement() );
            if( DEC_Geometrie_PositionsEgales( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_PointDechargement() ) )
                nStep = eTestConvoyerStep_Dechargement; 
        }
        
        if( nStep == eTestConvoyerStep_Dechargement )
        {
            action ACT_RC( eRC_Convoi_DechargementEnCours );
            if( supplyAction == 0 )
                supplyAction = DEC_Ravitaillement_Convoi_StartDecharger( bSupplyActionReturnCode );
            if( bSupplyActionReturnCode )
            {
                DEC_RC( eRC_Convoi_DechargementEffectue );
                DEC_StopAction( supplyAction );
                supplyAction = 0;
                nStep = eTestConvoyerStep_DeplacementRetour;
            }           
        }
        
        if( nStep == eTestConvoyerStep_DeplacementRetour )
        {
            action ACT_RC( eRC_Convoi_Retour );
            behavior BEH_MoveToTmp( DEC_Ravitaillement_Convoi_PointRetour() );
            if( DEC_Geometrie_PositionsEgales( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_PointRetour() ) )
            {
                DEC_Ravitaillement_Convoi_FinMission();
                action ACT_RC( eRC_RavitaillementStockEffectue );
            }
        }
    }
    on spontaneous end:
    {
        DEC_Ravitaillement_Convoi_FinMission();
        if( supplyAction != 0 )
            DEC_StopAction( supplyAction );
    }   
}


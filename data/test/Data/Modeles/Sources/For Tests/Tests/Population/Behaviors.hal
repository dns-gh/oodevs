use_priority        =   no;
max_instances       =   10;
max_activations     =   10;

actuators = deplacement, ordre;

default Default()
{    
    behavior BEH_GererOrdreConduite(); 
    
    persistent float rDomination = 0;
    
    rDomination = rDomination + 0.01;
    if( rDomination > 1 )
        rDomination = 0;
    
    DEC_Population_ChangeEtatDomination( rDomination );
}

behavior BEH_Defaut( id nDummy )
{   
    when updated:
    {              
        persistent T_Action actionFire;
        
        DEC_Trace( "aelkruzer" );
        DEC_Debug( "Attitude : " + EnumToString( DEC_Population_Attitude(), E_AttitudePopulation ) );
        DEC_Debug( "Humans: " + FloatToString( DEC_Population_Vivants() ) + " / " + FloatToString( DEC_Population_Morts() ) );
        
        if( actionFire != 0 )
        {
            DEC_StopAction( actionFire );
            actionFire = 0;
        }
                
        if( DIA_ModuleBegins() )
        {
          //  actionFire = DEC_StartTirSurPions();
        }
        
        T_ListePopulationConnaissancesAgent attackers = DEC_Connaissances_PionsPrenantAPartie();
        if( DIA_Size( attackers ) > 0 )
        {
            DEC_Debug( "Pris à partie par " + FloatToString( DIA_Size( attackers ) ) + " pions" );
            DEC_Debug( "ROE 1er pion prenant à partie : " + EnumToString( DEC_ConnaissanceAgent_RoePopulation( DEC_UserTypeList_GetAt( attackers, 0 ) ), E_EtatROEPopulation ) );
            
            actionFire = DEC_StartTirSurPion( 1, DEC_UserTypeList_GetAt( attackers, 0 ) );
        }

        T_ListePopulationConnaissancesAgent securers = DEC_Connaissances_PionsSecurisant();
        if( DIA_Size( securers ) > 0 )
        {
            DEC_Debug( "Sécurisé par " + FloatToString( DIA_Size( securers ) ) + " pions" );
        }
    }
    
    on spontaneous end:
    {
        if( actionFire != 0 )
            DEC_StopAction( actionFire );    
    }        
}

behavior MIS_Population_FaireMouvement( T_Mission_Population_FaireMouvement mission, id nDummy )
{
    when updated:
    {
        persistent T_Action                actionMove;
        persistent T_Action                actionFire;
        persistent E_EtatActionDeplacement nEtatDeplacement;
        persistent float  rDummy = 0;
        
        if( DIA_ModuleBegins() )
        {
            DEC_Debug( "MIS_Population_FaireMouvement - DIA_ModuleBegins" );
            actionMove = DEC_StartDeplacement( mission.destination_ );
            actionFire = DEC_StartTirSurPions( 1 );
        }
     /*   
        if( rDummy == 53 )
        {
            DEC_StopAction( actionMove );
            T_Point pointFusse = DEC_Geometrie_PositionAleatoireSurCercle( mission.destination_, 2000 );
            actionMove = DEC_StartDeplacement( pointFusse );
            
        }
        ++ rDummy;*/
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        if( actionFire != 0 )
            DEC_StopAction( actionFire );
    }    
}


behavior MIS_Population_CommettreExactions( T_Mission_Population_CommettreExactions mission, id nDummy )
{
    when updated:
    {
        //persistent T_Action                actionMove;
        //persistent E_EtatActionDeplacement nEtatDeplacement;
        //persistent T_Point                 ptDest;
        
        if( DIA_ModuleBegins() )
        {
          //  ptDest = DEC_Geometrie_CalculeBarycentreLocalisation( mission.zone );
          //  actionMove = DEC_StartDeplacement( ptDest );           
          
          T_ListePopulationConnaissancesObjet objets = DEC_Connaissances_ObjetsDansZone( mission.zone_, eTypeObjectInstallation );
          with( x in objets )
          {
            if( DEC_ConnaissanceObjet_EstValide( x ) )
            {
                E_ValiditeRequete nFusse;
                DEC_Debug( "Exaction en cours !" );
                float rDistance = DEC_ConnaissanceObjet_Distance( x, nFusse );
                DEC_Debug( "Distance objet = " + FloatToString( rDistance ) );
                T_Point closestPoint = DEC_ConnaissanceObjet_PointPlusProche( x, nFusse );
                DEC_DebugAffichePoint( closestPoint );
                DEC_ConnaissanceObjet_Degrader( x, nFusse, 0.03 );
            }
          }
          
        }        
    }

    on spontaneous end:
    {
        //if( actionMove != 0 )
            //DEC_StopAction( actionMove );    
        //DEC_Geometrie_DetruirePoint( ptDest );
    } 
}


behavior BEH_GererOrdreConduite()
{
    when updated:
    {
        if( DIA_ModuleBegins() )
            DEC_Debug( "init ordres popu" );
        
    	selection ordres_recus = DIA_GetCategory( "ordres_recus" );
    	with ( x in ordres_recus)
    	{
    		Rep_OrdreConduite ordre = x;
			switch ( ordre.eOrdre_ )
			{
                case eOrdreConduite_Population_ChangerAttitude:
                {
                    Rep_OrderConduite_Population_ChangerAttitude ordreAtt = ordre;
                    DEC_Debug( "changement attitude" );
                    DEC_Population_ChangerAttitude( ordreAtt.orderConduitePopulationChangerAttitude_ );
            		// on a finit de traiter l'ordre, on le supprime
            		DIA_RemoveFromCategory( "ordres_recus", ordre );
            		DIA_DeleteRepresentation( ordre );
                    break;
                }
            }
        }
    }
    on spontaneous end:
    {
    }  
}
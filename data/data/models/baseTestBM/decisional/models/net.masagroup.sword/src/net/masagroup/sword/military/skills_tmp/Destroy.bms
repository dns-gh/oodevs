-- ****************************************************************************
-- Destroy elements.
-- self.params.entities: the detroyable elements
-- self.params.positions: the detroying elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.DestroyElement };

    -- --------------------------------------------------------------------------------
    -- Main effect is reached: send feedback when entities are all destroyed
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        self.targets[ additionnalParams.destroyedEntity ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done ) -- the job is done, all targets are destroyed
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Store each elements to detroy for feedbaks
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, try to destroy it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.DestroyElement, entity:destructionPriority(),
                { entity = entity, positions = self.params.positions[ entity ] or self.params.positions } )
        end
    end
}
-- ****************************************************************************
-- Destroy destroyable element using MoveAndTakePosition skills
-- self.params.entity: the destroyable element
-- self.params.positions: the destroying elements
-- ****************************************************************************
node "DestroyElement"
{
    connections = { skill.links.moveAndTakePosition, skill.nodes.Destroy,
                    skill.links.observe };

    feedbacks = { "done" };

    -- --------------------------------------------------------------------------------
    -- Move toward a destroying element and edstroy the entity
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- when the entity is destroyed send a feedback
        if self.params.entity:isDestroyed() then
            Feedback( self.feedbacks.done, { destroyedEntity = self.params.entity } )
        end

        -- current observation toward the element to reconnoiter
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

       -- when it possible destroy the element (ROE, etc.)
        if self.params.entity:canDestroyIt() then
            Activate( skill.nodes.Destroy, 1, { entity = self.params.entity } )
        end

        -- Moving toward a destroynig positions
        for _,position in pairs( self.params.positions )  do
            Activate( skill.links.moveAndTakePosition,
                position:destructionEfficiency( self.params.entity ), { entity = position } )
        end
    end
}
-- ****************************************************************************
-- Destroy action on the destroyable element
-- ****************************************************************************
node "Destroy"
{
    acquire = { [ skill.resources.engage ] = 1 };

    select = function( self )
        self.params.entity:destroyIt()
    end,

    deselect = function( self )
        self.params.entity:stopDestroyingIt()
    end
}
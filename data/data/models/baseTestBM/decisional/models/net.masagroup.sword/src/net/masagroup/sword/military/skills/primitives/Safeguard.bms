-- **************************************************************************** 
-- @DDA Copy of skill of the generic base  
-- @TODO will be deleted 
-- Safeguard from elements.
-- self.params.entities: the safeguardable elements
-- self.params.positions: the safeguarding elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.SafeguardFromElement };

    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, safeguard from it
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.SafeguardFromElement, entity:safetyPriority(), { entity = entity, positions = self.params.positions } )
        end
    end
}
-- **************************************************************************** 
-- Safeguard from a safeguardable element using moveAndTakePosition skills
-- self.params.entity: the safeguardable element
-- self.params.positions: the safeguarding elements
-- ****************************************************************************
node "SafeguardFromElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe, -- skills links
                    skill.nodes.ProtectOneSelf, skill.nodes.Respond }; -- internal nodes within current skill

    feedbacks = { "done" };

    -- -------------------------------------------------------------------------------- 
    -- main effect is reached 
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        -- when posted on an approaching element, update node with new approaching positions
       if additionnalParams.state == "posted" then self:create() end
    end,

    create = function( self )
        self.currentPositions = self.params.positions
    end,

    -- -------------------------------------------------------------------------------- 
    -- Self protect and try to reach a safe (covered) position with respond capability
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- Main observation effort on current safeguardable element
        if #self.params.entity then
           Activate( skill.links.observe, 1, { entity = self.params.entity } )
        end
        
         --Try to adopt a self protection posture
        Activate( skill.nodes.ProtectOneSelf, 1, { entity = self.params.entity } )

        -- Respond to safeguardbale element if possible (see canRespond() definition).
        if self.params.entity:canRespond() then
            Activate( skill.nodes.Respond, 1, { target = self.params.entity } )
        end

        -- Move toward best covered position
        for _, position in pairs( self.currentPositions ) do
            Activate( skill.links.moveAndTakePosition,position:safetyEfficiency( self.params.entity ), { entity = position } )
        end
    end
}
-- **************************************************************************** 
-- Self protection action. 
-- ****************************************************************************
node "ProtectOneSelf"
{
    select = function( self )
       self.params.entity:selfProtectFromIt() -- selfProtection posture from agression
    end
}
-- **************************************************************************** 
-- Respond toward the element with adapted weapon system(s).
-- ****************************************************************************
node "Respond"
{
    acquire = { [ skill.resources.engage ] = 1 };

    select = function( self )
        self.params.target:respondToIt()
    end
}
includedFiles = includedFiles or {}
includedFiles["sources/emergency/automates/common/missions/alert/Alert - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Automate_MRT_Emergency_Alert"
{
    activations =
    {
        { "BEH_Medo_Automate_Emergency_PrepareMission_Alert", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eCreationMRT = self.eCreationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Emergency_Alert : start MRT" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// MRT creee
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eCreationMRT == eActionImpossible ) then
            do
                                do
                    DEC_RC( eRC_MissionImpossible )
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eCreationMRT == eActionEffectuee ) then
            do
                self.eCreationMRT = eActionEnCours
                                do
                    DEC_Trace( "Emergency_Alert : end MRT" )
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Modalité d'exécution
]]--[[//-----------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Medo_Automate_Emergency_PrepareMission_Alert, 1, setmetatable( { self._namedParams.mission, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCreationMRT = v else rawset( t, k, v ) end end } ) )
    end,

}

node "BEH_Medo_Automate_Emergency_PrepareMission_Alert"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_Emergency_AssignAlert", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params[1]
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        self.pions = self.pions or {}
        self.lstLocalisations = self.lstLocalisations or {}
         do
            local _continue = true
            local switch_1 = --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_SelectionnerPions then
                    --[[//----------------------------------------------------------------------
]]--[[// Decoupage de la zone a alerter
]]--[[//----------------------------------------------------------------------
]]local selTmp = DEC_Automate_PionsAvecPC()
                    local sizePions = #( selTmp )
                    DEC_Trace( "Assess zones status" )
                    if( #( self._namedParams.mission.zones_ ) == 1 ) then
                        do
                            --[[// float sizeArea = 800000; // 5 x 400m²
]]local eCodeLoc = eNoError
                            local zone = DEC_UserTypeList_GetAt( self._namedParams.mission.zones_, 0 )
                            self.lstLocalisations = DEC_Geometrie_DecoupeLocalisation( zone, sizePions, eCodeLoc )
                            eCodeLoc = self.lstLocalisations.second
                            self.lstLocalisations = self.lstLocalisations.first
                             do
                                local _continue = true
                                local switch_2 = eCodeLoc
                                local cases_switch_2 = {}
                                    if switch_2 == eError_PionsPasDansMemeFuseau
                                    or switch_2 == eError_LocalisationPasDansFuseau then
                                                                            DEC_Trace( "Erreur MRT : Decoupage de la zone " .. EnumToString( eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                                                                                do
                                            DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                            Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, {} )
                                                                                        self.params.__returnValue = eActionImpossible
                                            do return end

                                        end

                                        _continue = false
                                    elseif switch_2 == eWarning_DecoupageIncomplet then
                                                                            DEC_Trace( "Alerte MRT : Decoupage de la zone " .. EnumToString( eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                                        _continue = false
                                                                        cases_switch_2[2] = true
elseif switch_2 == eNoError then
                                                                            _continue = false
                                                                        cases_switch_2[3] = true
                                    end
                                end

                        end
                    else
do
                            self.lstLocalisations = self._namedParams.mission.zones_
                        end
                    end

                    if( sizePions < #( self.lstLocalisations ) ) then
                        sizePions = #( self.lstLocalisations )
                    end

                    DEC_Trace( "Select " .. FloatToString( sizePions ) .. " units" )
                    self.ePhase = eMRT_AssignerMissions
                    for _,x in pairs( selTmp or {} ) do
                    local _continue = true
do
                            local pion = x
                            if( sizePions < 0 ) then
                                break
                            end

                            DIA_PushBack( self.pions, pion )
                            sizePions = sizePions - 1
                        end

                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]if( self.eActionMRT == eActionImpossible ) then
                        do
                                                        do
                            end

                                                        self.params.__returnValue = eActionImpossible
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "eValidationMRT == eActionImpossible" )
                            end

                                                        self.params.__returnValue = eActionImpossible
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        self.params.__returnValue = eActionEffectuee
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.pions ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
                    Activate( self.activations.BEH_Medo_Automate_Emergency_AssignAlert, 1, { self.pions, self.lstLocalisations, } )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Evacuate Area
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_Emergency_AssignAlert"
{
    activations =
    {
        { "BEH_Mission_Automate_Emergency_AssignerA_Alert", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPions = self.params[1]
        self._namedParams.lstLocalisations = self.params[2]
    end,

    activate = function( self )
        --[[//--------------------------------------------------------------------------
]]--[[// Init
]]--[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[//----------------------------------------------------------------------
]]--[[// Decoupage de la zone A surveiller
]]--[[//----------------------------------------------------------------------
]]local rIt = 0
                local distSize = Floor( #( self._namedParams.lstLocalisations ) / #( self._namedParams.lstPions ) )
                if( distSize ~= ( #( self._namedParams.lstLocalisations ) / #( self._namedParams.lstPions ) ) ) then
                    distSize = distSize + 1
                end

                DEC_Trace( "Set " .. FloatToString( distSize ) .. " zones to each unit" )
                for _,x_pion in pairs( self._namedParams.lstPions or {} ) do
                local _continue = true
do
                        local references = {}
                        local i = 0
                        while i < distSize do
                            local _continue = true
do
                                                                rIt = rIt + 1
                                if( rIt >= #( self._namedParams.lstLocalisations ) ) then
                                    rIt = 0
                                end

                                DEC_Trace( "Select zone id " .. FloatToString( rIt ) )
                                DEC_UserTypeList_PushBack( references, DEC_UserTypeList_GetAt( self._namedParams.lstLocalisations, rIt ) )
                            end
                        i = i + 1
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_Emergency_AssignerA_Alert, 1, { ePhase_MRT, x_pion, references, } )
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_Emergency_Alert = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_AssignAlert, "BEH_Mission_Automate_Emergency_AssignerA_Alert", nodes.BEH_Mission_Automate_Emergency_AssignerA_Alert }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_PrepareMission_Alert, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_PrepareMission_Alert, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_PrepareMission_Alert, "BEH_Medo_Automate_Emergency_AssignAlert", nodes.BEH_Medo_Automate_Emergency_AssignAlert }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Emergency_Alert, "BEH_Medo_Automate_Emergency_PrepareMission_Alert", nodes.BEH_Medo_Automate_Emergency_PrepareMission_Alert }

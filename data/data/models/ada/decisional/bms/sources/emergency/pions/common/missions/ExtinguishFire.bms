includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/ExtinguishFire.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Améliorations possibles:
]]--[[// déterminer la portée de la lance à incendie pour éteindre le feu à distance (et ne jamais se trouver pris dans un incendie)=> une fonction décisionnelle a été implémentée
]]--[[// demander des renforts selon la situation (si le nombre d'incendies dans l'aire à éteindre augmente->le feu n'est pas contrôlé, s'il faut couper les fluides, s'il faut évacuer des blessés, ...)
]]--[[// pouvoir agir si le feu n'est pas sur une route
]]--[[// mettre en place différents critéres de sélection du feu à éteindre (proximité, site à protéger absolument, ...)
]]--[[// savoir battre en retraite s'il existe certains risques (peut-être selon la classe du feu)
]]--[[// implémenter la phase de reconnaissance de l'incendie (détermination de la classe de l'incendie, ...)
]]--[[// Faire des rapports réguliers et précis de la situation
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_ExtinguishFire"
{
    feedbacks = { { { "done_MIS_Pion_Emergency_ExtinguishFire" }, "MIS_Pion_Emergency_ExtinguishFire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Emergency_ExtinguishFire, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obj_Pion_Emergency_ExtinguishFire", { "done_ACT_Obj_Pion_Emergency_ExtinguishFire" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eSelectionnerFeuAEteindre
        self.fireKnowledge = self.fireKnowledge or 0
        self.firePosition = self.firePosition or 0
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eSelectionnerFeuAEteindre then
                    Activate( self.activations.ACT_RC, 1, { eRC_DebutMission, } )
                    self.fireKnowledge = S_Obj_Emergency_ObtenirObjetProche( self._namedParams.mission.position_, eTypeObjectDynamicFire, 500 )
                    --[[//If there are no fire in the selected area, mission is aborted
]]if( DEC_ConnaissanceObjet_EstValide( self.fireKnowledge ) ) then
                        do
                            self.ePhase = eRejoindrePosition
                            self.firePosition = S_Obj_Position( self.fireKnowledge )
                        end
                    else
do
                            Activate( self.activations.ACT_Info_Trace, 1, { "No fire in the selected area: mission is aborted", } )
                            self.ePhase = eFinMission
                        end
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eRejoindrePosition then
                    if( self.eAction == eActionEnCours ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.firePosition, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                    self.eAction = eActionEnCours
                    self.ePhase = eEteindreIncendie
                                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eEteindreIncendie then
                    Activate( self.activations.ACT_Info_Trace, 1, { "Start extinguishing fire", } )
                    Activate( self.activations.ACT_Obj_Pion_Emergency_ExtinguishFire, 2, { self.fireKnowledge, } )
self.done_ACT_Obj_Pion_Emergency_ExtinguishFire = function( self, _, v ) self.eAction = v[1] end
                    if( self.eAction == eActionImpossible ) then
                        do
                            Activate( self.activations.ACT_Info_Trace, 1, { "Targeted fire is out of sight", } )
                            self.eAction = eActionEffectuee
                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                local fire = S_Obj_Emergency_ObtenirObjetProche( myself:DEC_Agent_Position(), eTypeObjectDynamicFire, 750 )
                                if( DEC_ConnaissanceObjet_EstValide( fire ) and ( fire ~= self.fireKnowledge ) ) then
                                    do
                                        Activate( self.activations.ACT_Info_Trace, 1, { "Another fire in the area was identified: mission is continued: let's extinguish the next one!", } )
                                        self.fireKnowledge = fire
                                        self.firePosition = S_Obj_Position( self.fireKnowledge )
                                        self.ePhase = eRejoindrePosition
                                        self.eAction = eActionEnCours
                                    end
                                else
do
                                        self.ePhase = eFinMission
                                    end
                                end

                            end

                        end
                    end

                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[4] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_ExtinguishFire = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_ExtinguishFire, "ACT_Obj_Pion_Emergency_ExtinguishFire", nodes.ACT_Obj_Pion_Emergency_ExtinguishFire }

includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/EvacuateWounded.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2010 MASA Group
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_EvacuateWounded"
{
    feedbacks = { { { "done_MIS_Pion_Emergency_EvacuateWounded" }, "MIS_Pion_Emergency_EvacuateWounded" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Emergency_EvacuateWounded, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Suivre", { "done_BEH_Dep_Suivre" } },
        { "ACT_RC_SurPion", { "done_ACT_RC_SurPion" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_EmbarquerBlesse", { "done_ACT_EmbarquerBlesse" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        self.hopital = self.hopital or nil
        self.positionHopital = self.positionHopital or nil
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    local wounded = self._namedParams.mission.wounded_
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    Activate( self.activations.BEH_Dep_Suivre, 1, { wounded, 0, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), wounded:DEC_Agent_Position() ) <= 10 ) then
                        do
                            self.ePhase = eDeterminerSite
                            self.eAction = eActionEnCours
                        end
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eDeterminerSite then
                    self.positionHopital = nil
                    self.hopital = DEC_DeterminerHopital( self._namedParams.mission.wounded_, self._namedParams.mission.hospitals_ )
                    if( self.hopital == nil ) then
                        do
                            self.ePhase = eFinMission
                            DEC_RC( eRC_MissionImpossible )
                            DEC_Trace( "No hospital available" )
                            _continue = false
                        end
                    end

                        if _continue then
                        Activate( self.activations.ACT_RC_SurPion, 1, { eRC_TransportUnitePrete, self._namedParams.mission.wounded_, } )
                        Activate( self.activations.ACT_RC, 1, { eRC_TransportEmbarquement, } )
                        Activate( self.activations.ACT_EmbarquerBlesse, 1, { self._namedParams.mission.wounded_, } )
                        local message = "Move to : " .. DEC_ConnaissanceObjet_Name( self.hopital )
                        DEC_Trace( message )
                        DEC_RC( eRC_Trace, message )
                        self.ePhase = eTransporter
                        _continue = false
                    end
                                cases_switch_1[2] = true
elseif switch_1 == eTransporter then
                    Activate( self.activations.ACT_RC, 1, { eRC_TransportEnCours, } )
                    if( self.positionHopital == nil ) then
                        do
                            local localisationHopital = DEC_ConnaissanceObjet_Localisation( self.hopital )
                            self.positionHopital = DEC_Geometrie_CalculerBarycentreLocalisationDansFuseau( localisationHopital )
                        end
                    end

                    if( DEC_Geometrie_Distance( self.positionHopital, DEC_Agent_Position() ) < 100 ) then
                        do
                            self.ePhase = eDebarquer
                            self.eAction = eActionEnCours
                        end
                    else
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.positionHopital, eProgressionDirect, eTypeItiMouvement, } )
                    end

                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eDebarquer then
                    Activate( self.activations.ACT_RC, 1, { eRC_TransportDebarquement, } )
                    if( not DEC_CanHospitalTreatWound( self._namedParams.mission.wounded_, self.hopital ) ) then
                        do
                            Activate( self.activations.ACT_RC, 1, { eRC_SiteSature, } )
                            self.ePhase = eDeterminerSite
                        end
                    else
do
                            DEC_Transport_DebarquerPionSansDelais( self._namedParams.mission.wounded_ )
                            DEC_DebarqueBlesseDansHopital( self._namedParams.mission.wounded_, self.hopital )
                            self.ePhase = eFinMission
                        end
                    end

                    _continue = false
                                cases_switch_1[4] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mission.garage_, eProgressionDirect, eTypeItiMouvement, } )
                    _continue = false
                                cases_switch_1[5] = true
                end
            end

    end,

}

node "ACT_EmbarquerBlesse"
{
    feedbacks = { { { "done_ACT_EmbarquerBlesse" }, "ACT_EmbarquerBlesse" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_EmbarquerBlesse, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.wounded = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Transport_EmbarquerPionSansDelais( self._namedParams.wounded, false )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_EvacuateWounded = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "BEH_Dep_Suivre", nodes.BEH_Dep_Suivre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "ACT_RC_SurPion", nodes.ACT_RC_SurPion }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "ACT_EmbarquerBlesse", nodes.ACT_EmbarquerBlesse }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_EvacuateWounded, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }

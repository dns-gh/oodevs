includedFiles = includedFiles or {}
includedFiles["sources/emergency/automates/common/missions/Actions - Medo.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//=============================================================================
]]--[[// Mission : Controler une Zone
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_Emergency_AssignerA_EvacuateArea"
{
    feedbacks = { { { "done_ACT_Mission_Automate_Emergency_AssignerA_EvacuateArea" }, "ACT_Mission_Automate_Emergency_AssignerA_EvacuateArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_Emergency_AssignerA_EvacuateArea, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.locZone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------		
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Emergency_EvacuateArea" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Emergency_EvacuateArea" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Issue mission order 'EvacuateArea' to " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Inscription du secteur
]]DEC_Copie_Localisation_Mission( self._namedParams.locZone, self.missionPion, "area_" )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// ****************************************************************************
]]--[[// ACT_Mission_Automate_GEN_AssignerRealiserTravauxA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]node "ACT_Mission_Automate_Emergency_AssignerA_Alert"
{
    feedbacks = { { { "done_ACT_Mission_Automate_Emergency_AssignerA_Alert" }, "ACT_Mission_Automate_Emergency_AssignerA_Alert" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_Emergency_AssignerA_Alert, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.locations = self.params[3]
    end,

    select = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Alert' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Emergency_Alert" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Emergency_Alert" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[// Mission
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        for _,x in pairs( --[[// travaux etc.
]]self._namedParams.locations or emptyTable ) do
        local _continue = true
            DEC_UserTypeList_PushBack_Mission( self.missionPion, "zones_", x )

        end

        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}


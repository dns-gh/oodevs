includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/Alert.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_Alert"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "ACT_RC", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Dep_Pion_Emergency_OrganizeAlert", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    Activate( self.activations.ACT_RC, 1, { eRC_DebutMission, } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DeploiementSurPosition, } )
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = eFinMission
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_Emergency_OrganizeAlert, 1, setmetatable( { self._namedParams.mission.zones_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self.params.__returnValue = eActionEffectuee
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Emergency_AllerFaireTravauxSur
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_Emergency_OrganizeAlert"
{
    activations =
    {
        { "ACT_RC_PreparationMission", {} },
        { "BEH_Dep_Pion_Emergency_OrganizeAlertInZone", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zones = self.params[1]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.rIterateur = self.rIterateur or 0
        Activate( self.activations.ACT_RC_PreparationMission, 1, { 1, } )
        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                self.rIterateur = self.rIterateur + 1
            end
        end

        if( self.rIterateur == #( self._namedParams.zones ) ) then
            self.rIterateur = 0
        end

        Activate( self.activations.BEH_Dep_Pion_Emergency_OrganizeAlertInZone, 1, setmetatable( { DEC_UserTypeList_GetAt( self._namedParams.zones, self.rIterateur ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
    end,

}

node "ACT_Info_ReportPhase"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.iteration = self.params[2]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                local msg = "Iteration: " .. FloatToString( self._namedParams.iteration ) .. " - ePhase: " .. EnumToString( self._namedParams.ePhase, E_PhaseMission )
                DEC_Trace( msg )
            end
        end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Alert in zone
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Dep_Pion_Emergency_OrganizeAlertInZone"
{
    activations =
    {
        { "ACT_Dep_ModulationVitesse", {} },
        { "ACT_Info_ReportPhase", {} },
        { "BEH_Dep_Pion_Emergency_AlertInZone", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        self.lstLocalisations = self.lstLocalisations or {}
        self.eAction = self.eAction or eActionEnCours
        self.bSwitch = self.bSwitch or -1
        self.rIterateur = self.rIterateur or 0
        self.currentIt = self.currentIt or 0
        --[[// persistent float size;
]]self.ePhase = self.ePhase or eDeployer
        --[[//--------------------------------------------------------------------------
]]--[[// Init
]]--[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[//----------------------------------------------------------------------
]]--[[// Decoupage de la zone A alerter
]]--[[//----------------------------------------------------------------------
]]--[[// m² DEC_Geometrie_TailleLocalisation( zone ) / DEC_Pion_ZoneAlerteMax();
]]local sizeArea = 160000
                local eCodeLoc = eNoError
                self.lstLocalisations = DEC_Geometrie_DecoupeLocalisationSurface( self._namedParams.zone, sizeArea, eCodeLoc )
                eCodeLoc = self.lstLocalisations.second
                self.lstLocalisations = self.lstLocalisations.first
                --[[// lstLocalisations = DEC_Geometrie_DecoupeLocalisation( zone, sizeArea, eCodeLoc );
]]if( eCodeLoc ~= eNoError ) then
                    do
                        DEC_Warning( eRC_MissionImpossible )
                                                self.params.__returnValue = eActionImpossible
                        do return end

                    end
--[[// size = DIA_Size( lstLocalisations );
]]                end

                DEC_Trace( "Emergency_OrganizeAlertInZone:" .. FloatToString( #( self.lstLocalisations ) ) .. " zones." )
            end
        end

        if( DEC_Geometrie_EstPointDansLocalisation( DEC_Agent_Position(), self._namedParams.zone ) ) then
            Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 0.3, } )
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDeployer then
                    --[[// switch from begin to end part of the locations list
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                if( self.bSwitch < 0 ) then
                                    do
                                                                                self.rIterateur = self.rIterateur + 1
                                        self.currentIt = #( self.lstLocalisations ) - self.rIterateur
                                    end
                                else
                                    self.currentIt = self.rIterateur
                                end

                                self.bSwitch = self.bSwitch * -1
                            end

                        end
                    end

                    Activate( self.activations.ACT_Info_ReportPhase, 1, { self.ePhase, self.currentIt, } )
                    if( self.rIterateur * 2 <= #( self.lstLocalisations ) ) then
                        do
                            Activate( self.activations.BEH_Dep_Pion_Emergency_AlertInZone, 1, setmetatable( { DEC_UserTypeList_GetAt( self.lstLocalisations, self.currentIt ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                                                        do return end

                        end
                    end

                    self.ePhase = eRejoindre
                    self.eAction = eActionEnCours
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindre then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        self.params.__returnValue = eActionEffectuee
                            do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_Emergency_AlertInZone, 1, setmetatable( { self._namedParams.zone, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

node "BEH_Dep_Pion_Emergency_AlertInZone"
{
    activations =
    {
        { "ACT_Info_Trace", {} },
        { "ACT_RC", {} },
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        self.target = self.target or nil
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                local exact = S_Geometrie_BarycentreZone( self._namedParams.zone )
                self.target = DEC_Geometrie_CalculerPositionObstacle( exact, S_TypeObject_ToString( eTypeObjectPosteControle ), 400 )
            end
        end

        Activate( self.activations.ACT_Info_Trace, 1, { "Alert population in next zone", } )
        if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.target, 50 ) ) then
            self.eAction = eActionEffectuee
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                                self.params.__returnValue = eActionEffectuee
                do return end

            end
        end

        Activate( self.activations.ACT_RC, 1, { eRC_ProgressionVersPosition, } )
        Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.target, eProgressionDefaut, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
    end,

--[[// behavior BEH_Emergency_Alert( zone );
]]}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_Alert = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_AlertInZone, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_AlertInZone, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_AlertInZone, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_OrganizeAlert, "ACT_RC_PreparationMission", nodes.ACT_RC_PreparationMission }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_OrganizeAlert, "BEH_Dep_Pion_Emergency_OrganizeAlertInZone", nodes.BEH_Dep_Pion_Emergency_OrganizeAlertInZone }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_OrganizeAlertInZone, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_OrganizeAlertInZone, "ACT_Info_ReportPhase", nodes.ACT_Info_ReportPhase }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Emergency_OrganizeAlertInZone, "BEH_Dep_Pion_Emergency_AlertInZone", nodes.BEH_Dep_Pion_Emergency_AlertInZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Alert, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Alert, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Alert, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Alert, "BEH_Dep_Pion_Emergency_OrganizeAlert", nodes.BEH_Dep_Pion_Emergency_OrganizeAlert }

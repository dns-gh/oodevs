includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/OrganizeDistribution.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_OrganizeDistribution"
{
    feedbacks = { { { "done_MIS_Pion_Emergency_OrganizeDistribution" }, "MIS_Pion_Emergency_OrganizeDistribution" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Emergency_OrganizeDistribution, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Pion_Emergency_OrganiseDistribution", { "done_BEH_Pion_Emergency_OrganiseDistribution" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    if( self.eAction == eActionEnCours ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                            Activate( self.activations.BEH_Dep_ProgressionVers, GetMotivation( "MOT_Mission" ), { self._namedParams.mission.position_, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                    self.ePhase = eDeployer
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eDeployer then
                    Activate( self.activations.BEH_Pion_Emergency_OrganiseDistribution, 1, { self._namedParams.mission.position_, } )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

}

node "BEH_Pion_Emergency_OrganiseDistribution"
{
    feedbacks = { { { "done_BEH_Pion_Emergency_OrganiseDistribution" }, "BEH_Pion_Emergency_OrganiseDistribution" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_Emergency_OrganiseDistribution, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_Emergency_Distribute", { "done_ACT_Obj_Pion_Emergency_Distribute" } },
        { "ACT_Pion_Emergency_InfluenceInArea", { "done_ACT_Pion_Emergency_InfluenceInArea" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.position = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.supply = self.supply or nil
        self.area = self.area or DEC_Geometrie_CreerLocalisationCercle( self._namedParams.position, 500 )
        self.people = self.people or nil
        if( ModuleBegins() ) then
            do
                local localisation = DEC_Geometrie_ConvertirPointEnLocalisation( self._namedParams.position )
                DEC_CreerObjetSansDelais( S_TypeObject_ToString( eTypeObjectSupplyFacility ), localisation )
                --[[// Get object knowledge
]]self.supply = S_Obj_Emergency_ObtenirObjetProche( self._namedParams.position, eTypeObjectSupplyFacility, 500 )
            end
--[[// start action ACT_Obj_Pion_Emergency_RealiserObjet( eTypeObjectEmergencyShelter, locPosition );
]]        end

        if( DEC_ConnaissanceObjet_EstValide( self.supply ) ) then
            Activate( self.activations.ACT_Obj_Pion_Emergency_Distribute, 1, { self.supply, self.people, 2, } )
        end

        Activate( self.activations.ACT_Pion_Emergency_InfluenceInArea, 1, { "water supply", 1, self.area, } )
    end,

    destroy = function( self )
                if( DEC_ConnaissanceObjet_EstValide( self.supply ) ) then
            DEC_DetruireObjetSansDelais( self.supply )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_OrganizeDistribution = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pion_Emergency_OrganiseDistribution, "ACT_Obj_Pion_Emergency_Distribute", nodes.ACT_Obj_Pion_Emergency_Distribute }
connections[ #connections + 1 ] = { nodes.BEH_Pion_Emergency_OrganiseDistribution, "ACT_Pion_Emergency_InfluenceInArea", nodes.ACT_Pion_Emergency_InfluenceInArea }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_OrganizeDistribution, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_OrganizeDistribution, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_OrganizeDistribution, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_OrganizeDistribution, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_OrganizeDistribution, "BEH_Pion_Emergency_OrganiseDistribution", nodes.BEH_Pion_Emergency_OrganiseDistribution }

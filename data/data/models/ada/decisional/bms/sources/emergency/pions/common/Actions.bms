includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
node "ACT_Pion_Emergency_BlockRoad"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_BlockRoad" }, "ACT_Pion_Emergency_BlockRoad" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_BlockRoad, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyInfluence( "any", -100 )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_Emergency_Influence"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_Influence" }, "ACT_Pion_Emergency_Influence" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_Influence, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.name = self.params[1]
        self._namedParams.influence = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyInfluence( self._namedParams.name, self._namedParams.influence * GetActivity() )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_Emergency_InfluenceInArea"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_InfluenceInArea" }, "ACT_Pion_Emergency_InfluenceInArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_InfluenceInArea, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.name = self.params[1]
        self._namedParams.influence = self.params[2]
        self._namedParams.area = self.params[3]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyInfluenceInArea( self._namedParams.name, self._namedParams.influence * GetActivity(), self._namedParams.area )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

                DEC_Trace( "start influence." )
            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                    DEC_Trace( "influence impossible." )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_Emergency_TriggerActivity"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_TriggerActivity" }, "ACT_Pion_Emergency_TriggerActivity" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_TriggerActivity, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.name = self.params[1]
        self._namedParams.influence = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyTriggerActivity( self._namedParams.name, self._namedParams.influence * GetActivity() )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_Emergency_TriggerActivityInArea"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_TriggerActivityInArea" }, "ACT_Pion_Emergency_TriggerActivityInArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_TriggerActivityInArea, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.name = self.params[1]
        self._namedParams.influence = self.params[2]
        self._namedParams.area = self.params[3]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyTriggerActivityInArea( self._namedParams.name, self._namedParams.influence * GetActivity(), self._namedParams.area )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_Emergency_UnloadActivity"
{
    feedbacks = { { { "done_ACT_Pion_Emergency_UnloadActivity" }, "ACT_Pion_Emergency_UnloadActivity" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Emergency_UnloadActivity, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.name = self.params[1]
        self._namedParams.influence = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatInfluence = self.eEtatInfluence or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_Start_EmergencyUnloadActivity( self._namedParams.name, self._namedParams.influence * GetActivity() )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatInfluence = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatInfluence
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_Emergency_RealiserObjet"
{
    feedbacks = { { { "done_ACT_Obj_Pion_Emergency_RealiserObjet" }, "ACT_Obj_Pion_Emergency_RealiserObjet" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_Emergency_RealiserObjet, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjet = self.params[1]
        self._namedParams.locObjet = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or nil--[[//objet reel pour la creation de la representation de l'abatti
]]
        if( ModuleBegins() ) then
            do
                if( self._namedParams.locObjet == nil ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( self._namedParams.eTypeObjet ) ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "object construction: begin" )
                self.actionID = DEC_StartCreerObjet( self.repObj, S_TypeObject_ToString( self._namedParams.eTypeObjet ), self._namedParams.locObjet )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end

                DEC_Trace( "DEC_StartCreateObjet: OK" )
                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "object construction: end" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite then
                    DEC_Trace( "object construction: no capability" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "object construction: not enough issue" )
                --[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMine );
]]                cases_switch_1[4] = true
                end
                if cases_switch_1[4] or switch_1 == eActionObjetImpossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "contruction resume" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "constrution suspended" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "realisation arretee" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_Emergency_Supply"
{
    feedbacks = { { { "done_ACT_Obj_Pion_Emergency_Supply" }, "ACT_Obj_Pion_Emergency_Supply" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_Emergency_Supply, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
    end,

    select = function( self )
                self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionID = DEC_StartRavitaillerObjet( self._namedParams.objet )
            actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end

        end

        if( DEC_ConnaissanceObject_EstRavitaillee( self._namedParams.objet ) ) then
            do
                DEC_Trace( "object ravitaillement: end" )
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_FinTravaux )
                    else
                        DEC_Message( eRC_FinTravaux )
                    end

                end

                DEC_StopAction( self.actionID )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "object supply: end" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetImpossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_Emergency_Distribute"
{
    feedbacks = { { { "done_ACT_Obj_Pion_Emergency_Distribute" }, "ACT_Obj_Pion_Emergency_Distribute" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_Emergency_Distribute, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.quantity = self.params[3]
    end,

    select = function( self )
                self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionID = DEC_StartDistributionObjet( self._namedParams.objet, self._namedParams.pion, self._namedParams.quantity )
            actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end

        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "object distribution: end" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetImpossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_Emergency_ExtinguishFire"
{
    feedbacks = { { { "done_ACT_Obj_Pion_Emergency_ExtinguishFire" }, "ACT_Obj_Pion_Emergency_ExtinguishFire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_Emergency_ExtinguishFire, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.knFire = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.eEtatAction = self.eEtatAction or nil
        if( ModuleBegins() ) then
            do
                self.actionID = DEC_StartEteindreObjet( self._namedParams.knFire )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatAction = arg end

            end
        end

        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.knFire ) ) then
            do
                DEC_StopAction( self.actionID )
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatAction
            local cases_switch_1 = {}
                if switch_1 == eActionInfluence_EnCours
                or switch_1 == eActionInfluence_Terminee then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionInfluence_Impossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/emergency/automates/common/missions/evacuate area/EvacuateArea - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Automate_MRT_Emergency_EvacuateArea"
{
    feedbacks = { { { "done_MIS_Automate_MRT_Emergency_EvacuateArea" }, "MIS_Automate_MRT_Emergency_EvacuateArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_Emergency_EvacuateArea, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea", { "done_BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eCreationMRT = self.eCreationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Emergency_EvacuateArea : start MRT" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// MRT creee
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eCreationMRT == eActionImpossible ) then
            do
                                do
                    DEC_RC( eRC_MissionImpossible )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eCreationMRT == eActionEffectuee ) then
            do
                self.eCreationMRT = eActionEnCours
                                do
                    DEC_Trace( "Emergency_EvacuateArea : end MRT" )
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Modalité d'exécution
]]--[[//-----------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea, 1, { "T_Mission_Automate_INF_Controler", } )
self.done_BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea = function( self, _, v ) self.eCreationMRT = v[1] end
    end,

}

node "BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea"
{
    feedbacks = { { { "done_BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea" }, "BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_Emergency_EvacuateArea", { "done_BEH_Medo_Automate_Emergency_EvacuateArea" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeMission = self.params[1]
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        self.pions = self.pions or {}
         do
            local _continue = true
            local switch_1 = --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_SelectionnerPions then
                    self.ePhase = eMRT_AssignerMissions
                    local selTmp = DEC_Automate_PionsSansPC()
                    local i = #( selTmp ) - #( selTmp ) / 3
                    for _,x in pairs( selTmp or {} ) do
                    local _continue = true
do
                            local pion = x
                            if( i < 0 ) then
                                break
                            end

                            DIA_PushBack( self.pions, pion )
                            i = i - 1
                        end

                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------				
]]if( self.eActionMRT == eActionImpossible ) then
                        do
                                                        do
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "eValidationMRT == eActionImpossible" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.pions ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eTypeMission
                        local cases_switch_2 = {}
                            if switch_2 == "T_Mission_Automate_INF_Controler" then
                                Activate( self.activations.BEH_Medo_Automate_Emergency_EvacuateArea, 1, { self.pions, } )
                                _continue = false
                                                        cases_switch_2[1] = true

                            else
                                DEC_Trace( "Mission Inconnue" )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                                                        end
                        end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Evacuate Area
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_Emergency_EvacuateArea"
{
    feedbacks = { { { "done_BEH_Medo_Automate_Emergency_EvacuateArea" }, "BEH_Medo_Automate_Emergency_EvacuateArea" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_Emergency_EvacuateArea, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "BEH_Mission_Automate_Emergency_AssignerA_EvacuateArea", { "done_BEH_Mission_Automate_Emergency_AssignerA_EvacuateArea" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPions = self.params[1]
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.lstLocalisations = self.lstLocalisations or {}
        self.eCodeLoc = self.eCodeLoc or eNoError
        --[[//--------------------------------------------------------------------------
]]--[[// Init
]]--[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[//----------------------------------------------------------------------
]]--[[// Decoupage de la zone A surveiller
]]--[[//----------------------------------------------------------------------
]]self.lstLocalisations = DEC_Geometrie_DecoupeLocalisation( self.mission.area_, #( self._namedParams.lstPions ), self.eCodeLoc )
                self.eCodeLoc = self.lstLocalisations.second
                self.lstLocalisations = self.lstLocalisations.first
                 do
                    local _continue = true
                    local switch_1 = self.eCodeLoc
                    local cases_switch_1 = {}
                        if switch_1 == eError_PionsPasDansMemeFuseau
                        or switch_1 == eError_LocalisationPasDansFuseau then
                                                    DEC_Trace( "Erreur MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                                                        do
                                DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, {} )
                                                                self:SendFeedback( eActionImpossible )
                                do return end

                            end

                            _continue = false
                        elseif switch_1 == eWarning_DecoupageIncomplet then
                                                    DEC_Trace( "Alerte MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == eNoError then
                                                    _continue = false
                                                cases_switch_1[3] = true
                        end
                    end

                local rIt = 0
                for _,x_pion in pairs( self._namedParams.lstPions or {} ) do
                local _continue = true
                    do
                        if( rIt < #( self.lstLocalisations ) ) then
                            do
                                local locZone = DEC_UserTypeList_GetAt( self.lstLocalisations, rIt )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_Emergency_AssignerA_EvacuateArea, 1, { ePhase_MRT, x_pion, locZone, } )
                            end
                        end

                                                rIt = rIt + 1
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_Emergency_EvacuateArea = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_EvacuateArea, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_EvacuateArea, "BEH_Mission_Automate_Emergency_AssignerA_EvacuateArea", nodes.BEH_Mission_Automate_Emergency_AssignerA_EvacuateArea }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea, "BEH_Medo_Automate_Emergency_EvacuateArea", nodes.BEH_Medo_Automate_Emergency_EvacuateArea }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Emergency_EvacuateArea, "BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea", nodes.BEH_Medo_Automate_Emergency_PreparerMission_EvacuateArea }

includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/FollowPopulation.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2007 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_FollowPopulation"
{
    feedbacks = { { { "done_MIS_Pion_Emergency_FollowPopulation" }, "MIS_Pion_Emergency_FollowPopulation" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Emergency_FollowPopulation, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Pop_Pion_TryFollowPopulationToDestinatin", { "done_BEH_Pop_Pion_TryFollowPopulationToDestinatin" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    Activate( self.activations.BEH_Pop_Pion_TryFollowPopulationToDestinatin, 1, { self._namedParams.mission.population_, self._namedParams.mission.destination_, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

node "BEH_Pop_Pion_TryFollowPopulationToDestinatin"
{
    feedbacks = { { { "done_BEH_Pop_Pion_TryFollowPopulationToDestinatin" }, "BEH_Pop_Pion_TryFollowPopulationToDestinatin" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_Pion_TryFollowPopulationToDestinatin, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.population = self.params[1]
        self._namedParams.destination = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.objectif = self.objectif or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                self.objectif = DEC_ConnaissancePopulation_PointPlusProche( self._namedParams.population )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Rejoindre la pop
]]--[[//-----------------------------------------------------------------------------
]]        end

        local distance = DEC_Geometrie_Distance( DEC_Agent_Position(), self.objectif )
        if( distance <= 100 and DEC_UserTypeList_Contient( DEC_Connaissances_CollisionsPopulations(), self._namedParams.population ) ) then
            do
                self.objectif = DEC_ConnaissancePopulation_PointPlusProche( self._namedParams.population )
                Activate( self.activations.ACT_Info_Trace, 1, { "Distance: " .. FloatToString( distance ), } )
                Activate( self.activations.ACT_Info_Trace, 1, { "Monitor population. Reach the target destination.", } )
                Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.destination, eProgressionDefaut, eTypeItiMouvement, } )
            end
        else
do
                Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.objectif, eProgressionDefaut, eTypeItiMouvement, } )
                Activate( self.activations.ACT_Info_Trace, 1, { "Move toward the nearest population.", } )
            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_FollowPopulation = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_TryFollowPopulationToDestinatin, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_TryFollowPopulationToDestinatin, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_FollowPopulation, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_FollowPopulation, "BEH_Pop_Pion_TryFollowPopulationToDestinatin", nodes.BEH_Pop_Pion_TryFollowPopulationToDestinatin }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_FollowPopulation, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }

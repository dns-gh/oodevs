includedFiles = includedFiles or {}
includedFiles["sources/emergency/pions/common/missions/Supply.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// This file is part of a MASA library or program.
]]--[[// Refer to the included end-user license agreement for restrictions.
]]--[[//
]]--[[// Copyright (c) 2009 Mathématiques Appliquées SA (MASA)
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_Emergency_Supply"
{
    feedbacks = { { { "done_MIS_Pion_Emergency_Supply" }, "MIS_Pion_Emergency_Supply" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Emergency_Supply, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Pion_Emergency_OrganiseSupply", { "done_BEH_Pion_Emergency_OrganiseSupply" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC", { "done_ACT_RC" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        self.target = self.target or S_Geometrie_BarycentreZone( self._namedParams.mission.area_ )
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
                if switch_1 == eRejoindre then
                    if( DEC_Geometrie_EstPointDansLocalisation( DEC_Agent_Position(), self._namedParams.mission.area_ ) ) then
                        Activate( self.activations.BEH_Pion_Emergency_OrganiseSupply, 1.1, { self._namedParams.mission.area_, } )
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    Activate( self.activations.BEH_Dep_ProgressionVers, GetMotivation( "MOT_Mission" ), { self.target, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                    _continue = false
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                end
            end

    end,

}

node "BEH_Pion_Emergency_OrganiseSupply"
{
    feedbacks = { { { "done_BEH_Pion_Emergency_OrganiseSupply" }, "BEH_Pion_Emergency_OrganiseSupply" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_Emergency_OrganiseSupply, {value} ) end,
    activations =
    {
        { "BEH_Pion_Emergency_SupplyPoint", { "done_BEH_Pion_Emergency_SupplyPoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                local listSupplyPoint = DEC_Connaissances_ObjetsDansZone( self._namedParams.zone, S_TypeObject_ToString( eTypeObjectSupplyFacility ) )
        for _,x_object in pairs( listSupplyPoint or emptyTable ) do
        local _continue = true
do
                if( not DEC_ConnaissanceObject_EstRavitaillee( x_object ) ) then
                    Activate( self.activations.BEH_Pion_Emergency_SupplyPoint, S_Obj_ForceDistance( x_object ), { x_object, } )
                end

            end

        end

    end,

}

node "BEH_Pion_Emergency_SupplyPoint"
{
    feedbacks = { { { "done_BEH_Pion_Emergency_SupplyPoint" }, "BEH_Pion_Emergency_SupplyPoint" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_Emergency_SupplyPoint, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obj_Pion_Emergency_Supply", { "done_ACT_Obj_Pion_Emergency_Supply" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.position = self.position or S_Obj_Position( self._namedParams.objet )
        if( self.eAction == eActionEnCours or DEC_Geometrie_Distance( self.position, DEC_Agent_Position() ) > 50 ) then
            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.position, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
        end

        Activate( self.activations.ACT_Obj_Pion_Emergency_Supply, 1.1, { self._namedParams.objet, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Emergency_Supply = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pion_Emergency_OrganiseSupply, "BEH_Pion_Emergency_SupplyPoint", nodes.BEH_Pion_Emergency_SupplyPoint }
connections[ #connections + 1 ] = { nodes.BEH_Pion_Emergency_SupplyPoint, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pion_Emergency_SupplyPoint, "ACT_Obj_Pion_Emergency_Supply", nodes.ACT_Obj_Pion_Emergency_Supply }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Supply, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Supply, "BEH_Pion_Emergency_OrganiseSupply", nodes.BEH_Pion_Emergency_OrganiseSupply }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Supply, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Supply, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Emergency_Supply, "ACT_RC", nodes.ACT_RC }

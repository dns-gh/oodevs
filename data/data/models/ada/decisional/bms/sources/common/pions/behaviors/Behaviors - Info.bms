includedFiles = includedFiles or {}
includedFiles["sources/common/pions/behaviors/Behaviors - Info.bms"] = true

local emptyTable = emptyTable



--[[// *****************************************************************************
]]--[[// BEH_Info_Pion_RendreCompte()
]]--[[//
]]--[[// Commentaires :
]]--[[// 
]]--[[// *****************************************************************************
]]node "BEH_Info_Pion_RendreCompte"
{
    feedbacks = { { { "done_BEH_Info_Pion_RendreCompte" }, "BEH_Info_Pion_RendreCompte" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Info_Pion_RendreCompte, {value} ) end,
    activations =
    {
        { "ACT_AFFICHE_EtatDecisionnel", { "done_ACT_AFFICHE_EtatDecisionnel" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis", { "done_BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis" } },
        { "BEH_Info_Pion_RendreCompteSurPriseDeContact", { "done_BEH_Info_Pion_RendreCompteSurPriseDeContact" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_RC_SurObjet", { "done_ACT_RC_SurObjet" } },
        { "ACT_RC_SurLima", { "done_ACT_RC_SurLima" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// debug TEMP ]]
        Activate( self.activations.ACT_AFFICHE_EtatDecisionnel, 1, { "Echelon", EnumToString( F_Pion_GeteEtatEchelon( myself ), E_EtatPion_Echelon ), } )
        Activate( self.activations.ACT_AFFICHE_EtatDecisionnel, 1, { "Lima", EnumToString( F_Pion_GeteEtatLima( myself ), E_EtatPion_Lima ), } )
        Activate( self.activations.ACT_Info_Trace, 1, { "Etat Phase mission =====> " .. EnumToString( F_Pion_GeteEtatPhaseMission( myself ), E_EtatPion_PhaseMission ), } )
        if( F_Pion_GeteEtatDecPrudence( myself ) == eEtatDecPrudence_Actif ) then
            Activate( self.activations.ACT_AFFICHE_EtatDecisionnel, 1, { "Contact", "eEtatDec_Sauvegarde", } )
        else
            Activate( self.activations.ACT_AFFICHE_EtatDecisionnel, 1, { "Contact", EnumToString( F_Pion_GeteEtatDec( myself ), E_EtatPion_Dec ), } )
        end

        local switch_1 = F_Pion_GeteEtatDestruction( myself )
        if switch_1 == eEtatDestruction_Tactique then
            Activate( self.activations.ACT_RC, 1, { eRC_NonOperationnel, } )
        elseif switch_1 == eEtatDestruction_Total then
            Activate( self.activations.ACT_RC, 1, { eRC_NonOperationnel, } )
        elseif switch_1 == eEtatDestruction_None then
            Activate( self.activations.ACT_RC, 1, { eRC_Operationnel, } )
        end

        switch_1 = F_Pion_GeteEtatAmbiance( myself )
        if switch_1 == eEtatAmbiance_Surete then
            Activate( self.activations.ACT_RC, 1, { eRC_AmbianceSurete, } )
        elseif switch_1 == eEtatAmbiance_Vitesse then
            Activate( self.activations.ACT_RC, 1, { eRC_AmbianceVitesse, } )
        end

        switch_1 = F_Pion_GeteEtatNbc( myself )
        if switch_1 == eEtatNbc_Niv0 then
            Activate( self.activations.ACT_RC, 1, { eRC_FinAlerteNBCNiveau4, } )
        elseif switch_1 == eEtatNbc_Niv4 then
            Activate( self.activations.ACT_RC, 1, { eRC_AlerteNBCNiveau4, } )
        end

        if( myself:DEC_Agent_EstContamine() ) then
            Activate( self.activations.ACT_RC, 1, { eRC_ContamineNBC, } )
        else
            Activate( self.activations.ACT_RC, 1, { eRC_DecontamineNBC, } )
        end

        switch_1 = F_Pion_GeteConsigneTir( myself )
        if switch_1 == eEtatROE_TirInterdit then
            Activate( self.activations.ACT_RC, 1, { eRC_TirInterdit, } )
        elseif switch_1 == eEtatROE_TirSurRiposte then
            Activate( self.activations.ACT_RC, 1, { eRC_TirRestreint, } )
        elseif switch_1 == eEtatROE_TirLibre then
            Activate( self.activations.ACT_RC, 1, { eRC_TirLibre, } )
        end

        switch_1 = F_Pion_GeteEtatRadio( myself )
        if switch_1 == eEtatRadio_Silence then
            Activate( self.activations.ACT_RC, 1, { eRC_DebutSilenceRadio, } )
        elseif switch_1 == eEtatRadio_SilencePartiel then
            Activate( self.activations.ACT_RC, 1, { eRC_DebutSilenceRadioPartiel, } )
        elseif switch_1 == eEtatRadio_Ouverte then
            Activate( self.activations.ACT_RC, 1, { eRC_FinSilenceRadio, } )
        end

        switch_1 = F_Pion_GeteEtatRadar( myself )
        if switch_1 == eEtatRadar_Silence then
            Activate( self.activations.ACT_RC, 1, { eRC_DebutSilenceRadar, } )
        elseif switch_1 == eEtatRadar_Ouvert then
            Activate( self.activations.ACT_RC, 1, { eRC_FinSilenceRadar, } )
        end

        local nEni = #DEC_Connaissances_UnitesRenduesAProximite( 1000 )
        if nEni > 0 then
            Activate( self.activations.ACT_RC, nEni, { eRC_PresenceEnnemiRendu, } )
        end

        local nRefugies = #DEC_Connaissances_RefugiesAProximite( 1000 )
        if nRefugies > 0 then
            Activate( self.activations.ACT_RC, nRefugies, { eRC_PresencePopulation, } )
        end

        if( myself:DEC_Agent_EstNeutralise() ) then
            Activate( self.activations.ACT_Warning, 1, { eRC_DebutNeutralisation, } )
            --Activate( self.activations.ACT_RC, 1, { eRC_PrisSousTirArtillerie, } )
        else
            Activate( self.activations.ACT_Warning, 1, { eRC_FinNeutralisation, } )
        end

        self.rDist = self.rDist or 0
        self.repObjet = self.repObjet or nil
--[[//-----------------------------------------------------------------------------
]]--[[// Suivant l'état du deplcement
]]--[[//-----------------------------------------------------------------------------
]]--[[// Pas d'instance de deplacement
]]--[[// rien
]]--[[//-----------------------------------------------------------------------------
]]--[[// Si en poste devant obstacle (CR detection d'un obstacle qd inconnu fait 
]]--[[// dans le moteur)
]]--[[//-----------------------------------------------------------------------------
]]--[[// On se contente de recuperer l'objet pour faire le RC
]]--[[//-----------------------------------------------------------------------------
]]--[[// Cas de la reco d'un point 
]]--[[//-----------------------------------------------------------------------------
]]       switch_1 = F_Pion_GeteEtatDeplacement( myself )
         if switch_1 == eEtatDeplacement_PosteFaceAObstacle then
              local tmp = false
              tmp = DEC_Itineraire_ProchainObjet( self.repObjet, self.rDist, S_TypeObject_ToString( eTypeObjectBouchonMines ), S_TypeObject_ToString( eTypeObjectBouchonMinesParDispersion ), S_TypeObject_ToString( eTypeObjectZoneMineeLineaire ), S_TypeObject_ToString( eTypeObjectZoneMineeParDispersion ), S_TypeObject_ToString( eTypeObjectFosseAntiChar ), S_TypeObject_ToString( eTypeObjectAbatti ), S_TypeObject_ToString( eTypeObjectBarricade ), S_TypeObject_ToString( eTypeObjectEboulement ), S_TypeObject_ToString( eTypeObjectDestructionRoute ), S_TypeObject_ToString( eTypeObjectDestructionPont ) )
              self.repObjet = tmp.second.first
              self.rDist = tmp.second.second
              tmp = tmp.first
              Activate( self.activations.ACT_RC_SurObjet, 1, { eRC_EnPosteFaceAObstacle, self.repObjet, } )
         elseif switch_1 == eEtatDeplacement_EnReco then
              Activate( self.activations.ACT_RC, 1, { eRC_ReconnaissancePoint, } )
         end

        switch_1 = F_Pion_GeteEtatLima( myself )
        if switch_1 ~= eEtatLima_Fuseau and switch_1 ~= eEtatLima_aucune then
            Activate( self.activations.ACT_RC_SurLima, 1, { switch_1, } )
        end

        if( not DEC_Agent_AutomateEstEmbraye() ) then
              local switch_1 = F_Pion_GeteEtatOrdreCoordination( myself )
              if switch_1 == eEtatOrdreCoordination_Attendre then
                    if( F_Pion_GeteEtatLima( myself ) == eEtatLima_LD ) then
                        Activate( self.activations.ACT_RC, 1, { eRC_AttenteOrdreDeboucher, } )
                    else
                        Activate( self.activations.ACT_RC, 1, { eRC_AttenteOrdrePoursuivre, } )
                    end
              end
        end
        --[[//-----------------------------------------------------------------------------
]]--[[// CR SUR EVT enis
]]--[[//-----------------------------------------------------------------------------
]]--[[// Valable un tic
]]
        if( DEC_NouvelleMission() ) then
            do return end
        end

        Activate( self.activations.BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis, 1, emptyTable )
        Activate( self.activations.BEH_Info_Pion_RendreCompteSurPriseDeContact, 1, emptyTable )
    end,

}

--[[// *****************************************************************************
]]--[[// BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis()
]]--[[//
]]--[[// Commentaires :
]]--[[// 
]]--[[// *****************************************************************************
]]

node "BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis"
{
    feedbacks = { { { "done_BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis" }, "BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis, {value} ) end,
    activations =
    {
        { "BEH_Info_Pion_RendreCompteSurPriseAPartiDe", { "done_BEH_Info_Pion_RendreCompteSurPriseAPartiDe" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local listeUnitesPrenantAPartie = DEC_Connaissances_UnitesPrenantAPartie()
        for _,repEni in pairs( listeUnitesPrenantAPartie or emptyTable ) do
        local _continue = true
            StartActivateOverride( self, self.activations.BEH_Info_Pion_RendreCompteSurPriseAPartiDe, 1, { repEni, } )

        end

    end,
}

--[[// *****************************************************************************
]]--[[// BEH_Info_Pion_RendreCompteSurPriseAPartiDe()
]]--[[//
]]--[[// Commentaires : 1 CR par connaissance eni
]]--[[// 
]]--[[// *****************************************************************************
]]
node "BEH_Info_Pion_RendreCompteSurPriseAPartiDe"
{
    feedbacks = { { { "done_BEH_Info_Pion_RendreCompteSurPriseAPartiDe" }, "BEH_Info_Pion_RendreCompteSurPriseAPartiDe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Info_Pion_RendreCompteSurPriseAPartiDe, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-----------------------------------------------------------------------------
]]--[[// Validité
]]--[[//-----------------------------------------------------------------------------
]]if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.repEni ) ) then
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Init  --> CR une seule fois...par mission // MIA à rajouter
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            Activate( self.activations.ACT_RC, 1, { eRC_PrisAPartieParTirDirect, } )
        end

    end,
}

--[[// *****************************************************************************
]]--[[// BEH_Info_Pion_RendreCompteSurPriseDeContact()
]]--[[//
]]--[[// Commentaires : 1 CR par mission
]]--[[// 
]]--[[// *****************************************************************************
]]
node "BEH_Info_Pion_RendreCompteSurPriseDeContact"
{
    feedbacks = { { { "done_BEH_Info_Pion_RendreCompteSurPriseDeContact" }, "BEH_Info_Pion_RendreCompteSurPriseDeContact" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Info_Pion_RendreCompteSurPriseDeContact, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// vrai pendant au moins un tic
]]if( F_Pion_GeteEtatFeu( myself ) == eEtatFeu_Executer ) then
            StartActivateOverride( self, self.activations.ACT_RC, 1, { eRC_PriseContact, } )
        end

    end,
}

--[[// =============================================================================
]]--[[// =============================================================================
]]--[[// 			****************    CR SUR ENI   *****************
]]--[[// =============================================================================
]]--[[// =============================================================================
]]--[[// =============================================================================
]]--[[// =============================================================================
]]--[[// 			****************    INFO MOS   *****************
]]--[[// =============================================================================
]]--[[// ICI il s'agit de ne pas envoyer des CR opérationnels mais des états à MOS.
]]--[[// MIA: Meilleurs solution pour informer l'anibas. Les CR opérationnels devrait 
]]--[[//      seulement servir à donner des informations sur LES DECISIONS du pion 
]]--[[//      qui peuvent dépendre justement de ces états.
]]--[[//      ICI il s'agit de valeurs INTERPRETEES donc MAJ dans le décisionnel
]]--[[//
]]--[[// =============================================================================
]]--[[// *****************************************************************************
]]--[[// BEH_Info_Mos
]]--[[//
]]--[[// Commentaires :
]]--[[// 
]]--[[// *****************************************************************************
]]
node "BEH_Info_Mos"
{
    feedbacks = { { { "done_BEH_Info_Mos" }, "BEH_Info_Mos" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Info_Mos, {value} ) end,
    activations =
    {
        { "ACT_Info_EtatRapFor", { "done_ACT_Info_EtatRapFor" } },
        { "ACT_Info_EtatROE", { "done_ACT_Info_EtatROE" } },
        { "ACT_Info_EtatROEPopulation", { "done_ACT_Info_EtatROEPopulation" } },
        { "ACT_Info_EtatDec", { "done_ACT_Info_EtatDec" } },
        { "ACT_Info_EtatOperationnel", { "done_ACT_Info_EtatOperationnel" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// S_RapForLocal() renvoie l'enum moteur --> l'interpretation se fait dans cette fonction ]] 
        Activate( self.activations.ACT_Info_EtatRapFor, 1, { S_RapForLocal(), } )
        Activate( self.activations.ACT_Info_EtatROE, 1, { F_Pion_GeteConsigneTir( myself ), } )
        Activate( self.activations.ACT_Info_EtatROEPopulation, 1, { F_Pion_GeteConsigneTirPopulation( myself ), } )
        --[[// Résultat des motivations ]]
        local switch_1 = F_Pion_GeteEtatDec( myself )
        if switch_1 == eEtatDec_Sauvegarde then
            Activate( self.activations.ACT_Info_EtatDec, 1, { eEtatCombatDeRencontre_Esquive, } )
        elseif switch_1 == eEtatDec_RAS or switch_1 == eEtatDec_Continu then
            Activate( self.activations.ACT_Info_EtatDec, 1, { eEtatCombatDeRencontre_PoursuiteMission, } )
        end
        switch_1 = F_Pion_GeteEtatDestruction( myself )
        if switch_1 == eEtatDestruction_Tactique then
            Activate( self.activations.ACT_Info_EtatOperationnel, 1, { eEtatOp_DetruitTactiquement, } )
        elseif switch_1 == eEtatDestruction_Total then
            Activate( self.activations.ACT_Info_EtatOperationnel, 1, { eEtatOp_DetruitTotalement, } )
        elseif switch_1 == eEtatDestruction_None then
           Activate( self.activations.ACT_Info_EtatOperationnel, 1, { eEtatOp_Operationnel, } )
        end
    end,
}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_AFFICHE_EtatDecisionnel", nodes.ACT_AFFICHE_EtatDecisionnel }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis", nodes.BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "BEH_Info_Pion_RendreCompteSurPriseDeContact", nodes.BEH_Info_Pion_RendreCompteSurPriseDeContact }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_RC_SurObjet", nodes.ACT_RC_SurObjet }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_RC_SurLima", nodes.ACT_RC_SurLima }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompte, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompteSurPriseAPartiDe, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompteSurPriseAPartiParEnis, "BEH_Info_Pion_RendreCompteSurPriseAPartiDe", nodes.BEH_Info_Pion_RendreCompteSurPriseAPartiDe }
connections[ #connections + 1 ] = { nodes.BEH_Info_Pion_RendreCompteSurPriseDeContact, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Info_Mos, "ACT_Info_EtatRapFor", nodes.ACT_Info_EtatRapFor }
connections[ #connections + 1 ] = { nodes.BEH_Info_Mos, "ACT_Info_EtatROE", nodes.ACT_Info_EtatROE }
connections[ #connections + 1 ] = { nodes.BEH_Info_Mos, "ACT_Info_EtatROEPopulation", nodes.ACT_Info_EtatROEPopulation }
connections[ #connections + 1 ] = { nodes.BEH_Info_Mos, "ACT_Info_EtatDec", nodes.ACT_Info_EtatDec }
connections[ #connections + 1 ] = { nodes.BEH_Info_Mos, "ACT_Info_EtatOperationnel", nodes.ACT_Info_EtatOperationnel }

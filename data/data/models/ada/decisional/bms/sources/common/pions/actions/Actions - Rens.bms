includedFiles = includedFiles or {}
includedFiles["sources/common/pions/actions/Actions - Rens.bms"] = true


--[[// *****************************************************************************
]]--[[// ACT_Rens_CommuterRadio
]]--[[//
]]--[[// Commentaires :Quand appelé, on passe en silence radio.
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Rens_CommuterRadio"
{
    feedbacks = { { { "done_ACT_Rens_CommuterRadio" }, "ACT_Rens_CommuterRadio" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Rens_CommuterRadio, {value} ) end,
    actuators =
    {
        silenceradio = 1,
    },

    create = function( self )
    end,

    select = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_Silence )
        DEC_Agent_PasserEnSilenceRadio()
    end,

    deselect = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_Ouverte )
        DEC_Agent_ArreterSilenceRadio()
    end,

    destroy = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_Ouverte )
        DEC_Agent_ArreterSilenceRadio()
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Rens_CommuterRadioPartiel
]]--[[//
]]--[[// Commentaires :Quand appelé, on passe en silence radio.
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Rens_CommuterRadioPartiel"
{
    feedbacks = { { { "done_ACT_Rens_CommuterRadioPartiel" }, "ACT_Rens_CommuterRadioPartiel" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Rens_CommuterRadioPartiel, {value} ) end,
    actuators =
    {
        silenceradio = 1,
    },

    create = function( self )
    end,

    select = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_SilencePartiel )
        DEC_Agent_PasserEnSilenceRadioPartiel()
    end,

    deselect = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_Ouverte )
        DEC_Agent_ArreterSilenceRadio()
    end,

    destroy = function( self )
                F_Pion_SeteEtatRadio( myself, eEtatRadio_Ouverte )
        DEC_Agent_ArreterSilenceRadio()
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_PasserEnSilenceRadar
]]--[[//
]]--[[// Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_PasserEnSilenceRadar"
{
    feedbacks = { { { "done_ACT_Pion_Rens_PasserEnSilenceRadar" }, "ACT_Pion_Rens_PasserEnSilenceRadar" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_PasserEnSilenceRadar, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.typeRadar = self.params[1]
    end,

    select = function( self )
                F_Pion_SeteEtatRadar( myself, eEtatRadar_Silence )
        DEC_Perception_DesactiverRadar( self._namedParams.typeRadar )
    end,

    deselect = function( self )
                F_Pion_SeteEtatRadar( myself, eEtatRadar_Ouvert )
        DEC_Perception_ActiverRadar( self._namedParams.typeRadar )
    end,

    destroy = function( self )
                F_Pion_SeteEtatRadar( myself, eEtatRadar_Ouvert )
        DEC_Perception_ActiverRadar( self._namedParams.typeRadar )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_PartageConnaissancesDansZoneAvec
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_PartageConnaissancesDansZoneAvec"
{
    feedbacks = { { { "done_ACT_Pion_Rens_PartageConnaissancesDansZoneAvec" }, "ACT_Pion_Rens_PartageConnaissancesDansZoneAvec" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_PartageConnaissancesDansZoneAvec, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.automate = self.params[1]
        self._namedParams.centreZone = self.params[2]
        self._namedParams.rayonZone = self.params[3]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_DebutLiaison )
                else
                    DEC_Message( eRC_DebutLiaison )
                end

            end
        end

        DEC_Connaissances_PartageConnaissancesDansZoneAvec( self._namedParams.automate, self._namedParams.centreZone, self._namedParams.rayonZone )
    end,

    deselect = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_PartageConnaissancesAvec
]]--[[// 
]]--[[// Commentaires:partage de la connaissance avec le pion passé en paramètre
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_PartageConnaissancesAvec"
{
    feedbacks = { { { "done_ACT_Pion_Rens_PartageConnaissancesAvec" }, "ACT_Pion_Rens_PartageConnaissancesAvec" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_PartageConnaissancesAvec, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.automate = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_DebutLiaison )
                else
                    DEC_Message( eRC_DebutLiaison )
                end

            end
        end

        DEC_Connaissances_PartageConnaissancesAvec( self._namedParams.automate, 0.01 )
    end,

    deselect = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

}


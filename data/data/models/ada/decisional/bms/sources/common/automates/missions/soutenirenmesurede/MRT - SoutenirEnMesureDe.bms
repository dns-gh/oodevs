includedFiles = includedFiles or {}
includedFiles["sources/common/automates/missions/soutenirenmesurede/MRT - SoutenirEnMesureDe.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_SoutenirEnMesureDe
]]--[[// 
]]--[[// Commentaires: ajout ADA 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_SoutenirEnMesureDe"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_MRT_SoutenirEnMesureDe : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( DEC_Automate_PionsAvecPC() ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerSoutenirEnMesureDeA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        if( ModuleBegins() ) then
for _,pion in pairs( DEC_Automate_PionsAvecPC() ) do
            local _continue = true
                StartActivate( self.activations.BEH_Mission_Automate_AssignerSoutenirEnMesureDeA, 1, { ePhase_MRT, pion, self.mission.itineraire_, } )

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_SoutenirSurPositionEnMesureDe
]]--[[// 
]]--[[// Commentaires: ajout ADA
]]--[[//
]]--[[// *****************************************************************************
]]}

node "MIS_Automate_MRT_SoutenirSurPositionEnMesureDe"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_MRT_SoutenirSurPositionEnMesureDe : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( DEC_Automate_PionsAvecPC() ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe, 1, { DEC_Automate_PionsAvecPC(), self._namedParams.mission.position_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerSoutenirSurPositionEnMesureDeA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.locPosition = self.params[2]
    end,

    activate = function( self )
        self.centre = self.centre or S_Geometrie_BarycentreZone( self._namedParams.locPosition )
        self.mission = self.mission or DEC_GetMission( myself )
        if( ModuleBegins() ) then
for _,pion in pairs( DEC_Automate_PionsAvecPC() ) do
            local _continue = true
                do
                    local position = DEC_Geometrie_PositionAleatoireDansCercle( self.centre, 500 )
                    StartActivate( self.activations.BEH_Mission_Automate_AssignerSoutenirSurPositionEnMesureDeA, 1, { ePhase_MRT, pion, position, } )
                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_SoutenirEnMesureDe = { "mission" }
eventmanager_plugin.MIS_Automate_MRT_SoutenirSurPositionEnMesureDe = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe, "BEH_Mission_Automate_AssignerSoutenirEnMesureDeA", nodes.BEH_Mission_Automate_AssignerSoutenirEnMesureDeA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe, "BEH_Mission_Automate_AssignerSoutenirSurPositionEnMesureDeA", nodes.BEH_Mission_Automate_AssignerSoutenirSurPositionEnMesureDeA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SoutenirEnMesureDe, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SoutenirEnMesureDe, "BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe", nodes.BEH_Medo_Automate_AssignerFaireSoutenirEnMesureDe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SoutenirSurPositionEnMesureDe, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SoutenirSurPositionEnMesureDe, "BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe", nodes.BEH_Medo_Automate_AssignerFaireSoutenirSurPositionEnMesureDe }

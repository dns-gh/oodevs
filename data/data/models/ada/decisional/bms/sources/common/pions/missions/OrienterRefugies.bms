includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missions/OrienterRefugies.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_OrienterRefugies
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_OrienterRefugies"
{
    feedbacks = { { { "done_MIS_Pion_OrienterRefugies" }, "MIS_Pion_OrienterRefugies" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_OrienterRefugies, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_AllerRecupererRefugies", { "done_BEH_Dep_Pion_AllerRecupererRefugies" } },
        { "BEH_Dep_Pion_AllerDebarquerRefugies", { "done_BEH_Dep_Pion_AllerDebarquerRefugies" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours
        --[[// Init
]]if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[// Validite camp
]]        end

        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.mission.campRefugies_ ) ) then
            self.ePhase = eFinMission
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
--[[// Récuperer les réfugies et aller les déposer dans le camp
]]--[[// Fin mission
]]            local switch_1 = self.ePhase
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eEmbarquer
                    _continue = false
                elseif switch_1 == eEmbarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    if( S_Liste_RefugiesTousEmbarques( self._namedParams.mission.refugies_ ) ) then
                        self.ePhase = eDebarquer
                    end

                    Activate( self.activations.BEH_Dep_Pion_AllerRecupererRefugies, 1, { self._namedParams.mission.refugies_, } )
                    _continue = false
                elseif switch_1 == eDebarquer then
                    if( S_Misc_Pion_RefugiesTousDebarquesDansCamp( self._namedParams.mission.refugies_, self._namedParams.mission.campRefugies_ ) ) then
                        self.ePhase = eFinMission
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_AllerDebarquerRefugies, 1, { self._namedParams.mission.refugies_, self._namedParams.mission.campRefugies_, } )
self.done_BEH_Dep_Pion_AllerDebarquerRefugies = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, emptyTable )
                    _continue = false
                                end
            end

    end,

    destroy = function( self )
                for _,refugie in pairs( self._namedParams.mission.refugies_ or emptyTable ) do
        local _continue = true
            DEC_Refugies_Debarquer( refugie )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Pion_AllerRecupererRefugies
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_AllerRecupererRefugies"
{
    feedbacks = { { { "done_BEH_Dep_Pion_AllerRecupererRefugies" }, "BEH_Dep_Pion_AllerRecupererRefugies" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_AllerRecupererRefugies, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_GererEmbarquementRefugie", { "done_BEH_Dep_Pion_GererEmbarquementRefugie" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.refugies = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,refugie in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Gestion de chaque pion refugie
]]--[[//-----------------------------------------------------------------------------
]]self._namedParams.refugies or emptyTable ) do
        local _continue = true
if( DEC_ConnaissanceAgent_EstValide( refugie ) and not DEC_Refugies_EstEmbarque( refugie ) ) then
                Activate( self.activations.BEH_Dep_Pion_GererEmbarquementRefugie, S_Force_DistancePt( DEC_ConnaissanceAgent_Position( refugie ) ), { refugie, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Pion_GererEmbarquementRefugie
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_GererEmbarquementRefugie"
{
    feedbacks = { { { "done_BEH_Dep_Pion_GererEmbarquementRefugie" }, "BEH_Dep_Pion_GererEmbarquementRefugie" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_GererEmbarquementRefugie, {value} ) end,
    activations =
    {
        { "ACT_Transport_Pion_EmbarquerRefugie", { "done_ACT_Transport_Pion_EmbarquerRefugie" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.refugie = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_Geometrie_Distance( DEC_ConnaissanceAgent_Position( self._namedParams.refugie ), DEC_Agent_Position() ) < 100 ) then
            Activate( self.activations.ACT_Transport_Pion_EmbarquerRefugie, 1, { self._namedParams.refugie, } )
        else
            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.refugie ), eProgressionDirect, eTypeItiMouvement, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Pion_AllerDebarquerRefugies
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_AllerDebarquerRefugies"
{
    feedbacks = { { { "done_BEH_Dep_Pion_AllerDebarquerRefugies" }, "BEH_Dep_Pion_AllerDebarquerRefugies" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_AllerDebarquerRefugies, {value} ) end,
    activations =
    {
        { "ACT_Transport_Pion_DebarquerRefugieDansCamp", { "done_ACT_Transport_Pion_DebarquerRefugieDansCamp" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.refugies = self.params[1]
        self._namedParams.campRefugie = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.point = self.point or nil
        self.localisation = self.localisation or DEC_ConnaissanceObjet_Localisation( self._namedParams.campRefugie )
        --[[// Gestion erreur
]]if( self.localisation == nil ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// Calcule position
]]if( ModuleBegins() ) then
            do
                self.point = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self.localisation )
                if( self.point == nil ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionEffectuee )
                        Halt( self )
                        do return end

                    end
                end

            end
--[[// Rejoindre position et déarquer les refugies
]]        end

        if( DEC_Geometrie_Distance( self.point, DEC_Agent_Position() ) < 100 ) then
for _,refugie in pairs( self._namedParams.refugies or emptyTable ) do
            local _continue = true
                Activate( self.activations.ACT_Transport_Pion_DebarquerRefugieDansCamp, 1, { refugie, self._namedParams.campRefugie, } )

            end
        else
            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.point, eProgressionDirect, eTypeItiMouvement, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Transport_Pion_EmbarquerRefugie
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Transport_Pion_EmbarquerRefugie"
{
    feedbacks = { { { "done_ACT_Transport_Pion_EmbarquerRefugie" }, "ACT_Transport_Pion_EmbarquerRefugie" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_EmbarquerRefugie, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.refugie = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Refugies_OrienterEtEmbarquer( self._namedParams.refugie )
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Transport_Pion_DebarquerRefugieDansCamp
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Transport_Pion_DebarquerRefugieDansCamp"
{
    feedbacks = { { { "done_ACT_Transport_Pion_DebarquerRefugieDansCamp" }, "ACT_Transport_Pion_DebarquerRefugieDansCamp" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_DebarquerRefugieDansCamp, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.refugie = self.params[1]
        self._namedParams.campRefugie = self.params[2]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Refugies_DebarquerDansCamp( self._namedParams.refugie, self._namedParams.campRefugie )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_OrienterRefugies = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_AllerDebarquerRefugies, "ACT_Transport_Pion_DebarquerRefugieDansCamp", nodes.ACT_Transport_Pion_DebarquerRefugieDansCamp }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_AllerDebarquerRefugies, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_AllerRecupererRefugies, "BEH_Dep_Pion_GererEmbarquementRefugie", nodes.BEH_Dep_Pion_GererEmbarquementRefugie }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_GererEmbarquementRefugie, "ACT_Transport_Pion_EmbarquerRefugie", nodes.ACT_Transport_Pion_EmbarquerRefugie }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_GererEmbarquementRefugie, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_OrienterRefugies, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_OrienterRefugies, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_OrienterRefugies, "BEH_Dep_Pion_AllerRecupererRefugies", nodes.BEH_Dep_Pion_AllerRecupererRefugies }
connections[ #connections + 1 ] = { nodes.MIS_Pion_OrienterRefugies, "BEH_Dep_Pion_AllerDebarquerRefugies", nodes.BEH_Dep_Pion_AllerDebarquerRefugies }
connections[ #connections + 1 ] = { nodes.MIS_Pion_OrienterRefugies, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

includedFiles = includedFiles or {}
includedFiles["sources/common/automates/functions/Functions - Conduite.bms"] = true

include "bit.lua"

--[[// *****************************************************************************
]]--[[// Fonctions Communes aux pions
]]--[[// Thème : Ennemis
]]--[[// *****************************************************************************
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie le nombre de pions (parmis ceux passé en paramètre) étant en phase
]]--[[// de mission passée en paramètre
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie le nombre de pions (parmis ceux passé en paramètre) dont l'état lima 
]]--[[// correspond à celui passé en parmètre
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie vrai si l'automate est en difficulté (Cf. pour CR et Coup Arret ABC)
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie vrai si l'automate est en difficulté (Cf. pour CR et Coup Arret ABC)
]]--[[// ----------------------------------------------------------------------------
]]function S_Conduite_Pions_EtatMission( sPions, eEtatPhase_Mission )
    local _returnValue = 0
    _returnValue = 0
    for _,x in pairs( sPions ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhase_Mission ) then
                                _returnValue = _returnValue + 1
            end

        end

    end

    return _returnValue
end

function S_Conduite_Pions_EtatLima( sPions, eEtatLima )
    local _returnValue = 0
    _returnValue = 0
    for _,x in pairs( sPions ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatLima( pion ) == eEtatLima ) then
                                _returnValue = _returnValue + 1
            end

        end

    end

    return _returnValue
end

function S_Automate_EstEnDifficulte( )
    local _returnValue = false
    _returnValue = false
    local listePionsPE = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
    local rIterateur = 0
    for _,x in pairs( listePionsPE ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDec( pion ) == eEtatDec_Sauvegarde or F_Pion_GeteEtatDecPrudence( pion ) == eEtatDecPrudence_Actif ) then
                                rIterateur = rIterateur + 1
            end

        end

    end

    if( ( rIterateur ~= 0 and rIterateur ~= nil ) and rIterateur == #( listePionsPE ) ) then
        _returnValue = true
    end

    return _returnValue
end

function S_Automate_EstPasEnDifficulte( )
    local _returnValue = false
    _returnValue = true
    local listePionsPE = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
    for _,x in pairs( listePionsPE ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDec( pion ) == eEtatDec_Sauvegarde or F_Pion_GeteEtatDecPrudence( pion ) == eEtatDecPrudence_Actif ) then
                _returnValue = false
            end

        end

    end

    return _returnValue
end


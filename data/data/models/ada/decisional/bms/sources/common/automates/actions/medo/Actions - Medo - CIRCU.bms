includedFiles = includedFiles or {}
includedFiles["sources/common/automates/actions/medo/Actions - Medo - CIRCU.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerRenforcerA
]]--[[//
]]--[[// Commentaires: utilisation de l'interface ASN du génie. Pas d'interface 
]]--[[// spécifique pour la CIRCU
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_CIRCU_AssignerRenforcerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_CIRCU_AssignerRenforcerA" }, "ACT_Mission_Automate_CIRCU_AssignerRenforcerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_CIRCU_AssignerRenforcerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pionEnRenfort = self.params[2]
        self._namedParams.pionARenforcer = self.params[3]
        self._namedParams.positionRenf = self.params[4]
    end,

    select = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "$$$------>Assigne mission 'Renforcer' a " .. DEC_GetSzName( self._namedParams.pionEnRenfort ) .. " pour " .. DEC_GetSzName( self._namedParams.pionARenforcer ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------
]]--[[// Cree la mission
]]--[[//-----------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pionEnRenfort, "T_Mission_Pion_GEN_Renforcer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pionEnRenfort, "T_Mission_Pion_GEN_Renforcer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Unité à renforcer
]]DEC_AssignMissionParameter( self.missionPion, "unite_", self._namedParams.pionARenforcer )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pionEnRenfort, eEtatEchelon_Premier )
        --[[// Lieu renforcement
]]DEC_Copie_Point_Mission( self._namedParams.positionRenf, self.missionPion, "lieuRenforcement_" )
        --[[//-----------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerSurveillerA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerSurveillerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerSurveillerA" }, "ACT_Mission_Automate_LOG_AssignerSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerSurveillerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Surveiller' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_Surveiller" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_Surveiller" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerAppuyerMouvementDansZoneA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA" }, "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Appuyer mouvement dans zone' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerMouvementDansZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerMouvementDansZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerMettreEnOeuvreZoneStationnemenA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA" }, "ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Mettre en oeuvre une zone de stationnement' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_MettreEnOeuvreZoneStationnement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerReconnaitreZoneContamineeA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA" }, "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Reconnaître une zone contaminée' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreZoneContaminee" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreZoneContaminee" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerBloquerZoneA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerBloquerZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerBloquerZoneA" }, "ACT_Mission_Automate_LOG_AssignerBloquerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerBloquerZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Bloquer une zone' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_BloquerZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_BloquerZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerArmerPIAA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerArmerPIAA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerArmerPIAA" }, "ACT_Mission_Automate_LOG_AssignerArmerPIAA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerArmerPIAA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pt = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Armer un PIA' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ArmerPIA" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ArmerPIA" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Point_Mission( self._namedParams.pt, self.missionPion, "point_" )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerReconnaitreItineraireA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA" }, "ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.iti = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Reconnaitre itinéraire' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreItineraire" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreItineraire" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_ListePoints_Mission( self._namedParams.iti, self.missionPion, "itineraireLog_" )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerAppuyerMouvementA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA" }, "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pionA = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Appuyer mouvement' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerMouvement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerMouvement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "uniteAAppuyer_", self._namedParams.pionA )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerReconnaitreZoneDeDeploiementA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA" }, "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.loc = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Reconnaître une zone de déploiement' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_ReconnaitreZoneDeDeploiement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Localisation_Mission( self._namedParams.loc, self.missionPion, "zone_" )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerAppuyerFranchissementSurUnPointA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA" }, "ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.obj = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Appuyer le franchissement sur un point' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_AppuyerFranchissementSurUnPoint" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "pontFlottant_", self._namedParams.obj )
        --[[// Echelon
]]--[[// MIA: à passer en paramètre
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la myself.mission_ si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/common/pions/behaviors/Behaviors - POP - Dep.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//  BEH_Pop_Pion_PresAuDecrochageFaceA
]]--[[//
]]--[[//  Commentaires: l'esquive proprement dite ne commence qu'après une premiere PAP
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Pop_Pion_PresAuDecrochageFaceA"
{
    activations =
    {
        { "BEH_Pop_Pion_EsquiveFaceA", {} },
        { "BEH_EsquiverLaPopulationIncontrolable", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pop = self.params[1]
    end,

    activate = function( self )
        self.bEsquiver = self.bEsquiver or false
        self.eROEPopulation = self.eROEPopulation or DEC_Agent_RoePopulation()
        --[[//on checke les changements de ROE, on reinitialise dans ce cas
]]local eRoe = DEC_Agent_RoePopulation()
        if( eRoe ~= self.eROEPopulation ) then
            Halt( self )
            do return end
        end

        if( DEC_UserTypeList_Contient( DEC_Connaissances_PopulationsPrenantAPartie(), self._namedParams.pop ) ) then
            self.bEsquiver = true
        end

        if( self.bEsquiver ) then
            do
                if( ( GetStimulus( "STIM_TenirFaceAPopulation" ) == 0 or GetStimulus( "STIM_TenirFaceAPopulation" ) == nil ) ) then
                    Activate( self.activations.BEH_Pop_Pion_EsquiveFaceA, 1, { self._namedParams.pop, } )
                else
                    Activate( self.activations.BEH_EsquiverLaPopulationIncontrolable, 1, { self._namedParams.pop, } )
                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_EsquiverLaPopulationIncontrolable
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_EsquiverLaPopulationIncontrolable"
{
    activations =
    {
        { "ACT_Misc_Delai", {} },
        { "BEH_Pop_Pion_EsquiveFaceA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pop = self.params[1]
    end,

    activate = function( self )
        self.prevDomination = self.prevDomination or 0
        self.eEtatDelai = self.eEtatDelai or eActionEnCours
        self.bDerniereChance = self.bDerniereChance or false
        self.eROEPopulation = self.eROEPopulation or DEC_Agent_RoePopulation()
        self.eROEPopulationVirtuel = self.eROEPopulationVirtuel or eEtatROEPopulation_EmploiForceInterdit
        self.delai = self.delai or 0
        if( ModuleBegins() ) then
            do
                local eValiditeRequete = nil
                self.prevDomination = DEC_ConnaissancePopulation_Domination( self._namedParams.pop, eValiditeRequete )
                eValiditeRequete = self.prevDomination.second
                self.prevDomination = self.prevDomination.first
            end
--[[//on checke les changements de ROE
]]        end

        local eRoe = DEC_Agent_RoePopulation()
        if( eRoe ~= self.eROEPopulation ) then
            do
                --[[//on a nécessairement ROE < Attitude, sinon l'instance aurait été tuée plus haut
]]if( eRoe > self.eROEPopulation ) then
                    self.bDerniereChance = false
                else
                    --[[//c'est jouer avec le feu de diminuer les ROE! c'est la derniere chance
]]self.bDerniereChance = true
                end

                self.eROEPopulation = eRoe
                local eValiditeRequete = nil
                self.prevDomination = DEC_ConnaissancePopulation_Domination( self._namedParams.pop, eValiditeRequete )
                eValiditeRequete = self.prevDomination.second
                self.prevDomination = self.prevDomination.first
                                Halt( self )
                do return end
--[[//pour forcer à tuer l'instance de ACT_Misc_Delai
]]
            end
        end

        if( self.bDerniereChance ) then
            --[[//15 minutes pour l'appel de dernière chance
]]self.delai = 15
        else
            --[[//10 minutes en temps normal
]]self.delai = 10
        end

        --[[// on checke au bout de 15 minutes
]]if( self.eEtatDelai == eActionEnCours ) then
            Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { BEH_EsquiverLaPopulationIncontrolable, self.delai, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatDelai = v else rawset( t, k, v ) end end } ) )
        else
do
                local eValiditeRequete = nil
                local domination = DEC_ConnaissancePopulation_Domination( self._namedParams.pop, eValiditeRequete )
                --[[//la domination doit avoir diminuée au moins de 20%
]]if( ( ( domination < ( self.prevDomination - 0.2 ) ) or domination == 0 or ( domination < ( self.prevDomination - 0.2 ) ) or domination == nil ) ) then
                    do
                        self.prevDomination = domination
                        self.eEtatDelai = eActionEnCours
                    end
                else
if( self.bDerniereChance ) then
                        Activate( self.activations.BEH_Pop_Pion_EsquiveFaceA, 1, { self._namedParams.pop, } )
                    else
if( eRoe > self.eROEPopulationVirtuel ) then
                            do
                                --[[//on essaye plus fort
]]self.eROEPopulationVirtuel = S_AugmenterROEPopulation( self.eROEPopulationVirtuel )
                                self.prevDomination = domination
                                self.eEtatDelai = eActionEnCours
                                S_RCROE( self.eROEPopulationVirtuel )
                            end
                        else
do
                                self.bDerniereChance = true
                                self.prevDomination = domination
                                self.eEtatDelai = eActionEnCours
                                do
                                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                                        DEC_RC( eRC_SituationDifficilementTenableFaceAPopulation )
                                    else
                                        DEC_Message( eRC_SituationDifficilementTenableFaceAPopulation )
                                    end

                                end

                            end
                        end
                    end
                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[//  BEH_Pop_Pion_EsquiveFaceA
]]--[[//
]]--[[//  Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_EsquiveFaceA"
{
    instances =
    {
        max = 1,
        boost = 1.01,
    },

    activations =
    {
        { "ACT_Dep_ModulationVitesse", {} },
        { "ACT_Dep_SeDeplacer", {} },
        { "ACT_Pion_FuirPopulations", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pop = self.params[1]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        --[[// Itineraire
]]self.positionSurete = self.positionSurete or nil
        self.itEsquive = self.itEsquive or nil
        local rDistance = g_CurrentDistanceEsquivePopulation
        --[[//----------------------------------------------------------------------
]]--[[// Init comp
]]--[[//----------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DecrochageFaceAPopulation )
                    else
                        DEC_Message( eRC_DecrochageFaceAPopulation )
                    end

                end
--[[// Calcule la position
]]
                self.positionSurete = DEC_Geometrie_CalculerPositionSureteAvecPopulation( self._namedParams.pop, rDistance )
                --[[//positionSurete = S_Dep_CalculerPositionEsquivePopulation( pop, rDistance );
]]if( ( self.positionSurete ~= 0 and self.positionSurete ~= nil ) ) then
                    do
                        DEC_DebugAffichePoint( self.positionSurete )
                        self.itEsquive = DEC_CreerItineraire( self.positionSurete, eTypeItiRepli )
                    end
                else
do
                                                Halt( self )
                        do return end
--[[//destruction des points et itineraires
]]
                    end
                end

            end
        end

        if( self.eEtat == eActionEffectuee and DEC_UserTypeList_Contient( DEC_Connaissances_CollisionsPopulations(), self._namedParams.pop ) ) then
            Halt( self )
            do return end
        end

        --[[// Aller au plus vite
]]Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
        Activate( self.activations.ACT_Dep_SeDeplacer, 1, setmetatable( { self.itEsquive, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.ACT_Pion_FuirPopulations, 1, {} )
    end,

--[[// *****************************************************************************
]]--[[//  BEH_Pop_Pion_SecuriserPopulation
]]--[[//
]]--[[//  Commentaires: on sait déjà que la connaissance est valide
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_SecuriserPopulation"
{
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Pion_Securiser", {} },
        { "BEH_Dep_Virtuel_PreparationAction", {} },
        { "BEH_Dep_Virtuel_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pop = self.params[1]
    end,

    activate = function( self )
        self.ePreparation = self.ePreparation or eActionEnCours
        self.pointSecurisation = self.pointSecurisation or DEC_ConnaissancePopulation_PointSecurisation( self._namedParams.pop )
        DEC_DebugAffichePoint( self.pointSecurisation )
        --[[//-----------------------------------------------------------------------------
]]--[[// Securisation ou déplacement
]]--[[//-----------------------------------------------------------------------------
]]if( DEC_UserTypeList_Contient( DEC_Connaissances_CollisionsPopulations(), self._namedParams.pop ) ) then
            do
                if( self.ePreparation == eActionEffectuee ) then
                    Activate( self.activations.ACT_Pion_Securiser, 1, { self._namedParams.pop, } )
                end

                Activate( self.activations.BEH_Dep_Virtuel_PreparationAction, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.ePreparation = v else rawset( t, k, v ) end end } ) )
            end
        else
if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.pointSecurisation ) > 10 ) then
                do
                    self.ePreparation = eActionEnCours
                    Activate( self.activations.BEH_Dep_Virtuel_ProgressionVers, 1, { self.pointSecurisation, eProgressionDefaut, eTypeItiMouvement, } )
                end
--[[//le point de securisation est caduque: on en recalcule un nouveau
]]            else
                self.pointSecurisation = DEC_ConnaissancePopulation_PointSecurisation( self._namedParams.pop )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Pion_SecuriserPopulationDans
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_SecuriserPopulationDans"
{
    activations =
    {
        { "BEH_Pop_Pion_SecuriserPopulation", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Pour toutes les pops dans la zone... on sécurise la plus dangereuse
]]--[[//-----------------------------------------------------------------------------
]]local lstPops = DEC_Connaissances_Populations()
        for _,pop in pairs( lstPops ) do
        local _continue = true
do
                if( DEC_ConnaissancePopulation_EstDansZone( pop, self._namedParams.zone ) ) then
                    do
                        local eValiditeRequete = nil
                        local danger = DEC_ConnaissancePopulation_Dangerosite( pop )
                        if( ( ( DEC_ConnaissancePopulation_Domination( pop, eValiditeRequete ) == 0 or DEC_ConnaissancePopulation_Domination( pop, eValiditeRequete ) == nil ) ) and ( eValiditeRequete == eRequeteValide ) ) then
                            danger = 0.1
                        end

                        Activate( self.activations.BEH_Pop_Pion_SecuriserPopulation, danger, { pop, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Pion_BloquerPopulation
]]--[[//
]]--[[// Commentaires: comportement générique pour filtrer, interdire ...
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_BloquerPopulation"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Dep_Virtuel_ProgressionVers", {} },
        { "BEH_Pop_GererPositionBarrage", {} },
        { "ACT_Pion_CreerObjetSur", {} },
        { "BEH_Pop_Pion_AnimerBlocagePopulation", {} },
        { "BEH_Dep_Virtuel_PreparationAction", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objectif = self.params[1]
        self._namedParams.rMin = self.params[2]
        self._namedParams.rMax = self.params[3]
        self._namedParams.permeabilite = self.params[4]
        self._namedParams.missionName = self.params[5]
    end,

    activate = function( self )
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.ePreparation = self.ePreparation or eActionEnCours
        self.posteControle = self.posteControle or nil
        self.localisation = self.localisation or DEC_Geometrie_CreerLocalisationCercle( self._namedParams.objectif, self._namedParams.rMin )
        self.localisationEtendue = self.localisationEtendue or DEC_Geometrie_CreerLocalisationCercle( self._namedParams.objectif, self._namedParams.rMax )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        self.posteControle = S_Obj_ObtenirObjetProcheDe( self.localisation, eTypeObjectPosteControle, self._namedParams.rMax )
         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[//---------------------------------------------------------------------
]]--[[//---------------------------------------------------------------------
]]--[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { self._namedParams.missionName .. " begining", } )
                    self.ePhaseMission = eProgresser
                    
                --[[// 2) Rejoindre le site
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[//DEC_Trace(  FloatToString( DEC_Geometrie_Distance( myself.DEC_Agent_Position(), objectif ) )  );
]]if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), self._namedParams.objectif ) > 15 ) then
                        Activate( self.activations.BEH_Dep_Virtuel_ProgressionVers, 1, { self._namedParams.objectif, eProgressionDefaut, eTypeItiMouvement, } )
                    else
                        self.ePhaseMission = eAnimer
                    end

                    
                --[[// 3) Animer
]]                cases_switch_1[2] = true
elseif switch_1 == eAnimer then
                    Activate( self.activations.BEH_Pop_GererPositionBarrage, 1.1, { self._namedParams.objectif, self.localisationEtendue, } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnPosition, } )
                    if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), self._namedParams.objectif ) < self._namedParams.rMax ) then
                        do
                            --[[// l'objet n'existe pas encore... on le construit
]]if( ( self.posteControle == 0 or self.posteControle == nil ) ) then
                                do
                                    Activate( self.activations.ACT_Pion_CreerObjetSur, 1, { self.localisation, eTypeObjectPosteControle, } )
                                                                        return

                                end
--[[//---------------------------------------------------------------------
]]--[[// Animer le poste
]]--[[//---------------------------------------------------------------------
]]--[[//if( ePreparation == eActionEffectuee )
]]                            end

                            Activate( self.activations.BEH_Pop_Pion_AnimerBlocagePopulation, 1, { self.posteControle, self._namedParams.permeabilite, } )
                            Activate( self.activations.BEH_Dep_Virtuel_PreparationAction, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.ePreparation = v else rawset( t, k, v ) end end } ) )
                        end
                    end

                    
                --[[// 3) Fin de la mission de reconnaissance SUR ORDRE
]]elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                                        self.params.__returnValue = eActionHalt
                    return

                end
                if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                end
            end

    end,

    destroy = function( self )
                DEC_DetruireObjetSansDelais( self.posteControle )
        DEC_Trace( "fin du blocage" )
        DEC_ConnaisssanceObjet_ResetDensitePopulationSortante( self.posteControle )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_GererPositionBarrage
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_GererPositionBarrage"
{
    activations =
    {
        { "BEH_Dep_Virtuel_ProgressionVers", {} },
        { "BEH_Pop_Pion_RejoindrePopulationLaPlusProche", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objectif = self.params[1]
        self._namedParams.localisationEtendue = self.params[2]
    end,

    activate = function( self )
        self.centre = self.centre or DEC_Geometrie_CalculerBarycentreLocalisation( self._namedParams.localisationEtendue )
        --[[//par défaut on rejoint le centre de la localisation
]]if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), self._namedParams.objectif ) > 20 ) then
            Activate( self.activations.BEH_Dep_Virtuel_ProgressionVers, 1, { self._namedParams.objectif, eProgressionDefaut, eTypeItiMouvement, } )
        end

        --[[//Si des populations sont dans la zone: on va on contact
]]Activate( self.activations.BEH_Pop_Pion_RejoindrePopulationLaPlusProche, 1.1, { self._namedParams.localisationEtendue, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Pion_AnimerBlocagePopulation
]]--[[//
]]--[[// Commentaires: MIA --> notion d'animation du site et changement de densité 
]]--[[//                       séparées  // Notion a discuter...
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_AnimerBlocagePopulation"
{
    activations =
    {
        { "ACT_Pion_Animer", {} },
        { "BEH_AttaqueDePopulation", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posteControle = self.params[1]
        self._namedParams.permeabilite = self.params[2]
    end,

    activate = function( self )
        if( ModuleBegins() and ( self._namedParams.permeabilite > 0 ) ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_MiseEnPlaceFiltrage )
                    else
                        DEC_Message( eRC_MiseEnPlaceFiltrage )
                    end

                end

            end
        end

        Activate( self.activations.ACT_Pion_Animer, 1, { self._namedParams.posteControle, self._namedParams.permeabilite, } )
        --[[//Si les popus au contact sont trop dangereuses par rapport aux ROE on compense par le tir pour la dominer
]]local lstPops = DEC_Connaissances_CollisionsPopulations()
        for _,pop in pairs( lstPops ) do
        local _continue = true
if( S_PopulationTropAggressive( pop ) ) then
                Activate( self.activations.BEH_AttaqueDePopulation, 1, { pop, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Pion_RejoindrePopulationLaPlusProche
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_RejoindrePopulationLaPlusProche"
{
    activations =
    {
        { "BEH_Pop_Pion_RejoindrePopulation", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        local lstPops = DEC_Connaissances_Populations()
        for _,pop in pairs( lstPops ) do
        local _continue = true
do
                if( DEC_ConnaissancePopulation_EstDansZone( pop, self._namedParams.zone ) ) then
                    do
                        local danger = DEC_ConnaissancePopulation_Dangerosite( pop )
                        Activate( self.activations.BEH_Pop_Pion_RejoindrePopulation, danger, { pop, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Pion_RejoindrePopulation
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Pion_RejoindrePopulation"
{
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_ProgressionVers", {} },
        { "BEH_Dep_SePoster", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pop = self.params[1]
    end,

    activate = function( self )
        self.objectif = self.objectif or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                self.objectif = DEC_ConnaissancePopulation_PointPlusProche( self._namedParams.pop )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Rejoindre la pop
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( not DEC_UserTypeList_Contient( DEC_Connaissances_CollisionsPopulations(), self._namedParams.pop ) ) then
            do
                if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.objectif ) <= 5 ) then
                    do
                        --[[//la population a bougee car on devrait être en collision : on recalcule le point le plus proche
]]self.objectif = DEC_ConnaissancePopulation_PointPlusProche( self._namedParams.pop )
                    end
                end

                Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.objectif, eProgressionDefaut, eTypeItiMouvement, } )
            end
        else
            Activate( self.activations.BEH_Dep_SePoster, 1, {} )
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_EsquiverLaPopulationIncontrolable, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_EsquiverLaPopulationIncontrolable, "BEH_Pop_Pion_EsquiveFaceA", nodes.BEH_Pop_Pion_EsquiveFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Pop_GererPositionBarrage, "BEH_Dep_Virtuel_ProgressionVers", nodes.BEH_Dep_Virtuel_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pop_GererPositionBarrage, "BEH_Pop_Pion_RejoindrePopulationLaPlusProche", nodes.BEH_Pop_Pion_RejoindrePopulationLaPlusProche }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_AnimerBlocagePopulation, "ACT_Pion_Animer", nodes.ACT_Pion_Animer }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_AnimerBlocagePopulation, "BEH_AttaqueDePopulation", nodes.BEH_AttaqueDePopulation }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "BEH_Dep_Virtuel_ProgressionVers", nodes.BEH_Dep_Virtuel_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "BEH_Pop_GererPositionBarrage", nodes.BEH_Pop_GererPositionBarrage }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "ACT_Pion_CreerObjetSur", nodes.ACT_Pion_CreerObjetSur }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "BEH_Pop_Pion_AnimerBlocagePopulation", nodes.BEH_Pop_Pion_AnimerBlocagePopulation }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_BloquerPopulation, "BEH_Dep_Virtuel_PreparationAction", nodes.BEH_Dep_Virtuel_PreparationAction }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_EsquiveFaceA, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_EsquiveFaceA, "ACT_Dep_SeDeplacer", nodes.ACT_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_EsquiveFaceA, "ACT_Pion_FuirPopulations", nodes.ACT_Pion_FuirPopulations }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_PresAuDecrochageFaceA, "BEH_Pop_Pion_EsquiveFaceA", nodes.BEH_Pop_Pion_EsquiveFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_PresAuDecrochageFaceA, "BEH_EsquiverLaPopulationIncontrolable", nodes.BEH_EsquiverLaPopulationIncontrolable }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_RejoindrePopulation, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_RejoindrePopulation, "BEH_Dep_SePoster", nodes.BEH_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_RejoindrePopulationLaPlusProche, "BEH_Pop_Pion_RejoindrePopulation", nodes.BEH_Pop_Pion_RejoindrePopulation }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_SecuriserPopulation, "ACT_Pion_Securiser", nodes.ACT_Pion_Securiser }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_SecuriserPopulation, "BEH_Dep_Virtuel_PreparationAction", nodes.BEH_Dep_Virtuel_PreparationAction }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_SecuriserPopulation, "BEH_Dep_Virtuel_ProgressionVers", nodes.BEH_Dep_Virtuel_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Pion_SecuriserPopulationDans, "BEH_Pop_Pion_SecuriserPopulation", nodes.BEH_Pop_Pion_SecuriserPopulation }

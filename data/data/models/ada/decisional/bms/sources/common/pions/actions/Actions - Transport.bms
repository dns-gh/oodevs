includedFiles = includedFiles or {}
includedFiles["sources/common/pions/actions/Actions - Transport.bms"] = true


--[[// ******************************************************************************
]]--[[// ACT_Transport_Pion_TransportEmbarquer
]]--[[//
]]--[[// Commentaires:
]]--[[//                Embarque les composantes des unites definies par
]]--[[//                DEC_Transport_AjouterPions
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Transport_Pion_TransportEmbarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_TransportEmbarquer" }, "ACT_Transport_Pion_TransportEmbarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_TransportEmbarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.actionEmbarquer = self.actionEmbarquer or 0
        self.actionEnPause = self.actionEnPause or false
        self.eEtatTransport = self.eEtatTransport or nil
        --[[// -----------------------------------------------------------------------------
]]--[[// Init
]]--[[// -----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionEmbarquer = DEC_Start_TransportEmbarquer(  )
            actionCallbacks[ self.actionEmbarquer ] = function( arg ) self.eEtatTransport = arg end

        end

        --[[// Reprise
]]if( self.actionEnPause ) then
            do
                DEC_ReprendAction( self.actionEmbarquer )
                self.actionEnPause = false
            end
--[[// -----------------------------------------------------------------------------
]]--[[//  En fonction etat transport
]]--[[// -----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eEtatTransport
                if switch_1 == eActionTransport_Running then
                    do
                    end

                    _continue = false
                elseif switch_1 == eActionTransport_Finished then
                    do
                    end

                    self.actionEmbarquer = DEC_StopAction( self.actionEmbarquer )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionTransport_Impossible then
                    do
                    end

                    self.actionEmbarquer = DEC_StopAction( self.actionEmbarquer )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
                self.actionEnPause = true
        DEC_PauseAction( self.actionEmbarquer )
    end,

    destroy = function( self )
                self.actionEmbarquer = DEC_StopAction( self.actionEmbarquer )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Transport_Pion_TransportDebarquer
]]--[[//
]]--[[// Commentaires:
]]--[[//                Debarque les composantes des unites definies par
]]--[[//                DEC_Transport_AjouterPions
]]--[[// ******************************************************************************
]]node "ACT_Transport_Pion_TransportDebarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_TransportDebarquer" }, "ACT_Transport_Pion_TransportDebarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_TransportDebarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posDebarquement = self.params[1]
    end,

    select = function( self )
                self.actionDebarquer = self.actionDebarquer or 0
        self.actionEnPause = self.actionEnPause or false
        self.eEtatTransport = self.eEtatTransport or nil
        --[[// -----------------------------------------------------------------------------
]]--[[// Init
]]--[[// -----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionDebarquer = DEC_Start_TransportDebarquer( self._namedParams.posDebarquement )
            actionCallbacks[ self.actionDebarquer ] = function( arg ) self.eEtatTransport = arg end

        end

        --[[// reprise
]]if( self.actionEnPause ) then
            do
                DEC_ReprendAction( self.actionDebarquer )
                self.actionEnPause = false
            end
--[[// -----------------------------------------------------------------------------
]]--[[// Suivant l'état du transport...
]]--[[// -----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eEtatTransport
                if switch_1 == eActionTransport_Running then
                    do
                    end

                    _continue = false
                elseif switch_1 == eActionTransport_Finished then
                    do
                    end

                    self.actionDebarquer = DEC_StopAction( self.actionDebarquer )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionTransport_Impossible then
                    do
                    end

                    self.actionDebarquer = DEC_StopAction( self.actionDebarquer )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
                self.actionEnPause = true
        DEC_PauseAction( self.actionDebarquer )
    end,

    destroy = function( self )
                self.actionDebarquer = DEC_StopAction( self.actionDebarquer )
    end,

}


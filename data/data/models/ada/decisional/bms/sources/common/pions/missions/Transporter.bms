includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missions/Transporter.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// ******************************************************************************
]]--[[//MIS_Pion_Transporter 
]]--[[// ******************************************************************************
]]node "MIS_Pion_Transporter"
{
    feedbacks = { { { "done_MIS_Pion_Transporter" }, "MIS_Pion_Transporter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Transporter, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", { "done_ACT_Maj_Pion_PasserEnTirSurRiposte" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_Transport_Pion_Transporter", { "done_BEH_Transport_Pion_Transporter" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.eEtatInfiltration = self.eEtatInfiltration or eActionEnCours
        self.ePhase = self.ePhase or eTransporter
        self.pointDeDebarquement = self.pointDeDebarquement or DEC_Geometrie_CreerPoint()
        self.listePionsATransporter = self.listePionsATransporter or {}
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, emptyTable )
                end

                DEC_Copie_Point( self._namedParams.mission.pointDebarquement_, self.pointDeDebarquement )
            end
        end

        if( not DEC_Agent_AutomateEstEmbraye() ) then
            self.listePionsATransporter = S_PionsNonDetruits( S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesATransporter_ ) )
        else
            self.listePionsATransporter = S_PionsNonDetruits( self._namedParams.mission.unitesATransporter_ )
        end

        self.listePionsATransporter = S_Liste_PionsTransportables( self.listePionsATransporter, not self._namedParams.mission.avecMateriel_ )
        if( DIA_IsListEmpty( self.listePionsATransporter ) ) then
            do
                DEC_Trace( "Il n'y a pas de pion transportable dans la liste passée en argument" )
                DEC_Warning( eRC_TransportImpossiblePasDeMoyens )
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                if( self.ePhase ~= eFinMission and self.ePhase ~= eFinMission ) then
                    do
                        self.ePhase = eFinMission
                        self.eEtat = eActionEnCours
                    end
                end

                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[// Gestion de l'ordre de conduite changer point de débarquement
]]--[[// ------------------------------------------------------------
]]        end

        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local repOrdre = x
                if( repOrdre:GetType() == "Rep_OrderConduite_ChangerPositionDebarquement" ) then
                    do
                        local ordreParametres = repOrdre
                        DEC_Copie_Point( ordreParametres:GetorderConduiteChangerPositionDebarquement_(), self.pointDeDebarquement )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporter then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "transport Impossible" )
                                DEC_Warning( eRC_MissionImpossible )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.BEH_Transport_Pion_Transporter, 1, { self._namedParams.mission.pointEmbarquement_, self.pointDeDebarquement, self.listePionsATransporter, self._namedParams.mission.avecMateriel_, 2000, } )
self.done_BEH_Transport_Pion_Transporter = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_RC( eRC_FinMission )
                            DEC_Transport_Annuler()
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

    destroy = function( self )
                F_Pion_SetobjectifEsquive( myself, nil )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Transporter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_Transporter, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Transporter, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Transporter, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Transporter, "BEH_Transport_Pion_Transporter", nodes.BEH_Transport_Pion_Transporter }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Transporter, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }

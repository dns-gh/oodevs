includedFiles = includedFiles or {}
includedFiles["sources/common/automates/missions/transporter/Transporter - CDT.bms"] = true

include "bit.lua"


node "MIS_Automate_CDT_Transporter"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_Ordre_Suppression", {} },
        { "BEH_Medo_Automate_AssignerMissionsTransporterAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eTransporter
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeTransporteur = self.listeTransporteur or {}
        self.listePionsATransporter = self.listePionsATransporter or {}
        self.listePourTransport = self.listePourTransport or {}
        self.pointDeDebarquement = self.pointDeDebarquement or DEC_Geometrie_CreerPoint()
        if( ModuleBegins() ) then
            do
                DEC_Copie_Point( self._namedParams.mission.pointDebarquement_, self.pointDeDebarquement )
                self.listePionsATransporter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesATransporter_ )
                self.listePionsATransporter = S_Cherche_Automate_PionsOperationnels( self.listePionsATransporter )
            end
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// liste des pions de l'automate ( gestion des sgroupements dynamiques )
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = DEC_Automate_PionsAvecPC()
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( self.listePionsSgpt )
        --[[//liste des transporteurs $$$$GGR : moche!!! il faut pouvoir récupérer la liste des unités qui peuvent faire la mission transporter
]]DIA_Clear( self.listeTransporteur )
        self.listeTransporteur = S_Cherche_Automate_Filtre_TypePionOperationnels( self.listePionsSgpt, "PelotonAppuiMob" )
        self.listeTransporteur = S_Liste_Concatene( self.listeTransporteur, S_Cherche_Automate_Filtre_TypePionOperationnels( self.listePionsSgpt, "LandingCraft" ) )
        DIA_Clear( self.listePourTransport )
        --[[//il ne doit pas y avoir plus de HM que de pions à transporter
]]if( #( self.listeTransporteur ) > #( self.listePionsATransporter ) ) then
            do
                --[[//on met autant de HM que de pions
]]local i = 0
                while i < #( self.listePionsATransporter ) do
                    local _continue = true
                    DIA_PushBack( self.listePourTransport, DIA_GetAt( self.listeTransporteur, i ) )
                i = i + 1
                end

            end
        else
            self.listePourTransport = self.listeTransporteur
        end

        --[[// Gestion de l'ordre de conduite changer point de débarquement
]]--[[// ------------------------------------------------------------
]]local gestionCDTMissionsTransport = false
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus ) do
        local _continue = true
do
                local repOrdre = x
                if( repOrdre:GetType() == "Rep_OrderConduite_ChangerPositionDebarquement" ) then
                    do
                        gestionCDTMissionsTransport = true
                        local ordreParametres = repOrdre
                        DEC_Copie_Point( ordreParametres:GetorderConduiteChangerPositionDebarquement_(), self.pointDeDebarquement )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporter then
                    --[[// donner les missions de transport
]]if( not DIA_IsListEmpty( self.listePourTransport ) and not gestionCDTMissionsTransport ) then
                        Activate( self.activations.BEH_Medo_Automate_AssignerMissionsTransporterAListe, 1, { ePhase_CDT, self.listePourTransport, self._namedParams.mission.pointEmbarquement_, self.pointDeDebarquement, self.listePionsATransporter, self._namedParams.mission.avecMateriel_, } )
                    end

                    
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    --[[//quand plus aucun pion n'a de mission
]]local plusDeMissions = true
                    for _,x in pairs( DEC_Automate_PionsAvecPC() ) do
                    local _continue = true
do
                            local pionBuffer = x
                            if( DEC_GetMission( pionBuffer ) ~= nil ) then
                                plusDeMissions = false
                            end

                        end

                    end

                    if( plusDeMissions ) then
                        self.params.__returnValue = eActionEffectuee
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()
                    end

                    
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_Transporter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_Transporter, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_Transporter, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_Transporter, "BEH_Medo_Automate_AssignerMissionsTransporterAListe", nodes.BEH_Medo_Automate_AssignerMissionsTransporterAListe }

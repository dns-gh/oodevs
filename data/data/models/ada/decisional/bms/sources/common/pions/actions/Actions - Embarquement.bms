includedFiles = includedFiles or {}
includedFiles["sources/common/pions/actions/Actions - Embarquement.bms"] = true



--[[// ****************************************************************************
]]--[[// ACT_Transport_Pion_Embarquer
]]--[[// 
]]--[[// Commentaires:
]]--[[//                Embarque les composantes 
]]--[[// ****************************************************************************
]]node "ACT_Transport_Pion_Embarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_Embarquer" }, "ACT_Transport_Pion_Embarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_Embarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
        debarquement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bReprise = self.bReprise or false
        self.eEtat_EmbDeb = self.eEtat_EmbDeb or eActionEmbDeb_EnCours
        self.actionID = self.actionID or 0
        if( ModuleBegins() ) then
            do
                DEC_Message( eRC_EmbarkmentStarted )
                self.actionID = DEC_StartEmbarquement(  )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtat_EmbDeb = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtat_EmbDeb
                if switch_1 == eActionEmbDeb_EnCours then
                    _continue = false
                elseif switch_1 == eActionEmbDeb_ErreurEmbDebEnMemeTemps
                or switch_1 == eActionEmbDeb_PasDeTransporteurs then
                    DEC_Trace( "Loading of troops : ignore carrier" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionEmbDeb_Termine then
                    DEC_Message( eRC_EmbarkmentFinished )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
            end

        if( self.bReprise ) then
            do
                DEC_Message( eRC_EmbarkmentResumed )
                self.eEtat_EmbDeb = eActionEmbDeb_EnCours
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[// arret de l'embarquement
]]--[[// arret de l'embarquement
]]    end,

    deselect = function( self )
                DEC_Message( eRC_EmbarkmentInterrupted )
        DEC_PauseAction( self.actionID )
        self.bReprise = true
    end,

    destroy = function( self )
                self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[// ****************************************************************************
]]--[[// ACT_Transport_MaintenirEtat
]]--[[// 
]]--[[// Commentaires:
]]--[[//               Bloque toute nouvelle action de debarquement ou embarquement
]]--[[// ****************************************************************************
]]node "ACT_Transport_MaintenirEtat"
{
    feedbacks = { { { "done_ACT_Transport_MaintenirEtat" }, "ACT_Transport_MaintenirEtat" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_MaintenirEtat, {value} ) end,
    actuators =
    {
        debarquement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eEtat = self.params[1]
    end,

    select = function( self )
    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missionsreactionpopulations/Renseigner.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_RenseignerSurPopulations
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RenseignerSurPopulations"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "BEH_Dep_Virtuel_ProgressionVers", { "onHalt" } },
        { "BEH_Pion_RenseignerSurPops", { "onHalt" } },
        { "BEH_Dep_Virtuel_PreparationAction", { "onHalt" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Pion_RenseignerSurPopulations" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or ePreparerMission
        self.objectif = self.objectif or self._namedParams.mission.point_
        self.eEtat = self.eEtat or eActionEnCours
        self.eActionPreparation = self.eActionPreparation or eActionEnCours
        if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Geometrie_EstPointDansFuseau( self.objectif ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                Feedback( self.feedbacks["onHalt"], { "MIS_Pion_RenseignerSurPopulations" } )
Halt( self )
                        do return end

                    end
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    DEC_Trace( "** MIS_Pion_Renseigner **" )
                    self.ePhase = eProgresser
                    
                --[[// 2) Déplacement et renseignement
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.objectif ) > 20 ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                            Activate( self.activations.BEH_Dep_Virtuel_ProgressionVers, 1, { self._namedParams.mission.point_, eProgressionDefaut, eTypeItiMouvement, } )
                        end
                    else
do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                            if( self.eActionPreparation == eActionEffectuee ) then
                                Activate( self.activations.BEH_Pion_RenseignerSurPops, 1, {} )
                            end

                            Activate( self.activations.BEH_Dep_Virtuel_PreparationAction, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionPreparation = v else rawset( t, k, v ) end end } ) )
                        end
                    end

                    
                --[[// Fin mission
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                                        Feedback( self.feedbacks["onHalt"], { "MIS_Pion_RenseignerSurPopulations" } )
Halt( self )
                    do return end

                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RenseignerSurPopulations = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "BEH_Dep_Virtuel_ProgressionVers", nodes.BEH_Dep_Virtuel_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "BEH_Pion_RenseignerSurPops", nodes.BEH_Pion_RenseignerSurPops }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "BEH_Dep_Virtuel_PreparationAction", nodes.BEH_Dep_Virtuel_PreparationAction }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RenseignerSurPopulations, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

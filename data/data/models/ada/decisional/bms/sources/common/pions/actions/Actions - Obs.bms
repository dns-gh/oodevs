includedFiles = includedFiles or {}
includedFiles["sources/common/pions/actions/Actions - Obs.bms"] = true

include "bit.lua"



--[[// ****************************************************************************** 
]]--[[// ACT_Misc_VerouillerConnaissance 
]]--[[// 
]]--[[// Commentaires: verouillage de la connaissance 
]]--[[//               OPT: MIA: Spe ALAT
]]--[[// 
]]--[[// ****************************************************************************** 
]]node "ACT_Misc_VerouillerConnaissance"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.connaissance = self.params[1]
    end,

    select = function( self )
        --[[// ----------------------------------------------------------------------------- 
]]--[[// Init
]]--[[// ----------------------------------------------------------------------------- 
]]        if( ModuleBegins() ) then
            do
                local eEtatRequete = DEC_ConnaissanceAgent_Verrouiller( self._namedParams.connaissance )
                if( eEtatRequete == eRequeteInvalide ) then
                    self.params.__returnValue = eActionImpossible
                    Halt()
                end

            end
        end

--[[// Pas de on focus loss: Pas d'actuateur        
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_ConnaissanceAgent_Deverrouiller( self._namedParams.connaissance )
    end,

}

--[[// ****************************************************************************** 
]]--[[// ACT_Obs_ElargirObservation
]]--[[// 
]]--[[// Commentaires: simule les coups de sondes
]]--[[// 
]]--[[// ****************************************************************************** 
]]node "ACT_Obs_ElargirObservation"
{
    create = function( self )
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Perception_ActiverCoupsDeSonde()
        end

--[[// Pas de on focus loss : pas d'actuator
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Perception_DesactiverCoupsDeSonde()
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_ReconnaitrePoint
]]--[[// 
]]--[[// Commentaires: le cercle de vision s'élargie de plus en plus en fonction des
]]--[[//               paramètres propres à myself :
]]--[[//                          M_POLY_MODELE_PION_CAPACITE_RECO_POINT()
]]--[[//                          M_POLY_MODELE_PION_VITESSE_RECO_POINT()
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_ReconnaitrePoint"
{
    actuators =
    {
        reconnaissance = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pointAReconnaitre = self.params[1]
    end,

    select = function( self )
        --[[// init
]]        self.bSuspendu = self.bSuspendu or true
        self.bRecoMax = self.bRecoMax or false
        self.bRecoMaxObj = self.bRecoMaxObj or false
        self.ptRecoCopie = self.ptRecoCopie or DEC_Geometrie_CreerPoint()
        self.loc = self.loc or DEC_Geometrie_ConvertirPointEnLocalisation( self.ptRecoCopie )
        self.pPt = self.pPt or nil
        self.pPtObj = self.pPtObj or nil
        --[[// ----------------------------------------------------------------------------- 
]]--[[// Init
]]--[[// ----------------------------------------------------------------------------- 
]]if( ModuleBegins() ) then
            DEC_Copie_Point( self._namedParams.pointAReconnaitre, self.ptRecoCopie )
        end

        --[[// ----------------------------------------------------------------------------- 
]]--[[// Reconnaissance
]]--[[// -----------------------------------------------------------------------------
]]if( self.bSuspendu ) then
            do
                self.bSuspendu = false
                DEC_Trace( ">> En reconnaissance..." )
                --[[// Debut reconnaissance
]]self.pPt = DEC_Perception_ActiverReconnaissancePoint( self.ptRecoCopie, M_POLY_MODELE_PION_CAPACITE_RECO_POINT(), M_POLY_MODELE_PION_VITESSE_RECO_POINT(), self.bRecoMax )
                --[[// NOTE( PBT ): Eventuellement utiliser myself.position_ comme point de départ
]]self.pPtObj = DEC_Perception_ActiverDetectionObjetLocalisation( self.loc, self.ptRecoCopie, self.bRecoMaxObj, M_POLY_MODELE_PION_VITESSE_RECO_POINT() )
            end
        end

        myself.eEtatDeplacement_ = eEtatDeplacement_EnReco
        --[[/*&& bRecoMaxObj*/]]if( self.bRecoMax ) then
            self.params.__returnValue = eActionEffectuee
            return
        end

    end,

    deselect = function( self )
                self.bSuspendu = true
        myself.eEtatDeplacement_ = eEtatDeplacement_aucun
        DEC_Perception_DesactiverReconnaissancePoint( self.pPt )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
    end,

    destroy = function( self )
                myself.eEtatDeplacement_ = eEtatDeplacement_aucun
        DEC_Trace( "<< fin reconnaissance" )
        DEC_Perception_DesactiverReconnaissancePoint( self.pPt )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
    end,

}

--[[// *****************************************************************************
]]--[[// ObserverZone
]]--[[// 
]]--[[// Commentaires: OPT: MIA spé INF pourquoi observer secteur alors que l'on 
]]--[[//              passe un point? Mettre ca dans les scripts INF 
]]--[[//              renommer Zone -> Point
]]--[[// *****************************************************************************
]]node "ACT_Obs_ObserverZone"
{
    actuators =
    {
        reconnaissance = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pointAReconnaitre = self.params[1]
        self._namedParams.rCapacite = self.params[2]
    end,

    select = function( self )
                self.bRecoMax = self.bRecoMax or false
        self.bRecoMaxObj = self.bRecoMaxObj or false
        self.ptRecoCopie = self.ptRecoCopie or DEC_Geometrie_CreerPoint()
        self.loc = self.loc or DEC_Geometrie_ConvertirPointEnLocalisation( self.ptRecoCopie )
        self.perceptionPoint = self.perceptionPoint or nil
        self.pPtObj = self.pPtObj or nil
        if( ModuleBegins() ) then
            do
                DEC_Copie_Point( self._namedParams.pointAReconnaitre, self.ptRecoCopie )
                                do
                end

                DEC_Trace( ">> En surveillance..." )
                --[[// Debut reconnaissance
]]self.perceptionPoint = DEC_Perception_ActiverReconnaissancePoint( self.ptRecoCopie, self._namedParams.rCapacite, M_POLY_MODELE_PION_VITESSE_RECO_POINT(), self.bRecoMax )
                --[[// NOTE( PBT ): Eventuellement utiliser myself.position_ comme point de départ
]]self.pPtObj = DEC_Perception_ActiverDetectionObjetLocalisation( self.loc, self.ptRecoCopie, self.bRecoMaxObj, M_POLY_MODELE_PION_VITESSE_RECO_POINT() )
                                do
                    --[[// CR
]]if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutSurveillance )
                    else
                        DEC_Message( eRC_DebutSurveillance )
                    end

                end

            end
--[[/*&& bRecoMaxObj*/]]        end

        if( self.bRecoMax ) then
            self.params.__returnValue = eActionEffectuee
            return
        end

--[[// si perte de l'actuateur, alors, on kill l'instance de cette action
]]--[[// en effet, on ne fait pas deux reconnaissance a la fois quand on n'a
]]--[[// pas les capacites
]]--[[// CR
]]--[[// CR
]]    end,

    deselect = function( self )
                DEC_Trace( " << fin surveillance" )
        DEC_Perception_DesactiverReconnaissancePoint( self.perceptionPoint )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
        do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinSurveillance )
            else
                DEC_Message( eRC_FinSurveillance )
            end

        end

                Halt()

    end,

    destroy = function( self )
                DEC_Trace( " << fin surveillance" )
        DEC_Perception_DesactiverReconnaissancePoint( self.perceptionPoint )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
        do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinSurveillance )
            else
                DEC_Message( eRC_FinSurveillance )
            end

        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_ObserverPoint
]]--[[// 
]]--[[// Commentaires: idem action reco point...sert à simuler la position 
]]--[[//               d'observation d'un point. 
]]--[[//               MIA: A Virer??
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_ObserverPoint"
{
    actuators =
    {
        reconnaissance = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pointAObserver = self.params[1]
    end,

    select = function( self )
                self.bRecoMax = self.bRecoMax or false
        self.bRecoMaxObj = self.bRecoMaxObj or false
        self.ptRecoCopie = self.ptRecoCopie or DEC_Geometrie_CreerPoint()
        self.loc = self.loc or DEC_Geometrie_ConvertirPointEnLocalisation( self.ptRecoCopie )
        self.perceptionPoint = self.perceptionPoint or nil
        self.pPtObj = self.pPtObj or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    --[[// CR            
]]if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutSurveillance )
                    else
                        DEC_Message( eRC_DebutSurveillance )
                    end

                end

                DEC_Copie_Point( self._namedParams.pointAObserver, self.ptRecoCopie )
                do
                end

                DEC_Trace( ">> Debut observation..." )
                --[[// Debut reconnaissance
]]self.perceptionPoint = DEC_Perception_ActiverReconnaissancePoint( self.ptRecoCopie, M_POLY_MODELE_PION_CAPACITE_RECO_POINT(), M_POLY_MODELE_PION_VITESSE_RECO_POINT(), self.bRecoMax )
                --[[// NOTE( PBT ): Eventuellement utiliser myself.position_ comme point de départ
]]self.pPtObj = DEC_Perception_ActiverDetectionObjetLocalisation( self.loc, self.ptRecoCopie, self.bRecoMaxObj, M_POLY_MODELE_PION_VITESSE_RECO_POINT() )
            end
--[[/*&& bRecoMaxObj*/]]        end

        if( self.bRecoMax ) then
            do
                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

--[[// CR
]]--[[// si perte de l'actuateur, alors, on kill l'instance de cette action
]]--[[// en effet, on ne fait pas deux reconnaissance a la fois quand on n'a
]]--[[// pas les capacites
]]--[[// CR
]]    end,

    deselect = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinSurveillance )
            else
                DEC_Message( eRC_FinSurveillance )
            end

        end

        DEC_Perception_DesactiverReconnaissancePoint( self.perceptionPoint )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
                Halt()

    end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinSurveillance )
            else
                DEC_Message( eRC_FinSurveillance )
            end

        end

        DEC_Perception_DesactiverReconnaissancePoint( self.perceptionPoint )
        DEC_Perception_DesactiverDetectionObjetLocalisation( self.pPtObj )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_SurveillerZone
]]--[[// 
]]--[[// Commentaires: renommage DEC_Perception_StartSurveillerLocalisation en 
]]--[[//                         DEC_Perception_StartReconnaissanceLocalisation
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_SurveillerZone"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    select = function( self )
                self.point = self.point or nil
        if( ModuleBegins() ) then
            do
                DEC_Trace( ">> Surveillance du secteur activée " )
                self.point = DEC_Perception_ActiverReconnaissanceLocalisation( self._namedParams.zone )
            end
        end

--[[// Pas de on focus loss : pas d'actuator    
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Perception_DesactiverReconnaissanceLocalisation( self.point )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obs_EtablirVisionCur
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obs_EtablirVisionCur"
{
    actuators =
    {
        observation = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bVisionCur = self.bVisionCur or false
        if( not self.bVisionCur ) then
            do
                DEC_Perception_VisionNormale()
                self.bVisionCur = true
            end
        end

    end,

    deselect = function( self )
                self.bVisionCur = false
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obs_EtablirVisionFaceADir
]]--[[// 
]]--[[// Commentaires:
]]--[[// 
]]--[[// ******************************************************************************
]]node "ACT_Obs_EtablirVisionFaceADir"
{
    actuators =
    {
        observation = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.dir = self.params[1]
    end,

    select = function( self )
                self.bVisionDir = self.bVisionDir or false
        if( not self.bVisionDir ) then
            do
                DEC_Perception_VisionVerrouilleeSurDirection( self._namedParams.dir )
                self.bVisionDir = true
            end
        end

    end,

    deselect = function( self )
                self.bVisionDir = false
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_EtablirVisionVersPt
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_EtablirVisionVersPt"
{
    actuators =
    {
        observation = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pt = self.params[1]
    end,

    select = function( self )
                self.bVisionPt = self.bVisionPt or false
        if( not self.bVisionPt ) then
            do
                DEC_Perception_VisionVerrouilleeSurPoint( self._namedParams.pt )
                self.bVisionPt = true
            end
        end

    end,

    deselect = function( self )
                self.bVisionPt = false
    end,

}


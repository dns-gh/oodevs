includedFiles = includedFiles or {}
includedFiles["sources/common/pions/behaviors/Behaviors - Ordre.bms"] = true

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Inopine
]]--[[//
]]--[[//Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Ordre_Inopine"
{
    activations =
    {
        { "ACT_Ordre_Suppression", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// =============================================================================
]]--[[// Pour l'automate
]]--[[// =============================================================================
]]        if( F_Pion_GetbOrdreInterrompreMission( myself ) ) then
            do
                --[[//quand on a recu l'ordre "Interompre", si on était posté, on
]]--[[//doit remettre la variable d'etat VE_SePoster à 0
]]--[[// poursuivre si en poste
]]SetStateVariable( "VE_SePoster", 0 )
                DEC_Trace( " --------- Stop mission frag order ---------" )
                                self.params.__returnValue = eActionHalt
                Halt()

            end
--[[// =============================================================================
]]--[[// Reception d'un ordre de l'ANIBAS
]]--[[// =============================================================================
]]        end

        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus ) do
        local _continue = true
do
                local repOrdre = x
                switch_1 = repOrdre:GetType()
                    if switch_1 == "Rep_OrderConduite_Interrompre" then
                        DEC_Trace( "======= Frag order --> Stop mission =====" )
                        --[[// poursuivre si en poste
]]SetStateVariable( "VE_SePoster", 0 )
                                                self.params.__returnValue = eActionHalt
                        return

                    elseif switch_1 == "Rep_OrderConduite_AttendreSePoster" then
                        DEC_Trace( "======= Frag order --> WAIT =====" )
                        SetStateVariable( "VE_SePoster", 2 )
                        
                    elseif switch_1 == "Rep_OrderConduite_Deboucher"
                    or switch_1 == "Rep_OrderConduite_Poursuivre" then
                        DEC_Trace( "======= Frag order --> RESUME =====" )
                        SetStateVariable( "VE_SePoster", 0 )
                        
                                        end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

    end,

    destroy = function( self )
                SetStateVariable( "VE_SePoster", 0 )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_SePoster_EnAttente
]]--[[//
]]--[[//Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_SePoster_EnAttente"
{
    activations =
    {
        { "ACT_Dep_SePoster", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                if( ModuleBegins() ) then
            do
                DEC_Trace( "Se poste en attente d'ordre." )
                SetStateVariable( "VE_SePoster", 2 )
                Activate( self.activations.ACT_Dep_SePoster, 1, {} )--[[// On force le poste au premier tour
]]
                                self.params.__returnValue = eActionEnCours
                return

            end
        end

        if( ( GetStateVariable( "VE_SePoster" ) == 0 or GetStateVariable( "VE_SePoster" ) == nil ) ) then
            do
                DEC_Trace( "Conduite 'poursuivre' recu." )
                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

    destroy = function( self )
                DEC_Trace( "Conduite 'poursuivre' recu." )
        SetStateVariable( "VE_SePoster", 0 )
                self.params.__returnValue = eActionEffectuee
        return

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Inopine, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_SePoster_EnAttente, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }

require "math"

includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missions/ReconnaissanceAreaHidden.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_ReconnaissanceAreaHidden
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_ReconnaissanceAreaHidden"
{
    feedbacks = { { { "done_MIS_Pion_ReconnaissanceAreaHidden" }, "MIS_Pion_ReconnaissanceAreaHidden" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ReconnaissanceAreaHidden, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionAvecEscortePossibleSur", { "done_BEH_Dep_ProgressionAvecEscortePossibleSur" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
        DEC_SetMission( myself, self.params.mission )
    end,

    activate = function( self )
        local Activate = Activate
        if not self.params.mission.knowledge_ and not self.params.mission.zone_ then
            DEC_Trace( "Mission impossible: No area provided" )
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end
        self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
        self.done_BEH_Ordre_Inopine = function( self, _, v ) 
            self.eEtatOrdreFinMission = v[1] 
        end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            self.ePhase = eFinMission
            self.eEtat = eActionEnCours
            self.eEtatOrdreFinMission = eActionEnCours
        end

        if self.ePhase == ePreparerMission then
            --[[// 1) Preparation de la mission ]]
            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
            local itinerary = DEC_Geometrie_ListePointsLocalisation( self.params.mission.zone_ or DEC_ConnaissanceObjet_Localisation( self.params.mission.knowledge_ ) )
            local myPosition = DEC_Agent_PositionPtr( myself )
            local minDistance = math.huge
            local startIndex = 1
            for i, position in pairs( itinerary ) do
                local distance = DEC_Geometrie_Distance( myPosition, position )
                if distance < minDistance then
                    startIndex = i
                    minDistance = distance
                end
            end
            local nearestItinerary = {}
            for i = 1, #itinerary do
                nearestItinerary[i] = itinerary[startIndex]
                startIndex = startIndex + 1
                if startIndex > #itinerary then startIndex = 1 end
            end
            self.it = nearestItinerary
            self.ePhase = eProgresser
        elseif self.ePhase == eProgresser then
            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )

            Activate( self.activations.BEH_Dep_ProgressionAvecEscortePossibleSur, 1, { self.it, eProgressionDefaut, eTypeItiInfiltration } )

            self.done_BEH_Dep_ProgressionAvecEscortePossibleSur = function( self, _, v ) 
                if not self.params.mission.repeat_ then
                    self.ePhase = eFinMission
                end
            end
        elseif self.ePhase == eFinMission then
            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
            Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
        end
    end,

    destroy = function( self )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ReconnaissanceAreaHidden = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_ReconnaissanceAreaHidden, "BEH_Dep_ProgressionAvecEscortePossibleSur", nodes.BEH_Dep_ProgressionAvecEscortePossibleSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ReconnaissanceAreaHidden, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ReconnaissanceAreaHidden, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ReconnaissanceAreaHidden, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }


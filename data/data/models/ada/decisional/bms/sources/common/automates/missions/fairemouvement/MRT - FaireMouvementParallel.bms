includedFiles = includedFiles or {}
includedFiles["sources/common/automates/missions/fairemouvement/MRT - FaireMouvementParallel.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_FaireMouvementParallel
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_FaireMouvementParallel"
{
    feedbacks = { { { "done_MIS_Automate_MRT_FaireMouvementParallel" }, "MIS_Automate_MRT_FaireMouvementParallel" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_FaireMouvementParallel, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_AssignerFaireMouvementAParallel", { "done_BEH_Medo_Automate_AssignerFaireMouvementAParallel" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_MRT_FaireMouvementParallel : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            DEC_MRT_Valide()
            DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )

            self:SendFeedback( eActionImpossible )
            Halt( self )
            return
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            self.eValidationMRT = eActionEnCours
            DEC_MRT_Valide()
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            return
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Medo_Automate_AssignerFaireMouvementAParallel, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerFaireMouvementAParallel
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerFaireMouvementAParallel"
{
    feedbacks = { { { "done_BEH_Medo_Automate_AssignerFaireMouvementAParallel" }, "BEH_Medo_Automate_AssignerFaireMouvementAParallel" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_AssignerFaireMouvementAParallel, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementSurItA", { "done_BEH_Mission_Automate_AssignerFaireMouvementSurItA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        if( ModuleBegins() ) then
            local headQuarter = DEC_Automate_PionPC()
            local headQuartersPosition = headQuarter:DEC_Agent_Position()
            local itineraries = {}
            itineraries[ headQuarter ] = self.mission.itineraire_
            for _,pion in pairs( DEC_Automate_PionsSansPC() or {} ) do
                local position = pion:DEC_Agent_Position()
                local offset = DEC_Geometrie_CreerVecteur( headQuartersPosition, position )
                itineraries[ pion ] = {}
                local itinerary = itineraries[ pion ]
                for i, point in pairs( self.mission.itineraire_ ) do
                    itinerary[ i ] = DEC_Geometrie_PositionTranslateVector( point, offset )
                end
            end
            for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFaireMouvementSurItA, 1, { ePhase_MRT, pion, itineraries[ pion ] } )
            end
        end
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_FaireMouvementParallel = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerFaireMouvementAParallel, "BEH_Mission_Automate_AssignerFaireMouvementSurItA", nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_FaireMouvementParallel, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_FaireMouvementParallel, "BEH_Medo_Automate_AssignerFaireMouvementAParallel", nodes.BEH_Medo_Automate_AssignerFaireMouvementAParallel }

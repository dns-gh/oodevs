includedFiles = includedFiles or {}
includedFiles["sources/common/automates/actions/medo/Actions - Medo - ASA.bms"] = true

node "ACT_Mission_Automate_ASA_MISTRAL_AssignerDefendreZoneAPartirPositionA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
        self._namedParams.zone = self.params[4]
        self._namedParams.typeDeploiement = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                DEC_AssignMissionParameter( self.missionPion, "modeDeploiement_", self._namedParams.typeDeploiement )
                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
                --[[//Modification de la direction dangereuse
]]--[[//La direction dangereuse va du centre de la zone au point de dislocation
]]local pointCentreLocalisation = S_Geometrie_BarycentreZone_Mission( self.missionPion, "zone_" )
                if( ( pointCentreLocalisation == 0 or pointCentreLocalisation == nil ) ) then
                    do
                        DEC_Trace( "La localisation n'est pas située dans le fuseau" )
                                                return

                    end
                end

                local directionObservation = DEC_Geometrie_CreerDirection( pointCentreLocalisation, self._namedParams.point )
                --[[//on a par défaut la direction de l'automate.
]]--[[//si on a calculé une direction non nulle    
]]if( ( directionObservation ~= 0 and directionObservation ~= nil ) ) then
                    DEC_Copie_DirectionDanger_Mission( directionObservation, self.missionPion )
                end

                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_AssignerDefendreZoneAPartirPositionA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
        self._namedParams.zone = self.params[4]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreZoneAPartirPosition" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreZoneAPartirPosition" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
                --[[//Modification de la direction dangereuse
]]--[[//La direction dangereuse va du centre de la zone au point de dislocation
]]local pointCentreLocalisation = S_Geometrie_BarycentreZone_Mission( self.missionPion, "zone_" )
                if( ( pointCentreLocalisation == 0 or pointCentreLocalisation == nil ) ) then
                    do
                        DEC_Trace( "La localisation n'est pas située dans le fuseau" )
                                                return

                    end
                end

                local directionObservation = DEC_Geometrie_CreerDirection( pointCentreLocalisation, self._namedParams.point )
                --[[//on a par défaut la direction de l'automate.
]]--[[//si on a calculé une direction non nulle
]]if( ( directionObservation ~= 0 and directionObservation ~= nil ) ) then
                    DEC_Copie_DirectionDanger_Mission( directionObservation, self.missionPion )
                end

                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_AssignerDefendreSiteAPartirPositionA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
        self._namedParams.site = self.params[4]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreSiteAPartirPosition" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreSiteAPartirPosition" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                DEC_Copie_Localisation_Mission( self._namedParams.site, self.missionPion, "site_" )
                --[[//Modification de la direction dangereuse
]]--[[//La direction dangereuse va du centre de la zone au point de dislocation
]]local pointCentreLocalisation = S_Geometrie_BarycentreZone_Mission( self.missionPion, "site_" )
                if( ( pointCentreLocalisation == 0 or pointCentreLocalisation == nil ) ) then
                    do
                        DEC_Trace( "La localisation n'est pas située dans le fuseau" )
                                                return

                    end
                end

                local directionObservation = DEC_Geometrie_CreerDirection( pointCentreLocalisation, self._namedParams.point )
                --[[//on a par défaut la direction de l'automate.
]]--[[//si on a calculé une direction non nulle    
]]if( ( directionObservation ~= 0 and directionObservation ~= nil ) ) then
                    DEC_Copie_DirectionDanger_Mission( directionObservation, self.missionPion )
                end

                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_MISTRAL_AssignerDefendreSiteAPartirPositionA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
        self._namedParams.site = self.params[4]
        self._namedParams.typeDeploiement = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                self.missionPion = self.missionPion or nil--[[//cree l'instance de missionPion
]]
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_DefendreSiteAPartirPosition" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                DEC_AssignMissionParameter( self.missionPion, "modeDeploiement_", self._namedParams.typeDeploiement )
                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                DEC_Copie_Localisation_Mission( self._namedParams.site, self.missionPion, "site_" )
                --[[//Modification de la direction dangereuse
]]--[[//La direction dangereuse va du centre de la zone au point de dislocation
]]local pointCentreLocalisation = S_Geometrie_BarycentreZone_Mission( self.missionPion, "site_" )
                if( ( pointCentreLocalisation == 0 or pointCentreLocalisation == nil ) ) then
                    do
                        DEC_Trace( "La localisation n'est pas située dans le fuseau" )
                                                return

                    end
                end

                local directionObservation = DEC_Geometrie_CreerDirection( pointCentreLocalisation, self._namedParams.point )
                --[[//on a par défaut la direction de l'automate.
]]--[[//si on a calculé une direction non nulle    
]]if( ( directionObservation ~= 0 and directionObservation ~= nil ) ) then
                    DEC_Copie_DirectionDanger_Mission( directionObservation, self.missionPion )
                end

                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_AssignerSurveillerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_Surveiller" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_Surveiller" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_MISTRAL_AssignerSurveillerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.point = self.params[3]
        self._namedParams.typeDeploiement = self.params[4]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_Surveiller" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_MISTRAL_Surveiller" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                DEC_AssignMissionParameter( self.missionPion, "modeDeploiement_", self._namedParams.typeDeploiement )
                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "pointDeDeploiement_", DEC_Geometrie_CreerPoint() )
                DEC_Copie_Point_Mission( self._namedParams.point, self.missionPion, "pointDeDeploiement_" )
                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}

node "ACT_Mission_Automate_ASA_AssignerDefendreUnitesA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.listeUnites = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end
--[[//cree l'instance de missionPion
]]
                self.missionPion = self.missionPion or nil
                if( ModuleBegins() ) then
                    do
                        switch_1 = self._namedParams.ePhase
                            if switch_1 == ePhase_MRT then
                                                            local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreUnites" )
                                self.missionPion = misMRT
                                
                            elseif switch_1 == ePhase_CDT then
                                                            local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASA_DefendreUnites" )
                                self.missionPion = misCDT
                                
                            
                            else
                                assert( false, "parametre invalide : ePhase" )
                            end

                    end
                end

                if( self.missionPion == nil ) then
                    self.params.__returnValue = eActionImpossible
                    return
                end

                --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                --[[//copie de la liste des unites
]]DEC_AssignMissionParameter( self.missionPion, "unites_", self._namedParams.listeUnites )
                --[[// Envoie la mission si l'on se trouve dans la conduite
]]if( self._namedParams.ePhase == ePhase_CDT ) then
                    DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                end

                                self.params.__returnValue = eActionEffectuee
                return

            end
        end

    end,

}


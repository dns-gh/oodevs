--[[// *****************************************************************************
]]--[[// BEH_Transport_Pion_TransportEmbarquer
]]--[[//
]]--[[// Commentaires : Traiter la liste des unités a transporter pour ne retenir que 
]]--[[//                les unites que myself peut effectivement traiter
]]--[[// *****************************************************************************
]]node "BEH_Transport_Pion_TransportEmbarquer"
{
    feedbacks = { { { "done_BEH_Transport_Pion_TransportEmbarquer" }, "BEH_Transport_Pion_TransportEmbarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Transport_Pion_TransportEmbarquer, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC", { "done_ACT_RC" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posEmbarquement = self.params[1]
        self._namedParams.unitesATransporter = self.params[2]
        self._namedParams.distanceEmbarquement = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eTransporterAllerEmbarquer
        self.sUnitesATransporter = self.sUnitesATransporter or S_Liste_PionsTransportables( self._namedParams.unitesATransporter, false )

        if( #( self.sUnitesATransporter ) == 0 ) then
            
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporterAllerEmbarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        self.eEtat = eActionEnCours
                            self.ePhase = eTransporterEmbarquer
                            do return end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "Transporter : Impossible Rejoindre Point d'embarquemement" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.posEmbarquement, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.posEmbarquement, eProgressionDirect, eTypeItiInfiltration, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eTransporterEmbarquer then

            DEC_RC( eRC_TransportEmbarquement )
            DEC_Transport_EmbarquerPionsSansDelais( self.sUnitesATransporter, false )
            self.ePhase = eFinMission
            self:SendFeedback( eActionTerminee )
            Halt( self )
            do return end

            end
        end
    end,
}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportEmbarquer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportEmbarquer, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportEmbarquer, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportEmbarquer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportEmbarquer, "ACT_RC", nodes.ACT_RC }




--[[// *****************************************************************************
]]--[[// BEH_Transport_Pion_TransportDebarquer
]]--[[//
]]--[[// Commentaires : Traiter la liste des unités a transporter pour ne retenir que 
]]--[[//                les unites que myself peut effectivement traiter
]]--[[// *****************************************************************************
]]node "BEH_Transport_Pion_TransportDebarquer"
{
    feedbacks = { { { "done_BEH_Transport_Pion_TransportDebarquer" }, "BEH_Transport_Pion_TransportDebarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Transport_Pion_TransportDebarquer, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_Transport_Pion_TransportEmbarquer", { "done_ACT_Transport_Pion_TransportEmbarquer" } },
        { "ACT_Transport_Pion_TransportDebarquer", { "done_ACT_Transport_Pion_TransportDebarquer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posDebarquement = self.params[1]
        self._namedParams.unitesADebarquer_ = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eTransporterAllerDebarquer
        self.unitesADebarquer = self._namedParams.unitesADebarquer_;
        --[[self.unitesADebarquer_ = self.unitesADebarquer_ or S_Liste_PionsTransportables( self._namedParams.unitesATransporter, not self._namedParams.avecMateriel )
        --]]

        if( #( self.unitesADebarquer ) == 0 ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
if switch_1 == eTransporterAllerDebarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_TransportEnCours, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTransporterDebarquer
                                do return end                                

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.posDebarquement, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.posDebarquement, eProgressionDirect, eTypeItiInfiltration, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eTransporterDebarquer then
                        self.eEtat = eActionEnCours
                        
                        DEC_RC( eRC_TransportDebarquement )
                        
                        DEC_Transport_DebarquerPionsSansDelais( self.unitesADebarquer )
                            self.ePhase = eFinMission
                            self:SendFeedback( eActionTerminee )
                            Halt( self )
                            do return end

                    _continue = false
                                cases_switch_1[4] = true
                                end
            end

    end,
}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportDebarquer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportDebarquer, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportDebarquer, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportDebarquer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_TransportDebarquer, "ACT_RC", nodes.ACT_RC }


includedFiles = includedFiles or {}
includedFiles["sources/common/automates/missions/suivre/Suivre - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_Suivre
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_Suivre"
{
    feedbacks = { { { "done_MIS_Automate_MRT_Suivre" }, "MIS_Automate_MRT_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_Suivre, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Mission_Automate_AssignerFaireMouvement", { "done_BEH_Mission_Automate_AssignerFaireMouvement" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_Suivre : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvement, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_AssignerFaireMouvement
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerFaireMouvement"
{
    feedbacks = { { { "done_BEH_Mission_Automate_AssignerFaireMouvement" }, "BEH_Mission_Automate_AssignerFaireMouvement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_AssignerFaireMouvement, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "done_BEH_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
for _,pion in pairs( self._namedParams.listePions or {} ) do
            local _continue = true
                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_MRT, pion, DEC_Geometrie_CalculerPointArriveePourPion( pion ), eEtatEchelon_Premier, } )

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_Suivre = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvement, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Suivre, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Suivre, "BEH_Mission_Automate_AssignerFaireMouvement", nodes.BEH_Mission_Automate_AssignerFaireMouvement }

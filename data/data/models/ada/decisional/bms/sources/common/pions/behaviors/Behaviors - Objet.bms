includedFiles = includedFiles or {}
includedFiles["sources/common/pions/behaviors/Behaviors - Objet.bms"] = true

--[[// *****************************************************************************
]]--[[// BEH_Obj_RejoindreEmbossements
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Obj_RejoindreEmbossements"
{
    activations =
    {
        { "BEH_Obj_RejoindreEmbossementLibre", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.positionInitiale = self.positionInitiale or DEC_Geometrie_CreerPoint()
        --[[//-----------------------------------------------------------------------------
]]--[[// Init --> sauvegarde position initiale
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Copie_Point( DEC_Agent_Position(), self.positionInitiale )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Rejoindre embossement le plus proche
]]--[[//-----------------------------------------------------------------------------
]]local listeEmbossements = DEC_Connaissances_ObjetsDansCercle( self.positionInitiale, 500, S_TypeObject_ToString( eTypeObjectPosteTir ), S_TypeObject_ToString( eTypeObjectZoneProtegee ) )
        for _,repEmbossement in pairs( listeEmbossements ) do
        local _continue = true
do
                if( DEC_ConnaissanceObjet_PeutEtreOccupe( repEmbossement ) ) then
                    Activate( self.activations.BEH_Obj_RejoindreEmbossementLibre, S_Obj_ForceDistance( repEmbossement ), { repEmbossement, } )
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Obj_RejoindreEmbossementLibre
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Obj_RejoindreEmbossementLibre"
{
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Obj_OccuperEmbossement", {} },
        { "ACT_Dep_SePoster", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.embossement = self.params[1]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.positionEmbossement = self.positionEmbossement or S_Obj_Position( self._namedParams.embossement )
        --[[//-----------------------------------------------------------------------------
]]--[[// Conditions de terminaisons
]]--[[//-----------------------------------------------------------------------------
]]if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.embossement ) ) then
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Reservation
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.ACT_Obj_OccuperEmbossement, 1, { self._namedParams.embossement, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Init --> calcule position dans embossement
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "%% Defilade position available %%" )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// On a rejoint --> partie du comp effective si starter au depart
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
            do
                Activate( self.activations.ACT_Dep_SePoster, 1, {} )
                Activate( self.activations.ACT_Info_Trace, 1, { "%% Defilade position reached %%", } )
                                return

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Rejoindre la  position
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( ( self.positionEmbossement ~= 0 and self.positionEmbossement ~= nil ) ) then
            Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.positionEmbossement, eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
        else
            Activate( self.activations.ACT_Info_Trace, 1, { "%% Can't reach the defilade position %%", } )
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obj_RejoindreEmbossementLibre, "ACT_Obj_OccuperEmbossement", nodes.ACT_Obj_OccuperEmbossement }
connections[ #connections + 1 ] = { nodes.BEH_Obj_RejoindreEmbossementLibre, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Obj_RejoindreEmbossementLibre, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Obj_RejoindreEmbossementLibre, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Obj_RejoindreEmbossements, "BEH_Obj_RejoindreEmbossementLibre", nodes.BEH_Obj_RejoindreEmbossementLibre }

includedFiles = includedFiles or {}
includedFiles["sources/common/automates/missions/sefairetransporter/MRT - SeFaireTransporter.bms"] = true

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Missions/SeFaireTransporter/MRT - SeFaireTransporter.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 26/08/05 17:57 $
]]--[[// $Revision: 7 $
]]--[[// $Workfile: MRT - SeFaireTransporter.hal $
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_SeFaireTransporter
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_SeFaireTransporter"
{
    activations =
    {
        { "BEH_Medo_Automate_PreparerMission_SeFaireTransporter", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Automate_MRT_SeFaireTransporter" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eCreationMRT = self.eCreationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// MRT creee
]]--[[//-----------------------------------------------------------------------------
]]if( self.eCreationMRT == eActionImpossible ) then
            do
                                do
                    DEC_RC( eRC_MissionImpossible )
                end

                                self.params.__returnValue = eActionImpossible
                Feedback( self.feedbacks["onHalt"], { "MIS_Automate_MRT_SeFaireTransporter" } )
Halt( self )
                do return end

            end
        end

        if( self.eCreationMRT == eActionEffectuee ) then
            do
                self.eCreationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Feedback( self.feedbacks["onHalt"], { "MIS_Automate_MRT_SeFaireTransporter" } )
Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_PreparerMission_SeFaireTransporter, 1, setmetatable( { self._namedParams.mission.zoneEmbarquement_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCreationMRT = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_PreparerMission_SeFaireTransporter
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_PreparerMission_SeFaireTransporter"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "onHalt" } },
        { "BEH_Medo_Automate_FaireTransporter_DansZone", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Medo_Automate_PreparerMission_SeFaireTransporter" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.Zone = self.params[1]
    end,

    activate = function( self )
        self.selPions = self.selPions or DEC_Automate_PionsAvecPC()
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
         do
            local switch_1 = --[[//-----------------------------------------------------------------------------
]]--[[// Vérif et assignation des missions
]]--[[//-----------------------------------------------------------------------------
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_SelectionnerPions then
                    --[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------
]]if( ( #( self.selPions ) == 0 or #( self.selPions ) == nil ) ) then
                        do
                                                        self.params.__returnValue = eActionImpossible
                            Feedback( self.feedbacks["onHalt"], { "BEH_Medo_Automate_PreparerMission_SeFaireTransporter" } )
Halt( self )
                            do return end

                        end
                    end

                    self.ePhase = eMRT_AssignerMissions
                    
                --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    if( self.eActionMRT == eActionImpossible ) then
                        do
                                                        do
                            end

                                                        self.params.__returnValue = eActionImpossible
                            Feedback( self.feedbacks["onHalt"], { "BEH_Medo_Automate_PreparerMission_SeFaireTransporter" } )
Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        do
                                                                self.params.__returnValue = eActionEffectuee
                                Feedback( self.feedbacks["onHalt"], { "BEH_Medo_Automate_PreparerMission_SeFaireTransporter" } )
Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selPions ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
                    Activate( self.activations.BEH_Medo_Automate_FaireTransporter_DansZone, 1, setmetatable( { self.selPions, self._namedParams.Zone, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionMRT = v else rawset( t, k, v ) end end } ) )
                    --[[// Assigne les missions
]]
                                cases_switch_1[2] = true
                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_FaireTransporter_DansZone
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_FaireTransporter_DansZone"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Medo_Automate_FaireTransporter_DansZone" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.locZone = self.params[2]
    end,

    activate = function( self )
        self.ptCentreZone = self.ptCentreZone or S_Geometrie_BarycentreZone( self._namedParams.locZone )
        for _,x_pion in pairs( self._namedParams.selPions ) do
        local _continue = true
            Activate( self.activations.BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone, 1, { x_pion, self.ptCentreZone, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerSeFaireTransporterA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.ptZone = self.params[2]
    end,

    activate = ActivateWithStart,

    internalactivate = function( self )
        self.ptTransport = self.ptTransport or DEC_Geometrie_PositionAleatoireDansCercle( self._namedParams.ptZone, 100 )
        if( ModuleBegins() ) then
            StartInstance( self, self.activations.BEH_Mission_Automate_AssignerSeFaireTransporterA, 1, { ePhase_MRT, self._namedParams.pion, self.ptTransport, } )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_SeFaireTransporter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_FaireTransporter_DansZone, "BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone", nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_SeFaireTransporter, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_SeFaireTransporter, "BEH_Medo_Automate_FaireTransporter_DansZone", nodes.BEH_Medo_Automate_FaireTransporter_DansZone }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA_DansZone, "BEH_Mission_Automate_AssignerSeFaireTransporterA", nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SeFaireTransporter, "BEH_Medo_Automate_PreparerMission_SeFaireTransporter", nodes.BEH_Medo_Automate_PreparerMission_SeFaireTransporter }

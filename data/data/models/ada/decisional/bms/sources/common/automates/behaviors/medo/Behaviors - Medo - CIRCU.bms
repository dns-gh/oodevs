includedFiles = includedFiles or {}
includedFiles["sources/common/automates/behaviors/medo/Behaviors - Medo - CIRCU.bms"] = true

include "Common/Automates/Actions/Medo/Actions - Medo - CIRCU.bms"



--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerReconnaitreItineraireA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA", { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.itineraireLog = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, 1, { self._namedParams.ePhase, x, self._namedParams.itineraireLog, } )
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerReconnaitreItineraireA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA", { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.iti = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.iti, } )
self.done_ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe" }, "BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA", { "done_BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.uniteARenforcer = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, 1, { self._namedParams.ePhase, x, self._namedParams.uniteARenforcer, } )
                    end

                end

            end
        end

    end,

}

node "BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA" }, "BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_CIRCU_AssignerRenforcerA", { "done_ACT_Mission_Automate_CIRCU_AssignerRenforcerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.uniteARenforcer = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_CIRCU_AssignerRenforcerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.uniteARenforcer, DEC_Automate_PionPosition( self._namedParams.uniteARenforcer ), } )
self.done_ACT_Mission_Automate_CIRCU_AssignerRenforcerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe" }, "BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA", { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeObjets = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeObjets ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeObjets, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA" }, "BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA", { "done_ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.obj = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.obj, } )
self.done_ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneAListe" }, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA", { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA" }, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA", { "done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

--[[// -----------------------------------------------------------------------------
]]--[[// BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe
]]--[[//
]]--[[//
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe" }, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA", { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listePC = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listePC ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, 1, { self._namedParams.ePhase, x, DIA_GetAt( self._namedParams.listePC, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerAppuyerMouvementA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA" }, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA", { "done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pionA = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pionA, } )
self.done_ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe" }, "BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerArmerPIAA", { "done_BEH_Mission_Automate_CIRCU_AssignerArmerPIAA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listePIA = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == DEC_ListePoints_Size( self._namedParams.listePIA ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, 1, { self._namedParams.ePhase, x, DEC_ListePoints_GetAt( self._namedParams.listePIA, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerBloquerZoneA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerArmerPIAA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerArmerPIAA" }, "BEH_Mission_Automate_CIRCU_AssignerArmerPIAA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerArmerPIAA", { "done_ACT_Mission_Automate_LOG_AssignerArmerPIAA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pt = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerArmerPIAA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pt, } )
self.done_ACT_Mission_Automate_LOG_AssignerArmerPIAA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerBloquerZoneAListe" }, "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerBloquerZoneAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA", { "done_BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeSousSecteurs = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeSousSecteurs ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeSousSecteurs, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerBloquerZoneA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA" }, "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerBloquerZoneA", { "done_ACT_Mission_Automate_LOG_AssignerBloquerZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerBloquerZoneA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_LOG_AssignerBloquerZoneA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe" }, "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA", { "done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA" }, "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA", { "done_ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeAListe" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA", { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA", { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementAListe" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA", { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA" }, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA", { "done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.loc = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.loc, } )
self.done_ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Mission_Automate_CIRCU_AssignerSurveillerAListe"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerSurveillerAListe" }, "BEH_Mission_Automate_CIRCU_AssignerSurveillerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerSurveillerAListe, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_CIRCU_AssignerSurveillerA", { "done_BEH_Mission_Automate_CIRCU_AssignerSurveillerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( #( self._namedParams.listePions ) ~= 0, "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_CIRCU_AssignerSurveillerA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_LOG_AssignerSurveillerA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_CIRCU_AssignerSurveillerA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_CIRCU_AssignerSurveillerA" }, "BEH_Mission_Automate_CIRCU_AssignerSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_CIRCU_AssignerSurveillerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_LOG_AssignerSurveillerA", { "done_ACT_Mission_Automate_LOG_AssignerSurveillerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerSurveillerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_LOG_AssignerSurveillerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA, "ACT_Mission_Automate_CIRCU_AssignerRenforcerA", nodes.ACT_Mission_Automate_CIRCU_AssignerRenforcerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe, "BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA", nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe, "BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA", nodes.BEH_Medo_Automate_CIRCU_AssignerMissionRenforcerA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerFranchissementSurUnPointA, "ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA", nodes.ACT_Mission_Automate_LOG_AssignerAppuyerFranchissementSurUnPointA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA, "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA", nodes.ACT_Mission_Automate_LOG_AssignerAppuyerMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementAListe, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA", nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA, "ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA", nodes.ACT_Mission_Automate_LOG_AssignerAppuyerMouvementDansZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneAListe, "BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA", nodes.BEH_Mission_Automate_CIRCU_AssignerAppuyerMouvementDansZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA, "ACT_Mission_Automate_LOG_AssignerArmerPIAA", nodes.ACT_Mission_Automate_LOG_AssignerArmerPIAA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe, "BEH_Mission_Automate_CIRCU_AssignerArmerPIAA", nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA, "ACT_Mission_Automate_LOG_AssignerBloquerZoneA", nodes.ACT_Mission_Automate_LOG_AssignerBloquerZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneAListe, "BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA", nodes.BEH_Mission_Automate_CIRCU_AssignerBloquerZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe, "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA", nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreZoneStationnementA, "ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA", nodes.ACT_Mission_Automate_LOG_AssignerMettreEnOeuvreZoneStationnementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA, "ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA", nodes.ACT_Mission_Automate_LOG_AssignerReconnaitreItineraireA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA", nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA, "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA", nodes.ACT_Mission_Automate_LOG_AssignerReconnaitreZoneContamineeA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeAListe, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA", nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneContamineeA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA, "ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA", nodes.ACT_Mission_Automate_LOG_AssignerReconnaitreZoneDeDeploiementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementAListe, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA", nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreZoneDeDeploiementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerA, "ACT_Mission_Automate_LOG_AssignerSurveillerA", nodes.ACT_Mission_Automate_LOG_AssignerSurveillerA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerAListe, "BEH_Mission_Automate_CIRCU_AssignerSurveillerA", nodes.BEH_Mission_Automate_CIRCU_AssignerSurveillerA }

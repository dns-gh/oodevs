includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missions/Withdraw.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_Withdraw
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_Withdraw"
{
    feedbacks = { { { "done_MIS_Pion_Withdraw" }, "MIS_Pion_Withdraw" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Withdraw, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionAvecEscortePossibleSur", { "done_BEH_Dep_ProgressionAvecEscortePossibleSur" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours
        if( ModuleBegins() ) then
            F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            DEC_SetMission( myself, self._namedParams.mission )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
        self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            self.ePhase = eFinMission
            self.eEtat = eActionEnCours
            self.eEtatOrdreFinMission = eActionEnCours
        end

         do
            local switch_1 = self.ePhase
            if switch_1 == ePreparerMission then
                --[[// 1) Preparation de la mission ]]
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                self.ePhase = eProgresser
                --[[// Deplacement: DEUX TYPES -- > deplacement seul vers point arrivee ou suivre unite si escorter]]
            elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    --[[//-----------------------------------------------------------------------------
]]--[[// Pas d'escorte --> faire mvt normalement
]]--[[//-----------------------------------------------------------------------------
]]              if( self.eEtat == eActionEffectuee ) then
                    self.eEtat = eActionEnCours
                    self.ePhase = eFinMission
                    do return end
                end

DEC_Trace( "Calls move to initial position : "..tostring( myself.initialPosition ) )
DEC_Trace( "initial position : "..tostring( DEC_PointToString( myself.initialPosition ) ) )
                self.itinerary = self.itinerary or { myself.initialPosition }
                Activate( self.activations.BEH_Dep_ProgressionAvecEscortePossibleSur, 1, { self.itinerary, eProgressionDirect, eTypeItiMouvement, } )
                self.done_BEH_Dep_ProgressionAvecEscortePossibleSur = function( self, _, v ) self.eEtat = v[1] end
            --[[// Fin mission ]]
            elseif switch_1 == eFinMission then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
            end
        end

    end,
}

node "InitWithdraw"
{
    create = function( self )
        local initialPosition = DEC_Agent_PositionPtr( myself )
        myself.initialPosition = DEC_Geometrie_CopiePoint( initialPosition )
    end,
}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Withdraw = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.Default, "Default", nodes.InitWithdraw }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Withdraw, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Withdraw, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Withdraw, "BEH_Dep_ProgressionAvecEscortePossibleSur", nodes.BEH_Dep_ProgressionAvecEscortePossibleSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Withdraw, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

includedFiles = includedFiles or {}
includedFiles["sources/common/pions/missions/FaireMouvement.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_FaireMouvement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_FaireMouvement"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "BEH_Dep_ProgressionAvecEscortePossibleSur", { "onHalt" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Pion_FaireMouvement" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours
        if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mission )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    DEC_Trace( "** MIS_Pion_FaireMouvement **" )
                    self.ePhase = eProgresser
                    
                --[[// Deplacement: DEUX TYPES -- > deplacement seul vers point arrivee ou suivre unite si escorter
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    --[[//-----------------------------------------------------------------------------
]]--[[// Pas d'escorte --> faire mvt normalement
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionAvecEscortePossibleSur, 1, setmetatable( { self._namedParams.mission.itineraire_, eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// Fin mission
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    
                                cases_switch_1[3] = true
                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_ProgressionAvecEscortePossibleSur
]]--[[//
]]--[[// Commentaires: je sais, le nom de ce comportement est pourrit
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_ProgressionAvecEscortePossibleSur"
{
    activations =
    {
        { "BEH_Dep_GererProgression", { "onHalt" } },
        { "ACT_Info_Trace", { "onHalt" } },
        { "BEH_Dep_Suivre", { "onHalt" } },
        { "BEH_Dep_SeDeplacer", { "onHalt" } },
        { "ACT_Obs_EtablirVisionCur", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Dep_ProgressionAvecEscortePossibleSur" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.itineraire = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
                self.ePhase = self.ePhase or eCreerItineraire
        self.eEtatObstacle = self.eEtatObstacle or eActionEnCours
        self.eEtat = self.eEtat or eActionEnCours
        self.it = self.it or nil
        self.bAttenteEffectuee = self.bAttenteEffectuee or false
        --[[//=============================================================================
]]--[[// Gestion lima etc si progression tactique + obstacles
]]--[[//=============================================================================
]]Activate( self.activations.BEH_Dep_GererProgression, 1, { self._namedParams.eTypeProgression, } )
         do
            local switch_1 = --[[//=============================================================================
]]--[[// 1) Calculer itineraire, 2) Progresser. Si obstacle ou NBC --> 1)
]]--[[//=============================================================================
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eCreerItineraire then
                    --[[//-----------------------------------------------------------------------------
]]--[[// 1) Creer iti
]]--[[//-----------------------------------------------------------------------------
]]self.it = DEC_CreerItineraireListe( self._namedParams.itineraire, self._namedParams.eTypeIti )
                    F_Pion_SetitMvt( myself, self.it )
                    self.ePhase = eProgresser
                    
                --[[//-----------------------------------------------------------------------------
]]--[[// 2) Progression
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    --[[//-----------------------------------------------------------------------------
]]--[[// GESTION ESCORTE
]]--[[//-----------------------------------------------------------------------------
]]local pionEnEscorte = F_Pion_GetpionEnEscorte( myself )
                    --[[// Un pion veut nous escorter
]]if( ( pionEnEscorte ~= 0 and pionEnEscorte ~= nil ) ) then
                        do
                            --[[// Attendre l'unité si distance supérieur à 1 km
]]if( not self.bAttenteEffectuee and DEC_Geometrie_Distance( DEC_Agent_Position(), pionEnEscorte:DEC_Agent_Position() ) > 1000 ) then
                                do
                                    Activate( self.activations.ACT_Info_Trace, 1, { "*** Unit escorted ***", } )
                                    Activate( self.activations.ACT_Info_Trace, 1, { "Waiting for the escort", } )
                                                                        return

                                end
                            end

                            self.bAttenteEffectuee = true
                            Activate( self.activations.BEH_Dep_Suivre, 1, { pionEnEscorte, 800, } )
                                                        return

                        end
                    else
                        --[[// fin escorte inopminnée
]]self.bAttenteEffectuee = false
                    end

                    --[[//-----------------------------------------------------------------------------
]]--[[// Deplacement de base
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                F_Pion_SetitMvt( myself, nil )
                                self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionAvecEscortePossibleSur" )
                                                                self.params.__returnValue = eActionEffectuee
                                Feedback( self.feedbacks["onHalt"], { "BEH_Dep_ProgressionAvecEscortePossibleSur" } )
Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_SeDeplacer, 1, setmetatable( { self.it, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    
                                cases_switch_1[2] = true
                end
            end

    end,

    destroy = function( self )
                F_Pion_SetitMvt( myself, nil )
        self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionAvecEscortePossibleSur" )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_FaireMouvement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionAvecEscortePossibleSur, "BEH_Dep_GererProgression", nodes.BEH_Dep_GererProgression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionAvecEscortePossibleSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionAvecEscortePossibleSur, "BEH_Dep_Suivre", nodes.BEH_Dep_Suivre }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionAvecEscortePossibleSur, "BEH_Dep_SeDeplacer", nodes.BEH_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionAvecEscortePossibleSur, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Dep_ProgressionAvecEscortePossibleSur", nodes.BEH_Dep_ProgressionAvecEscortePossibleSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

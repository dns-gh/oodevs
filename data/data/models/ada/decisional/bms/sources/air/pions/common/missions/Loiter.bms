includedFiles = includedFiles or {}
includedFiles["sources/air/pions/common/missions/Loiter.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Loiter
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Pion_JOINT_AIR_Loiter"
{
    feedbacks = { { { "done_MIS_Pion_JOINT_AIR_Loiter" }, "MIS_Pion_JOINT_AIR_Loiter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_JOINT_AIR_Loiter, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Maj_Pion_PasserEnTirLibre", { "done_ACT_Maj_Pion_PasserEnTirLibre" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux", { "done_BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_AIR_Voler", { "done_BEH_Dep_Pion_AIR_Voler" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "BEH_Dep_Pion_AIR_SePoser", { "done_BEH_Dep_Pion_AIR_SePoser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.ePhase = self.ePhase or eDetruire
        self.eEtat = self.eEtat or eActionEnCours
        Activate( self.activations.ACT_Info_Trace, 1, { "Mission AIR : Perform loiter mission", } )
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, {} )
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, 1, {} )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnAttaque, } )
                    Activate( self.activations.BEH_Dep_Pion_AIR_Voler, 1, {} )
                    Activate( self.activations.BEH_Dep_ProgressionSur, GetMotivation( "MOT_Manoeuvrer" ), { self._namedParams.mission.itineraire_, eProgressionDefaut, eTypeItiInfiltration, } )
                    _continue = false--[[// behavior BEH_Eni_Pion_AIR_EffectuerRaid( mission.zone_ ) : strength = DIA_GetMotivation( MOT_ManoeuvrerSurEnis );
]]
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                F_Pion_SetobjectifEsquive( myself, 0 )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_Pion_AIR_SePoser, 1, {} )
self.done_BEH_Dep_Pion_AIR_SePoser = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

    destroy = function( self )
                F_Pion_SetobjectifEsquive( myself, 0 )
    end,

}

node "BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux"
{
    feedbacks = { { { "done_BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux" }, "BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Eni_Pion_AIR_ExecuteAirStrike", { "done_BEH_Eni_Pion_AIR_ExecuteAirStrike" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Prise en charge de l'ordre d'application des feux
]]--[[//---------------------------------------------------------------------	
]]local selOrder = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( selOrder or {} ) do
        local _continue = true
do
                local repOrdreCond = x
                if( repOrdreCond:GetType() == "Rep_OrderConduite_Pion_ExecuteAirStrike" ) then
                    do
                        local repOrdre_Tir = repOrdreCond
                        Activate( self.activations.ACT_Info_Trace, 1, { "Ordre : Execute Air Strike", } )
                        Activate( self.activations.ACT_RC, 1, { eRC_ReceptionOrdreDeFeu, } )
                        StartActivateOverride( self, self.activations.BEH_Eni_Pion_AIR_ExecuteAirStrike, 10, { repOrdre_Tir:GetzoneCible_(), } )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

    end,

--[[// DEC_ListePoints_GetAt
]]--[[// -----------------------------------------------------------------------------
]]--[[// GererEniDetruireDansZone
]]--[[//
]]--[[// Dans ce cas, c'est un tir indirect dans la zone
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_AIR_ExecuteAirStrike"
{
    feedbacks = { { { "done_BEH_Eni_Pion_AIR_ExecuteAirStrike" }, "BEH_Eni_Pion_AIR_ExecuteAirStrike" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_AIR_ExecuteAirStrike, {value} ) end,
    activations =
    {
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Dep_Pion_AIR_PremiereAllure", { "done_BEH_Dep_Pion_AIR_PremiereAllure" } },
        { "BEH_Eni_Pion_AIR_DonnerAssautSur", { "done_BEH_Eni_Pion_AIR_DonnerAssautSur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.target = self.target or S_Geometrie_BarycentreZone( self._namedParams.zone )
        if( ModuleBegins() ) then
            do
                StartActivateOverride( self, self.activations.BEH_Dep_ProgressionVers, 1, { self.target, eProgressionDefaut, eTypeItiAttaque, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
            end
        end

        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.BEH_Dep_Pion_AIR_PremiereAllure, 1, {} )
        local listeConnaissances = DEC_Connaissances_UnitesEnnemiesVivantesDansZone( self._namedParams.zone )
        for _,x in pairs( listeConnaissances or {} ) do
        local _continue = true
do
                Activate( self.activations.BEH_Eni_Pion_AIR_DonnerAssautSur, S_Eni_Pion_AIR_ForceDetruire( x, eNatureAtlas_None ), { x, eDetecte, M_DOCTRINE_PION_AIR_PH(), } )
            end

        end

    end,

}

node "BEH_Eni_Pion_AIR_DonnerAssautSur"
{
    feedbacks = { { { "done_BEH_Eni_Pion_AIR_DonnerAssautSur" }, "BEH_Eni_Pion_AIR_DonnerAssautSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_AIR_DonnerAssautSur, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Misc_VerouillerConnaissance", { "done_ACT_Misc_VerouillerConnaissance" } },
        { "BEH_MOT_DesactiveSauvegarde", { "done_BEH_MOT_DesactiveSauvegarde" } },
        { "ACT_Tir_DirectSur", { "done_ACT_Tir_DirectSur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.target = self.params[1]
        self._namedParams.niveauPerception = self.params[2]
        self._namedParams.rPH = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//verouillez la direction des capteurs vers la cible
]]Activate( self.activations.ACT_Misc_VerouillerConnaissance, 1, { self._namedParams.target, } )
        if( S_Tir_EstAPorteePosturesReelles( self._namedParams.target, self._namedParams.rPH ) ) then
            do
                if( DEC_ConnaissanceAgent_EstPercuParUnite( self._namedParams.target ) and S_Eni_EstNiveauPerceptionGTIA( self._namedParams.target, self._namedParams.niveauPerception ) ) then
                    do
                        Activate( self.activations.BEH_MOT_DesactiveSauvegarde, 1, {} )
                        Activate( self.activations.ACT_Tir_DirectSur, 1, { self._namedParams.target, self._namedParams.rPH, } )
                    end
                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_JOINT_AIR_Loiter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_DonnerAssautSur, "ACT_Misc_VerouillerConnaissance", nodes.ACT_Misc_VerouillerConnaissance }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_DonnerAssautSur, "BEH_MOT_DesactiveSauvegarde", nodes.BEH_MOT_DesactiveSauvegarde }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_DonnerAssautSur, "ACT_Tir_DirectSur", nodes.ACT_Tir_DirectSur }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_ExecuteAirStrike, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_ExecuteAirStrike, "BEH_Dep_Pion_AIR_PremiereAllure", nodes.BEH_Dep_Pion_AIR_PremiereAllure }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_AIR_ExecuteAirStrike, "BEH_Eni_Pion_AIR_DonnerAssautSur", nodes.BEH_Eni_Pion_AIR_DonnerAssautSur }
connections[ #connections + 1 ] = { nodes.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, "BEH_Eni_Pion_AIR_ExecuteAirStrike", nodes.BEH_Eni_Pion_AIR_ExecuteAirStrike }
connections[ #connections + 1 ] = { nodes.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux", nodes.BEH_Pion_JOINT_AIR_GererOrdre_AppliquerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "BEH_Dep_Pion_AIR_Voler", nodes.BEH_Dep_Pion_AIR_Voler }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_JOINT_AIR_Loiter, "BEH_Dep_Pion_AIR_SePoser", nodes.BEH_Dep_Pion_AIR_SePoser }

includedFiles = includedFiles or {}
includedFiles["sources/air/pions/common/missions/Suivre.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// SuivreUnite
]]--[[// 
]]--[[// Commentaires: Suivre en arriere du pion à suivre.
]]--[[//               Prise en compte de l'ordre de conduite interrompre
]]--[[// *****************************************************************************
]]node "MIS_Pion_Suivre"
{
    feedbacks = { { { "done_MIS_Pion_Suivre" }, "MIS_Pion_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Suivre, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_AIR_Suivre", { "done_BEH_Dep_Pion_AIR_Suivre" } },
        { "BEH_Dep_Pion_AIR_SePoser", { "done_BEH_Dep_Pion_AIR_SePoser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        --[[//variables persistantes
]]        self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eSuivreUnite
        Activate( self.activations.ACT_Info_Trace, 1, { "Mission Air : Suivre", } )
        if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eSuivreUnite then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_SuitUnite, } )
                    Activate( self.activations.BEH_Dep_Pion_AIR_Suivre, GetMotivation( "MOT_Manoeuvrer" ), { self._namedParams.mission.uniteASuivre_, 3000, eProgressionDefaut, eTypeItiMouvement, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_Pion_AIR_SePoser, 1, emptyTable )
self.done_BEH_Dep_Pion_AIR_SePoser = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

    destroy = function( self )
                F_Pion_SetobjectifEsquive( myself, nil )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Suivre = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_Suivre, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Suivre, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Suivre, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Suivre, "BEH_Dep_Pion_AIR_Suivre", nodes.BEH_Dep_Pion_AIR_Suivre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Suivre, "BEH_Dep_Pion_AIR_SePoser", nodes.BEH_Dep_Pion_AIR_SePoser }

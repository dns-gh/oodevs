includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/fonctions/Fonctions - Misc.bms"] = true

local emptyTable = emptyTable


--[[// -------------------------------------------------------------------------
]]--[[// Renvoie le pion dont l'alerte est la plus iminente
]]--[[// -------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// Renvoie le pion dont l'alerte est la moins iminente
]]--[[// -------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// Construit la liste des directions de couverture pour un sous groupement
]]--[[// -------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// renvoie la plus grande distance entre point de ravitaillement et position
]]--[[// des pions
]]--[[// -------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// estimation du temps qu'un pion va mettre pour rejoindre son point de
]]--[[// ravitaillement
]]--[[// -------------------------------------------------------------------------
]]--[[// impossible d'aller se ravitailler
]]--[[//Temps pour rejoindre le plot
]]function S_Misc_Automate_ALAT_PionAlerteLaPlusIminente( listePions )
    local _returnValue = nil
    local listePionsAlat = S_ListePionsALAT( listePions )
    local alerteMax = -1105199104
    local patrouilleAlat = nil
    assert( not DIA_IsListEmpty( listePionsAlat ), "pas de pion alat dans cette liste" )
    for _,x in pairs( listePionsAlat or emptyTable ) do
    local _continue = true
do
            patrouilleAlat = x
            if( patrouilleAlat:GetrNiveauAlerteRavitaillement_() > alerteMax ) then
                do
                    alerteMax = patrouilleAlat:GetrNiveauAlerteRavitaillement_()
                    _returnValue = x
                end
            end

        end

    end

    do return _returnValue end
end

function S_Misc_Automate_ALAT_PionAlerteLaMoinsIminente( listePions )
    local _returnValue = nil
    local listePionsAlat = S_ListePionsALAT( listePions )
    local alerteMin = 1105199104
    local patrouilleAlat = nil
    assert( not DIA_IsListEmpty( listePionsAlat ), "pas de pion alat dans cette liste" )
    for _,x in pairs( listePionsAlat or emptyTable ) do
    local _continue = true
do
            patrouilleAlat = x
            if( patrouilleAlat:GetrNiveauAlerteRavitaillement_() < alerteMin ) then
                do
                    alerteMin = patrouilleAlat:GetrNiveauAlerteRavitaillement_()
                    _returnValue = x
                end
            end

        end

    end

    do return _returnValue end
end

function S_Misc_Automate_ALAT_ListeDirectionsPourCouverturesPourSgpt( rNbDirections, direction )
    local _returnValue = {}
    assert( direction ~= nil, "Erreur : Direction Non Valide" )
    assert( rNbDirections ~= 0, "Erreur : Nb Directions Souhaitées = 0" )
    _returnValue = {}
    local directionPerpendiculaire = DEC_Geometrie_CreerDirectionPerpendiculaire( direction, false )
    local angle = 180 / ( rNbDirections + 1 )
    local i = 1
    while i <= rNbDirections do
        local _continue = true
        DEC_UserTypeList_PushBack( _returnValue, DEC_Geometrie_CopieEtRotateDirection( directionPerpendiculaire, i * angle ) )
    i = i + 1
    end

    do return _returnValue end
end

function S_Misc_Automate_ALAT_DistancePionPlusLoinAPlotRavitaillement( listePions, direction )
    local _returnValue = 0
    _returnValue = 0
    local pionTC2 = DEC_Automate_PcDeTC2()
    local distanceMax = 0
    local distanceBuffer = 0
    local parouilleAlatBuffer = nil
    if( pionTC2 == nil ) then
        do return _returnValue end
    end

    for _,x in pairs( listePions or emptyTable ) do
    local _continue = true
do
            if( not S_EstPatrouilleALAT( x ) ) then
                _continue = false
            end

                if _continue then
                parouilleAlatBuffer = x
                if( DEC_ConnaissanceObjet_EstValide( parouilleAlatBuffer:GetplotRavitaillementAssigne_() ) ) then
                    distanceBuffer = DEC_Geometrie_Distance( DEC_Automate_PionPosition( parouilleAlatBuffer ), S_Obj_Position( parouilleAlatBuffer:GetplotRavitaillementAssigne_() ) )
                else
                    distanceBuffer = DEC_Geometrie_Distance( DEC_Automate_PionPosition( pionTC2 ), DEC_Automate_PionPosition( parouilleAlatBuffer ) )
                end

                if( distanceBuffer > distanceMax ) then
                    distanceMax = distanceBuffer
                end

            end
        end

    end

    _returnValue = distanceMax
    do return _returnValue end
end

function S_Misc_Automate_ALAT_TempsPionPourAllerRecompleter( pion )
    local _returnValue = 0
    _returnValue = 0
    local pointDeRecompletement = DEC_Geometrie_CreerPoint()
    local pionTC2 = DEC_Automate_PcDeTC2()
    local patrouilleAlat = pion
    if( not S_EstPatrouilleALAT( pion ) ) then
        do return _returnValue end
    end

    if( DEC_ConnaissanceObjet_EstValide( patrouilleAlat:GetplotRavitaillementAssigne_() ) ) then
        do
            local positionPlotRavitaillement = S_Geometrie_BarycentreZone( DEC_ConnaissanceObjet_Localisation( patrouilleAlat:GetplotRavitaillementAssigne_() ) )
            DEC_Copie_Point( positionPlotRavitaillement, pointDeRecompletement )
        end
    else
do
            if( pionTC2 ~= nil ) then
                DEC_Copie_Point( DEC_Automate_PionPosition( pionTC2 ), pointDeRecompletement )
            else
                do return _returnValue end
            end

        end
    end

    _returnValue = DEC_Automate_PionTempsPourParcourirDistanceEnLigneDroite( pion, DEC_Geometrie_Distance( DEC_Automate_PionPosition( pion ), pointDeRecompletement ) )
    do return _returnValue end
end


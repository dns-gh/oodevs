includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/common/Actions.bms"] = true

include "bit.lua"





--[[// *****************************************************************************
]]--[[// ACT_Dep_Pion_Rens_ActiverFurtivite
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_Pion_Rens_ActiverFurtivite"
{
    feedbacks = { { { "done_ACT_Dep_Pion_Rens_ActiverFurtivite" }, "ACT_Dep_Pion_Rens_ActiverFurtivite" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_Pion_Rens_ActiverFurtivite, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.rFurtivite = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Perception_Furtivite( self._namedParams.rFurtivite )
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Perception_Furtivite( 1 )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_AssurerLaLiaisonAvec
]]--[[// 
]]--[[// Commentaires:partage de la connaissance avec le pion passé en paramètre
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_AssurerLaLiaisonAvec"
{
    feedbacks = { { { "done_ACT_Pion_Rens_AssurerLaLiaisonAvec" }, "ACT_Pion_Rens_AssurerLaLiaisonAvec" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_AssurerLaLiaisonAvec, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionAmi = self.params[1]
    end,

    select = function( self )
        --[[// contrainte de la fonction moteur...
]]        self.listeAutomate = self.listeAutomate or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutLiaison )
                    else
                        DEC_Message( eRC_DebutLiaison )
                    end

                end

                DEC_Trace( " ------------ L'unité assure la liaison ------------" )
            end
--[[//---------------------------------------------------------------------
]]--[[// Partage connaissance // Instantanée ici
]]--[[//---------------------------------------------------------------------
]]--[[/*délai en minute */]]        end

        DEC_Connaissances_PartageConnaissancesAvec( DEC_GetAutomate( self._namedParams.pionAmi ), 0.01 )
    end,

    deselect = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_Pion_RENS_ActiverRadarDans
]]--[[// 
]]--[[// Commentaires: pour raddar dopler
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_Pion_RENS_ActiverRadarDans"
{
    feedbacks = { { { "done_ACT_Obs_Pion_RENS_ActiverRadarDans" }, "ACT_Obs_Pion_RENS_ActiverRadarDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obs_Pion_RENS_ActiverRadarDans, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    select = function( self )
                self.actionID = self.actionID or nil
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------		        		
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutSurveillance )
                    else
                        DEC_Message( eRC_DebutSurveillance )
                    end

                end
--[[// RC debut observation Radar
]]
                DEC_Trace( "Activation radar dans zone" )
                self.actionID = DEC_Perception_ActiverRadarSurLocalisation( eRadarType_Radar, self._namedParams.zone )
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinSurveillance )
            else
                DEC_Message( eRC_FinSurveillance )
            end

        end

        DEC_Trace( "Activation radar dans zone: fin" )
        DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_Radar, self.actionID )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_Pion_RENS_ActiverEcouteDans
]]--[[// 
]]--[[// Commentaires: pour raddar dopler
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_Pion_RENS_ActiverEcouteDans"
{
    feedbacks = { { { "done_ACT_Obs_Pion_RENS_ActiverEcouteDans" }, "ACT_Obs_Pion_RENS_ActiverEcouteDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obs_Pion_RENS_ActiverEcouteDans, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    select = function( self )
                self.actionID = self.actionID or nil
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------		        		
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Activation écoute dans zone" )
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_ActivationSystemeEcoute )
                    else
                        DEC_Message( eRC_ActivationSystemeEcoute )
                    end

                end

                self.actionID = DEC_Perception_ActiverRadarSurLocalisation( eRadarType_Ecoute, self._namedParams.zone )
            end
        end

--[[// MIA Fin ecoute
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_DesactivationSystemeEcoute )
            else
                DEC_Message( eRC_DesactivationSystemeEcoute )
            end

        end

        DEC_Trace( "Activation écoute dans zone: fin" )
        DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_Ecoute, self.actionID )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_Pion_RENS_ActiverEcouteRadarDans
]]--[[// 
]]--[[// Commentaires: pour raddar dopler
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Obs_Pion_RENS_ActiverEcouteRadarDans"
{
    feedbacks = { { { "done_ACT_Obs_Pion_RENS_ActiverEcouteRadarDans" }, "ACT_Obs_Pion_RENS_ActiverEcouteRadarDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obs_Pion_RENS_ActiverEcouteRadarDans, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    select = function( self )
                self.actionID = self.actionID or nil
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------		        		
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_ActivationSystemeEcouteRadar )
                    else
                        DEC_Message( eRC_ActivationSystemeEcouteRadar )
                    end

                end

                DEC_Trace( "Activation écoute RADAR dans zone" )
                self.actionID = DEC_Perception_ActiverRadarSurLocalisation( eRadarType_EcouteRadar, self._namedParams.zone )
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_DesactivationSystemeEcouteRadar )
            else
                DEC_Message( eRC_DesactivationSystemeEcouteRadar )
            end

        end

        DEC_Trace( "Desactivation écoute RADAR dans zone" )
        DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_EcouteRadar, self.actionID )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Obs_Pion_RENS_ActiverBrouillage
]]--[[// 
]]--[[// Commentaires: pour raddar dopler
]]--[[// eTypeObjectZoneBrouillageBromure 
]]--[[// eTypeObjectZoneBrouillageBrod
]]--[[// *****************************************************************************
]]node "ACT_Obs_Pion_RENS_ActiverBrouillage"
{
    feedbacks = { { { "done_ACT_Obs_Pion_RENS_ActiverBrouillage" }, "ACT_Obs_Pion_RENS_ActiverBrouillage" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obs_Pion_RENS_ActiverBrouillage, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjectZoneBrouillage = self.params[1]
    end,

    select = function( self )
                self.mission = self.mission or DEC_GetMission( myself )
        self.localisation = self.localisation or DEC_Geometrie_CreerLocalisationCercle( DEC_Agent_Position(), self.mission.radius_ or 25000 )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------		        		
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_ActivationBrouillage )
                    else
                        DEC_Message( eRC_ActivationBrouillage )
                    end

                end

                DEC_Trace( "**** Activation brouillage ****" )
                DEC_CreerObjetSansDelais( S_TypeObject_ToString( self._namedParams.eTypeObjectZoneBrouillage ), self.localisation )
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_DesactivationBrouillage )
            else
                DEC_Message( eRC_DesactivationBrouillage )
            end

        end

        DEC_Trace( "**** Desactivation brouillage ****" )
        DEC_DetruireObjetSansDelais( DEC_Connaissances_ObjetLePlusProche( S_TypeObject_ToString( self._namedParams.eTypeObjectZoneBrouillage ) ) )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_Pion_RENS_VolerA
]]--[[//
]]--[[// Commentaires : Un drone vole seulement si il est mise en oeuvre
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_Pion_RENS_VolerA"
{
    feedbacks = { { { "done_ACT_Dep_Pion_RENS_VolerA" }, "ACT_Dep_Pion_RENS_VolerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_Pion_RENS_VolerA, {value} ) end,
    actuators =
    {
        hauteur = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.hauteur = self.params[1]
    end,

    select = function( self )
                self.bInterrompue = self.bInterrompue or false
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------	
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "**** Decollage ****" )
                DEC_Agent_HauteurDeVol( self._namedParams.hauteur )
            end
--[[//---------------------------------------------------------------------
]]--[[// Reprisende la hauteur
]]--[[//---------------------------------------------------------------------
]]        end

        if( self.bInterrompue ) then
            DEC_Agent_HauteurDeVol( self._namedParams.hauteur )
        end

    end,

    deselect = function( self )
                self.bInterrompue = true
    end,

    destroy = function( self )
                DEC_Trace( "**** Atterissage ****" )
        DEC_Agent_HauteurDeVol( 0 )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Connaissance_Rens_EnregistrerDonnees
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre les connaissances
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Connaissance_Rens_EnregistrerDonnees"
{
    feedbacks = { { { "done_ACT_Connaissance_Rens_EnregistrerDonnees" }, "ACT_Connaissance_Rens_EnregistrerDonnees" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Connaissance_Rens_EnregistrerDonnees, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_EnregistrementDonnes )
                    else
                        DEC_Message( eRC_EnregistrementDonnes )
                    end

                end

                DEC_Perception_ActiverModeEnregistrement()
            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Connaissance_Rens_ExploiterDonnees
]]--[[//
]]--[[// Commentaires: on juste un delai, ensuite utiliser
]]--[[//               'ACT_Connaissance_Rens_ExtraireDonnees'
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Connaissance_Rens_ExploiterDonnees"
{
    feedbacks = { { { "done_ACT_Connaissance_Rens_ExploiterDonnees" }, "ACT_Connaissance_Rens_ExploiterDonnees" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Connaissance_Rens_ExploiterDonnees, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.rDelai = self.params[1]
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init  // MIA RC à faire
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_ExploitationDonnees )
                else
                    DEC_Message( eRC_ExploitationDonnees )
                end

            end
        end

        do
            do
                self.rTempsDebut = self.rTempsDebut or DEC_TempsSim()
                if( ModuleBegins() ) then
                    do
                    end
                end

                do
                end

                if( self._namedParams.rDelai * 60 <= DEC_TempsSim() - self.rTempsDebut ) then
                    do
                                                self:SendFeedback( eActionEffectuee )
                        Halt( self )
                        do return end

                    end
                end

            end

        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Connaissance_Rens_ExtraireDonnees
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre les connaissances
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Connaissance_Rens_ExtraireDonnees"
{
    feedbacks = { { { "done_ACT_Connaissance_Rens_ExtraireDonnees" }, "ACT_Connaissance_Rens_ExtraireDonnees" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Connaissance_Rens_ExtraireDonnees, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_ExtractionDonnes )
                    else
                        DEC_Message( eRC_ExtractionDonnes )
                    end

                end

                DEC_Perception_DesactiverModeEnregistrement()
            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_InstallerDisposifif
]]--[[//
]]--[[// Commentaires: Juste RC
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_InstallerDisposifif"
{
    feedbacks = { { { "done_ACT_Pion_Rens_InstallerDisposifif" }, "ACT_Pion_Rens_InstallerDisposifif" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_InstallerDisposifif, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_EnPosition )
                else
                    DEC_Message( eRC_EnPosition )
                end

            end
        end

    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/appui/appuimob/pions/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: SDE 02-11-22 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/AppuiMob/Pions/Actions.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 20/06/05 11:04 $
]]--[[// $Revision: 16 $
]]--[[// $Workfile: Actions.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// ----------------------------------------------------------------------------
]]--[[// ACT_Transport_Pion_LOG_Transport
]]--[[//
]]--[[//
]]--[[// ----------------------------------------------------------------------------
]]node "ACT_Transport_Pion_LOG_Transport"
{
    feedbacks = { { { "done_ACT_Transport_Pion_LOG_Transport" }, "ACT_Transport_Pion_LOG_Transport" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_LOG_Transport, {value} ) end,
    actuators =
    {
        transporter = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selListPions = self.params[1]
    end,

    select = function( self )
        --[[// Pas d'unitées prêtes
]]        if( #( self._namedParams.selListPions ) <= 0 ) then
            self:SendFeedback( eActionEnCours )
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Transport_AjouterPions( self._namedParams.selListPions, false )
            end
        end

        if( not DEC_Transport_EstTermine() ) then
            self:SendFeedback( eActionEnCours )
            do return end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

    end,

    deselect = function( self )
                do
        end

    end,

    destroy = function( self )
                DEC_Transport_Annuler()
    end,

}

--[[// ----------------------------------------------------------------------------
]]--[[// ACT_Transport_Pion_LOG_Embarquer
]]--[[//
]]--[[//
]]--[[// ----------------------------------------------------------------------------
]]node "ACT_Transport_Pion_LOG_Embarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_LOG_Embarquer" }, "ACT_Transport_Pion_LOG_Embarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_LOG_Embarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

--[[// Pas de déplacement pendant embarquement ou débarquement
]]    create = function( self )
    end,

    select = function( self )
                self.eActionTransport = self.eActionTransport or nil
        self.actionPt = self.actionPt or 0
        self.bPause = self.bPause or false
        if( ModuleBegins() ) then
            do
                                do
                end

                self.actionPt = DEC_Transport_StartEmbarquer( self.eActionTransport )
            end
        end

         do
            local _continue = true
            local switch_1 = self.eActionTransport
                if switch_1 == eActionTransport_Running then
                                        self:SendFeedback( eActionEnCours )
                    do return end

                                end
                if switch_1 == eActionTransport_Finished then
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if switch_1 == eActionTransport_Impossible then
                    DEC_Trace( "Erreur durant le transport" )
                                        self:SendFeedback( eActionImpossible )
                    do return end

                                end
            end

        if( self.bPause ) then
            do
                self.bPause = false
                DEC_ReprendAction( self.actionPt )
                                self:SendFeedback( eActionEnCours )
                do return end

            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionPt )
        self.bPause = true
    end,

    destroy = function( self )
                DEC_StopAction( self.actionPt )
    end,

}

--[[// ----------------------------------------------------------------------------
]]--[[// ACT_Transport_Pion_LOG_Debarquer
]]--[[//
]]--[[//
]]--[[// ----------------------------------------------------------------------------
]]node "ACT_Transport_Pion_LOG_Debarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_LOG_Debarquer" }, "ACT_Transport_Pion_LOG_Debarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_LOG_Debarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

--[[// Pas de déplacement pendant embarquement ou débarquement
]]    create = function( self )
    end,

    select = function( self )
                self.eActionTransport = self.eActionTransport or nil
        self.actionPt = self.actionPt or 0
        self.bPause = self.bPause or false
        if( ModuleBegins() ) then
            do
                                do
                end

                self.actionPt = DEC_Transport_StartDebarquer( self.eActionTransport )
            end
        end

         do
            local _continue = true
            local switch_1 = self.eActionTransport
                if switch_1 == eActionTransport_Running then
                                        self:SendFeedback( eActionEnCours )
                    do return end

                                end
                if switch_1 == eActionTransport_Finished then
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if switch_1 == eActionTransport_Impossible then
                    DEC_Trace( "Erreur durant le transport" )
                                        self:SendFeedback( eActionImpossible )
                    do return end

                                end
            end

        if( self.bPause ) then
            do
                self.bPause = false
                DEC_ReprendAction( self.actionPt )
                                self:SendFeedback( eActionEnCours )
                do return end

            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionPt )
        self.bPause = true
    end,

    destroy = function( self )
                DEC_StopAction( self.actionPt )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Misc_Pion_LOG_PreterVSRAM
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Misc_Pion_LOG_PreterVSRAM"
{
    feedbacks = { { { "done_ACT_Misc_Pion_LOG_PreterVSRAM" }, "ACT_Misc_Pion_LOG_PreterVSRAM" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_LOG_PreterVSRAM, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionA = self.params[1]
        self._namedParams.pionDepart = self.params[2]
        self._namedParams.fAmb = self.params[3]
    end,

    select = function( self )
                self.actionPreterVSRAM = self.actionPreterVSRAM or 0
        self.bFinManoeuvre = self.bFinManoeuvre or false
        if( self.bFinManoeuvre ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[//------------------------------------------------------------------------
]]--[[// Init
]]--[[//------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionPreterVSRAM = DEC_StartPreterVSRAM( self._namedParams.pionA, self._namedParams.pionDepart, self._namedParams.fAmb )
            actionCallbacks[ self.actionPreterVSRAM ] = function( arg ) self.bFinManoeuvre = arg end

        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionPreterVSRAM )
    end,

    destroy = function( self )
                DEC_StopAction( self.actionPreterVSRAM )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Misc_Pion_LOG_RecupererVSRAM
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Misc_Pion_LOG_RecupererVSRAM"
{
    feedbacks = { { { "done_ACT_Misc_Pion_LOG_RecupererVSRAM" }, "ACT_Misc_Pion_LOG_RecupererVSRAM" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_LOG_RecupererVSRAM, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionDe = self.params[1]
        self._namedParams.fAmb = self.params[2]
    end,

    select = function( self )
        DEC_RecupererVSRAM( self._namedParams.pionDe, self._namedParams.fAmb )
                self:SendFeedback( eActionEffectuee )
        Halt( self )
        do return end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Misc_Pion_LOG_PreterRemorqueurs
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Misc_Pion_LOG_PreterRemorqueurs"
{
    feedbacks = { { { "done_ACT_Misc_Pion_LOG_PreterRemorqueurs" }, "ACT_Misc_Pion_LOG_PreterRemorqueurs" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_LOG_PreterRemorqueurs, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionA = self.params[1]
        self._namedParams.pionDepart = self.params[2]
        self._namedParams.fAmb = self.params[3]
    end,

    select = function( self )
                self.actionPreterRemorqueurs = self.actionPreterRemorqueurs or 0
        self.bFinManoeuvre = self.bFinManoeuvre or false
        if( self.bFinManoeuvre ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[//------------------------------------------------------------------------
]]--[[// Init
]]--[[//------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionPreterRemorqueurs = DEC_StartPreterRemorqueurs( self._namedParams.pionA, self._namedParams.pionDepart, self._namedParams.fAmb )
            actionCallbacks[ self.actionPreterRemorqueurs ] = function( arg ) self.bFinManoeuvre = arg end

        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionPreterRemorqueurs )
    end,

    destroy = function( self )
                DEC_StopAction( self.actionPreterRemorqueurs )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Misc_Pion_LOG_RecupererRemorqueurs
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Misc_Pion_LOG_RecupererRemorqueurs"
{
    feedbacks = { { { "done_ACT_Misc_Pion_LOG_RecupererRemorqueurs" }, "ACT_Misc_Pion_LOG_RecupererRemorqueurs" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_LOG_RecupererRemorqueurs, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionDe = self.params[1]
        self._namedParams.fAmb = self.params[2]
    end,

    select = function( self )
        DEC_RecupererRemorqueurs( self._namedParams.pionDe, self._namedParams.fAmb )
                self:SendFeedback( eActionEffectuee )
        Halt( self )
        do return end

    end,

}


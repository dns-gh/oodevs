includedFiles = includedFiles or {}
includedFiles["sources/appui/appuimob/automates/missions/transporter/Transporter - CDT.bms"] = true

node "MIS_Automate_CDT_LOG_TransporterUnites"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eTransporter
        self.listeTransporteur = self.listeTransporteur or {}
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// ---------------------------------------------------------------------
]]--[[// 1. Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]--[[// liste des pions de l'automate ( gestion des sgroupements dynamiques )
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = DEC_Automate_PionsSansPC()
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( self.listePionsSgpt )
        --[[//liste des transporteurs
]]DIA_Clear( self.listeTransporteur )
        self.listeTransporteur = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_LOG_TransporterUnite" )
        --[[// ---------------------------------------------------------------------
]]--[[// Condition d'arret : si plus aucun pion n'a la mission Transporer
]]--[[// ---------------------------------------------------------------------
]]if( ( #( self.listeTransporteur ) == 0 or #( self.listeTransporteur ) == nil ) ) then
            do
                self.ePhase = eFinMission
                                do return end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporter then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    --[[//quand plus aucun pion n'a de mission
]]local plusDeMissions = true
                    for _,x in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                    local _continue = true
do
                            local pionBuffer = x
                            if( DEC_GetMission( pionBuffer ) ~= nil ) then
                                plusDeMissions = false
                            end

                        end

                    end

                    if( plusDeMissions ) then
                        self.params.__returnValue = eActionEffectuee
                        Halt( self )
                        do return end
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_LOG_TransporterUnites = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_TransporterUnites, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }

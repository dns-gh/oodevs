includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/pions/common/fonctions/Fonctions - Geometrie.bms"] = true


--[[//-------------------------------------------------------------------------
]]--[[// Fonction qui renvoie la zone de la liste passée en argument qui
]]--[[// contient le plus d'ennemi. On ajoute en plus la contrainte du fuseau
]]--[[//-------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// Cette fonction permet de renvoyer la localisation située avant la zone
]]--[[// ou se trouve le 1er echelon ennemi, dans l'ordre de la liste passée en
]]--[[// paramètre. Elle est utiliser dans la mission freiner.
]]--[[// -------------------------------------------------------------------------
]]--[[//si on n'a pas d'ennemi dans le fuseau, on renvoie la dernière zone
]]function S_Geometrie_Pion_ALAT_PositionLaMoinsDangereuse( pointA, pointB, rayon )
    local _returnValue = nil
    assert( ( pointA ~= 0 and pointA ~= nil ), "point non valide" )
    assert( ( pointB ~= 0 and pointB ~= nil ), "point non valide" )
    if( #( DEC_Connaissances_UnitesEnnemiesVivantesDansCercle( pointB, rayon ) ) >= #( DEC_Connaissances_UnitesEnnemiesVivantesDansCercle( pointA, rayon ) ) ) then
        _returnValue = pointA
    else
        _returnValue = pointB
    end

    do return _returnValue end
end

function S_Geometrie_Pion_ALAT_ZonePlusInterressanteDansFuseau( listeLocalisation )
    local _returnValue = nil
    assert( not DIA_IsListEmpty( listeLocalisation ), "Zone Plus Interressante : pas de liste" )
    local nbMax = 0
    local nbEnis = 0
    local meilleureZone = nil
    local listePionsATraiter = {}
    local listeUnitesEnnemiesVivantesDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
    if( DIA_IsListEmpty( listeUnitesEnnemiesVivantesDansFuseau ) ) then
        do
            _returnValue = meilleureZone
                        do return _returnValue end

        end
    end

    for _,x in pairs( listeLocalisation or {} ) do
    local _continue = true
do
            nbEnis = 0
            for _,y in pairs( listeUnitesEnnemiesVivantesDansFuseau or {} ) do
            local _continue = true
do
                    if( DEC_Geometrie_EstPointDansLocalisation( DEC_ConnaissanceAgent_Position( y ), x ) ) then
                                                nbEnis = nbEnis + 1
                    end

                end

            end

            if( nbEnis > nbMax ) then
                do
                    nbMax = nbEnis
                    meilleureZone = x
                end
            end

        end

    end

    _returnValue = meilleureZone
    do return _returnValue end
end

function S_Geometrie_Pion_ALAT_ZoneAvantPremierEchelonEnnemi( listeLocalisation )
    local _returnValue = nil
    assert( not DIA_IsListEmpty( listeLocalisation ), "Zone Plus Interressante : pas de liste" )
    local meilleureZoneAvantPremierEchelon = nil
    local listeUnitesEnnemiesVivantesDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
    meilleureZoneAvantPremierEchelon = DEC_UserTypeList_GetAt( listeLocalisation, 0 )
    for _,x in pairs( listeLocalisation or {} ) do
    local _continue = true
do
            for _,y in pairs( listeUnitesEnnemiesVivantesDansFuseau or {} ) do
            local _continue = true
do
                    if( DEC_Geometrie_EstPointDansLocalisation( DEC_ConnaissanceAgent_Position( y ), x ) ) then
                        do
                            _returnValue = meilleureZoneAvantPremierEchelon
                                                        do return _returnValue end

                        end
                    end

                end

            end

            meilleureZoneAvantPremierEchelon = x
        end

    end

    _returnValue = meilleureZoneAvantPremierEchelon
    do return _returnValue end
end


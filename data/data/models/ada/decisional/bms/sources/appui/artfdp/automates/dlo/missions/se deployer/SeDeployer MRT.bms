includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/dlo/missions/se deployer/SeDeployer MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_ASS_SeDeployer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ASS_SeDeployer"
{
    activations =
    {
        { "ACT_RC_Automate", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_AssignerSeDeployerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ Mission 'SeDeployer': starting MRT $" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[// RC
]]        end

        Activate( self.activations.ACT_RC_Automate, 1, { eRC_DebutMission, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                self.deselect = function() end
                self.destroy = function() end
                Halt()

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( DEC_Automate_PionsAvecPC() ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_AssignerSeDeployerA, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASS_SeDeployer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_SeDeployer, "ACT_RC_Automate", nodes.ACT_RC_Automate }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_SeDeployer, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_SeDeployer, "BEH_Medo_Automate_AssignerSeDeployerA", nodes.BEH_Medo_Automate_AssignerSeDeployerA }

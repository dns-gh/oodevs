includedFiles = includedFiles or {}
includedFiles["sources/appui/log/automates/Actions.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// ACT_Ordre_Automate_LOG_OrdresInopines
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Ordre_Automate_LOG_OrdresInopines"
{
    feedbacks = { { { "done_ACT_Ordre_Automate_LOG_OrdresInopines" }, "ACT_Ordre_Automate_LOG_OrdresInopines" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Ordre_Automate_LOG_OrdresInopines, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local repOrdre = x
                 do
                    local _continue = true
--[[//Gestion de la réception de l'ordre de conduite Poursuivre, ne concerne que les pions de type Convoi
]]                    local switch_1 = repOrdre:GetType()
                        if switch_1 == "Rep_OrderConduite_ModifierRegimeTravailMaintenance" then
                            local repOrderRegimeMaint = repOrdre
                            DEC_Maintenance_ChangerRegimeTravail( repOrderRegimeMaint:GetorderConduiteModifierRegimeTravailMaintenance_() )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_ModifierPrioritesReparations" then
                            local repOrdrePrioriteMain = repOrdre
                            DEC_Maintenance_ChangerPriorites( repOrdrePrioriteMain:GetorderConduiteModifierPrioritesReparations_() )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_ModifierPrioritesBlesses" then
                            local repOrdrePrioriteSan = repOrdre
                            DEC_Sante_ChangerPriorites( repOrdrePrioriteSan:GetorderConduiteModifierPrioritesBlesses_() )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_ModifierPrioritesTactiquesReparations" then
                            local repOrdrePrioriteMain = repOrdre
                            DEC_Maintenance_ChangerPrioritesTactiques( repOrdrePrioriteMain:GetorderConduiteModifierPrioritesTactiquesReparations_() )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_ModifierPrioritesTactiquesBlesses" then
                            local repOrdrePrioriteSan = repOrdre
                            DEC_Sante_ChangerPrioritesTactiques( repOrdrePrioriteSan:GetorderConduiteModifierPrioritesTactiquesBlesses_() )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Poursuivre" then
                            local selPions = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
                            for _,y in pairs( selPions or emptyTable ) do
                            local _continue = true
do
                                    local pion = y
                                    local mission = DEC_GetMission( pion )
                                    if( pion:GetType() == "PionConvoi" and mission ~= nil and mission:GetType() == "T_Mission_Pion_LOG_Convoyer" and F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhaseMission_AttentePoursuivre ) then
                                        do
                                            DEC_Trace( "Transfert ODC Poursuivre a pion " .. DEC_GetSzName( pion ) )
                                            DEC_CDT_DonneOrdreConduiteAPion( pion, eOrdreConduite_Poursuivre )
                                        end
                                    end

                                end

                            end

                            _continue = false
                                                end
                    end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.ACT_Ordre_Automate_LOG_OrdresInopines, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }

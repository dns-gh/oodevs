includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie blindee/missions/ouvrir itineraires/OuvrirItineraires - CDT.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_GEN_OuvrirAxesProgression
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_GEN_OuvrirItineraires"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "onHalt" } },
        { "ACT_Warning", { "onHalt" } },
        { "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_", { "onHalt" } },
        { "BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Automate_CDT_GEN_OuvrirItineraires" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )--[[//---------------------------------------------------------------------
]]--[[// Ordre conduite
]]--[[//---------------------------------------------------------------------
]]
        --[[//---------------------------------------------------------------------
]]--[[// Vérification des moyens
]]--[[//---------------------------------------------------------------------
]]local listePionsGenie = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        if( ( #( listePionsGenie ) == 0 or #( listePionsGenie ) == nil ) ) then
            do
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                return

            end
--[[//---------------------------------------------------------------------
]]--[[// Gestion deuxieme échelon
]]--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_, 1, {} )
        Activate( self.activations.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement, 1, {} )--[[//---------------------------------------------------------------------
]]--[[// Renforcement 
]]--[[//---------------------------------------------------------------------
]]
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe", { "onHalt" } },
        { "BEH_Objet_Automate_GEN_VerifierRenfortPourContourner", { "onHalt" } },
        { "BEH_Misc_Automate_GEN_GererRenforcementObstacle", { "onHalt" } },
        { "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement" } },

    create = function( self )
    end,

    activate = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Mettre à jour la liste des objets traités --> association à un 
]]--[[// T_ConnaissanceObjet_local
]]--[[//---------------------------------------------------------------------
]]        local listePionsGenie = S_ObtenirPionsOperationnelsFiltre( SectionGenie )
        for _,pion in pairs( listePionsGenie ) do
        local _continue = true
do
                --[[// cast
]]local section = pion
                if( section:GetobjMisEnCours_() ~= nil ) then
                    do
                        Activate( self.activations.BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe, 1, { section, section:GetobjMisEnCours_(), } )
                        Activate( self.activations.BEH_Objet_Automate_GEN_VerifierRenfortPourContourner, 1, { section:GetobjMisEnCours_(), } )
                    end
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les T_ConnaissanceObjet_local --> Assignation renforcement
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs ) do
        local _continue = true
do
                local objet = x
                local eValide = nil
                if( not DEC_Automate_PionPeutDetruireObjet( objet:Getpion_(), objet:Getobstacle_() ) ) then
                    --[[// idem franchir vive force
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstacle, 1, { objet, } )
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Rendre dispo les renforts si fin constrcution
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs ) do
        local _continue = true
do
                local objet = x
                --[[// spé
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle, 1, { objet, } )
            end

        end

    end,

    destroy = function( self )
                DIA_Clear( g_selConnaissanceObs )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle
]]--[[//
]]--[[// Commentaires: conditions de fin renforcement sont spé pour cette mission
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetABrecher = self.params[1]
    end,

    activate = function( self )
        --[[// Sécurité
]]if( ( ( self._namedParams.objetABrecher:GetpionRenforcement_() == 0 or self._namedParams.objetABrecher:GetpionRenforcement_() == nil ) or self._namedParams.objetABrecher:Getpion_() == 0 or ( self._namedParams.objetABrecher:GetpionRenforcement_() == 0 or self._namedParams.objetABrecher:GetpionRenforcement_() == nil ) or self._namedParams.objetABrecher:Getpion_() == nil ) ) then
            return
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Rendre le renforcement dispo si le pion liés à l'objet a fini son
]]--[[// ouverture
]]--[[//------------------------------------------------------------------------- 
]]--[[// Cast
]]local section = self._namedParams.objetABrecher:Getpion_()
        --[[// Fin brechage 
]]if( ( section:GetobjMisEnCours_() == 0 or section:GetobjMisEnCours_() == nil ) ) then
            --[[// --> REMISE A DIPSOSITION
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour, 1, { self._namedParams.objetABrecher:GetpionRenforcement_(), self._namedParams.objetABrecher, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour"
{
    activations =
    {
        { "ACT_Ordre_Automate_Interrompre", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objetABrecher = self.params[2]
    end,

    activate = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// A l'init...
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Remise a disposition de " .. DEC_GetSzName( self._namedParams.pion ) )
                Activate( self.activations.ACT_Ordre_Automate_Interrompre, 1, { self._namedParams.pion, } )
                --[[// --> REMISE A DIPSOSITION
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Second )
                DIA_Remove( g_selConnaissanceObs, self._namedParams.objetABrecher )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// ***************************************************************************** 
]]}

node "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe"
{
    feedbacks = { { { "onHalt" }, "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.repObjet = self.params[2]
    end,

    activate = function( self )
        self.genObs = self.genObs or DEC_CreerDIAThing( "T_ConnaissanceObjet_local" )
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// Propriétés de l'objet à brecher  --> reference pour renforcement
]]self.genObs:Setobstacle_( self._namedParams.repObjet )
                self.genObs:Setpion_( self._namedParams.pion )
                --[[// init plus tard
]]self.genObs:SetbEstRenforce_( false )
                --[[// init plus tard
]]self.genObs:SetpionRenforcement_( nil )
                DIA_PushFront( g_selConnaissanceObs, self.genObs )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivreLeSE_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_"
{
    activations =
    {
        { "BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_" } },

    create = function( self )
    end,

    activate = function( self )
        for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Gestion pions détruit
]]--[[//-----------------------------------------------------------------------------
]]DEC_Automate_PionsAvecPC() ) do
        local _continue = true
do
                --[[// cast
]]local pion = x
                if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                    F_Pion_SeteEtatEchelon( pion, eEtatEchelon_Second )
                end

            end
--[[// MIA ordre de suivre seulement au début et en fin de mission
]]
        end

        local pionsPE = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
        if( ModuleBegins() or S_Conduite_Pions_EtatMission( pionsPE, eEtatPhaseMission_FinMission ) == #( pionsPE ) ) then
            Activate( self.activations.BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre, 1, {} )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre" } },

    create = function( self )
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Gestion SE
]]--[[//-----------------------------------------------------------------------------
]]--[[// Ces listes peuvent évoluer...en fonction des destructions
]]local listePionsOperationnels = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsAvecPC() )
        local sel_PE = S_Cherche_Automate_Filtre_TypePionEchelon( listePionsOperationnels, "SectionGenie", eEtatEchelon_Premier )
        local sel_SE = S_ObtenirTousPionsDe( eEtatEchelon_Second )
        if( DIA_IsListEmpty( sel_PE ) or DIA_IsListEmpty( sel_SE ) ) then
            return
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation mission suivre
]]--[[//-----------------------------------------------------------------------------
]]local rIterateurPionASuivre = 0
        for _,x in pairs( sel_SE ) do
        local _continue = true
do
                local pion = x
                local pionPE = DIA_GetAt( sel_PE, rIterateurPionASuivre )
                Activate( self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, pion, pionPE, } )
                                rIterateurPionASuivre = rIterateurPionASuivre + 1
                if( rIterateurPionASuivre >= #( sel_PE ) ) then
                    --[[// revenir au premier élément de la liste de PE
]]rIterateurPionASuivre = 0
                end

            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_GEN_OuvrirItineraires = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_, "BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre", nodes.BEH_Conduite_Automate_GEN_OuvrirAxe_FaireSuivre }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle, "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstaclePour, "ACT_Ordre_Automate_Interrompre", nodes.ACT_Ordre_Automate_Interrompre }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement, "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe", nodes.BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement, "BEH_Objet_Automate_GEN_VerifierRenfortPourContourner", nodes.BEH_Objet_Automate_GEN_VerifierRenfortPourContourner }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement, "BEH_Misc_Automate_GEN_GererRenforcementObstacle", nodes.BEH_Misc_Automate_GEN_GererRenforcementObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement, "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_OuvrirItineraires, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_OuvrirItineraires, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_OuvrirItineraires, "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_", nodes.BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_OuvrirItineraires, "BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement", nodes.BEH_Mission_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcement }

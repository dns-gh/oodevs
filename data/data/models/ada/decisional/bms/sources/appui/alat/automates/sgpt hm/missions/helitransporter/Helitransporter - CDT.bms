includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/sgpt hm/missions/helitransporter/Helitransporter - CDT.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate Helitransporter :
]]--[[// -------------------------------------------------
]]--[[//
]]--[[// Ce que doit faire l'automate dans cette mission.
]]--[[//
]]--[[// - Gestion des ordres de conduite des subordonnés
]]--[[// - pas de gestion de l'étallement des pions
]]--[[//
]]--[[// Remarques : pas de coordination des unites qui transportent dans le cadre
]]--[[// de la mission hélitransporter.
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Helitransporter"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_Ordre_Suppression", {} },
        { "BEH_Medo_Automate_ALAT_HM_SynchroniserTransport", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe", {} },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", {} },
        { "BEH_ROE_Automate_TirRestreint", {} },
        { "BEH_Mission_Automate_AssignerStationnerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eTransporter
        self.listePionsEnCoursRavitaillement = self.listePionsEnCoursRavitaillement or {}
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeHM = self.listeHM or {}
        self.listeHeliporter = self.listeHeliporter or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.pointDeDebarquement = self.pointDeDebarquement or DEC_Geometrie_CreerPoint()
        self.listePionsAHeliporter = self.listePionsAHeliporter or {}
        self.listePourHeliportage = self.listePourHeliportage or {}
        self.helitransportInit = self.helitransportInit or false
        if( ModuleBegins() ) then
            do
                DEC_Copie_Point( self._namedParams.mission.pointDebarquement_, self.pointDeDebarquement )
                --[[//liste des pions que l'on va pouvoir transporter
]]self.listePionsAHeliporter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAHelitransporter_ )
                self.listePionsAHeliporter = S_Cherche_Automate_PionsOperationnels( self.listePionsAHeliporter )
                --[[// Si il n'y a aucune unité que l'on peut héliporter
]]if( DIA_IsListEmpty( self.listePionsAHeliporter ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()

                    end
                end

            end
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// -------------------------------------------------------
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// listes des pions HM Log
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        --[[// listes des pions HM
]]DIA_Clear( self.listeHM )
        self.listeHM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "TransportHelicopterPatrol" )
        if( DIA_IsListEmpty( self.listeHM ) ) then
            do
                DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                self.params.__returnValue = eActionImpossible
                self.deselect = function() end
                self.destroy = function() end
                Halt()

            end
--[[// liste des pions en cours de ravitaillement
]]        end

        DIA_Clear( self.listePionsEnCoursRavitaillement )
        self.listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        DIA_Clear( self.listePourHeliportage )
        --[[//il ne doit pas y avoir plus de HM que de pions à transporter
]]if( #( self.listeHM ) > #( self.listePionsAHeliporter ) ) then
            do
                --[[//on met autant de HM que de pions
]]local i = 0
                while i < #( self.listePionsAHeliporter ) do
                    local _continue = true
                    DIA_PushBack( self.listePourHeliportage, DIA_GetAt( self.listeHM, i ) )
                i = i + 1
                end

            end
        else
            self.listePourHeliportage = self.listeHM
        end

        --[[// liste des pions en cours de transport
]]DIA_Clear( self.listeHeliporter )
        self.listeHeliporter = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_Heliporter" )
        DIA_Clear( self.listePionsAAppuyerIMEX )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
        --[[// Gestion de l'ordre de conduite changer point de débarquement
]]--[[// ------------------------------------------------------------
]]local gestionCDTMissionsTransport = false
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus ) do
        local _continue = true
do
                local repOrdre = x
                if( repOrdre:GetType() == "Rep_OrderConduite_ChangerPositionDebarquement" ) then
                    do
                        gestionCDTMissionsTransport = true
                        local ordreParametresALAT = repOrdre
                        DEC_Copie_Point( ordreParametresALAT:GetorderConduiteChangerPositionDebarquement_(), self.pointDeDebarquement )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

        if( not DIA_IsListEmpty( self.listeHeliporter ) ) then
            self.helitransportInit = true
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporter then
                    if( self.helitransportInit and DIA_IsListEmpty( self.listeHeliporter ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        return

                        end
--[[// Synchronisation des unites qui ont la mission de transport.
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport, 1, { self.listeHeliporter, } )
                    --[[// CDT des missions d'héliportage
]]if( not DIA_IsListEmpty( self.listePourHeliportage ) and not gestionCDTMissionsTransport ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe, 1, { ePhase_CDT, self.listePourHeliportage, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.pointEmbarquement_, self.pointDeDebarquement, self._namedParams.mission.plotsRavitaillement_, self.listePionsAHeliporter, self._namedParams.mission.avecMateriel_, } )
                    end

                    --[[// ravitaillements et IMEX
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                    
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Helitransporter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Medo_Automate_ALAT_HM_SynchroniserTransport", nodes.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

includedFiles = includedFiles or {}
includedFiles["sources/appui/log/pions/missions/TraiterBlesses.bms"] = true

--[[// *****************************************************************************
]]--[[// T_Mission_Pion_LOG_TrierEtTraiter
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Review MIA
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_TraiterBlesses"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "BEH_Dep_ProgressionVers", { "onHalt" } },
        { "BEH_Pion_Log_Traiter", { "onHalt" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Pion_LOG_TraiterBlesses" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        if( ModuleBegins() ) then
            do
                DEC_Trace( "MIS_Pion_LOG_TraiterBlesses" )
                DEC_SetMission( myself, self._namedParams.mission )
                if( ( self._namedParams.mission.blessuresTraitees_ ~= 0 and self._namedParams.mission.blessuresTraitees_ ~= nil ) ) then
                    DEC_Sante_ChangerPriorites( self._namedParams.mission.blessuresTraitees_ )
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    --[[// Déploiement sur place
]]if( ( self._namedParams.mission.positionDeploiement_ == 0 or self._namedParams.mission.positionDeploiement_ == nil ) ) then
                        self.ePhaseMission = eDeployer
                    else
                        self.ePhaseMission = eProgresser
                    end

                    
                --[[// Progression
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eDeployer
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.mission.positionDeploiement_, eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// Deploiement
]]                cases_switch_1[2] = true
elseif switch_1 == eDeployer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    Activate( self.activations.BEH_Pion_Log_Traiter, 1, {} )
                    
                --[[// Fin de la mission (sur ordre)
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pion_Log_Traiter
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pion_Log_Traiter"
{
    activations =
    {
        { "ACT_Pions_SInstaller", { "onHalt" } },
        { "ACT_Pion_Log_ActiverFonctionSoin", { "onHalt" } },
        { "ACT_Pion_Log_DispositifInstalle", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Pion_Log_Traiter" } },

    create = function( self )
    end,

    activate = function( self )
        Activate( self.activations.ACT_Pions_SInstaller, 1, {} )
        if( DEC_Agent_EstInstalle() ) then
            do
                Activate( self.activations.ACT_Pion_Log_ActiverFonctionSoin, 1, {} )
                Activate( self.activations.ACT_Pion_Log_DispositifInstalle, 1, {} )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Pion_Log_ActiverFonctionSoin
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Pion_Log_ActiverFonctionSoin"
{
    feedbacks = { { { "onHalt" }, "ACT_Pion_Log_ActiverFonctionSoin" } },

    create = function( self )
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Sante_ActiverFonctionSoin()
        end

    end,

    deselect = function( self )
                DEC_Sante_DesactiverFonctionSoin()
    end,

    destroy = function( self )
                DEC_Sante_DesactiverFonctionSoin()
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_TraiterBlesses = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pion_Log_Traiter, "ACT_Pions_SInstaller", nodes.ACT_Pions_SInstaller }
connections[ #connections + 1 ] = { nodes.BEH_Pion_Log_Traiter, "ACT_Pion_Log_ActiverFonctionSoin", nodes.ACT_Pion_Log_ActiverFonctionSoin }
connections[ #connections + 1 ] = { nodes.BEH_Pion_Log_Traiter, "ACT_Pion_Log_DispositifInstalle", nodes.ACT_Pion_Log_DispositifInstalle }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TraiterBlesses, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TraiterBlesses, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TraiterBlesses, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TraiterBlesses, "BEH_Pion_Log_Traiter", nodes.BEH_Pion_Log_Traiter }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TraiterBlesses, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

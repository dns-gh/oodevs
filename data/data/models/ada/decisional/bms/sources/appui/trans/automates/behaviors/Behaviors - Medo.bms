includedFiles = includedFiles or {}
includedFiles["sources/appui/trans/automates/behaviors/Behaviors - Medo.bms"] = true

include "bit.lua"


include "Appui/Trans/Automates/Actions/Actions - Medo.bms"


--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ControleCreationMission()
]]--[[//
]]--[[// Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ControleCreationMission"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rN_Pion = self.params[1]
    end,

    activate = function( self )
        self.eAction_EnCours = self.eAction_EnCours or eActionEnCours
        self.eAction_NOK = self.eAction_NOK or eActionEnCours
        self.eAction_OK = self.eAction_OK or eActionEnCours
        if( self.eAction_NOK == eActionHalt ) then
            self.params.__returnValue = eActionImpossible
            return
        end

        if( ( self.eAction_OK == eActionEffectuee ) or ( ( self._namedParams.rN_Pion == 0 or self._namedParams.rN_Pion == nil ) ) ) then
            self.params.__returnValue = eActionEffectuee
            Halt()
        end

        Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction_EnCours = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, self._namedParams.rN_Pion, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction_OK = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction_NOK = v else rawset( t, k, v ) end end } ) )
    end,

--[[//-----------------------------------------------------------------------------
]]--[[// TRANS
]]--[[//-----------------------------------------------------------------------------
]]--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonAListe
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonAListe"
{
    activations =
    {
        { "BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.position = self.params[3]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions ) do
                local _continue = true
                    StartActivate( self.activations.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, 1, { self._namedParams.ePhase, x, self._namedParams.position, } )

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Mission_Automate_AssignerFaireMouvementSurItA
]]--[[// 
]]--[[// Commentaires: Pour suivre un itineraire
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerFaireMouvementSurItA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_AssignerFaireMouvementSurItA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.itineraire = self.params[3]
    end,

    activate = function( self )
        do
        end

        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        return

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        return

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_AssignerFaireMouvementSurItA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.itineraire, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.position = self.params[3]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        return

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        return

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.position, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Mission_Automate_AssignerFaireMouvementA
]]--[[// 
]]--[[// Commentaires: Pour aller vers un point
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerFaireMouvementA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_AssignerFaireMouvementA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.dest = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        return

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        return

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_AssignerFaireMouvementA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.dest, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_AssignerSeFaireTransporterA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerSeFaireTransporterA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_AssignerSeFaireTransporterA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ptHeli = self.params[3]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        return

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        return

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_AssignerSeFaireTransporterA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.ptHeli, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ControleCreationMission, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ControleCreationMission, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ControleCreationMission, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementA, "ACT_Mission_Automate_AssignerFaireMouvementA", nodes.ACT_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA, "ACT_Mission_Automate_AssignerFaireMouvementSurItA", nodes.ACT_Mission_Automate_AssignerFaireMouvementSurItA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerSeFaireTransporterA, "ACT_Mission_Automate_AssignerSeFaireTransporterA", nodes.ACT_Mission_Automate_AssignerSeFaireTransporterA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA, "ACT_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA", nodes.ACT_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonAListe, "BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA", nodes.BEH_Mission_Automate_TRANS_AssignerEtablirGererLiaisonA }

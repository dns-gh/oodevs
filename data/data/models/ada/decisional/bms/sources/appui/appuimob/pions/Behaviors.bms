includedFiles = includedFiles or {}
includedFiles["sources/appui/appuimob/pions/Behaviors.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: SDE 02-11-22 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/AppuiMob/Pions/Behaviors.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 16:20 $
]]--[[// $Revision: 19 $
]]--[[// $Workfile: Behaviors.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// Paramètres généraux
]]--[[// -------------------
]]use_priority = no

max_instances = 100

max_activations = 100


actuators = {
silenceradio = 1,
installation = 1,
etat_OrdreCoordination = 1,
deplacement = 1,
debarquement = 1,
tir = 1,
vitesse = 1,
observation = 1,
obstacle = 1,
reconnaissance = 1,
etat_Dec = 1,
etat_Lima = 1,
etat_Destruction = 1,
ennemi = 1,
etat_Mission = 1,
objectifEsquive = 1,
controlePopulation = 1,
etat_ROE = 1,
transporter = 1,
}


include "Common/Pions/Behaviors.bms"


--[[// Embarquement (apres heliportage)
]]include "Common/Pions/Behaviors/Behaviors - Embarquement.bms"


--[[//missions génériques
]]include "Common/Pions/MissionsGeneriques.bms"


include "Appui/AppuiMob/Pions/Actions.bms"

include "Appui/AppuiMob/Pions/Missions/Missions.bms"


--[[// *****************************************************************************
]]--[[// Comportement par défaut contrôlé par le moteur PHY
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Defaut"
{
    feedbacks = { { { "done_BEH_Defaut" }, "BEH_Defaut" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Defaut, {value} ) end,
    activations =
    {
        { "BEH_MAJ_EtatDefaut", { "done_BEH_MAJ_EtatDefaut" } },
        { "BEH_Mot_AffecterVariablesDEtat", { "done_BEH_Mot_AffecterVariablesDEtat" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "BEH_Ambiance", { "done_BEH_Ambiance" } },
        { "BEH_Nbc", { "done_BEH_Nbc" } },
        { "BEH_ROE", { "done_BEH_ROE" } },
        { "BEH_Ordre_Pion_LOG_OrdresInopines", { "done_BEH_Ordre_Pion_LOG_OrdresInopines" } },
        { "BEH_Rens_PasserEnSilenceRadioPartiel", { "done_BEH_Rens_PasserEnSilenceRadioPartiel" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.nDummy = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_GetMission( myself ) == nil ) then
            do
                F_Pion_SeteEtatPhaseMission( myself, eEtatPhaseMission_None )
                F_Pion_SetbOrdreInterrompreMission( myself, false )
            end
--[[// ---------------------------------------------------------------------
]]--[[// MAJ de l'état DEC par défaut
]]--[[// ---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_MAJ_EtatDefaut, 1, emptyTable )
        Activate( self.activations.BEH_Mot_AffecterVariablesDEtat, 1, emptyTable )--[[// ------------------------------------------------------------------------
]]--[[// MAJ VE
]]--[[// ------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, emptyTable )
        Activate( self.activations.BEH_Ambiance, 1, emptyTable )--[[// ---------------------------------------------------------------------
]]--[[// Comp générique
]]--[[// ---------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Nbc, 1, emptyTable )
        Activate( self.activations.BEH_ROE, 1, emptyTable )
        Activate( self.activations.BEH_Ordre_Pion_LOG_OrdresInopines, 1, emptyTable )
        Activate( self.activations.BEH_Rens_PasserEnSilenceRadioPartiel, 1, emptyTable )
    end,

}

node "BEH_Mot_AffecterVariablesDEtat"
{
    feedbacks = { { { "done_BEH_Mot_AffecterVariablesDEtat" }, "BEH_Mot_AffecterVariablesDEtat" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mot_AffecterVariablesDEtat, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[//////////////// BMS OPTIM  ///////////////////
]]        if( F_Pion_GeteEtatDec( myself ) == eEtatDec_Sauvegarde ) then
            do return end
        end

         do
            local _continue = true
--[[////////////// FIN OPTIM  /////////////////////
]]--[[//-----------------------------------------------------------------------------
]]--[[// En fonction du moral...
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fanatique --> esquive sur PAP, pas de ralentissement
]]--[[//-----------------------------------------------------------------------------
]]--[[// Rien
]]--[[//-----------------------------------------------------------------------------
]]--[[// Moral bon --> esquive sur PAP et effet rapFor défavorable --> ralentissement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En fonction de la mission...  --> idem moral mauvais
]]--[[//-----------------------------------------------------------------------------
]]--[[// Par défaut ...
]]--[[//-----------------------------------------------------------------------------
]]--[[// Moral mauvais: --> esquive sur PAP et sur rapFor défavorable
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = DEC_FacteurHumain_Moral()
                if switch_1 == eMoral_Fanatique then
                    SetStateVariable( "VE_RapFor", 0 )
                    _continue = false
                elseif switch_1 == eMoral_Moyen
                or switch_1 == eMoral_Bon then
                    if( DEC_GetMission( myself ) == nil ) then
                        do
                            SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                            _continue = false
                        end
                    end

                        if _continue then
                        SetStateVariable( "VE_RapFor", 0 )
                        _continue = false
                    end
                elseif switch_1 == eMoral_Mauvais then
                    SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                    _continue = false
                                end
            end

    end,

    destroy = function( self )
                SetStateVariable( "VE_RapFor", 0 )
    end,

--[[////////////////////////////// PARTIE COMPORTEMENTS VIRTUELS /////////////////////////////////////////////////////
]]--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_ProgressionVers
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Virtuel_ProgressionVers"
{
    feedbacks = { { { "done_BEH_Dep_Virtuel_ProgressionVers" }, "BEH_Dep_Virtuel_ProgressionVers" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Virtuel_ProgressionVers, {value} ) end,
    activations =
    {
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.point = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.point, self._namedParams.eTypeProgression, self._namedParams.eTypeIti, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_PreparationAction
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Virtuel_PreparationAction"
{
    feedbacks = { { { "done_BEH_Dep_Virtuel_PreparationAction" }, "BEH_Dep_Virtuel_PreparationAction" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Virtuel_PreparationAction, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self:SendFeedback( eActionEffectuee )
        do return end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Pion_LOG_OrdresInopines
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Pion_LOG_OrdresInopines"
{
    feedbacks = { { { "done_BEH_Ordre_Pion_LOG_OrdresInopines" }, "BEH_Ordre_Pion_LOG_OrdresInopines" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Pion_LOG_OrdresInopines, {value} ) end,
    activations =
    {
        { "ACT_Misc_Pion_LOG_PreterRemorqueurs", { "done_ACT_Misc_Pion_LOG_PreterRemorqueurs" } },
        { "ACT_Misc_Pion_LOG_RecupererRemorqueurs", { "done_ACT_Misc_Pion_LOG_RecupererRemorqueurs" } },
        { "ACT_Misc_Pion_LOG_PreterVSRAM", { "done_ACT_Misc_Pion_LOG_PreterVSRAM" } },
        { "ACT_Misc_Pion_LOG_RecupererVSRAM", { "done_ACT_Misc_Pion_LOG_RecupererVSRAM" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local ordre = x
                local repOrdre = ordre
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                        if switch_1 == "Rep_OrderConduite_Pion_RenforcerEnRemorqueurs" then
                            local repOrdreRenforcer = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_PreterRemorqueurs, 1, { repOrdreRenforcer:GetpionARenforcer_(), myself, repOrdreRenforcer:GetnbrRemorqueurs_(), } )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Pion_TransfererRemorqueurs" then
                            local repOrdreTransferer = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_RecupererRemorqueurs, 1, { repOrdreTransferer:GetpionRenforce_(), repOrdreTransferer:GetnbrRemorqueurs_(), } )
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_PreterRemorqueurs, 1, { repOrdreTransferer:GetpionARenforcer_(), repOrdreTransferer:GetpionRenforce_(), repOrdreTransferer:GetnbrRemorqueurs_(), } )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Pion_ReprendreAuxOrdresRemorqueurs" then
                            local repOrdreReprendre = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_RecupererRemorqueurs, 1, { repOrdreReprendre:GetpionRenforce_(), repOrdreReprendre:GetnbrRemorqueurs_(), } )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Pion_RenforcerEnVSRAM" then
                            local repOrdreRenforcer = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_PreterVSRAM, 1, { repOrdreRenforcer:GetpionARenforcer_(), myself, repOrdreRenforcer:GetnbrAmbulances_(), } )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Pion_TransfererVSRAM" then
                            local repOrdreTransferer = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_RecupererVSRAM, 1, { repOrdreTransferer:GetpionRenforce_(), repOrdreTransferer:GetnbrAmbulances_(), } )
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_PreterVSRAM, 1, { repOrdreTransferer:GetpionARenforcer_(), repOrdreTransferer:GetpionRenforce_(), repOrdreTransferer:GetnbrAmbulances_(), } )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Pion_ReprendreAuxOrdresVSRAM" then
                            local repOrdreReprendre = ordre
                            StartActivateOverride( self, self.activations.ACT_Misc_Pion_LOG_RecupererVSRAM, 1, { repOrdreReprendre:GetpionRenforce_(), repOrdreReprendre:GetnbrAmbulances_(), } )
                            _continue = false
                        
                        else
                            _continue = false
                                                end
                    end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_MAJ_EtatDefaut", nodes.BEH_MAJ_EtatDefaut }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_AffecterVariablesDEtat", nodes.BEH_Mot_AffecterVariablesDEtat }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ambiance", nodes.BEH_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Nbc", nodes.BEH_Nbc }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_ROE", nodes.BEH_ROE }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ordre_Pion_LOG_OrdresInopines", nodes.BEH_Ordre_Pion_LOG_OrdresInopines }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Rens_PasserEnSilenceRadioPartiel", nodes.BEH_Rens_PasserEnSilenceRadioPartiel }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Virtuel_ProgressionVers, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Misc_Pion_LOG_PreterRemorqueurs", nodes.ACT_Misc_Pion_LOG_PreterRemorqueurs }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Misc_Pion_LOG_RecupererRemorqueurs", nodes.ACT_Misc_Pion_LOG_RecupererRemorqueurs }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Misc_Pion_LOG_PreterVSRAM", nodes.ACT_Misc_Pion_LOG_PreterVSRAM }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Misc_Pion_LOG_RecupererVSRAM", nodes.ACT_Misc_Pion_LOG_RecupererVSRAM }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_LOG_OrdresInopines, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }

includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/attaquer une formation aeromobile/Attaquer une Formation Aeromobile - MRT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Attaquer une formation Aeromobile
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile"
{
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", {} },
        { "BEH_Ordre_Automate_Poursuivre_", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsAttaquer = self.eEtatMissionsAttaquer or eActionEnCours
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeHAC = self.listeHAC or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, AntitankHelicopterPatrol )
        self.listeHAP = self.listeHAP or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, EscortAndCloseSupportHelicopterPatrol )
        self.listePionsReserve = self.listePionsReserve or {}
        self.listeAttaquer = self.listeAttaquer or S_Liste_Concatene( self.listeHAP, self.listeHAC )
        if( ModuleBegins() ) then
            do
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listeAttaquer ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
--[[// ROE par défaut pour cette mission + ordre poursuivre
]]                end

                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, {} )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
            end
--[[// ---------------------------------------------------------------------
]]--[[// 2. Decoupage du fuseau et attribution des missions
]]--[[// ---------------------------------------------------------------------                       
]]        end

        switch_1 = self.ePhase
            if switch_1 == eMRT_AssignerMissions then
                --[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionsAttaquer == eActionImpossible ) then
                    do
                        self.ePhase = eMRT_MissionImpossible
                                                return

                    end
                end

                if( self.eEtatMissionsAttaquer == eActionEffectuee ) then
                    do
                        self.ePhase = eMRT_Valider
                                                return

                    end
--[[// Attaquer : controle de creation mission
]]                end

                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.listeAttaquer ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatMissionsAttaquer = v else rawset( t, k, v ) end end } ) )
                --[[// Attaquer Aeromobile : ordre de creation des missions
]]if( not DIA_IsListEmpty( self.listeAttaquer ) ) then
                    Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe, 1, { ePhase_MRT, self.listeAttaquer, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.unitesAAttaquer_, } )
                end

                
            --[[//-----------------------------------------------------------------------------
]]--[[// 3. Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]elseif switch_1 == eMRT_MissionImpossible then
                DEC_RC( eRC_MissionImpossible )
                                self.params.__returnValue = eActionImpossible
                Halt()

            --[[//---------------------------------------------------------------------
]]--[[// 3. Validation
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_Valider then
                DEC_MRT_Valide()
                                self.params.__returnValue = eActionEffectuee
                Halt()

                        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/section ratac/missions/acquerirobjectifs/AcquerirObjectifs MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Section RATAC/Missions/AcquerirObjectifs/AcquerirObjectifs MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 26/08/05 17:57 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: AcquerirObjectifs MRT.hal $
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_Stationner
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ASS_AcquerirObjectifs"
{
    activations =
    {
        { "ACT_RC_Automate", {} },
        { "BEH_Medo_Automate_PreparerMission_AcquerirObjectifs", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ Mission 'SeDeployer': starting MRT $" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[// RC
]]        end

        Activate( self.activations.ACT_RC_Automate, 1, { eRC_DebutMission, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt()

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_PreparerMission_AcquerirObjectifs, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
    end,

}

node "BEH_Medo_Automate_PreparerMission_AcquerirObjectifs"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_ASS_AcquerirObjectifs", {} },
        { "BEH_Medo_Automate_ASS_AssignerMission_PC", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.selPions_ASS_RATAC = self.selPions_ASS_RATAC or {}
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Number of units : " .. FloatToString( #( self.selPions ) ) )
            end
        end

        switch_1 = self.ePhase
            if switch_1 == eMRT_SelectionnerPions then
                --[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------						
]]--[[// L'execution de la mission necessite la presence d'un 1er ech
]]self.selPions_ASS_RATAC = S_Cherche_Automate_Filtre_TypePion( self.selPions, GroupeASS_RATAC )
                if( ( #( self.selPions_ASS_RATAC ) == 0 or #( self.selPions_ASS_RATAC ) == nil ) ) then
                    do
                        DEC_Trace( "First echelon is empty" )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                self.ePhase = eMRT_AssignerMissions
                
            elseif switch_1 == eMRT_AssignerMissions then
                --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]--[[// On verifie juste que la batterie peut effectuer la mission
]]--[[// if(  eActionMRT == eActionImpossible)    {         {}         halt(eActionImpossible);    }
]]if( self.eValidationMRT == eActionImpossible ) then
                    do
                                                do
                            DEC_Trace( "eValidationMRT == eActionImpossible" )
                        end

                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                if( self.eValidationMRT == eActionEffectuee ) then
                    do
                        self.eValidationMRT = eActionEnCours
                                                do
                                                        self.params.__returnValue = eActionEffectuee
                            Halt()

                        end

                    end
                end

                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selPions_ASS_RATAC ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
                Activate( self.activations.BEH_Medo_Automate_ASS_AcquerirObjectifs, 1, setmetatable( { self.selPions_ASS_RATAC, self.mission.zonesAObserver_, self.mission.positionsDeploiement_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionMRT = v else rawset( t, k, v ) end end } ) )
                --[[// Assigne la mission au pc
]]Activate( self.activations.BEH_Medo_Automate_ASS_AssignerMission_PC, 1, { self.selPions_ASS_RATAC, } )
                
                        end

    end,

}

node "BEH_Medo_Automate_ASS_AcquerirObjectifs"
{
    activations =
    {
        { "BEH_Mission_Automate_ASS_AcquerirObjectifsA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.lstLocObservation = self.params[2]
        self._namedParams.lstPtDeploiement = self.params[3]
    end,

    activate = function( self )
        self.lstPtTmp = self.lstPtTmp or DEC_Geometrie_CreerListePoints()
        self.lstPtZone = self.lstPtZone or DEC_Geometrie_CreerListePoints()
        if( ModuleBegins() ) then
            do
                DEC_Copie_ListePoints( self._namedParams.lstPtDeploiement, self.lstPtTmp )
                local rIt_Pion = 0
                for _,x_loc in pairs( self._namedParams.lstLocObservation ) do
                local _continue = true
                    do
                        local pion = DIA_GetAt( self._namedParams.selPions, rIt_Pion )
                                                rIt_Pion = rIt_Pion + 1
                        local ptZone = S_Geometrie_BarycentreZone( x_loc )
                        local ptDeploiement = S_Misc_Automate_ASS_ExtraitPoint_ProchePosition( self.lstPtTmp, ptZone )
                        DEC_ListePoints_PushBack( self.lstPtZone, ptZone )
                        StartActivate( self.activations.BEH_Mission_Automate_ASS_AcquerirObjectifsA, 1, { ePhase_MRT, pion, ptDeploiement, x_loc, } )
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASS_AcquerirObjectifs = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ASS_AcquerirObjectifs, "BEH_Mission_Automate_ASS_AcquerirObjectifsA", nodes.BEH_Mission_Automate_ASS_AcquerirObjectifsA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_AcquerirObjectifs, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_AcquerirObjectifs, "BEH_Medo_Automate_ASS_AcquerirObjectifs", nodes.BEH_Medo_Automate_ASS_AcquerirObjectifs }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_AcquerirObjectifs, "BEH_Medo_Automate_ASS_AssignerMission_PC", nodes.BEH_Medo_Automate_ASS_AssignerMission_PC }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_AcquerirObjectifs, "ACT_RC_Automate", nodes.ACT_RC_Automate }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_AcquerirObjectifs, "BEH_Medo_Automate_PreparerMission_AcquerirObjectifs", nodes.BEH_Medo_Automate_PreparerMission_AcquerirObjectifs }

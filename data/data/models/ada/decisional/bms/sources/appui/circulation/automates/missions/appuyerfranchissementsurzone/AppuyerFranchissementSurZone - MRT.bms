includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/automates/missions/appuyerfranchissementsurzone/AppuyerFranchissementSurZone - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe", {} },
        { "BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local selPions = S_Cherche_Automate_Filtre_TypePionOperationnels( DEC_Automate_PionsAvecPC(), "PatrouilleCirculation" )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionAppuyer = self.eEtatMissionAppuyer or eActionEnCours
        self.listobj = self.listobj or DEC_Connaissances_ObjetsDansZone( self._namedParams.mission.zone_, S_TypeObject_ToString( eTypeObjectSiteFranchissement ) )
        self.pion = self.pion or nil
        self.listePionsPourMission = self.listePionsPourMission or {}
        --[[//---------------------------------------------------------------------
]]--[[// Mission impossible si pas d'objets
]]--[[//---------------------------------------------------------------------
]]if( ( #( self.listobj ) == 0 or #( self.listobj ) == nil ) ) then
            self.ePhase = eMRT_MissionImpossible
        end

        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,x in pairs( selPions ) do
                local _continue = true
                    do
                        local pionBuffer = x
                        if( F_Pion_GeteEtatDestruction( pionBuffer ) == eEtatDestruction_None ) then
                            self.pion = x
                        end

                    end

                end

                if( self.pion ~= nil ) then
                    DIA_PushBack( self.listePionsPourMission, self.pion )
                else
                    self.ePhase = eMRT_MissionImpossible
                end

                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[//
]]--[[// =============================================================================
]]        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionAppuyer == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionAppuyer == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[//liste des pions qui ne sont pas dans la liste "listePionsPourMission"
]]                    end

                    local listePourRenforcement = S_Cherche_Automate_Filtre_PionNonDansListe( selPions, self.listePionsPourMission )
                    --[[// controle de creation des missions de construction de zone à mobilité améliorée
]]Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.listePionsPourMission ) + #( listePourRenforcement ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatMissionAppuyer = v else rawset( t, k, v ) end end } ) )
                    --[[// ordre de creation des missions
]]if( ( #( self.listePionsPourMission ) ~= 0 and #( self.listePionsPourMission ) ~= nil ) ) then
                        Activate( self.activations.BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe, 1, { ePhase_MRT, self.listePionsPourMission, self.listobj, } )
                    end

                    --[[// ordre de création des missions de renforcement
]]if( ( #( listePourRenforcement ) ~= 0 and #( listePourRenforcement ) ~= nil ) ) then
                        Activate( self.activations.BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe, 1, { ePhase_MRT, listePourRenforcement, self.pion, } )
                    end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_RC( eRC_MissionImpossible )
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                    _continue = false
                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone, "BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe", nodes.BEH_Medo_Automate_CIRCU_AssignerMissionsAppuyerFranchissementSurUnPointAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_AppuyerFranchissementDansZone, "BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe", nodes.BEH_Medo_Automate_CIRCU_AssignerMissionsRenforcerAListe }

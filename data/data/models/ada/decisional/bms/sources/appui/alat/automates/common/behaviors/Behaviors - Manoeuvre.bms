includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/behaviors/Behaviors - Manoeuvre.bms"] = true

--[[//------------------------------------------------------------------------------
]]--[[// Ce comportement permet de gerer l'etalement du dispositif afin d'eviter tout
]]--[[// moyen d'infiltration par l'ennemi
]]--[[//
]]--[[// Commentaires : Il s'agit pour l'automate de coordonnée le groupe, en disant
]]--[[// aux pions de se rapprocher quand ils sont trop loin
]]--[[//------------------------------------------------------------------------------
]]node "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif"
{
    feedbacks = { { { "done_BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif" }, "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.distance = self.params[2]
    end,

    activate = function( self )
                local listePionsCopie = self._namedParams.listePions
        local directionGroupe = nil
        local listeDirectionsPions = {}
        local pionBuffer = nil
        for _,x in pairs( --[[//determination de la direction globale du groupe en fonction des objectifs
]]--[[//des pions subordonnes
]]self._namedParams.listePions or {} ) do
        local _continue = true
do
                if( not S_EstPatrouilleALAT( x ) ) then
                    _continue = false
                end

                    if _continue then
                    pionBuffer = x
                    if( pionBuffer:GetobjectifCourant_() == nil ) then
                        _continue = false
                    end

                        if _continue then
                        local directionPion = DEC_Geometrie_CreerDirection( DEC_Automate_PionPosition( x ), pionBuffer:GetobjectifCourant_() )
                        if( directionPion ~= nil ) then
                            DEC_UserTypeList_PushBack( listeDirectionsPions, directionPion )
                        end

                    end
                end
            end

        end

        if( DIA_IsListEmpty( listeDirectionsPions ) ) then
            do return end
        end

        directionGroupe = DEC_Geometrie_DirectionMoyenne( listeDirectionsPions )
        if( ( directionGroupe == 0 or directionGroupe == nil ) ) then
            do return end
        end

        for _,x in pairs( self._namedParams.listePions or {} ) do
        local _continue = true
do
                if( not S_EstPatrouilleALAT( x ) ) then
                    _continue = false
                end

                    if _continue then
                    pionBuffer = x
                    pionBuffer:ClearlistePionsCoordination_()
                    local listePionsBuffer = DEC_Geometrie_PionEstCoordonne( x, S_Liste_Automate_ALAT_PionsNonEnCoursRavitaillement( self._namedParams.listePions ), self._namedParams.distance )
                    for _,y in pairs( listePionsBuffer or {} ) do
                    local _continue = true
do
                            local comparePions = {}
                            DIA_PushBack( comparePions, x )
                            DIA_PushBack( comparePions, y )
                            local pionDevant = DEC_Geometrie_PionDevant( comparePions, directionGroupe )
                            --[[//si x est devant, alors, il doit attendre
]]if( pionDevant == x ) then
                                DIA_PushBack( pionBuffer:GetlistePionsCoordination_(), y )
                            end

                        end

                    end

                    listePionsBuffer = {}
                end
            end

        end

    end,

    destroy = function( self )
                local pionBuffer = nil
        for _,x in pairs( self._namedParams.listePions or {} ) do
        local _continue = true
do
                if( not S_EstPatrouilleALAT( x ) ) then
                    _continue = false
                end

                    if _continue then
                    pionBuffer = x
                    pionBuffer:ClearlistePionsCoordination_()
                end
            end

        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Gerer les Releves au niveau automate
]]--[[//
]]--[[// Commentaires : 
]]--[[//      -releve des pions détruits par n'importe qu'elle unité qui le peut
]]--[[//      -releve ravitaillement par les unités qui ne sont pas en cours de rav.
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Manoeuvre_Automate_ALAT_GererReleves"
{
    feedbacks = { { { "done_BEH_Manoeuvre_Automate_ALAT_GererReleves" }, "BEH_Manoeuvre_Automate_ALAT_GererReleves" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Manoeuvre_Automate_ALAT_GererReleves, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ALAT_AssignerReleve", { "done_BEH_Dispositif_Automate_ALAT_AssignerReleve" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.listePionsPourReleve = self.params[2]
    end,

    activate = function( self )
        self.listePionsQuiSeSontFaitRelever = self.listePionsQuiSeSontFaitRelever or {}
        local sPionsDetruits = S_Liste_Automate_ALAT_PionsNonOperationnels( self._namedParams.listePions )
        local sPionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self._namedParams.listePions )
        local sListePionsPartiRelever = {}
        local sListePionsApresReleveSurDestruction = {}
        self.listePionsQuiSeSontFaitRelever = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsQuiSeSontFaitRelever, sPionsDetruits )
        self.listePionsQuiSeSontFaitRelever = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsQuiSeSontFaitRelever, sPionsEnCoursRavitaillement )
        for _,x in pairs( --[[//--------------------------------------------------------------------------
]]--[[// Relever les pions qui sont detruits même si en cours de ravitaillement
]]--[[//--------------------------------------------------------------------------
]]sPionsDetruits or {} ) do
        local _continue = true
do
                for _,y in pairs( self._namedParams.listePionsPourReleve or {} ) do
                local _continue = true
do
                        if( not DEC_Automate_PionPeutReleverPion( y, x ) ) then
                            _continue = false
                        end

                            if _continue then
                            if( DIA_Contains( self.listePionsQuiSeSontFaitRelever, x ) ) then
                                _continue = false
                            end

                                if _continue then
                                Activate( self.activations.BEH_Dispositif_Automate_ALAT_AssignerReleve, 1, { y, x, } )
                                DIA_PushBack( self.listePionsQuiSeSontFaitRelever, x )
                                DIA_PushBack( sListePionsPartiRelever, y )
                            end
                        end
                    end

                end

            end

        end

        sListePionsApresReleveSurDestruction = S_Cherche_Automate_Filtre_PionNonDansListe( self._namedParams.listePionsPourReleve, sListePionsPartiRelever )
        for _,x in pairs( --[[//--------------------------------------------------------------------------
]]--[[// Relever les pions qui sont en Cours de ravitaillement
]]--[[//--------------------------------------------------------------------------
]]sPionsEnCoursRavitaillement or {} ) do
        local _continue = true
do
                for _,y in pairs( sListePionsApresReleveSurDestruction or {} ) do
                local _continue = true
do
                        if( S_EstPatrouilleALAT( y ) ) then
                            do
                                local pionAlat = y
                                if( pionAlat:GetbEnPhaseRavitaillement_() ) then
                                    _continue = false
                                end

                            end
                        end

                            if _continue then
                            if( not DEC_Automate_PionPeutReleverPion( y, x ) ) then
                                _continue = false
                            end

                                if _continue then
                                if( DIA_Contains( self.listePionsQuiSeSontFaitRelever, x ) ) then
                                    _continue = false
                                end

                                    if _continue then
                                    Activate( self.activations.BEH_Dispositif_Automate_ALAT_AssignerReleve, 1, { y, x, } )
                                    DIA_PushBack( self.listePionsQuiSeSontFaitRelever, x )
                                end
                            end
                        end
                    end

                end

            end

        end

    end,

--[[//------------------------------------------------------------------------------
]]--[[// Assigner Releve
]]--[[//
]]--[[// Commentaires: quand on fait une releve, on ne doit surtout pas aller se
]]--[[// ravitailler en début de mission
]]--[[//
]]--[[// la mission sera réelement executée au tic suivant.
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dispositif_Automate_ALAT_AssignerReleve"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ALAT_AssignerReleve" }, "BEH_Dispositif_Automate_ALAT_AssignerReleve" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ALAT_AssignerReleve, {value} ) end,
    activations =
    {
        { "ACT_Conduite_Automate_ALAT_ReleverUnite", { "done_ACT_Conduite_Automate_ALAT_ReleverUnite" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionEnSoutien = self.params[1]
        self._namedParams.pionEnDifficulte = self.params[2]
    end,

    activate = function( self )
        self.pionPeutRelever = self.pionPeutRelever or false
        if( ModuleBegins() ) then
            do
                if( S_EstPatrouilleALAT( self._namedParams.pionEnSoutien ) ) then
local pionAlat = self._namedParams.pionEnSoutien                end

                Activate( self.activations.ACT_Conduite_Automate_ALAT_ReleverUnite, 1, { self._namedParams.pionEnSoutien, self._namedParams.pionEnDifficulte, } )
            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ALAT_AssignerReleve, "ACT_Conduite_Automate_ALAT_ReleverUnite", nodes.ACT_Conduite_Automate_ALAT_ReleverUnite }
connections[ #connections + 1 ] = { nodes.BEH_Manoeuvre_Automate_ALAT_GererReleves, "BEH_Dispositif_Automate_ALAT_AssignerReleve", nodes.BEH_Dispositif_Automate_ALAT_AssignerReleve }

includedFiles = includedFiles or {}
includedFiles["sources/appui/nbc/pions/common/Behaviors.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 02-11-08 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/Nbc/Pions/Common/Behaviors.hal $
]]--[[// $Author: Mia $
]]--[[// $Modtime: 23/09/05 18:47 $
]]--[[// $Revision: 19 $
]]--[[// $Workfile: Behaviors.hal $
]]--[[//
]]--[[// Commentaire: il s'agit de tous les comportements génériques à l'arme blindée
]]--[[//
]]--[[// *****************************************************************************
]]--[[//Commun toutes armes
]]include "Common/Pions/Behaviors.bms"

--[[// Embarquement (apres heliportage)
]]include "Common/Pions/Behaviors/Behaviors - Embarquement.bms"


--[[//missions génériques
]]include "Common/Pions/MissionsGeneriques.bms"


--[[// Commun Nbc
]]include "Appui/Nbc/Behaviors.bms"


--[[// Communs aux pions NBC
]]include "Appui/Nbc/Pions/Common/Actions.bms"

include "Appui/Nbc/Pions/Common/Behaviors - Ordre.bms"

include "Appui/Nbc/Pions/Common/Behaviors - Dep.bms"






--[[// *****************************************************************************
]]--[[// Comportement par défaut.
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Defaut"
{
    feedbacks = { { { "done_BEH_Defaut" }, "BEH_Defaut" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Defaut, {value} ) end,
    activations =
    {
        { "BEH_Mot_Pion_NBC_AffecterVariablesDEtat", { "done_BEH_Mot_Pion_NBC_AffecterVariablesDEtat" } },
        { "BEH_MAJ_EtatDefaut", { "done_BEH_MAJ_EtatDefaut" } },
        { "BEH_ROE", { "done_BEH_ROE" } },
        { "BEH_Ambiance", { "done_BEH_Ambiance" } },
        { "BEH_Nbc", { "done_BEH_Nbc" } },
        { "BEH_Rens", { "done_BEH_Rens" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "BEH_Nbc_GererAutoDecontamination", { "done_BEH_Nbc_GererAutoDecontamination" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.nDummy = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_Mot_Pion_NBC_AffecterVariablesDEtat, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// MAJ VE
]]--[[//-----------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_MAJ_EtatDefaut, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// MAJ de l'état DEC par défaut 
]]--[[//-----------------------------------------------------------------------------
]]
        --[[/************************** Si totalement detruit... **************************/]]if( S_Misc_EstDetruitPhysique() ) then
            do return end
        end

        Activate( self.activations.BEH_ROE, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// Comp générique
]]--[[//-----------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Ambiance, 1, emptyTable )
        Activate( self.activations.BEH_Nbc, 1, emptyTable )
        Activate( self.activations.BEH_Rens, 1, emptyTable )
        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, emptyTable )--[[//-------------------------------------------------------------------------
]]--[[// Embarquement apres Heliportage
]]--[[// ------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Nbc_GererAutoDecontamination, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// Comp spé
]]--[[//-----------------------------------------------------------------------------
]]
    end,

--[[// *****************************************************************************
]]--[[// BEH_Nbc_GererAutoDecontamination();
]]--[[//
]]--[[// Commentaire : 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Nbc_GererAutoDecontamination"
{
    feedbacks = { { { "done_BEH_Nbc_GererAutoDecontamination" }, "BEH_Nbc_GererAutoDecontamination" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Nbc_GererAutoDecontamination, {value} ) end,
    activations =
    {
        { "ACT_Nbc_SeDecontaminer", { "done_ACT_Nbc_SeDecontaminer" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            Activate( self.activations.ACT_Nbc_SeDecontaminer, 1, emptyTable )
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Nbc_SeDecontaminer()
]]--[[//
]]--[[// Commentaire : 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Nbc_SeDecontaminer"
{
    feedbacks = { { { "done_ACT_Nbc_SeDecontaminer" }, "ACT_Nbc_SeDecontaminer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Nbc_SeDecontaminer, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "-- AUTO DECONTAMINATION --" )
                DEC_Agent_SeDecontaminer()
            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// BEH_Nbc_Pion_FaireDesMesures
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Nbc_Pion_FaireDesMesures"
{
    feedbacks = { { { "done_BEH_Nbc_Pion_FaireDesMesures" }, "BEH_Nbc_Pion_FaireDesMesures" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Nbc_Pion_FaireDesMesures, {value} ) end,
    activations =
    {
        { "BEH_Nbc_Pion_FaireUneMesureDans", { "done_BEH_Nbc_Pion_FaireUneMesureDans" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Ici normalement: si bonne gestion des objets (NBC)
]]--[[// If (pas mesurée) alors mesurer --> faire une action et pas un comportement
]]--[[//---------------------------------------------------------------------
]]--[[// Des que l'on est proche d'un objet, faire une mesure au cas ou 
]]--[[// il s'agirait d'une zone contaminée
]]--[[//---------------------------------------------------------------------
]]local listeObjet = DEC_Connaissances_CollisionsObjets()
        for _,objet in pairs( listeObjet or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_Nbc_Pion_FaireUneMesureDans, 1, { objet, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Nbc_Pion_FaireUneMesureDans
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Nbc_Pion_FaireUneMesureDans"
{
    feedbacks = { { { "done_BEH_Nbc_Pion_FaireUneMesureDans" }, "BEH_Nbc_Pion_FaireUneMesureDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Nbc_Pion_FaireUneMesureDans, {value} ) end,
    activations =
    {
        { "ACT_Pion_Nbc_ReconnaitreZone", { "done_ACT_Pion_Nbc_ReconnaitreZone" } },
        { "ACT_NBC_FaireMesure", { "done_ACT_NBC_FaireMesure" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Car ne mesurer qu'une seule fois
]]self.bMesureEffectuee = self.bMesureEffectuee or false
        --[[// Mesure effectuee
]]if( self.bMesureEffectuee ) then
            do return end
        end

        --[[//---------------------------------------------------------------------
]]--[[// Condition de fin de mesure
]]--[[//---------------------------------------------------------------------
]]if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.bMesureEffectuee = true
                Activate( self.activations.ACT_Pion_Nbc_ReconnaitreZone, 1, { self._namedParams.objet, } )
self.done_ACT_Pion_Nbc_ReconnaitreZone = function( self, _, v ) eEtat = v[1] end
            end
--[[//---------------------------------------------------------------------
]]--[[// Mesure une seule fois
]]--[[//---------------------------------------------------------------------
]]        end

        if( not self.bMesureEffectuee ) then
            do
                Activate( self.activations.ACT_NBC_FaireMesure, 1, emptyTable )--[[// Juste pour RC
]]
                Activate( self.activations.ACT_Dep_SePoster, 1, emptyTable )--[[// Attente la posture adéquate pour faire fonctionner le senseur
]]
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_NBC_FaireMesure
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_NBC_FaireMesure"
{
    feedbacks = { { { "done_ACT_NBC_FaireMesure" }, "ACT_NBC_FaireMesure" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_NBC_FaireMesure, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]        if( ModuleBegins() ) then
            do
                DEC_Trace( "***** Debut Mesure *****" )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_DebutMesure )
                else
                    DEC_Message( eRC_DebutMesure )
                end

            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Trace( "***** Fin Mesure *****" )
        if( not DEC_Agent_AutomateEstEmbraye() ) then
            DEC_RC( eRC_FinMesure )
        else
            DEC_Message( eRC_FinMesure )
        end

    end,

}

--[[// *****************************************************************************
]]--[[// BEH_Mot_Pion_NBC_AffecterVariablesDEtat
]]--[[//
]]--[[// Commentaire : Ce comportement est à inclure dans le BEH_Defaut du pion
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mot_Pion_NBC_AffecterVariablesDEtat"
{
    feedbacks = { { { "done_BEH_Mot_Pion_NBC_AffecterVariablesDEtat" }, "BEH_Mot_Pion_NBC_AffecterVariablesDEtat" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mot_Pion_NBC_AffecterVariablesDEtat, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[//////////////// BMS OPTIM  ///////////////////
]]        if( F_Pion_GeteEtatDec( myself ) == eEtatDec_Sauvegarde ) then
            do return end
        end

         do
            local _continue = true
--[[////////////// FIN OPTIM  /////////////////////
]]--[[//-----------------------------------------------------------------------------
]]--[[// En fonction du moral...
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fanatique --> esquive sur PAP, pas de ralentissement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Moral bon --> esquive sur PAP et effet rapFor défavorable --> ralentissement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En fonction de la mission...  --> idem moral mauvais
]]--[[//-----------------------------------------------------------------------------
]]--[[// sinon
]]--[[//-----------------------------------------------------------------------------
]]--[[// Moral mauvais: --> esquive sur PAP et sur rapFor défavorable
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = DEC_FacteurHumain_Moral()
                if switch_1 == eMoral_Fanatique then
                    SetStateVariable( "VE_RapFor", 0 )
                    _continue = false
                elseif switch_1 == eMoral_Moyen
                or switch_1 == eMoral_Bon then
                    if( DEC_GetMission( myself ) == nil ) then
                        do
                            SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                            _continue = false
                        end
                    end

                        if _continue then
                        SetStateVariable( "VE_RapFor", 0 )
                        _continue = false
                    end
                elseif switch_1 == eMoral_Mauvais then
                    SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                    _continue = false
                                end
            end

    end,

    destroy = function( self )
                SetStateVariable( "VE_RapFor", 0 )
    end,

--[[////////////////////////////// PARTIE COMPORTEMENTS VIRTUELS /////////////////////////////////////////////////////
]]--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_ProgressionVers
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Virtuel_ProgressionVers"
{
    feedbacks = { { { "done_BEH_Dep_Virtuel_ProgressionVers" }, "BEH_Dep_Virtuel_ProgressionVers" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Virtuel_ProgressionVers, {value} ) end,
    activations =
    {
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.point = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.point, self._namedParams.eTypeProgression, self._namedParams.eTypeIti, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_PreparationAction
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Virtuel_PreparationAction"
{
    feedbacks = { { { "done_BEH_Dep_Virtuel_PreparationAction" }, "BEH_Dep_Virtuel_PreparationAction" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Virtuel_PreparationAction, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_Pion_NBC_AffecterVariablesDEtat", nodes.BEH_Mot_Pion_NBC_AffecterVariablesDEtat }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_MAJ_EtatDefaut", nodes.BEH_MAJ_EtatDefaut }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_ROE", nodes.BEH_ROE }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ambiance", nodes.BEH_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Nbc", nodes.BEH_Nbc }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Rens", nodes.BEH_Rens }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Nbc_GererAutoDecontamination", nodes.BEH_Nbc_GererAutoDecontamination }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Virtuel_ProgressionVers, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Nbc_GererAutoDecontamination, "ACT_Nbc_SeDecontaminer", nodes.ACT_Nbc_SeDecontaminer }
connections[ #connections + 1 ] = { nodes.BEH_Nbc_Pion_FaireDesMesures, "BEH_Nbc_Pion_FaireUneMesureDans", nodes.BEH_Nbc_Pion_FaireUneMesureDans }
connections[ #connections + 1 ] = { nodes.BEH_Nbc_Pion_FaireUneMesureDans, "ACT_Pion_Nbc_ReconnaitreZone", nodes.ACT_Pion_Nbc_ReconnaitreZone }
connections[ #connections + 1 ] = { nodes.BEH_Nbc_Pion_FaireUneMesureDans, "ACT_NBC_FaireMesure", nodes.ACT_NBC_FaireMesure }
connections[ #connections + 1 ] = { nodes.BEH_Nbc_Pion_FaireUneMesureDans, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }

includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/radint/pat viviane/missions/RenseignerSur.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_RADINT_RenseignerSur
]]--[[//
]]--[[// Commentaires: //TEMP normalement  MIS_Pion_RENS_Radint_RenseignerSur
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_RADINT_RenseignerSur"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "ACT_Dep_Pion_RENS_VolerA", {} },
        { "ACT_Info_Trace", {} },
        { "ACT_Connaissance_Rens_EnregistrerDonnees", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Obs_Pion_Rens_Radint_RenseignerDans", {} },
        { "ACT_Dep_SePoster", {} },
        { "BEH_Dep_Pion_RENS_MonterA", {} },
        { "ACT_Misc_Delai", {} },
        { "BEH_Dep_ProgressionVers", {} },
        { "BEH_Connaissance_Rens_ExploiterRens", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.positionInitiale = self.positionInitiale or DEC_Geometrie_CreerPoint()
        self.positionObservation = self.positionObservation or DEC_Geometrie_CreerPoint()
        if( ( #( self._namedParams.mission.zonesDeRecherche_ ) ~= 0 and #( self._namedParams.mission.zonesDeRecherche_ ) ~= nil ) ) then
            self.positionObservation = S_Geometrie_BarycentreZone( DEC_UserTypeList_GetAt( self._namedParams.mission.zonesDeRecherche_, 0 ) )
        else
do
                DEC_RC( eRC_MissionImpossible )
                                Halt( self )
                do return end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        if( ModuleBegins() ) then
            do
                StartActivate( self.activations.ACT_Dep_Pion_RENS_VolerA, 1, { 100, } )
                --[[// données doctrine
]]DEC_Copie_Point( DEC_Agent_Position(), self.positionInitiale )
                Activate( self.activations.ACT_Info_Trace, 1, { "Intelligence gathering mission begining", } )
                Activate( self.activations.ACT_Connaissance_Rens_EnregistrerDonnees, 1, {} )--[[// Enregistrement des donnes
]]
            end
        end

         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[// Se diriger vers les ZR 
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// Observation
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eRejoindre
                                                                return

                            end

                        end
                    end

                    if( DEC_Perception_PointEstVisible( self.positionObservation ) ) then
                        do
                            --[[// Prendre des photos pd 5 min
]]Activate( self.activations.BEH_Obs_Pion_Rens_Radint_RenseignerDans, 1, { self._namedParams.mission.zonesDeRecherche_, } )
                            Activate( self.activations.ACT_Info_Trace, 1, { "Vertical take off", } )
                            --[[// Rester sur palce dans la cas du Cougar
]]Activate( self.activations.ACT_Dep_SePoster, 1.1, {} )
                            --[[// données doctrine
]]Activate( self.activations.BEH_Dep_Pion_RENS_MonterA, 1.1, { 3000, } )
                            --[[// Delai mise en place
]]Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, 5, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                        end
--[[// Progression
]]                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.positionObservation, eProgressionDirect, eTypeItiMouvement, } )
                    
                --[[// Decrocher
]]elseif switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_Decroche, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.positionInitiale, eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// Fin de la mission Sur ordre ou si plus d'autonomie
]]elseif switch_1 == eFinMission then
                    if( self.eEtat == eActionEffectuee ) then
                        Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    end

                    Activate( self.activations.BEH_Connaissance_Rens_ExploiterRens, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )--[[// Developpement photos
]]
                    --[[// données doctrine
]]StopActivate( self.activations.ACT_Dep_Pion_RENS_VolerA, { 100, } )
                    
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Connaissance_Rens_ExploiterRens
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Connaissance_Rens_ExploiterRens"
{
    activations =
    {
        { "ACT_Info_Trace", {} },
        { "ACT_Connaissance_Rens_ExtraireDonnees", {} },
        { "ACT_Connaissance_Rens_ExploiterDonnees", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        if( self.eEtat == eActionEffectuee ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "End of data processing", } )
                Activate( self.activations.ACT_Connaissance_Rens_ExtraireDonnees, 1, {} )
                                self.params.__returnValue = eActionEffectuee
                return

            end
--[[// Exploitation des donnees
]]--[[// 30 min délais doctrine
]]        end

        Activate( self.activations.ACT_Connaissance_Rens_ExploiterDonnees, 1, setmetatable( { 30, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Obs_Pion_Rens_Radint_RenseignerDans
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Obs_Pion_Rens_Radint_RenseignerDans"
{
    activations =
    {
        { "ACT_Obs_SurveillerZone", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zonesDeRecherches = self.params[1]
    end,

    activate = function( self )
        for _,zone in pairs( --[[//---------------------------------------------------------------------
]]--[[// Observation ( si station => exploitation du Rens possible)
]]--[[//---------------------------------------------------------------------
]]self._namedParams.zonesDeRecherches ) do
        local _continue = true
            Activate( self.activations.ACT_Obs_SurveillerZone, 1, { zone, } )

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_RADINT_RenseignerSur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Connaissance_Rens_ExploiterRens, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Connaissance_Rens_ExploiterRens, "ACT_Connaissance_Rens_ExtraireDonnees", nodes.ACT_Connaissance_Rens_ExtraireDonnees }
connections[ #connections + 1 ] = { nodes.BEH_Connaissance_Rens_ExploiterRens, "ACT_Connaissance_Rens_ExploiterDonnees", nodes.ACT_Connaissance_Rens_ExploiterDonnees }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_Rens_Radint_RenseignerDans, "ACT_Obs_SurveillerZone", nodes.ACT_Obs_SurveillerZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_Dep_Pion_RENS_VolerA", nodes.ACT_Dep_Pion_RENS_VolerA }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_Connaissance_Rens_EnregistrerDonnees", nodes.ACT_Connaissance_Rens_EnregistrerDonnees }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "BEH_Obs_Pion_Rens_Radint_RenseignerDans", nodes.BEH_Obs_Pion_Rens_Radint_RenseignerDans }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "BEH_Dep_Pion_RENS_MonterA", nodes.BEH_Dep_Pion_RENS_MonterA }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_RADINT_RenseignerSur, "BEH_Connaissance_Rens_ExploiterRens", nodes.BEH_Connaissance_Rens_ExploiterRens }

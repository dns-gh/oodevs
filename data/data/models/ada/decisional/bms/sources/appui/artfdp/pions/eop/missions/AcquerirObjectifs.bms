includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/pions/eop/missions/AcquerirObjectifs.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[/** \file S VAB - Actions.hal
 *
 * $Author: Ggr $
 * $Modtime: 19/09/05 10:09 $
 * $Revision: 20 $
 *
 */]]--[[// Created: JCR 03-02-13
]]--[[// *****************************************************************************
]]--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]

node "MIS_Pion_ASS_EOP_AcquerirObjectifs"
{
    feedbacks = { { { "done_MIS_Pion_ASS_EOP_AcquerirObjectifs" }, "MIS_Pion_ASS_EOP_AcquerirObjectifs" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ASS_EOP_AcquerirObjectifs, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_Dep_Pion_EOP_ActiverFurtivite", { "done_ACT_Dep_Pion_EOP_ActiverFurtivite" } },
        { "BEH_Pion_EOP_AcquerirObjectifs_Mission", { "done_BEH_Pion_EOP_AcquerirObjectifs_Mission" } },
        { "BEH_Transport_Pion_EOP_RecupererTransporteur", { "done_BEH_Transport_Pion_EOP_RecupererTransporteur" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eAction = self.eAction or eActionEnCours
        self.eActionEmbarquer = self.eActionEmbarquer or eActionEnCours
        self.ePhase = self.ePhase or eReconnaitre
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eSeReplier
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        Activate( self.activations.ACT_Dep_Pion_EOP_ActiverFurtivite, 1, { 0.5, } )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eReconnaitre then
                    Activate( self.activations.BEH_Pion_EOP_AcquerirObjectifs_Mission, GetMotivation( "MOT_Mission" ), {} )
                    _continue = false
                --[[// Sur fin de mission, on se replie
]]                cases_switch_1[1] = true
elseif switch_1 == eSeReplier then
                    if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.mission.positionDebarquement_, 100 ) ) then
                        Activate( self.activations.BEH_Transport_Pion_EOP_RecupererTransporteur, 1, {} )
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = eFinMission
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mission.positionDebarquement_, eProgressionDirect, eTypeItiInfiltration, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eActionEmbarquer == eActionEnCours ) then
                        do return end
                    end

                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

--[[// Lorsque l'on arrive au point de debarquement, on se deploie
]]}

node "BEH_Pion_EOP_AcquerirObjectifs_Mission"
{
    feedbacks = { { { "done_BEH_Pion_EOP_AcquerirObjectifs_Mission" }, "BEH_Pion_EOP_AcquerirObjectifs_Mission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_EOP_AcquerirObjectifs_Mission, {value} ) end,
    activations =
    {
        { "ACT_Dep_PasserEnModeFurtif", { "done_ACT_Dep_PasserEnModeFurtif" } },
        { "BEH_Mot_Pion_EOP_Debarquer", { "done_BEH_Mot_Pion_EOP_Debarquer" } },
        { "BEH_Dep_Pion_EOP_PreparerDebarquement", { "done_BEH_Dep_Pion_EOP_PreparerDebarquement" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission", { "done_BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission" } },
        { "ACT_Dep_Pion_EOP_ActiverFurtivite", { "done_ACT_Dep_Pion_EOP_ActiverFurtivite" } },
        { "BEH_Obs_Pion_ASS_ReconnaissanceZone", { "done_BEH_Obs_Pion_ASS_ReconnaissanceZone" } },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        if( self.ePhase == eRejoindre and S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.mission.positionDebarquement_, 300 ) ) then
            do
                StartActivateOverride( self, self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )
                StartActivateOverride( self, self.activations.BEH_Mot_Pion_EOP_Debarquer, 1.1, { true, } )
                StartActivateOverride( self, self.activations.BEH_Dep_Pion_EOP_PreparerDebarquement, 1.1, {} )
                self.ePhase = eDeployer
            end
        end

        if( self.eAction ~= eActionEnCours ) then
            do
                self.eAction = eActionEnCours
                self.ePhase = eSurveiller
            end
        end

        do
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_PreparationMission, } )
                    Activate( self.activations.ACT_RC, 1, { eRC_DebutMission, } )
                    self.ePhase = eRejoindre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eDeployer
                or switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    Activate( self.activations.BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission, 1, { self.mission.positionInstallation_, self.mission.positionDebarquement_, } )
self.done_BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eSurveiller then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnSurveillance, } )
                    Activate( self.activations.ACT_Dep_Pion_EOP_ActiverFurtivite, 1.1, { 0.1, } )
                    Activate( self.activations.BEH_Obs_Pion_ASS_ReconnaissanceZone, 1, { self.mission.zoneAObserver_, } )
                    _continue = false
                --[[// persistent E_EtatAction        eActionDebarquement = eActionEnCours;
]]                cases_switch_1[3] = true
                end
            end

    end,

--[[// if ( DIA_ModuleBegins() )
]]}

node "BEH_Dep_Pion_EOP_PreparerDebarquement"
{
    feedbacks = { { { "done_BEH_Dep_Pion_EOP_PreparerDebarquement" }, "BEH_Dep_Pion_EOP_PreparerDebarquement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_EOP_PreparerDebarquement, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Misc_Pion_DelaiInstallation", { "done_ACT_Misc_Pion_DelaiInstallation" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// start action ACT_Transport_Pion_EOP_Debarquer( true ) : strength = 1.1;
]]self.eActionDelai = self.eActionDelai or eActionEnCours
        Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
        if( self.eActionDelai == eActionEffectuee ) then
            do
                self.eActionDelai = eActionEnCours
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.ACT_Dep_SePoster, 1, {} )
        Activate( self.activations.ACT_Misc_Pion_DelaiInstallation, 1, { eNiveauInstallation_Poste, } )
self.done_ACT_Misc_Pion_DelaiInstallation = function( self, _, v ) self.eActionDelai = v[1] end
    end,

}

node "BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission"
{
    feedbacks = { { { "done_BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission" }, "BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission, {value} ) end,
    activations =
    {
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptDest = self.params[1]
        self._namedParams.ptPassage = self.params[2]
    end,

    activate = function( self )
        --[[// On cree un itineraire qui passe par la position de debarquement
]]--[[// vers la position d'installation            
]]        self.itineraire_Pt = self.itineraire_Pt or S_Misc_CreerItineraire_Points( self._namedParams.ptDest, self._namedParams.ptPassage )
        self.eAction = self.eAction or eActionEnCours
        self.it = self.it or DEC_CreerItineraireListe( self.itineraire_Pt, eTypeItiInfiltration )
        if( self.eAction == eActionImpossible ) then
            do
                                do
                    self.it = S_Misc_DetruireItineraire( self.it, "BEH_Pion_INF_ApprocherObjectifMission" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                    self.it = S_Misc_DetruireItineraire( self.it, "BEH_Pion_INF_ApprocherObjectifMission" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_Progresser, 1, { self.it, eProgressionReco, } )
self.done_BEH_Dep_Progresser = function( self, _, v ) self.eAction = v[1] end
    end,

    destroy = function( self )
                self.it = S_Misc_DetruireItineraire( self.it, "BEH_Pion_INF_ApprocherObjectifMission" )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASS_EOP_AcquerirObjectifs = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_EOP_PreparerDebarquement, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_EOP_PreparerDebarquement, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_EOP_PreparerDebarquement, "ACT_Misc_Pion_DelaiInstallation", nodes.ACT_Misc_Pion_DelaiInstallation }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "BEH_Mot_Pion_EOP_Debarquer", nodes.BEH_Mot_Pion_EOP_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "BEH_Dep_Pion_EOP_PreparerDebarquement", nodes.BEH_Dep_Pion_EOP_PreparerDebarquement }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission", nodes.BEH_Dep_Pion_EOP_AcquerirObjectifs_Mission }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "ACT_Dep_Pion_EOP_ActiverFurtivite", nodes.ACT_Dep_Pion_EOP_ActiverFurtivite }
connections[ #connections + 1 ] = { nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission, "BEH_Obs_Pion_ASS_ReconnaissanceZone", nodes.BEH_Obs_Pion_ASS_ReconnaissanceZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "ACT_Dep_Pion_EOP_ActiverFurtivite", nodes.ACT_Dep_Pion_EOP_ActiverFurtivite }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "BEH_Pion_EOP_AcquerirObjectifs_Mission", nodes.BEH_Pion_EOP_AcquerirObjectifs_Mission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "BEH_Transport_Pion_EOP_RecupererTransporteur", nodes.BEH_Transport_Pion_EOP_RecupererTransporteur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_EOP_AcquerirObjectifs, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }

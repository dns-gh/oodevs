includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/pions/missions/aide a mobilite sur itineraire/SurveillerItineraire.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_LOG_Surveiller
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_Surveiller"
{
    feedbacks = { { { "done_MIS_Pion_LOG_Surveiller" }, "MIS_Pion_LOG_Surveiller" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_LOG_Surveiller, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Circu_Obs_SurveillerItineraire", { "done_BEH_Circu_Obs_SurveillerItineraire" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.pointInstallation = self.pointInstallation or S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
        self.loc = self.loc or self._namedParams.mission.zone_
        if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "MIS_Pion_LOG_SurveillerItineraire: debut", } )
                    self.ePhaseMission = eProgresser
                    _continue = false
                --[[// Progression vers l'itinéraire à équiper
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eSurveiller
                                _continue = false
                            end

                        end
                    end

                        if _continue then
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.pointInstallation, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                        _continue = false
                    end
                --[[// On parcourt l'itinéraire
]]                cases_switch_1[2] = true
elseif switch_1 == eSurveiller then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    Activate( self.activations.BEH_Circu_Obs_SurveillerItineraire, 1, { self.loc, } )
                    _continue = false
                --[[// Fin de la mission
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Circu_Obs_SurveillerItineraire
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Circu_Obs_SurveillerItineraire"
{
    feedbacks = { { { "done_BEH_Circu_Obs_SurveillerItineraire" }, "BEH_Circu_Obs_SurveillerItineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Circu_Obs_SurveillerItineraire, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_Obs_SurveillerZone", { "done_ACT_Obs_SurveillerZone" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.loc = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Se mettre en position et surveiller
]]if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                Activate( self.activations.ACT_RC, 1, { eRC_EnPosition, } )
                Activate( self.activations.ACT_Obs_SurveillerZone, 1, { self._namedParams.loc, } )
            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_Surveiller = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Circu_Obs_SurveillerItineraire, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Circu_Obs_SurveillerItineraire, "ACT_Obs_SurveillerZone", nodes.ACT_Obs_SurveillerZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "BEH_Circu_Obs_SurveillerItineraire", nodes.BEH_Circu_Obs_SurveillerItineraire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Surveiller, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/pions/sam sic/missions/AssurerMiseEnOeuvre2Zones.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[/** \file S VAB - Actions.hal
 *
 * $Author: Ggr $
 * $Modtime: 19/09/05 10:11 $
 * $Revision: 16 $
 *
 */]]--[[// Created: JCR 03-02-13
]]--[[// *****************************************************************************
]]--[[//------------------------------------------------------------------------------
]]--[[//Rejoins une position et cree un site de deploiement
]]--[[//------------------------------------------------------------------------------
]]
--[[//behavior MIS_Pion_ASS_AssurerMiseEnOeuvre( T_Mission_Pion_ASS_AssurerMiseEnOeuvre2Zones mission, id blurp )
]]
node "MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones"
{
    feedbacks = { { { "done_MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones" }, "MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Pion_ASS_GererOrdre_AppliquerFeux_SIC", { "done_BEH_Pion_ASS_GererOrdre_AppliquerFeux_SIC" } },
        { "BEH_Info_Pion_ASS_GererDisponibiliteAuTir", { "done_BEH_Info_Pion_ASS_GererDisponibiliteAuTir" } },
        { "ACT_Pion_ASS_DebarquerLanceur", { "done_ACT_Pion_ASS_DebarquerLanceur" } },
        { "BEH_Pion_ASS_AssurerMiseEnOeuvre_Mission", { "done_BEH_Pion_ASS_AssurerMiseEnOeuvre_Mission" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                DEC_Trace( "DEDANS" )
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eMettreEnOeuvre
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                --[[// Prise en charge de l'ordre d'application des feux
]]F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Second )
                --[[//---------------------------------------------------------------------
]]DEC_Trace( "Reception mission 'AssurerMiseEnOeuvre'" )
            end
--[[// Gere la disponibilite aux feux
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Pion_ASS_GererOrdre_AppliquerFeux_SIC, 1, { true, self._namedParams.mission.zoneImplantation2_, } )
        Activate( self.activations.BEH_Info_Pion_ASS_GererDisponibiliteAuTir, 1, { true, } )
         do
            local _continue = true
--[[// Mission
]]--[[//---------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eMettreEnOeuvre then
                    Activate( self.activations.ACT_Pion_ASS_DebarquerLanceur, 1, emptyTable )
                    Activate( self.activations.BEH_Pion_ASS_AssurerMiseEnOeuvre_Mission, GetMotivation( "MOT_Mission" ), { M_DELAI_PREPARATION_RECO_SAM(), } )
                    _continue = false
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "BEH_Pion_ASS_GererOrdre_AppliquerFeux_SIC", nodes.BEH_Pion_ASS_GererOrdre_AppliquerFeux_SIC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "BEH_Info_Pion_ASS_GererDisponibiliteAuTir", nodes.BEH_Info_Pion_ASS_GererDisponibiliteAuTir }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "ACT_Pion_ASS_DebarquerLanceur", nodes.ACT_Pion_ASS_DebarquerLanceur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "BEH_Pion_ASS_AssurerMiseEnOeuvre_Mission", nodes.BEH_Pion_ASS_AssurerMiseEnOeuvre_Mission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASS_AssurerMiseEnOeuvre2Zones, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }

includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/escorter/Escorter - MRT.bms"] = true

local emptyTable = emptyTable

--[[// -----------------------------------------------------------------------------
]]--[[// Mission Automate Alat Escorter
]]--[[// ------------------------------
]]--[[//
]]--[[//
]]--[[// Commentaires : Dans cette mission, on répartie nos moyens de défense en un
]]--[[// groupe d'escorte ( en avant du dispositif ) et autant de flanc gardes que 
]]--[[// possible tout autour des elements à protéger.
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_Escorter"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ALAT_Escorter" }, "MIS_Automate_MRT_ALAT_Escorter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ALAT_Escorter, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.listePionsSgpt = self.listePionsSgpt or DEC_Automate_PionsSansPC()
        self.listeHAC = self.listeHAC or S_Cherche_Automate_Filtre_TypePionOperationnels( self.listePionsSgpt, "AntitankHelicopterPatrol" )
        self.listeHAP = self.listeHAP or S_Cherche_Automate_Filtre_TypePionOperationnels( self.listePionsSgpt, "EscortAndCloseSupportHelicopterPatrol" )
        self.listeHAM = self.listeHAM or S_Cherche_Automate_Filtre_TypePionOperationnels( self.listePionsSgpt, "AirDefenseHelicopterPatrol" )
        self.listePatrouillesPeutFaireMissionEscorteOuCouvrir = self.listePatrouillesPeutFaireMissionEscorteOuCouvrir or {}
        if( ModuleBegins() ) then
            do
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionEscorteOuCouvrir, self.listeHAP, self.listeHAC )
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionEscorteOuCouvrir, self.listePatrouillesPeutFaireMissionEscorteOuCouvrir, self.listeHAM )
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listePatrouillesPeutFaireMissionEscorteOuCouvrir ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
--[[// ROE par défaut pour cette mission + ordre poursuivre
]]                end

                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
        else
do
                DEC_MRT_Valide()
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_Escorter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Escorter, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Escorter, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }

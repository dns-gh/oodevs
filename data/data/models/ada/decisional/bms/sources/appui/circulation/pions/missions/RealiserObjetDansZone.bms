includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/pions/missions/RealiserObjetDansZone.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// BEH_Pion_CIRCU_RealiserObjetDansZone
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Pion_CIRCU_RealiserObjetDansZone"
{
    feedbacks = { { { "done_BEH_Pion_CIRCU_RealiserObjetDansZone" }, "BEH_Pion_CIRCU_RealiserObjetDansZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_CIRCU_RealiserObjetDansZone, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obj_Pion_LOG_RealiserTravaux", { "done_ACT_Obj_Pion_LOG_RealiserTravaux" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
        self._namedParams.eTypeObjet = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.eEtatDefaut = self.eEtatDefaut or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.positionInstallation = self.positionInstallation or S_Geometrie_BarycentreZone( self._namedParams.zone )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatDefaut = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
--[[// Preparation de la mission
]]--[[// Progression
]]--[[//MAJ phase mission          
]]--[[// Realisation des travaux
]]--[[// si l'agent est à plus de 500m de la zone
]]--[[//si l'objet est pas créé
]]--[[// si imposible de créer l'objet                    
]]--[[// using actuator deplacement
]]--[[// Fin mission sur ordre
]]            local switch_1 = self.ePhase
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eProgresser
                    _continue = false
                elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtatDefaut == eActionEffectuee ) then
                        do
                            self.eEtatDefaut = eActionEnCours
                                                        do
                                self.ePhase = eRealiserTravaux
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.positionInstallation, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtatDefaut = v[1] end
                    _continue = false
                elseif switch_1 == eRealiserTravaux then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    if( not S_Geometrie_EstProchePosition( myself:DEC_Agent_Position(), self.positionInstallation, 500 ) ) then
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1.1, { self.positionInstallation, eProgressionDefaut, eTypeItiMouvement, } )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do return end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                if( DEC_ConnaissanceObjet_EstValide( myself.objMisEnCours_ ) ) then
                                    DEC_DetruireObjetSansDelais( myself.objMisEnCours_ )
                                end

                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Obj_Pion_LOG_RealiserTravaux, 1, { self._namedParams.zone, self._namedParams.eTypeObjet, } )
self.done_ACT_Obj_Pion_LOG_RealiserTravaux = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, emptyTable )
                    if( DEC_ConnaissanceObjet_EstValide( myself.objMisEnCours_ ) ) then
                        DEC_DetruireObjetSansDelais( myself.objMisEnCours_ )
                    end

                    _continue = false
                                end
            end

    end,

    destroy = function( self )
                if( DEC_ConnaissanceObjet_EstValide( myself.objMisEnCours_ ) ) then
            DEC_DetruireObjetSansDelais( myself.objMisEnCours_ )
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pion_CIRCU_RealiserObjetDansZone, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Pion_CIRCU_RealiserObjetDansZone, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Pion_CIRCU_RealiserObjetDansZone, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pion_CIRCU_RealiserObjetDansZone, "ACT_Obj_Pion_LOG_RealiserTravaux", nodes.ACT_Obj_Pion_LOG_RealiserTravaux }
connections[ #connections + 1 ] = { nodes.BEH_Pion_CIRCU_RealiserObjetDansZone, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

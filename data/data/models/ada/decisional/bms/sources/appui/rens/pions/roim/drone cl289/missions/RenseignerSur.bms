includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/roim/drone cl289/missions/RenseignerSur.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_ROIM_CL289_RenseignerSur
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_ROIM_CL289_RenseignerSur"
{
    feedbacks = { { { "done_MIS_Pion_RENS_ROIM_CL289_RenseignerSur" }, "MIS_Pion_RENS_ROIM_CL289_RenseignerSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_RENS_ROIM_CL289_RenseignerSur, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Obs_Pion_Rens_GererObservationDans", { "done_BEH_Obs_Pion_Rens_GererObservationDans" } },
        { "ACT_Connaissance_Rens_EnregistrerDonnees", { "done_ACT_Connaissance_Rens_EnregistrerDonnees" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "ACT_Dep_Pion_RENS_VolerA", { "done_ACT_Dep_Pion_RENS_VolerA" } },
        { "ACT_Connaissance_Rens_ExtraireDonnees", { "done_ACT_Connaissance_Rens_ExtraireDonnees" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
        self.ficelleDeVol = {}
        DEC_Copie_ListePoints( self._namedParams.mission.ficelleDeVole_, self.ficelleDeVol )
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        --[[//---------------------------------------------------------------------
]]--[[// Commencer le mode enregistrement
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// imposssible si pas mise en oeuvre
]]if( not myself.bMiseEnOeuvre_ ) then
                    do
                        DEC_Trace( "----- Le drone doit être mise en oeuvre -----" )
                        DEC_RC( eRC_DroneDoitEtreMisEnOeuvre )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
                end

                if( myself.bEnExploitation_ ) then
                    do
                        DEC_Trace( "----- Le drone est en exploitation -----" )
                        DEC_RC( eRC_DroneEnExploitation )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
--[[// pour être sur de revenir au point de départ
]]                end

            DEC_ListePoints_PushBack( self.ficelleDeVol, DEC_Agent_Position() )
            end
--[[//=========================================================================
]]--[[// SQUELETTE DE LA MISSION
]]--[[//
]]--[[// strength = 1
]]--[[//
]]--[[//=========================================================================
]]        end

        switch_1 = self.ePhaseMission
                if switch_1 == ePreparerMission then
                    --[[//---------------------------------------------------------------------
]]--[[// Preparation de la mission
]]--[[//---------------------------------------------------------------------
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[//---------------------------------------------------------------------
]]--[[// Voler
]]--[[//---------------------------------------------------------------------
            ]]elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "---------LANCEMENT DU DRONE---------", } )
                    --[[//---------------------------------------------------------------------
]]--[[// Observation et enregistrement des donnees
]]--[[//---------------------------------------------------------------------
]]--[[// activation senseurds dans les ZR
]]Activate( self.activations.BEH_Obs_Pion_Rens_GererObservationDans, 1, { self._namedParams.mission.zonesDeRecherche_, } )
                    Activate( self.activations.ACT_Connaissance_Rens_EnregistrerDonnees, 1, {} )--[[//SPE CL 289
]]
                    --[[//---------------------------------------------------------------------
]]--[[// Deplacement
]]--[[//---------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self.ficelleDeVol, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eEtat = v[1] end
                    --[[// données doctrine 
]]Activate( self.activations.ACT_Dep_Pion_RENS_VolerA, 1, { 350, } )
                    
                --[[//---------------------------------------------------------------------
]]--[[// Fin de la mission  //SPE CL 289
]]--[[//---------------------------------------------------------------------
        ]]elseif switch_1 == eFinMission then
                    --[[// IMPORTANT POUR AUTOMATE  
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( not myself.bEnExploitation_ and not myself.bMiseEnOeuvre_ ) then
                        Activate( self.activations.ACT_Connaissance_Rens_ExtraireDonnees, 1, {} )
                    end



                else
                                end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Obs_Pion_Rens_GererObservationDans
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Obs_Pion_Rens_GererObservationDans"
{
    feedbacks = { { { "done_BEH_Obs_Pion_Rens_GererObservationDans" }, "BEH_Obs_Pion_Rens_GererObservationDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Obs_Pion_Rens_GererObservationDans, {value} ) end,
    activations =
    {
        { "BEH_Obs_Pion_Rens_ActiverObservationDans", { "done_BEH_Obs_Pion_Rens_ActiverObservationDans" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zonesDeRecherche = self.params[1]
    end,

    activate = function( self )
        local StartActivateOverride = StartActivateOverride
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,zone in pairs( self._namedParams.zonesDeRecherche or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Obs_Pion_Rens_ActiverObservationDans, 1, { zone, } )

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Obs_Pion_Rens_ActiverObservationDans
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre la perception
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Obs_Pion_Rens_ActiverObservationDans"
{
    feedbacks = { { { "done_BEH_Obs_Pion_Rens_ActiverObservationDans" }, "BEH_Obs_Pion_Rens_ActiverObservationDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Obs_Pion_Rens_ActiverObservationDans, {value} ) end,
    activations =
    {
        { "ACT_Obs_Rens_ActiverObservationDans", { "done_ACT_Obs_Rens_ActiverObservationDans" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_Geometrie_EstPointDansLocalisation( myself:DEC_Agent_Position(), self._namedParams.zone ) ) then
            Activate( self.activations.ACT_Obs_Rens_ActiverObservationDans, 1, { self._namedParams.zone, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Obs_Rens_ActiverObservationDans
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre la perception
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Obs_Rens_ActiverObservationDans"
{
    feedbacks = { { { "done_ACT_Obs_Rens_ActiverObservationDans" }, "ACT_Obs_Rens_ActiverObservationDans" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obs_Rens_ActiverObservationDans, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]        if( ModuleBegins() ) then
            do
                DEC_Trace( "---****----**** activation observation ****----****---" )
                DEC_Perception_ActiverSenseurs()
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Trace( "---****----**** Desactivation observation ****----****---" )
        DEC_Perception_DesactiverSenseurs()
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Connaissance_Rens_EnregistrerDonnees
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre les connaissances
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Connaissance_Rens_EnregistrerDonnees"
{
    feedbacks = { { { "done_ACT_Connaissance_Rens_EnregistrerDonnees" }, "ACT_Connaissance_Rens_EnregistrerDonnees" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Connaissance_Rens_EnregistrerDonnees, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "--------- Enregistrement des donnees ---------" )
                DEC_Perception_ActiverModeEnregistrement()
            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Connaissance_Rens_ExtraireDonnees
]]--[[//
]]--[[// Commentaires: dans cette action on enregistre les connaissances
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Connaissance_Rens_ExtraireDonnees"
{
    feedbacks = { { { "done_ACT_Connaissance_Rens_ExtraireDonnees" }, "ACT_Connaissance_Rens_ExtraireDonnees" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Connaissance_Rens_ExtraireDonnees, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "--------- Developpement des films ---------" )
                DEC_Perception_DesactiverModeEnregistrement()
            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_ROIM_CL289_RenseignerSur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_Rens_ActiverObservationDans, "ACT_Obs_Rens_ActiverObservationDans", nodes.ACT_Obs_Rens_ActiverObservationDans }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_Rens_GererObservationDans, "BEH_Obs_Pion_Rens_ActiverObservationDans", nodes.BEH_Obs_Pion_Rens_ActiverObservationDans }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "BEH_Obs_Pion_Rens_GererObservationDans", nodes.BEH_Obs_Pion_Rens_GererObservationDans }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "ACT_Connaissance_Rens_EnregistrerDonnees", nodes.ACT_Connaissance_Rens_EnregistrerDonnees }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "ACT_Dep_Pion_RENS_VolerA", nodes.ACT_Dep_Pion_RENS_VolerA }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_CL289_RenseignerSur, "ACT_Connaissance_Rens_ExtraireDonnees", nodes.ACT_Connaissance_Rens_ExtraireDonnees }

includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie blindee/missions/retablir itineraires/RetablirItineraires - CDT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_GEN_RetablirItineraires
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_GEN_RetablirItineraires"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_Warning", {} },
        { "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_", {} },
        { "BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )--[[//---------------------------------------------------------------------
]]--[[// Ordre conduite
]]--[[//---------------------------------------------------------------------
]]
        --[[//---------------------------------------------------------------------
]]--[[// Vérification des moyens
]]--[[//---------------------------------------------------------------------
]]local listePionsGenie = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        if( ( #( listePionsGenie ) == 0 or #( listePionsGenie ) == nil ) ) then
            do
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                do return end

            end
--[[//---------------------------------------------------------------------
]]--[[// Gestion deuxieme échelon
]]--[[//---------------------------------------------------------------------
]]--[[// Ideme ouvrir itineraires
]]        end

        Activate( self.activations.BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_, 1, {} )
        Activate( self.activations.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement, 1, {} )--[[//---------------------------------------------------------------------
]]--[[// Renforcement 
]]--[[//---------------------------------------------------------------------
]]
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe", {} },
        { "BEH_Objet_Automate_GEN_VerifierRenfortPourDetruireObjet", {} },
        { "BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle", {} },
        { "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Mettre à jour la liste des objets traités --> association à un 
]]--[[// T_ConnaissanceObjet_local
]]--[[//---------------------------------------------------------------------
]]        local listePionsGenie = S_ObtenirPionsOperationnelsFiltre( SectionGenie )
        for _,pion in pairs( listePionsGenie or {} ) do
        local _continue = true
do
                --[[// cast
]]local section = pion
                if( section:GetobjMisEnCours_() ~= nil ) then
                    do
                        --[[// idem ouvrir axe progression
]]Activate( self.activations.BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe, 1, { section, section:GetobjMisEnCours_(), } )
                        Activate( self.activations.BEH_Objet_Automate_GEN_VerifierRenfortPourDetruireObjet, 1, { section:GetobjMisEnCours_(), } )
                    end
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les T_ConnaissanceObjet_local --> Assignation renforcement
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objet = x
                local eValide = nil
                if( not DEC_Automate_PionPeutDetruireObjet( objet:Getpion_(), objet:Getobstacle_() ) ) then
                    --[[// spé car pas contournement mais destruction des objets
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle, 1, { objet, } )
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Rendre dispo les renforts si fin constrcution
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objet = x
                --[[// idem ouvrir itineraires
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle, 1, { objet, } )
            end

        end

    end,

    destroy = function( self )
                DIA_Clear( g_selConnaissanceObs )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetADetruire = self.params[1]
    end,

    activate = function( self )
        --[[// Renforcement déjà assigné
]]if( self._namedParams.objetADetruire:GetpionRenforcement_() ~= nil ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// selection des différents renforts possibles
]]--[[//-------------------------------------------------------------------------
]]local selPAASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupePAA )
        local selMLFSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMLF )
        local selEFASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEFA )
        local selPFMSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionPFM )
        local selSectionTravaux = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionTravaux )
        local selGroupeEBG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEBG )
        local selGroupeMPG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMPG )
        local selGroupeDISP = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeDISP )
        local selSectionSOUVIM = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionSOUVIM )
        local selGroupeMFRD = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMFRD )
        local selGroupeOT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeOT )
        local selSectionDeminageLourd = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionDeminageLourd )
        local selGroupeMADEZ = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMADEZ )
        local selGroupeMATS = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMATS )
        local selGroupePAT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupePAT )
        local selGroupeEnfouisseur = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEnfouisseur )
        local selGroupeEnergie = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEnergie )
        local selGroupeEquipementPoser = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEquipementPoser )
        local selSectionEquipementPlage = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionEquipementPlage )
        local selSectionEau = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionEau )
        local selDLRG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( DLRG )
        --[[//-------------------------------------------------------------------------
]]--[[// Traiter d'éventuels renforts pour construire l'objet
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selPAASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selMLFSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selEFASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selPFMSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selSectionTravaux, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeEBG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeMPG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeDISP, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selSectionSOUVIM, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeMFRD, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeOT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selSectionDeminageLourd, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeMADEZ, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeMATS, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupePAT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeEnfouisseur, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeEnergie, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selGroupeEquipementPoser, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selSectionEquipementPlage, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selSectionEau, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, 1, { self._namedParams.objetADetruire, selDLRG, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour"
{
    activations =
    {
        { "BEH_Mission_Automate_GEN_RenforcerRepObjet", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetADetruire = self.params[1]
        self._namedParams.listePionsRenforcement = self.params[2]
    end,

    activate = function( self )
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les pions en renforcement
]]--[[//-------------------------------------------------------------------------
]]self._namedParams.listePionsRenforcement or {} ) do
        local _continue = true
do
                local pionRenfort = x
                local eValide = nil
                if( DEC_Automate_PionPeutDetruireObjet( pionRenfort, self._namedParams.objetADetruire:Getobstacle_() ) ) then
                    Activate( self.activations.BEH_Mission_Automate_GEN_RenforcerRepObjet, 1, { self._namedParams.objetADetruire, pionRenfort, self._namedParams.objetADetruire:Getpion_(), DEC_ConnaissanceObjet_Localisation( self._namedParams.objetADetruire:Getobstacle_() ), } )
                end

            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_GEN_RetablirItineraires = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle, "BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour", nodes.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementReductionObstaclePour, "BEH_Mission_Automate_GEN_RenforcerRepObjet", nodes.BEH_Mission_Automate_GEN_RenforcerRepObjet }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement, "BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe", nodes.BEH_Misc_Automate_GEN_CDT_OuvrirAxesProgressionGererRenforcementDe }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement, "BEH_Objet_Automate_GEN_VerifierRenfortPourDetruireObjet", nodes.BEH_Objet_Automate_GEN_VerifierRenfortPourDetruireObjet }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement, "BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle", nodes.BEH_Misc_Automate_GEN_GererRenforcementReductionObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement, "BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementBrechageObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RetablirItineraires, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RetablirItineraires, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RetablirItineraires, "BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_", nodes.BEH_Conduite_Automate_GEN_OuvrirAxe_GererSE_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RetablirItineraires, "BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement", nodes.BEH_Mission_Automate_GEN_CDT_RetablirItinerairesGererRenforcement }

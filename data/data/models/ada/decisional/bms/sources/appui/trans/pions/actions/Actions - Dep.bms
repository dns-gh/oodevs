includedFiles = includedFiles or {}
includedFiles["sources/appui/trans/pions/actions/Actions - Dep.bms"] = true

--[[// *****************************************************************************
]]--[[// ACT_Dep_SeDeplacer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************/
]]node "ACT_Dep_SeDeplacer"
{
    feedbacks = { { { "done_ACT_Dep_SeDeplacer" }, "ACT_Dep_SeDeplacer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_SeDeplacer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.it = self.params[1]
    end,

    select = function( self )
                self.eEtatDeplacement = self.eEtatDeplacement or eEtatActionDeplacement_EnCours
        self.actionDeplacement = self.actionDeplacement or 0
        self.bEnPanne = self.bEnPanne or false
        --[[//-----------------------------------------------------------------------------
]]--[[// Init --> début déplacement
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                assert( self._namedParams.it ~= nil, "ACT_Dep_SeDeplacer it invalide" )
                self.actionDeplacement = DEC_StartDeplacement( self._namedParams.it )
                actionCallbacks[ self.actionDeplacement ] = function( arg ) self.eEtatDeplacement = arg end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Etat du déplacement
]]--[[//-----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement en cours
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Plus de carburant
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fin déplacement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// REPRISE QD PERTE DE FOCUS
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Autres cas
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.eEtatDeplacement
                if switch_1 == eEtatActionDeplacement_EnCours then
                    F_Pion_SeteEtatDeplacement( myself, eEtatDeplacement_EnCours )
                    _continue = false
                elseif switch_1 == eEtatActionDeplacement_ManqueCarburant then
                    DEC_PauseAction( self.actionDeplacement )
                    _continue = false
                elseif switch_1 == eEtatActionDeplacement_Termine then
                    self.actionDeplacement = DEC_StopAction( self.actionDeplacement )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eEtatActionDeplacement_Pause then
                    DEC_ReprendAction( self.actionDeplacement )
                    _continue = false
                elseif switch_1 == eEtatActionDeplacement_NonAutorise then
                    _continue = false
                elseif switch_1 == eEtatActionDeplacement_DejaEnDeplacement then
                    _continue = false
                                end
            end

    end,

    deselect = function( self )
                DEC_PauseAction( self.actionDeplacement )
    end,

    destroy = function( self )
                self.actionDeplacement = DEC_StopAction( self.actionDeplacement )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_SePoster
]]--[[// 
]]--[[// Commentaires: prend l'actuateur de deplacement
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePoster"
{
    feedbacks = { { { "done_ACT_Dep_SePoster" }, "ACT_Dep_SePoster" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_SePoster, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
    end,

    select = function( self )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_SePosterFaceADir
]]--[[// 
]]--[[// Commentaires: prend l'actuateur de deplacement
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePosterFaceADir"
{
    feedbacks = { { { "done_ACT_Dep_SePosterFaceADir" }, "ACT_Dep_SePosterFaceADir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_SePosterFaceADir, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.dir = self.params[1]
    end,

    select = function( self )
                self.bInit = self.bInit or false
        if( self.bInit == false ) then
            do
                DEC_Perception_VisionVerrouilleeSurDirection( self._namedParams.dir )
                self.bInit = true
            end
        end

    end,

    deselect = function( self )
                self.bInit = false
    end,

}


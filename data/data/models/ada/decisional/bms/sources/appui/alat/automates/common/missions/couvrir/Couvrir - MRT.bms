includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/couvrir/Couvrir - MRT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Mission Automate Alat : Couvrir
]]--[[//
]]--[[// Commentaires : Cette mission permet à un sous groupement de donner des
]]--[[// missions de couverture en vu de proteger une manoeuvre.
]]--[[// Il est important de noter que, conformément au spécifications de l'ALAT, cette
]]--[[// mission est dynamique ( correspond à la flanc garde dans la mélée ).
]]--[[//
]]--[[// Face à la direciton dangereuse, on déploie un rideau des moyens qui peuvent
]]--[[// realiser cette mission.  => pour deux patrouilles qui couvrent, une de reserve
]]--[[//                          => pour trois patrouilles qui couvrent, une de reserve
]]--[[//                          => pour quatres patrouilles qui couvrent, deux de reserve.
]]--[[//
]]--[[// Les unites de reserve suivent les patrouilles qui couvrent pour être pretes
]]--[[// à relever (CDT)
]]--[[//
]]--[[// De plus, on doit toujours assurer la permanance de la couverture malgré les
]]--[[// ravitaillements. (CDT)
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_Couvrir"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtatMissionsCouvrir = self.eEtatMissionsCouvrir or eActionEnCours
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeHM = self.listeHM or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "TransportHelicopterPatrol" )
        self.listeHAC = self.listeHAC or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "AntitankHelicopterPatrol" )
        self.listeHAP = self.listeHAP or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "EscortAndCloseSupportHelicopterPatrol" )
        self.listeHAM = self.listeHAM or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "AirDefenseHelicopterPatrol" )
        self.listePatrouillesPeutFaireMissionCouvrir = self.listePatrouillesPeutFaireMissionCouvrir or S_Liste_Concatene( S_Liste_Concatene( self.listeHAC, self.listeHAP ), self.listeHAM )
        self.listeUnitesACouvrir = self.listeUnitesACouvrir or S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAAppuyer_ )
        self.listeCouvrir = self.listeCouvrir or {}
        self.listePionsReserve = self.listePionsReserve or {}
        if( ModuleBegins() ) then
            do
                if( DIA_IsListEmpty( self.listePatrouillesPeutFaireMissionCouvrir ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
                end

                DEC_SetMission( myself, self._namedParams.mission )
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
            end
        end

        DEC_MRT_Valide()
                self.params.__returnValue = eActionEffectuee
        Halt( self )
        do return end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_Couvrir = { "mission" }

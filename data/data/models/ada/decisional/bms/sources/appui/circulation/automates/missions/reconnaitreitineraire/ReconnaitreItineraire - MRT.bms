includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/automates/missions/reconnaitreitineraire/ReconnaitreItineraire - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_LOG_ReconnaitreItineraire
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_LOG_ReconnaitreItineraire"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionReconnaitre = self.eEtatMissionReconnaitre or eActionEnCours
        self.selPions = self.selPions or S_Cherche_Automate_Filtre_TypePionOperationnels( DEC_Automate_PionsAvecPC(), "PatrouilleCirculation" )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

         do
            local switch_1 = --[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[//
]]--[[// =============================================================================
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionReconnaitre == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                                                        return

                        end
                    end

                    if( self.eEtatMissionReconnaitre == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        return

                        end
--[[// controle de creation des missions de construction de zone à mobilité améliorée
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selPions ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatMissionReconnaitre = v else rawset( t, k, v ) end end } ) )
                    --[[// ordre de creation des missions
]]if( ( #( self.selPions ) ~= 0 and #( self.selPions ) ~= nil ) ) then
                        Activate( self.activations.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe, 1, { ePhase_MRT, self.selPions, self._namedParams.mission.itineraireLog_, } )
                    end

                    
                --[[//---------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_RC( eRC_MissionImpossible )
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                    
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                    
                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_LOG_ReconnaitreItineraire = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_ReconnaitreItineraire, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_ReconnaitreItineraire, "BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe", nodes.BEH_Mission_Automate_CIRCU_AssignerReconnaitreItineraireAListe }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/common/missions/defendreunezone/DefendreUneZone CDT.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Common/Missions/SeDeployer MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 8/07/05 16:17 $
]]--[[// $Revision: 11 $
]]--[[// $Workfile: SeDeployer MRT.hal $
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// DefendreUneZone
]]--[[//
]]--[[//    La conduite ne consiste qu'a gérer les demandes d'appui feu et de les 
]]--[[//          transférer aux sections de tir
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_ASS_DefendreUneZone"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ASS_DefendreUneZone" }, "MIS_Automate_CDT_ASS_DefendreUneZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ASS_DefendreUneZone, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_ASS_GererOrdres", { "done_BEH_Ordre_Automate_ASS_GererOrdres" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ DefendreUneZone: starting CDT $" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_ASS_GererOrdres, 1, emptyTable )
    end,

}

node "BEH_Ordre_Automate_ASS_GererOrdres"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_ASS_GererOrdres" }, "BEH_Ordre_Automate_ASS_GererOrdres" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_ASS_GererOrdres, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_RC_Automate", { "done_ACT_RC_Automate" } },
        { "BEH_Eni_Pion_ASS_AppliquerFeux", { "done_BEH_Eni_Pion_ASS_AppliquerFeux" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local repOrdreCond = x
                if( repOrdreCond:GetType() == "Rep_OrderConduite_Pion_AppliquerFeuxDansZone" ) then
                    do
                        local repOrdre_Tir = repOrdreCond
                        Activate( self.activations.ACT_Info_Trace, 1, { "Ordre : Appliquer Feux", } )
                        Activate( self.activations.ACT_RC_Automate, 1, { eRC_ReceptionOrdreDeFeu, } )
                        Activate( self.activations.BEH_Eni_Pion_ASS_AppliquerFeux, 1, { repOrdre_Tir, } )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

    end,

}

node "BEH_Eni_Pion_ASS_AppliquerFeux"
{
    feedbacks = { { { "done_BEH_Eni_Pion_ASS_AppliquerFeux" }, "BEH_Eni_Pion_ASS_AppliquerFeux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_ASS_AppliquerFeux, {value} ) end,
    activations =
    {
        { "ACT_MOT_Automate_ASS_DemandeAppliqerFeux", { "done_ACT_MOT_Automate_ASS_DemandeAppliqerFeux" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ordre = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.listePoints = self.listePoints or {}
        self.rIterateurPoint = self.rIterateurPoint or 0
        self.sPions = self.sPions or DEC_Automate_PionsSansPC()
        if( ModuleBegins() ) then
            do
                local mission = DEC_GetMission( myself )
                self.listePoints = DEC_Geometrie_PositionsParRapportALocalisation( self.sPions, self._namedParams.ordre:GetzoneCible_(), DEC_GetDirectionEnnemi( mission ), 1000 )
                --[[//-----------------------------------------------------------------------------
]]--[[// Gestion erreur
]]--[[//-----------------------------------------------------------------------------
]]if( DEC_ListePoints_Size( self.listePoints ) > 0 ) then
                    do
                        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission aux pions
]]--[[//-----------------------------------------------------------------------------
]]self.sPions or emptyTable ) do
                        local _continue = true
                            do
                                if( self.rIterateurPoint == DEC_ListePoints_Size( self.listePoints ) ) then
                                    self.rIterateurPoint = 0
                                end

                                local point = DEC_ListePoints_GetAt( self.listePoints, self.rIterateurPoint )
                                StartActivateOverride( self, self.activations.ACT_MOT_Automate_ASS_DemandeAppliqerFeux, 1, { pion, self._namedParams.ordre, point, } )
                                                                self.rIterateurPoint = self.rIterateurPoint + 1
                            end

                        end

                    end
                end

            end
        end

    end,

    destroy = function( self )
            end,

--[[// ----------------------------------------------------------------------------
]]--[[// ACT_MOT_Automate_INF_DemandeAppliqerFeux.
]]--[[//  Demande a un pion Mortier d'appliquer des feux d'appuis (c'est le mortier 
]]--[[//  qui decidera de la cible
]]--[[// ----------------------------------------------------------------------------
]]}

node "ACT_MOT_Automate_ASS_DemandeAppliqerFeux"
{
    feedbacks = { { { "done_ACT_MOT_Automate_ASS_DemandeAppliqerFeux" }, "ACT_MOT_Automate_ASS_DemandeAppliqerFeux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_MOT_Automate_ASS_DemandeAppliqerFeux, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pASS = self.params[1]
        self._namedParams.order = self.params[2]
        self._namedParams.position = self.params[3]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.pASS:GetType()
                        if switch_1 == "SectionASS_Tir" then
                                                    local section = self._namedParams.pASS
                            section:Setmunitions_( self._namedParams.order:Getmunitions_() )
                            section:SetnbIT_( self._namedParams.order:GetnbIT_() )
                            section:Setcible_( self._namedParams.position )
                            _continue = false
                        elseif switch_1 == "SectionASS_LRM" then
                                                    local section = self._namedParams.pASS
                            section:Setmunitions_( self._namedParams.order:Getmunitions_() )
                            section:SetnbIT_( self._namedParams.order:GetnbIT_() )
                            section:Setcible_( self._namedParams.position )
                            _continue = false
                                                end
                    end

                self._namedParams.pASS:SetStateVariable( "VE_AppliquerLesFeux", 1 )
            end
        end

    end,

    deselect = function( self )
                self._namedParams.pASS:SetStateVariable( "VE_AppliquerLesFeux", 0 )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ASS_DefendreUneZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ASS_AppliquerFeux, "ACT_MOT_Automate_ASS_DemandeAppliqerFeux", nodes.ACT_MOT_Automate_ASS_DemandeAppliqerFeux }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_ASS_GererOrdres, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_ASS_GererOrdres, "ACT_RC_Automate", nodes.ACT_RC_Automate }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_ASS_GererOrdres, "BEH_Eni_Pion_ASS_AppliquerFeux", nodes.BEH_Eni_Pion_ASS_AppliquerFeux }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_ASS_GererOrdres, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ASS_DefendreUneZone, "BEH_Ordre_Automate_ASS_GererOrdres", nodes.BEH_Ordre_Automate_ASS_GererOrdres }

includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie appui/missions/sedeployer/SeDeployer - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_GEN_SeDeployer
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_GEN_SeDeployer"
{
    feedbacks = { { { "done_MIS_Automate_MRT_GEN_SeDeployer" }, "MIS_Automate_MRT_GEN_SeDeployer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_GEN_SeDeployer, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_AssignerFaireMouvementAGenie", { "done_BEH_Medo_Automate_AssignerFaireMouvementAGenie" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "------------------ Mission se deployer ------------------" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Medo_Automate_AssignerFaireMouvementAGenie, 1, { DEC_Automate_PionsAvecPC(), self._namedParams.mission.zone_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerFaireMouvementAGenie
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerFaireMouvementAGenie"
{
    feedbacks = { { { "done_BEH_Medo_Automate_AssignerFaireMouvementAGenie" }, "BEH_Medo_Automate_AssignerFaireMouvementAGenie" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_AssignerFaireMouvementAGenie, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerStationnerA", { "done_BEH_Mission_Automate_AssignerStationnerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.zone = self.params[2]
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.positionSite = self.positionSite or S_Geometrie_BarycentreZone( self._namedParams.zone )
        --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[// Starté sinon le pointeur T_Point change à chq iteration (donc l'instance
]]--[[// du comportement aussi)
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        local position = DEC_Geometrie_PositionAleatoireDansCercle( self.positionSite, 300 )
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerStationnerA, 1, { ePhase_MRT, pion, position, } )
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_GEN_SeDeployer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerFaireMouvementAGenie, "BEH_Mission_Automate_AssignerStationnerA", nodes.BEH_Mission_Automate_AssignerStationnerA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_GEN_SeDeployer, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_GEN_SeDeployer, "BEH_Medo_Automate_AssignerFaireMouvementAGenie", nodes.BEH_Medo_Automate_AssignerFaireMouvementAGenie }

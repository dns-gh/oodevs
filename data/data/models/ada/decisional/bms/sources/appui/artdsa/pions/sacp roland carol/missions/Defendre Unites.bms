includedFiles = includedFiles or {}
includedFiles["sources/appui/artdsa/pions/sacp roland carol/missions/Defendre Unites.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Mission defendre zone
]]--[[// 
]]--[[// suivre le pion le plus proche du barycentre des pions a defendre
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Pion_ASA_DefendreUnites"
{
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirLibre", {} },
        { "BEH_MAJ_AgressiviteMission", {} },
        { "BEH_Ordre_Inopine", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Obs_EtablirVisionCur", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Dep_SuivreToujoursDeriere", {} },
        { "ACT_RC", {} },
        { "BEH_Eni_Pion_ASA_GererEniDefendreUnites", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.listePionsADefendreCourante = self.listePionsADefendreCourante or {}
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, {} )
                end

            end
        end

        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eIdentifie, M_DOCTRINE_PION_ASA_PH(), } )
        if( not DEC_Agent_AutomateEstEmbraye() ) then
            self.listePionsADefendreCourante = S_PionsNonDetruits( S_SelectionnePCEtSubordonnes( self._namedParams.mission.unites_ ) )
        else
            self.listePionsADefendreCourante = S_PionsNonDetruits( self._namedParams.mission.unites_ )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_PreparationMission, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    self.ePhase = eAppuyer
                    
                                cases_switch_1[1] = true
elseif switch_1 == eAppuyer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnAppui, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    if( DIA_IsListEmpty( self.listePionsADefendreCourante ) ) then
                        do
                            Activate( self.activations.ACT_Info_Trace, 1, { "direct support impossible : no valid units to support", } )
                                                        return

                        end
--[[//determination de l'unité la plus proche du barycentre des 
]]--[[//unites a appuyer
]]                    end

                    local barycentreUnites = DEC_Geometrie_CalculerBarycentreAgents( self.listePionsADefendreCourante )
                    local pionASuivre = S_PionLePlusProche( barycentreUnites, self.listePionsADefendreCourante )
                    Activate( self.activations.BEH_Dep_SuivreToujoursDeriere, 1, { pionASuivre, 0, eProgressionDefaut, eTypeItiMouvement, } )
                    --[[//quand la section est deployée, qu'elle a des ROE tir libre et que les radars sont actifs
]]if( ( F_Pion_GeteEtatRadar( myself ) == eEtatRadar_Ouvert ) and F_Pion_GeteConsigneTir( myself ) == eEtatROE_TirLibre ) then
                        do
                            Activate( self.activations.ACT_RC, 1, { eRC_PretAuTir, } )
                            Activate( self.activations.BEH_Eni_Pion_ASA_GererEniDefendreUnites, 1, { self.listePionsADefendreCourante, } )
                        end
                    end

                    
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            F_Pion_SetobjectifEsquive( myself, nil )
                            DEC_FinMission()
                                                        self.params.__returnValue = eActionEffectuee
                            Halt( self )
                            do return end

                        end
                    end

                    
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GererEnnemisMissionDefendreUnites : Ce comportement permet de gerer les ennemis
]]--[[// dans le cadre de ma mission Escorter
]]--[[//
]]--[[// on doit réaliser une selection sur un ennemi dans les comportements sous
]]--[[// jacents
]]--[[// ******************************************************************************
]]}

node "BEH_Eni_Pion_ASA_GererEniDefendreUnites"
{
    activations =
    {
        { "BEH_Eni_Pion_ASA_Roland_Carol_InterceptionBalistique", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        for _,x in pairs( S_ConnaissancesEnnemiesVivantesPercuesVolantes() ) do
        local _continue = true
do
                Activate( self.activations.BEH_Eni_Pion_ASA_Roland_Carol_InterceptionBalistique, S_Eni_Pion_ASA_DefendreUnites( self._namedParams.listePions ), { x, eReconnu, M_DOCTRINE_PION_ASA_PH(), 700, true, } )
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASA_DefendreUnites = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ASA_GererEniDefendreUnites, "BEH_Eni_Pion_ASA_Roland_Carol_InterceptionBalistique", nodes.BEH_Eni_Pion_ASA_Roland_Carol_InterceptionBalistique }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "BEH_Dep_SuivreToujoursDeriere", nodes.BEH_Dep_SuivreToujoursDeriere }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_DefendreUnites, "BEH_Eni_Pion_ASA_GererEniDefendreUnites", nodes.BEH_Eni_Pion_ASA_GererEniDefendreUnites }

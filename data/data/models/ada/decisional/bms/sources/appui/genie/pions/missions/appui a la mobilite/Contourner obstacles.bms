includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/pions/missions/appui a la mobilite/Contourner obstacles.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_GEN_ContournerObstacles
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_GEN_ContournerObstacles"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Dep_GEN_AllerContournerObstacle", {} },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        if( ModuleBegins() ) then
            do
                DEC_Trace( "------------- To bypass obstacles -----------------" )
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
--[[//-----------------------------------------------------------------
]]--[[// Squelette de mission
]]--[[//-----------------------------------------------------------------
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        switch_1 = self.ePhaseMission
            if switch_1 == ePreparerMission then
                --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                self.ePhaseMission = eProgresser
                
            --[[// Progression tactique
]]elseif switch_1 == eProgresser then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                --[[// Contournement
]]local obstacles = S_Obj_ListeObjetsNonContournes( self._namedParams.mission.obstacles_ )
                for _,obstacle in pairs( obstacles ) do
                local _continue = true
do
                        Activate( self.activations.BEH_Dep_GEN_AllerContournerObstacle, S_Obj_ForceDistance( obstacle ), { obstacle, } )
                                                return

                    end

                end

                self.ePhaseMission = eFinMission
                
            --[[// Fin de la mission
]]elseif switch_1 == eFinMission then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                
                        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_GEN_AllerContournerObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_GEN_AllerContournerObstacle"
{
    activations =
    {
        { "BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType", {} },
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstacle = self.params[1]
    end,

    activate = function( self )
        self.ptObst = self.ptObst or nil
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// erreur éventuelle
]]local loc = DEC_ConnaissanceObjet_Localisation( self._namedParams.obstacle )
                if( loc == nil ) then
                    self.params.__returnValue = eActionImpossible
                    Halt()
                end

                self.ptObst = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( loc )
                if( self.ptObst == nil ) then
                    self.params.__returnValue = eActionImpossible
                    Halt()
                end

            end
        end

        Activate( self.activations.BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType, 1.1, { DEC_ConnaissanceObjet_Type( self._namedParams.obstacle ), } )
        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptObst, eProgressionDirect, eTypeItiMouvement, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType"
{
    activations =
    {
        { "BEH_Objet_Pion_GEN_BrecherObstacle", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjet = self.params[1]
    end,

    activate = function( self )
        local repObjet = nil
        local rDist = 0
        local bObjetProcheSurItineraire = DEC_Itineraire_ProchainObjet( repObjet, rDist, self._namedParams.eTypeObjet )
        if( bObjetProcheSurItineraire and DEC_ConnaissanceObjet_EstValide( repObjet ) and rDist < 200 and not S_Obj_EstContourne( repObjet ) ) then
            Activate( self.activations.BEH_Objet_Pion_GEN_BrecherObstacle, 1, { repObjet, } )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_ContournerObstacles = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_GEN_AllerContournerObstacle, "BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType", nodes.BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GEN_AllerContournerObstacle, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GEN_Ouvrir_ReagirFaceAObjetDeType, "BEH_Objet_Pion_GEN_BrecherObstacle", nodes.BEH_Objet_Pion_GEN_BrecherObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ContournerObstacles, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ContournerObstacles, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ContournerObstacles, "BEH_Dep_GEN_AllerContournerObstacle", nodes.BEH_Dep_GEN_AllerContournerObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ContournerObstacles, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

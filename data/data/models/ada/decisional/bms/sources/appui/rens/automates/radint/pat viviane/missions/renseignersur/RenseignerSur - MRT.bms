includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/automates/radint/pat viviane/missions/renseignersur/RenseignerSur - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_RENS_RADINT_RenseignerSur
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_RENS_RADINT_RenseignerSur"
{
    activations =
    {
        { "ACT_Info_Trace", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_RENS_RADINT_AssignerRenseignerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Obtention Stations et cougar
]]--[[//-----------------------------------------------------------------------------
]]--[[// Une seule normalement!
]]self.listeGazelleViviane = self.listeGazelleViviane or S_Cherche_Automate_Filtre_TypePionOperationnels( DEC_Automate_PionsAvecPC(), "Patrouille_Viviane" )
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ MIS_RenseignerSur: debut MRT $" )
                DEC_SetMission( myself, self._namedParams.mission )
                                do
                    local listePionsSubordonnes = DEC_Automate_PionsSansPC()
                    for _,x in pairs( listePionsSubordonnes ) do
                    local _continue = true
                        do
                            local pion = x
                            F_Pion_SeteEtatEchelon( pion, eEtatEchelon_Second )
                            F_Pion_SeteEtatSoutien( pion, eEtatSoutien_aucun )
                        end

                    end

                end
--[[// Vérification
]]
                if( DIA_IsListEmpty( self.listeGazelleViviane ) ) then
                    do
                        Activate( self.activations.ACT_Info_Trace, 1, { "Unadapted units for the mission", } )
                                                self.params.__returnValue = eActionImpossible
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()

                    end
                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                self.deselect = function() end
                self.destroy = function() end
                Halt()

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.listeGazelleViviane ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_RENS_RADINT_AssignerRenseignerA, 1, { self.listeGazelleViviane, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_RENS_RADINT_RenseignerSur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_RENS_RADINT_RenseignerSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_RENS_RADINT_RenseignerSur, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_RENS_RADINT_RenseignerSur, "BEH_Medo_Automate_RENS_RADINT_AssignerRenseignerA", nodes.BEH_Medo_Automate_RENS_RADINT_AssignerRenseignerA }

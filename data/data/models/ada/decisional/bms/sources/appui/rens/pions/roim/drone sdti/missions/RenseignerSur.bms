includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/roim/drone sdti/missions/RenseignerSur.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_ROIM_RenseignerSur
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_ROIM_SDTI_RenseignerSur"
{
    feedbacks = { { { "done_MIS_Pion_RENS_ROIM_SDTI_RenseignerSur" }, "MIS_Pion_RENS_ROIM_SDTI_RenseignerSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "ACT_Dep_Pion_RENS_VolerA", { "done_ACT_Dep_Pion_RENS_VolerA" } },
        { "ACT_Obs_Pion_RENS_ActiverCamera", { "done_ACT_Obs_Pion_RENS_ActiverCamera" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
        self.ficelleDeVol = {}
        DEC_Copie_ListePoints( self._namedParams.mission.ficelleDeVole_, self.ficelleDeVol )
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        --[[//---------------------------------------------------------------------
]]--[[// Commencer le mode enregistrement
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// imposssible si pas mise en oeuvre
]]if( not myself.bMiseEnOeuvre_ ) then
                    do
                        DEC_Trace( "----- Le drone doit être mise en oeuvre -----" )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
                end

                if( myself.bEnExploitation_ ) then
                    do
                        DEC_Trace( "----- Le drone est en exploitation -----" )
                        DEC_RC( eRC_DroneEnExploitation )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
--[[// pour être sur de revenir au point de départ
]]                end

            DEC_ListePoints_PushBack( self.ficelleDeVol, DEC_Agent_Position() )
            end
--[[//=========================================================================
]]--[[// SQUELETTE DE LA MISSION
]]--[[//
]]--[[// strength = 1
]]--[[//
]]--[[//=========================================================================
]]        end

        switch_1 = self.ePhaseMission
                if switch_1 == ePreparerMission then
                    --[[//---------------------------------------------------------------------
]]--[[// Preparation de la mission
]]--[[//---------------------------------------------------------------------
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[//---------------------------------------------------------------------
]]--[[// Voler
]]--[[//---------------------------------------------------------------------
            ]]elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "DRONE LAUNCHED", } )
                    --[[// Progression
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self.ficelleDeVol, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eEtat = v[1] end
                    --[[// Prendre de la hauteur
]]--[[// données doctrine 
]]Activate( self.activations.ACT_Dep_Pion_RENS_VolerA, 1, { 1000, } )
                    Activate( self.activations.ACT_Obs_Pion_RENS_ActiverCamera, 1, {} )--[[// active pd toute la durée du vol, temps réel 
]]
                    
                --[[//---------------------------------------------------------------------
]]--[[// Fin de la mission 
]]--[[//---------------------------------------------------------------------
        ]]elseif switch_1 == eFinMission then
                    --[[// IMPORTANT POUR AUTOMATE
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )


                else
                                end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Dep_Pion_RENS_VolerA", nodes.ACT_Dep_Pion_RENS_VolerA }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Obs_Pion_RENS_ActiverCamera", nodes.ACT_Obs_Pion_RENS_ActiverCamera }

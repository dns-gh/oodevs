includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/pions/Actions Objet.bms"] = true

include "bit.lua"


--[[// ****************************************************************************
]]--[[// ACT_Obj_Pion_GEN_RealiserTravaux
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]node "ACT_Obj_Pion_GEN_RealiserTravaux"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_RealiserTravaux" }, "ACT_Obj_Pion_GEN_RealiserTravaux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_RealiserTravaux, {value} ) end,
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début travaux
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                local type = DEC_GenObject_Type( self._namedParams.objet )
                self.act = DEC_StartCreerObjet( myself.objMisEnCours_, type, DEC_GenObject_Localisation( self._namedParams.objet ) )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end
                actionKnowledgeCallbacks[ self.act ] = function( arg ) myself.objMisEnCours_ = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    DEC_Trace( "  end of works " )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible then
                    DEC_Trace( "  impossible works " )
                    DEC_Trace( EnumToString( self.eActionObjet, E_EtatActionObjet ) )
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_PreparerObstacle
]]--[[//
]]--[[// Commentaires: pour obstacle de manoeuvre
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_PreparerObstacle"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_PreparerObstacle" }, "ACT_Obj_Pion_GEN_PreparerObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_PreparerObstacle, {value} ) end,
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstacle = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début creation objet
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.act = DEC_StartPreparerObjet( myself.objMisEnCours_, DEC_GenObject_Type( self._namedParams.obstacle ), DEC_GenObject_Localisation( self._namedParams.obstacle ) )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end
                actionKnowledgeCallbacks[ self.act ] = function( arg ) myself.objMisEnCours_ = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                DEC_Trace( "Create prepared object: begin" )
                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if cases_switch_1[1] or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible
                or switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "Impossible to build the object" )
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_ActiverObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Revision MIA
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_ActiverObstacle"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_ActiverObstacle" }, "ACT_Obj_Pion_GEN_ActiverObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_ActiverObstacle, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "  activate obstacle" )
        end

        --[[//-----------------------------------------------------------------
]]--[[// Activation // MIA c'est ici qu'il faut renvoyer l'info! Il faut
]]--[[// une fonction : DEC_PeutActiverObstacle()
]]--[[//-----------------------------------------------------------------
]]if( DEC_ActiverObjet( self._namedParams.repObj ) ) then
            do
                DEC_Trace( "  end of activation " )
                                self:SendFeedback( eActionEffectuee )
                do return end

            end
        else
            self:SendFeedback( eActionImpossible )
            do return end
        end

    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_ValoriserObstacle()
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Révision MIA
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_ValoriserObstacle"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_ValoriserObstacle" }, "ACT_Obj_Pion_GEN_ValoriserObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_ValoriserObstacle, {value} ) end,
    actuators =
    {
        obstacle = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début creation objet
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.act = DEC_StartValoriserObjet( self._namedParams.repObj )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                DEC_Trace( "----- To improve obstacle: begin ----" )
                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if cases_switch_1[1] or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible
                or switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "Impossible to improve the object" )
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_ReduireObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_ReduireObstacle"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_ReduireObstacle" }, "ACT_Obj_Pion_GEN_ReduireObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_ReduireObstacle, {value} ) end,
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début creation objet
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.act = DEC_StartDetruireObjet( self._namedParams.repObj )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                DEC_Trace( "Begin to remove" )
                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if cases_switch_1[1] or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible
                or switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "Impossible to remove the object" )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_CreerContournement
]]--[[//
]]--[[// Commentaires: coefficient de gain de contournement
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_CreerContournement"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_CreerContournement" }, "ACT_Obj_Pion_GEN_CreerContournement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_CreerContournement, {value} ) end,
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début contournement
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.act = DEC_StartCreerContournementObjet( self._namedParams.repObj )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_ContournementRealise )
                        else
                            DEC_Message( eRC_ContournementRealise )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if cases_switch_1[1] or switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible then
                    DEC_Trace( "Impossible to bypass" )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// ******************************************************************************
]]--[[// ACT_Obj_Pion_GEN_ReprendreTravaux
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]node "ACT_Obj_Pion_GEN_ReprendreTravaux"
{
    feedbacks = { { { "done_ACT_Obj_Pion_GEN_ReprendreTravaux" }, "ACT_Obj_Pion_GEN_ReprendreTravaux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_GEN_ReprendreTravaux, {value} ) end,
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début contournement
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_Trace( "  resume obstacle creation: " )
                self.act = DEC_StartReprendreTravauxObjet( self._namedParams.repObj )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
                if cases_switch_1[1] or switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible then
                    DEC_Trace( "impossible obstacle creation" )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/recueillir une formation aeromobile/Recueillir une Formation Aeromobile - MRT.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Recueillir une formation Aeromobile :
]]--[[// =====================================
]]--[[//
]]--[[// Commentaires :
]]--[[//
]]--[[// On donne un coup d'arret avec les moyens air-air. La sonnette est choisi parmis
]]--[[// les unites qui ne pourront pas assurer le coup d'arret.
]]--[[// les HMLog attendent sur le point de regroupement.
]]--[[//
]]--[[// les HAH se mettent en position sur la LIA pour accueillir les amis
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile"
{
    activations =
    {
        { "BEH_ROE_Automate_TirRestreint", {} },
        { "BEH_Ordre_Automate_Poursuivre_", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsDonnerCoupArret = self.eEtatMissionsDonnerCoupArret or eActionEnCours
        self.listeZonesDeRecueil = self.listeZonesDeRecueil or {}
        self.localisationsASurveiller = self.localisationsASurveiller or {}
        self.listePIA = self.listePIA or {}
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeHAC = self.listeHAC or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, AntitankHelicopterPatrol )
        self.listeHAP = self.listeHAP or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, EscortAndCloseSupportHelicopterPatrol )
        self.listePeutTraiterAero = self.listePeutTraiterAero or {}
        self.listeSurveiller = self.listeSurveiller or {}
        self.listeDonnerCoupArretDroit = self.listeDonnerCoupArretDroit or {}
        self.listeDonnerCoupArretGauche = self.listeDonnerCoupArretGauche or {}
        self.listePionRef = self.listePionRef or {}
        self.pointDeDislocationPionRef = self.pointDeDislocationPionRef or nil
        self.pointDeDislocationGauche = self.pointDeDislocationGauche or nil
        self.pointDeDislocationDroit = self.pointDeDislocationDroit or nil
        if( ModuleBegins() ) then
            do
                self.listeSurveiller = self.listeHAC
                self.listePeutTraiterAero = self.listeHAP
                --[[// si on a pas encore d'unité pour faire l'observation sur le PIA, en
]]--[[// prendre un qui peut attaquer les aéronefs
]]if( DIA_IsListEmpty( self.listeSurveiller ) ) then
                    do
                        if( not DIA_IsListEmpty( self.listePeutTraiterAero ) ) then
                            do
                                DIA_PushBack( self.listeSurveiller, DIA_GetAt( self.listePeutTraiterAero, 0 ) )
                                DIA_Remove( self.listePeutTraiterAero, DIA_GetAt( self.listePeutTraiterAero, 0 ) )
                            end
                        else
do
                                                                self.params.__returnValue = eActionImpossible
                                Halt()

                            end
                        end

                    end
                end

                DEC_SetMission( myself, self._namedParams.mission )
                --[[//calcul de la liste des PIA
]]local LIA = DEC_GetLima( eTypeLima_LIA )
                if( LIA == nil ) then
                    do
                        DEC_Trace( "Mission needs LIA" )
                        DEC_Warning( eRC_MissionImpossibleLimaInvalide )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                self.listePIA = DEC_Geometrie_CalculerPositionsParRapportALima( LIA, 10, #( self.selPions ) )
                if( self.listePIA == nil ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleLimaInvalide )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
--[[// -----------------------------------------------------------------
]]--[[// Vérifier les moyens, determiner les patrouilles qui vont aller 
]]--[[// DonnerCoupArret
]]--[[// -----------------------------------------------------------------
]]                end

                local unSurDeux = false
                for _,x in pairs( self.listePeutTraiterAero ) do
                local _continue = true
do
                        if( DIA_IsListEmpty( self.listePionRef ) ) then
                            do
                                DIA_PushBack( self.listePionRef, x )
                                _continue = false
                            end
--[[// 1 sur 2
]]                        end

                            if _continue then
                            if( unSurDeux ) then
                                DIA_PushBack( self.listeDonnerCoupArretDroit, x )
                            else
                                DIA_PushBack( self.listeDonnerCoupArretGauche, x )
                            end

                            unSurDeux = not unSurDeux
                        end
                    end

                end

                if( DIA_IsListEmpty( self.listeSurveiller ) or DIA_IsListEmpty( self.listePionRef ) or ( DIA_IsListEmpty( self.listeDonnerCoupArretDroit ) ) and ( DIA_IsListEmpty( self.listeDonnerCoupArretGauche ) ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                local barycentreZone = S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
                --[[//point arriere
]]local directionEnnemi = DEC_GetDirectionEnnemi( self._namedParams.mission )
                local directionBuffer = DEC_Geometrie_CopieEtInverseDirection( directionEnnemi )
                self.pointDeDislocationPionRef = DEC_Geometrie_PositionTranslateDir( barycentreZone, directionBuffer, 5000 )
                --[[//point flanc gauche
]]directionBuffer = DEC_Geometrie_CreerDirectionPerpendiculaire( directionEnnemi, true )
                self.pointDeDislocationGauche = DEC_Geometrie_PositionTranslateDir( barycentreZone, directionBuffer, 5000 )
                --[[//point flanc droit
]]directionBuffer = DEC_Geometrie_CreerDirectionPerpendiculaire( directionEnnemi, false )
                self.pointDeDislocationDroit = DEC_Geometrie_PositionTranslateDir( barycentreZone, directionBuffer, 5000 )
                --[[//creation de la liste des zones d'identification et d'accueil
]]local it = 0
                while it < DEC_ListePoints_Size( self.listePIA ) do
                    local _continue = true
do
                        local zoneAccueil = DEC_Geometrie_CreerLocalisationCercle( DEC_ListePoints_GetAt( self.listePIA, it ), 2000 )
                        DEC_UserTypeList_PushBack( self.listeZonesDeRecueil, zoneAccueil )
                    end
--[[// creation de la liste des zones pour les couprs d'arret
]]                it = it + 1
                end

                for _,x in pairs( self.listePeutTraiterAero ) do
                local _continue = true
                    DEC_UserTypeList_PushBack( self.localisationsASurveiller, self._namedParams.mission.zone_ )

                end

                Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
            end
        end

        switch_1 = self.ePhase
            if switch_1 == eMRT_AssignerMissions then
                --[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionsDonnerCoupArret == eActionImpossible ) then
                    do
                        self.ePhase = eMRT_MissionImpossible
                                                return

                    end
                end

                if( self.eEtatMissionsDonnerCoupArret == eActionEffectuee ) then
                    do
                        self.ePhase = eMRT_Valider
                                                return

                    end
--[[// DonnerCoupArret : controle de creation mission
]]                end

                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.listeSurveiller ) + #( self.listeDonnerCoupArretGauche ) + #( self.listeDonnerCoupArretDroit ) + #( self.listePionRef ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatMissionsDonnerCoupArret = v else rawset( t, k, v ) end end } ) )
                --[[// DonnerCoupArret Flanc droit
]]if( not DIA_IsListEmpty( self.listeDonnerCoupArretDroit ) ) then
                    Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, 1, { ePhase_MRT, self.listeDonnerCoupArretDroit, self._namedParams.mission.zone_, self.pointDeDislocationDroit, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, false, } )
                end

                --[[// DonnerCoupArret Flanc gauche
]]if( not DIA_IsListEmpty( self.listeDonnerCoupArretGauche ) ) then
                    Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, 1, { ePhase_MRT, self.listeDonnerCoupArretGauche, self._namedParams.mission.zone_, self.pointDeDislocationGauche, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, false, } )
                end

                --[[// Detruire dans zone au pion de ref.
]]if( not DIA_IsListEmpty( self.listePionRef ) ) then
                    Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, 1, { ePhase_MRT, self.listePionRef, self._namedParams.mission.zone_, self.pointDeDislocationPionRef, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, false, } )
                end

                --[[// Receuillir sur la LIA
]]--[[// Surveiller les zones de recueil
]]if( not DIA_IsListEmpty( self.listeSurveiller ) ) then
                    Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe, 1, { ePhase_MRT, self.listeSurveiller, self.listeZonesDeRecueil, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, } )
                end

                
            elseif switch_1 == eMRT_MissionImpossible then
                DEC_RC( eRC_MissionImpossible )
                                self.params.__returnValue = eActionImpossible
                Halt()

            elseif switch_1 == eMRT_Valider then
                DEC_MRT_Valide()
                                self.params.__returnValue = eActionEffectuee
                Halt()

                        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile, "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_RecueillirFormationAeromobile, "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe }

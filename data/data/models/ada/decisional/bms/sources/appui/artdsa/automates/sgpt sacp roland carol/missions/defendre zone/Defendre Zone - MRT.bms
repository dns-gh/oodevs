includedFiles = includedFiles or {}
includedFiles["sources/appui/artdsa/automates/sgpt sacp roland carol/missions/defendre zone/Defendre Zone - MRT.bms"] = true

local emptyTable = emptyTable

node "MIS_Automate_MRT_ASA_DefendreZone"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ASA_DefendreZone" }, "MIS_Automate_MRT_ASA_DefendreZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ASA_DefendreZone, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASA_AssignerMissionsDefendreZoneAListe", { "done_BEH_Medo_Automate_ASA_AssignerMissionsDefendreZoneAListe" } },
        { "BEH_Mission_Automate_AssignerStationnerA", { "done_BEH_Mission_Automate_AssignerStationnerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        --[[// variables persistantes
]]self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsDefendreZone = self.eEtatMissionsDefendreZone or eActionEnCours
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.barycentreZone = self.barycentreZone or S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeSectionRolandCarol = self.listeSectionRolandCarol or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "ShortRangeSurfaceToAirDefenseTroop" )
        if( ModuleBegins() ) then
            do
                if( DIA_IsListEmpty( self.listeSectionRolandCarol ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                if( DEC_ListePoints_Size( self._namedParams.mission.positionsSections_ ) == 0 ) then
                    self.ePhase = eMRT_MissionImpossible
                end

                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
--[[// =============================================================================
]]--[[// Vérifier les moyens, determiner les patrouilles qui vont aller reconnaitre
]]--[[// le contour de l'ennemi
]]--[[// =============================================================================                                  
]]        end

         do
            local _continue = true
--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]--[[//controle des creations de missions
]]--[[//Defendre zone à partir de position calculées
]]--[[//Le pc va toujours stationner au centre de la zone défendue
]]            local switch_1 = self.ePhase
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsDefendreZone == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsDefendreZone == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listeSectionRolandCarol ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsDefendreZone = v[1] end
                    if( not DIA_IsListEmpty( self.listeSectionRolandCarol ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ASA_AssignerMissionsDefendreZoneAListe, 1, { ePhase_MRT, self.listeSectionRolandCarol, self._namedParams.mission.positionsSections_, self._namedParams.mission.zone_, } )
                    end

                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerA, 1, { ePhase_MRT, self.pionPC, self.barycentreZone, } )
                    _continue = false
                elseif switch_1 == eMRT_MissionImpossible then
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASA_DefendreZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreZone, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreZone, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreZone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreZone, "BEH_Medo_Automate_ASA_AssignerMissionsDefendreZoneAListe", nodes.BEH_Medo_Automate_ASA_AssignerMissionsDefendreZoneAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreZone, "BEH_Mission_Automate_AssignerStationnerA", nodes.BEH_Mission_Automate_AssignerStationnerA }

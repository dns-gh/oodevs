includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/pions/missions/aide a mobilite dans zone/ReconnaitreZoneDeDeploiement.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_NBC_ReconnaitreZone
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Comportements:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_ReconnaitreZoneDeDeploiement"
{
    feedbacks = { { { "done_MIS_Pion_LOG_ReconnaitreZoneDeDeploiement" }, "MIS_Pion_LOG_ReconnaitreZoneDeDeploiement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obs_ObserverZone", { "done_ACT_Obs_ObserverZone" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.pt = self.pt or S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
        if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
--[[// 1) Preparation de la mission
]]--[[// 2) Progression jusqu'au point à reconnaitre
]]--[[// Se poster => Changement uniquement sur ordres !
]]--[[// Fin de la mission
]]            local switch_1 = self.ePhaseMission
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eRejoindrePosition
                    _continue = false
                elseif switch_1 == eRejoindrePosition then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eSePoster
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.pt, eProgressionReco, eTypeItiReconnaissance, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eSePoster then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                _continue = false
                            end

                        end
                    end

                        if _continue then
                        Activate( self.activations.ACT_Obs_ObserverZone, 1, { self.pt, M_LOG_RECO_CAPACITE(), } )
self.done_ACT_Obs_ObserverZone = function( self, _, v ) self.eEtat = v[1] end
                        _continue = false
                    end
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, emptyTable )
                    _continue = false
                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, "ACT_Obs_ObserverZone", nodes.ACT_Obs_ObserverZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_ReconnaitreZoneDeDeploiement, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

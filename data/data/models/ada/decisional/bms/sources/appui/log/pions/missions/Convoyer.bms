includedFiles = includedFiles or {}
includedFiles["sources/appui/log/pions/missions/Convoyer.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_LOG_Convoyer
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// new MIA
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_Convoyer"
{
    feedbacks = { { { "done_MIS_Pion_LOG_Convoyer" }, "MIS_Pion_LOG_Convoyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_LOG_Convoyer, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Dep_LOG_Suivre", { "done_BEH_Dep_LOG_Suivre" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        newPhase = DEC_Ravitaillement_Convoi_ActionCourante()
        if newPhase ~= self.ePhase then
           self.ePhase = newPhase
           self.itinerary = nil
        end
        self.eEtat = self.eEtat or eActionEnCours        
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                DEC_Ravitaillement_Convoi_FinMission()
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        if self.ePhase == eConvoyerAction_None then
        elseif self.ePhase == eConvoyerAction_Setup then
        elseif self.ePhase == eConvoyerAction_Load then
            Activate( self.activations.ACT_RC, 1, { eRC_Convoi_ChargementEnCours, } )
        elseif self.ePhase == eConvoyerAction_Unload then
            Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DechargementEnCours } )
        elseif self.ePhase == eConvoyerAction_MoveToSupplier then
            self.itinerary = self.itinerary or DEC_Ravitaillement_Convoi_ItineraireVersProchaineDestination()
            Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DeplacementVersPointChargement, } )
            Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { DEC_Ravitaillement_Convoi_Ravitailleur(), 500, 900, self.itinerary } )
            if( DEC_Geometrie_Distance( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_Ravitailleur():DEC_Agent_Position() ) < 500 ) then
                DEC_Ravitaillement_Convoi_DeplacementVersRavitailleurEffectue();
            end
        elseif self.ePhase == eConvoyerAction_MoveToSupplyRecipient then
            self.itinerary = self.itinerary or DEC_Ravitaillement_Convoi_ItineraireVersProchaineDestination()
            Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DeplacementVersPointDechargement, } )
            Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { DEC_Ravitaillement_Convoi_DestinataireCourant(), 500, 900, self.itinerary } )
            if( DEC_Geometrie_Distance( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_DestinataireCourant():DEC_Agent_Position() ) < 500 ) then
                DEC_Ravitaillement_Convoi_DeplacementVersDestinataireEffectue();
            end
        elseif self.ePhase == eConvoyerAction_MoveToTransportersProvider then
            self.itinerary = self.itinerary or DEC_Ravitaillement_Convoi_ItineraireVersProchaineDestination()
            Activate( self.activations.ACT_RC, 1, { eRC_Convoi_Retour, } )
            Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { DEC_Ravitaillement_Convoi_Transporteur(), 500, 900, self.itinerary } )
            if( DEC_Geometrie_Distance( DEC_Agent_Position(), DEC_Ravitaillement_Convoi_Transporteur():DEC_Agent_Position() ) < 500 ) then
                DEC_Ravitaillement_Convoi_DeplacementVersTransporteurEffectue();
            end
        end
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_LOG_Suivre
]]--[[//
]]--[[// Commentaires: suivre une unite ami
]]--[[//         - S'arrete a distanceMin du pion suivit
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_LOG_Suivre"
{
    feedbacks = { { { "done_BEH_Dep_LOG_Suivre" }, "BEH_Dep_LOG_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_LOG_Suivre, {value} ) end,
    activations =
    {
        { "BEH_Dep_ProgressionAvecEscortePossibleSur", { "done_BEH_Dep_ProgressionAvecEscortePossibleSur" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ami = self.params[1]
        self._namedParams.rDistanceMin = self.params[2]
        self._namedParams.rDistanceMax = self.params[3]
        self._namedParams.wayPoints = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
                self.itVersAmi = self.itVersAmi or DEC_Geometrie_CreerListePoints()
        self.eComportement = self.eComportement or eCreerItineraire
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatObstacle = self.eEtatObstacle or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Résultat d'évènnements externes
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "L'unite suit " .. DEC_GetSzName( self._namedParams.ami ) )
        end

         do
            local _continue = true
--[[//---------------------------------------------------------------------
]]--[[// Rejoindre l'ami. A la fin si l'ami, n'est pas la, le rejoindre à
]]--[[// nouveaux etc.
]]--[[//---------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 1) Creer l'itineraire et mettre à jour la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//itVersAmi = S_Misc_DetruireItineraire( itVersAmi, "BEH_Dep_Suivre: " );
]]--[[//itVersAmi = DEC_CreerItineraire( ami.DEC_Agent_Position(), eTypeItiLogistique );
]]--[[//-----------------------------------------------------------------
]]--[[// 3) Rejoindre la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Si on a fini de parcourir l'itineraire on recalcul l'itineraire
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement vers l'unite
]]--[[//-----------------------------------------------------------------------------
]]--[[//behavior BEH_Dep_Progresser( itVersAmi, eProgressionDirect ) return in eEtat;
]]--[[// Aller au plus vite
]]--[[//-----------------------------------------------------------------------------
]]--[[// L'unité se rapproche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En parallèle, surveiller que l'on est pas près de cette unite.
]]--[[// Dans ce cas on est prêt pour l'intervention
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.eComportement
            local cases_switch_1 = {}
                if switch_1 == eCreerItineraire then
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        do return end
                    end
                    
                    self.itVersAmi = DEC_Copie_Liste( self._namedParams.wayPoints )
                    DEC_Copie_PointDansListePoints( DEC_Agent_PositionPtr( self._namedParams.ami ), self.itVersAmi )
                    self.eComportement = eRejoindre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindre then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                            self.eComportement = eCreerItineraire
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionAvecEscortePossibleSur, 1, { self.itVersAmi, eProgressionDirect, eTypeItiLogistique, } )
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        self.eEtat = eActionEffectuee
                    end

                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) <= self._namedParams.rDistanceMin ) then
                        do
                            Activate( self.activations.ACT_Dep_SePoster, 1.5, emptyTable )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ami:DEC_Agent_Position(), } )
                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

    destroy = function( self )
                S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_Convoyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "BEH_Dep_ProgressionAvecEscortePossibleSur", nodes.BEH_Dep_ProgressionAvecEscortePossibleSur }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "BEH_Dep_LOG_Suivre", nodes.BEH_Dep_LOG_Suivre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_Info_Trace", nodes.ACT_Info_Trace }

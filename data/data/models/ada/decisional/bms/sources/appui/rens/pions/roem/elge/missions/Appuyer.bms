includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/roem/elge/missions/Appuyer.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_ROEM_Appuyer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_ROEM_Appuyer"
{
    feedbacks = { { { "done_MIS_Pion_RENS_ROEM_Appuyer" }, "MIS_Pion_RENS_ROEM_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_RENS_ROEM_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Objet_Rens_ActiverBrouilleur", { "done_BEH_Objet_Rens_ActiverBrouilleur" } },
        { "BEH_Objet_Rens_DeposerBrouilleur", { "done_BEH_Objet_Rens_DeposerBrouilleur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "Support mission begining", } )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    _continue = false
                --[[// Progresser jusqu'à zone de débarquement
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eAppuyer
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mission.positionDeploiement_, eProgressionReco, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// eAppuyer
]]                cases_switch_1[2] = true
elseif switch_1 == eAppuyer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    --[[//---------------------------------------------------------------------
]]--[[// Apres avoir deposer le Brod --> Brouillage // MIA amélioration
]]--[[// --> order de conduite brouiller
]]--[[// halt seule
]]--[[//---------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                StartActivateOverride( self, self.activations.BEH_Objet_Rens_ActiverBrouilleur, 1, { eTypeObjectZoneBrouillage, } )
                                self.ePhaseMission = eFinMission
                                                                do return end

                            end

                        end
--[[//---------------------------------------------------------------------
]]--[[// Deposer le Brod
]]--[[//---------------------------------------------------------------------
]]                    end

                    Activate( self.activations.BEH_Objet_Rens_DeposerBrouilleur, 1, emptyTable )
self.done_BEH_Objet_Rens_DeposerBrouilleur = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Fin de la mission --> SUR ORDRE
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do return end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mission.pointRegroupement_, eProgressionReco, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Objet_Rens_DeposerBrouilleur
]]--[[//
]]--[[// Commentaires:juste delai
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Objet_Rens_DeposerBrouilleur"
{
    feedbacks = { { { "done_BEH_Objet_Rens_DeposerBrouilleur" }, "BEH_Objet_Rens_DeposerBrouilleur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Objet_Rens_DeposerBrouilleur, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Objet_Rens_ActiverBrouilleur
]]--[[//
]]--[[// Commentaires:comportement starté: durée de vie: 15min
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Objet_Rens_ActiverBrouilleur"
{
    feedbacks = { { { "done_BEH_Objet_Rens_ActiverBrouilleur" }, "BEH_Objet_Rens_ActiverBrouilleur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Objet_Rens_ActiverBrouilleur, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "ACT_Obs_Pion_RENS_ActiverBrouillage", { "done_ACT_Obs_Pion_RENS_ActiverBrouillage" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjectZoneBrouillage = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_Misc_Delai, 1, { 1, 15, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtat = v[1] end
        Activate( self.activations.ACT_Obs_Pion_RENS_ActiverBrouillage, 1, { self._namedParams.eTypeObjectZoneBrouillage, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_ROEM_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Objet_Rens_ActiverBrouilleur, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Rens_ActiverBrouilleur, "ACT_Obs_Pion_RENS_ActiverBrouillage", nodes.ACT_Obs_Pion_RENS_ActiverBrouillage }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Objet_Rens_ActiverBrouilleur", nodes.BEH_Objet_Rens_ActiverBrouilleur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Objet_Rens_DeposerBrouilleur", nodes.BEH_Objet_Rens_DeposerBrouilleur }

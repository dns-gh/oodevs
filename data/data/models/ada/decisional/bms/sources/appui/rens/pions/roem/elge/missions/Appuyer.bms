includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/roem/elge/missions/Appuyer.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_ROEM_Appuyer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_ROEM_Appuyer"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "ACT_Info_Trace", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "BEH_Dep_ProgressionVers", { "onHalt" } },
        { "BEH_Objet_Rens_ActiverBrouilleur", { "onHalt" } },
        { "BEH_Objet_Rens_DeposerBrouilleur", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Pion_RENS_ROEM_Appuyer" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = ActivateWithStart,

    internalactivate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self.params.__returnValue = eActionEffectuee
            Feedback( self.feedbacks["onHalt"], { "MIS_Pion_RENS_ROEM_Appuyer" } )
Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "Support mission begining", } )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
        end

         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[// Progresser jusqu'à zone de débarquement
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eAppuyer
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.mission.positionDeploiement_, eProgressionReco, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// eAppuyer
]]                cases_switch_1[2] = true
elseif switch_1 == eAppuyer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    --[[//---------------------------------------------------------------------
]]--[[// Apres avoir deposer le Brod --> Brouillage // MIA amélioration
]]--[[// --> order de conduite brouiller
]]--[[// halt seule
]]--[[//---------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                StartInstance( self, self.activations.BEH_Objet_Rens_ActiverBrouilleur, 1, { eTypeObjectZoneBrouillage, } )
                                self.ePhaseMission = eFinMission
                                                                return

                            end

                        end
--[[//---------------------------------------------------------------------
]]--[[// Deposer le Brod
]]--[[//---------------------------------------------------------------------
]]                    end

                    Activate( self.activations.BEH_Objet_Rens_DeposerBrouilleur, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// Fin de la mission --> SUR ORDRE
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        return
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.mission.pointRegroupement_, eProgressionReco, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Objet_Rens_DeposerBrouilleur
]]--[[//
]]--[[// Commentaires:juste delai
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Objet_Rens_DeposerBrouilleur"
{
    feedbacks = { { { "onHalt" }, "BEH_Objet_Rens_DeposerBrouilleur" } },

    create = function( self )
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            self.params.__returnValue = eActionEffectuee
            return
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Objet_Rens_ActiverBrouilleur
]]--[[//
]]--[[// Commentaires:comportement starté: durée de vie: 15min
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Objet_Rens_ActiverBrouilleur"
{
    activations =
    {
        { "ACT_Misc_Delai", { "onHalt" } },
        { "ACT_Obs_Pion_RENS_ActiverBrouillage", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Objet_Rens_ActiverBrouilleur" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjectZoneBrouillage = self.params[1]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        Feedback( self.feedbacks["onHalt"], { "BEH_Objet_Rens_ActiverBrouilleur" } )
Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, 15, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.ACT_Obs_Pion_RENS_ActiverBrouillage, 1, { self._namedParams.eTypeObjectZoneBrouillage, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_ROEM_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Objet_Rens_ActiverBrouilleur, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Rens_ActiverBrouilleur, "ACT_Obs_Pion_RENS_ActiverBrouillage", nodes.ACT_Obs_Pion_RENS_ActiverBrouillage }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Objet_Rens_ActiverBrouilleur", nodes.BEH_Objet_Rens_ActiverBrouilleur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROEM_Appuyer, "BEH_Objet_Rens_DeposerBrouilleur", nodes.BEH_Objet_Rens_DeposerBrouilleur }

includedFiles = includedFiles or {}
includedFiles["sources/appui/appuimob/automates/missions/transporter/Transporter - MRT.bms"] = true

node "MIS_Automate_MRT_LOG_TransporterUnites"
{
    feedbacks = { { { "done_MIS_Automate_MRT_LOG_TransporterUnites" }, "MIS_Automate_MRT_LOG_TransporterUnites" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_LOG_TransporterUnites, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe", { "done_BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsTransporter = self.eEtatMissionsTransporter or eActionEnCours
        self.listeUnitesPeuventTransporter = self.listeUnitesPeuventTransporter or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PelotonAppuiMob" )
        self.listePourTransport = self.listePourTransport or {}
        self.listePionsATransporter = self.listePionsATransporter or {}
        if( ModuleBegins() ) then
            do
                if( ( #( self.listeUnitesPeuventTransporter ) == 0 or #( self.listeUnitesPeuventTransporter ) == nil ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                self.listePionsATransporter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesATransporter_ )
                if( ( #( self.listePionsATransporter ) == 0 or #( self.listePionsATransporter ) == nil ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                if( #( self.listeUnitesPeuventTransporter ) > #( self.listePionsATransporter ) ) then
                    do
                        local i = 0
                        while i < #( self.listePionsATransporter ) do
                            local _continue = true
                            do
                                DIA_PushBack( self.listePourTransport, DIA_GetAt( self.listeUnitesPeuventTransporter, i ) )
                            end
                        i = i + 1
                        end

                    end
                else
                    self.listePourTransport = self.listeUnitesPeuventTransporter
                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsTransporter == eActionImpossible ) then
                        do
                            DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsTransporter == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[// Transporter : controle de creation mission
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listePourTransport ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsTransporter = v[1] end
                    --[[// Transporter : ordre de creation des missions
]]Activate( self.activations.BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe, 1, { ePhase_MRT, self.listePourTransport, self._namedParams.mission.pointRendezVous_, self._namedParams.mission.pointDestination_, self.listePionsATransporter, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_LOG_TransporterUnites = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_TransporterUnites, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_TransporterUnites, "BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe", nodes.BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe }

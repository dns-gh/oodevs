includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/pions/common/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Pions/Common/Actions.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 9/09/05 15:19 $
]]--[[// $Revision: 21 $
]]--[[// $Workfile: Actions.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
node "ACT_Obj_Pion_ASS_RealiserObjet"
{
    feedbacks = { { { "done_ACT_Obj_Pion_ASS_RealiserObjet" }, "ACT_Obj_Pion_ASS_RealiserObjet" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_ASS_RealiserObjet, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjet = self.params[1]
        self._namedParams.locObjet = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or nil--[[//objet reel pour la creation de la representation de l'abatti
]]
        if( ModuleBegins() ) then
            do
                if( self._namedParams.locObjet == nil ) then
                    do
                        --[[// RC_ TravauxImpossible
]]                        self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                local xType = S_TypeObject_ToString( self._namedParams.eTypeObjet )
                if( not DEC_Agent_PeutConstruireObjet( xType ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "object construction: begin" )
                self.actionID = DEC_StartCreerObjet( self.repObj, xType, self._namedParams.locObjet )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end
                actionKnowledgeCallbacks[ self.actionID ] = function( arg ) self.repObj = arg end

                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMine );
]]            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "object construction: end" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite then
                    DEC_Trace( "object construction: no capability" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "object construction: not enough issue" )
                                cases_switch_1[4] = true
                end
                if cases_switch_1[4] or switch_1 == eActionObjetImpossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "contruction resume" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "constrution suspended" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "realisation arretee" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[//LLS 01/09/2009 pour automate artillerie à la fois reco + tir
]]node "ACT_Obj_Pion_ASS_RealiserUnObjet"
{
    feedbacks = { { { "done_ACT_Obj_Pion_ASS_RealiserUnObjet" }, "ACT_Obj_Pion_ASS_RealiserUnObjet" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_ASS_RealiserUnObjet, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjet = self.params[1]
        self._namedParams.locObjet = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or nil--[[//objet reel pour la creation de la representation de l'abatti
]]
        if( ModuleBegins() ) then
            do
                if( self._namedParams.locObjet == nil ) then
                    do
                        --[[// RC_ TravauxImpossible
]]                        self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( self._namedParams.eTypeObjet ) ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "realisation objet : debut" )
                self.actionID = DEC_StartCreerObjet( self.repObj, S_TypeObject_ToString( self._namedParams.eTypeObjet ), self._namedParams.locObjet )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end
                actionKnowledgeCallbacks[ self.actionID ] = function( arg ) self.repObj = arg end

                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
--[[//Insertion de l'objet crée, zone implantation canon, dans la liste des connaissances objet du pion reco
]]            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_UserTypeList_PushBack( myself:GetlisteZonesTir_(), self.repObj )
                    DEC_Trace( "realisation objet : fin realisation" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite then
                    DEC_Trace( "realisation objet : pas de capacites" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "realisation objet : manque dotation" )
                                cases_switch_1[4] = true
                end
                if cases_switch_1[4] or switch_1 == eActionObjetImpossible then
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "reprise realisation" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "realisation suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "realisation arretee" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Info_Pion_ASS_DisponibiliteAuTir"
{
    feedbacks = { { { "done_ACT_Info_Pion_ASS_DisponibiliteAuTir" }, "ACT_Info_Pion_ASS_DisponibiliteAuTir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Info_Pion_ASS_DisponibiliteAuTir, {value} ) end,
    actuators =
    {
        tir_indirect = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eDisponibiliteAuTir = self.params[1]
    end,

    select = function( self )
                DEC_Agent_ChangeDisponibiliteAuTirIndirect( self._namedParams.eDisponibiliteAuTir )
    end,

    deselect = function( self )
                DEC_Agent_ChangeDisponibiliteAuTirIndirect( eDisponibiliteAuTir_Indisponible )
    end,

    destroy = function( self )
                DEC_Agent_ChangeDisponibiliteAuTirIndirect( eDisponibiliteAuTir_Indisponible )
    end,

}

node "ACT_Tir_Pion_ASS_SurPosition"
{
    feedbacks = { { { "done_ACT_Tir_Pion_ASS_SurPosition" }, "ACT_Tir_Pion_ASS_SurPosition" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_Pion_ASS_SurPosition, {value} ) end,
    actuators =
    {
        tir_indirect = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.dotation = self.params[1]
        self._namedParams.rNombreObus = self.params[2]
        self._namedParams.ptCible = self.params[3]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirIndirect_EnCours
        self.bReprendre = self.bReprendre or false
        self.bPremierCoupPartie = self.bPremierCoupPartie or false
        self.actionID = self.actionID or 0
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "start indirect fire" )
                self.actionID = DEC_StartTirIndirectSurPosition( self._namedParams.dotation, self._namedParams.rNombreObus, self._namedParams.ptCible )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

        myself.eEtatTir_Indirect_ = self.eTir
         do
            local _continue = true
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]--[[// {	if( ! DEC_Agent_AutomateEstEmbraye() )	    DEC_RC(  eRC_TirAnnule  );    else        DEC_Message(  eRC_TirAnnule  );}
]]            local switch_1 = self.eTir
                if switch_1 == eActionTirIndirect_Impossible then
                    DEC_Trace( "fire on: disabled knowledge" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirIndirect_Termine then
                    DEC_Trace( "fire on: terminated fire" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirExecute )
                        else
                            DEC_Message( eRC_TirExecute )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirIndirect_NoAmmo then
                    DEC_Trace( "fire on: no more ammunition" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirExecute )
                        else
                            DEC_Message( eRC_TirExecute )
                        end

                    end

                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirImpossiblePlusDeMunitions )
                        else
                            DEC_Message( eRC_TirImpossiblePlusDeMunitions )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirIndirect_PasDeCapacite then
                    DEC_Trace( "fire on: no capability" )
                    DEC_RC( eRC_TirAnnule )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirIndirect_EnCours then
                    if( self.bPremierCoupPartie ) then
                        do
                            if( not DEC_Agent_AutomateEstEmbraye() ) then
                                DEC_RC( eRC_PremierCoupParti )
                            else
                                DEC_Message( eRC_PremierCoupParti )
                            end

                        end
                    end

                    self.bPremierCoupPartie = ModuleBegins()
                    DEC_Trace( "fire on: firing ..." )
                    _continue = false
                                end
            end

                self:SendFeedback( eActionEnCours )
        do return end

    end,

    deselect = function( self )
                DEC_Trace( "stop indirect fire: on focus loss" )
        self.bReprendre = true
        myself.eEtatTir_Indirect_ = eActionTirIndirect_None
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                DEC_Trace( "stop indirect fire: spontaneous end" )
        myself.eEtatTir_Indirect_ = eActionTirIndirect_None
        do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_TirAnnule )
            else
                DEC_Message( eRC_TirAnnule )
            end

        end

        self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_MAJ_Pion_ASS_EtatTirIndirect"
{
    feedbacks = { { { "done_ACT_MAJ_Pion_ASS_EtatTirIndirect" }, "ACT_MAJ_Pion_ASS_EtatTirIndirect" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_MAJ_Pion_ASS_EtatTirIndirect, {value} ) end,
    actuators =
    {
        tir_indirect = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTir = self.params[1]
    end,

    select = function( self )
                myself.eEtatTir_Indirect_ = self._namedParams.eTir
    end,

}

node "ACT_Tir_Pion_ASS_PreparerTirSur"
{
    feedbacks = { { { "done_ACT_Tir_Pion_ASS_PreparerTirSur" }, "ACT_Tir_Pion_ASS_PreparerTirSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_Pion_ASS_PreparerTirSur, {value} ) end,
    actuators =
    {
        tir_indirect = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCible = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Prepare fire ..." )
            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_Rens_AssurerLaLiaisonAvec
]]--[[//
]]--[[// Commentaires:partage de la connaissance avec le pion passé en paramètre
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_Rens_AssurerLaLiaisonAvec"
{
    feedbacks = { { { "done_ACT_Pion_Rens_AssurerLaLiaisonAvec" }, "ACT_Pion_Rens_AssurerLaLiaisonAvec" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Rens_AssurerLaLiaisonAvec, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionAmi = self.params[1]
    end,

    select = function( self )
        --[[// contrainte de la fonction moteur...
]]        self.listeAutomate = self.listeAutomate or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutLiaison )
                    else
                        DEC_Message( eRC_DebutLiaison )
                    end

                end

                DEC_Trace( " ------------ L'unité assure la liaison ------------" )
            end
--[[//---------------------------------------------------------------------
]]--[[// Partage connaissance // Instantanée ici
]]--[[//---------------------------------------------------------------------
]]--[[/*délai en minute */]]        end

        DEC_Connaissances_PartageConnaissancesAvec( DEC_GetAutomate( self._namedParams.pionAmi ), 0.01 )
    end,

    deselect = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinLiaison )
            else
                DEC_Message( eRC_FinLiaison )
            end

        end

    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie blindee/missions/ouvrir itineraires/OuvrirItineraires - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_GEN_OuvrirItineraires
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_GEN_OuvrirItineraires"
{
    feedbacks = { { { "done_MIS_Automate_MRT_GEN_OuvrirItineraires" }, "MIS_Automate_MRT_GEN_OuvrirItineraires" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_GEN_OuvrirItineraires, {value} ) end,
    activations =
    {
        { "ACT_Warning", { "done_ACT_Warning" } },
        { "BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire", { "done_BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        local listeSectionGenie = S_Cherche_Automate_Filtre_TypePion( DEC_Automate_PionsSansPC(), "SectionGenie" )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// Verif
]]if( #( listeSectionGenie ) == 0 ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                                Halt( self )
                        do return end

                    end
                end

                S_Dispositif_Automate_Init()
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "------------------ To open paths ------------------" )
                StartActivateOverride( self, self.activations.BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire, 1, { listeSectionGenie, self._namedParams.mission.itineraires_, } )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire"
{
    feedbacks = { { { "done_BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire" }, "BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_GEN_MRT_FaireOuvrir", { "done_BEH_Medo_Automate_GEN_MRT_FaireOuvrir" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsGenie = self.params[1]
        self._namedParams.itineraires = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self._namedParams.listePionsGenie ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Medo_Automate_GEN_MRT_FaireOuvrir, 1, { self._namedParams.listePionsGenie, self._namedParams.itineraires, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_GEN_MRT_FaireOuvrir
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_GEN_MRT_FaireOuvrir"
{
    feedbacks = { { { "done_BEH_Medo_Automate_GEN_MRT_FaireOuvrir" }, "BEH_Medo_Automate_GEN_MRT_FaireOuvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_GEN_MRT_FaireOuvrir, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA", { "done_BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsGenie = self.params[1]
        self._namedParams.itineraires = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.listePoints = self.listePoints or {}
        self.rIterateurItineraire = self.rIterateurItineraire or 0
        --[[// Sécurité mais testé dans le comportement au dessus
]]if( #( self._namedParams.listePionsGenie ) == 0 ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//-----------------------------------------------------------------------------
]]self._namedParams.listePionsGenie or {} ) do
                local _continue = true
                    do
                        if( self.rIterateurItineraire == #( self._namedParams.itineraires ) ) then
                            --[[// on revient au premier itineraire
]]self.rIterateurItineraire = 0
                        end

                        --[[// Récuperation du secteur courant
]]local iti = DEC_UserTypeList_GetAt( self._namedParams.itineraires, self.rIterateurItineraire )
                        --[[// Assignation de la mission
]]StartActivateOverride( self, self.activations.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA, 1, { ePhase_MRT, pion, iti, eEtatEchelon_Premier, } )
                                                self.rIterateurItineraire = self.rIterateurItineraire + 1--[[// itineraire suivant
]]
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_GEN_OuvrirItineraires = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire, "BEH_Medo_Automate_GEN_MRT_FaireOuvrir", nodes.BEH_Medo_Automate_GEN_MRT_FaireOuvrir }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_GEN_MRT_FaireOuvrir, "BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA", nodes.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_GEN_OuvrirItineraires, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_GEN_OuvrirItineraires, "BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire", nodes.BEH_Medo_Automate_GEN_MRT_AssignerOuvrirItineraire }

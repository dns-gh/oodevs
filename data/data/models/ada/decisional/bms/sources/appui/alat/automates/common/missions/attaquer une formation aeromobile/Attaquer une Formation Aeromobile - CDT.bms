includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/attaquer une formation aeromobile/Attaquer une Formation Aeromobile - CDT.bms"] = true

local emptyTable = emptyTable

node "MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile" }, "MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "done_BEH_Automate_ALAT_CoordonnerFeux" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eDetruire
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeAttaquer = self.listeAttaquer or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, emptyTable )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// ---------------------------------------------------------------------
]]--[[// 1. Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]self.listePionsSgpt = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// liste des pions qui Attaquent
]]self.listeAttaquer = {}
        self.listeAttaquer = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_DetruireAeromobile" )
        --[[// liste des pions HM Log
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local _continue = true
--[[// Condition d'arret
]]--[[// -----------------
]]--[[// Gestion de la coordination des feux
]]--[[// -----------------------------------
]]--[[// ---------------------------------------------------------------------
]]--[[// Conduite des pions Hm Log : Plots Ravitaillement  et IMEX qui en accompagnement
]]--[[// ---------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eDetruire then
                    if( DIA_IsListEmpty( self.listeAttaquer ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeAttaquer, 0, } )
                    Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_AttaquerFormationAeromobile, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

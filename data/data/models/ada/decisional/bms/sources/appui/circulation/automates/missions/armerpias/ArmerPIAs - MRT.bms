includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/automates/missions/armerpias/ArmerPIAs - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_LOG_ArmerPIAs
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_LOG_ArmerPIAs"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionAppuyer = self.eEtatMissionAppuyer or eActionEnCours
        self.listePIA = self.listePIA or {}
        self.rIterateurPosition = self.rIterateurPosition or 0
        local listePions = S_Cherche_Automate_Filtre_TypePionOperationnels( DEC_Automate_PionsAvecPC(), "PatrouilleCirculation" )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                local LIA = DEC_GetLima( eTypeLima_LIA )
                if( ( LIA == 0 or LIA == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleLimaInvalide )
                                                self.params.__returnValue = eActionImpossible
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()

                    end
                end

                self.listePIA = DEC_Geometrie_CalculerPositionsParRapportALima( LIA, 10, #( listePions ) )
                if( ( self.listePIA == 0 or self.listePIA == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleLimaInvalide )
                                                self.params.__returnValue = eActionImpossible
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()

                    end
                end

            end
--[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[//
]]--[[// =============================================================================
]]        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionAppuyer == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        return

                        end
                    end

                    if( self.eEtatMissionAppuyer == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        return

                        end
--[[// Controle création mission
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( listePions ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatMissionAppuyer = v else rawset( t, k, v ) end end } ) )
                    --[[// ordre de missions
]]if( ( #( listePions ) ~= 0 and #( listePions ) ~= nil ) ) then
                        Activate( self.activations.BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe, 1, { ePhase_MRT, listePions, self.listePIA, } )
                    end

                    
                --[[//---------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_MissionImpossible then
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                    
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                    
                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_LOG_ArmerPIAs = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_ArmerPIAs, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_ArmerPIAs, "BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe", nodes.BEH_Mission_Automate_CIRCU_AssignerArmerPIAAListe }

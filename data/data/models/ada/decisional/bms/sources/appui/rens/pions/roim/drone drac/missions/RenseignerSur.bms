includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/pions/roim/drone drac/missions/RenseignerSur.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_RENS_ROIM_RenseignerSur
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_RENS_ROIM_SDTI_RenseignerSur"
{
    feedbacks = { { { "done_MIS_Pion_RENS_ROIM_SDTI_RenseignerSur" }, "MIS_Pion_RENS_ROIM_SDTI_RenseignerSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Calcul_Distance_Max_Itineraire", { "done_ACT_Calcul_Distance_Max_Itineraire" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "ACT_Dep_Pion_RENS_VolerA", { "done_ACT_Dep_Pion_RENS_VolerA" } },
        { "ACT_Obs_Pion_RENS_ActiverCamera", { "done_ACT_Obs_Pion_RENS_ActiverCamera" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
        self.ficelleDeVol = {}
        DEC_Copie_ListePoints( self._namedParams.mission.ficelleDeVole_, self.ficelleDeVol )
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        --[[//---------------------------------------------------------------------
]]--[[// Commencer le mode enregistrement
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// imposssible si pas mise en oeuvre
]]if( not myself.bMiseEnOeuvre_ ) then
                    do
                        DEC_Trace( "----- Le DRAC doit être mise en oeuvre -----" )
                        DEC_RC( eRC_DroneDoitEtreMisEnOeuvre )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
                end

                if( myself.bEnExploitation_ ) then
                    do
                        DEC_Trace( "----- Le DRAC est en exploitation -----" )
                        DEC_RC( eRC_DroneEnExploitation )
                        DEC_RC( eRC_MissionImpossible )
                                                Halt( self )
                        do return end

                    end
--[[// pour être sur de revenir au point de départ
]]                end

            DEC_ListePoints_PushBack( self.ficelleDeVol, DEC_Agent_Position() )
            end
--[[//=========================================================================
]]--[[// SQUELETTE DE LA MISSION
]]--[[//
]]--[[// strength = 1
]]--[[//
]]--[[//=========================================================================
]]        end

        switch_1 = self.ePhaseMission
                if switch_1 == ePreparerMission then
                    --[[//---------------------------------------------------------------------
]]--[[// Preparation de la mission
]]--[[//---------------------------------------------------------------------
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[//---------------------------------------------------------------------
]]--[[// Voler
]]--[[//---------------------------------------------------------------------
            ]]elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "--------- LANCEMENT DU DRAC ---------", } )
                    --[[// Progression
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                return

                            end

                        end
                    end
--[[// ****************************************************************
]]--[[//           Vérification si la ficelle de vol ne dépasse pas 10 km
]]--[[//                  Si c'est le cas alors la mission est impossible
]]--[[// ----------------------------------------------------------------
]]--[[//                                              09/01/2008 10:24:20
]]--[[// ****************************************************************
]]

                    Activate( self.activations.ACT_Calcul_Distance_Max_Itineraire, 1, { self._namedParams.mission.ficelleDeVole_, self._namedParams.mission, } )
                    --[[// ****************************************************************
]]--[[//                      La distance correspond aux données doctrine
]]--[[//                                           Le vol peut avoir lieu
]]--[[// ----------------------------------------------------------------
]]--[[//                                              09/01/2008 10:26:24
]]--[[// ****************************************************************
]]Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self.ficelleDeVol, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eEtat = v[1] end
                    --[[// Prendre de la hauteur
]]--[[// données doctrine 
]]Activate( self.activations.ACT_Dep_Pion_RENS_VolerA, 1, { M_HAUTEUR_DE_VOL(), } )
                    Activate( self.activations.ACT_Obs_Pion_RENS_ActiverCamera, 1, {} )--[[// active pd toute la durée du vol, temps réel 
]]
                    
                --[[//---------------------------------------------------------------------
]]--[[// Fin de la mission 
]]--[[//---------------------------------------------------------------------
        ]]elseif switch_1 == eFinMission then
                    --[[// IMPORTANT POUR AUTOMATE
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )


                else
                                end
    end,

--[[// ****************************************************************************
]]--[[// ACT_Calcul_Distance_Max_Itineraire
]]--[[// ----------------------------------------------------------------------------
]]--[[//      Cette fonction doit permettre de calculer le point le plus éloigner sur 
]]--[[//                                                         l'itiénraire définie
]]--[[// ----------------------------------------------------------------------------
]]--[[//                                                          19/12/2007 14:37:16
]]--[[// ****************************************************************************
]]}

node "ACT_Calcul_Distance_Max_Itineraire"
{
    feedbacks = { { { "done_ACT_Calcul_Distance_Max_Itineraire" }, "ACT_Calcul_Distance_Max_Itineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Calcul_Distance_Max_Itineraire, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.Iti = self.params[1]
        self._namedParams.mission_en_cours = self.params[2]
    end,

    select = function( self )
        --[[// ************************************************************************
]]--[[//                      Permet de ne faire qu'une seule fois cette fonction
]]--[[//                                                         au premier appel
]]--[[// ------------------------------------------------------------------------
]]--[[//                                                      09/01/2008 10:18:43
]]--[[// ************************************************************************
]]if( ModuleBegins() ) then
            do
                local DistanceRetenue = 0
                self.PosLanceur = self.PosLanceur or DEC_Agent_Position()
                --[[// ********************************************************************
]]--[[//                    La Liste des point de l'itinéraire n'est pas vide
]]--[[// ********************************************************************
]]local listedespoints = self._namedParams.Iti
                local PointEnCours = 0
                if( ( listedespoints == 0 or listedespoints == nil ) ) then
                    do
                    end
--[[// Mission impossible
]]                else
do
                        local it = 0
                        while it < DEC_ListePoints_Size( listedespoints ) do
                            local _continue = true
do
                                --[[// ************************************************************
]]--[[// Pour chaque point constituants l'itinéraire il faut calculer
]]--[[//         la distance entre ce point et la position du lanceur
]]--[[// ************************************************************
]]PointEnCours = DEC_ListePoints_GetAt( listedespoints, it )
                                DistanceRetenue = CalculDistance_Pion_PC( PointEnCours, myself:DEC_Agent_Position() )
                                DEC_Trace( "Distance : " .. FloatToString( DistanceRetenue ) )
                                --[[// ************************************************************
]]--[[//                   La distance autorisée est de 10 km maximum
]]--[[//   La distance est définie dans 'Roim\Drone DRAC\Globals.hal'
]]--[[// ------------------------------------------------------------
]]--[[//                                          20/12/2007 14:04:11
]]--[[// ************************************************************
]]if( DistanceRetenue > M_DISTANCE_MAX_DE_VOL() ) then
                                    do
                                        --[[// ********************************************************
]]--[[//           Mission impossible le DRAC est à plus de 10 km
]]--[[//                                de son point de lancement
]]--[[// ********************************************************
]]DEC_Trace( "Le DRAC se trouve à plus de 10 km de son point de lancement !!" )
                                        self._namedParams.mission_en_cours:SetficelleDeVole_( S_Misc_DetruireItineraire( self._namedParams.mission_en_cours.ficelleDeVole_, "ACT_Calcul_Distance_Max_Itineraire" ) )
                                        DEC_RC( eRC_MissionImpossible )
                                        DEC_FinMission()
                                        break
                                    end
                                end

                            end
                        it = it + 1
                        end

                    end
                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Calcul_Distance_Max_Itineraire", nodes.ACT_Calcul_Distance_Max_Itineraire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Dep_Pion_RENS_VolerA", nodes.ACT_Dep_Pion_RENS_VolerA }
connections[ #connections + 1 ] = { nodes.MIS_Pion_RENS_ROIM_SDTI_RenseignerSur, "ACT_Obs_Pion_RENS_ActiverCamera", nodes.ACT_Obs_Pion_RENS_ActiverCamera }

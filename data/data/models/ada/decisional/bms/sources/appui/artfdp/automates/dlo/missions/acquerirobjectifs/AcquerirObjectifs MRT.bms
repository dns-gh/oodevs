includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/dlo/missions/acquerirobjectifs/AcquerirObjectifs MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_ASS_AcquerirObjectifsDLO
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ASS_AcquerirObjectifsDLO"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "onHalt" } },
        { "BEH_Medo_Automate_AssignerAcquerirObjectifsA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Automate_MRT_ASS_AcquerirObjectifsDLO" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ MIS_Automate_MRT_ASS_AcquerirObjectifsDLO : starting MRT $" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Tous les pions de premier echelon n'ont pas recu de mission !!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                Feedback( self.feedbacks["onHalt"], { "MIS_Automate_MRT_ASS_AcquerirObjectifsDLO" } )
Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Feedback( self.feedbacks["onHalt"], { "MIS_Automate_MRT_ASS_AcquerirObjectifsDLO" } )
Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( DEC_Automate_PionsSansPC() ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_AssignerAcquerirObjectifsA, 1, { DEC_Automate_PionsSansPC(), self._namedParams.mission.zonesAcquisition_, self._namedParams.mission.compagniesAAppuyer_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerAcquerirObjectifsA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerAcquerirObjectifsA"
{
    activations =
    {
        { "BEH_Mission_Automate_ASS_DLOAcquerirObjectifsA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Medo_Automate_AssignerAcquerirObjectifsA" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.listeZonesObjectifs = self.params[2]
        self._namedParams.listeCompagniesAAppuyer = self.params[3]
    end,

    activate = ActivateWithStart,

    internalactivate = function( self )
        local rIterateurZones = 0
        local rIterateurUnites = 0
        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission une par une au pion (pas simultanément)
]]--[[//-----------------------------------------------------------------------------
]]self._namedParams.listePions ) do
        local _continue = true
do
                if( rIterateurZones == #( self._namedParams.listeZonesObjectifs ) ) then
                    rIterateurZones = 0
                end

                if( rIterateurUnites == #( self._namedParams.listeCompagniesAAppuyer ) ) then
                    rIterateurUnites = 0
                end

                local secteur = DEC_UserTypeList_GetAt( self._namedParams.listeZonesObjectifs, rIterateurZones )
                local uniteAAppuyer = DIA_GetAt( self._namedParams.listeCompagniesAAppuyer, rIterateurUnites )
                StartInstance( self, self.activations.BEH_Mission_Automate_ASS_DLOAcquerirObjectifsA, 1, { ePhase_MRT, pion, secteur, uniteAAppuyer, eEtatEchelon_Premier, } )
                                rIterateurZones = rIterateurZones + 1
                                rIterateurUnites = rIterateurUnites + 1
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASS_AcquerirObjectifsDLO = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerAcquerirObjectifsA, "BEH_Mission_Automate_ASS_DLOAcquerirObjectifsA", nodes.BEH_Mission_Automate_ASS_DLOAcquerirObjectifsA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_AcquerirObjectifsDLO, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_AcquerirObjectifsDLO, "BEH_Medo_Automate_AssignerAcquerirObjectifsA", nodes.BEH_Medo_Automate_AssignerAcquerirObjectifsA }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/common/missions/defendreunezone/DefendreUneZone MRT.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Common/Missions/SeDeployer MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 8/07/05 16:17 $
]]--[[// $Revision: 11 $
]]--[[// $Workfile: SeDeployer MRT.hal $
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_Stationner
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ASS_DefendreUneZone"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ASS_DefendreUneZone" }, "MIS_Automate_MRT_ASS_DefendreUneZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ASS_DefendreUneZone, {value} ) end,
    activations =
    {
        { "ACT_RC_Automate", { "done_ACT_RC_Automate" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASS_AssignerDefendre_DansZone", { "done_BEH_Medo_Automate_ASS_AssignerDefendre_DansZone" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$ Mission 'DefendreUneZone': starting MRT $" )
                DEC_SetMission( myself, self._namedParams.mission )
            end
--[[// RC
]]        end

        Activate( self.activations.ACT_RC_Automate, 1, { eRC_DebutMission, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsSansPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Medo_Automate_ASS_AssignerDefendre_DansZone, 1, { DEC_Automate_PionsSansPC(), self._namedParams.mission.zoneDeploiement_, } )
    end,

--[[//-----------------------------------------------------------------------------
]]--[[// DEFENDRE
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ASS_AssignerDefendre_DansZone"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ASS_AssignerDefendre_DansZone" }, "BEH_Medo_Automate_ASS_AssignerDefendre_DansZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ASS_AssignerDefendre_DansZone, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ASS_AssignerAssurerMiseEnOeuvreSurPosition", { "done_BEH_Mission_Automate_ASS_AssignerAssurerMiseEnOeuvreSurPosition" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.zone = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.listePoint = self.listePoint or {}
        self.rIterateurPoint = self.rIterateurPoint or 0
        if( #( self._namedParams.selPions ) == 0 ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local mission = DEC_GetMission( myself )
                self.listePoint = DEC_Geometrie_PositionsParRapportALocalisation( self._namedParams.selPions, self._namedParams.zone, DEC_GetDirectionEnnemi( mission ), 10000 )
                --[[//-----------------------------------------------------------------------------
]]--[[// Gestion erreur
]]--[[//-----------------------------------------------------------------------------
]]if( self.listePoint ~= 0 ) then
                    do
                        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission aux pions
]]--[[//-----------------------------------------------------------------------------
]]self._namedParams.selPions or emptyTable ) do
                        local _continue = true
                            do
                                if( self.rIterateurPoint == DEC_ListePoints_Size( self.listePoint ) ) then
                                    self.rIterateurPoint = 0
                                end

                                local point = DEC_ListePoints_GetAt( self.listePoint, self.rIterateurPoint )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ASS_AssignerAssurerMiseEnOeuvreSurPosition, 1, { ePhase_MRT, pion, point, } )
                                                                self.rIterateurPoint = self.rIterateurPoint + 1
                            end

                        end

                    end
                else
do
                        DEC_Trace( "Pions in same fuseau or location not in fuseau" )
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleZoneHorsFuseau, } )
                                                self:SendFeedback( eActionImpossible )
                        do return end

                    end
                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASS_DefendreUneZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ASS_AssignerDefendre_DansZone, "BEH_Mission_Automate_ASS_AssignerAssurerMiseEnOeuvreSurPosition", nodes.BEH_Mission_Automate_ASS_AssignerAssurerMiseEnOeuvreSurPosition }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ASS_AssignerDefendre_DansZone, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_DefendreUneZone, "ACT_RC_Automate", nodes.ACT_RC_Automate }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_DefendreUneZone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASS_DefendreUneZone, "BEH_Medo_Automate_ASS_AssignerDefendre_DansZone", nodes.BEH_Medo_Automate_ASS_AssignerDefendre_DansZone }

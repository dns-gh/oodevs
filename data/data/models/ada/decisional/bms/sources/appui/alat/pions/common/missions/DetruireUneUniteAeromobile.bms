includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/pions/common/missions/DetruireUneUniteAeromobile.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Detruire Aeromobile
]]--[[// ===================
]]--[[//
]]--[[//
]]--[[//Cette mission permet en fonction des unites à aller detruire, de déterminer une
]]--[[//zone d'interception dans laquelle on va surprendre l'ennemi
]]--[[//
]]--[[//T_Localisation zoneInterception_;             //calculé par la fonction d'interception.
]]--[[//                                              //2000m autour point d'interception
]]--[[//T_ListeConnaissancesAgent uniteADetruire_;
]]--[[//T_Point pointDislocation_;                    //calculé par la fonction d'interception
]]--[[// -------------------------------------------------------------------------------------
]]node "MIS_Pion_ALAT_DetruireAeromobile"
{
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirLibre", {} },
        { "BEH_Ordre_Inopine", {} },
        { "ACT_Info_Trace", {} },
        { "ACT_RC", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Dep_Pion_ALAT_IntercepterConnaissances", {} },
        { "BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile", {} },
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", {} },
        { "ACT_Obs_EtablirVisionCur", {} },
        { "BEH_Manoeuvre_Pion_AllerStationner", {} },
        { "BEH_Dep_Pion_ALAT_SePoser", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eDetruire
        self.pointInterception = self.pointInterception or DEC_Geometrie_CreerPoint()
        self.listeConnaissancesADetruire = self.listeConnaissancesADetruire or {}
        self.rDistance = self.rDistance or 0
        self.localisationInterception = self.localisationInterception or nil
        self.directionCentreZone = self.directionCentreZone or nil
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                myself.plotsRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, {} )
                end

                DEC_Copie_Point( self._namedParams.mission.pointRegroupement_, myself.pointRegroupement_ )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                if( self.ePhase ~= eFinMission and self.ePhase ~= eSExfiltrer ) then
                    do
                        self.ePhase = eSExfiltrer
                        self.eEtat = eActionEnCours
                    end
                end

                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        self.listeConnaissancesADetruire = S_Liste_Pion_ALAT_UnitesADetruire( self._namedParams.mission.uniteADetruire_ )
        if( DIA_IsListEmpty( self.listeConnaissancesADetruire ) ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "track lost", } )
                Activate( self.activations.ACT_Info_Trace, 1, { "mission is cancelled", } )
                Activate( self.activations.ACT_RC, 1, { eRC_PerteInfoGuidage, } )
                if( self.ePhase ~= eFinMission and self.ePhase ~= eSExfiltrer ) then
                    do
                        self.ePhase = eSExfiltrer
                        self.eEtat = eActionEnCours
                    end
                end

            end
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnAttaque, } )
                    if( F_Pion_GeteEtatFeu( myself ) == eEtatFeu_Executer ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        return

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_IntercepterConnaissances, GetMotivation( "MOT_Manoeuvrer" ), { self.listeConnaissancesADetruire, eProgressionDefaut, eTypeItiAttaque, } )
                    Activate( self.activations.BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile, GetMotivation( "MOT_ManoeuvrerSurEnis" ) * 2, { self._namedParams.mission.uniteADetruire_, } )
                    
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnExfiltration, } )
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, {} )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    Activate( self.activations.BEH_Manoeuvre_Pion_AllerStationner, GetMotivation( "MOT_Manoeuvrer" ), setmetatable( { self._namedParams.mission.pointRegroupement_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                DIA_Clear( myself.plotsRavitaillement_ )
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self.params.__returnValue = eActionEffectuee
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                                end
            end

    end,

    destroy = function( self )
                DIA_Clear( myself.plotsRavitaillement_ )
        F_Pion_SetobjectifEsquive( myself, nil )
    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Gestion des ennemis de la mission d'interception d'une formation aeromobile
]]--[[//
]]--[[// On detruit en priorité les ennemis de la liste passée en argument
]]--[[// On accepte de détruire tous les ennemis aéronefs que l'on croise
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile"
{
    activations =
    {
        { "BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listeEnis = self.params[1]
    end,

    activate = function( self )
        if( F_Pion_GeteEtatFeu( myself ) == eEtatFeu_Executer ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        for _,x in pairs( self._namedParams.listeEnis ) do
        local _continue = true
do
                if( not DEC_ConnaissanceAgent_EstPercuParUnite( x ) ) then
                    _continue = false
                end

                    if _continue then
                    if( not S_ConnaissanceAgent_EstEnVol( x ) ) then
                        _continue = false
                    end

                        if _continue then
                        Activate( self.activations.BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire, S_Force_Pion_ALAT_AllerDetruire( x, eNatureAtlas_Helicoptere ), { 0, x, eReconnu, 1, M_DOCTRINE_PION_ALAT_PH(), true, } )
                    end
                end
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ALAT_DetruireAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile, "BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire", nodes.BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "BEH_Dep_Pion_ALAT_IntercepterConnaissances", nodes.BEH_Dep_Pion_ALAT_IntercepterConnaissances }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile", nodes.BEH_Eni_Pion_ALAT_GererEniDetruireAeromobile }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "BEH_Manoeuvre_Pion_AllerStationner", nodes.BEH_Manoeuvre_Pion_AllerStationner }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_DetruireAeromobile, "BEH_Dep_Pion_ALAT_SePoser", nodes.BEH_Dep_Pion_ALAT_SePoser }

includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/recueillir une formation aeromobile/Recueillir une Formation Aeromobile - CDT.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Recueillir une formation Aeromobile :
]]--[[// =====================================
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "onHalt" } },
        { "ACT_ROE_Automate_DonnerOrdreTirLibre", { "onHalt" } },
        { "ACT_Ordre_Automate_Continue", { "onHalt" } },
        { "ACT_ROE_Automate_DonnerOrdreTirRestreint", { "onHalt" } },
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "onHalt" } },
        { "ACT_Ordre_Automate_Pause", { "onHalt" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "onHalt" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "onHalt" } },
        { "BEH_ROE_Automate_TirRestreint", { "onHalt" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eDetruire
        self.CoupArretDebute = self.CoupArretDebute or false
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeDetruire = self.listeDetruire or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// ---------------------------------------------------------------------
]]--[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// liste des pions qui Detruisent
]]DIA_Clear( self.listeDetruire )
        self.listeDetruire = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_DetruireNeutraliserDansZone" )
        --[[// liste des pions HM Log
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        for _,x in pairs( --[[//Gestion du debut du coup d'arret
]]self.listeDetruire ) do
        local _continue = true
do
                local pionDEC = x
                if( not self.CoupArretDebute and ( F_Pion_GeteEtatFeu( pionDEC ) == eEtatFeu_Executer ) ) then
                    self.CoupArretDebute = true
                end

            end

        end

        DIA_Clear( self.listePionsAAppuyerIMEX )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    --[[//condition d'arret
]]if( DIA_IsListEmpty( self.listeDetruire ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        return

                        end
                    else
do
                            --[[//Tir libre pour le pion le plus en arriere
]]local pionArriere = DEC_Geometrie_PionDerriere( self.listeDetruire, DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                            Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirLibre, 1, { pionArriere, } )
                            for _,x in pairs( self.listeDetruire ) do
                            local _continue = true
do
                                    local pionDEC = x
                                    --[[//Si le coup d'arret commence, tir libre pour tout le monde
]]if( self.CoupArretDebute ) then
                                        do
                                            Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirLibre, 1, { x, } )
                                            Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x, } )
                                            --[[//quand l'unité a fait feu ou est en danger, rejoindre point regroupement
]]if( ( F_Pion_GeteEtatDec( pionDEC ) == eEtatDec_Sauvegarde ) or ( F_Pion_GeteEtatFeu( pionDEC ) == eEtatFeu_Executer ) ) then
                                                do
                                                    --[[//passer en tir restreint
]]Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirRestreint, 1, { x, } )
                                                    Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, x, self._namedParams.mission.pointRegroupement_, eEtatEchelon_Premier, } )
                                                end
                                            end

                                        end
                                    else
do
                                            --[[//pas de traitement des ROE du pion le plus en arrière
]]if( x == pionArriere ) then
                                                _continue = false
                                            end

                                                if _continue then
                                                --[[//les autres unités ont tir restreint et sont en pause
]]if( F_Pion_GeteEtatPhaseMission( pionDEC ) == eEtatPhaseMission_EnPosition ) then
                                                    Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { x, } )
                                                end

                                                Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirRestreint, 1, { x, } )
                                            end
                                        end
                                    end

                                end

                            end

                        end
--[[//pas de coordination nécessaire dans cette mission
]]                    end

                    Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeDetruire, 0, } )
                    --[[// ravitaillements et IMEX
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "ACT_ROE_Automate_DonnerOrdreTirLibre", nodes.ACT_ROE_Automate_DonnerOrdreTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "ACT_ROE_Automate_DonnerOrdreTirRestreint", nodes.ACT_ROE_Automate_DonnerOrdreTirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_RecueillirFormationAeromobile, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

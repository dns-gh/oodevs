includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie blindee/missions/degager obstacles dans zone/DegagerObstaclesDansZone - CDT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_GEN_DegagerObstaclesDansZone
]]--[[//
]]--[[// Commentaires: Refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_GEN_DegagerObstaclesDansZone"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_Warning", {} },
        { "BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.listeObjets = self.listeObjets or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                --[[// copie 
]]self.listeObjets = S_Obj_TrierListePourDetruireObjets( self._namedParams.mission.obstacles_ )
            end
--[[//---------------------------------------------------------------------
]]--[[// Ordre conduite
]]--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )
        --[[//---------------------------------------------------------------------
]]--[[// Vérification des moyens
]]--[[//---------------------------------------------------------------------
]]local listePionsGenie = S_ObtenirPionsOperationnelsFiltre( "SectionGenie" )
        if( ( #( listePionsGenie ) == 0 or #( listePionsGenie ) == nil ) ) then
            do
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion Plan d'obstacle et renforcement
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_, 1, { self.listeObjets, self._namedParams.mission.zoneRegroupement_, } )
    end,

    destroy = function( self )
                DIA_Clear( g_selConnaissanceObs )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", {} },
        { "BEH_Misc_Automate_GEN_GererReductionDesObstacles", {} },
        { "BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstaclesAFranchir = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// Init --> deplacement vers la zone de regroupement
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                local _continue = true
                    Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )

                end

                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion construction et renforts
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Misc_Automate_GEN_GererReductionDesObstacles, 1, { self._namedParams.obstaclesAFranchir, self._namedParams.zoneRegroupement, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, 1, { self._namedParams.obstaclesAFranchir, self._namedParams.zoneRegroupement, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles"
{
    activations =
    {
        { "BEH_Ordre_Automate_GEN_VerifierRenfortPourDetruireObjets", {} },
        { "BEH_Misc_Automate_GEN_GererRenforcementObstacle", {} },
        { "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Mission_Automate_AssignerDecrocherA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstacles = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// CR sur renforcement 
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Ordre_Automate_GEN_VerifierRenfortPourDetruireObjets, 1, { self._namedParams.obstacles, } )
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les T_ConnaissanceObjet_local --> Assignation renforcement
]]--[[//-------------------------------------------------------------------------
]]g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objetABrecher = x
                local eValide = nil--[[// Si besoin de renforcement
]]
                if( not DEC_Automate_PionPeutDetruireObjet( objetABrecher:Getpion_(), objetABrecher:Getobstacle_() ) ) then
                    --[[// défini dans franchor de vive force
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstacle, 1, { objetABrecher, } )
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Rendre dispo les renforts si fin constrcution
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objetABrecher = x
                Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementObstacle, 1, { objetABrecher, } )
            end
--[[//-------------------------------------------------------------------------
]]--[[// Decrochage en fin de mission
]]--[[//-------------------------------------------------------------------------
]]
        end

        if( DIA_IsListEmpty( S_Obj_ListeObjetsValides( self._namedParams.obstacles ) ) ) then
            do
                local listeGroupes = S_Gen_ObtenirGroupeGenie()
                for _,pion in pairs( listeGroupes or {} ) do
                local _continue = true
                    do
                        --[[// cast
]]local groupe = pion
                        if( F_Pion_GeteEtatPhaseMission( groupe ) == eEtatPhaseMission_FinMission ) then
                            do
                                Activate( self.activations.ACT_Info_Trace, 1, { "Mission finie: Assigner decrocher", } )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, groupe, self.positionRegroupement, eEtatEchelon_Second, } )
                            end
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererReductionDesObstacles
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererReductionDesObstacles"
{
    activations =
    {
        { "BEH_Mission_Automate_Gen_AssignerDegagerObjetA", {} },
        { "BEH_Mission_Automate_AssignerDecrocherA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstacles = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        self.listeObjetsADegager = self.listeObjetsADegager or {}
        --[[//copie ? --> NLD: oui
]]--[[// JSR : copie membre à membre de la liste, pour contourner un bug causé par la traduction lors d'une affectation directe
]]if( ModuleBegins() ) then
            do
                for _,obj in pairs( self._namedParams.obstacles or {} ) do
                local _continue = true
                    do
                        DIA_PushBack( self.listeObjetsADegager, obj )
                    end

                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//-------------------------------------------------------------------------
]]        end

        local listePionsGenie = S_Gen_ObtenirSectionsGenieDisponibles()
        for _,pion in pairs( listePionsGenie or {} ) do
        local _continue = true
do
                local objetADegager = nil
                --[[//-------------------------------------------------------------------------
]]--[[// ...On traite les objets dans l'ordre dans lequel ils ont été rentrés 
]]--[[// dans l'interface 
]]--[[//-------------------------------------------------------------------------
]]--[[// Avant: objetADegager = S_Obj_Automate_GEN_ObjetPlusProche( listeObjetsADegager, DEC_Automate_PionPosition( pion ) );
]]if( ( #( self.listeObjetsADegager ) ~= 0 and #( self.listeObjetsADegager ) ~= nil ) ) then
                    objetADegager = DEC_UserTypeList_GetAt( self.listeObjetsADegager, 0 )
                end

                if( objetADegager ~= nil ) then
                    do
                        Activate( self.activations.BEH_Mission_Automate_Gen_AssignerDegagerObjetA, 1, { pion, objetADegager, } )
                        --[[// T_ConnaissanceObjet traité
]]DEC_UserTypeList_Remove( self.listeObjetsADegager, objetADegager )
                    end
                else
do
                        --[[// cast
]]local section = pion
                        --[[// plus d'objets à traiter
]]if( F_Pion_GeteEtatPhaseMission( section ) == eEtatPhaseMission_FinMission ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )
                        end

                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// behavior BEH_Mission_Automate_Gen_AssignerDegagerObjetA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_Gen_AssignerDegagerObjetA"
{
    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerDegagerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objet = self.params[2]
    end,

    activate = function( self )
        --[[// Validité
]]if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.objet ) ) then
            Halt( self )
            do return end
        end

        self.genObs = self.genObs or DEC_CreerDIAThing( "T_ConnaissanceObjet_local" )
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// Propriétés de l'objet à brecher  --> reference pour renforcement
]]self.genObs:Setobstacle_( self._namedParams.objet )
                self.genObs:Setpion_( self._namedParams.pion )
                --[[// init plus tard
]]self.genObs:SetbEstRenforce_( false )
                --[[// init plus tard
]]self.genObs:SetpionRenforcement_( nil )
                DIA_PushFront( g_selConnaissanceObs, self.genObs )
            end
--[[//-------------------------------------------------------------------------
]]--[[// Assignation de la mission
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Mission_Automate_GEN_AssignerDegagerA, 1, { ePhase_CDT, self._namedParams.pion, self._namedParams.objet, eEtatEchelon_Premier, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_GEN_DegagerObstaclesDansZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererReductionDesObstacles, "BEH_Mission_Automate_Gen_AssignerDegagerObjetA", nodes.BEH_Mission_Automate_Gen_AssignerDegagerObjetA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererReductionDesObstacles, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, "BEH_Ordre_Automate_GEN_VerifierRenfortPourDetruireObjets", nodes.BEH_Ordre_Automate_GEN_VerifierRenfortPourDetruireObjets }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, "BEH_Misc_Automate_GEN_GererRenforcementObstacle", nodes.BEH_Misc_Automate_GEN_GererRenforcementObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_, "BEH_Misc_Automate_GEN_GererReductionDesObstacles", nodes.BEH_Misc_Automate_GEN_GererReductionDesObstacles }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_, "BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles", nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourDegagerObstacles }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_Gen_AssignerDegagerObjetA, "BEH_Mission_Automate_GEN_AssignerDegagerA", nodes.BEH_Mission_Automate_GEN_AssignerDegagerA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_DegagerObstaclesDansZone, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_DegagerObstaclesDansZone, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_DegagerObstaclesDansZone, "BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_", nodes.BEH_Mission_Automate_GEN_CDT_DegagerPlanObjets_ }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/common/Behaviors - Medo.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Common/Behaviors - Medo.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/08/05 18:24 $
]]--[[// $Revision: 14 $
]]--[[// $Workfile: Behaviors - Medo.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
node "BEH_Medo_Automate_PreparerMission_RecoEtDeploiement"
{
    feedbacks = { { { "done_BEH_Medo_Automate_PreparerMission_RecoEtDeploiement" }, "BEH_Medo_Automate_PreparerMission_RecoEtDeploiement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_PreparerMission_RecoEtDeploiement, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux", { "done_ACT_Medo_Automate_AffecterFuseaux" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASS_AssignerMission_PC", { "done_BEH_Medo_Automate_ASS_AssignerMission_PC" } },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or nil
        DEC_SetMission( myself, self.mission )
        self.selPions = self.selPions or DEC_Automate_PionsAvecPC()
        self.selPions_ASS_Reco = self.selPions_ASS_Reco or {}
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Nombre de pions : " .. FloatToString( #( self.selPions ) ) )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_SelectionnerPions then
                    --[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------						
]]--[[// L'execution de la mission necessite la presence d'un 1er ech
]]self.selPions_ASS_Reco = S_Cherche_Automate_Filtre_TypePion( self.selPions, "SectionASS_Reco" )
                    if( ( #( self.selPions_ASS_Reco ) == 0 or #( self.selPions_ASS_Reco ) == nil ) ) then
                        do
                            DEC_Trace( "Pas de 1er echelon" )
                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    self.ePhase = eMRT_AffecterFuseaux
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_AffecterFuseaux then
                    local sVide = {}--[[//-----------------------------------------------------------------------------
]]--[[//Le fuseau de la compagnie est coupe en DEUX
]]--[[//le pion en appui utilise le fuseau de la compagnie
]]--[[//-----------------------------------------------------------------------------
]]
                    local sFuseau = {}
                    local sFuseau_2 = {}
                    local sFuseau_3 = {}
                    --[[// scinde la reco en 2 ou 3 suivant le nombre de fuseaux selectionnes
]]local rN_ParFuseau = 0
                    --[[// Floor( DIA_Size( selPions_ASS_Reco ) / 3 );
]]rN_ParFuseau = 2
                    if( self.eActionMRT == eActionEffectuee ) then
                        do
                            self.eActionMRT = eActionEnCours
                                                        do
                                self.ePhase = eMRT_AssignerMissions
                                                                do return end

                            end

                        end
                    end

                    for _,x in pairs( self.selPions_ASS_Reco or {} ) do
                    local _continue = true
do
                            if( #( sFuseau ) < rN_ParFuseau ) then
                                DIA_PushBack( sFuseau, x )
                            else
do
                                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, { sFuseau, } )
self.done_ACT_Medo_Automate_AffecterFuseaux = function( self, _, v ) self.eActionMRT = v[1] end
                                    sFuseau = sVide
                                    DIA_PushBack( sFuseau, x )
                                end
                            end

                        end

                    end

                    if( #( sFuseau ) > 0 ) then
                        Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, { sFuseau, } )
self.done_ACT_Medo_Automate_AffecterFuseaux = function( self, _, v ) self.eActionMRT = v[1] end
                    end

                    _continue = false--[[// action ACT_Medo_Automate_AffecterFuseaux( lstPionsAttaque ) return in eActionMRT;				
]]
                                cases_switch_1[2] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]--[[// On verifie juste que la batterie peut effectuer la mission
]]--[[// if(  eActionMRT == eActionImpossible)    {         {}         halt(eActionImpossible);    }
]]                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    if( self.eValidationMRT == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "eValidationMRT == eActionImpossible" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        do
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { 1, } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
                    --[[// behavior BEH_Medo_Automate_ASS_ReconnaitreZonesDeploiement( selPions_ASS_Reco, mission.positionsAReconnaitre_ ) return in eActionMRT;
]]--[[// Assigne la mission au pc
]]Activate( self.activations.BEH_Medo_Automate_ASS_AssignerMission_PC, 1, { self.selPions_ASS_Reco, } )
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

}

node "BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement"
{
    feedbacks = { { { "done_BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement" }, "BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux", { "done_ACT_Medo_Automate_AffecterFuseaux" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASS_AssignerMission_PC", { "done_BEH_Medo_Automate_ASS_AssignerMission_PC" } },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.selPions = self.selPions or DEC_Automate_PionsAvecPC()
        self.selPions_ASS_Reco = self.selPions_ASS_Reco or {}
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Nombre de pions : " .. FloatToString( #( self.selPions ) ) )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_SelectionnerPions then
                    --[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------						
]]--[[// L'execution de la mission necessite la presence d'un 1er ech
]]self.selPions_ASS_Reco = S_Cherche_Automate_Filtre_TypePion( self.selPions, "SectionASS_Reco" )
                    if( ( #( self.selPions_ASS_Reco ) == 0 or #( self.selPions_ASS_Reco ) == nil ) ) then
                        do
                            DEC_Trace( "First echelon units is empty" )
                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    self.ePhase = eMRT_AffecterFuseaux
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_AffecterFuseaux then
                    local sVide = {}--[[//-----------------------------------------------------------------------------
]]--[[//Le fuseau de la compagnie est coupe en DEUX
]]--[[//le pion en appui utilise le fuseau de la compagnie
]]--[[//-----------------------------------------------------------------------------
]]
                    local sFuseau = {}
                    local sFuseau_2 = {}
                    local sFuseau_3 = {}
                    --[[// scinde la reco en 2 ou 3 suivant le nombre de fuseaux selectionnes
]]--[[// Floor( DIA_Size( selPions_ASS_Reco ) / 3 );
]]local rN_ParFuseau = 2
                    if( self.eActionMRT == eActionEffectuee ) then
                        do
                            self.eActionMRT = eActionEnCours
                                                        do
                                self.ePhase = eMRT_AssignerMissions
                                                                do return end

                            end

                        end
                    end

                    for _,x in pairs( self.selPions_ASS_Reco or {} ) do
                    local _continue = true
do
                            if( #( sFuseau ) < rN_ParFuseau ) then
                                DIA_PushBack( sFuseau, x )
                            else
do
                                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, { sFuseau, } )
self.done_ACT_Medo_Automate_AffecterFuseaux = function( self, _, v ) self.eActionMRT = v[1] end
                                    sFuseau = sVide
                                    DIA_PushBack( sFuseau, x )
                                end
                            end

                        end

                    end

                    if( #( sFuseau ) > 0 ) then
                        Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, { sFuseau, } )
self.done_ACT_Medo_Automate_AffecterFuseaux = function( self, _, v ) self.eActionMRT = v[1] end
                    end

                    _continue = false--[[// action ACT_Medo_Automate_AffecterFuseaux( lstPionsAttaque ) return in eActionMRT;				
]]
                                cases_switch_1[2] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]--[[// On verifie juste que la batterie peut effectuer la mission
]]--[[// if(  eActionMRT == eActionImpossible)    {         {}         halt(eActionImpossible);    }
]]                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    if( self.eValidationMRT == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "eValidationMRT == eActionImpossible" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        do
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { 1, } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
                    --[[// behavior BEH_Medo_Automate_ASS_ReconnaitreZonesDeploiement( selPions_ASS_Reco, mission.positionsAReconnaitre_ ) return in eActionMRT;
]]--[[// Assigne la mission au pc
]]Activate( self.activations.BEH_Medo_Automate_ASS_AssignerMission_PC, 1, { self.selPions_ASS_Reco, } )
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

}

node "BEH_Medo_Automate_ASS_AssignerMission_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ASS_AssignerMission_PC" }, "BEH_Medo_Automate_ASS_AssignerMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ASS_AssignerMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPion = self.params[1]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
            do
                --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------    		    	
]]local pAppui = nil
                for _,x in pairs( --[[// Potentiellement, le PC peut etre un pion de PE, dans ce cas la, il ne
]]--[[// s'appuie pas lui meme
]]self._namedParams.selPion or {} ) do
                local _continue = true
                    do
                        if( x ~= DEC_Automate_PionPC() ) then
                            do
                                pAppui = x
                                break
                            end
                        end

                    end

                end

                if( ( pAppui ~= 0 and pAppui ~= nil ) ) then
                    StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, DEC_Automate_PionPC(), pAppui, } )
                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ASS_AssignerMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_RecoEtDeploiement, "ACT_Medo_Automate_AffecterFuseaux", nodes.ACT_Medo_Automate_AffecterFuseaux }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_RecoEtDeploiement, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_RecoEtDeploiement, "BEH_Medo_Automate_ASS_AssignerMission_PC", nodes.BEH_Medo_Automate_ASS_AssignerMission_PC }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement, "ACT_Medo_Automate_AffecterFuseaux", nodes.ACT_Medo_Automate_AffecterFuseaux }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_PreparerMission_ReconnaitreZonesDeploiement, "BEH_Medo_Automate_ASS_AssignerMission_PC", nodes.BEH_Medo_Automate_ASS_AssignerMission_PC }

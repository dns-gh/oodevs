includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/automates/common/Globals.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Common/Globals.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 23/09/05 11:07 $
]]--[[// $Revision: 15 $
]]--[[// $Workfile: Globals.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
include "Common/Automates/Globals.bms"

include "Appui/ArtFdp/Automates/Common/Globals Poly.bms"

--[[// ----------------------------------------------------------------------------
]]--[[// S_Misc_Automate_ASS_ExtraitPoint_ProchePosition
]]--[[//
]]--[[//     Renvoie la position (appartenant a une liste de points) la plus proche
]]--[[//  d'une autre position
]]--[[// ----------------------------------------------------------------------------
]]--[[// 1105199104
]]--[[// ----------------------------------------------------------------------------
]]--[[// S_Misc_Automate_ASS_ExtraitZone_ProchePosition
]]--[[//
]]--[[//  Renvoie la position (appartenant a une liste de points) la plus proche
]]--[[//  d'une autre position
]]--[[// ----------------------------------------------------------------------------
]]--[[// 1105199104
]]--[[// ----------------------------------------------------------------------------
]]--[[// S_Misc_Automate_ASS_ExtraitPoint_ProchePosition
]]--[[//
]]--[[//     Renvoie la position (appartenant a une liste de points) la plus proche
]]--[[//  d'une autre position
]]--[[// ----------------------------------------------------------------------------
]]--[[// 1105199104
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie point le plus proche de la zone parmis les points passés en paramètre
]]--[[// ----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]--[[// Recherche les sectos de tir
]]--[[//-----------------------------------------------------------------------------
]]function S_Geometrie_Automate_ASS_CopiePointDansFuseau( lstPos_Mission, lstPos_Reco )
    local rIt = 0
    local rTailleListe = DEC_ListePoints_Size( lstPos_Mission )
    rIt = 0
    while rIt < rTailleListe do
        local _continue = true
do
            local ptZone = DEC_ListePoints_GetAt( lstPos_Mission, rIt )
            if( DEC_Geometrie_EstPointDansFuseau( ptZone ) ) then
                DEC_ListePoints_PushBack( lstPos_Reco, ptZone )
            end

        end
    rIt = rIt + 1
    end

end

function S_Geometrie_Automate_ASS_CopieZoneDansFuseau( lstZones_Mission, lstZones_Reco )
    local rIt = 0
    local rTailleListe = #( lstZones_Mission )
    rIt = 0
    while rIt < rTailleListe do
        local _continue = true
do
            local ptZone = DEC_UserTypeList_GetAt( lstZones_Mission, rIt )
            local ptBary = DEC_Geometrie_CalculerBarycentreLocalisation( ptZone )
            if( DEC_Geometrie_EstPointDansFuseau( ptBary ) ) then
                DEC_UserTypeList_PushBack( lstZones_Reco, ptZone )
            end

        end
    rIt = rIt + 1
    end

end

function S_Misc_Automate_ASS_ExtraitPoint_ProchePionDansFuseau( lstPos_Reco, pionASS )
    local _returnValue = nil
    local rMin = 1105199104
    local rIt = 0
    local rTailleListe = DEC_ListePoints_Size( lstPos_Reco )
    local rId_Zone = rTailleListe
    local ptPion = DEC_Automate_PionPosition( pionASS )
    rIt = 0
    while rIt < rTailleListe do
        local _continue = true
do
            local ptZone = DEC_ListePoints_GetAt( lstPos_Reco, rIt )
            if( not DEC_Automate_EstPointDansFuseauPion( ptZone, pionASS ) ) then
                _continue = false
            end

                if _continue then
                local rDist_Zone = DEC_Geometrie_Distance( ptPion, ptZone )
                if( rDist_Zone < rMin ) then
                    do
                        rMin = rDist_Zone
                        rId_Zone = rIt
                    end
                end

            end
        end
    rIt = rIt + 1
    end

    local ptCopie = nil
    if( rId_Zone < rTailleListe ) then
        do
            ptCopie = DEC_Geometrie_CreerPoint()
            DEC_Copie_Point( DEC_ListePoints_GetAt( lstPos_Reco, rId_Zone ), ptCopie )
            DEC_ListePoints_Remove( lstPos_Reco, rId_Zone )
        end
    end

    _returnValue = ptCopie
    do return _returnValue end
end

function S_Misc_Automate_ASS_ExtraitZone_ProchePionDansFuseau( lstZones_Reco, pionASS )
    local _returnValue = nil
    local rMin = 1105199104
    local rIt = 0
    local rTailleListe = #( lstZones_Reco )
    local rId_Zone = rTailleListe
    local ptPion = DEC_Automate_PionPosition( pionASS )
    rIt = 0
    while rIt < rTailleListe do
        local _continue = true
do
            local ptZone = DEC_UserTypeList_GetAt( lstZones_Reco, rIt )
            local ptBary = S_Geometrie_BarycentreZone( ptZone )
            if( not DEC_Automate_EstPointDansFuseauPion( ptBary, pionASS ) ) then
                _continue = false
            end

                if _continue then
                local rDist_Zone = DEC_Geometrie_Distance( ptPion, ptBary )
                if( rDist_Zone < rMin ) then
                    do
                        rMin = rDist_Zone
                        rId_Zone = rIt
                    end
                end

            end
        end
    rIt = rIt + 1
    end

    local ptCopie = nil
    if( rId_Zone < rTailleListe ) then
        do
            ptCopie = DEC_Geometrie_CreerLocalisation()
            DEC_Copie_Localisation( DEC_UserTypeList_GetAt( lstZones_Reco, rId_Zone ), ptCopie )
            DEC_UserTypeList_Remove( lstZones_Reco, DEC_UserTypeList_GetAt( lstZones_Reco, rId_Zone ) )
        end
    end

    _returnValue = ptCopie
    do return _returnValue end
end

function S_Misc_Automate_ASS_ExtraitPoint_ProchePosition( lstPos_Reco, ptPion )
    local _returnValue = nil
    local rMin = 1105199104
    local rIt = 0
    local rTailleListe = DEC_ListePoints_Size( lstPos_Reco )
    local rId_Zone = rTailleListe
    rIt = 0
    while rIt < rTailleListe do
        local _continue = true
do
            local ptZone = DEC_ListePoints_GetAt( lstPos_Reco, rIt )
            local rDist_Zone = DEC_Geometrie_Distance( ptPion, ptZone )
            if( rDist_Zone < rMin ) then
                do
                    rMin = rDist_Zone
                    rId_Zone = rIt
                end
            end

        end
    rIt = rIt + 1
    end

    local ptCopie = nil
    if( rId_Zone < rTailleListe ) then
        do
            ptCopie = DEC_Geometrie_CreerPoint()
            DEC_Copie_Point( DEC_ListePoints_GetAt( lstPos_Reco, rId_Zone ), ptCopie )
            DEC_ListePoints_Remove( lstPos_Reco, rId_Zone )
        end
    end

    _returnValue = ptCopie
    do return _returnValue end
end

function S_Geometrie_PointPlusProchePosition_DansFuseau( ptZone, listePoints )
    local _returnValue = 0
    local rDistanceMin = 524280
    _returnValue = DEC_ListePoints_Size( listePoints )
    local it = 0
    while it < DEC_ListePoints_Size( listePoints ) do
        local _continue = true
do
            local ptBuffer = DEC_ListePoints_GetAt( listePoints, it )
            if( not DEC_Geometrie_EstPointDansFuseau( ptBuffer ) ) then
                _continue = false
            end

                if _continue then
                local rDistanceTmp = DEC_Geometrie_Distance( ptBuffer, ptZone )
                if( rDistanceTmp < rDistanceMin ) then
                    do
                        rDistanceMin = rDistanceTmp
                        _returnValue = it
                    end
                end

            end
        end
    it = it + 1
    end

    do return _returnValue end
end

function S_ASS_CalculePositionSauvegardeDansZone( loc, dirDanger )
    local _returnValue = nil
    local subLocs = S_Geometrie_DecoupeLocalisation( loc, 3, dirDanger )
    if( #( subLocs ) ~= 3 ) then
        _returnValue = S_Geometrie_BarycentreZone( loc )
    else
        _returnValue = S_Geometrie_BarycentreZone( DEC_UserTypeList_GetAt( subLocs, 0 ) )
    end

    do return _returnValue end
end

function S_ASS_ChercheSectionsTir( sPions )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or emptyTable ) do
    local _continue = true
do
            local pion = x
            if( ( pion:GetType() == "SectionASS_Tir" ) or ( pion:GetType() == "SectionASS_SAM" ) ) then
                DIA_PushBack( sFiltre, pion )
            end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end


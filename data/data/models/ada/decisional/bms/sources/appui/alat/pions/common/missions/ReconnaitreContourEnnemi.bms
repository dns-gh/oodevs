includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/pions/common/missions/ReconnaitreContourEnnemi.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[//------------------------------------------------------------------------------
]]--[[// ReconnaitreSurContourEnnemi
]]--[[//
]]--[[// objectif : révéler la ligne avant et les flancs d'un dispositif ennemi
]]--[[//
]]--[[// Commentaires: 
]]--[[// -------------
]]--[[//
]]--[[// - Esquive sur enis reconnus à distance de tir + 1000 mètres
]]--[[// - Progression tactique sur enis non reconnus
]]--[[// - Si crash sur avarie carburant, alors, faire fin mission
]]--[[// - Reconnaissance des que l'on est en ambiance sureté
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_ALAT_ReconnaitreContourEnnemi"
{
    feedbacks = { { { "done_MIS_Pion_ALAT_ReconnaitreContourEnnemi" }, "MIS_Pion_ALAT_ReconnaitreContourEnnemi" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ALAT_ReconnaitreContourEnnemi, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", { "done_ACT_Maj_Pion_PasserEnTirSurRiposte" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Dep_Pion_ALAT_PremiereAllure", { "done_BEH_Dep_Pion_ALAT_PremiereAllure" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "ACT_Maj_Pions_ObjectifCourant", { "done_ACT_Maj_Pions_ObjectifCourant" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
        { "BEH_Obs_Pion_ALAT_ReconnaitreZone", { "done_BEH_Obs_Pion_ALAT_ReconnaitreZone" } },
        { "BEH_Eni_Pion_ALAT_GererEniRecoContourEni", { "done_BEH_Eni_Pion_ALAT_GererEniRecoContourEni" } },
        { "BEH_Manoeuvre_Pion_AllerStationner", { "done_BEH_Manoeuvre_Pion_AllerStationner" } },
        { "BEH_Dep_Pion_ALAT_SePoser", { "done_BEH_Dep_Pion_ALAT_SePoser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eReconnaitre
        self.pointFinFuseau = self.pointFinFuseau or DEC_Geometrie_CalculerPointArrivee()
        self.listeLocalisations = self.listeLocalisations or {}
        self.listeLocalisationsATraiter = self.listeLocalisationsATraiter or {}
        self.localisationCourante = self.localisationCourante or nil
        self.nouvelleLocalisation = self.nouvelleLocalisation or nil
        self.recoEnCours = self.recoEnCours or false
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                myself.plotsRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                --[[//decoupage du fuseau en troncons de 5 km de long
]]--[[//triés du plus proche au plus loin
]]self.listeLocalisations = DEC_Geometrie_DecoupeFuseauEnTroncons( 5000 )
                S_ListeLocalisations_Copie( self.listeLocalisations, self.listeLocalisationsATraiter )
                self.localisationCourante = S_Geometrie_LocalisationProche( self.listeLocalisations )
                self.nouvelleLocalisation = self.localisationCourante
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, emptyTable )
                end

                DEC_Copie_Point( self._namedParams.mission.pointRegroupement_, myself.pointRegroupement_ )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                if( self.ePhase ~= eFinMission and self.ePhase ~= eSExfiltrer ) then
                    do
                        StopActivateOverride( self, self.activations.BEH_Dep_Pion_ALAT_PremiereAllure, emptyTable )
                        self.ePhase = eSExfiltrer
                        self.eEtat = eActionEnCours
                    end
                end

                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
--[[//Supression de la localisation courante
]]--[[//sauf si c'est la dernière
]]--[[//on prend la localisation la plus proche qui sera forcement la suivante
]]--[[//avec notre algo
]]--[[//supprimer toutes les localisations situées avant la localisations
]]--[[//courante
]]--[[//si on a percu un ennemi dans le fuseau, passage en première allure
]]--[[// si l'agent n'est pas dans son fuseau ou s'il n'est pas dans une zone non reconnue
]]            local switch_1 = self.ePhase
                if switch_1 == eReconnaitre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_Reconnaissance, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.recoEnCours = false
                                if( #( self.listeLocalisationsATraiter ) > 1 ) then
if( DEC_UserTypeList_Contient( self.listeLocalisationsATraiter, self.localisationCourante ) ) then
                                        DEC_UserTypeList_Remove( self.listeLocalisationsATraiter, self.localisationCourante )
                                    end
                                end

                                self.localisationCourante = S_Geometrie_LocalisationProche( self.listeLocalisationsATraiter )
                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_Warning( eRC_MissionImpossible )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    self.nouvelleLocalisation = nil
                    for _,x in pairs( self.listeLocalisations or emptyTable ) do
                    local _continue = true
do
                            if( DEC_Geometrie_EstPointDansLocalisation( myself:DEC_Agent_Position(), x ) ) then
                                self.nouvelleLocalisation = x
                            end

                        end

                    end

                    if( self.nouvelleLocalisation ~= nil ) then
                        do
                            for _,x in pairs( self.listeLocalisations or emptyTable ) do
                            local _continue = true
                                do
                                    if( x ~= self.nouvelleLocalisation ) then
                                        do
                                            if( DEC_UserTypeList_Contient( self.listeLocalisationsATraiter, x ) ) then
                                                DEC_UserTypeList_Remove( self.listeLocalisationsATraiter, x )
                                            end

                                        end
                                    else
                                        break
                                    end

                                end

                            end

                        end
                    end

                    if( DEC_UserTypeList_Contient( self.listeLocalisationsATraiter, self.nouvelleLocalisation ) ) then
                        self.localisationCourante = self.nouvelleLocalisation
                    else
                        self.localisationCourante = S_Geometrie_LocalisationProche( self.listeLocalisationsATraiter )
                    end

                    if( not DIA_IsListEmpty( DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau() ) ) then
                        StartActivateOverride( self, self.activations.BEH_Dep_Pion_ALAT_PremiereAllure, GetMotivation( "MOT_Manoeuvrer" ) * 4, emptyTable )
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self.pointFinFuseau, } )
                    Activate( self.activations.ACT_Maj_Pions_ObjectifCourant, 1, { self.pointFinFuseau, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    if( ( not DEC_Geometrie_EstPointDansFuseau( myself:DEC_Agent_Position() ) or ( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Surete ) ) and not self.recoEnCours ) then
                        do
                            Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, GetMotivation( "MOT_Manoeuvrer" ) * 2, { self.pointFinFuseau, eProgressionDefaut, eTypeItiReconnaissance, } )
                        end
                    else
do
                            if( self.localisationCourante == nil ) then
                                do return end
                            end

                            self.recoEnCours = true
                            Activate( self.activations.BEH_Obs_Pion_ALAT_ReconnaitreZone, GetMotivation( "MOT_Manoeuvrer" ), { self.localisationCourante, } )
self.done_BEH_Obs_Pion_ALAT_ReconnaitreZone = function( self, _, v ) self.eEtat = v[1] end
                            Activate( self.activations.BEH_Eni_Pion_ALAT_GererEniRecoContourEni, GetMotivation( "MOT_Manoeuvrer" ) * 2, { self.localisationCourante, } )
                        end
                    end

                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnExfiltration, } )
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, emptyTable )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_Warning( eRC_MissionImpossible )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifCourant, 1, { self._namedParams.mission.pointRegroupement_, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    Activate( self.activations.BEH_Manoeuvre_Pion_AllerStationner, GetMotivation( "MOT_Manoeuvrer" ), { self._namedParams.mission.pointRegroupement_, } )
self.done_BEH_Manoeuvre_Pion_AllerStationner = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), emptyTable )
self.done_BEH_Dep_Pion_ALAT_SePoser = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                end
            end

    end,

    destroy = function( self )
                myself:ClearplotsRavitaillement_()
        F_Pion_SetobjectifEsquive( myself, nil )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// Reaction sur les ennemis
]]--[[// ------------------------
]]--[[//
]]--[[// le contournement des ennemis est réalisée tout au long de la mission
]]--[[// Ici, on decrit le comportement dans le cadre de la reconnaissance de la zone
]]--[[//
]]--[[// - Progression tactique vers un ennemi s'il n'est pas reconnu
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_ALAT_GererEniRecoContourEni"
{
    feedbacks = { { { "done_BEH_Eni_Pion_ALAT_GererEniRecoContourEni" }, "BEH_Eni_Pion_ALAT_GererEniRecoContourEni" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_ALAT_GererEniRecoContourEni, {value} ) end,
    activations =
    {
        { "BEH_Obs_Pion_ALAT_ReconnaitreUnite", { "done_BEH_Obs_Pion_ALAT_ReconnaitreUnite" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.localisation = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtatProgressionTactique = self.eEtatProgressionTactique or eActionEnCours
        local listeUnitesDetecteesDansFuseau = DEC_Connaissances_UnitesDetecteesDansFuseau()
        for _,x in pairs( listeUnitesDetecteesDansFuseau or emptyTable ) do
        local _continue = true
do
                if( DEC_ConnaissanceAgent_EstMort( x ) or not DEC_Geometrie_EstPointDansLocalisation( DEC_ConnaissanceAgent_Position( x ), self._namedParams.localisation ) ) then
                    _continue = false
                end

                    if _continue then
                    Activate( self.activations.BEH_Obs_Pion_ALAT_ReconnaitreUnite, S_Force_Pion_ALAT_ConnaissanceProche( x, 0 ), { 500, 1, x, } )
                end
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ALAT_ReconnaitreContourEnnemi = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ALAT_GererEniRecoContourEni, "BEH_Obs_Pion_ALAT_ReconnaitreUnite", nodes.BEH_Obs_Pion_ALAT_ReconnaitreUnite }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Dep_Pion_ALAT_PremiereAllure", nodes.BEH_Dep_Pion_ALAT_PremiereAllure }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "ACT_Maj_Pions_ObjectifCourant", nodes.ACT_Maj_Pions_ObjectifCourant }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Obs_Pion_ALAT_ReconnaitreZone", nodes.BEH_Obs_Pion_ALAT_ReconnaitreZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Eni_Pion_ALAT_GererEniRecoContourEni", nodes.BEH_Eni_Pion_ALAT_GererEniRecoContourEni }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Manoeuvre_Pion_AllerStationner", nodes.BEH_Manoeuvre_Pion_AllerStationner }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_ReconnaitreContourEnnemi, "BEH_Dep_Pion_ALAT_SePoser", nodes.BEH_Dep_Pion_ALAT_SePoser }

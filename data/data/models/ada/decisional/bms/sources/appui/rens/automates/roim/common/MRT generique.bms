includedFiles = includedFiles or {}
includedFiles["sources/appui/rens/automates/roim/common/MRT generique.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_RENS_ROIM_AssignerMissions
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_RENS_ROIM_AssignerMissions"
{
    feedbacks = { { { "done_BEH_Medo_Automate_RENS_ROIM_AssignerMissions" }, "BEH_Medo_Automate_RENS_ROIM_AssignerMissions" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_RENS_ROIM_AssignerMissions, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA", { "done_BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eType = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Pions subordonnés à l'Auto
]]local selPions = DEC_Automate_PionsAvecPC()
        self.ePhase = self.ePhase or eMRT_DeterminerEchelonsGlobals
        self.eEtat = self.eEtat or eActionEnCours
        self.sel_SMO = self.sel_SMO or {}
        self.sel_Drone = self.sel_Drone or {}
        self.sel_NonPrevu = self.sel_NonPrevu or {}--[[// suivre le SE
]]
         do
            local _continue = true
            local switch_1 = --[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[// 1) Vérifier les moyens, des renforts éventuels
]]--[[// 2) Déterminer les échelons
]]--[[// 2) Assigner certaines missions (les missions des unités de premier échelon)
]]--[[// $$$$ MIA 2004-10-01: les missions du deuxieme échelon sont données dans la conduite
]]--[[// $$$$ MIA 2004-10-01: car elles sont en permance évaluées durant la mission.
]]--[[// =============================================================================                                  
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_DeterminerEchelonsGlobals then
                    for _,x in pairs( --[[//---------------------------------------------------------------------
]]--[[// Assignation des grands échelons Ecl / Utile( PE + SE )/ non prevus
]]--[[//---------------------------------------------------------------------
]]selPions or emptyTable ) do
                    local _continue = true
do
                            local pion = x
                            --[[// On ne traite pas les pions non opérationnels
]]if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                                do
                                    DEC_Trace( "Attention " .. DEC_GetSzName( pion ) .. " n'est pas opérationnel" )
                                    DIA_PushFront( self.sel_NonPrevu, pion )
                                    _continue = false
                                end
                            end

                                if _continue then
                                 do
                                    local _continue = true
                                    local switch_2 = pion:GetType()
                                    local cases_switch_2 = {}
                                        if switch_2 == "Section_CL289_MiseEnOeuvre"
                                        or switch_2 == "Section_SDTI_MiseEnOeuvre" then
                                            DIA_PushFront( self.sel_SMO, pion )
                                            _continue = false
                                                                                cases_switch_2[1] = true
elseif switch_2 == "Drone_CL289"
                                        or switch_2 == "Drone_SDTI" then
                                            DIA_PushFront( self.sel_Drone, pion )
                                            _continue = false
                                                                                cases_switch_2[2] = true

                                        else
                                            DIA_PushFront( self.sel_NonPrevu, pion )
                                            _continue = false
                                                                                end
                                    end

                            end
                        end
--[[//-----------------------------------------------------------------------------
]]--[[// Mission impossible si pas de premier echelon
]]--[[//-----------------------------------------------------------------------------
]]
                    end

                    if( DIA_IsListEmpty( self.sel_SMO ) or DIA_IsListEmpty( self.sel_Drone ) ) then
                        do
                            DEC_Trace( "$$ Pas de pions permettant d'effectuer la mission $$" )
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
                    end

                    self.ePhase = eMRT_AssignerMissions
                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    if( self.eEtat == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                            DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                                                        do return end

                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[// Suivant le type de mission...
]]                    end

                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eType
                        local cases_switch_2 = {}
                            if switch_2 == "T_Mission_Automate_RENS_ROIM_CL289_RenseignerSur" then
                                --[[//-----------------------------------------------------------------------------
]]--[[// CL 289
]]--[[// Pour les besoins SCIPIO misenn oeuvre sur place
]]--[[//-----------------------------------------------------------------------------
]]--[[// Hack
]]local position = DEC_Automate_PionPosition( DIA_GetAt( self.sel_SMO, 0 ) )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.sel_SMO ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtat = v[1] end
                                --[[/*mission.positionDeploiement_*/]]Activate( self.activations.BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA, 1, { self.sel_SMO, position, eEtatEchelon_Premier, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// SDTI
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[1] = true
elseif switch_2 == "T_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur" then
                                --[[// Hack
]]local position = DEC_Automate_PionPosition( DIA_GetAt( self.sel_SMO, 0 ) )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.sel_SMO ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtat = v[1] end
                                --[[/*mission.positionDeploiement_*/]]Activate( self.activations.BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA, 1, { self.sel_SMO, position, eEtatEchelon_Premier, } )
                                _continue = false
                                                        cases_switch_2[2] = true

                            else
                                DEC_Trace( "Mission inconnue..." )
                                self.ePhase = eMRT_MissionImpossible
                                _continue = false
                                                        end
                        end

                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "--Mission impossible--" )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]                end
                if cases_switch_1[3] or switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end
                if not cases_switch_1[1] and not cases_switch_1[2] then
                                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_RENS_ROIM_AssignerMissions, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_RENS_ROIM_AssignerMissions, "BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA", nodes.BEH_Medo_Automate_RENS_ROIM_AssignerMettreEnOeuvreA }

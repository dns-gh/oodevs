includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/pions/common/missions/Couvrir.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// MIS_Pion_ALAT_Couvrir
]]--[[//
]]--[[// Commentaires : Correspond à une flanc garde
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Pion_ALAT_Couvrir"
{
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirLibre", {} },
        { "BEH_Ordre_Inopine", {} },
        { "Act_AbonnerPionAAppui", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Pion_Rens_PartageConnaissancesDansZoneAvec", {} },
        { "ACT_Obs_EtablirVisionFaceADir", {} },
        { "ACT_Maj_Pions_ObjectifEsquive", {} },
        { "BEH_Dep_Pion_ALAT_SePoser", {} },
        { "BEH_Dep_Pion_ALAT_SuivreSurFlanc", {} },
        { "BEH_Eni_Pion_ALAT_GererEniCouvrir", {} },
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", {} },
        { "ACT_Obs_EtablirVisionCur", {} },
        { "BEH_Manoeuvre_Pion_AllerStationner", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eEtat = self.eEtat or eActionEnCours
        self.eEtatAttendre = self.eEtatAttendre or eActionEnCours
        self.ePhase = self.ePhase or eAppuyer
        self.barycentreListePions = self.barycentreListePions or DEC_Geometrie_CreerPoint()
        self.listePionsACouvrir = self.listePionsACouvrir or {}
        self.listeCourantePionsACouvrir = self.listeCourantePionsACouvrir or {}
        self.directionGroupe = self.directionGroupe or nil
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                myself.plotsRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, {} )
                end

                DEC_Copie_Point( self._namedParams.mission.pointRegroupement_, myself.pointRegroupement_ )
            end
        end

        if( not DEC_Agent_AutomateEstEmbraye() ) then
            self.listePionsACouvrir = S_PionsNonDetruits( S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesACouvrir_ ) )
        else
            self.listePionsACouvrir = S_PionsNonDetruits( self._namedParams.mission.unitesACouvrir_ )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                if( self.ePhase ~= eFinMission and self.ePhase ~= eSExfiltrer ) then
                    do
                        self.ePhase = eSExfiltrer
                        self.eEtat = eActionEnCours
                    end
                end

                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[// selection des pions que l'on va réellement couvrir
]]--[[// --------------------------------------------------
]]        end

        DIA_Clear( self.listeCourantePionsACouvrir )
        self.listeCourantePionsACouvrir = S_Liste_Pion_ALAT_UnitesASuivre( self.listePionsACouvrir )
        for _,x in pairs( --[[// Gestion de l'abonnement à la liste des pions qui appuient
]]--[[// ---------------------------------------------------------
]]self.listeCourantePionsACouvrir ) do
        local _continue = true
            Activate( self.activations.Act_AbonnerPionAAppui, 1, { x, } )

        end

        if( not DIA_IsListEmpty( self.listeCourantePionsACouvrir ) ) then
            do
                local pointBuffer = DEC_Geometrie_CalculerBarycentreAgents( self.listeCourantePionsACouvrir )
                DEC_Copie_Point( pointBuffer, self.barycentreListePions )
            end
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eAppuyer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnCouverture, } )
                    for _,x in pairs( --[[// partage de la connaissance
]]self.listeCourantePionsACouvrir ) do
                    local _continue = true
do
                            local pion = x
                            Activate( self.activations.ACT_Pion_Rens_PartageConnaissancesDansZoneAvec, 1, { DEC_GetAutomate( pion ), pion:DEC_Agent_Position(), 10000, } )
                        end
--[[// se poser si toutes les unités a défendre sont posées
]]
                    end

                    local bSePoser = true
                    for _,x in pairs( self.listeCourantePionsACouvrir ) do
                    local _continue = true
do
                            if( S_EstPatrouilleALAT( x ) ) then
                                do
                                    if( x:DEC_Agent_EstEnVol() ) then
                                        bSePoser = false
                                    end

                                end
                            else
do
                                    bSePoser = false
                                end
                            end

                        end

                    end

                    local directionDanger = DEC_GetDirectionDanger( self._namedParams.mission )
                    Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { directionDanger, } )
                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self.barycentreListePions, } )
                    if( bSePoser ) then
                        Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), {} )
                    else
                        Activate( self.activations.BEH_Dep_Pion_ALAT_SuivreSurFlanc, GetMotivation( "MOT_Manoeuvrer" ), setmetatable( { self.listeCourantePionsACouvrir, directionDanger, 4500, eProgressionDefaut, eTypeItiInfiltration, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    end

                    Activate( self.activations.BEH_Eni_Pion_ALAT_GererEniCouvrir, GetMotivation( "MOT_ManoeuvrerSurEnis" ) * 2, { self.listePionsACouvrir, directionDanger, self._namedParams.mission.ciblesPrioritaires_, } )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnExfiltration, } )
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, {} )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                return

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                DIA_Clear( myself.plotsRavitaillement_ )
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_Warning( eRC_MissionImpossible )
                                                                self.params.__returnValue = eActionImpossible
                                Halt( self )
                                do return end

                            end

                                                        self.params.__returnValue = eActionImpossible
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    Activate( self.activations.BEH_Manoeuvre_Pion_AllerStationner, GetMotivation( "MOT_Manoeuvrer" ), setmetatable( { self._namedParams.mission.pointRegroupement_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                DIA_Clear( myself.plotsRavitaillement_ )
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self.params.__returnValue = eActionEffectuee
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                                end
            end

    end,

    destroy = function( self )
                DIA_Clear( myself.plotsRavitaillement_ )
        F_Pion_SetobjectifEsquive( myself, nil )
    end,

--[[// -----------------------------------------------------------------------------
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_ALAT_GererEniCouvrir"
{
    activations =
    {
        { "BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsACouvrir = self.params[1]
        self._namedParams.directionCouverture = self.params[2]
        self._namedParams.ciblesPrioritaires = self.params[3]
    end,

    activate = function( self )
        for _,x in pairs( self._namedParams.listePionsACouvrir ) do
        local _continue = true
do
                local listeUnitesEnnemiesPercues = DEC_Connaissances_UnitesEnnemiesVivantesDansCercle( x:DEC_Agent_Position(), 3 * DEC_Geometrie_Distance( myself:DEC_Agent_Position(), x:DEC_Agent_Position() ) )
                for _,y in pairs( listeUnitesEnnemiesPercues ) do
                local _continue = true
do
                        Activate( self.activations.BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire, S_Force_Pion_ALAT_Defendre( x, y, self._namedParams.ciblesPrioritaires ), { 0, y, eReconnu, 1, M_DOCTRINE_PION_ALAT_PH(), false, } )
                    end

                end

            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ALAT_Couvrir = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ALAT_GererEniCouvrir, "BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire", nodes.BEH_Eni_Pion_ALAT_AttendrePuisAllerDetruire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "Act_AbonnerPionAAppui", nodes.Act_AbonnerPionAAppui }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Pion_Rens_PartageConnaissancesDansZoneAvec", nodes.ACT_Pion_Rens_PartageConnaissancesDansZoneAvec }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "BEH_Dep_Pion_ALAT_SePoser", nodes.BEH_Dep_Pion_ALAT_SePoser }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "BEH_Dep_Pion_ALAT_SuivreSurFlanc", nodes.BEH_Dep_Pion_ALAT_SuivreSurFlanc }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "BEH_Eni_Pion_ALAT_GererEniCouvrir", nodes.BEH_Eni_Pion_ALAT_GererEniCouvrir }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Couvrir, "BEH_Manoeuvre_Pion_AllerStationner", nodes.BEH_Manoeuvre_Pion_AllerStationner }

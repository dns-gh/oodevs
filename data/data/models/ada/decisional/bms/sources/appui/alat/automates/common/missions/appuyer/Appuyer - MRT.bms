includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/appuyer/Appuyer - MRT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Appuyer : 
]]--[[//
]]--[[// - on realise un appui direct + un detruire dans zone.
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_Appuyer"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ALAT_Appuyer" }, "MIS_Automate_MRT_ALAT_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ALAT_Appuyer, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        --[[// variables presistantes
]]self.selPions = self.selPions or S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        self.listeHAC = self.listeHAC or S_Cherche_Automate_Filtre_TypePion( self.selPions, "AntitankHelicopterPatrol" )
        self.listeHAP = self.listeHAP or S_Cherche_Automate_Filtre_TypePion( self.selPions, "EscortAndCloseSupportHelicopterPatrol" )
        self.listePeutAppuyerOuDetruire = self.listePeutAppuyerOuDetruire or {}
        if( ModuleBegins() ) then
            do
                S_Liste_Concatene( self.listePeutAppuyerOuDetruire, self.listeHAP, self.listeHAC )
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_ or emptyTable
                DEC_SetMission( myself, self._namedParams.mission )
                --[[// -----------------------------------------------------------------
]]--[[// 1. Vérifier les moyens, determiner les patrouilles qui vont aller 
]]--[[// Detruire, et celle qui vont faire de l'appui direct
]]--[[// -----------------------------------------------------------------
]]if( DIA_IsListEmpty( self.listePeutAppuyerOuDetruire ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

            end
        end

        DEC_MRT_Valide()
                self:SendFeedback( eActionEffectuee )
        Halt( self )
        do return end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_Appuyer = { "mission" }

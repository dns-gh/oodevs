includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/freiner/Freiner - CDT.bms"] = true

local emptyTable = emptyTable

--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate ALAT Freiner :
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Freiner"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_Freiner" }, "MIS_Automate_CDT_ALAT_Freiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_Freiner, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Mission_Automate_AssignerSuivreAListe", { "done_BEH_Mission_Automate_AssignerSuivreAListe" } },
        { "BEH_Manoeuvre_Automate_ALAT_GererReleves", { "done_BEH_Manoeuvre_Automate_ALAT_GererReleves" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "done_BEH_Automate_ALAT_CoordonnerFeux" } },
        { "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif", { "done_BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif" } },
        { "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", { "done_BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eFreiner
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeFreiner = self.listeFreiner or {}
        self.listeFreinerPrec = self.listeFreinerPrec or {}
        self.listeFreinerOperationnels = self.listeFreinerOperationnels or {}
        self.listeReserve = self.listeReserve or {}
        self.listeSuivre = self.listeSuivre or {}
        self.listePeutFaireFreiner = self.listePeutFaireFreiner or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, emptyTable )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// ---------------------------------------------------------------------
]]--[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]self.listePionsSgpt = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// liste des pions qui Freinent
]]self.listeFreiner = {}
        self.listeFreiner = S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsSansPC(), "T_Mission_Pion_ALAT_Freiner" )
        self.listeFreinerOperationnels = {}
        self.listeFreinerOperationnels = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_Freiner" )
        self.listeSuivre = {}
        self.listeSuivre = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_Suivre" )
        --[[// liste des pions qui peuvent Freiner
]]local listeHAC = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AntitankHelicopterPatrol" )
        local listeHAP = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "EscortAndCloseSupportHelicopterPatrol" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AirDefenseHelicopterPatrol" )
        self.listePeutFaireFreiner = {}
        S_Liste_Concatene( self.listePeutFaireFreiner, listeHAC, listeHAP )
        S_Liste_Concatene( self.listePeutFaireFreiner, self.listePeutFaireFreiner, listeHAM )
        --[[//liste des pions de reserve
]]self.listeReserve = {}
        self.listeReserve = S_Cherche_Automate_Filtre_PionNonDansListe( S_Cherche_Automate_Filtre_PionNonDansListe( self.listePeutFaireFreiner, self.listeFreinerOperationnels ), self.listeSuivre )
        --[[// liste des pions HM Log
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local _continue = true
--[[// gestion des pions qui sont en reserve : mission suivre le pion
]]--[[// operationnel le plus en arriere
]]--[[// gestion des releves - listeFreinerPrec peut contenir des pions
]]--[[// ayant la mission freiner détruits
]]--[[// coordination des feux
]]--[[// gestion étalement du dispositif
]]--[[// coordination des ravitaillements
]]--[[// ravitaillements et IMEX
]]            local switch_1 = self.ePhase
                if switch_1 == eFreiner then
                    if( DIA_IsListEmpty( self.listeFreinerOperationnels ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        do return end

                        end
                    end

                    if( not DIA_IsListEmpty( self.listeFreinerOperationnels ) ) then
                        do
                            local pionASuivre = DEC_Geometrie_PionDerriere( self.listeFreinerOperationnels, DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                            Activate( self.activations.BEH_Mission_Automate_AssignerSuivreAListe, 1, { ePhase_CDT, self.listeReserve, pionASuivre, } )
                        end
                    end

                    Activate( self.activations.BEH_Manoeuvre_Automate_ALAT_GererReleves, 1, { self.listeFreinerPrec, self.listeSuivre, } )
                    self.listeFreinerPrec = self.listeFreiner
                    Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeFreinerOperationnels, 0, } )
                    Activate( self.activations.BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif, 1, { self.listeFreinerOperationnels, 15000, } )
                    if( not DIA_IsListEmpty( self.listePeutFaireFreiner ) ) then
                        Activate( self.activations.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne, 1, { self.listePeutFaireFreiner, } )
                    end

                    Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, M_DOCTRINE_ALAT_DISTANCE_PLOTS(), self._namedParams.mission.pointRegroupement_, false, self._namedParams.mission.porteeAction_, } )
                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Freiner = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Mission_Automate_AssignerSuivreAListe", nodes.BEH_Mission_Automate_AssignerSuivreAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Manoeuvre_Automate_ALAT_GererReleves", nodes.BEH_Manoeuvre_Automate_ALAT_GererReleves }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif", nodes.BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", nodes.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Freiner, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

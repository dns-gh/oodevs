includedFiles = includedFiles or {}
includedFiles["sources/appui/trans/automates/missions/serecompleter/SeRecompleter - MRT.bms"] = true

node "MIS_Automate_MRT_SeRecompleter"
{
    feedbacks = { { { "done_MIS_Automate_MRT_SeRecompleter" }, "MIS_Automate_MRT_SeRecompleter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_SeRecompleter, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "done_BEH_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        self.ptZone = self.ptZone or S_Geometrie_BarycentreZone( self._namedParams.mission.zoneRavitaillement_ )
        if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        --[[//---------------------------------------------------------------------
]]--[[// Vérif assignation mission
]]--[[//---------------------------------------------------------------------
]]if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "eValidationMRT == eActionImpossible" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        for _,x in pairs( --[[//---------------------------------------------------------------------
]]--[[// Assignation de la mission "Faire mouvement" dans la zone
]]--[[//---------------------------------------------------------------------
]]DEC_Automate_PionsAvecPC() or {} ) do
        local _continue = true
do
                local pion = x
                Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_MRT, pion, self.ptZone, eEtatEchelon_Premier, } )
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_SeRecompleter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SeRecompleter, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_SeRecompleter, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }

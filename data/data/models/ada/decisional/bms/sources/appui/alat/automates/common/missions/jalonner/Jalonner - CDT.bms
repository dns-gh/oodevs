includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/jalonner/Jalonner - CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Jalonner :
]]--[[//
]]--[[// Commentaire :
]]--[[//               - Gestion de l'étalement du dispositif
]]--[[//
]]--[[//               - Les pions Log font de l'imex s'il n'est pas nécessaire 
]]--[[//                 d'utiliser leur fonction logistique ( plots de 
]]--[[//                 ravitaillement si les unités sont à plus de 30 km du plot 
]]--[[//                 le plus proche
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Jalonner"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_Jalonner" }, "MIS_Automate_CDT_ALAT_Jalonner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_Jalonner, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Mission_Automate_AssignerSuivreAListe", { "done_BEH_Mission_Automate_AssignerSuivreAListe" } },
        { "BEH_Manoeuvre_Automate_ALAT_GererReleves", { "done_BEH_Manoeuvre_Automate_ALAT_GererReleves" } },
        { "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", { "done_BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "done_BEH_Automate_ALAT_CoordonnerFeux" } },
        { "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif", { "done_BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eJalonner
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listePionsEnCoursRavitaillement = self.listePionsEnCoursRavitaillement or {}
        self.listeReserve = self.listeReserve or {}
        self.listePeutFaireJalonner = self.listePeutFaireJalonner or {}
        self.listeJalonner = self.listeJalonner or {}
        self.listeJalonnerPrec = self.listeJalonnerPrec or {}
        self.listeJalonnerOperationnels = self.listeJalonnerOperationnels or {}
        self.listePeutRelever = self.listePeutRelever or {}
        self.listeSuivre = self.listeSuivre or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, emptyTable )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// ---------------------------------------------------------------------
]]--[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]self.listePionsSgpt = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// liste des pions en cours de ravitaillement
]]self.listePionsEnCoursRavitaillement = {}
        self.listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        --[[// liste des pions qui Jalonnent
]]self.listeJalonner = {}
        self.listeJalonner = S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsSansPC(), "T_Mission_Pion_ALAT_Jalonner" )
        self.listeJalonnerOperationnels = {}
        self.listeJalonnerOperationnels = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_Jalonner" )
        self.listeSuivre = {}
        self.listeSuivre = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_Suivre" )
        --[[// liste des pions qui peuvent Jalonner
]]local listeHAC = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AntitankHelicopterPatrol" )
        local listeHAP = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "EscortAndCloseSupportHelicopterPatrol" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AirDefenseHelicopterPatrol" )
        self.listePeutFaireJalonner = {}
        S_Liste_Concatene( self.listePeutFaireJalonner, listeHAC, listeHAP )
        S_Liste_Concatene( self.listePeutFaireJalonner, self.listePeutFaireJalonner, listeHAM )
        --[[//liste des pions de reserve
]]--[[//c'est a dire tous les pions qui ne jalonnent pas, qui ne suivent pas et qui ne sont pas en
]]--[[//cours de ravitaillment ( ces pions sont dispo pour réaliser une mission )
]]self.listeReserve = {}
        self.listeReserve = S_Cherche_Automate_Filtre_PionNonDansListe( S_Cherche_Automate_Filtre_PionNonDansListe( S_Cherche_Automate_Filtre_PionNonDansListe( self.listePeutFaireJalonner, self.listeJalonnerOperationnels ), self.listeSuivre ), self.listePionsEnCoursRavitaillement )
        --[[//liste des pions que l'on peut utiliser pour relever
]]self.listePeutRelever = {}
        self.listePeutRelever = S_Cherche_Automate_Filtre_PionNonDansListe( self.listeSuivre, self.listePionsEnCoursRavitaillement )
        --[[// liste des pions HM Log
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local _continue = true
--[[// Gestion des releves - listeJalonnerPrec peut contenir des unités
]]--[[// détruites
]]--[[// coordination des ravitaillements
]]--[[// Coordination des feux
]]--[[// gestion etalement du dispositif
]]--[[// ravitaillements et IMEX
]]            local switch_1 = self.ePhase
                if switch_1 == eJalonner then
                    if( DIA_IsListEmpty( self.listeJalonnerOperationnels ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        do return end

                        end
                    end

                    if( not DIA_IsListEmpty( self.listeJalonnerOperationnels ) and not DIA_IsListEmpty( self.listeReserve ) ) then
                        do
                            local pionASuivre = DEC_Geometrie_PionDerriere( self.listeJalonnerOperationnels, DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                            Activate( self.activations.BEH_Mission_Automate_AssignerSuivreAListe, 1, { ePhase_CDT, self.listeReserve, pionASuivre, } )
                        end
                    end

                    Activate( self.activations.BEH_Manoeuvre_Automate_ALAT_GererReleves, 1, { self.listeJalonnerPrec, self.listePeutRelever, } )
                    self.listeJalonnerPrec = self.listeJalonner
                    if( not DIA_IsListEmpty( self.listePeutFaireJalonner ) ) then
                        Activate( self.activations.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne, 1, { self.listePeutFaireJalonner, } )
                    end

                    Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeJalonnerOperationnels, 0, } )
                    Activate( self.activations.BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif, 1, { self.listeJalonnerOperationnels, 15000, } )
                    Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, M_DOCTRINE_ALAT_DISTANCE_PLOTS(), self._namedParams.mission.pointRegroupement_, false, } )
                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Jalonner = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Mission_Automate_AssignerSuivreAListe", nodes.BEH_Mission_Automate_AssignerSuivreAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Manoeuvre_Automate_ALAT_GererReleves", nodes.BEH_Manoeuvre_Automate_ALAT_GererReleves }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", nodes.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif", nodes.BEH_Manoeuvre_Automate_ALAT_GererEtalementDispositif }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Jalonner, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

includedFiles = includedFiles or {}
includedFiles["sources/appui/genie/automates/cie blindee/missions/realiser travaux/RealiserTravaux - CDT.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_GEN_RealiserTravaux
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_GEN_RealiserTravaux"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_Warning", {} },
        { "BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.listeObjetsPlanifies = self.listeObjetsPlanifies or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                --[[// copie 
]]self.listeObjetsPlanifies = S_Obj_TrierListePourContruireObjetsPlanifies( self._namedParams.mission.travaux_ )
            end
--[[//---------------------------------------------------------------------
]]--[[// Ordre conduite
]]--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )
        --[[//---------------------------------------------------------------------
]]--[[// Vérification des moyens
]]--[[//---------------------------------------------------------------------
]]local listePionsGenie = S_ObtenirPionsOperationnelsFiltre( "SectionGenie" )
        if( ( #( listePionsGenie ) == 0 or #( listePionsGenie ) == nil ) ) then
            do
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion Plan d'obstacle et renforcement
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets, 1, { self.listeObjetsPlanifies, self._namedParams.mission.zoneRegroupement_, } )
    end,

    destroy = function( self )
                DIA_Clear( g_selObs_ARealiser )
        DIA_Clear( g_selObstacles )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", {} },
        { "BEH_Misc_Automate_GEN_GererTravaux", {} },
        { "BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.travaux = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        if( ModuleBegins() ) then
            do
                for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                local _continue = true
                    Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )

                end

                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion construction et renforts -- traitement séparé et indépendant. Ce
]]--[[// qui lie les deux ce sont les objets à traiter 
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Misc_Automate_GEN_GererTravaux, 1, { self._namedParams.travaux, self._namedParams.zoneRegroupement, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, 1, { self._namedParams.travaux, self._namedParams.zoneRegroupement, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererTravaux
]]--[[//
]]--[[// Commentaires: Construire les obstacles dans l'ordre définie par la liste 
]]--[[//               passée en paramètre. Cette ordre est défini par l'anibas
]]--[[//               ordre de selection des objets dans l'interface 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererTravaux"
{
    activations =
    {
        { "BEH_Mission_Automate_Gen_AssignerConstruireObjetA", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Mission_Automate_AssignerDecrocherA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.travaux = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        --[[// Copie? --> oui
]]self.listeGenObjetAConstruire = self.listeGenObjetAConstruire or self._namedParams.travaux
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//-------------------------------------------------------------------------
]]local listePionsGenie = S_Gen_ObtenirSectionsGenieDisponibles()
        for _,pion in pairs( listePionsGenie or {} ) do
        local _continue = true
do
                local objetAConstruire = nil
                if( not DIA_IsListEmpty( self.listeGenObjetAConstruire ) ) then
                    do
                        objetAConstruire = DEC_UserTypeList_GetAt( self.listeGenObjetAConstruire, 0 )
                        Activate( self.activations.BEH_Mission_Automate_Gen_AssignerConstruireObjetA, 1, { pion, objetAConstruire, } )
                        --[[// pour renforcement
]]S_Gen_AssocierGenObjetAPion( pion, objetAConstruire )
                        --[[// GenObjet traité
]]DEC_UserTypeList_Remove( self.listeGenObjetAConstruire, objetAConstruire )
                    end
                else
do
                        Activate( self.activations.ACT_Info_Trace, 1, { "Travaux finis: Assigner decrocher", } )
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_Gen_AssignerConstruireObjetA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_Gen_AssignerConstruireObjetA"
{
    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerMissionConstruireA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objet = self.params[2]
    end,

    activate = function( self )
        Activate( self.activations.BEH_Mission_Automate_GEN_AssignerMissionConstruireA, 1, { ePhase_CDT, self._namedParams.pion, self._namedParams.objet, eEtatEchelon_Premier, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux"
{
    activations =
    {
        { "BEH_Objet_Automate_GEN_VerifierRenfortPourConstruireObjets", {} },
        { "BEH_Misc_Automate_GEN_GererRenforcement", {} },
        { "BEH_Misc_Automate_GEN_GererFinRenforcementTravaux", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Mission_Automate_AssignerDecrocherA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.travaux = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// CR sur renforcement 
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Objet_Automate_GEN_VerifierRenfortPourConstruireObjets, 1, { self._namedParams.travaux, } )
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les T_Gen_Objet_ARealiser --> Assignation renforcement
]]--[[//-------------------------------------------------------------------------
]]g_selObs_ARealiser or {} ) do
        local _continue = true
do
                local objetARealiser = x
                --[[// Si besoin de renforcement
]]if( not DEC_Automate_PionPeutConstruireObjet( objetARealiser:Getpion_(), DEC_GenObject_Type( objetARealiser:Getobstacle_() ) ) ) then
                    Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcement, 1, { objetARealiser, } )
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Rendre dispo les renforts si fin construction
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selObs_ARealiser or {} ) do
        local _continue = true
do
                local objetARealiser = x
                Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementTravaux, 1, { objetARealiser, } )
            end
--[[//-------------------------------------------------------------------------
]]--[[// Decrochage en fin de mission
]]--[[//-------------------------------------------------------------------------
]]
        end

        local listePE = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
        if( DIA_IsListEmpty( listePE ) and not ModuleBegins() ) then
            do
                local listeGroupes = S_Gen_ObtenirGroupeGenie()
                for _,pion in pairs( listeGroupes or {} ) do
                local _continue = true
                    do
                        --[[// cast
]]local groupe = pion
                        if( F_Pion_GeteEtatPhaseMission( groupe ) == eEtatPhaseMission_FinMission ) then
                            do
                                Activate( self.activations.ACT_Info_Trace, 1, { "Mission finie: Assigner decrocher", } )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, groupe, self.positionRegroupement, eEtatEchelon_Second, } )
                            end
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementTravaux
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementTravaux"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererFinRenforcementPour", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetARealiser = self.params[1]
    end,

    activate = function( self )
        --[[// Sécurité
]]if( ( ( self._namedParams.objetARealiser:GetpionRenforcement_() == 0 or self._namedParams.objetARealiser:GetpionRenforcement_() == nil ) or self._namedParams.objetARealiser:Getpion_() == 0 or ( self._namedParams.objetARealiser:GetpionRenforcement_() == 0 or self._namedParams.objetARealiser:GetpionRenforcement_() == nil ) or self._namedParams.objetARealiser:Getpion_() == nil ) ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Rendre le renforcement dispo si le pion liés à l'objet a fini sa mission
]]--[[//------------------------------------------------------------------------- 
]]if( F_Pion_GeteEtatPhaseMission( self._namedParams.objetARealiser:Getpion_() ) == eEtatPhaseMission_FinMission ) then
            Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementPour, 1, { self._namedParams.objetARealiser:GetpionRenforcement_(), self._namedParams.objetARealiser, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementPour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementPour"
{
    activations =
    {
        { "ACT_Ordre_Automate_Interrompre", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objetARealiser = self.params[2]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Get " .. DEC_GetSzName( self._namedParams.pion ) .. " back" )
                Activate( self.activations.ACT_Ordre_Automate_Interrompre, 1, { self._namedParams.pion, } )
                --[[// --> REMISE A DIPSOSITION
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Second )
                DIA_Remove( g_selObs_ARealiser, self._namedParams.objetARealiser )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcement
]]--[[//
]]--[[// Commentaires:  
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcement"
{
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererRenforcementDe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetARealiser = self.params[1]
    end,

    activate = function( self )
        --[[// Renforcement déjà assigné
]]if( self._namedParams.objetARealiser:GetpionRenforcement_() ~= nil ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// selection des différents renforts possibles
]]--[[//-------------------------------------------------------------------------
]]local selPAASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupePAA )
        local selMLFSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMLF )
        local selEFASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEFA )
        local selPFMSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionPFM )
        local selSectionTravaux = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionTravaux )
        local selGroupeEBG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEBG )
        local selGroupeMPG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMPG )
        local selGroupeDISP = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeDISP )
        local selSectionSOUVIM = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionSOUVIM )
        local selGroupeMFRD = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMFRD )
        local selGroupeOT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeOT )
        local selSectionDeminageLourd = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionDeminageLourd )
        local selGroupeMADEZ = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMADEZ )
        local selGroupeMATS = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeMATS )
        local selGroupePAT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupePAT )
        local selGroupeEnfouisseur = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEnfouisseur )
        local selGroupeEnergie = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEnergie )
        local selGroupeEquipementPoser = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( GroupeEquipementPoser )
        local selSectionEquipementPlage = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionEquipementPlage )
        local selSectionEau = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( SectionEau )
        local selDLRG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( DLRG )
        --[[//-------------------------------------------------------------------------
]]--[[// Traiter d'éventuels renforts pour construire l'objet
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selPAASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selMLFSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selEFASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selPFMSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selSectionTravaux, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeEBG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeMPG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeDISP, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selSectionSOUVIM, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeMFRD, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeOT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selSectionDeminageLourd, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeMADEZ, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeMATS, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupePAT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeEnfouisseur, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeEnergie, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selGroupeEquipementPoser, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selSectionEquipementPlage, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selSectionEau, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementDe, 1, { self._namedParams.objetARealiser, selDLRG, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcement
]]--[[//
]]--[[// Commentaires:  
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementDe"
{
    activations =
    {
        { "BEH_Mission_Automate_GEN_RenforcerGenObjet", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetARealiser = self.params[1]
        self._namedParams.listePionsRenforcement = self.params[2]
    end,

    activate = function( self )
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les pions en renforcement
]]--[[//-------------------------------------------------------------------------
]]self._namedParams.listePionsRenforcement or {} ) do
        local _continue = true
do
                local pionRenfort = x
                if( DEC_Automate_PionPeutConstruireObjet( pionRenfort, DEC_GenObject_Type( self._namedParams.objetARealiser:Getobstacle_() ) ) ) then
                    Activate( self.activations.BEH_Mission_Automate_GEN_RenforcerGenObjet, 1, { self._namedParams.objetARealiser, pionRenfort, self._namedParams.objetARealiser:Getpion_(), DEC_GenObject_Localisation( self._namedParams.objetARealiser:Getobstacle_() ), } )
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_RenforcerGenObjet
]]--[[//
]]--[[// Commentaires: paramètre = T_Gen_Objet_ARealiser
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_RenforcerGenObjet"
{
    instances =
    {
        max = 1--[[// tres important
]],
        boost = 1.01--[[// tres important
]],
    },

    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerRenforcerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
        self._namedParams.pionEnRenfort = self.params[2]
        self._namedParams.pionARenforcer = self.params[3]
        self._namedParams.position = self.params[4]
    end,

    activate = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Assignation
]]--[[//-------------------------------------------------------------------------
]]self._namedParams.objet:SetpionRenforcement_( self._namedParams.pionEnRenfort )
        --[[// Pion renforcement
]]--[[// Pion à renforcer
]]--[[// Localisation
]]Activate( self.activations.BEH_Mission_Automate_GEN_AssignerRenforcerA, 1, { ePhase_CDT, self._namedParams.pionEnRenfort, self._namedParams.pionARenforcer, self._namedParams.position, eEtatEchelon_Premier, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_GEN_RealiserTravaux = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementPour, "ACT_Ordre_Automate_Interrompre", nodes.ACT_Ordre_Automate_Interrompre }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementTravaux, "BEH_Misc_Automate_GEN_GererFinRenforcementPour", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementPour }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcement, "BEH_Misc_Automate_GEN_GererRenforcementDe", nodes.BEH_Misc_Automate_GEN_GererRenforcementDe }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementDe, "BEH_Mission_Automate_GEN_RenforcerGenObjet", nodes.BEH_Mission_Automate_GEN_RenforcerGenObjet }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, "BEH_Objet_Automate_GEN_VerifierRenfortPourConstruireObjets", nodes.BEH_Objet_Automate_GEN_VerifierRenfortPourConstruireObjets }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, "BEH_Misc_Automate_GEN_GererRenforcement", nodes.BEH_Misc_Automate_GEN_GererRenforcement }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, "BEH_Misc_Automate_GEN_GererFinRenforcementTravaux", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementTravaux }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererTravaux, "BEH_Mission_Automate_Gen_AssignerConstruireObjetA", nodes.BEH_Mission_Automate_Gen_AssignerConstruireObjetA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererTravaux, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererTravaux, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets, "BEH_Misc_Automate_GEN_GererTravaux", nodes.BEH_Misc_Automate_GEN_GererTravaux }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets, "BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux", nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourTravaux }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_RenforcerGenObjet, "BEH_Mission_Automate_GEN_AssignerRenforcerA", nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_Gen_AssignerConstruireObjetA, "BEH_Mission_Automate_GEN_AssignerMissionConstruireA", nodes.BEH_Mission_Automate_GEN_AssignerMissionConstruireA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RealiserTravaux, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RealiserTravaux, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_RealiserTravaux, "BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets", nodes.BEH_Mission_Automate_GEN_CDT_RealiserPlanObjets }

includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/attaquer/Attaquer - CDT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate ALAT Attaquer :
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Attaquer"
{
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "onHalt" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "onHalt" } },
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "onHalt" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe", { "onHalt" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "onHalt" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "onHalt" } },
        { "BEH_ROE_Automate_TirRestreint", { "onHalt" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Automate_CDT_ALAT_Attaquer" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eDetruire
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeAttaquer = self.listeAttaquer or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.listeHMLog = self.listeHMLog or {}
        if( ModuleBegins() ) then
            do
                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, {} )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
            end
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// donner des missions aux pions qui sont opérationnels et qui ne sont pas en cours
]]--[[// de ravitaillement
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        local listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsSgpt, listePionsEnCoursRavitaillement )
        --[[// Mise à Jour des selections
]]--[[// --------------------------
]]local listeHAC = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AntitankHelicopterPatrol" )
        local listeHAP = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "EscortAndCloseSupportHelicopterPatrol" )
        --[[// liste des pions pour IMEX
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "GeneralPurposeHelicopterPatrol" )
        --[[// liste des pions qui peuvent attaquer
]]DIA_Clear( self.listeAttaquer )
        self.listeAttaquer = S_Liste_Concatene( listeHAC, listeHAP )
        DIA_Clear( self.listePionsAAppuyerIMEX )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    --[[// Condition d'arret            
]]--[[// -----------------
]]if( DIA_IsListEmpty( self.listeAttaquer ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        return

                        end
--[[// Attaquer : ordre de creation des missions
]]                    end

                    if( not DIA_IsListEmpty( self.listeAttaquer ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe, 1, { ePhase_CDT, self.listeAttaquer, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, } )
                    end

                    --[[// Gestion de la coordination des feux
]]--[[// -----------------------------------
]]Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeAttaquer, 0.3, } )
                    --[[// IMEX et plots de ravitaillements
]]--[[// --------------------------------
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Attaquer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Attaquer, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

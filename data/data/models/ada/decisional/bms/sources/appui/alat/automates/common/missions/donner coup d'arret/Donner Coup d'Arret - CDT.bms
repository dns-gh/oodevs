includedFiles = includedFiles or {}
includedFiles["sources/appui/alat/automates/common/missions/donner coup d'arret/Donner Coup d'Arret - CDT.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate DonnerCoupArret :
]]--[[//
]]--[[// Le pions le plus en arriere du dispositif a la consigne de tir TirLibre.
]]--[[// Les autres on la consigne de tir restreint.
]]--[[//
]]--[[// Si l'une des unité ouvre le feu, alors, le dispositif passe entièrement en
]]--[[// tir libre
]]--[[//
]]--[[// Pas de coordination dans les ravitaillerments
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_DonnerCoupArret"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "ACT_ROE_Automate_DonnerOrdreTirLibre", {} },
        { "ACT_Ordre_Automate_Continue", {} },
        { "ACT_ROE_Automate_DonnerOrdreTirRestreint", {} },
        { "BEH_Mission_Automate_AssignerFaireMouvementA", {} },
        { "ACT_Ordre_Automate_Pause", {} },
        { "BEH_Automate_ALAT_CoordonnerFeux", {} },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", {} },
        { "BEH_ROE_Automate_TirRestreint", {} },
        { "BEH_Mission_Automate_AssignerStationnerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eDetruire
        self.CoupArretDebute = self.CoupArretDebute or false
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeDetruire = self.listeDetruire or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// ---------------------------------------------------------------------
]]--[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// ---------------------------------------------------------------------
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// liste des pions qui Detruisent
]]DIA_Clear( self.listeDetruire )
        self.listeDetruire = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_DetruireNeutraliserDansZone" )
        --[[// liste des pions HM Log
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, GeneralPurposeHelicopterPatrol )
        for _,x in pairs( --[[//Gestion du debut du coup d'arret
]]self.listeDetruire ) do
        local _continue = true
do
                local pionDEC = x
                if( not self.CoupArretDebute and ( F_Pion_GeteEtatFeu( pionDEC ) == eEtatFeu_Executer ) ) then
                    self.CoupArretDebute = true
                end

            end

        end

        DIA_Clear( self.listePionsAAppuyerIMEX )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
        switch_1 = self.ePhase
            if switch_1 == eDetruire then
                --[[//condition d'arret
]]if( DIA_IsListEmpty( self.listeDetruire ) ) then
                    do
                        self.ePhase = eSExfiltrer
                                                return

                    end
                else
do
                        --[[//ROE pour le pion le plus en arrière
]]local pionArriere = DEC_Geometrie_PionDerriere( self.listeDetruire, DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                        Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirLibre, 1, { pionArriere, } )
                        for _,x in pairs( self.listeDetruire ) do
                        local _continue = true
do
                                local pionDEC = x
                                if( self.CoupArretDebute ) then
                                    do
                                        --[[//les unites passent toutes en tir libre
]]Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirLibre, 1, { x, } )
                                        Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x, } )
                                        --[[//les unites font mouvement vers le point de regrouppement si
]]--[[//elles ont fait feu                            
]]if( F_Pion_GeteEtatFeu( pionDEC ) == eEtatFeu_Executer ) then
                                            do
                                                --[[//passer en tir restreint
]]Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirRestreint, 1, { x, } )
                                                Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, x, self._namedParams.mission.pointRegroupement_, eEtatEchelon_Premier, } )
                                            end
                                        end

                                    end
                                else
do
                                        --[[//pas de traitement des ROE de l'unité la plus en arrière
]]if( x == pionArriere ) then
                                            _continue = false
                                        end

                                            if _continue then
                                            --[[//les autres unités sont postées et en tir restreint
]]if( F_Pion_GeteEtatPhaseMission( pionDEC ) == eEtatPhaseMission_EnPosition ) then
                                                Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { x, } )
                                            end

                                            Activate( self.activations.ACT_ROE_Automate_DonnerOrdreTirRestreint, 1, { x, } )
                                        end
                                    end
                                end

                            end

                        end

                    end
--[[//pas de coordination nécessaire dans cette mission
]]                end

                Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeDetruire, 0, } )
                --[[// ravitaillements et IMEX
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                
            elseif switch_1 == eSExfiltrer then
                Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                
                        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_DonnerCoupArret = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "ACT_ROE_Automate_DonnerOrdreTirLibre", nodes.ACT_ROE_Automate_DonnerOrdreTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "ACT_ROE_Automate_DonnerOrdreTirRestreint", nodes.ACT_ROE_Automate_DonnerOrdreTirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DonnerCoupArret, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

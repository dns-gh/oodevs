includedFiles = includedFiles or {}
includedFiles["sources/appui/artfdp/pions/common/Behaviors.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Pions/Common/Behaviors.hal $
]]--[[// $Author: Mia $
]]--[[// $Modtime: 23/09/05 18:47 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Behaviors.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
include "Common/Pions/Behaviors.bms"


--[[// Embarquement (apres heliportage)
]]include "Common/Pions/Behaviors/Behaviors - Embarquement.bms"


--[[//missions génériques
]]include "Common/Pions/MissionsGeneriques.bms"


include "Appui/ArtFdp/Pions/Common/Actions.bms"



node "BEH_Defaut"
{
    activations =
    {
        { "BEH_MAJ_EtatDefaut", {} },
        { "BEH_MAJ_Pion_ASS_TirDefaut", {} },
        { "BEH_Mot_AffecterVariablesDEtat", {} },
        { "BEH_Mot_Pion_Embarquer", {} },
        { "BEH_Ambiance", {} },
        { "BEH_ROE", {} },
        { "BEH_Nbc", {} },
        { "BEH_Rens", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.nBlurp = self.params[1]
    end,

    activate = function( self )
        Activate( self.activations.BEH_MAJ_EtatDefaut, 1, {} )--[[// MAJ de l'état DEC par défaut 
]]--[[//-------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_MAJ_Pion_ASS_TirDefaut, 1, {} )
        Activate( self.activations.BEH_Mot_AffecterVariablesDEtat, 1, {} )--[[// MAJ de l'etat du pion en fonction de son agressivite
]]--[[// ------------------------------------------------------------------------	
]]
        --[[// Si totalement detruit...
]]if( S_Misc_EstDetruitPhysique() ) then
            do return end
        end

        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )--[[// Destruction
]]--[[// ------------------------------------------------------------------------
]]--[[// behavior BEH_Misc_Pion_ASS_GererSaDestruction();
]]--[[// behavior BEH_Info_RenseignerSurRapFor();
]]--[[// Embarquement apres Heliportage
]]--[[// ------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Ambiance, 1, {} )--[[// Ambiance
]]--[[// ------------------------------------------------------------------------
]]--[[// Gestion de l'ambiance en fonction des ennemis
]]--[[// Module la vitesse en fonction de l'ambiance
]]
        Activate( self.activations.BEH_ROE, 1, {} )--[[// Comportements Generiques
]]
        Activate( self.activations.BEH_Nbc, 1, {} )
        Activate( self.activations.BEH_Rens, 1, {} )--[[// Gestion de la guerre elec : Passer en silence radio
]]
        if( DEC_GetMission( myself ) == nil ) then
            do
                --[[// action ACT_Mot_Pion_INF_InitialisePoste();
]]--[[// Init variables
]]F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Second )
                F_Pion_SeteTypeContact( myself, eTypeContact_Defaut )
                F_Pion_SetbDefenseStatique_Mobile( myself, false )
            end
        else
do
            end
        end

    end,

}

node "BEH_Mot_AffecterVariablesDEtat"
{
    create = function( self )
    end,

    activate = function( self )
        --[[//////////////// BMS OPTIM  ///////////////////
]]        if( F_Pion_GeteEtatDec( myself ) == eEtatDec_Sauvegarde ) then
            do return end
        end

         do
            local _continue = true
            local switch_1 = --[[////////////// FIN OPTIM  /////////////////////
]]--[[//-----------------------------------------------------------------------------
]]--[[// En fonction du moral...
]]--[[//-----------------------------------------------------------------------------
]]DEC_FacteurHumain_Moral()
            local cases_switch_1 = {}
                if switch_1 == eMoral_Fanatique then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Fanatique --> esquive sur PAP, pas de ralentissement
]]--[[//-----------------------------------------------------------------------------
]]SetStateVariable( "VE_RapFor", 0 )
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Moral bon --> esquive sur PAP et effet rapFor défavorable --> ralentissement
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMoral_Moyen
                or switch_1 == eMoral_Bon then
                    --[[//-----------------------------------------------------------------------------
]]--[[// En fonction de la mission...  --> idem moral mauvais
]]--[[//-----------------------------------------------------------------------------
]]if( DEC_GetMission( myself ) == nil ) then
                        do
                            SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                            _continue = false
                        end
--[[// Par défaut ...
]]                    end

                        if _continue then
                        SetStateVariable( "VE_RapFor", 0 )
                        _continue = false
                    end
                --[[//-----------------------------------------------------------------------------
]]--[[// Moral mauvais: --> esquive sur PAP et sur rapFor défavorable
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eMoral_Mauvais then
                    SetStateVariable( "VE_RapFor", ( 5 - DEC_RapportDeForceLocal() ) )
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

    destroy = function( self )
                SetStateVariable( "VE_RapFor", 0 )
    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 23/03/2005 16:03
]]--[[// Rejoins une position de sauvegarde toutes les heures ..
]]--[[// ============================================================================
]]}

node "BEH_Dep_Pion_ASS_ChangerDePosition_Sauvegarde"
{
    activations =
    {
        { "ACT_Misc_Delai", {} },
        { "ACT_RC", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCentre = self.params[1]
    end,

    activate = function( self )
        self.ptTir = self.ptTir or nil
        self.eAction = self.eAction or eActionEnCours
        if( self.eAction == eActionEnCours ) then
            do
                Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, M_DELAI_SAUVEGARDE(), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
            end
--[[// Pas de tir en cours
]]        end

        if( myself.eEtatTir_Indirect_ == eActionTirIndirect_None and self.eAction == eActionEffectuee ) then
            do
                self.ptTir = DEC_Geometrie_PositionAleatoireSurCercle( self._namedParams.ptCentre, 500 )
                Activate( self.activations.ACT_RC, 1, { eRC_ChangementDePosition, } )
                Activate( self.activations.ACT_Info_Trace, 1, { "Changement position : horaire", } )
                StartActivateOverride( self, self.activations.BEH_Dep_ProgressionVers, 1, { self.ptTir, eProgressionDirect, eTypeItiMouvement, } )
                self.eAction = eActionEnCours
            end
        end

    end,

}

node "BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement"
{
    activations =
    {
        { "ACT_RC", {} },
        { "ACT_Misc_Delai", {} },
        { "ACT_Dep_SePoster", {} },
        { "ACT_Obs_ReconnaitrePoint", {} },
        { "ACT_Obs_EtablirVisionVersPt", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptDeploiement = self.params[1]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        if( self.eAction == eActionEffectuee ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        Activate( self.activations.ACT_RC, 1, { eRC_ReconnaissancePoint, } )
        Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, 5, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.ACT_Dep_SePoster, 1, {} )
        Activate( self.activations.ACT_Obs_ReconnaitrePoint, 1, { self._namedParams.ptDeploiement, } )
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { self._namedParams.ptDeploiement, } )
    end,

}

node "BEH_MAJ_Pion_ASS_TirDefaut"
{
    activations =
    {
        { "ACT_Info_Pion_ASS_DisponibiliteAuTir", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        if( ModuleBegins() ) then
            do
                --[[/*
		myself.rPortee_Explosif_	= M_DISTANCE_PorteeMaxObusExplosif();
		myself.rPortee_Grenade_		= M_DISTANCE_PorteeMaxObusGrenade();		
		myself.rPortee_Mine_ 		= M_DISTANCE_PorteeMaxObusMine();
		myself.rPortee_ACED_ 		= M_DISTANCE_PorteeMaxObusACED();
		myself.rPortee_Fumigene_ 	= M_DISTANCE_PorteeMaxObusFumigene();
		myself.rPortee_Eclairant_ 	= M_DISTANCE_PorteeMaxObusEclairant();
		
		myself.rPortee_Min_ 		= M_DISTANCE_PorteeMin();
		*/]]--[[// action ACT_MAJ_Pion_ASS_EtatTirIndirect( eActionTirIndirect_None ) : strength = 0.5;
]]--[[// action ACT_MAJ_Pion_ASS_EtatTir( eActionTir_None );	
]]--[[////////////////////////////// PARTIE COMPORTEMENTS VIRTUELS /////////////////////////////////////////////////////
]]myself.eEtatTir_Indirect_ = eActionTirIndirect_None
            end
--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_ProgressionVers
]]--[[//
]]        end

        Activate( self.activations.ACT_Info_Pion_ASS_DisponibiliteAuTir, 0.5, { eDisponibiliteAuTir_Indisponible, } )
    end,

--[[// *****************************************************************************
]]--[[// *****************************************************************************
]]--[[// BEH_Dep_Virtuel_PreparationAction
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Virtuel_ProgressionVers"
{
    activations =
    {
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.point = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.point, self._namedParams.eTypeProgression, self._namedParams.eTypeIti, } )
    end,

}

node "BEH_Dep_Virtuel_PreparationAction"
{
    create = function( self )
    end,

    activate = function( self )
                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_MAJ_EtatDefaut", nodes.BEH_MAJ_EtatDefaut }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_MAJ_Pion_ASS_TirDefaut", nodes.BEH_MAJ_Pion_ASS_TirDefaut }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_AffecterVariablesDEtat", nodes.BEH_Mot_AffecterVariablesDEtat }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ambiance", nodes.BEH_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_ROE", nodes.BEH_ROE }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Nbc", nodes.BEH_Nbc }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Rens", nodes.BEH_Rens }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ASS_ChangerDePosition_Sauvegarde, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ASS_ChangerDePosition_Sauvegarde, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ASS_ChangerDePosition_Sauvegarde, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ASS_ChangerDePosition_Sauvegarde, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Virtuel_ProgressionVers, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_MAJ_Pion_ASS_TirDefaut, "ACT_Info_Pion_ASS_DisponibiliteAuTir", nodes.ACT_Info_Pion_ASS_DisponibiliteAuTir }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, "ACT_Obs_ReconnaitrePoint", nodes.ACT_Obs_ReconnaitrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }

includedFiles = includedFiles or {}
includedFiles["sources/appui/circulation/automates/missions/mettreenoeuvrezonestationnement/MettreEnOeuvreZoneStationnement - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement"
{
    feedbacks = { { { "done_MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement" }, "MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe", { "done_BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        local selPions = S_Cherche_Automate_Filtre_TypePionOperationnels( DEC_Automate_PionsAvecPC(), "PatrouilleCirculation" )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionAppuyer = self.eEtatMissionAppuyer or eActionEnCours
        self.rIterateurSecteur = self.rIterateurSecteur or 0
        self.listeSousSecteurs = self.listeSousSecteurs or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                local nErrorCode = nil
                self.listeSousSecteurs = DEC_Geometrie_DecoupeLocalisation( self._namedParams.mission.zone_, #( selPions ), nErrorCode )
                nErrorCode = self.listeSousSecteurs.second
                self.listeSousSecteurs = self.listeSousSecteurs.first
                if( nErrorCode ~= eNoError ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

            end
--[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[//
]]--[[// =============================================================================
]]        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eEtatMissionAppuyer == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionAppuyer == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[// controle de creation mission
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( selPions ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionAppuyer = v[1] end
                    --[[// ordre de creation des missions
]]if( #( selPions ) ~= 0 ) then
                        Activate( self.activations.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe, 1, { ePhase_MRT, selPions, self.listeSousSecteurs, } )
                    end

                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_LOG_MettreEnOeuvreZoneStationnement, "BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe", nodes.BEH_Mission_Automate_CIRCU_AssignerMettreEnOeuvreStationnementAListe }

includedFiles = includedFiles or {}
includedFiles["sources/appui/artdsa/automates/sgpt samp hawk/fonctions/Fonctions - Listes.bms"] = true

include "Common/Fonctions - Telepathy.bms"

--[[// -------------------------------------------------------------------------
]]--[[// renvoie la connaissance la plus dangereuse pour les connaissances de la 
]]--[[// zone considérée
]]--[[// -------------------------------------------------------------------------
]]--[[// variables locales
]]--[[//dangerosité sur les connaissances dans la zone
]]--[[// calcul de la dangerosite moyenne de la connaissance ennemie sur
]]--[[// les connaissances amies dans la zone
]]--[[//dangerosite sur les sections du ssgpt
]]--[[// -------------------------------------------------------------------------
]]--[[// renvoie la connaissance la plus dangereuse pour le site => les plus proche
]]--[[// du barycentre.
]]--[[// -------------------------------------------------------------------------
]]--[[// variables locales
]]--[[//dangerosite sur les sections du ssgpt
]]--[[// -------------------------------------------------------------------------
]]--[[// liste triée des connaissances ennemies en fonction de leurs dangerosités
]]--[[// sur les connaissances amies situées dans la zone
]]--[[// -------------------------------------------------------------------------
]]--[[// variables locales
]]--[[//la meilleur dangerosite dans listeCopie
]]--[[// -------------------------------------------------------------------------
]]--[[// liste triée des connaissances ennemies en fonction de leurs postions par
]]--[[// raport au barycentre de la zone   
]]--[[// -------------------------------------------------------------------------
]]--[[// variables locales
]]--[[//la meilleur dangerosite dans listeCopie
]]--[[// -------------------------------------------------------------------------
]]--[[// Cette fonction permet de supprimer les plus mauvaises attributions.
]]--[[// on regarde pour chaque piste de chaque section si il n'y a pas un traitement
]]--[[// meilleur. Si oui, on la supprime
]]--[[// -------------------------------------------------------------------------
]]--[[// variables locales
]]--[[// on regarde si une autre section de tir n'est pas mieux placée pour
]]--[[// faire feu
]]--[[// -------------------------------------------------------------------------
]]--[[// Affecte autant de pistes qu'il y a de 
]]--[[// M_POLY_DOCTRINE_NB_PISTE_TIR_PAR_SECTION
]]--[[// -------------------------------------------------------------------------
]]--[[// dans l'affectation des piste, peu importe l'ordonnancement, car 
]]--[[// c'est la section de tir qui va alors calculer sa volonté de faire
]]--[[// feu sur les pistes considérées
]]function S_Eni_Automate_ASA_HAWK_LePlusDangereuxPourZone( listeEnis, zone )
    local _returnValue = nil
    local listeAmisDansZone = DEC_Connaissances_UnitesAmiesDansZone( zone )
    local listePionsSsgpt = DEC_Automate_PionsAvecPC()
    local meilleureDangerosite = 0
    local eniLePlusDangereux = nil
    for _,x in pairs( listeEnis or {} ) do
    local _continue = true
do
            local dangerositeSurAmis = 0
            local dangerositeSurSsgpt = 0
            for _,y in pairs( listeAmisDansZone or {} ) do
            local _continue = true
                dangerositeSurAmis = dangerositeSurAmis + S_Connaissance_ForceDistance( y, x )

            end

            if( not DIA_IsListEmpty( listeAmisDansZone ) ) then
                dangerositeSurAmis = dangerositeSurAmis / #( listeAmisDansZone )
            end

            for _,y in pairs( listePionsSsgpt or {} ) do
            local _continue = true
                dangerositeSurSsgpt = dangerositeSurSsgpt + S_Pion_ForceDistance( y, x )

            end

            if( not DIA_IsListEmpty( listePionsSsgpt ) ) then
                dangerositeSurSsgpt = dangerositeSurSsgpt / #( listePionsSsgpt )
            end

            if( dangerositeSurSsgpt + dangerositeSurAmis > meilleureDangerosite ) then
                do
                    meilleureDangerosite = dangerositeSurSsgpt + dangerositeSurAmis
                    eniLePlusDangereux = x
                end
            end

        end

    end

    _returnValue = eniLePlusDangereux
    do return _returnValue end
end

function S_Eni_Automate_ASA_HAWK_LePlusDangereuxSurSite( listeEnis, zone )
    local _returnValue = nil
    local listePionsSsgpt = DEC_Automate_PionsAvecPC()
    local meilleureDangerosite = 0
    local eniLePlusDangereux = nil
    local barycentreSite = S_Geometrie_BarycentreZone( zone )
    for _,x in pairs( listeEnis or {} ) do
    local _continue = true
do
            local dangerositeSurSsgpt = 0
            local dangerSurSite = 0
            dangerSurSite = 2 - S_ForceDistance( DEC_Geometrie_Distance( barycentreSite, DEC_ConnaissanceAgent_Position( x ) ) )
            for _,y in pairs( listePionsSsgpt or {} ) do
            local _continue = true
                dangerositeSurSsgpt = dangerositeSurSsgpt + S_Pion_ForceDistance( y, x )

            end

            if( not DIA_IsListEmpty( listePionsSsgpt ) ) then
                dangerositeSurSsgpt = dangerositeSurSsgpt / #( listePionsSsgpt )
            end

            if( dangerositeSurSsgpt + dangerSurSite > meilleureDangerosite ) then
                do
                    meilleureDangerosite = dangerositeSurSsgpt + dangerSurSite
                    eniLePlusDangereux = x
                end
            end

        end

    end

    _returnValue = eniLePlusDangereux
    do return _returnValue end
end

function S_Eni_Automate_ASA_HAWK_TrieParDangerositeSurAmisDansZone( sListeEnis, zone )
    local _returnValue = {}
    local listeCopie = sListeEnis
    local connaissanceAgentBuffer = nil
    _returnValue = {}
    for _,x in pairs( sListeEnis or {} ) do
    local _continue = true
do
            if( not S_ConnaissanceAgent_EstEnVol( x ) ) then
                _continue = false
            end

                if _continue then
                connaissanceAgentBuffer = S_Eni_Automate_ASA_HAWK_LePlusDangereuxPourZone( listeCopie, zone )
                DEC_UserTypeList_Remove( listeCopie, connaissanceAgentBuffer )
                DEC_UserTypeList_PushBack( _returnValue, connaissanceAgentBuffer )
            end
        end

    end

    do return _returnValue end
end

function S_Eni_Automate_ASA_HAWK_TrieParDangerositeSurSite( sListeEnis, zone )
    local _returnValue = {}
    local listeCopie = sListeEnis
    local connaissanceAgentBuffer = nil
    _returnValue = {}
    for _,x in pairs( sListeEnis or {} ) do
    local _continue = true
do
            if( not S_ConnaissanceAgent_EstEnVol( x ) ) then
                _continue = false
            end

                if _continue then
                connaissanceAgentBuffer = S_Eni_Automate_ASA_HAWK_LePlusDangereuxSurSite( listeCopie, zone )
                DEC_UserTypeList_Remove( listeCopie, connaissanceAgentBuffer )
                DEC_UserTypeList_PushBack( _returnValue, connaissanceAgentBuffer )
            end
        end

    end

    do return _returnValue end
end

function S_Liste_GererOverKill( pion, listeSectionsTir )
    local listeCopie = listeSectionsTir
    DIA_Remove( listeCopie, pion )
    local listeConnaissancesBuffer = {}
    local listeConnaissancesEnisCopie = {}
    if( pion:GetType() ~= "TheaterHighAltitudeDefenseTroop" ) then
        do return end
    end

    local sectionHawk = pion
    listeConnaissancesEnisCopie = F_GetListeEnisTirAutorise( sectionHawk )
    for _,x in pairs( listeConnaissancesEnisCopie or {} ) do
    local _continue = true
do
            if( not S_ConnaissanceAgent_EstEnVol( x ) ) then
                _continue = false
            end

                if _continue then
                local distanceASectionHAWK = DEC_Geometrie_Distance( DEC_Automate_PionPosition( pion ), DEC_ConnaissanceAgent_Position( x ) )
                for _,y in pairs( listeCopie or {} ) do
                local _continue = true
do
                        if( y:GetType() ~= "TheaterHighAltitudeDefenseTroop" ) then
                            _continue = false
                        end

                            if _continue then
                            local sectionHAWKAComparer = y
                            if( not DEC_UserTypeList_Contient( sectionHAWKAComparer:GetlisteEnisTirAutorise_(), x ) ) then
                                _continue = false
                            end

                                if _continue then
                                local distanceASectionHAWKAComparer = DEC_Geometrie_Distance( DEC_Automate_PionPosition( y ), DEC_ConnaissanceAgent_Position( x ) )
                                if( distanceASectionHAWKAComparer < distanceASectionHAWK ) then
                                    F_RemoveAgentFromListeEnisTirAutorise( sectionHawk, x )
                                end

                            end
                        end
                    end

                end

            end
        end

    end

end

function S_Eni_Automate_ASA_HAWK_AffecterPistes( listePions )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            if( x:GetType() ~= "TheaterHighAltitudeDefenseTroop" ) then
                _continue = false
            end

                if _continue then
                local sectionTirHAWK = x
                local listeConnaissancesBuffer = {}
                local iterateur = 0
                for _,y in pairs( sectionTirHAWK:GetlisteEnisTirAutorise_() or {} ) do
                local _continue = true
do
                        if( iterateur >= M_POLY_DOCTRINE_NB_PISTE_TIR_PAR_SECTION() ) then
                            _continue = false
                        end

                            if _continue then
                            DEC_UserTypeList_PushBack( listeConnaissancesBuffer, y )
                                                        iterateur = iterateur + 1
                        end
                    end

                end

                sectionTirHAWK:SetlisteEnisTirAutorise_( listeConnaissancesBuffer )
            end
        end

    end

end


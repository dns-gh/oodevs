includedFiles = includedFiles or {}
includedFiles["sources/marine/pions/common/behaviors/Behaviors - Mot.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// BEH_MOT_Pion_MARINE_GarderSesDistances
]]--[[//
]]--[[// Commentaires: Il est nécessaire que la force S_Force_DangerSur soit comprise
]]--[[// dans [1,2]
]]--[[// -----------------------------------------------------------------------------
]]node "BEH_MOT_Pion_MARINE_GarderSesDistances"
{
    activations =
    {
        { "ACT_MAJ_EtatDec", { "onHalt" } },
        { "BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_MOT_Pion_MARINE_GarderSesDistances" } },

    create = function( self )
    end,

    activate = function( self )
        --[[// Garder ses distances sur enis dangereux
]]local listeUnitesEnnemiesDangereuses = DEC_Connaissances_UnitesEnnemiesDangereuses()
        for _,repEni in pairs( listeUnitesEnnemiesDangereuses ) do
        local _continue = true
do
                --[[// Maj etat dec
]]Activate( self.activations.ACT_MAJ_EtatDec, 1, { eEtatDec_Sauvegarde, } )
                Activate( self.activations.BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA, S_Force_DangerSur( repEni ), { repEni, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA
]]--[[//
]]--[[// Commentaires: Ce comportement utilise les priorites pour implémenté un
]]--[[// systeme de rail. On calcule au debut de l'esquive un itineraire sur lequel
]]--[[// on va se deplacer. Si on n'a plus besoin de se deplacer, on lance un
]]--[[// comportement SePoster avec la meme force mais une priorité supérieure
]]--[[// => on ne propage ainsi pas une force suplémentaire pour se poster, et on
]]--[[// ne recalcule pas systématiquement une nouvelle esquive
]]--[[//
]]--[[/// On a tj:
]]--[[//  rDistanceSauvegarde < rDistanceEsquive		
]]--[[//
]]--[[// Remarque : on a un probleme de precision dans les calculs des distances max
]]--[[// => on prefere ajouter 1 m a la distance rDistanceSurete afin d'avoir un 
]]--[[// rapport de force qui peut diminuer quand on est a cette distance.
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA"
{
    instances =
    {
        boost = 1.01,
        max = 1,
    },

    activations =
    {
        { "BEH_SePosterFaceAEni", { "onHalt" } },
        { "BEH_Eni_Pion_MARINE_DecrocherFaceA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    activate = function( self )
        --[[// Pour certaines missions
]]if( g_bDesactiveSauvegarde ) then
            return
        end

        --[[// variables persistantes	
]]self.rDistanceEfficace = self.rDistanceEfficace or S_Tir_PorteeMaxPourEtreTireParAgent( self._namedParams.repEni, M_POLY_PH_TIR_ENI_EFFICACE() )
        --[[//Cf. erreur de precision
]]self.rDistanceSurete = self.rDistanceSurete or S_Tir_PorteeMaxPourEtreTireParAgent( self._namedParams.repEni, 0 ) + 10
        self.rDeltaDistance = self.rDeltaDistance or self.rDistanceSurete - self.rDistanceEfficace
        local rCoefEsquive = 0--[[// variables locales
]]
        if( ( ( GetStateVariable( "VE_TirRestreint" ) == 0 or GetStateVariable( "VE_TirRestreint" ) == nil ) ) or ( ( GetStateVariable( "VE_TirInterdit" ) == 0 or GetStateVariable( "VE_TirInterdit" ) == nil ) ) ) then
            rCoefEsquive = 1
        else
            --[[//si tir libre
]]rCoefEsquive = ( GetStateVariable( "VE_RapFor" ) - 2.6 ) / 2.6
        end

        local rDistanceEsquive = self.rDistanceEfficace + ( self.rDeltaDistance * rCoefEsquive )
        --[[//il faut toujours etre superieure a DecrocherFaceA => 1.02							   
]]if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), DEC_ConnaissanceAgent_Position( self._namedParams.repEni ) ) > ( rDistanceEsquive + M_POLY_DISTANCE_SECURITE_ESQUIVE() ) ) then
            Activate( self.activations.BEH_SePosterFaceAEni, 1.02, { self._namedParams.repEni, } )
        end

        Activate( self.activations.BEH_Eni_Pion_MARINE_DecrocherFaceA, 1, { self._namedParams.repEni, self.rDistanceSurete, M_POLY_DISTANCE_SECURITE_ESQUIVE(), } )
    end,

--[[// -----------------------------------------------------------------------------
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Mot_Pion_MARINE_AffecterVariablesDEtat"
{
    feedbacks = { { { "onHalt" }, "BEH_Mot_Pion_MARINE_AffecterVariablesDEtat" } },

    create = function( self )
    end,

    activate = function( self )
        --[[//affecter agressivité
]]if( ( DEC_GetMission( myself ) == 0 or DEC_GetMission( myself ) == nil ) ) then
            SetStateVariable( "VE_Agressivite_Tir", 0 )
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_MARINE_GarderSesDistances, "ACT_MAJ_EtatDec", nodes.ACT_MAJ_EtatDec }
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_MARINE_GarderSesDistances, "BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA", nodes.BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA }
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA, "BEH_SePosterFaceAEni", nodes.BEH_SePosterFaceAEni }
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_MARINE_GarderSesDistancesFaceA, "BEH_Eni_Pion_MARINE_DecrocherFaceA", nodes.BEH_Eni_Pion_MARINE_DecrocherFaceA }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/abc/automates/common/Gestion deuxieme echelon.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 04-02-24 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Gestion deuxieme echelon.hal $
]]--[[// $Author: Nld $
]]--[[// $Modtime: 26/09/05 0:22 $
]]--[[// $Revision: 32 $
]]--[[// $Workfile: Gestion deuxieme echelon.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[////////////////////////////////
]]--[[//////////////////////// **     GESTION APPUIS        **/////////////////////////
]]--[[////////////////////////////////
]]
--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLesAppuis_
]]--[[//
]]--[[// Commentaires: tool
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Dispositif_Automate_ABC_GererLesAppuis_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLesAppuis_" }, "BEH_Dispositif_Automate_ABC_GererLesAppuis_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLesAppuis_, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE", { "done_BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE" } },
        { "BEH_Dispositif_Automate_ABC_GererMortier", { "done_BEH_Dispositif_Automate_ABC_GererMortier" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// Gestion des pions en RAS --> enlever un éventuel soutien
]]--[[//-----------------------------------------------------------------------------
]]--[[// behavior BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE();
]]
        Activate( self.activations.BEH_Dispositif_Automate_ABC_GererMortier, 1, emptyTable )--[[// Ajout ADA gestion mortier
]]
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererMortier
]]--[[// 
]]--[[// Commentaires: // Ajout ADA gestion mortier
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererMortier"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererMortier" }, "BEH_Dispositif_Automate_ABC_GererMortier" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererMortier, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local listePionsMortier = S_Cherche_Automate_Filtre_TypePion( DEC_Automate_PionsAvecPC(), "GroupeInfanterie_Mortier" )
        for _,pion in pairs( listePionsMortier or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_CDT, pion, DEC_Automate_PionPC(), eEtatEchelon_Second, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE" }, "BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_AssignerSoutien", { "done_BEH_Dispositif_Automate_ABC_AssignerSoutien" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local listePionEnDifficulte = S_Dispositif_Automate_ABC_ObtenirPionsPE_EnDifficultes()
        local listePionsDeSoutien = S_Dispositif_Automate_ABC_ObtenirPionsSoutien()
        for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assigner soutien aux pions en difficultés
]]--[[//-----------------------------------------------------------------------------
]]listePionEnDifficulte or emptyTable ) do
        local _continue = true
do
                local pionEnDifficulte = x
                for _,y in pairs( --[[// Choisir un pion de soutien et donner mission soutenir à un pion en difficulte
]]listePionsDeSoutien or emptyTable ) do
                local _continue = true
do
                        local pionEnSoutien = y
                        if( F_Pion_GeteEtatSoutien( pionEnDifficulte ) == eEtatSoutien_aucun ) then
                            Activate( self.activations.BEH_Dispositif_Automate_ABC_AssignerSoutien, S_ForceSoutien( pionEnSoutien, pionEnDifficulte ), { pionEnSoutien, pionEnDifficulte, } )
                        end

                    end

                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_AssignerSoutien
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_AssignerSoutien"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_AssignerSoutien" }, "BEH_Dispositif_Automate_ABC_AssignerSoutien" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_AssignerSoutien, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionEnSoutien = self.params[1]
        self._namedParams.pionEnDifficulte = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-----------------------------------------------------------------------------
]]--[[// Soutenir l'unite si elle ne l'est pas
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_CDT, self._namedParams.pionEnSoutien, self._namedParams.pionEnDifficulte, eEtatEchelon_Second, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE" }, "BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// liste des pions en premier echelon si RAS
]]local listePionRAS = S_Dispositif_Automate_ABC_ObtenirPionsPE_EnRAS()
        for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Pions en RAS --> Pas d'ennemi en vue 
]]--[[// --> si un pion en mode "RAS" est soutenu on remet l'unité de soutien à
]]--[[// disposition de l'automate pour un autre soutien eventuel.
]]--[[//-----------------------------------------------------------------------------
]]listePionRAS or emptyTable ) do
        local _continue = true
do
                local pionEnRAS = x
                --[[// Renvoie pion nul si pas de soutien
]]local pionEnSoutien = S_Dispositif_Automate_ABC_ObtenirPionEnSoutienDe( pionEnRAS )
                if( pionEnSoutien ~= nil ) then
                    do
                        F_Pion_SeteEtatSoutien( pionEnRAS, eEtatSoutien_aucun )
                        Activate( self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, pionEnSoutien, pionEnRAS, } )
                    end
                end

            end

        end

    end,

--[[////////////////////////////////
]]--[[////////////////////////      **FIN GESTION APPUIS     **/////////////////////////
]]--[[////////////////////////////////
]]--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeDispositif_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeDispositif_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeDispositif_" }, "BEH_Dispositif_Automate_ABC_GererLeDispositif_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeDispositif_, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", { "done_BEH_Dispositif_Automate_ABC_GererPionsDetruits_" } },
        { "BEH_Dispositif_Automate_ABC_GererLeSE_", { "done_BEH_Dispositif_Automate_ABC_GererLeSE_" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.bAvecReleve = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eGererSecondEchelon
         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// Si un pion detruit de PE alors relever le pion si possible
]]--[[// Puis réévaluation du SE --> donc un pion détruit = réorganisation = delai
]]--[[//-----------------------------------------------------------------------------
]]--[[// 1 iteration ou l'on redonne les missions
]]--[[//-----------------------------------------------------------------------------
]]--[[// Organisation du SE
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eGererPionDetruit then
                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererPionsDetruits_, 1, { self._namedParams.bAvecReleve, } )
                    self.ePhase = eGererSecondEchelon
                    _continue = false
                elseif switch_1 == eGererSecondEchelon then
                    if( S_Dispositif_Automate_ABC_EvtPionDetruit() ) then
                        do
                            DEC_Trace( "------- Evt Attrition ------" )
                            self.ePhase = eGererPionDetruit
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererLeSE_, 1, emptyTable )
                    _continue = false
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeSE_
]]--[[//
]]--[[// Commentaires: assignation des missions pour le second echelon 
]]--[[// --> suivre "en mesure de"
]]--[[// 
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeSE_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeSE_" }, "BEH_Dispositif_Automate_ABC_GererLeSE_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeSE_, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerMissionsSE", { "done_BEH_Mission_Automate_AssignerMissionsSE" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local rIterateurPionASuivre = 0
        --[[// Ces listes peuvent évoluer...en fonction des destructions
]]local selABC_PE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        local selABC_SE = S_ObtenirTousPionsDe( eEtatEchelon_Second )
        --[[// Cas des PEI Eclairer
]]if( DIA_IsListEmpty( selABC_PE ) ) then
            selABC_PE = S_ObtenirPionsDe( eEtatEchelon_Eclairage, eEtatDestruction_None )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//-----------------------------------------------------------------------------
]]if( DIA_IsListEmpty( selABC_SE ) or DIA_IsListEmpty( selABC_PE ) ) then
            do return end
        end

        for _,x in pairs( selABC_SE or emptyTable ) do
        local _continue = true
do
                local pion = x
                local pionPE = DIA_GetAt( selABC_PE, rIterateurPionASuivre )
                Activate( self.activations.BEH_Mission_Automate_AssignerMissionsSE, 1, { pion, pionPE, } )
                                rIterateurPionASuivre = rIterateurPionASuivre + 1
                if( rIterateurPionASuivre >= #( selABC_PE ) ) then
                    --[[// revenir au premier élément de la liste de PE
]]rIterateurPionASuivre = 0
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_AssignerMissionsSE
]]--[[//
]]--[[// Commentaires: assignation des missions au deuxieme echelon
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_AssignerMissionsSE"
{
    feedbacks = { { { "done_BEH_Mission_Automate_AssignerMissionsSE" }, "BEH_Mission_Automate_AssignerMissionsSE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_AssignerMissionsSE, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.pionPE = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// On donne suivre mais pour certain type d'unité on pourrait donner une autre mission
]]--[[// CF. adapation...
]]--[[//-----------------------------------------------------------------------------
]]--[[// Init 
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                Activate( self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, self._namedParams.pion, self._namedParams.pionPE, } )
                                do return end

            end
--[[// Sécurité --> si composantes reviennent sur dans le pion et téléportation vers PC
]]        end

        if( DEC_GetMission( self._namedParams.pion ) == nil and F_Pion_GeteEtatDestruction( self._namedParams.pion ) ~= eEtatDestruction_Total ) then
            Halt( self )
            do return end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_" }, "BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerDecrocherA", { "done_BEH_Mission_Automate_AssignerDecrocherA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.positionArrivee = self.positionArrivee or DEC_Geometrie_CalculerPointArrivee()
        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Mission aux pions sans missions --> Faire mouveemnt vers la fin du fuseau 
]]--[[//-----------------------------------------------------------------------------
]]S_Dispositif_Automate_ABC_PionsSansMission() or emptyTable ) do
        local _continue = true
do
                local pionDEC = pion
                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pion, self.positionArrivee, F_Pion_GeteEtatEchelon( pionDEC ), } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_" }, "BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", { "done_BEH_Dispositif_Automate_ABC_GererPionsDetruits_" } },
        { "BEH_Dispositif_Automate_ABC_GererLeSEStatique_", { "done_BEH_Dispositif_Automate_ABC_GererLeSEStatique_" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.bAvecReleve = self.params[1]
        self._namedParams.positionInstallation = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eGererSecondEchelon
         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// Si un pion detruit de PE alors relever le pion si possible
]]--[[// Puis réévaluation du SE --> donc un pion détruit = réorganisation = delai
]]--[[//-----------------------------------------------------------------------------
]]--[[// 1 iteration ou l'on redonne les missions
]]--[[//-----------------------------------------------------------------------------
]]--[[// Organisation du SE
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eGererPionDetruit then
                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererPionsDetruits_, 1, { self._namedParams.bAvecReleve, } )
                    self.ePhase = eGererSecondEchelon
                    _continue = false
                elseif switch_1 == eGererSecondEchelon then
                    if( S_Dispositif_Automate_ABC_EvtPionDetruit() ) then
                        do
                            DEC_Trace( "------- Evt Attrition ------" )
                            self.ePhase = eGererPionDetruit
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererLeSEStatique_, 1, { self._namedParams.positionInstallation, } )
                    _continue = false
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeSEStatique_
]]--[[//
]]--[[// Commentaires: TEMP ESSAI MIA
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeSEStatique_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeSEStatique_" }, "BEH_Dispositif_Automate_ABC_GererLeSEStatique_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeSEStatique_, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "done_BEH_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.positionInstallation = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.point = self.point or nil
        self.listePoints = self.listePoints or {}
        self.direction = self.direction or nil
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local mission = DEC_GetMission( myself )
                local directionEnnemi = DEC_GetDirectionEnnemi( mission )
                self.direction = DEC_Geometrie_CopieEtInverseDirection( directionEnnemi )
                local selABC_SE = S_ObtenirTousPionsDe( eEtatEchelon_Second )
                self.listePoints = DEC_Geometrie_PositionsParRapportALocalisation( selABC_SE, self._namedParams.positionInstallation, directionEnnemi, M_MODELE_AUTOMATE_ABC_DISTANCE_MAX_POSITION_SUR_LOCALISATION() )
                --[[//-----------------------------------------------------------------------------
]]--[[// Gestion erreur
]]--[[//-----------------------------------------------------------------------------
]]if( self.listePoints ~= nil ) then
                    do
                        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission une par une au pion (pas simultanément)
]]--[[//-----------------------------------------------------------------------------
]]local rIterateurPoint = 0
                        for _,pion in pairs( selABC_SE or emptyTable ) do
                        local _continue = true
                            do
                                if( rIterateurPoint == DEC_ListePoints_Size( self.listePoints ) ) then
                                    rIterateurPoint = 0
                                end

                                self.point = DEC_ListePoints_GetAt( self.listePoints, rIterateurPoint )
                                self.point = DEC_Geometrie_PositionTranslateDir( self.point, self.direction, 1500 )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, pion, self.point, eEtatEchelon_Second, } )
                                                                rIterateurPoint = rIterateurPoint + 1
                            end

                        end

                    end
                else
do
                        DEC_Trace( "Pions in same fuseau or location not in fuseau" )
                        DEC_Trace( "Can't compute position in the localisation" )
                                                do return end

                    end
                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_" }, "BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_, {value} ) end,
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", { "done_BEH_Dispositif_Automate_ABC_GererPionsDetruits_" } },
        { "BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_", { "done_BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.bAvecReleve = self.params[1]
        self._namedParams.lima = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eGererSecondEchelon
         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// Si un pion detruit de PE alors relever le pion si possible
]]--[[// Puis réévaluation du SE --> donc un pion détruit = réorganisation = delai
]]--[[//-----------------------------------------------------------------------------
]]--[[// 1 iteration ou l'on redonne les missions
]]--[[//-----------------------------------------------------------------------------
]]--[[// Organisation du SE
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eGererPionDetruit then
                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererPionsDetruits_, 1, { self._namedParams.bAvecReleve, } )
                    self.ePhase = eGererSecondEchelon
                    _continue = false
                elseif switch_1 == eGererSecondEchelon then
                    if( S_Dispositif_Automate_ABC_EvtPionDetruit() ) then
                        do
                            DEC_Trace( "------- Evt Attrition ------" )
                            self.ePhase = eGererPionDetruit
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_, 1, { self._namedParams.lima, } )
                    _continue = false
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_
]]--[[//
]]--[[// Commentaires: TEMP ESSAI MIA
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_" }, "BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "done_BEH_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lima = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.point = self.point or nil
        self.listePoints = self.listePoints or {}
        self.direction = self.direction or nil
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local mission = DEC_GetMission( myself )
                self.direction = DEC_Geometrie_CopieEtInverseDirection( DEC_GetDirectionEnnemi( mission ) )
                local selABC_SE = S_ObtenirTousPionsDe( eEtatEchelon_Second )
                self.listePoints = DEC_Geometrie_CalculerPositionsParRapportALima( self._namedParams.lima, 0, #( selABC_SE ) )
                --[[//-----------------------------------------------------------------------------
]]--[[// Gestion erreur
]]--[[//-----------------------------------------------------------------------------
]]if( self.listePoints ~= nil ) then
                    do
                        --[[//-----------------------------------------------------------------------------
]]--[[// Assignation des missions une par une au pion (pas simultanément)
]]--[[//-----------------------------------------------------------------------------
]]local rIterateurPoint = 0
                        for _,pion in pairs( selABC_SE or emptyTable ) do
                        local _continue = true
                            do
                                if( rIterateurPoint == DEC_ListePoints_Size( self.listePoints ) ) then
                                    rIterateurPoint = 0
                                end

                                self.point = DEC_ListePoints_GetAt( self.listePoints, rIterateurPoint )
                                self.point = DEC_Geometrie_PositionTranslateDir( self.point, self.direction, 1500 )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, pion, self.point, eEtatEchelon_Second, } )
                                                                rIterateurPoint = rIterateurPoint + 1
                            end

                        end

                    end
                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_AssignerSoutien, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE, "BEH_Dispositif_Automate_ABC_AssignerSoutien", nodes.BEH_Dispositif_Automate_ABC_AssignerSoutien }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifRetrograde_, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_, "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", nodes.BEH_Dispositif_Automate_ABC_GererPionsDetruits_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_, "BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_", nodes.BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_, "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", nodes.BEH_Dispositif_Automate_ABC_GererPionsDetruits_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifStatique_, "BEH_Dispositif_Automate_ABC_GererLeSEStatique_", nodes.BEH_Dispositif_Automate_ABC_GererLeSEStatique_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositif_, "BEH_Dispositif_Automate_ABC_GererPionsDetruits_", nodes.BEH_Dispositif_Automate_ABC_GererPionsDetruits_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeDispositif_, "BEH_Dispositif_Automate_ABC_GererLeSE_", nodes.BEH_Dispositif_Automate_ABC_GererLeSE_ }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeSEStatiqueSurLima_, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeSEStatique_, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLeSE_, "BEH_Mission_Automate_AssignerMissionsSE", nodes.BEH_Mission_Automate_AssignerMissionsSE }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLesAppuis_, "BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE", nodes.BEH_Dispositif_Automate_ABC_AssignerSoutienAuPE }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererLesAppuis_, "BEH_Dispositif_Automate_ABC_GererMortier", nodes.BEH_Dispositif_Automate_ABC_GererMortier }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_GererMortier, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_ABC_RendreDisposnibleLeSE, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_AssignerMissionsSE, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }

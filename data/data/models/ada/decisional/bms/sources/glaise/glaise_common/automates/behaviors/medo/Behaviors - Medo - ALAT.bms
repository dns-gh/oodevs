includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/behaviors/medo/Behaviors - Medo - ALAT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Behaviors/Medo/Behaviors - Medo - ALAT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 31/08/05 18:34 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Behaviors - Medo - ALAT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
include "Glaise/glaise_common/Automates/Actions/Medo/Actions - Medo - ALAT.bms"


--[[// -----------------------------------------------------------------------------
]]--[[// Comportements Permettant de Preparer et Donner des Missions a des Listes de Pions 
]]--[[// -----------------------------------------------------------------------------
]]
--[[// Preparer et Donner Missions Missions Surveiller A Liste
]]--[[// -------------------------------------------------------
]]node "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillements = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si on a moins de positions que de pions, on renforce des positions
]]if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, 1, { self._namedParams.ePhase, x, DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur ), self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions IMEX A Liste
]]--[[// ----------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsIMEXAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsIMEXAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsIMEXAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsIMEXAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionIMEXA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionIMEXA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listePionsAAppuyer = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                --[[//repartition des pions au differentes patrouilles IMEX
]]--[[//copie de la liste des pions a héliporter
]]local listeCopiePionsATraiter = self._namedParams.listePionsAAppuyer
                local nbPionsParPatrouille = Floor( #( self._namedParams.listePionsAAppuyer ) / #( self._namedParams.listePions ) )
                local pionBuffer = nil
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si plus de pion a traiter, ne pas donner de mission pour rien
]]if( ( #( listeCopiePionsATraiter ) == 0 or #( listeCopiePionsATraiter ) == nil ) ) then
                            do return end
                        end

                        local listePionsAAppuyerIMEXBuffer = {}--[[//liste des unites que devra transporter x
]]
                        local i = 0
                        while i < nbPionsParPatrouille do
                            local _continue = true
do
                                pionBuffer = DIA_GetAt( listeCopiePionsATraiter, 0 )
                                DIA_PushBack( listePionsAAppuyerIMEXBuffer, pionBuffer )
                                DIA_Remove( listeCopiePionsATraiter, pionBuffer )
                            end
--[[//si x est le dernier pion de la liste, il embarque tous les pions
]]--[[//non attribués
]]                        i = i + 1
                        end

                        if( DIA_GetAt( self._namedParams.listePions, #( self._namedParams.listePions ) - 1 ) == x ) then
                            do
                                for _,y in pairs( listeCopiePionsATraiter or {} ) do
                                local _continue = true
                                    DIA_PushBack( listePionsAAppuyerIMEXBuffer, y )

                                end

                            end
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, 1, { self._namedParams.ePhase, x, listePionsAAppuyerIMEXBuffer, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Aller Se Recompleter A Liste
]]--[[// --------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsAllerSeRecompleterAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsAllerSeRecompleterAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsAllerSeRecompleterAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsAllerSeRecompleterAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.plotsRavitaillement = self.params[3]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, 1, { self._namedParams.ePhase, x, self._namedParams.plotsRavitaillement, } )

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Heliporter Plots de Ravitaillement A Liste
]]--[[// ----------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, } )

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Reconnaitre le Contour Ennemi A Liste
]]--[[// -----------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreContourEniAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreContourEniAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreContourEniAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreContourEniAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Jalonner A Liste
]]--[[// --------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsJalonnerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsJalonnerAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsJalonnerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsJalonnerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Freiner A Liste
]]--[[// --------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsFreinerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsFreinerAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsFreinerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsFreinerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionFreinerA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionFreinerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )

                end

            end
        end

    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Preparer et Donner Missions AttaquerUneFormationAeromobileAeromobile A Liste
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.listeEnis = self.params[5]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                --[[//copie de la liste des pions a héliporter
]]local listeCopieEnisATraiter = self._namedParams.listeEnis
                local nbEnisParPatrouille = Floor( #( self._namedParams.listeEnis ) / #( self._namedParams.listePions ) )
                local eniBuffer = nil
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si il n'y a plus d'eni a traiter, on ne donne plus de missions
]]if( ( #( listeCopieEnisATraiter ) == 0 or #( listeCopieEnisATraiter ) == nil ) ) then
                            do return end
                        end

                        local listeEnisADetruire = {}--[[//liste des connaissances ennemies que devra detuire x
]]
                        local i = 0
                        while i < nbEnisParPatrouille do
                            local _continue = true
do
                                eniBuffer = DEC_UserTypeList_GetAt( listeCopieEnisATraiter, 0 )
                                DEC_UserTypeList_PushBack( listeEnisADetruire, eniBuffer )
                                DEC_UserTypeList_Remove( listeCopieEnisATraiter, eniBuffer )
                            end
--[[//si x est le dernier pion de la liste, il attaque tous les enis
]]--[[//non attribués
]]                        i = i + 1
                        end

                        if( DIA_GetAt( self._namedParams.listePions, #( self._namedParams.listePions ) - 1 ) == x ) then
                            do
                                for _,y in pairs( listeCopieEnisATraiter or {} ) do
                                local _continue = true
                                    DEC_UserTypeList_PushBack( listeEnisADetruire, y )

                                end

                            end
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, listeEnisADetruire, } )
                    end

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Preparer et Donner Missions Detruire ou Neutraliser Dans Zone A Liste
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.pointDislocation = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.ciblesPrioritaires = self.params[7]
        self._namedParams.neutraliser = self.params[8]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                --[[// decoupage de la zone et définition des points de dislocation
]]local listeZones = S_Geometrie_DecoupeLocalisation( self._namedParams.zone, #( self._namedParams.listePions ) )
                if( ( #( listeZones ) == 0 or #( listeZones ) == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                local iterateurLocalisation = 0
                local iterateurPointsDislocation = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
do
                        if( iterateurLocalisation == #( listeZones ) ) then
                            iterateurLocalisation = 0
                        end

                        local localisationBuffer = DEC_UserTypeList_GetAt( listeZones, iterateurLocalisation )
                        --[[//attribue un point de dislocation et une zone pour le pion
]]StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, 1, { self._namedParams.ePhase, x, localisationBuffer, self._namedParams.pointDislocation, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, self._namedParams.neutraliser, } )
                                                iterateurLocalisation = iterateurLocalisation + 1
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Eclairer A Liste
]]--[[// --------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsEclairerAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsEclairerAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsEclairerAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsEclairerAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionEclairerA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionEclairerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Reconnaitre dans la Profondeur A Liste
]]--[[// ------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreDansLaProfondeurAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreDansLaProfondeurAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreDansLaProfondeurAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreDansLaProfondeurAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.listeLocalisations = self.params[3]
        self._namedParams.listePoints = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        if( iterateur == #( self._namedParams.listeLocalisations ) ) then
                            iterateur = 0
                        end

                        local localisationBuffer = DEC_UserTypeList_GetAt( self._namedParams.listeLocalisations, iterateur )
                        --[[//recherche du point le plus proche de la zone
]]local pointBuffer = S_Geometrie_PointPlusProcheLocalisation( localisationBuffer, self._namedParams.listePoints )
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, 1, { self._namedParams.ePhase, x, pointBuffer, localisationBuffer, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Escorter A Liste
]]--[[// --------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionEscorterA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionEscorterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteAEscorter = self.params[6]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteAEscorter, } )
                    end

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Preparer et Donner Missions Heliporter A Liste
]]--[[//
]]--[[// Commentaire : ggr => fonction dec pour obtenir une liste de liste de pions
]]--[[//               avec la bonne répartition des charges a héliporter
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHeliporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        assert( #( self._namedParams.listePions ) <= #( self._namedParams.listeUnitesAHeliporter ), "Trop de Pions Pour Transporter" )
        if( ModuleBegins() ) then
            do
                --[[//copie de la liste des pions a héliporter
]]local listeCopiePionsATraiter = self._namedParams.listeUnitesAHeliporter
                local nbPionsParPatrouille = Floor( #( self._namedParams.listeUnitesAHeliporter ) / #( self._namedParams.listePions ) )
                local pionBuffer = nil
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si plus de pion a traiter, ne pas donner de mission pour rien
]]if( ( #( listeCopiePionsATraiter ) == 0 or #( listeCopiePionsATraiter ) == nil ) ) then
                            do return end
                        end

                        local listePionsAHeliporterBuffer = {}--[[//liste des unites que devra transporter x
]]
                        local i = 0
                        while i < nbPionsParPatrouille do
                            local _continue = true
do
                                pionBuffer = DIA_GetAt( listeCopiePionsATraiter, 0 )
                                DIA_PushBack( listePionsAHeliporterBuffer, pionBuffer )
                                DIA_Remove( listeCopiePionsATraiter, pionBuffer )
                            end
--[[//si x est le dernier pion de la liste, il embarque tous les pions
]]--[[//non attribués
]]                        i = i + 1
                        end

                        if( DIA_GetAt( self._namedParams.listePions, #( self._namedParams.listePions ) - 1 ) == x ) then
                            do
                                for _,y in pairs( listeCopiePionsATraiter or {} ) do
                                local _continue = true
                                    DIA_PushBack( listePionsAHeliporterBuffer, y )

                                end

                            end
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, listePionsAHeliporterBuffer, self._namedParams.avecMateriel, } )
                    end

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Preparer et Donner Missions Helitransporter A Liste
]]--[[//
]]--[[// Commentaire : ggr => fonction dec pour obtenir une liste de liste de pions
]]--[[//               avec la bonne répartition des charges a héliporter
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHelitransporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        assert( #( self._namedParams.listePions ) <= #( self._namedParams.listeUnitesAHelitransporter ), "Trop de Pions Pour Transporter" )
        if( ModuleBegins() ) then
            do
                --[[//copie de la liste des pions a hélitransporter
]]local listeCopiePionsATraiter = self._namedParams.listeUnitesAHelitransporter
                local nbPionsParPatrouille = Floor( #( self._namedParams.listeUnitesAHelitransporter ) / #( self._namedParams.listePions ) )
                local pionBuffer = nil
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si plus de pion a traiter, ne pas donner de mission pour rien
]]if( ( #( listeCopiePionsATraiter ) == 0 or #( listeCopiePionsATraiter ) == nil ) ) then
                            do return end
                        end

                        local listePionsAHelitransporterBuffer = {}--[[//liste des unites que devra transporter x
]]
                        local i = 0
                        while i < nbPionsParPatrouille do
                            local _continue = true
do
                                pionBuffer = DIA_GetAt( listeCopiePionsATraiter, 0 )
                                DIA_PushBack( listePionsAHelitransporterBuffer, pionBuffer )
                                DIA_Remove( listeCopiePionsATraiter, pionBuffer )
                            end
--[[//si x est le dernier pion de la liste, il embarque tous les pions
]]--[[//non attribués
]]                        i = i + 1
                        end

                        if( DIA_GetAt( self._namedParams.listePions, #( self._namedParams.listePions ) - 1 ) == x ) then
                            do
                                for _,y in pairs( listeCopiePionsATraiter or {} ) do
                                local _continue = true
                                    DIA_PushBack( listePionsAHelitransporterBuffer, y )

                                end

                            end
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, listePionsAHelitransporterBuffer, self._namedParams.avecMateriel, } )
                    end

                end

            end
        end

    end,

--[[// Preparer et Donner Missions Appuyer Direct au Contact A Liste
]]--[[// -------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.unitesAAppuyer = self.params[6]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, self._namedParams.unitesAAppuyer, } )
                    end

                end

            end
        end

    end,

--[[// Couvrir en direction de l'ennemi
]]--[[// -------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteACouvrir = self.params[6]
        self._namedParams.direction = self.params[7]
        self._namedParams.angle = self.params[8]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local directionsCouverture = S_Misc_Automate_ALAT_ListeDirectionsPourCouverturesPourSgpt( #( self._namedParams.listePions ), self._namedParams.direction )
                local iterateur = 0
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        if( iterateur == #( directionsCouverture ) ) then
                            iterateur = 0
                        end

                        local directionBuffer = DEC_UserTypeList_GetAt( directionsCouverture, iterateur )
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteACouvrir, directionBuffer, } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// FlancGarde
]]--[[// -------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe" }, "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA", { "done_BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteACouvrir = self.params[6]
        self._namedParams.direction = self.params[7]
        self._namedParams.angle = self.params[8]
    end,

    activate = function( self )
        assert( ( #( self._namedParams.listePions ) ~= 0 and #( self._namedParams.listePions ) ~= nil ), "Liste pions vide" )
        if( ModuleBegins() ) then
            do
                local listePionsFlancGardeDroite = {}
                local listePionsFlancGardeGauche = {}
                local directionsFlancGardeDroite = {}
                local directionsFlancGardeGauche = {}
                local right = true
                local directionBuffer = nil
                for _,x in pairs( --[[// creation de la liste des pions pour flanc garde droite et gauche
]]self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        if( right ) then
                            DIA_PushBack( listePionsFlancGardeDroite, x )
                        else
                            DIA_PushBack( listePionsFlancGardeGauche, x )
                        end

                        right = not right
                    end
--[[// creation des listes des directions flanc garde droite et gauche
]]
                end

                if( not DIA_IsListEmpty( listePionsFlancGardeDroite ) ) then
                    directionsFlancGardeDroite = S_Misc_Automate_ALAT_ListeDirectionsPourCouverturesPourSgpt( #( listePionsFlancGardeDroite ), DEC_Geometrie_CreerDirectionPerpendiculaire( self._namedParams.direction, false ) )
                end

                if( not DIA_IsListEmpty( listePionsFlancGardeGauche ) ) then
                    directionsFlancGardeGauche = S_Misc_Automate_ALAT_ListeDirectionsPourCouverturesPourSgpt( #( listePionsFlancGardeGauche ), DEC_Geometrie_CreerDirectionPerpendiculaire( self._namedParams.direction, true ) )
                end

                --[[// ordre de mission
]]local iterateur = 0
                for _,x in pairs( listePionsFlancGardeDroite or {} ) do
                local _continue = true
do
                        if( iterateur == #( directionsFlancGardeDroite ) ) then
                            iterateur = 0
                        end

                        directionBuffer = DEC_UserTypeList_GetAt( directionsFlancGardeDroite, iterateur )
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteACouvrir, directionBuffer, } )
                                                iterateur = iterateur + 1
                    end

                end

                iterateur = 0
                for _,x in pairs( listePionsFlancGardeGauche or {} ) do
                local _continue = true
do
                        if( iterateur == #( directionsFlancGardeGauche ) ) then
                            iterateur = 0
                        end

                        directionBuffer = DEC_UserTypeList_GetAt( directionsFlancGardeGauche, iterateur )
                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, 1, { self._namedParams.ePhase, x, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteACouvrir, directionBuffer, } )
                                                iterateur = iterateur + 1
                    end

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Comportements Permettant de Donner les missions aux pions
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA" }, "BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA", { "done_ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.pointDislocation = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.ciblesPrioritaires = self.params[7]
        self._namedParams.neutraliser = self.params[8]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, self._namedParams.pointDislocation, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, self._namedParams.neutraliser, } )
self.done_ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA" }, "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA", { "done_ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA" }, "BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA", { "done_ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.plotsRavitaillement = self.params[3]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionIMEXA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionIMEXA" }, "BEH_Medo_Automate_ALAT_AssignerMissionIMEXA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerIMEXA", { "done_ACT_Mission_Automate_ALAT_AssignerIMEXA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.listePionsAAppuyer = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerIMEXA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.listePionsAAppuyer, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerIMEXA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA" }, "BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerSurveillerA", { "done_ACT_Mission_Automate_ALAT_AssignerSurveillerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.localisation = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillements = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerSurveillerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.localisation, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, } )
self.done_ACT_Mission_Automate_ALAT_AssignerSurveillerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA" }, "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA", { "done_ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA" }, "BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerJalonnerA", { "done_ACT_Mission_Automate_ALAT_AssignerJalonnerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerJalonnerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )
self.done_ACT_Mission_Automate_ALAT_AssignerJalonnerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionFreinerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionFreinerA" }, "BEH_Medo_Automate_ALAT_AssignerMissionFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerFreinerA", { "done_ACT_Mission_Automate_ALAT_AssignerFreinerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerFreinerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )
self.done_ACT_Mission_Automate_ALAT_AssignerFreinerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA" }, "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerAttaquerA", { "done_ACT_Mission_Automate_ALAT_AssignerAttaquerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerAttaquerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, } )
self.done_ACT_Mission_Automate_ALAT_AssignerAttaquerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA" }, "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA", { "done_ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.listeEnis = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.listeEnis, } )
self.done_ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA" }, "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA", { "done_ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointDislocation = self.params[3]
        self._namedParams.zone = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointDislocation, self._namedParams.zone, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionEscorterA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionEscorterA" }, "BEH_Medo_Automate_ALAT_AssignerMissionEscorterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerEscorterA", { "done_ACT_Mission_Automate_ALAT_AssignerEscorterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteAEscorter = self.params[6]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerEscorterA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteAEscorter, } )
self.done_ACT_Mission_Automate_ALAT_AssignerEscorterA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA" }, "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerHeliporterA", { "done_ACT_Mission_Automate_ALAT_AssignerHeliporterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHeliporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerHeliporterA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, self._namedParams.listeUnitesAHeliporter, self._namedParams.avecMateriel, } )
self.done_ACT_Mission_Automate_ALAT_AssignerHeliporterA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA" }, "BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerHelitransporterA", { "done_ACT_Mission_Automate_ALAT_AssignerHelitransporterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHelitransporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerHelitransporterA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, self._namedParams.plotsRavitaillement, self._namedParams.listeUnitesAHelitransporter, self._namedParams.avecMateriel, } )
self.done_ACT_Mission_Automate_ALAT_AssignerHelitransporterA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionEclairerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionEclairerA" }, "BEH_Medo_Automate_ALAT_AssignerMissionEclairerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerEclairerA", { "done_ACT_Mission_Automate_ALAT_AssignerEclairerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerEclairerA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, } )
self.done_ACT_Mission_Automate_ALAT_AssignerEclairerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA" }, "BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA", { "done_ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.unitesAAppuyer = self.params[6]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillement, self._namedParams.ciblesPrioritaires, self._namedParams.unitesAAppuyer, } )
self.done_ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

node "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA" }, "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ALAT_AssignerCouvrirA", { "done_ACT_Mission_Automate_ALAT_AssignerCouvrirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteACouvrir = self.params[6]
        self._namedParams.directionCouverture = self.params[7]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ALAT_AssignerCouvrirA, rForce, { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointRegroupement, self._namedParams.plotsRavitaillements, self._namedParams.ciblesPrioritaires, self._namedParams.uniteACouvrir, self._namedParams.directionCouverture, } )
self.done_ACT_Mission_Automate_ALAT_AssignerCouvrirA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA, "ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA", nodes.ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA, "ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA", nodes.ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA, "ACT_Mission_Automate_ALAT_AssignerAttaquerA", nodes.ACT_Mission_Automate_ALAT_AssignerAttaquerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA, "ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA", nodes.ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA, "ACT_Mission_Automate_ALAT_AssignerCouvrirA", nodes.ACT_Mission_Automate_ALAT_AssignerCouvrirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA, "ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA", nodes.ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA, "ACT_Mission_Automate_ALAT_AssignerEclairerA", nodes.ACT_Mission_Automate_ALAT_AssignerEclairerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA, "ACT_Mission_Automate_ALAT_AssignerEscorterA", nodes.ACT_Mission_Automate_ALAT_AssignerEscorterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA, "ACT_Mission_Automate_ALAT_AssignerFreinerA", nodes.ACT_Mission_Automate_ALAT_AssignerFreinerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA, "ACT_Mission_Automate_ALAT_AssignerHeliporterA", nodes.ACT_Mission_Automate_ALAT_AssignerHeliporterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA, "ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA", nodes.ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA, "ACT_Mission_Automate_ALAT_AssignerHelitransporterA", nodes.ACT_Mission_Automate_ALAT_AssignerHelitransporterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA, "ACT_Mission_Automate_ALAT_AssignerIMEXA", nodes.ACT_Mission_Automate_ALAT_AssignerIMEXA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA, "ACT_Mission_Automate_ALAT_AssignerJalonnerA", nodes.ACT_Mission_Automate_ALAT_AssignerJalonnerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA, "ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA", nodes.ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA, "ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA", nodes.ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA, "ACT_Mission_Automate_ALAT_AssignerSurveillerA", nodes.ACT_Mission_Automate_ALAT_AssignerSurveillerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAllerSeRecompleterAListe, "BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionAllerSeRecompleterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe, "BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionAppuyerDirectAuContactA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerAListe, "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe, "BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionAttaquerUneFormationAeromobileA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe, "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, "BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionDetruireNeutraliserDansZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsEclairerAListe, "BEH_Medo_Automate_ALAT_AssignerMissionEclairerA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionEclairerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe, "BEH_Medo_Automate_ALAT_AssignerMissionEscorterA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionEscorterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe, "BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionCouvrirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsFreinerAListe, "BEH_Medo_Automate_ALAT_AssignerMissionFreinerA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionFreinerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterAListe, "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe, "BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionHeliporterPlotsRavitaillementA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe, "BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionHelitransporterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsIMEXAListe, "BEH_Medo_Automate_ALAT_AssignerMissionIMEXA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionIMEXA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsJalonnerAListe, "BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionJalonnerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreContourEniAListe, "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreContourEniA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsReconnaitreDansLaProfondeurAListe, "BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionReconnaitreDansLaProfondeurA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe, "BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA", nodes.BEH_Medo_Automate_ALAT_AssignerMissionSurveillerA }

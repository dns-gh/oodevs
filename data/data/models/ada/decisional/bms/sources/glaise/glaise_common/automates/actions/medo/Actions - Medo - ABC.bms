includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - ABC.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Actions/Medo/Actions - Medo - ABC.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 20/06/05 11:05 $
]]--[[// $Revision: 23 $
]]--[[// $Workfile: Actions - Medo - ABC.hal $
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerSeDeployerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerSeDeployerA" }, "ACT_Mission_Automate_ABC_AssignerSeDeployerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerSeDeployerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_PC_SeDeployer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_PC_SeDeployer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( not ModuleBegins() ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]--[[// forcement en deuxieme Ech
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Second )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerSoutenirA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerSoutenirA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerSoutenirA" }, "ACT_Mission_Automate_ABC_AssignerSoutenirA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerSoutenirA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pionSoutien = self.params[2]
        self._namedParams.pionASoutenir = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pionSoutien, "T_Mission_Pion_ABC_Soutenir" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pionSoutien, "T_Mission_Pion_ABC_Soutenir" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Pion à soutenir
]]DEC_AssignMissionParameter( self.missionPion, "uniteASoutenir_", self._namedParams.pionASoutenir )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage soutien
]]F_Pion_SeteEtatSoutien( self._namedParams.pionASoutenir, eEtatSoutien_OK )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pionSoutien, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerAppuyerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerAppuyerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerAppuyerA" }, "ACT_Mission_Automate_ABC_AssignerAppuyerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerAppuyerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pAppuye = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Appuyer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Appuyer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion à soutenir
]]DEC_AssignMissionParameter( self.missionPion, "uniteAAppuyer_", self._namedParams.pAppuye )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerReconnaitreA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerReconnaitreA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerReconnaitreA" }, "ACT_Mission_Automate_ABC_AssignerReconnaitreA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerReconnaitreA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
        self.dest = self.dest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pPion )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_ReconnaitreAxe" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_ReconnaitreAxe" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self.dest ~= 0 ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        do
        end
--[[// Infos globales	    
]]
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.dest, self.missionPion, "itineraire_" )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//----------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//----------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerReconnaitrePtA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerReconnaitrePtA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerReconnaitrePtA" }, "ACT_Mission_Automate_ABC_AssignerReconnaitrePtA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerReconnaitrePtA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pointAReconnaitre = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_ReconnaitreAxe" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_ReconnaitreAxe" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self._namedParams.pointAReconnaitre ~= 0 ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        do
        end
--[[// Infos globales	    
]]
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self._namedParams.pointAReconnaitre, self.missionPion, "itineraire_" )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerEclairerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerEclairerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerEclairerA" }, "ACT_Mission_Automate_ABC_AssignerEclairerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerEclairerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
                self.dest = self.dest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pPion )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Eclairer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Eclairer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self.dest ~= 0 ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        do
        end
--[[// Infos globales	    
]]
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.dest, self.missionPion, "itineraire_" )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

--[[//-----------------------------------------------------------------------------
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
            end,

}

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerEclairerPtA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerEclairerPtA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerEclairerPtA" }, "ACT_Mission_Automate_ABC_AssignerEclairerPtA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerEclairerPtA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptDest = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Eclairer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Eclairer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self._namedParams.ptDest ~= 0 ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        do
        end
--[[// Infos globales	    
]]
        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self._namedParams.ptDest, self.missionPion, "itineraire_" )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------	
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerReduireA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerReduireA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerReduireA" }, "ACT_Mission_Automate_ABC_AssignerReduireA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerReduireA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pionReduire = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Reduire" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Reduire" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "uniteAReduire_", self._namedParams.pionReduire )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerFixerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerFixerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerFixerA" }, "ACT_Mission_Automate_ABC_AssignerFixerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerFixerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pionFixer = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Fixer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ABC_Fixer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "uniteAFixer_", self._namedParams.pionFixer )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerSurveillerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerSurveillerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerSurveillerA" }, "ACT_Mission_Automate_ABC_AssignerSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerSurveillerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.positionInstallation = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// Pions ayant la mission
]]--[[// Point ou s'installer
]]--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Surveiller" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Surveiller" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Position pour installation dispositif surveillance
]]DEC_Copie_Point_Mission( self._namedParams.positionInstallation, self.missionPion, "position_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerControlerSecteurA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerControlerSecteurA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerControlerSecteurA" }, "ACT_Mission_Automate_ABC_AssignerControlerSecteurA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerControlerSecteurA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zoneAControler = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// Pions ayant la mission
]]--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ControlerZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ControlerZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Secteur à controler
]]DEC_Copie_Localisation_Mission( self._namedParams.zoneAControler, self.missionPion, "zone_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerBarrerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerBarrerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerBarrerA" }, "ACT_Mission_Automate_ABC_AssignerBarrerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerBarrerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.positionInstallation = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// Pions ayant la mission
]]--[[// Point à barrer                                                    
]]--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Barrer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Barrer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Position où barrer
]]DEC_Copie_Point_Mission( self._namedParams.positionInstallation, self.missionPion, "positionInstallation_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// **************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerAttaquerA
]]--[[// 
]]--[[// Commentaires: A utiliser par l'ABC pour l'instant!
]]--[[//
]]--[[//
]]--[[// **************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerAttaquerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerAttaquerA" }, "ACT_Mission_Automate_ABC_AssignerAttaquerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerAttaquerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
                self.ptDest = self.ptDest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pion )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Attaquer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Attaquer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Direction dangereuse
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire    
]]DEC_Copie_PointDansListePoints_Mission( self.ptDest, self.missionPion, "itineraireAssaut_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pion ) .. " --> Mission attaquer $$" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

--[[//--------------------------------------------------------------------------
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
            end,

}

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerReconnaitrePointA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerReconnaitrePointA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerReconnaitrePointA" }, "ACT_Mission_Automate_ABC_AssignerReconnaitrePointA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerReconnaitrePointA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointAReconnaitre = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ReconnaitrePoint" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ReconnaitrePoint" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Position où reconnaître	
]]DEC_Copie_Point_Mission( self._namedParams.pointAReconnaitre, self.missionPion, "pointAReconnaitre_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pion ) .. " --> Mission attaquer $$" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerSemparerZoneA
]]--[[// 
]]--[[// Commentaires: Que pour l'ABC pour l'instant
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerSemparerZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerSemparerZoneA" }, "ACT_Mission_Automate_ABC_AssignerSemparerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerSemparerZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_SemparerZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_SemparerZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Localisation
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zoneAPrendre_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerArmerPointControleA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerArmerPointControleA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerArmerPointControleA" }, "ACT_Mission_Automate_ABC_AssignerArmerPointControleA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerArmerPointControleA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.positionControle = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ArmerPointDeControle" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_ArmerPointDeControle" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Localisation
]]DEC_Copie_Point_Mission( self._namedParams.positionControle, self.missionPion, "pointDeControle_" )
        --[[// Marquage échelon
]]--[[// En dur pour l'instant
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerEscorterA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerEscorterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerEscorterA" }, "ACT_Mission_Automate_ABC_AssignerEscorterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerEscorterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pionAEscorter = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_EscorterUnite" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_EscorterUnite" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Unite à escorter
]]DEC_AssignMissionParameter( self.missionPion, "uniteAEscorter_", self._namedParams.pionAEscorter )
        --[[// Marquage échelon
]]--[[// En dur pour l'instant
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerEscorterA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerEscorterUnitesA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerEscorterUnitesA" }, "ACT_Mission_Automate_ABC_AssignerEscorterUnitesA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerEscorterUnitesA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.automateAEscorter = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_EscorterUnites" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_EscorterUnites" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Unite à escorter
]]DEC_AssignMissionParameter( self.missionPion, "automateAEscorter_", self._namedParams.automateAEscorter )
        --[[// Marquage échelon
]]--[[// En dur pour l'instant
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerFreinerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerFreinerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerFreinerA" }, "ACT_Mission_Automate_ABC_AssignerFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerFreinerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
        --[[// Calcul des itineraires des missions attaquer des pions
]]        self.ptDest = self.ptDest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pion )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Freiner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Freiner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.ptDest, self.missionPion, "itineraire_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

--[[//--------------------------------------------------------------------------
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
            end,

}

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ABC_AssignerJalonnerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ABC_AssignerJalonnerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ABC_AssignerJalonnerA" }, "ACT_Mission_Automate_ABC_AssignerJalonnerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ABC_AssignerJalonnerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
        --[[// Point arrive
]]self.ptDest = self.ptDest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pion )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Jalonner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ABC_Jalonner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.ptDest, self.missionPion, "itineraire_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}


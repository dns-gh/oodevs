includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/pions/common/behaviors/Behaviors - Dep.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[//------------------------------------------------------------------------------
]]--[[// Se Poser
]]--[[// --------
]]--[[//
]]--[[// commentaires : on est à l'altitude nulle (par rapport au sol. Les moteurs ne
]]--[[// sont pas coupés => on ne veut pas arreter les moteurs automatiquement
]]--[[//------------------------------------------------------------------------------
]]node "BEH_Dep_Pion_ALAT_SePoser"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_SePoser" }, "BEH_Dep_Pion_ALAT_SePoser" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_SePoser, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { 0, } )
        if( not DEC_Agent_EstEnVol() ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

    end,

--[[//------------------------------------------------------------------------------
]]--[[// Voler
]]--[[// -----
]]--[[//
]]--[[// Commentaires :   vol tactique si FLOT, si ambiance sureté ou
]]--[[//                  ambiance ennemis
]]--[[//
]]--[[//                  vol normal si pas FLOT et ambiance vitesse
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_Voler"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_Voler" }, "BEH_Dep_Pion_ALAT_Voler" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_Voler, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Dep_PasserEnModeFurtif", { "done_ACT_Dep_PasserEnModeFurtif" } },
        { "BEH_Dep_Pion_ALAT_SecondeAllure", { "done_BEH_Dep_Pion_ALAT_SecondeAllure" } },
        { "BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis", { "done_BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis" } },
        { "BEH_Dep_Pion_ALAT_TroisiemeAllure", { "done_BEH_Dep_Pion_ALAT_TroisiemeAllure" } },
        { "BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis", { "done_BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
         do
            local _continue = true
            local switch_1 = F_Pion_GeteEtatAmbiance( myself )
            local cases_switch_1 = {}
                if switch_1 == eEtatAmbiance_Surete then
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, emptyTable )
                    if( DIA_IsListEmpty( F_Pion_GetselUnitesEnAppui( myself ) ) ) then
                        Activate( self.activations.BEH_Dep_Pion_ALAT_SecondeAllure, 1, emptyTable )
                    else
                        Activate( self.activations.BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis, 1, emptyTable )
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eEtatAmbiance_Vitesse then
                    if( DIA_IsListEmpty( F_Pion_GetselUnitesEnAppui( myself ) ) ) then
                        Activate( self.activations.BEH_Dep_Pion_ALAT_TroisiemeAllure, 1, emptyTable )
                    else
                        Activate( self.activations.BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis, 1, emptyTable )
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

--[[//------------------------------------------------------------------------------
]]--[[// hauteur et vitesse en première allure
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_PremiereAllure"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_PremiereAllure" }, "BEH_Dep_Pion_ALAT_PremiereAllure" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_PremiereAllure, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_TACTIQUE(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_PREMIERE_ALLURE(), } )
    end,

}

node "BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis" }, "BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_TACTIQUE(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_PREMIERE_ALLURE_AVEC_APPUIS(), } )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// hauteur et vitesse en seconde allure
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_SecondeAllure"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_SecondeAllure" }, "BEH_Dep_Pion_ALAT_SecondeAllure" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_SecondeAllure, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_TACTIQUE(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_SECONDE_ALLURE(), } )
    end,

}

node "BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis" }, "BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_TACTIQUE(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_SECONDE_ALLURE_AVEC_APPUIS(), } )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// hauteur et vitesse en troisième allure
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_TroisiemeAllure"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_TroisiemeAllure" }, "BEH_Dep_Pion_ALAT_TroisiemeAllure" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_TroisiemeAllure, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_NORMAL(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_TROISIEME_ALLURE(), } )
    end,

}

node "BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis" }, "BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis, {value} ) end,
    activations =
    {
        { "ACT_Dep_Pions_ALAT_Voler", { "done_ACT_Dep_Pions_ALAT_Voler" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_Pions_ALAT_Voler, 1, { M_POLY_PION_ALAT_HAUTEUR_VOL_NORMAL(), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { M_DEP_PION_ALAT_VITESSE_TROISIEME_ALLURE_AVEC_APPUIS(), } )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// RejoindrePoint :
]]--[[// ----------------
]]--[[// Cas particulier de BEH_RejoindreParItineraire.
]]--[[// la liste des points est une liste composée uniquement du point d'arrivé
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_RejoindrePoint"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" }, "BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_RejoindrePoint, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_RejoindreParItineraire", { "done_BEH_Dep_Pion_ALAT_RejoindreParItineraire" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.point = self.params[1]
        self._namedParams.typeProgression = self.params[2]
        self._namedParams.ePathType = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        assert( self._namedParams.point ~= nil, "ALAT : Rejoindre Point" )
        self.listePoints = self.listePoints or DEC_Geometrie_CreerListePoints()
        self.eEtat = self.eEtat or eActionEnCours
        self.pointARejoindre = self.pointARejoindre or DEC_Geometrie_CreerPoint()
        if( ModuleBegins() ) then
            do
                DEC_Copie_Point( self._namedParams.point, self.pointARejoindre )
                DEC_ListePoints_PushBack( self.listePoints, self._namedParams.point )
            end
        end

        if( DEC_Geometrie_PositionsEgales( myself:DEC_Agent_Position(), self._namedParams.point ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        if( DEC_Geometrie_Distance( self._namedParams.point, self.pointARejoindre ) >= 4000 ) then
            Halt( self )
            do return end
        end

        if( self.eEtat ~= eActionEnCours ) then
            self:SendFeedback( self.eEtat )
            Halt( self )
            do return end
        else
            Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindreParItineraire, 1, { self.listePoints, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindreParItineraire = function( self, _, v ) self.eEtat = v[1] end
        end

    end,

--[[//------------------------------------------------------------------------------
]]--[[// RejoindrePion :
]]--[[// ----------------
]]--[[// Cas particulier de BEH_RejoindrePoint.
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_RejoindrePion"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_RejoindrePion" }, "BEH_Dep_Pion_ALAT_RejoindrePion" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_RejoindrePion, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.typeProgression = self.params[2]
        self._namedParams.ePathType = self.params[3]
        self._namedParams.distanceAvantRelance = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        assert( self._namedParams.pion ~= nil, "ALAT : Rejoindre Pion" )
        self.eEtat = self.eEtat or eActionEnCours
        self.positionPion = self.positionPion or DEC_Geometrie_CreerPoint()
        if( ModuleBegins() ) then
            DEC_Copie_Point( self._namedParams.pion:DEC_Agent_Position(), self.positionPion )
        end

        if( DEC_Geometrie_PositionsEgales( myself:DEC_Agent_Position(), self.positionPion ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        if( DEC_Geometrie_Distance( self._namedParams.pion:DEC_Agent_Position(), self.positionPion ) > self._namedParams.distanceAvantRelance ) then
            Halt( self )
            do return end
        end

        if( self.eEtat ~= eActionEnCours ) then
            self:SendFeedback( self.eEtat )
            do return end
        else
            Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.positionPion, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
        end

    end,

--[[//------------------------------------------------------------------------------
]]--[[// RejoindreParItineraire
]]--[[// ======================
]]--[[// Ce comportement permet de rejoindre une position en acceptant certains 
]]--[[// compromis. Il arrive qu'il ne soit pas possible de rejoindre un point 
]]--[[// (exemple : si dans de l'eau...)
]]--[[// Pour eviter les comportements bloquants, on va autoriser la validation du 
]]--[[// comportement selon plusieurs criteres :
]]--[[//
]]--[[//                  - distance significative   : distance que l'on est censé 
]]--[[//                                              avoir parcouru avant evaluation
]]--[[//                  - force enlevée à la volonter de rejoindre a chaque tic où 
]]--[[//                    l'on n'arrive pas a progresser
]]--[[//                  - force ajoutee à chaque fois que l'on arrive a progresser
]]--[[//                    ( on ne depasse pas l'envie max)
]]--[[//                  - distanceMin à l'obj. : ne veut pas rejoindre à moins de...
]]--[[//                  - distanceMax à l'obj. : accepte de s'arreter à partir de...
]]--[[//
]]--[[// Forces :
]]--[[// -------
]]--[[//
]]--[[// La force sur l'action de deplacement est la force propagée dans les 
]]--[[// comportements de plus hauts niveaux. Le test sur la satisfaction se fait
]]--[[// simplement en verifiant que la volonté de parcourir l'itineraire est 
]]--[[// superieure  a 1
]]--[[//
]]--[[// Itineraires Partiels
]]--[[// --------------------
]]--[[//
]]--[[//      Le pathfind peut renvoyer un itineraire partiel, c'est a dire qui
]]--[[//      essaie de rejoindre au mieux la position demandée tout en respectant
]]--[[//      les containtes passés en argument. Typiquement, si on essaie de rejoindre
]]--[[//      un point en dehors du fuseau et que l'on specifie comme argument de
]]--[[//      pathfind eInfoFuseau, alors, l'itineraire sera calculé dans le fuseau
]]--[[//      => aucune chance de rejoindre le point. Il faut donc considerer ce cas 
]]--[[//      dans la mission
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_RejoindreParItineraire"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_RejoindreParItineraire" }, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_RejoindreParItineraire, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_Voler", { "done_BEH_Dep_Pion_ALAT_Voler" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePoints = self.params[1]
        self._namedParams.typeProgression = self.params[2]
        self._namedParams.ePathType = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.initialisationOK = self.initialisationOK or false
        self.forceDelai = self.forceDelai or 0
        self.pointEffectifARejoindre = self.pointEffectifARejoindre or nil
        self.itineraire = self.itineraire or nil
        self.distanceMaxEffective = self.distanceMaxEffective or 0
        self.bCalculItineraire = self.bCalculItineraire or false
        local forceEnvieRejoindre = 0
        local envieArret = 0
        if( S_Misc_EstDetruitPhysique() ) then
            Halt( self )
            do return end
        end

        if( g_bRecalculItineraire ) then
            do
                g_bRecalculItineraire = false
                                Halt( self )
                do return end

            end
--[[//condition d'arret
]]        end

        if( DEC_Geometrie_PositionsEgales( myself:DEC_Agent_Position(), DEC_ListePoints_GetAt( self._namedParams.listePoints, DEC_ListePoints_Size( self._namedParams.listePoints ) - 1 ) ) ) then
            do
                self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.BEH_Dep_Pion_ALAT_Voler, 1, emptyTable )
        if( ModuleBegins() ) then
            do
                assert( self._namedParams.listePoints ~= nil, "liste de points non valide" )
                assert( DEC_ListePoints_Size( self._namedParams.listePoints ) ~= 0, "liste de points vide" )
            end
--[[// calcul de l'itineraire uniquement si en vol (pour le calcul d'évitement des objets)
]]        end

        if( DEC_Agent_EstEnVol() and not self.bCalculItineraire ) then
            do
                self.itineraire = DEC_CreerItineraireListe( self._namedParams.listePoints, self._namedParams.ePathType )
                self.bCalculItineraire = true
            end
        end

        if( not self.bCalculItineraire ) then
            do return end
        end

        --[[// gestion de la progression
]]if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                    self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
        Activate( self.activations.BEH_Dep_Progresser, 1, { self.itineraire, self._namedParams.typeProgression, } )
self.done_BEH_Dep_Progresser = function( self, _, v ) self.eEtat = v[1] end
         do
            local _continue = true
            local switch_1 = --[[// gestion de l'état du calcul de l'itineraire
]]DEC_Itineraire_Etat( self.itineraire )
            local cases_switch_1 = {}
                if switch_1 == eItineraire_Valide
                or switch_1 == eItineraire_Partiel then
                    if( not self.initialisationOK ) then
                        do
                            self.pointEffectifARejoindre = DEC_Itineraire_DernierPoint( self.itineraire )
                            self.initialisationOK = true
                        end
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eItineraire_Invalide then
                    self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if cases_switch_1[2] or switch_1 == eItineraire_CalculEnCours then
                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eItineraire_Impossible then
                    self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if cases_switch_1[4] or switch_1 == eItineraire_Annule then
                    self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
            end

    end,

    destroy = function( self )
                self.itineraire = S_Misc_DetruireItineraire( self.itineraire, "BEH_Dep_Pion_ALAT_RejoindreParItineraire" )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// S'eloigner Position Vers : Ce comportement permet de s'eloigner d'un point
]]--[[// par rapport à une direction à une distance donnée.
]]--[[//
]]--[[// Elle est employée dans la manoeuvre jalonner de l'ALAT
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_SEloignerPositionVers"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_SEloignerPositionVers" }, "BEH_Dep_Pion_ALAT_SEloignerPositionVers" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_SEloignerPositionVers, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.position = self.params[1]
        self._namedParams.distance = self.params[2]
        self._namedParams.directionDangereuse = self.params[3]
        self._namedParams.ePathType = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        self.pointARejoindre = self.pointARejoindre or nil
        self.eEtat = self.eEtat or eActionEnCours
        if( ModuleBegins() ) then
            self.pointARejoindre = S_Geometrie_PtInvDirDangereuse( self._namedParams.position, self._namedParams.directionDangereuse, self._namedParams.distance )
        end

        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.pointARejoindre, eProgressionDefaut, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
    end,

--[[//------------------------------------------------------------------------------
]]--[[//
]]--[[// On utilise comme direction de référence la direction dangereuse du pion a
]]--[[// suivre pour eviter de passer en premier echelon si l'unité à une mission
]]--[[// retrograde
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_Suivre"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_Suivre" }, "BEH_Dep_Pion_ALAT_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_Suivre, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.agent = self.params[1]
        self._namedParams.distanceMin = self.params[2]
        self._namedParams.typeProgression = self.params[3]
        self._namedParams.ePathType = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.pointARejoindre = self.pointARejoindre or DEC_Geometrie_CreerPoint()
        self.positionDebut = self.positionDebut or DEC_Geometrie_CreerPoint()
        local mission = DEC_GetMission( self._namedParams.agent )
        if( mission ~= nil ) then
            DEC_Copie_Point( DEC_Geometrie_PositionTranslateDir( self._namedParams.agent:DEC_Agent_Position(), DEC_GetDirectionDanger( mission ), -self._namedParams.distanceMin ), self.pointARejoindre )
        else
            DEC_Copie_Point( self._namedParams.agent:DEC_Agent_Position(), self.pointARejoindre )
        end

        if( ModuleBegins() ) then
            DEC_Copie_Point( self.pointARejoindre, self.positionDebut )
        end

        if( DEC_Geometrie_Distance( self.pointARejoindre, self.positionDebut ) >= 2000 ) then
            Halt( self )
            do return end
        end

        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        if( self.eEtat == eActionImpossible ) then
            do
                                do
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.pointARejoindre, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
    end,

--[[//------------------------------------------------------------------------------
]]--[[// SuivreSurFlanc : Ce comportement permet de suivre un groupe d'agent face à 
]]--[[//une direction donnée
]]--[[//
]]--[[// En outre, on favorise l'observation face à cette direction
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_SuivreSurFlanc"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_SuivreSurFlanc" }, "BEH_Dep_Pion_ALAT_SuivreSurFlanc" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_SuivreSurFlanc, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "ACT_Obs_EtablirVisionFaceADir", { "done_ACT_Obs_EtablirVisionFaceADir" } },
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
        self._namedParams.dirObservation = self.params[2]
        self._namedParams.distance = self.params[3]
        self._namedParams.typeProgression = self.params[4]
        self._namedParams.ePathType = self.params[5]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.pointARejoindre = self.pointARejoindre or DEC_Geometrie_CreerPoint()
        self.pointDebut = self.pointDebut or DEC_Geometrie_CreerPoint()
        DEC_Copie_Point( DEC_Geometrie_CalculerPositionCouverture( self._namedParams.listePions, self._namedParams.dirObservation, self._namedParams.distance ), self.pointARejoindre )
        if( ModuleBegins() ) then
            DEC_Copie_Point( self.pointARejoindre, self.pointDebut )
        end

        --[[//$$$$ GGR : 6000 = distance avant relance du pathfind
]]if( DEC_Geometrie_Distance( self.pointARejoindre, self.pointDebut ) >= 6000 ) then
            Halt( self )
            do return end
        end

        Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self.pointARejoindre, } )
        Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { self._namedParams.dirObservation, } )
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        if( self.eEtat == eActionImpossible ) then
            do
                                do
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.pointARejoindre, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Intercepter des connaissances
]]--[[//
]]--[[// Commentaires : Si on a un point d'interception valide, le rejoindre,
]]--[[//                sinon, faire la courses du chien.
]]--[[//
]]--[[// Attention : si la liste des connaissances change, alors, on a un nouveau 
]]--[[// comportement instancier.
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_IntercepterConnaissances"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_IntercepterConnaissances" }, "BEH_Dep_Pion_ALAT_IntercepterConnaissances" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_IntercepterConnaissances, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsADetruire = self.params[1]
        self._namedParams.typeProgression = self.params[2]
        self._namedParams.ePathType = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.pointInterception = self.pointInterception or DEC_Geometrie_CreerPoint()
        self.eEtat = self.eEtat or eActionEnCours
        local pointBuffer = S_Misc_Pion_ALAT_PointInterception( self._namedParams.listePionsADetruire )
        if( pointBuffer ~= nil ) then
            do
                DEC_Copie_Point( pointBuffer, self.pointInterception )
            end
--[[//si pas de calcul d'interception, on fait un dog fight
]]        else
do
                pointBuffer = DEC_Geometrie_CalculerBarycentreListeConnaissancesAgents( self._namedParams.listePionsADetruire )
                if( pointBuffer ~= nil ) then
                    DEC_Copie_Point( pointBuffer, self.pointInterception )
                else
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

            end
        end

        if( self.eEtat ~= eActionEnCours ) then
            self:SendFeedback( self.eEtat )
            Halt( self )
            do return end
        else
            Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.pointInterception, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[// Eclairer itineraire d'un pion
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_ALAT_EclairerItinerairePion"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ALAT_EclairerItinerairePion" }, "BEH_Dep_Pion_ALAT_EclairerItinerairePion" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ALAT_EclairerItinerairePion, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "BEH_Dep_Pion_ALAT_RejoindrePion", { "done_BEH_Dep_Pion_ALAT_RejoindrePion" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.typeProgression = self.params[2]
        self._namedParams.ePathType = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatDelai = self.eEtatDelai or eActionEnCours
        self.pointARejoindre = self.pointARejoindre or DEC_Geometrie_CreerPoint()
        local pointARejoindreBuffer = self._namedParams.pion:DEC_Itineraire_ExtrapolerPosition( 4, true )
        DEC_Copie_Point( pointARejoindreBuffer, self.pointARejoindre )
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        if( self._namedParams.pion:DEC_Agent_EstEnMouvement() ) then
            do
                Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self.pointARejoindre, } )
                Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, 1, { self.pointARejoindre, self._namedParams.typeProgression, self._namedParams.ePathType, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
            end
        else
do
                if( self.eEtatDelai == eActionEnCours ) then
                    do
                        Activate( self.activations.ACT_Misc_Delai, 1, { 1, 2, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtatDelai = v[1] end
                    end
                else
do
                        Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.pion:DEC_Agent_Position(), } )
                        Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePion, 1, { self._namedParams.pion, self._namedParams.typeProgression, self._namedParams.ePathType, 6000, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePion = function( self, _, v ) self.eEtat = v[1] end
                    end
                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_EclairerItinerairePion, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_EclairerItinerairePion, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_EclairerItinerairePion, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_EclairerItinerairePion, "BEH_Dep_Pion_ALAT_RejoindrePion", nodes.BEH_Dep_Pion_ALAT_RejoindrePion }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_IntercepterConnaissances, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_PremiereAllure, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_PremiereAllure, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_PremiereAllureAvecAppuis, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_RejoindreParItineraire, "BEH_Dep_Pion_ALAT_Voler", nodes.BEH_Dep_Pion_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_RejoindreParItineraire, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_RejoindreParItineraire, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_RejoindrePion, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_RejoindrePoint, "BEH_Dep_Pion_ALAT_RejoindreParItineraire", nodes.BEH_Dep_Pion_ALAT_RejoindreParItineraire }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SEloignerPositionVers, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SePoser, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SecondeAllure, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SecondeAllure, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Suivre, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SuivreSurFlanc, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SuivreSurFlanc, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_SuivreSurFlanc, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_TroisiemeAllure, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_TroisiemeAllure, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis, "ACT_Dep_Pions_ALAT_Voler", nodes.ACT_Dep_Pions_ALAT_Voler }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Voler, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Voler, "BEH_Dep_Pion_ALAT_SecondeAllure", nodes.BEH_Dep_Pion_ALAT_SecondeAllure }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Voler, "BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis", nodes.BEH_Dep_Pion_ALAT_SecondeAllureAvecAppuis }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Voler, "BEH_Dep_Pion_ALAT_TroisiemeAllure", nodes.BEH_Dep_Pion_ALAT_TroisiemeAllure }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ALAT_Voler, "BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis", nodes.BEH_Dep_Pion_ALAT_TroisiemeAllureAvecAppuis }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/pions/actions/Actions - Dep.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// ACT_Dep_SeDeplacer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************/
]]node "ACT_Dep_SeDeplacer"
{
    actuators = F_DEPLACEMENT_ACTUATEURS()
,

    create = function( self )
        self._namedParams = {}
        self._namedParams.it = self.params[1]
    end,

    select = function( self )
                self.eEtatDeplacement = self.eEtatDeplacement or eEtatActionDeplacement_EnCours
        self.actionDeplacement = self.actionDeplacement or 0
        self.bEnPanne = self.bEnPanne or false
        --[[//-----------------------------------------------------------------------------
]]--[[// Init --> début déplacement
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                assert( ( self._namedParams.it ~= 0 and self._namedParams.it ~= nil ), "ACT_Dep_SeDeplacer it invalide" )
                self.actionDeplacement = DEC_StartDeplacement( self._namedParams.it )
                actionCallbacks[ self.actionDeplacement ] = function( arg ) self.eEtatDeplacement = arg end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Etat du déplacement
]]--[[//-----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eEtatDeplacement
            local cases_switch_1 = {}
                if switch_1 == eEtatActionDeplacement_EnCours then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Deplacement en cours
]]--[[//-----------------------------------------------------------------------------
]]F_Pion_SeteEtatDeplacement( myself, eEtatDeplacement_EnCours )
                    do
                    end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Plus de carburant
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eEtatActionDeplacement_ManqueCarburant then
                    DEC_PauseAction( self.actionDeplacement )
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Fin déplacement
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eEtatActionDeplacement_Termine then
                    self.actionDeplacement = DEC_StopAction( self.actionDeplacement )
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// REPRISE QD PERTE DE FOCUS
]]--[[//-----------------------------------------------------------------------------
]]elseif switch_1 == eEtatActionDeplacement_Pause then
                    DEC_ReprendAction( self.actionDeplacement )
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Autres cas
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[4] = true
elseif switch_1 == eEtatActionDeplacement_NonAutorise then
                    do
                    end
--[[// Si on n'a pas la possibilité de se deplacer ( neutralisé, decollage non fait )
]]
                    _continue = false
                                cases_switch_1[5] = true
elseif switch_1 == eEtatActionDeplacement_DejaEnDeplacement then
                    do
                    end
--[[//si on a deja un StartDeplacement en cours
]]
                    _continue = false
                                cases_switch_1[6] = true
                end
            end

    end,

    deselect = function( self )
                do
        end

        DEC_PauseAction( self.actionDeplacement )
    end,

    destroy = function( self )
                do
        end

        self.actionDeplacement = DEC_StopAction( self.actionDeplacement )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_ModulationVitesse
]]--[[// 
]]--[[// Commentaires: 
]]--[[// 
]]--[[// *****************************************************************************
]]node "ACT_Dep_ModulationVitesse"
{
    actuators =
    {
        vitesse = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rModulation = self.params[1]
    end,

    select = function( self )
                assert( self._namedParams.rModulation > 0 and self._namedParams.rModulation <= 1, "ACT_Dep_ModulationVitesse: Modulation incorrecte" )
        DEC_ModulationVitesseMax( self._namedParams.rModulation )
    end,

    deselect = function( self )
            end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_ModulationVitesseCourante
]]--[[// 
]]--[[// Commentaires: 
]]--[[// 
]]--[[// *****************************************************************************
]]node "ACT_Dep_ModulationVitesseCourante"
{
    actuators =
    {
        vitesse = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rModulation = self.params[1]
    end,

    select = function( self )
                assert( self._namedParams.rModulation > 0 or self._namedParams.rModulation <= 1, "ACT_Dep_ModulationVitesse: Modulation incorrecte" )
        DEC_ModulationVitesseCourante( self._namedParams.rModulation )
    end,

    deselect = function( self )
            end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_SePoster
]]--[[// 
]]--[[// Commentaires: prend l'actuateur de deplacement
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePoster"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
    end,

    select = function( self )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_SePosterFaceADir
]]--[[// 
]]--[[// Commentaires: prend l'actuateur de deplacement
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePosterFaceADir"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.dir = self.params[1]
    end,

    select = function( self )
                self.bInit = self.bInit or false
        if( self.bInit == false ) then
            do
                DEC_Perception_VisionVerrouilleeSurDirection( self._namedParams.dir )
                self.bInit = true
            end
        end

    end,

    deselect = function( self )
                self.bInit = false
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_SePosterFaceA
]]--[[// 
]]--[[// Commentaires:
]]--[[//               
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePosterFaceA"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.bInit = self.bInit or false
        if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.repEni ) ) then
            Halt( self )
            do return end
        end

        if( self.bInit == false ) then
            do
                local dir = DEC_Geometrie_CreerDirection( myself:DEC_Agent_Position(), DEC_ConnaissanceAgent_Position( self._namedParams.repEni ) )
                DEC_Perception_VisionVerrouilleeSurDirection( dir )
                self.bInit = true
            end
        end

    end,

    deselect = function( self )
                self.bInit = false
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_PasserEnModeFurtif
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_PasserEnModeFurtif"
{
    create = function( self )
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                DEC_Trace( "Unite en mode furtif : actif" )
                DEC_Agent_ActiverModeDiscret()
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Trace( "Unite en mode furtif : inactif" )
        DEC_Agent_DesactiverModeDiscret()
    end,

}

--[[// ****************************************************************************** 
]]--[[// ACT_Dep_PasserSurLima
]]--[[// 
]]--[[// Commentaires: passer en paramètre le type de lima puis le convertir en
]]--[[//               E_EtatPion_Lima
]]--[[// 
]]--[[// ****************************************************************************** 
]]node "ACT_Dep_PasserSurLima"
{
    actuators =
    {
        etat_Lima = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eEtatLima = self.params[1]
    end,

    select = function( self )
                F_Pion_SeteEtatLima( myself, self._namedParams.eEtatLima )
    end,

    deselect = function( self )
                F_Pion_SeteEtatLima( myself, eEtatLima_aucune )
    end,

    destroy = function( self )
                F_Pion_SeteEtatLima( myself, eEtatLima_aucune )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Dep_SePosterFaceAObstacle
]]--[[//
]]--[[// Commentaires: A starter dans M_POLY_ReagirFaceAObstacle...
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Dep_SePosterFaceAObstacle"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Conditions de terminaison
]]--[[//-----------------------------------------------------------------------------
]]        if( DEC_ConnaissanceObjet_EstContourne( self._namedParams.repObj ) == eTristate_True ) then
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do return end
--[[// pour laisser un tic au moteur...pour MAJ itineraire
]]        end

        F_Pion_SeteEtatDeplacement( myself, eEtatDeplacement_PosteFaceAObstacle )
    end,

    deselect = function( self )
                F_Pion_SeteEtatDeplacement( myself, eEtatDeplacement_aucun )
    end,

    destroy = function( self )
                F_Pion_SeteEtatDeplacement( myself, eEtatDeplacement_aucun )
    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/appui aide au deploiement/Reconnaitre zone.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_GEN_ReconnaitreZone
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_GEN_ReconnaitreZone"
{
    feedbacks = { { { "done_MIS_Pion_GEN_ReconnaitreZone" }, "MIS_Pion_GEN_ReconnaitreZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_GEN_ReconnaitreZone, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "ACT_Obs_ReconnaitrePoint", { "done_ACT_Obs_ReconnaitrePoint" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours
        self.ptZone = self.ptZone or S_Geometrie_BarycentreZone( self._namedParams.mis.zone_ )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "------------- Reconnaitre zone -----------------" )
                DEC_SetMission( myself, self._namedParams.mis )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
--[[//-----------------------------------------------------------------
]]--[[// Squelette de mission
]]--[[//-----------------------------------------------------------------
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eProgresser
                    _continue = false
                --[[// Progression
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eReconnaitre
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptZone, eProgressionReco, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Reconnaisance
]]                cases_switch_1[2] = true
elseif switch_1 == eReconnaitre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    --[[// On a arrive dans la zone
]]if( DEC_Geometrie_EstPointDansLocalisation( myself:DEC_Agent_Position(), self._namedParams.mis.zone_ ) ) then
                        do
                            Activate( self.activations.ACT_Dep_ModulationVitesse, 1.1, { M_Dep_Pion_GEN_AMBIANCE_ENI(), } )
                            F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Surete )
                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Obs_ReconnaitrePoint, 1, { self.ptZone, } )
self.done_ACT_Obs_ReconnaitrePoint = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Fin de la mission
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[4] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_ReconnaitreZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "ACT_Obs_ReconnaitrePoint", nodes.ACT_Obs_ReconnaitrePoint }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReconnaitreZone, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

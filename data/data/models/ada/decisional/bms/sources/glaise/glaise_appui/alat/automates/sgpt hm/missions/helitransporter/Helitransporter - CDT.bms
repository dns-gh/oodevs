includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/sgpt hm/missions/helitransporter/Helitransporter - CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[//
]]--[[// Fin de mission si on n'a plus de mission d'héliportage dans le sous groupement.
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Helitransporter"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_Helitransporter" }, "MIS_Automate_CDT_ALAT_Helitransporter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_Helitransporter, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_Medo_Automate_ALAT_HM_SynchroniserTransport", { "done_BEH_Medo_Automate_ALAT_HM_SynchroniserTransport" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eTransporter
        self.listePionsEnCoursRavitaillement = self.listePionsEnCoursRavitaillement or {}
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeHM = self.listeHM or {}
        self.listeHeliporter = self.listeHeliporter or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.pointDeDebarquement = self.pointDeDebarquement or DEC_Geometrie_CreerPoint()
        self.listePionsAHeliporter = self.listePionsAHeliporter or {}
        self.listePourHeliportage = self.listePourHeliportage or {}
        self.helitransportInit = self.helitransportInit or false
        if( ModuleBegins() ) then
            do
                DEC_Copie_Point( self._namedParams.mission.pointDebarquement_, self.pointDeDebarquement )
                --[[//liste des pions que l'on va pouvoir transporter
]]self.listePionsAHeliporter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAHelitransporter_ )
                self.listePionsAHeliporter = S_Cherche_Automate_PionsOperationnels( self.listePionsAHeliporter )
                --[[// Si il n'y a aucune unité que l'on peut héliporter
]]if( DIA_IsListEmpty( self.listePionsAHeliporter ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

            end
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, emptyTable )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// Mise à Jour des selections de pions ( à tous les tics )
]]--[[// -------------------------------------------------------
]]self.listePionsSgpt = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        --[[// listes des pions HM
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHMLog" )
        --[[// listes des pions HM Log
]]self.listeHM = {}
        self.listeHM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHM" )
        if( DIA_IsListEmpty( self.listeHM ) ) then
            do
                DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
--[[// liste des pions en cours de ravitaillement
]]        end

        self.listePionsEnCoursRavitaillement = {}
        self.listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        --[[//il ne doit pas y avoir plus de HM que de pions à transporter
]]if( #( self.listeHM ) > #( self.listePionsAHeliporter ) ) then
            do
                --[[//on met autant de HM que de pions
]]local i = 0
                while i < #( self.listePionsAHeliporter ) do
                    local _continue = true
                    DIA_PushBack( self.listePourHeliportage, DIA_GetAt( self.listeHM, i ) )
                i = i + 1
                end

            end
        else
            self.listePourHeliportage = self.listeHM
        end

        --[[// liste des pions en cours de transport
]]self.listeHeliporter = {}
        self.listeHeliporter = S_Cherche_Automate_Filtre_TypeMission( self.listePionsSgpt, "T_Mission_Pion_ALAT_Heliporter" )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
        --[[// Gestion de l'ordre de conduite changer point de débarquement
]]--[[// ------------------------------------------------------------
]]local gestionCDTMissionsTransport = false
        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local ordre = x
                local repOrdre = ordre
                if( repOrdre:GetType() == "Rep_OrderConduite_ChangerPositionDebarquement" ) then
                    do
                        gestionCDTMissionsTransport = true
                        local ordreParametresALAT = repOrdre
                        DEC_Copie_Point( ordreParametresALAT:GetorderConduiteChangerPositionDebarquement_(), self.pointDeDebarquement )
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
            end

        end

        if( not DIA_IsListEmpty( self.listeHeliporter ) ) then
            self.helitransportInit = true
        end

         do
            local _continue = true
--[[// Synchronisation des unites qui ont la mission de transport.
]]--[[// ravitaillements et IMEX
]]            local switch_1 = self.ePhase
                if switch_1 == eTransporter then
                    if( self.helitransportInit and DIA_IsListEmpty( self.listeHeliporter ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport, 1, { self.listeHeliporter, } )
                    if( not DIA_IsListEmpty( self.listePourHeliportage ) and not gestionCDTMissionsTransport ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe, 1, { ePhase_CDT, self.listePourHeliportage, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.pointEmbarquement_, self.pointDeDebarquement, self._namedParams.mission.porteeAction_, self._namedParams.mission.plotsRavitaillement_, self.listePionsAHeliporter, self._namedParams.mission.avecMateriel_, self._namedParams.mission.ravitaillementDebutMission_, } )
                    end

                    Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, false, } )
                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Helitransporter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Medo_Automate_ALAT_HM_SynchroniserTransport", nodes.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHelitransporterAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Helitransporter, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

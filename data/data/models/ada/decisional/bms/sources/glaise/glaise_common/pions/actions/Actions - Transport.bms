includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/pions/actions/Actions - Transport.bms"] = true


--[[// ****************************************************************************** 
]]--[[// ACT_Transport_Pion_TransportEmbarquer
]]--[[// 
]]--[[// Commentaires:
]]--[[//                Embarque les composantes des unites definies par 
]]--[[//                DEC_Transport_AjouterPions
]]--[[//
]]--[[// ****************************************************************************** 
]]node "ACT_Transport_Pion_TransportEmbarquer"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.actionEmbarquer = self.actionEmbarquer or 0
        self.actionEnPause = self.actionEnPause or false
        self.eEtatTransport = self.eEtatTransport or nil
        --[[// ----------------------------------------------------------------------------- 
]]--[[// Init
]]--[[// -----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionEmbarquer = DEC_Transport_StartEmbarquer( self.eEtatTransport )
        end

        --[[// Reprise
]]if( self.actionEnPause ) then
            do
                DEC_ReprendAction( self.actionEmbarquer )
                self.actionEnPause = false
            end
--[[// ----------------------------------------------------------------------------- 
]]--[[//  En fonction etat transport
]]--[[// -----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eEtatTransport
            local cases_switch_1 = {}
                if switch_1 == eActionTransport_Running then
                    do
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionTransport_Finished then
                    do
                    end

                    DEC_StopAction( self.actionEmbarquer )
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionTransport_Impossible then
                    do
                    end

                    DEC_StopAction( self.actionEmbarquer )
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
                self.actionEnPause = true
        DEC_PauseAction( self.actionEmbarquer )
    end,

    destroy = function( self )
                DEC_StopAction( self.actionEmbarquer )
    end,

}

--[[// ****************************************************************************** 
]]--[[// ACT_Transport_Pion_TransportDebarquer
]]--[[// 
]]--[[// Commentaires:
]]--[[//                Debarque les composantes des unites definies par 
]]--[[//                DEC_Transport_AjouterPions
]]--[[// ****************************************************************************** 
]]node "ACT_Transport_Pion_TransportDebarquer"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posDebarquement = self.params[1]
    end,

    select = function( self )
                self.actionDebarquer = self.actionDebarquer or 0
        self.actionEnPause = self.actionEnPause or false
        self.eEtatTransport = self.eEtatTransport or nil
        --[[// ----------------------------------------------------------------------------- 
]]--[[// Init
]]--[[// -----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.actionDebarquer = DEC_Transport_StartDebarquer( self.eEtatTransport, self._namedParams.posDebarquement )
        end

        --[[// reprise
]]if( self.actionEnPause ) then
            do
                DEC_ReprendAction( self.actionDebarquer )
                self.actionEnPause = false
            end
--[[// ----------------------------------------------------------------------------- 
]]--[[// Suivant l'état du transport...
]]--[[// -----------------------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eEtatTransport
            local cases_switch_1 = {}
                if switch_1 == eActionTransport_Running then
                    do
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionTransport_Finished then
                    do
                    end

                    DEC_StopAction( self.actionDebarquer )
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionTransport_Impossible then
                    do
                    end

                    DEC_StopAction( self.actionDebarquer )
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

    end,

    deselect = function( self )
                self.actionEnPause = true
        DEC_PauseAction( self.actionDebarquer )
    end,

    destroy = function( self )
                DEC_StopAction( self.actionDebarquer )
    end,

}


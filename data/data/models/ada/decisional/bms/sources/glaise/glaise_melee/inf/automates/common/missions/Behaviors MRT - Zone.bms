includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/automates/common/missions/Behaviors MRT - Zone.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Missions/Behaviors MRT - Zone.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 9/09/05 16:55 $
]]--[[// $Revision: 18 $
]]--[[// $Workfile: Behaviors MRT - Zone.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


node "BEH_Medo_Automate_INF_PreparerMission_Zone"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_PreparerMission_Zone" }, "BEH_Medo_Automate_INF_PreparerMission_Zone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_PreparerMission_Zone, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux", { "done_ACT_Medo_Automate_AffecterFuseaux" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_INF_AssignerControler", { "done_BEH_Medo_Automate_INF_AssignerControler" } },
        { "BEH_Medo_Automate_INF_Controler_AssignerMission_PC", { "done_BEH_Medo_Automate_INF_Controler_AssignerMission_PC" } },
        { "BEH_Medo_Automate_INF_AssignerHarceler", { "done_BEH_Medo_Automate_INF_AssignerHarceler" } },
        { "BEH_Medo_Automate_INF_Harceler_AssignerMission_PC", { "done_BEH_Medo_Automate_INF_Harceler_AssignerMission_PC" } },
        { "BEH_Medo_Automate_INF_AssignerAppuyerA_Mortier", { "done_BEH_Medo_Automate_INF_AssignerAppuyerA_Mortier" } },
        { "BEH_Medo_Automate_INF_InitialiseSE", { "done_BEH_Medo_Automate_INF_InitialiseSE" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeMission = self.params[1]
        self._namedParams.rN_Position = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.selPions = self.selPions or S_ObtenirPionsOperationnels_SansPC()
        self.lstPionsAttaque = self.lstPionsAttaque or {}
        self.lstPionsAppui = self.lstPionsAppui or {}
        self.selPions_PE_INF = self.selPions_PE_INF or {}
        self.selPions_INF_Mortier = self.selPions_INF_Mortier or {}
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Nombre de pions : " .. FloatToString( #( self.selPions ) ) )
                S_Medo_Automate_InitialiseSE( self.selPions, eEtatEchelon_Second )
            end
        end

         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------								
]]--[[// Selection les types de composantes
]]--[[// Determine les echelons				
]]--[[// Determine les echelons						
]]--[[// Selection des composantes
]]--[[// 
]]--[[// L'execution de la mission necessite la presence d'un 1er ech
]]--[[//-----------------------------------------------------------------------------
]]--[[//Le fuseau de la compagnie est coupe en DEUX
]]--[[//le pion en appui utilise le fuseau de la compagnie
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------				
]]            local switch_1 = self.ePhase
                if switch_1 == eMRT_SelectionnerPions then
                    self.ePhase = eMRT_AssignerMissions
                    DEC_Trace( "Selection des composantes pion : Infanterie" )
                    local sUnites_INF = S_Cherche_Automate_Filtre_TypePion( self.selPions, "SectionInfanterie" )
                    self.selPions_INF_Mortier = S_Cherche_Automate_Filtre_TypePion( self.selPions, "GroupeInfanterie_Mortier" )
                    local rN_PE = 0
                    local rN_SE = 0
                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eTypeMission
                            if switch_2 == "T_Mission_Automate_INF_Controler"
                            or switch_2 == "T_Mission_Automate_INF_Harceler" then
                                rN_PE = 3
                                if( self._namedParams.rN_Position ~= 0 ) then
                                    rN_PE = Min( self._namedParams.rN_Position, rN_PE )
                                end

                                rN_SE = #( DEC_Automate_PionsSansPC() ) - rN_PE
                                DEC_Trace( "Selection des composantes pion" )
                                self.selPions_PE_INF = S_Automate_ValideEchelonPion( sUnites_INF, self.lstPionsAttaque, rN_PE, self.lstPionsAppui )
                                _continue = false
                                                        end
                        end

                    if( #( self.lstPionsAttaque ) == 0 ) then
                        do
                            DEC_Trace( "Pas de 1er echelon" )
                            DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                elseif switch_1 == eMRT_AffecterFuseaux then
                    if( self.eActionMRT == eActionEffectuee ) then
                        do
                            self.eActionMRT = eActionEnCours
                                                        do
                                self.ePhase = eMRT_AssignerMissions
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, { self.lstPionsAttaque, } )
self.done_ACT_Medo_Automate_AffecterFuseaux = function( self, _, v ) self.eActionMRT = v[1] end
                    _continue = false
                elseif switch_1 == eMRT_AssignerMissions then
                    if( self.eActionMRT == eActionImpossible ) then
                        do
                                                        do
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "eValidationMRT == eActionImpossible" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.eValidationMRT = eActionEnCours
                                                        do
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.lstPionsAttaque ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eTypeMission
                            if switch_2 == "T_Mission_Automate_INF_Controler" then
                                Activate( self.activations.BEH_Medo_Automate_INF_AssignerControler, 1, { self.selPions_PE_INF, } )
                                Activate( self.activations.BEH_Medo_Automate_INF_Controler_AssignerMission_PC, 1, { self.lstPionsAttaque, self.lstPionsAppui, } )
self.done_BEH_Medo_Automate_INF_Controler_AssignerMission_PC = function( self, _, v ) self.eActionMRT = v[1] end
                                _continue = false
                            elseif switch_2 == "T_Mission_Automate_INF_Harceler" then
                                Activate( self.activations.BEH_Medo_Automate_INF_AssignerHarceler, 1, { self.selPions_PE_INF, } )
                                Activate( self.activations.BEH_Medo_Automate_INF_Harceler_AssignerMission_PC, 1, { self.lstPionsAttaque, self.lstPionsAppui, } )
self.done_BEH_Medo_Automate_INF_Harceler_AssignerMission_PC = function( self, _, v ) self.eActionMRT = v[1] end
                                _continue = false
                            
                            else
                                DEC_Trace( "Mission Inconnue" )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                                                        end
                        end

                    Activate( self.activations.BEH_Medo_Automate_INF_AssignerAppuyerA_Mortier, 1, { self.selPions_INF_Mortier, } )
                    Activate( self.activations.BEH_Medo_Automate_INF_InitialiseSE, 1, { self.lstPionsAppui, } )
                    _continue = false
                                end
            end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Controler
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_INF_AssignerControler"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_AssignerControler" }, "BEH_Medo_Automate_INF_AssignerControler" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_AssignerControler, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "BEH_Mission_Automate_INF_AssignerA_Controler", { "done_BEH_Mission_Automate_INF_AssignerA_Controler" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPions_PE = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.lstLocalisations = self.lstLocalisations or {}
        self.eCodeLoc = self.eCodeLoc or eNoError
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                end
--[[//-----------------------------------------------------------------------------
]]--[[// Decoupage de la zone A surveiller
]]--[[//-----------------------------------------------------------------------------		
]]
                self.lstLocalisations = DEC_Geometrie_DecoupeLocalisation( self.mission.zone_, #( self._namedParams.lstPions_PE ), self.eCodeLoc )
                self.eCodeLoc = self.lstLocalisations.second
                self.lstLocalisations = self.lstLocalisations.first
                 do
                    local _continue = true
                    local switch_1 = self.eCodeLoc
                        if switch_1 == eError_PionsPasDansMemeFuseau
                        or switch_1 == eError_LocalisationPasDansFuseau then
                                                    DEC_Trace( "Erreur MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                                                        do
                                DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, emptyTable )
                                                                self:SendFeedback( eActionImpossible )
                                do return end

                            end

                            _continue = false
                        elseif switch_1 == eWarning_DecoupageIncomplet then
                                                    DEC_Trace( "Alerte MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                            _continue = false
                        elseif switch_1 == eNoError then
                                                    _continue = false
                                                end
                    end

                local rIt = 0
                for _,x_pion in pairs( self._namedParams.lstPions_PE or emptyTable ) do
                local _continue = true
                    do
                        if( rIt < #( self.lstLocalisations ) ) then
                            do
                                local locZone = DEC_UserTypeList_GetAt( self.lstLocalisations, rIt )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_INF_AssignerA_Controler, 1, { ePhase_MRT, x_pion, locZone, self.mission.preparerTerrain_, } )
                            end
                        end

                                                rIt = rIt + 1
                    end

                end

            end
        end

    end,

    destroy = function( self )
            end,

--[[//-----------------------------------------------------------------------------
]]--[[// Harceler
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_INF_AssignerHarceler"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_AssignerHarceler" }, "BEH_Medo_Automate_INF_AssignerHarceler" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_AssignerHarceler, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "BEH_Mission_Automate_INF_AssignerA_Harceler", { "done_BEH_Mission_Automate_INF_AssignerA_Harceler" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPions_PE = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.lstLocalisations = self.lstLocalisations or {}
        self.eCodeLoc = self.eCodeLoc or eNoError
        self.lstLocRgpt = self.lstLocRgpt or {}
        self.eCodeLocRgpt = self.eCodeLocRgpt or eNoError
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                end
--[[//-----------------------------------------------------------------------------
]]--[[// Decoupage de la zone A surveiller
]]--[[//-----------------------------------------------------------------------------		
]]
                self.lstLocalisations = DEC_Geometrie_DecoupeLocalisation( self.mission.zoneSurveillance_, #( self._namedParams.lstPions_PE ), self.eCodeLoc )
                self.eCodeLoc = self.lstLocalisations.second
                self.lstLocalisations = self.lstLocalisations.first
                 do
                    local _continue = true
                    local switch_1 = self.eCodeLoc
                        if switch_1 == eError_PionsPasDansMemeFuseau
                        or switch_1 == eError_LocalisationPasDansFuseau then
                                                    DEC_Trace( "Erreur MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                                                        do
                                DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, emptyTable )
                                                                self:SendFeedback( eActionImpossible )
                                do return end

                            end

                            _continue = false
                        elseif switch_1 == eWarning_DecoupageIncomplet then
                                                    DEC_Trace( "Alerte MRT : Decoupage de la zone " .. EnumToString( self.eCodeLoc, E_LocalisationFunctionsReturnCode ) )
                            _continue = false
                        elseif switch_1 == eNoError then
                                                    _continue = false
                                                end
                    end

                self.lstLocRgpt = DEC_Geometrie_DecoupeLocalisation( self.mission.pointRegroupement_, #( self._namedParams.lstPions_PE ), self.eCodeLocRgpt )
                self.eCodeLocRgpt = self.lstLocRgpt.second
                self.lstLocRgpt = self.lstLocRgpt.first
                local rIt = 0
                local natureObjectif = eNatureObjectif_ElementTerrain
                for _,x_pion in pairs( self._namedParams.lstPions_PE or emptyTable ) do
                local _continue = true
                    do
                        if( rIt < #( self.lstLocalisations ) ) then
                            do
                                local locZone = DEC_UserTypeList_GetAt( self.lstLocalisations, rIt )
                                local locZoneRgpt = self.mission.pointRegroupement_
                                if( self.eCodeLocRgpt == eNoError ) then
                                    locZoneRgpt = DEC_UserTypeList_GetAt( self.lstLocRgpt, rIt )
                                end

                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_INF_AssignerA_Harceler, 1, { ePhase_MRT, x_pion, locZone, locZoneRgpt, natureObjectif, } )
                                natureObjectif = eNatureObjectif_ElementMobile
                            end
                        end

                                                rIt = rIt + 1
                    end

                end

            end
        end

    end,

    destroy = function( self )
            end,

--[[// ============================================================================
]]--[[// $Created : JCR : 07/07/2005 16:46
]]--[[// BEH_Medo_Automate_INF_AssignerMissionRetrogradeVers_PC
]]--[[// Assigne une mission de deplacement du pc vers une position defini par la 
]]--[[// mission
]]--[[// ============================================================================
]]}

node "BEH_Medo_Automate_INF_Harceler_AssignerMission_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_Harceler_AssignerMission_PC" }, "BEH_Medo_Automate_INF_Harceler_AssignerMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_Harceler_AssignerMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPionsAttaque = self.params[1]
        self._namedParams.lstPionsAppui = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------    	
]]local pAppui = nil
                if( #( self._namedParams.lstPionsAttaque ) ~= 0 ) then
                    pAppui = DIA_GetAt( self._namedParams.lstPionsAttaque, #( self._namedParams.lstPionsAttaque ) - 1 )
                else
if( #( self._namedParams.lstPionsAppui ) ~= 0 ) then
                        pAppui = DIA_GetAt( self._namedParams.lstPionsAppui, 0 )
                    end
                end

                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, DEC_Automate_PionPC(), pAppui, } )
                for _,x_appui in pairs( self._namedParams.lstPionsAppui or emptyTable ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, x_appui, pAppui, } )

                end

            end
        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 07/07/2005 16:46
]]--[[// BEH_Medo_Automate_INF_Controler_AssignerMission_PC
]]--[[// Assigne une mission de deplacement du pc vers une position defini par la 
]]--[[// mission
]]--[[// ============================================================================
]]}

node "BEH_Medo_Automate_INF_Controler_AssignerMission_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_Controler_AssignerMission_PC" }, "BEH_Medo_Automate_INF_Controler_AssignerMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_Controler_AssignerMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPionsAttaque = self.params[1]
        self._namedParams.lstPionsAppui = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------    	
]]local pAppui = nil
                if( #( self._namedParams.lstPionsAttaque ) ~= 0 ) then
                    pAppui = DIA_GetAt( self._namedParams.lstPionsAttaque, #( self._namedParams.lstPionsAttaque ) - 1 )
                else
if( #( self._namedParams.lstPionsAppui ) ~= 0 ) then
                        pAppui = DIA_GetAt( self._namedParams.lstPionsAppui, 0 )
                    end
                end

                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, DEC_Automate_PionPC(), pAppui, } )
            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerControler, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerControler, "BEH_Mission_Automate_INF_AssignerA_Controler", nodes.BEH_Mission_Automate_INF_AssignerA_Controler }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerHarceler, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerHarceler, "BEH_Mission_Automate_INF_AssignerA_Harceler", nodes.BEH_Mission_Automate_INF_AssignerA_Harceler }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_Controler_AssignerMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_Harceler_AssignerMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "ACT_Medo_Automate_AffecterFuseaux", nodes.ACT_Medo_Automate_AffecterFuseaux }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_AssignerControler", nodes.BEH_Medo_Automate_INF_AssignerControler }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_Controler_AssignerMission_PC", nodes.BEH_Medo_Automate_INF_Controler_AssignerMission_PC }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_AssignerHarceler", nodes.BEH_Medo_Automate_INF_AssignerHarceler }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_Harceler_AssignerMission_PC", nodes.BEH_Medo_Automate_INF_Harceler_AssignerMission_PC }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_AssignerAppuyerA_Mortier", nodes.BEH_Medo_Automate_INF_AssignerAppuyerA_Mortier }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_PreparerMission_Zone, "BEH_Medo_Automate_INF_InitialiseSE", nodes.BEH_Medo_Automate_INF_InitialiseSE }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/pions/grp mortier/missions/Appuyer.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Grp Mortier/Missions/Appuyer.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:24 $
]]--[[// $Revision: 23 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//=============================================================================
]]--[[// Details :
]]--[[//		Définition : apporter une aide à une autre unité, spontanément ou sur 
]]--[[//		ordre par le mouvement ou par le feu. 
]]--[[//
]]--[[//		Principes : Il s’agit, dans le cadre de la manoeuvre de la compagnie 
]]--[[//		et à partir d’une position choisie, d’apporter, sur ordre ou de façon 
]]--[[//		spontanée, une aide aux éléments amis par des feux appliqués sur des
]]--[[//		objectifs repérés.
]]--[[//=============================================================================
]]node "MIS_Pion_INF_Appuyer"
{
    feedbacks = { { { "done_MIS_Pion_INF_Appuyer" }, "MIS_Pion_INF_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Ordre_Pion_Mortier_AppliquerLesFeux", { "done_BEH_Ordre_Pion_Mortier_AppliquerLesFeux" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_Delai_Pion_INF_PreparerMission", { "done_BEH_Delai_Pion_INF_PreparerMission" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_INF_Appuyer", { "done_BEH_Dep_Pion_INF_Appuyer" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.repAmi = self.repAmi or self._namedParams.mission.uniteAAppuyer_
        --[[// initalisation de la mission
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                --[[// mise a jour des infos sur le pion ennemi
]]if( self.repAmi == nil ) then
                    do
                        DEC_Warning( eRC_MissionImpossible )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "Mission 'Appuyer ( " .. DEC_GetSzName( self.repAmi ) .. " )' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Appui, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_APPUYER(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        local selOrder = DEC_GetCategory( "ordres_recus" )
        local bEstUtilise = true
        for _,repOrder in pairs( selOrder or emptyTable ) do
        local _continue = true
do
                --[[//-----------------------------------------------------------------------------
]]--[[// ordre de conduite
]]--[[//-----------------------------------------------------------------------------
]]local repOrdreCond = repOrder
                 do
                    local _continue = true
                    local switch_1 = repOrdreCond:GetType()
                        if switch_1 == "Rep_OrderConduite_Pion_AppliquerFeux" then
                            local repOrdre_Tir = repOrdreCond
                            StartActivateOverride( self, self.activations.BEH_Ordre_Pion_Mortier_AppliquerLesFeux, 10, { repOrdre_Tir:Getcible_(), repOrdre_Tir:GetnbIT_(), repOrdre_Tir:Getmunitions_(), } )
                            _continue = false
                        
                        else
                            bEstUtilise = false
                        end
                    end

                if( bEstUtilise ) then
                    do
                        --[[//-----------------------------------------------------------------------------
]]--[[// on a finit de traiter l'ordre, on le supprime
]]Activate( self.activations.ACT_Ordre_Suppression, 1, { repOrdreCond, } )
                    end
                end

            end
--[[//=============================================================================
]]--[[// Squelette de mission
]]--[[//=============================================================================		
]]
        end

         do
            local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// preparation de la mission
]]--[[//-----------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------	
]]--[[// Mission
]]--[[//-------------------------------------------------------------------------	
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                        do
                            Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { M_TEMPS_PREPARATION_APPUYER(), } )
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eAppuyer
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eAppuyer then
                    Activate( self.activations.BEH_Dep_Pion_INF_Appuyer, GetMotivation( "MOT_Mission" ), { self.repAmi, M_DISTANCE_SUIVI_MIN(), M_DISTANCE_SUIVI_MAX(), } )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission" )
                                                                do
                                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                                        DEC_RC( eRC_FinMission )
                                    else
                                        DEC_Message( eRC_FinMission )
                                    end

                                end

                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { false, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Ordre_Pion_Mortier_AppliquerLesFeux", nodes.BEH_Ordre_Pion_Mortier_AppliquerLesFeux }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Dep_Pion_INF_Appuyer", nodes.BEH_Dep_Pion_INF_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

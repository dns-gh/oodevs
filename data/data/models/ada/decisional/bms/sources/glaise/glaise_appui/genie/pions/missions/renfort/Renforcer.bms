includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/renfort/Renforcer.bms"] = true

include "bit.lua"


--[[// ******************************************************************************
]]--[[// MIS_GEN_Renforcer
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006 - le groupe specifique renforce la section 
]]--[[//               du génie
]]--[[//
]]--[[// ******************************************************************************
]]node "MIS_Pion_GEN_Renforcer"
{
    feedbacks = { { { "done_MIS_Pion_GEN_Renforcer" }, "MIS_Pion_GEN_Renforcer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_GEN_Renforcer, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Suivre", { "done_BEH_Dep_Suivre" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Dep_Pion_GEN_RenforcerSurPosition", { "done_BEH_Dep_Pion_GEN_RenforcerSurPosition" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.bRenforceAutomate = self.bRenforceAutomate or self._namedParams.mis.unite_:DEC_Agent_EstPC()
        if( ModuleBegins() ) then
            do
                DEC_Trace( "MIS_Pion_GEN_Renforcer : debut" )
                DEC_SetMission( myself, self._namedParams.mis )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eRejoindrePosition
                    _continue = false
                --[[// Progression
]]                cases_switch_1[1] = true
elseif switch_1 == eRejoindrePosition then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// Progression
]]--[[// si mission donnée par automate apres renforcement par anibas
]]if( DEC_Agent_AutomateEstEmbraye() or self.bRenforceAutomate or self._namedParams.mis.lieuRenforcement_ == 0 ) then
                        Activate( self.activations.BEH_Dep_Suivre, 1, { self._namedParams.mis.unite_, 100, } )
                    else
do
                            if( self.eEtat == eActionEffectuee ) then
                                do
                                    self.eEtat = eActionEnCours
                                                                        do
                                        self.ePhaseMission = eFinMission
                                                                                do return end

                                    end

                                end
                            end

                            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mis.lieuRenforcement_, eProgressionReco, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                        end
--[[// Renforcement
]]                    end

                    Activate( self.activations.BEH_Dep_Pion_GEN_RenforcerSurPosition, 1, { self._namedParams.mis.unite_, self.bRenforceAutomate, } )
                    _continue = false
                --[[// Fin de la mission --> sur ordre
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

--[[// ******************************************************************************
]]--[[// BEH_Dep_Pion_GEN_RenforcerSurPosition
]]--[[//
]]--[[// Commentaires: le groupe specifique renforce la section du génie
]]--[[//
]]--[[// ******************************************************************************
]]}

node "BEH_Dep_Pion_GEN_RenforcerSurPosition"
{
    feedbacks = { { { "done_BEH_Dep_Pion_GEN_RenforcerSurPosition" }, "BEH_Dep_Pion_GEN_RenforcerSurPosition" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_GEN_RenforcerSurPosition, {value} ) end,
    activations =
    {
        { "ACT_Misc_Pion_GEN_Renforcer", { "done_ACT_Misc_Pion_GEN_Renforcer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.unite = self.params[1]
        self._namedParams.bRenforceAutomate = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), self._namedParams.unite:DEC_Agent_Position() ) < 800 ) then
            Activate( self.activations.ACT_Misc_Pion_GEN_Renforcer, 1, { self._namedParams.unite, self._namedParams.bRenforceAutomate, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Misc_Pion_GEN_Renforcer
]]--[[//
]]--[[// Commentaires: renforcement au niveau "physique"
]]--[[// 
]]--[[// *****************************************************************************
]]}

node "ACT_Misc_Pion_GEN_Renforcer"
{
    feedbacks = { { { "done_ACT_Misc_Pion_GEN_Renforcer" }, "ACT_Misc_Pion_GEN_Renforcer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_GEN_Renforcer, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.unite = self.params[1]
        self._namedParams.bRenforceAutomate = self.params[2]
    end,

    select = function( self )
        --[[//-----------------------------------------------------------------
]]--[[// Renforcement d'un pion
]]--[[//-----------------------------------------------------------------
]]        if( ModuleBegins() and not self._namedParams.bRenforceAutomate ) then
            DEC_Renforce( self._namedParams.unite )
        end

        --[[//-----------------------------------------------------------------
]]--[[// Renforcement d'un automate
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() and self._namedParams.bRenforceAutomate ) then
            do
                if( DEC_Pion_ChangeAutomate( DEC_GetAutomate( self._namedParams.unite ) ) ) then
                    DEC_RC( eRC_ReussiteRenforcement, myself, DEC_GetAutomate( self._namedParams.unite ) )
                else
                    DEC_RC( eRC_EchecRenforcement, myself, DEC_GetAutomate( self._namedParams.unite ) )
                end

            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                if( not self._namedParams.bRenforceAutomate ) then
            DEC_AnnuleRenforcement()
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_Renforcer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_GEN_RenforcerSurPosition, "ACT_Misc_Pion_GEN_Renforcer", nodes.ACT_Misc_Pion_GEN_Renforcer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "BEH_Dep_Suivre", nodes.BEH_Dep_Suivre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "BEH_Dep_Pion_GEN_RenforcerSurPosition", nodes.BEH_Dep_Pion_GEN_RenforcerSurPosition }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_Renforcer, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

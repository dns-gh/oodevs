includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - RENS.bms"] = true

--[[//=============================================================================
]]--[[// Missions ROHUM
]]--[[//=============================================================================
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROHUM_AssignerRenseignerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROHUM_AssignerRenseignerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROHUM_RenseignerSur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROHUM_RenseignerSur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Renseigner' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Zone à renseigner
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zoneAObserver_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROHUM_AssignerSExfiltrerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROHUM_AssignerSExfiltrerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.centreZone = self.centreZone or DEC_Geometrie_CalculerBarycentreLocalisationDansFuseau( self._namedParams.zone )
        assert( self.centreZone ~= nil, "ACT_Mission_Automate_RENS_ROHUM_AssignerSExfiltrerA" )
        self.positionDecrochage = self.positionDecrochage or DEC_Geometrie_PositionAleatoireDansCercle( self.centreZone, 100 )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROHUM_SExfiltrer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROHUM_SExfiltrer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'SExfiltrer' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Point
]]DEC_Copie_Point_Mission( self.positionDecrochage, self.missionPion, "pointDeRegroupement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[//=============================================================================
]]--[[// Missions ROIM
]]--[[//=============================================================================
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROIM_CL289_AssignerRenseignerSur
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROIM_CL289_AssignerRenseignerSur"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ficelleDeVole = self.params[3]
        self._namedParams.zonesDeRecherches = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_CL289_RenseignerSur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_CL289_RenseignerSur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Renseigner sur' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// ficelle de vole (itineraire)
]]DEC_Copie_ListePoints_Mission( self._namedParams.ficelleDeVole, self.missionPion, "ficelleDeVole_" )
        --[[// ZR (zone de recherche)
]]DEC_Copie_ListeLocalisations_Mission( self._namedParams.zonesDeRecherches, self.missionPion, "zonesDeRecherche_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROIM_SDTI_RenseignerSur
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROIM_SDTI_AssignerRenseignerSur"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ficelleDeVole = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_SDTI_RenseignerSur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Renseigner sur' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// ficelle de vole (itineraire)
]]DEC_Copie_ListePoints_Mission( self._namedParams.ficelleDeVole, self.missionPion, "ficelleDeVole_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROIM_AssignerMettreEnOeuvreA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROIM_AssignerMettreEnOeuvreA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.position = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_MettreEnOeuvre" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROIM_MettreEnOeuvre" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Mettre en oeuvre' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// position mise en oeuvre
]]DEC_Copie_Point_Mission( self._namedParams.position, self.missionPion, "positionDeploiement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[//=============================================================================
]]--[[// Missions ROEM
]]--[[//=============================================================================
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROEM_AssignerAppuyerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROEM_AssignerAppuyerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.positionDeploiement = self.params[3]
        self._namedParams.positionReplie = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_Appuyer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_Appuyer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Appuyer' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// position mise en oeuvre
]]DEC_Copie_Point_Mission( self._namedParams.positionDeploiement, self.missionPion, "positionDeploiement_" )
        --[[// position replie
]]DEC_Copie_Point_Mission( self._namedParams.positionReplie, self.missionPion, "pointRegroupement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROEM_AssignerRenseignerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROEM_AssignerRenseignerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_RenseignerSur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_RenseignerSur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Renseigner' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Zone à renseigner
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_ROEM_AssignerMettreEnOeuvreA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_ROEM_AssignerMettreEnOeuvreA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.position = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_MettreEnOeuvre" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_ROEM_MettreEnOeuvre" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Mettre en oeuvre' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// position mise en oeuvre
]]DEC_Copie_Point_Mission( self._namedParams.position, self.missionPion, "positionDeploiement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[//=============================================================================
]]--[[// Missions RADINT
]]--[[//=============================================================================
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_RADINT_AssignerRenseignerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_RADINT_AssignerRenseignerA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Creer la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_RADINT_RenseignerSur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_RADINT_RenseignerSur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Renseigner sur' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// ZR (zone de recherche)
]]DEC_Copie_LocalisationDansListeLocalisations_Mission( self._namedParams.zone, self.missionPion, "zonesDeRecherche_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_RENS_RADINT_AssignerMettreEnOeuvreA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_RENS_RADINT_AssignerMettreEnOeuvreA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.position = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_RADINT_MettreEnOeuvre" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_RENS_RADINT_MettreEnOeuvre" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Mettre en oeuvre' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// position mise en oeuvre
]]DEC_Copie_Point_Mission( self._namedParams.position, self.missionPion, "positionDeploiement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]
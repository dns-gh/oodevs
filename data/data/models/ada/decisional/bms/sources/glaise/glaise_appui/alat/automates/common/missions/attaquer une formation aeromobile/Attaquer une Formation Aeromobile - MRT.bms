includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/attaquer une formation aeromobile/Attaquer une Formation Aeromobile - MRT.bms"] = true

local emptyTable = emptyTable

--[[// -----------------------------------------------------------------------------
]]--[[// Attaquer une formation Aeromobile
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile" }, "MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsAttaquer = self.eEtatMissionsAttaquer or eActionEnCours
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeHAH = self.listeHAH or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAH" )
        self.listeTigre = self.listeTigre or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleTigre" )
        self.listeHAPCanons = self.listeHAPCanons or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAC" )
        self.listeHAM = self.listeHAM or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAM" )
        self.listePionsReserve = self.listePionsReserve or {}
        self.listeAttaquer = self.listeAttaquer or {}
        if( ModuleBegins() ) then
            do
                S_Liste_Concatene( self.listeAttaquer, self.listeHAM, self.listeTigre )
                S_Liste_Concatene( self.listeAttaquer, self.listeAttaquer, self.listeHAPCanons )
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listeAttaquer ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
--[[// ROE par défaut pour cette mission + ordre poursuivre
]]                end

                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
--[[// ---------------------------------------------------------------------
]]--[[// 2. Decoupage du fuseau et attribution des missions
]]--[[// ---------------------------------------------------------------------                       
]]        end

         do
            local _continue = true
--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]--[[// Attaquer : controle de creation mission
]]--[[// Attaquer Aeromobile : ordre de creation des missions
]]--[[//-----------------------------------------------------------------------------
]]--[[// 3. Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]--[[//---------------------------------------------------------------------
]]--[[// 3. Validation
]]--[[//---------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsAttaquer == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsAttaquer == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listeAttaquer ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsAttaquer = v[1] end
                    if( not DIA_IsListEmpty( self.listeAttaquer ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe, 1, { ePhase_MRT, self.listeAttaquer, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.unitesAAttaquer_, self._namedParams.mission.ravitaillementDebutMission_, } )
                    end

                    _continue = false
                elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_AttaquerFormationAeromobile, "BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAttaquerUneForamtionAeromobileAListe }

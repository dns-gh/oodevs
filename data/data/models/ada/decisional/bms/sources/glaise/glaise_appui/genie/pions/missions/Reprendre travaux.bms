includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/Reprendre travaux.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// MIS_Pion_GEN_ReprendreTravaux
]]--[[//
]]--[[// Commentaires: refonte 27/10/2006
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_GEN_ReprendreTravaux"
{
    feedbacks = { { { "done_MIS_Pion_GEN_ReprendreTravaux" }, "MIS_Pion_GEN_ReprendreTravaux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_GEN_ReprendreTravaux, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Objet_Pion_GEN_ReprendreTravaux", { "done_BEH_Objet_Pion_GEN_ReprendreTravaux" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.mission.travail_ ) ) then
            Halt( self )
            do return end
        end

        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.ptObst = self.ptObst or nil
        if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "MIS_Pion_GEN_ReprendreMissionConstruction" )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                self.ptObst = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( DEC_ConnaissanceObjet_Localisation( self._namedParams.mission.travail_ ) )
                if( self.ptObst == nil ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    _continue = false
                --[[// Progression 
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.ptObst ) < 800 ) then
                        self.ePhaseMission = eRealiserObstacle
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptObst, eProgressionReco, eTypeItiMouvement, } )
                    _continue = false
                --[[// Reprise des travaux
]]                cases_switch_1[2] = true
elseif switch_1 == eRealiserObstacle then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    --[[// Si sauvegarde
]]if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.ptObst ) > 800 ) then
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1.1, { self.ptObst, eProgressionReco, eTypeItiMouvement, } )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.ePhaseMission = eFinMission
                                                        do return end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                            DEC_RC( eRC_MissionImpossible )
                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.BEH_Objet_Pion_GEN_ReprendreTravaux, 1, { self._namedParams.mission.travail_, } )
self.done_BEH_Objet_Pion_GEN_ReprendreTravaux = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Fin de la mission
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, emptyTable )
                    _continue = false
                                cases_switch_1[4] = true
                end
            end

    end,

--[[// ******************************************************************************
]]--[[// BEH_Objet_Pion_GEN_ReprendreTravaux( T_ConnaissanceObjet objMission )
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]}

node "BEH_Objet_Pion_GEN_ReprendreTravaux"
{
    feedbacks = { { { "done_BEH_Objet_Pion_GEN_ReprendreTravaux" }, "BEH_Objet_Pion_GEN_ReprendreTravaux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Objet_Pion_GEN_ReprendreTravaux, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Obj_Pion_GEN_ReprendreTravaux", { "done_ACT_Obj_Pion_GEN_ReprendreTravaux" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Pion_GEN_AttendreRenforcementPour", { "done_ACT_Pion_GEN_AttendreRenforcementPour" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obj = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        --[[//-----------------------------------------------------------------
]]--[[// Validité de l'objet
]]--[[//-----------------------------------------------------------------
]]if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.obj ) ) then
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------
]]--[[// Organisation chantier, verification renfort, brechage et 
]]--[[// desorganisation chantier
]]--[[//-----------------------------------------------------------------
]]local eType = DEC_ConnaissanceObjet_Type( self._namedParams.obj )
        if( DEC_Agent_PeutConstruireObjet( eType ) ) then
            do
                if( self.eEtat == eActionEffectuee ) then
                    do
                        self.eEtat = eActionEnCours
                                                do
                                                        self:SendFeedback( eActionEffectuee )
                            do return end

                        end

                    end
                end

                Activate( self.activations.ACT_Obj_Pion_GEN_ReprendreTravaux, 1, { self._namedParams.obj, } )
self.done_ACT_Obj_Pion_GEN_ReprendreTravaux = function( self, _, v ) self.eEtat = v[1] end
            end
        else
do
                Activate( self.activations.ACT_Dep_SePoster, 1, emptyTable )
                Activate( self.activations.ACT_Pion_GEN_AttendreRenforcementPour, 1, { self._namedParams.obj, } )
            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_ReprendreTravaux = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_ReprendreTravaux, "ACT_Obj_Pion_GEN_ReprendreTravaux", nodes.ACT_Obj_Pion_GEN_ReprendreTravaux }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_ReprendreTravaux, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_ReprendreTravaux, "ACT_Pion_GEN_AttendreRenforcementPour", nodes.ACT_Pion_GEN_AttendreRenforcementPour }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReprendreTravaux, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReprendreTravaux, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReprendreTravaux, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReprendreTravaux, "BEH_Objet_Pion_GEN_ReprendreTravaux", nodes.BEH_Objet_Pion_GEN_ReprendreTravaux }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ReprendreTravaux, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

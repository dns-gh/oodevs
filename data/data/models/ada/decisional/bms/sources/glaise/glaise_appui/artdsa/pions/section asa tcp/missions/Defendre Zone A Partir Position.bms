includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artdsa/pions/section asa tcp/missions/Defendre Zone A Partir Position.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Mission defendre zone
]]--[[// 
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition"
{
    feedbacks = { { { "done_MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition" }, "MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Maj_Pion_PasserEnTirLibre", { "done_ACT_Maj_Pion_PasserEnTirLibre" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "ACT_Maj_Pions_ObjectifCourant", { "done_ACT_Maj_Pions_ObjectifCourant" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "BEH_Dep_Pion_ASA_RejoindrePoint", { "done_BEH_Dep_Pion_ASA_RejoindrePoint" } },
        { "ACT_Dep_SePosterFaceADir", { "done_ACT_Dep_SePosterFaceADir" } },
        { "BEH_Manoeuvre_Pion_ASA_SeDeployer", { "done_BEH_Manoeuvre_Pion_ASA_SeDeployer" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Eni_Pion_ASA_GererEniDefendreZone", { "done_BEH_Eni_Pion_ASA_GererEniDefendreZone" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        --[[//variables persistantes
]]self.eEtat = self.eEtat or eActionEnCours
        self.eEtatODC = self.eEtatODC or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        --[[//debut mission
]]Activate( self.activations.ACT_Info_Trace, 1, { "Mission ASA : Defendre Zone A Partir d'Une Position", } )
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, {} )
                end

                myself.typeDeploiement_ = self._namedParams.mission.modeDeploiement_
            end
        end

        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eIdentifie, M_DOCTRINE_PION_ASA_PH(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_PreparationMission, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    self.ePhase = eRejoindre
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eRejoindre then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eSurveiller
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    Activate( self.activations.ACT_Maj_Pions_ObjectifCourant, 1, { self._namedParams.mission.pointDeDeploiement_, } )
                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.mission.pointDeDeploiement_, } )
                    Activate( self.activations.BEH_Dep_Pion_ASA_RejoindrePoint, 1, { self._namedParams.mission.pointDeDeploiement_, eProgressionDefaut, eTypeItiMouvement, 0, 100, 0.05, 0.08, } )
self.done_BEH_Dep_Pion_ASA_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eSurveiller then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnSurveillance, } )
                    Activate( self.activations.ACT_Dep_SePosterFaceADir, 1, { DEC_GetDirectionDanger( self._namedParams.mission ), } )
                    Activate( self.activations.BEH_Manoeuvre_Pion_ASA_SeDeployer, 1, { 0, } )
                    if( DEC_Agent_EstInstalle() and ( F_Pion_GeteEtatRadar( myself ) == eEtatRadar_Ouvert ) and F_Pion_GeteConsigneTir( myself ) == eEtatROE_TirLibre ) then
                        do
                            Activate( self.activations.ACT_RC, 1, { eRC_PretAuTir, } )
                            Activate( self.activations.BEH_Eni_Pion_ASA_GererEniDefendreZone, 1, { self._namedParams.mission.zone_, } )
                        end
                    end

                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            F_Pion_SetobjectifEsquive( myself, nil )
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                    _continue = false
                                cases_switch_1[4] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Maj_Pions_ObjectifCourant", nodes.ACT_Maj_Pions_ObjectifCourant }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "BEH_Dep_Pion_ASA_RejoindrePoint", nodes.BEH_Dep_Pion_ASA_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_Dep_SePosterFaceADir", nodes.ACT_Dep_SePosterFaceADir }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "BEH_Manoeuvre_Pion_ASA_SeDeployer", nodes.BEH_Manoeuvre_Pion_ASA_SeDeployer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition, "BEH_Eni_Pion_ASA_GererEniDefendreZone", nodes.BEH_Eni_Pion_ASA_GererEniDefendreZone }

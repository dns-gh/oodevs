includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artdsa/automates/section asa tcp/missions/defendre zone/Defendre Zone - CDT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate ASA Defendre Zone
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ASA_MISTRAL_DefendreZone"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ASA_MISTRAL_DefendreZone" }, "MIS_Automate_CDT_ASA_MISTRAL_DefendreZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ASA_MISTRAL_DefendreZone, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreZoneAListe", { "done_BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreZoneAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.barycentreLocalisation = self.barycentreLocalisation or S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
        self.pointDevantDispositif = self.pointDevantDispositif or DEC_Geometrie_PositionTranslateDir( self.barycentreLocalisation, self._namedParams.mission.directionEnnemi_, M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS() )
        self.listePositionsPourSectionsRestantes = self.listePositionsPourSectionsRestantes or DEC_Geometrie_CreerListePoints()
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.selPions = self.selPions or {}
        self.listeDefendreZone = self.listeDefendreZone or {}
        self.listeSectionsRestantes = self.listeSectionsRestantes or {}
        Activate( self.activations.ACT_Info_Trace, 1, { "Mission Sgpt ASA Mistral : Defendre Zone", } )
        self.selPions = {}
        self.selPions = DEC_Automate_PionsSansPC()
        self.listeDefendreZone = {}
        self.listeDefendreZone = S_Cherche_Automate_Filtre_TypeMission( self.selPions, "T_Mission_Pion_ASA_MISTRAL_DefendreZoneAPartirPosition" )
        self.listeSectionsRestantes = S_Cherche_Automate_Filtre_PionNonDansListe( self.selPions, self.listeDefendreZone )
        if( not DIA_IsListEmpty( self.listeSectionsRestantes ) ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.mission.modeDeploiement_
                        if switch_1 == deploiementNasseTroisSections
                        or switch_1 == deploiementNasseQuatreSections
                        or switch_1 == deploiementDoubleRideau then
                                                    DEC_ListePoints_PushBack( self.listePositionsPourSectionsRestantes, self.barycentreLocalisation )
                            _continue = false
                        elseif switch_1 == deploiementOmnidirectionnelEnCarreAutourZone
                        or switch_1 == deploiementOmnidirectionnelEnTriangleAutourZone then
                                                    DEC_ListePoints_PushBack( self.listePositionsPourSectionsRestantes, self.pointDevantDispositif )
                            _continue = false
                                                end
                    end

                Activate( self.activations.BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreZoneAListe, 1, { ePhase_CDT, self.listeSectionsRestantes, self.listePositionsPourSectionsRestantes, self._namedParams.mission.zone_, eEtatDeploiement_omnidirectionnel, } )
            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ASA_MISTRAL_DefendreZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ASA_MISTRAL_DefendreZone, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ASA_MISTRAL_DefendreZone, "BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreZoneAListe", nodes.BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreZoneAListe }

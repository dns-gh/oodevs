includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artfdp/pions/common/missions/ReconnaitreZoneDeploiement.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Pions/Common/Missions/ReconnaitreZoneDeploiement.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 10:08 $
]]--[[// $Revision: 29 $
]]--[[// $Workfile: ReconnaitreZoneDeploiement.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

node "BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission"
{
    feedbacks = { { { "done_BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission" }, "BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement", { "done_BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obs_EtablirVisionFaceADir", { "done_ACT_Obs_EtablirVisionFaceADir" } },
        { "BEH_Pion_ASS_Installer_ZoneImplantationCanon", { "done_BEH_Pion_ASS_Installer_ZoneImplantationCanon" } },
        { "BEH_Pion_ASS_Installer_ZoneImplantationLRM", { "done_BEH_Pion_ASS_Installer_ZoneImplantationLRM" } },
        { "BEH_Pion_ASS_Installer_ZoneImplantationSimple", { "done_BEH_Pion_ASS_Installer_ZoneImplantationSimple" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eType_ZoneImplantation = self.params[1]
        self._namedParams.rDelaiPreparation = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        self.eActionReco = self.eActionReco or eActionEnCours
        self.ptRepli = self.ptRepli or nil
        if( ModuleBegins() ) then
            do
                self.ptRepli = S_Geometrie_PtInvDirDangereuse( self.mission.positionDeploiement_, self.mission.dirDangereuse_, 500 )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Preparation de la mission
]]--[[//-----------------------------------------------------------------------------	        
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                Activate( self.activations.ACT_RC, 1, { eRC_DebutMission, } )
                                self.ePhase = eRejoindre
                                                                do return end

                            end

                        end
--[[// action ACT_RC_PreparationMission( rDelaiPreparation );
]]                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.2, { eEtatPhaseMission_PreparationMission, } )
                    Activate( self.activations.ACT_Misc_Delai, 1, { 1, self._namedParams.rDelaiPreparation, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                --[[// ------------------------------------------------------------------------
]]--[[// Rejoindre la position du site
]]--[[// ------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eRejoindre then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                            self.ePhase = eDeployer
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// On fait une reconnaissance de la position lorsque l'on arrive
]]--[[// a proximite
]]if( self.eActionReco == eActionEnCours and S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.mission.positionDeploiement_, 800 ) ) then
                        Activate( self.activations.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement, 1.1, { self.mission.positionDeploiement_, } )
self.done_BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement = function( self, _, v ) self.eActionReco = v[1] end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.mission.positionDeploiement_, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eDeployer then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = eFinMission
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ReconnaissanceLocalisation, } )
                    --[[// On s'oriente vers la direction dangereuse
]]Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { self.mission.dirDangereuse_, } )
                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eType_ZoneImplantation
                        local cases_switch_2 = {}
                            if switch_2 == eTypeObjectZoneImplantationCanon then
                                Activate( self.activations.BEH_Pion_ASS_Installer_ZoneImplantationCanon, 1.1, { self.mission.positionDeploiement_, self._namedParams.eType_ZoneImplantation, } )
                                Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptRepli, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                                _continue = false
                                                        cases_switch_2[1] = true
elseif switch_2 == eTypeObjectZoneImplantationLRM then
                                Activate( self.activations.BEH_Pion_ASS_Installer_ZoneImplantationLRM, 1, { self.mission.positionDeploiement_, self._namedParams.eType_ZoneImplantation, } )
self.done_BEH_Pion_ASS_Installer_ZoneImplantationLRM = function( self, _, v ) self.eAction = v[1] end
                                _continue = false
                                                        cases_switch_2[2] = true

                            else
                                Activate( self.activations.BEH_Pion_ASS_Installer_ZoneImplantationSimple, 1.1, { self.mission.positionDeploiement_, self._namedParams.eType_ZoneImplantation, } )
                                Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptRepli, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                                                        end
                        end

                    _continue = false
                --[[// ------------------------------------------------------------------------
]]--[[//  Fin de mission --> rejoindre plot munition
]]--[[// ------------------------------------------------------------------------
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_FinMission ) then
                        do
                            DEC_FinMission()
                                                        self:SendFeedback( eActionEffectuee )
                            Halt( self )
                            do return end

                        end
                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
            end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 17/03/2005 18:23
]]--[[// Installe les zone de deploiement 
]]--[[//		- Mortier
]]--[[//		- COBRA
]]--[[// ============================================================================
]]}

node "BEH_Pion_ASS_Installer_ZoneImplantationSimple"
{
    feedbacks = { { { "done_BEH_Pion_ASS_Installer_ZoneImplantationSimple" }, "BEH_Pion_ASS_Installer_ZoneImplantationSimple" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_ASS_Installer_ZoneImplantationSimple, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_Obj_Pion_ASS_RealiserObjet", { "done_ACT_Obj_Pion_ASS_RealiserObjet" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptInstallation = self.params[1]
        self._namedParams.eType_ZoneImplantation = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.locInstallation = self.locInstallation or nil
        self.eActionObj = self.eActionObj or eActionEnCours
        if( ModuleBegins() ) then
            self.locInstallation = DEC_Geometrie_ConvertirPointEnLocalisation( self._namedParams.ptInstallation )
        end

        if( self.eActionObj ~= eActionEnCours ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        local eNiveauInstallation = DEC_Agent_NiveauInstallation()
        if( eNiveauInstallation_Poste == eNiveauInstallation or eNiveauInstallation_PosteAmenage == eNiveauInstallation ) then
            do
                if( self.eActionObj == eActionEnCours ) then
                    do
                        Activate( self.activations.ACT_RC, 1, { eRC_DebutTravaux, } )
                        Activate( self.activations.ACT_Obj_Pion_ASS_RealiserObjet, 1, { self._namedParams.eType_ZoneImplantation, self.locInstallation, } )
self.done_ACT_Obj_Pion_ASS_RealiserObjet = function( self, _, v ) self.eActionObj = v[1] end
                    end
                end

            end
        else
            Activate( self.activations.ACT_Dep_SePoster, 1, {} )
        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 17/03/2005 18:23
]]--[[// Installe les zone de deploiement Canon
]]--[[// ============================================================================
]]}

node "BEH_Pion_ASS_Installer_ZoneImplantationCanon"
{
    feedbacks = { { { "done_BEH_Pion_ASS_Installer_ZoneImplantationCanon" }, "BEH_Pion_ASS_Installer_ZoneImplantationCanon" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_ASS_Installer_ZoneImplantationCanon, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_ASS_RealiserObjet", { "done_ACT_Obj_Pion_ASS_RealiserObjet" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptInstallation = self.params[1]
        self._namedParams.eType_ZoneImplantation = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.locInstallation_1 = self.locInstallation_1 or nil
        self.locInstallation_2 = self.locInstallation_2 or nil
        self.eActionObj1 = self.eActionObj1 or eActionEnCours
        self.eActionObj2 = self.eActionObj2 or eActionEnCours
        if( ModuleBegins() ) then
            do
                S_Geometrie_CreerPositionTir_Canon( self._namedParams.ptInstallation, 750, self.locInstallation_1, self.locInstallation_2 )
            end
        end

        if( self.eActionObj1 ~= eActionEnCours and self.eActionObj2 ~= eActionEnCours ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        if( self.locInstallation_1 == 0 ) then
            self.eActionObj1 == eActionImpossible
        end

        if( self.locInstallation_2 == 0 ) then
            self.eActionObj2 == eActionImpossible
        end

        local eNiveauInstallation = DEC_Agent_NiveauInstallation()
        if( eNiveauInstallation_Poste == eNiveauInstallation or eNiveauInstallation_PosteAmenage == eNiveauInstallation ) then
            do
                if( self.eActionObj1 == eActionEnCours ) then
                    Activate( self.activations.ACT_Obj_Pion_ASS_RealiserObjet, 1, { self._namedParams.eType_ZoneImplantation, self.locInstallation_1, } )
self.done_ACT_Obj_Pion_ASS_RealiserObjet = function( self, _, v ) self.eActionObj1 = v[1] end
                end

                if( self.eActionObj2 == eActionEnCours ) then
                    Activate( self.activations.ACT_Obj_Pion_ASS_RealiserObjet, 1, { self._namedParams.eType_ZoneImplantation, self.locInstallation_2, } )
self.done_ACT_Obj_Pion_ASS_RealiserObjet = function( self, _, v ) self.eActionObj2 = v[1] end
                end

            end
        else
            Activate( self.activations.ACT_Dep_SePoster, 1, {} )
        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 17/03/2005 18:23
]]--[[// Installe les zone de deploiement LRM
]]--[[// ============================================================================
]]}

node "BEH_Pion_ASS_Installer_ZoneImplantationLRM"
{
    feedbacks = { { { "done_BEH_Pion_ASS_Installer_ZoneImplantationLRM" }, "BEH_Pion_ASS_Installer_ZoneImplantationLRM" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pion_ASS_Installer_ZoneImplantationLRM, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_ASS_RealiserObjet", { "done_ACT_Obj_Pion_ASS_RealiserObjet" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptInstallation = self.params[1]
        self._namedParams.eType_ZoneImplantation = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.lstPositions = self.lstPositions or {}
        self.locInstallation = self.locInstallation or nil
        self.eActionObj = self.eActionObj or eActionEnCours
        self.rIt = self.rIt or 0
        if( ModuleBegins() ) then
            do
                self.lstPositions = S_Geometrie_CreerPositionTir_LRM( self._namedParams.ptInstallation, 750 )
                --[[// Recupere la premiere position d'installation
]]if( DEC_ListePoints_Size( self.lstPositions ) == 0 ) then
                    self:SendFeedback( eActionEffectuee )
                    do return end
                end

                local ptExtrait = DEC_ListePoints_GetAt( self.lstPositions, self.rIt )
                self.locInstallation = DEC_Geometrie_ConvertirPointEnLocalisation( ptExtrait )
            end
        end

        if( self.eActionObj ~= eActionEnCours ) then
            do
                                self.rIt = self.rIt + 1
                if( self.rIt < DEC_ListePoints_Size( self.lstPositions ) ) then
                    do
                        local ptExtrait = DEC_ListePoints_GetAt( self.lstPositions, self.rIt )
                        self.locInstallation = DEC_Geometrie_ConvertirPointEnLocalisation( ptExtrait )
                        self.eActionObj = eActionEnCours
                    end
                else
                    self:SendFeedback( eActionEffectuee )
                    do return end
                end

            end
        end

        local eNiveauInstallation = DEC_Agent_NiveauInstallation()
        if( eNiveauInstallation_Poste == eNiveauInstallation or eNiveauInstallation_PosteAmenage == eNiveauInstallation ) then
            do
                Activate( self.activations.ACT_Obj_Pion_ASS_RealiserObjet, 1, { self._namedParams.eType_ZoneImplantation, self.locInstallation, } )
self.done_ACT_Obj_Pion_ASS_RealiserObjet = function( self, _, v ) self.eActionObj = v[1] end
            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationCanon, "ACT_Obj_Pion_ASS_RealiserObjet", nodes.ACT_Obj_Pion_ASS_RealiserObjet }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationCanon, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationLRM, "ACT_Obj_Pion_ASS_RealiserObjet", nodes.ACT_Obj_Pion_ASS_RealiserObjet }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationSimple, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationSimple, "ACT_Obj_Pion_ASS_RealiserObjet", nodes.ACT_Obj_Pion_ASS_RealiserObjet }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_Installer_ZoneImplantationSimple, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement", nodes.BEH_Obs_Pion_ASS_Reconnaissance_PositionDeploiement }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "BEH_Pion_ASS_Installer_ZoneImplantationCanon", nodes.BEH_Pion_ASS_Installer_ZoneImplantationCanon }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "BEH_Pion_ASS_Installer_ZoneImplantationLRM", nodes.BEH_Pion_ASS_Installer_ZoneImplantationLRM }
connections[ #connections + 1 ] = { nodes.BEH_Pion_ASS_ReconnaitreZoneDeploiement_Mission, "BEH_Pion_ASS_Installer_ZoneImplantationSimple", nodes.BEH_Pion_ASS_Installer_ZoneImplantationSimple }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/log/pions/missions/TrierEtTraiterBlesses.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_LOG_TrierEtTraiterBlesses
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Review MIA
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_TrierEtTraiterBlesses"
{
    feedbacks = { { { "done_MIS_Pion_LOG_TrierEtTraiterBlesses" }, "MIS_Pion_LOG_TrierEtTraiterBlesses" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_LOG_TrierEtTraiterBlesses, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Pion_Log_Traiter", { "done_BEH_Pion_Log_Traiter" } },
        { "BEH_Pion_Log_Trier", { "done_BEH_Pion_Log_Trier" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        if( ModuleBegins() ) then
            do
                DEC_Trace( "MIS_Pion_LOG_TrierEtTraiterBlesses" )
                DEC_SetMission( myself, self._namedParams.mis )
                if( ( self._namedParams.mis.blessuresTraitees_ ~= 0 and self._namedParams.mis.blessuresTraitees_ ~= nil ) ) then
                    DEC_Sante_ChangerPriorites( self._namedParams.mis.blessuresTraitees_ )
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    --[[// Déploiement sur place
]]if( ( self._namedParams.mis.positionDeploiement_ == 0 or self._namedParams.mis.positionDeploiement_ == nil ) ) then
                        self.ePhaseMission = eDeployer
                    else
                        self.ePhaseMission = eProgresser
                    end

                    _continue = false
                --[[// Progression
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eDeployer
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mis.positionDeploiement_, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Deploiement
]]                cases_switch_1[2] = true
elseif switch_1 == eDeployer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    Activate( self.activations.BEH_Pion_Log_Traiter, 1, {} )
                    Activate( self.activations.BEH_Pion_Log_Trier, 1, {} )
                    _continue = false
                --[[// Fin de la mission (sur ordre)
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_TrierEtTraiterBlesses = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "BEH_Pion_Log_Traiter", nodes.BEH_Pion_Log_Traiter }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "BEH_Pion_Log_Trier", nodes.BEH_Pion_Log_Trier }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_TrierEtTraiterBlesses, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

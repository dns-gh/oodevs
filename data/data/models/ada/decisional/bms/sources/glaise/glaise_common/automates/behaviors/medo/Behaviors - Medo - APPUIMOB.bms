includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/behaviors/medo/Behaviors - Medo - APPUIMOB.bms"] = true

include "Glaise/Glaise_Common/Automates/Actions/Medo/Actions - Medo - APPUIMOB.bms"



--[[// -----------------------------------------------------------------------------
]]--[[// Missions transporter a liste de pions
]]--[[// -----------------------------------------------------------------------------
]]node "BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe"
{
    activations =
    {
        { "BEH_Medo_Automate_LOG_AssignerMissionTransporterA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.listePions = self.params[2]
        self._namedParams.pointEmbarquement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.listeUnitesATransporter = self.params[5]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
            do
                --[[//copie de la liste des pions a transporter
]]local listeCopiePionsATraiter = self._namedParams.listeUnitesATransporter
                local nbPionsParPatrouille = Floor( #( self._namedParams.listeUnitesATransporter ) / #( self._namedParams.listePions ) )
                local pionBuffer = nil
                for _,x in pairs( self._namedParams.listePions or {} ) do
                local _continue = true
                    do
                        --[[//si plus de pion a traiter, ne pas donner de mission pour rien
]]if( ( #( listeCopiePionsATraiter ) == 0 or #( listeCopiePionsATraiter ) == nil ) ) then
                            do return end
                        end

                        local listePionsATransporterBuffer = {}--[[//liste des unites que devra transporter x
]]
                        local i = 0
                        while i < nbPionsParPatrouille do
                            local _continue = true
do
                                pionBuffer = DIA_GetAt( listeCopiePionsATraiter, 0 )
                                DIA_PushBack( listePionsATransporterBuffer, pionBuffer )
                                DIA_Remove( listeCopiePionsATraiter, pionBuffer )
                            end
--[[//si x est le dernier pion de la liste, il embarque tous les pions
]]--[[//non attribués
]]                        i = i + 1
                        end

                        if( DIA_GetAt( self._namedParams.listePions, #( self._namedParams.listePions ) - 1 ) == x ) then
                            do
                                for _,y in pairs( listeCopiePionsATraiter or {} ) do
                                local _continue = true
                                    DIA_PushBack( listePionsATransporterBuffer, y )

                                end

                            end
                        end

                        StartActivateOverride( self, self.activations.BEH_Medo_Automate_LOG_AssignerMissionTransporterA, 1, { self._namedParams.ePhase, x, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, listePionsATransporterBuffer, } )
                    end

                end

            end
        end

    end,

--[[// -----------------------------------------------------------------------------
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]}

node "BEH_Medo_Automate_LOG_AssignerMissionTransporterA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_LOG_AssignerTransporterUniteA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointEmbarquement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.listeUnitesATransporter = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_LOG_AssignerTransporterUniteA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.pointEmbarquement, self._namedParams.pointDebarquement, self._namedParams.listeUnitesATransporter, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_LOG_AssignerMissionTransporterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_LOG_AssignerMissionTransporterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_LOG_AssignerMissionTransporterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_LOG_AssignerMissionTransporterA, "ACT_Mission_Automate_LOG_AssignerTransporterUniteA", nodes.ACT_Mission_Automate_LOG_AssignerTransporterUniteA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_LOG_AssignerMissionsTransporterAListe, "BEH_Medo_Automate_LOG_AssignerMissionTransporterA", nodes.BEH_Medo_Automate_LOG_AssignerMissionTransporterA }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/missions/franchir/MRT - Franchir.bms"] = true

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Missions/Franchir/MRT - Franchir.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 9:45 $
]]--[[// $Revision: 16 $
]]--[[// $Workfile: MRT - Franchir.hal $
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// FaireFranchir
]]--[[//
]]--[[// 
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_Franchir"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_AssignerSeFaireFranchirA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mis )
                DEC_Trace( "$ MIS_Automate_MRT_Franchir : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( DEC_Automate_PionsAvecPC() ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
        Activate( self.activations.BEH_Medo_Automate_AssignerSeFaireFranchirA, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerSeFaireFranchirA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerSeFaireFranchirA"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerFranchir", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.positionArrivee = self.positionArrivee or S_Geometrie_BarycentreZone( self.mission.zoneArrivee_ )
        --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------	
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                local _continue = true
                    do
                        local position = DEC_Geometrie_PositionAleatoireDansCercle( self.positionArrivee, 300 )
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFranchir, 1, { ePhase_MRT, pion, position, self.mission.pontFlottant_, } )
                    end

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_Franchir = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerSeFaireFranchirA, "BEH_Mission_Automate_AssignerFranchir", nodes.BEH_Mission_Automate_AssignerFranchir }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Franchir, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_Franchir, "BEH_Medo_Automate_AssignerSeFaireFranchirA", nodes.BEH_Medo_Automate_AssignerSeFaireFranchirA }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/surveiller/Surveiller - MRT.bms"] = true

local emptyTable = emptyTable

--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate ALAT Surveiller :
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ALAT_Surveiller"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ALAT_Surveiller" }, "MIS_Automate_MRT_ALAT_Surveiller" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ALAT_Surveiller, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsSurveiller = self.eEtatMissionsSurveiller or eActionEnCours
        self.localisationsASurveiller = self.localisationsASurveiller or {}
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listePionsReserve = self.listePionsReserve or {}
        self.listeHAH = self.listeHAH or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAH" )
        self.listeTigre = self.listeTigre or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleTigre" )
        self.listeHAPCanons = self.listeHAPCanons or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAC" )
        self.listeHAM = self.listeHAM or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PatrouilleHAM" )
        self.listeHMLog = self.listeHMLog or S_Cherche_Automate_Filtre_TypePion( self.selPions, "PatrouilleHMLog" )
        self.listeHR = self.listeHR or S_Cherche_Automate_Filtre_TypePion( self.selPions, "PatrouilleHR" )
        self.listePatrouillesPeutFaireMissionSurveiller = self.listePatrouillesPeutFaireMissionSurveiller or {}
        self.listeSurveiller = self.listeSurveiller or {}
        if( ModuleBegins() ) then
            do
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionSurveiller, self.listeHAH, self.listeTigre )
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionSurveiller, self.listePatrouillesPeutFaireMissionSurveiller, self.listeHAPCanons )
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionSurveiller, self.listePatrouillesPeutFaireMissionSurveiller, self.listeHAM )
                S_Liste_Concatene( self.listePatrouillesPeutFaireMissionSurveiller, self.listePatrouillesPeutFaireMissionSurveiller, self.listeHR )
                myself.sPlotsDeRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                DEC_SetMission( myself, self._namedParams.mission )
                --[[// -----------------------------------------------------------------
]]--[[// Vérifier les moyens, determiner les patrouilles qui vont aller 
]]--[[// Surveiller
]]--[[// -----------------------------------------------------------------
]]local nbPionsPouvantSurveiller = #( self.listePatrouillesPeutFaireMissionSurveiller )
                --[[//1 pion de reserve pour 4 qui peuvent Surveiller
]]local nbPionsReserve = nbPionsPouvantSurveiller / 4
                for _,x in pairs( --[[//construction de la liste des pions en reserve
]]self.listePatrouillesPeutFaireMissionSurveiller or emptyTable ) do
                local _continue = true
                    do
                        if( nbPionsReserve <= 0 ) then
                            break
                        end

                        DIA_PushBack( self.listePionsReserve, x )
                                                nbPionsReserve = nbPionsReserve - 1
                    end
--[[//les autres vont faire la mission "Surveiller"
]]--[[//Ceux qui peuvent faire la mission et qui ne sont pas en reserve
]]
                end

                self.listeSurveiller = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePatrouillesPeutFaireMissionSurveiller, self.listePionsReserve )
                if( DIA_IsListEmpty( self.listeSurveiller ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
--[[//decoupage de la zone en autant de sous zones a affecter à chacun
]]--[[//des pions.
]]                end

                self.localisationsASurveiller = S_Geometrie_DecoupeLocalisation( self._namedParams.mission.zone_, #( self.listeSurveiller ), DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                if( DIA_IsListEmpty( self.localisationsASurveiller ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
        end

         do
            local _continue = true
--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]--[[// Surveiller : controle de creation mission
]]--[[// Surveiller : ordre de creation des missions
]]--[[// Heliporter plots de ravitaillements au point de logistique
]]--[[// Les pions de reserve vont au point de log
]]            local switch_1 = self.ePhase
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsSurveiller == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsSurveiller == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listePatrouillesPeutFaireMissionSurveiller ) + #( self.listeHMLog ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsSurveiller = v[1] end
                    if( not DIA_IsListEmpty( self.listeSurveiller ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe, 1, { ePhase_MRT, self.listeSurveiller, self.localisationsASurveiller, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ravitaillementDebutMission_, } )
                    end

                    if( not DIA_IsListEmpty( self.listeHMLog ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe, 1, { ePhase_MRT, self.listeHMLog, self._namedParams.mission.pointLogistique_, self._namedParams.mission.pointLogistique_, self._namedParams.mission.porteeAction_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ravitaillementDebutMission_, } )
                    end

                    if( not DIA_IsListEmpty( self.listePionsReserve ) ) then
                        Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_MRT, self.listePionsReserve, self._namedParams.mission.pointLogistique_, } )
                    end

                    _continue = false
                elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ALAT_Surveiller = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsSurveillerAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsHeliporterPlotsRavitaillementAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ALAT_Surveiller, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/behaviors/medo/Behaviors - Medo - GEN.bms"] = true

include "Glaise/glaise_common/Automates/Actions/Medo/Actions - Medo - GEN.bms"


--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerRenforcerA
]]--[[//
]]--[[// Commentaires: Seules les unités du génie sont supportées par le comportement.
]]--[[//
]]--[[// ****************************************************************************
]]node "BEH_Mission_Automate_GEN_AssignerRenforcerA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerRenforcerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pionEnRenfort = self.params[2]
        self._namedParams.pionARenforcer = self.params[3]
        self._namedParams.PosObs = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerRenforcerA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pionEnRenfort, self._namedParams.pionARenforcer, self._namedParams.PosObs, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerDegagerA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerDegagerA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerDegagerObstacleA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.obstacle = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerDegagerObstacleA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.obstacle, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerContournerA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerContournerA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerContournerObstacleA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.obstacle = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerContournerObstacleA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.obstacle, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA
]]--[[//
]]--[[// Commentaires: Seules les unités du génie sont supportées par le comportement.
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerReconnaitreZoneA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerReconnaitreZoneA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.zone, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA
]]--[[//
]]--[[// Commentaires: Seules les unités du génie sont supportées par le comportement.
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerOuvrirItineraireA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.iti = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerOuvrirItineraireA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.iti, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerRetablirItineraireA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerRetablirItineraireA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerRetablirItineraireA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.iti = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerRetablirItineraireA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.iti, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerReconnaitreSiteA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.site = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerReconnaitreSiteA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.site, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerEquiperExploiterA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerEquiperExploiterA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerEquiperExploiterA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.site = self.params[3]
        self._namedParams.ptRegroupement = self.params[4]
        self._namedParams.eType = self.params[5]
        self._namedParams.eEtatEchelon = self.params[6]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerEquiperExploiterA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pion, self._namedParams.site, self._namedParams.ptRegroupement, self._namedParams.eType, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_AssignerMissionConstruireA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_AssignerMissionConstruireA"
{
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", {} },
        { "ACT_Mission_Automate_ControleCreation_NOK", {} },
        { "ACT_Mission_Automate_ControleCreation_OK", {} },
        { "ACT_Mission_Automate_GEN_AssignerRealiserTravauxA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pionGenie = self.params[2]
        self._namedParams.obstacle = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    activate = function( self )
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_GEN_AssignerRealiserTravauxA, rForce, setmetatable( { self._namedParams.ePhase, self._namedParams.pionGenie, self._namedParams.obstacle, self._namedParams.eEtatEchelon, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCreation = v else rawset( t, k, v ) end end } ) )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerContournerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerContournerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerContournerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerContournerA, "ACT_Mission_Automate_GEN_AssignerContournerObstacleA", nodes.ACT_Mission_Automate_GEN_AssignerContournerObstacleA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerDegagerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerDegagerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerDegagerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerDegagerA, "ACT_Mission_Automate_GEN_AssignerDegagerObstacleA", nodes.ACT_Mission_Automate_GEN_AssignerDegagerObstacleA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerEquiperExploiterA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerEquiperExploiterA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerEquiperExploiterA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerEquiperExploiterA, "ACT_Mission_Automate_GEN_AssignerEquiperExploiterA", nodes.ACT_Mission_Automate_GEN_AssignerEquiperExploiterA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerMissionConstruireA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerMissionConstruireA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerMissionConstruireA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerMissionConstruireA, "ACT_Mission_Automate_GEN_AssignerRealiserTravauxA", nodes.ACT_Mission_Automate_GEN_AssignerRealiserTravauxA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerOuvrirItineraireA, "ACT_Mission_Automate_GEN_AssignerOuvrirItineraireA", nodes.ACT_Mission_Automate_GEN_AssignerOuvrirItineraireA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreSiteA, "ACT_Mission_Automate_GEN_AssignerReconnaitreSiteA", nodes.ACT_Mission_Automate_GEN_AssignerReconnaitreSiteA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerReconnaitreZoneA, "ACT_Mission_Automate_GEN_AssignerReconnaitreZoneA", nodes.ACT_Mission_Automate_GEN_AssignerReconnaitreZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA, "ACT_Mission_Automate_GEN_AssignerRenforcerA", nodes.ACT_Mission_Automate_GEN_AssignerRenforcerA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRetablirItineraireA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRetablirItineraireA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRetablirItineraireA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_AssignerRetablirItineraireA, "ACT_Mission_Automate_GEN_AssignerRetablirItineraireA", nodes.ACT_Mission_Automate_GEN_AssignerRetablirItineraireA }

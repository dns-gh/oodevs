includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/automates/cie blindee/missions/franchir de vive force/Franchir de vive force - CDT.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_GEN_FranchirDeViveForce
]]--[[//
]]--[[// Commentaires: refonte 27/10/06
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_GEN_FranchirDeViveForce"
{
    feedbacks = { { { "done_MIS_Automate_CDT_GEN_FranchirDeViveForce" }, "MIS_Automate_CDT_GEN_FranchirDeViveForce" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_GEN_FranchirDeViveForce, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
        { "BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_", { "done_BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.listeObjets = self.listeObjets or {}
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                --[[// copie 
]]self.listeObjets = S_Obj_TrierListePourContournerObjets( self._namedParams.mission.obstacles_ )
            end
--[[//---------------------------------------------------------------------
]]--[[// Ordre conduite
]]--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )
        --[[//---------------------------------------------------------------------
]]--[[// Vérification des moyens
]]--[[//---------------------------------------------------------------------
]]local listePionsGenie = S_ObtenirPionsOperationnelsFiltre( "SectionGenie" )
        if( #( listePionsGenie ) == 0 ) then
            do
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion Plan d'obstacle et renforcement
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_, 1, { self.listeObjets, self._namedParams.mission.zoneRegroupement_, } )
    end,

    destroy = function( self )
                g_selConnaissanceObs = {}
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_"
{
    feedbacks = { { { "done_BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_" }, "BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementA", { "done_BEH_Mission_Automate_AssignerFaireMouvementA" } },
        { "BEH_Misc_Automate_GEN_GererOuvertureDesObstacles", { "done_BEH_Misc_Automate_GEN_GererOuvertureDesObstacles" } },
        { "BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles", { "done_BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstaclesAFranchir = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// Init --> deplacement vers la zone de regroupement
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                local _continue = true
                    Activate( self.activations.BEH_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )

                end

                                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Gestion construction et renforts
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Misc_Automate_GEN_GererOuvertureDesObstacles, 1, { self._namedParams.obstaclesAFranchir, self._namedParams.zoneRegroupement, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, 1, { self._namedParams.obstaclesAFranchir, self._namedParams.zoneRegroupement, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererOuvertureDesObstacles
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererOuvertureDesObstacles"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererOuvertureDesObstacles" }, "BEH_Misc_Automate_GEN_GererOuvertureDesObstacles" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererOuvertureDesObstacles, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_Gen_AssignerContournerObjetA", { "done_BEH_Mission_Automate_Gen_AssignerContournerObjetA" } },
        { "BEH_Mission_Automate_AssignerDecrocherA", { "done_BEH_Mission_Automate_AssignerDecrocherA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstacles = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        self.listeObjetsABrecher = self.listeObjetsABrecher or {}
        --[[//copie ? --> NLD: oui
]]--[[// JSR : copie membre à membre de la liste, pour contourner un bug causé par la traduction lors d'une affectation directe
]]if( ModuleBegins() ) then
            do
                for _,obj in pairs( self._namedParams.obstacles or {} ) do
                local _continue = true
                    do
                        DIA_PushBack( self.listeObjetsABrecher, obj )
                    end

                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//-------------------------------------------------------------------------
]]        end

        local listePionsGenie = S_Gen_ObtenirSectionsGenieDisponibles()
        for _,pion in pairs( listePionsGenie or {} ) do
        local _continue = true
do
                local objetABrecher = nil
                --[[//-------------------------------------------------------------------------
]]--[[// ...On traite les objets dans l'ordre dans lequel ils ont été rentrés 
]]--[[// dans l'interface 
]]--[[//-------------------------------------------------------------------------
]]if( #( self.listeObjetsABrecher ) ~= 0 ) then
                    objetABrecher = DEC_UserTypeList_GetAt( self.listeObjetsABrecher, 0 )
                end

                if( objetABrecher ~= 0 ) then
                    do
                        Activate( self.activations.BEH_Mission_Automate_Gen_AssignerContournerObjetA, 1, { pion, objetABrecher, } )
                        --[[// T_ConnaissanceObjet traité
]]DEC_UserTypeList_Remove( self.listeObjetsABrecher, objetABrecher )
                    end
                else
do
                        --[[// cast
]]local section = pion
                        --[[// plus d'objets à traiter
]]if( F_Pion_GeteEtatPhaseMission( section ) == eEtatPhaseMission_FinMission ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pion, self.positionRegroupement, eEtatEchelon_Second, } )
                        end

                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// behavior BEH_Mission_Automate_Gen_AssignerContournerObjetA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_Gen_AssignerContournerObjetA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_Gen_AssignerContournerObjetA" }, "BEH_Mission_Automate_Gen_AssignerContournerObjetA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_Gen_AssignerContournerObjetA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerContournerA", { "done_BEH_Mission_Automate_GEN_AssignerContournerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objet = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Validité
]]if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.objet ) ) then
            Halt( self )
            do return end
        end

        self.genObs = self.genObs or DEC_CreerDIAThing( "T_ConnaissanceObjet_local" )
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// Propriétés de l'objet à brecher  --> reference pour renforcement
]]self.genObs:Setobstacle_( self._namedParams.objet )
                self.genObs:Setpion_( self._namedParams.pion )
                --[[// init plus tard
]]self.genObs:SetbEstRenforce_( false )
                --[[// init plus tard
]]self.genObs:SetpionRenforcement_( nil )
                DIA_PushFront( g_selConnaissanceObs, self.genObs )
            end
--[[//-------------------------------------------------------------------------
]]--[[// Assignation de la mission
]]--[[//-------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Mission_Automate_GEN_AssignerContournerA, 1, { ePhase_CDT, self._namedParams.pion, self._namedParams.objet, eEtatEchelon_Premier, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles" }, "BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, {value} ) end,
    activations =
    {
        { "BEH_Objet_Automate_GEN_VerifierRenfortPourContournerObjets", { "done_BEH_Objet_Automate_GEN_VerifierRenfortPourContournerObjets" } },
        { "BEH_Misc_Automate_GEN_GererRenforcementObstacle", { "done_BEH_Misc_Automate_GEN_GererRenforcementObstacle" } },
        { "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle", { "done_BEH_Misc_Automate_GEN_GererFinRenforcementObstacle" } },
        { "BEH_Mission_Automate_AssignerDecrocherA", { "done_BEH_Mission_Automate_AssignerDecrocherA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obstaclesAFranchir = self.params[1]
        self._namedParams.zoneRegroupement = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.positionRegroupement = self.positionRegroupement or S_Geometrie_BarycentreZone( self._namedParams.zoneRegroupement )
        --[[//-------------------------------------------------------------------------
]]--[[// CR sur renforcement 
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Objet_Automate_GEN_VerifierRenfortPourContournerObjets, 1, { self._namedParams.obstaclesAFranchir, } )
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les T_ConnaissanceObjet_local --> Assignation renforcement
]]--[[//-------------------------------------------------------------------------
]]g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objetABrecher = x
                local eValide = nil--[[// Si besoin de renforcement
]]
                if( not DEC_Automate_PionPeutConstruireContournementObjet( objetABrecher:Getpion_(), objetABrecher:Getobstacle_() ) ) then
                    Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstacle, 1, { objetABrecher, } )
                end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Rendre dispo les renforts si fin constrcution
]]--[[//-------------------------------------------------------------------------
]]
        end

        for _,x in pairs( g_selConnaissanceObs or {} ) do
        local _continue = true
do
                local objetABrecher = x
                Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementObstacle, 1, { objetABrecher, } )
            end
--[[//-------------------------------------------------------------------------
]]--[[// Decrochage en fin de mission
]]--[[//-------------------------------------------------------------------------
]]
        end

        if( DIA_IsListEmpty( S_Obj_ListeObjetsNonContournes( self._namedParams.obstaclesAFranchir ) ) ) then
            do
                local listeGroupes = S_Gen_ObtenirGroupeGenie()
                for _,pion in pairs( listeGroupes or {} ) do
                local _continue = true
                    do
                        --[[// cast
]]local groupe = pion
                        if( F_Pion_GeteEtatPhaseMission( groupe ) == eEtatPhaseMission_FinMission ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, groupe, self.positionRegroupement, eEtatEchelon_Second, } )
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererFinRenforcementObstacle" }, "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererFinRenforcementObstacle, {value} ) end,
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour", { "done_BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetABrecher = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Sécurité
]]if( self._namedParams.objetABrecher:GetpionRenforcement_() == 0 or self._namedParams.objetABrecher:Getpion_() == 0 ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Rendre le renforcement dispo si le pion liés à l'objet a fini sa mission
]]--[[//------------------------------------------------------------------------- 
]]if( F_Pion_GeteEtatPhaseMission( self._namedParams.objetABrecher:Getpion_() ) == eEtatPhaseMission_FinMission ) then
            --[[// --> REMISE A DIPSOSITION
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour, 1, { self._namedParams.objetABrecher:GetpionRenforcement_(), self._namedParams.objetABrecher, } )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour" }, "BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Interrompre", { "done_ACT_Ordre_Automate_Interrompre" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.objetABrecher = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Remise a disposition de " .. DEC_GetSzName( self._namedParams.pion ) )
                Activate( self.activations.ACT_Ordre_Automate_Interrompre, 1, { self._namedParams.pion, } )
                --[[// --> REMISE A DIPSOSITION
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Second )
                DIA_Remove( g_selConnaissanceObs, self._namedParams.objetABrecher )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementObstacle"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererRenforcementObstacle" }, "BEH_Misc_Automate_GEN_GererRenforcementObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererRenforcementObstacle, {value} ) end,
    activations =
    {
        { "BEH_Misc_Automate_GEN_GererRenforcementObstaclePour", { "done_BEH_Misc_Automate_GEN_GererRenforcementObstaclePour" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetABrecher = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Renforcement déjà assigné
]]if( self._namedParams.objetABrecher:GetpionRenforcement_() ~= nil or not DEC_ConnaissanceObjet_EstValide( self._namedParams.objetABrecher:Getobstacle_() ) ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// selection des différents renforts possibles
]]--[[//-------------------------------------------------------------------------
]]local selPAASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupePAA" )
        local selMLFSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeMLF" )
        local selEFASub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeEFA" )
        local selPFMSub = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionPFM" )
        local selSectionTravaux = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionTravaux" )
        local selGroupeEBG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeEBG" )
        local selGroupeMPG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeMPG" )
        local selGroupeDISP = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeDISP" )
        local selSectionSOUVIM = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionSOUVIM" )
        local selGroupeMFRD = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeMFRD" )
        local selGroupeOT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeOT" )
        local selSectionDeminageLourd = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionDeminageLourd" )
        local selGroupeMADEZ = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeMADEZ" )
        local selGroupeMATS = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeMATS" )
        local selGroupePAT = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupePAT" )
        local selGroupeEnfouisseur = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeEnfouisseur" )
        local selGroupeEnergie = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeEnergie" )
        local selGroupeEquipementPoser = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "GroupeEquipementPoser" )
        local selSectionEquipementPlage = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionEquipementPlage" )
        local selSectionEau = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "SectionEau" )
        local selDLRG = S_Misc_Automate_GEN_ObtenirRenfortsDisponibles( "DLRG" )
        --[[//-------------------------------------------------------------------------
]]--[[// Traiter d'éventuels renforts pour construire l'objet
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selPAASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selMLFSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selEFASub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selPFMSub, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selSectionTravaux, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeEBG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeMPG, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeDISP, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selSectionSOUVIM, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeMFRD, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeOT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selSectionDeminageLourd, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeMADEZ, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeMATS, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupePAT, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeEnfouisseur, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeEnergie, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selGroupeEquipementPoser, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selSectionEquipementPlage, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selSectionEau, } )
        Activate( self.activations.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, 1, { self._namedParams.objetABrecher, selDLRG, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Misc_Automate_GEN_GererRenforcementObstaclePour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Misc_Automate_GEN_GererRenforcementObstaclePour"
{
    feedbacks = { { { "done_BEH_Misc_Automate_GEN_GererRenforcementObstaclePour" }, "BEH_Misc_Automate_GEN_GererRenforcementObstaclePour" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_GEN_RenforcerRepObjet", { "done_BEH_Mission_Automate_GEN_RenforcerRepObjet" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objetABrecher = self.params[1]
        self._namedParams.listePionsRenforcement = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Iteration sur les pions en renforcement
]]--[[//-------------------------------------------------------------------------
]]self._namedParams.listePionsRenforcement or {} ) do
        local _continue = true
do
                local pionRenfort = x
                local eValide = nil
                if( DEC_Automate_PionPeutConstruireContournementObjet( pionRenfort, self._namedParams.objetABrecher:Getobstacle_() ) ) then
                    Activate( self.activations.BEH_Mission_Automate_GEN_RenforcerRepObjet, 1, { self._namedParams.objetABrecher, pionRenfort, self._namedParams.objetABrecher:Getpion_(), DEC_ConnaissanceObjet_Localisation( self._namedParams.objetABrecher:Getobstacle_() ), } )
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_GEN_RenforcerRepObjet
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_GEN_RenforcerRepObjet"
{
    feedbacks = { { { "done_BEH_Mission_Automate_GEN_RenforcerRepObjet" }, "BEH_Mission_Automate_GEN_RenforcerRepObjet" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_GEN_RenforcerRepObjet, {value} ) end,
    instances =
    {
        max = 1--[[// tres important
]],
        boost = 1.01--[[// tres important
]],
    },

    activations =
    {
        { "BEH_Mission_Automate_GEN_AssignerRenforcerA", { "done_BEH_Mission_Automate_GEN_AssignerRenforcerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objet = self.params[1]
        self._namedParams.pionEnRenfort = self.params[2]
        self._namedParams.pionARenforcer = self.params[3]
        self._namedParams.position = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-------------------------------------------------------------------------
]]--[[// Assignation
]]--[[//-------------------------------------------------------------------------
]]self._namedParams.objet:SetpionRenforcement_( self._namedParams.pionEnRenfort )
        --[[// Pion renforcement
]]--[[// Pion à renforcer
]]--[[// Localisation
]]Activate( self.activations.BEH_Mission_Automate_GEN_AssignerRenforcerA, 1, { ePhase_CDT, self._namedParams.pionEnRenfort, self._namedParams.pionARenforcer, self._namedParams.position, eEtatEchelon_Premier, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_GEN_FranchirDeViveForce = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour, "ACT_Ordre_Automate_Interrompre", nodes.ACT_Ordre_Automate_Interrompre }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererFinRenforcementObstacle, "BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementObjetPour }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererOuvertureDesObstacles, "BEH_Mission_Automate_Gen_AssignerContournerObjetA", nodes.BEH_Mission_Automate_Gen_AssignerContournerObjetA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererOuvertureDesObstacles, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementObstacle, "BEH_Misc_Automate_GEN_GererRenforcementObstaclePour", nodes.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementObstaclePour, "BEH_Mission_Automate_GEN_RenforcerRepObjet", nodes.BEH_Mission_Automate_GEN_RenforcerRepObjet }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, "BEH_Objet_Automate_GEN_VerifierRenfortPourContournerObjets", nodes.BEH_Objet_Automate_GEN_VerifierRenfortPourContournerObjets }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, "BEH_Misc_Automate_GEN_GererRenforcementObstacle", nodes.BEH_Misc_Automate_GEN_GererRenforcementObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, "BEH_Misc_Automate_GEN_GererFinRenforcementObstacle", nodes.BEH_Misc_Automate_GEN_GererFinRenforcementObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_, "BEH_Mission_Automate_AssignerFaireMouvementA", nodes.BEH_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_, "BEH_Misc_Automate_GEN_GererOuvertureDesObstacles", nodes.BEH_Misc_Automate_GEN_GererOuvertureDesObstacles }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_, "BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles", nodes.BEH_Misc_Automate_GEN_GererRenforcementsPourContournerObstacles }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_GEN_RenforcerRepObjet, "BEH_Mission_Automate_GEN_AssignerRenforcerA", nodes.BEH_Mission_Automate_GEN_AssignerRenforcerA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_Gen_AssignerContournerObjetA, "BEH_Mission_Automate_GEN_AssignerContournerA", nodes.BEH_Mission_Automate_GEN_AssignerContournerA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_FranchirDeViveForce, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_FranchirDeViveForce, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_GEN_FranchirDeViveForce, "BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_", nodes.BEH_Mission_Automate_GEN_CDT_OuvrirPlanObjets_ }

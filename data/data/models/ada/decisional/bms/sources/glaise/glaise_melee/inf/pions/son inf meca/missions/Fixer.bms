includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/pions/son inf meca/missions/Fixer.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/Fixer.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 10:25 $
]]--[[// $Revision: 21 $
]]--[[// $Workfile: Fixer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

node "MIS_Pion_INF_Fixer"
{
    feedbacks = { { { "done_MIS_Pion_INF_Fixer" }, "MIS_Pion_INF_Fixer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Fixer, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Mission_Pion_VAB_Fixer", { "done_BEH_Mission_Pion_VAB_Fixer" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eFixer
        self.eCurrentPhase = self.eCurrentPhase or eRejoindre
        self.eAction = self.eAction or eActionEnCours
        self.eActionOrdre = self.eActionOrdre or eActionEnCours
        if( ModuleBegins() ) then
            do
                --[[// mise a jour des infos de mission
]]DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
                --[[// si l'eni est deja identifie
]]--[[// on passe en phase de destruction
]]--[[// sinon on tente de la rejoindre
]]if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.mission.ennemi_ ) ) then
                    do
                                                do
                        end

                        Activate( self.activations.ACT_RC, 1, { eRC_MissionImpossible, } )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "Mission 'Fixer' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Offensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_MANOEUVRE(), } )
        --[[// ----------------------------------------------------------------------------		
]]--[[// Reception des ordres generiques de la mission
]]--[[// ----------------------------------------------------------------------------
]]if( self.eActionOrdre == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eActionOrdre = eActionEnCours
                self.eAction = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eActionOrdre = v[1] end
        --[[// *************************************************************************
]]--[[// Corps principal de la mission
]]--[[// *************************************************************************
]]if( self.eAction == eActionImpossible ) then
            do
                Activate( self.activations.ACT_RC, 1, { eRC_MissionImpossible, } )
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        do
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eFixer then
                    if( self.eAction == eActionImpossible or self.eAction == eActionHalt ) then
                        self.ePhase = eFinMission
                    end

                    if( self.eCurrentPhase ~= eFinMission ) then
                        do
                            Activate( self.activations.BEH_Mission_Pion_VAB_Fixer, GetMotivation( "MOT_Mission" ), {} )
self.done_BEH_Mission_Pion_VAB_Fixer = function( self, _, v ) self.eCurrentPhase = v[1] end
                                                        do return end

                        end
                    else
                        self.ePhase = eFinMission
                    end

                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eFinMission then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission
]]--[[//-----------------------------------------------------------------------------
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission fixer" )
                                DEC_FinMission()
                                                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

--[[//=============================================================================
]]--[[//=============================================================================
]]--[[//						Squelette de mission
]]--[[//	
]]--[[//=============================================================================
]]}

node "BEH_Mission_Pion_VAB_Fixer"
{
    feedbacks = { { { "done_BEH_Mission_Pion_VAB_Fixer" }, "BEH_Mission_Pion_VAB_Fixer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_VAB_Fixer, {value} ) end,
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", { "done_BEH_Lima_Pion_RejoindreFuseau_EnAttente" } },
        { "BEH_Dep_Pion_INF_PreciserMaintenirContact", { "done_BEH_Dep_Pion_INF_PreciserMaintenirContact" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "BEH_Eni_Pion_VAB_Fixer", { "done_BEH_Eni_Pion_VAB_Fixer" } },
        { "BEH_Obs_Pion_INF_EnReconnaissance", { "done_BEH_Obs_Pion_INF_EnReconnaissance" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.ksMission = self.ksMission or self.mission.ennemi_
        self.eActionPreciser = self.eActionPreciser or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                StartActivateOverride( self, self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, {} )
            end
--[[// Lorsque l'action est impossible
]]        end

        if( self.eActionPreciser == eActionImpossible or self.eAction == eActionImpossible ) then
            do
                DEC_Trace( "Action impossible sur Eni" )
                if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                    do return end
                end

                                self:SendFeedback( eFinMission )
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        do
                    end

                                        self:SendFeedback( eFinMission )
                    Halt( self )
                    do return end

                end

            end
--[[// Si le niveau d'identification s'acroit, on garde ce niveau		
]]        end

        Activate( self.activations.BEH_Dep_Pion_INF_PreciserMaintenirContact, 1, { self.ksMission, false, } )
self.done_BEH_Dep_Pion_INF_PreciserMaintenirContact = function( self, _, v ) self.eActionPreciser = v[1] end
         do
            local _continue = true
            local switch_1 = S_Eni_NiveauPerceptionGTIA( self.ksMission )
            local cases_switch_1 = {}
                if switch_1 == eReconnu
                or switch_1 == eIdentifie then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Unites reconnues/identifiees
]]--[[//-----------------------------------------------------------------------------				
]]Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { S_Eni_Position( self.ksMission ), } )
                    Activate( self.activations.BEH_Eni_Pion_VAB_Fixer, 2 * S_Force_DangerSur( self.ksMission ), { self.ksMission, } )
self.done_BEH_Eni_Pion_VAB_Fixer = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[1] = true

                else
                    --[[// Si on n'a pas retrouve la connaissance
]]if( DEC_ConnaissanceAgent_EstValide( self.ksMission ) and S_Geometrie_EstProchePosition( DEC_Agent_Position(), S_Eni_Position( self.ksMission ), M_DISTANCE_FIXER_SECURITE() ) ) then
                        do
                            Activate( self.activations.BEH_Obs_Pion_INF_EnReconnaissance, 3, { S_Eni_Position( self.ksMission ), } )
                        end
                    end

                                end
            end

    end,

    destroy = function( self )
                do
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Fixer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Dep_Pion_INF_PreciserMaintenirContact", nodes.BEH_Dep_Pion_INF_PreciserMaintenirContact }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Eni_Pion_VAB_Fixer", nodes.BEH_Eni_Pion_VAB_Fixer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Obs_Pion_INF_EnReconnaissance", nodes.BEH_Obs_Pion_INF_EnReconnaissance }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Mission_Pion_VAB_Fixer", nodes.BEH_Mission_Pion_VAB_Fixer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

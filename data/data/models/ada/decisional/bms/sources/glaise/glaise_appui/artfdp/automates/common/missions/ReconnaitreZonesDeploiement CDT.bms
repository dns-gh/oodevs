includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artfdp/automates/common/missions/ReconnaitreZonesDeploiement CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Appui/ArtFdp/Automates/Common/Missions/ReconnaitreZonesDeploiement CDT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/08/05 18:24 $
]]--[[// $Revision: 16 $
]]--[[// $Workfile: ReconnaitreZonesDeploiement CDT.hal $
]]--[[// *****************************************************************************
]]
node "BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement" }, "BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_ASS_AssignerReconnaitreZoneDeploiementA", { "done_BEH_Conduite_Automate_ASS_AssignerReconnaitreZoneDeploiementA" } },
        { "BEH_Conduite_Automate_ASS_FaireSuivreDispositif", { "done_BEH_Conduite_Automate_ASS_FaireSuivreDispositif" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.lstPos_Reco = self.lstPos_Reco or DEC_Geometrie_CreerListePoints()
        self.selPions = self.selPions or DEC_Automate_PionsAvecPC()
        if( ModuleBegins() ) then
            S_Geometrie_Automate_ASS_CopiePointDansFuseau( self.mission.positionsAReconnaitre_, self.lstPos_Reco )
        end

        local selPion_ASS_Reco = S_Cherche_Automate_Filtre_TypePion( self.selPions, "SectionASS_Reco" )
        for _,x_ass in pairs( --[[// Remets des Points dans la liste si le pion s'est fait detuire ou autre ..
]]--[[// TODO
]]--[[//
]]selPion_ASS_Reco or emptyTable ) do
        local _continue = true
do
                --[[// On ne donne la mission qu'au pion ne possedant pas la mission de reconnaissance
]]if( S_Misc_EstMissionAffectee_Pion( x_ass, "T_Mission_Pion_ASS_ReconnaitreZoneDeploiement" ) ) then
                    _continue = false
                end

                    if _continue then
                    --[[// Cherche la position la plus proche du pion disponible
]]local ptZone = S_Misc_Automate_ASS_ExtraitPoint_ProchePionDansFuseau( self.lstPos_Reco, x_ass )
                    if( ptZone == nil ) then
                        _continue = false
                    end

                        if _continue then
                        Activate( self.activations.BEH_Conduite_Automate_ASS_AssignerReconnaitreZoneDeploiementA, 1, { x_ass, ptZone, } )
                    end
                end
            end
--[[// Si plus de position a reconnaitre et 
]]--[[// if ( DEC_ListePoints_Size( lstPos_Reco ) == 0 ) 
]]
        end

        Activate( self.activations.BEH_Conduite_Automate_ASS_FaireSuivreDispositif, 1, emptyTable )
    end,

--[[/*
behavior BEH_Conduite_Automate_ASS_AssignerFaireMouvementA( T_PionModeleDEC pPion, T_Point ptFin )
{
	if ( DIA_ModuleBegins() )
		start behavior BEH_Mission_Automate_AssignerFaireMouvementA( ePhase_CDT, pPion, ptFin, eEtatEchelon_Premier );
}
*/]]--[[/*
	persistent T_Point	ptFinMission = DEC_Geometrie_CreerPoint();
	persistent T_Pion	pionPC = DEC_Automate_PionPC();
		
	if ( DIA_ModuleBegins() )	
		DEC_Copie_Point( DEC_Automate_PionPosition( pionPC ), ptFinMission );
	*/]]--[[// selection selPion_ASS_Reco = S_Cherche_Automate_Filtre_TypePion( DEC_Automate_PionsSansPC(), SectionASS_Reco );
]]--[[// On recupere les pions de premier echelon
]]}

node "BEH_Conduite_Automate_ASS_FaireSuivreDispositif"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_ASS_FaireSuivreDispositif" }, "BEH_Conduite_Automate_ASS_FaireSuivreDispositif" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_ASS_FaireSuivreDispositif, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_ASS_SuivreA", { "done_BEH_Conduite_Automate_ASS_SuivreA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[//
]]--[[// Suit le pion le plus proche
]]local selPion_ASS = S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsAvecPC(), "T_Mission_Pion_ASS_ReconnaitreZoneDeploiement" )
        if( #( selPion_ASS ) == 0 ) then
            do return end
        end

        for _,x in pairs( --[[// Situation Mission
]]DEC_Automate_PionsAvecPC() or emptyTable ) do
        local _continue = true
do
                --[[// --------------------------------------------------------------------
]]--[[/*
		switch ( F_Pion_GeteEtatPhaseMission( x_pion ) )
		{
		case eEtatPhaseMission_None:
		case eEtatPhaseMission_FinMission:		
			{					
				behavior BEH_Conduite_Automate_ASS_AssignerFaireMouvementA( x_pion, ptFinMission );
				break;
			}
		}
		*/]]local x_pion = x
                --[[// behavior BEH_Conduite_Automate_ASS_Defaut();
]]local pionASuivre = S_Geometrie_Automate_PionPlusProchePoint( DEC_Automate_PionPosition( x ), selPion_ASS )
                local mission = DEC_GetMission( x_pion )
                local bSuivre = ( mission == nil ) or ( mission:GetType() == "T_Mission_Pion_Suivre" )
                if( bSuivre ) then
                    Activate( self.activations.BEH_Conduite_Automate_ASS_SuivreA, 1, { x_pion, pionASuivre, } )
                end

            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ASS_FaireSuivreDispositif, "BEH_Conduite_Automate_ASS_SuivreA", nodes.BEH_Conduite_Automate_ASS_SuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement, "BEH_Conduite_Automate_ASS_AssignerReconnaitreZoneDeploiementA", nodes.BEH_Conduite_Automate_ASS_AssignerReconnaitreZoneDeploiementA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ASS_ReconnaitreZonesDeploiement, "BEH_Conduite_Automate_ASS_FaireSuivreDispositif", nodes.BEH_Conduite_Automate_ASS_FaireSuivreDispositif }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/appuyer/Appuyer - CDT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[//
]]--[[// Commentaires : pas de gestion de l'étallement du dispositif
]]--[[//
]]--[[// les pions qui font detruire neutraliser dans zone sont susceptibles de relever
]]--[[// l'unité qui est en appui direct (coordination des ravitaillements ou sur detruction )
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Appuyer"
{
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "BEH_ROE_Automate_TirLibre", {} },
        { "BEH_Ordre_Automate_Poursuivre_", {} },
        { "BEH_ROE_Automate_TirRestreint", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe", {} },
        { "BEH_Automate_ALAT_CoordonnerFeux", {} },
        { "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", {} },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", {} },
        { "BEH_Mission_Automate_AssignerStationnerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eAppuyer
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listePionsSgptSansRavitaillementsEnCours = self.listePionsSgptSansRavitaillementsEnCours or {}
        self.listePionsPourMissionAppuyerOuDetruire = self.listePionsPourMissionAppuyerOuDetruire or {}
        self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours = self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours or {}
        self.listeDetruire = self.listeDetruire or {}
        self.listeAppuyer = self.listeAppuyer or {}
        self.listePionsAAppuyer = self.listePionsAAppuyer or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.listeHMLog = self.listeHMLog or {}
        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// donner des missions aux pions qui sont opérationnels et qui ne sont pas en cours
]]--[[// de ravitaillement
]]DIA_Clear( self.listePionsSgpt )
        DIA_Clear( self.listePionsSgptSansRavitaillementsEnCours )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        local listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        self.listePionsSgptSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsSgpt, listePionsEnCoursRavitaillement )
        --[[// Mise à Jour des selections
]]--[[// --------------------------
]]local listeHAC = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AntitankHelicopterPatrol" )
        local listeHAP = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "EscortAndCloseSupportHelicopterPatrol" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "AirDefenseHelicopterPatrol" )
        --[[// liste des unités pour IMEX
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgptSansRavitaillementsEnCours, "GeneralPurposeHelicopterPatrol" )
        --[[// liste des unités à appuyer
]]DIA_Clear( self.listePionsAAppuyer )
        self.listePionsAAppuyer = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAAppuyer_ )
        --[[// liste des pions qui peuvent détruire dans zone ou appuyer
]]DIA_Clear( self.listePionsPourMissionAppuyerOuDetruire )
        DIA_Clear( self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours )
        self.listePionsPourMissionAppuyerOuDetruire = S_Liste_Concatene( listeHAP, listeHAC )
        self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsPourMissionAppuyerOuDetruire, listePionsEnCoursRavitaillement )
        --[[// listes des pions pour les missions appuyer et détruire 
]]--[[// ------------------------------------------------------
]]DIA_Clear( self.listeDetruire )
        DIA_Clear( self.listeAppuyer )
        local compteur = 0
        for _,x in pairs( --[[//1 unité qui appui pour deux qui détruisent
]]self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours or {} ) do
        local _continue = true
do
                if( ( compteur == 0 or compteur == nil ) ) then
                    DIA_PushBack( self.listeAppuyer, x )
                else
                    DIA_PushBack( self.listeDetruire, x )
                end

                                compteur = compteur + 1
                if( compteur == 3 ) then
                    compteur = 0
                end

            end

        end

        DIA_Clear( self.listePionsAAppuyerIMEX )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local _continue = true
            local switch_1 = --[[// phases mission
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eAppuyer then
                    --[[//Tir sur riposte si est unites a appuyer sont dans une position
]]--[[//favorable, sinon, tir libre.
]]local bBesoinAppuisFeu = false
                    for _,x in pairs( self.listePionsAAppuyer or {} ) do
                    local _continue = true
do
                            local pionDEC = x
                            if( F_Pion_GeteEtatDec( pionDEC ) == eEtatDec_Sauvegarde ) then
                                bBesoinAppuisFeu = true
                            end

                        end

                    end

                    if( bBesoinAppuisFeu ) then
                        do
                            Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, {} )
                            Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
                        end
                    else
do
                            Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                            Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
                        end
--[[// missions
]]                    end

                    if( not DIA_IsListEmpty( self.listeDetruire ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, 1, { ePhase_CDT, self.listeDetruire, self._namedParams.mission.zone_, self._namedParams.mission.pointDislocation_, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, false, } )
                    end

                    if( not DIA_IsListEmpty( self.listeAppuyer ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe, 1, { ePhase_CDT, self.listeAppuyer, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, self.listePionsAAppuyer, } )
                    end

                    --[[//pas de coordination des feux dans cette mission
]]if( not DIA_IsListEmpty( self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours ) ) then
                        Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listePionsPourMissionAppuyerOuDetruireSansRavitaillementsEnCours, 0, } )
                    end

                    if( not DIA_IsListEmpty( self.listePionsPourMissionAppuyerOuDetruire ) ) then
                        Activate( self.activations.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne, 1, { self.listePionsPourMissionAppuyerOuDetruire, } )
                    end

                    --[[// IMEX et ravitaillements
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, false, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsAppuyerDirectAuContactAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", nodes.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Appuyer, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

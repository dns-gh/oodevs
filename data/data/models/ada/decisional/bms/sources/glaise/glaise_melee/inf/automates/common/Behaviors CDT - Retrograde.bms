includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/automates/common/Behaviors CDT - Retrograde.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors CDT - Retrograde.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 2/09/05 13:37 $
]]--[[// $Revision: 18 $
]]--[[// $Workfile: Behaviors CDT - Retrograde.hal $
]]--[[//
]]--[[// *****************************************************************************
]]




--[[//=============================================================================
]]--[[// Rupture de contact pour la mission Coup d'Arret
]]--[[//=============================================================================
]]node "BEH_CoordDep_Automate_INF_RompreContact"
{
    feedbacks = { { { "done_BEH_CoordDep_Automate_INF_RompreContact" }, "BEH_CoordDep_Automate_INF_RompreContact" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_CoordDep_Automate_INF_RompreContact, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "BEH_Mission_Automate_AssignerDecrocherA", { "done_BEH_Mission_Automate_AssignerDecrocherA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.bStop = self.bStop or false
        self.ePhase = self.ePhase or ePhase_Decroche
        self.mission = self.mission or DEC_GetMission( myself )
        self.lstLocRgpt = self.lstLocRgpt or {}
        self.eCodeLoc = self.eCodeLoc or eNoError
        self.ptRgpt_Bary = self.ptRgpt_Bary or nil
        self.rItLoc = self.rItLoc or 0
        self.sPion_PE = self.sPion_PE or S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Processus de rupture de contact : debut" )
                if( #( self.sPion_PE ) == 0 ) then
                    self.sPion_PE = DEC_Automate_PionsSansPC()
                end

            end
--[[// Fin du processus de rupture de contact
]]--[[// --------------------------------------------------------------------
]]        end

        if( self.rItLoc >= #( self.sPion_PE ) ) then
            do
                DEC_Trace( "Processus de rupture de contact : termine" )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        do
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePhase_Decroche then
                    DEC_Trace( "Processus de rupture de contact : en cours [Decroche]" )
                    --[[// Calcul le point de regroupement
]]--[[// ------------------------------------------------------------
]]DEC_Trace( FloatToString( #( self.sPion_PE ) ) .. " pions pris en compte." )
                    --[[// Pas de point de regroupement trouve				
]]self.ptRgpt_Bary = S_Geometrie_BarycentreZone( self.mission.zoneRegroupement_ )
                    if( #( self.sPion_PE ) > 0 ) then
                        self.lstLocRgpt = DEC_Geometrie_DecoupeLocalisation( self.mission.zoneRegroupement_, #( self.sPion_PE ), self.eCodeLoc )
                        self.eCodeLoc = self.lstLocRgpt.second
                        self.lstLocRgpt = self.lstLocRgpt.first
                    end

                    if( eNoError ~= self.eCodeLoc and self.ptRgpt_Bary == 0 ) then
                        self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end
                    end

                    --[[// Fait rompre les pions par etape
]]--[[// ------------------------------------------------------------
]]self.ePhase = ePhase_RompreContact
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == ePhase_Attente then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = ePhase_RompreContact
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_Misc_Delai, 1, { 1, M_DELAI_ROMPRE_CONTACT(), } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == ePhase_RompreContact then
                    --[[// Recupere le point de regroupement
]]local ptRgrpt = nil
                    if( eNoError == self.eCodeLoc and #( self.lstLocRgpt ) > self.rItLoc ) then
                        do
                            --[[// TODO : Delete pt
]]ptRgrpt = S_Geometrie_BarycentreZone( DEC_UserTypeList_GetAt( self.lstLocRgpt, self.rItLoc ) )
                        end
                    else
                        ptRgrpt = self.ptRgpt_Bary
                    end

                    --[[// On prend un pion a chaque phase
]]local pionPE = DIA_GetAt( self.sPion_PE, self.rItLoc )
                                        self.rItLoc = self.rItLoc + 1
                    if( F_Pion_GeteEtatDestruction( pionPE ) == eEtatDestruction_Total ) then
                        do return end
                    end

                    --[[// Demande aux pions qui interdisent de rompre le contact									
]]StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pionPE, ptRgrpt, eEtatEchelon_Premier, } )
                    self.ePhase = ePhase_Attente
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

    destroy = function( self )
            end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 27/01/2004 18:26$
]]--[[//
]]--[[// Comportement utiliser pour gerer la rupture de contact du coup d'arret
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Conduite_Automate_INF_CoupArret"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_CoupArret" }, "BEH_Conduite_Automate_INF_CoupArret" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_CoupArret, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre", { "done_BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_CoordTir_Automate_INF_Intervention_LCAR", { "done_BEH_CoordTir_Automate_INF_Intervention_LCAR" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.eActionDelai = self.eActionDelai or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        self.eAction_CoupArret = self.eAction_CoupArret or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Recevoir un ordre
]]--[[//-----------------------------------------------------------------------------
]]local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or {} ) do
        local _continue = true
do
                local repOrdre = x
                local bEstUtilise = true
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Rep_OrderConduite_Decrocher" then
                            StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre, 1, {} )
self.done_BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre = function( self, _, v ) self.eAction = v[1] end--[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission ( On peut aussi débrayer l'automate )
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fait decrocher le premier echelon
]]
                            _continue = false
                        --[[//-----------------------------------------------------------------------------
]]--[[// Sinon...
]]--[[//-----------------------------------------------------------------------------
]]                        cases_switch_1[1] = true

                        else
                            bEstUtilise = false
                                                end
                    end
--[[// on a finit de traiter l'ordre, on le supprime
]]
                if( bEstUtilise ) then
                    Activate( self.activations.ACT_Ordre_Suppression, 1, { repOrdre, } )
                end

            end

        end

        if( S_CompagnieAbimee() or self.eAction_CoupArret == eActionEffectuee ) then
            do
                if( self.eAction == eActionEnCours ) then
                    StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre, 1, {} )
self.done_BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre = function( self, _, v ) self.eAction = v[1] end
                end

            end
--[[//
]]--[[// Recherche les info des pions
]]        end

        local lst_Pions_EnTete = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        for _,x_EnTete in pairs( lst_Pions_EnTete or {} ) do
        local _continue = true
do
                Activate( self.activations.BEH_CoordTir_Automate_INF_Intervention_LCAR, 1, { x_EnTete, } )
self.done_BEH_CoordTir_Automate_INF_Intervention_LCAR = function( self, _, v ) self.eAction_CoupArret = v[1] end
            end

        end

    end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 27/01/2004 18:35$
]]--[[//
]]--[[// Demande des Tirs d'artillerie et fait rompre le contact
]]--[[// 
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre" }, "BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre, {value} ) end,
    activations =
    {
        { "BEH_CoordDep_Automate_INF_RompreContact_SurDelai", { "done_BEH_CoordDep_Automate_INF_RompreContact_SurDelai" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionDelai = self.eActionDelai or eActionEnCours
        if( self.eActionDelai == eActionEffectuee ) then
            do
                self.eActionDelai = eActionEnCours
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.BEH_CoordDep_Automate_INF_RompreContact_SurDelai, 1, { M_DELAI_ROMPRE_CONTACT(), } )
self.done_BEH_CoordDep_Automate_INF_RompreContact_SurDelai = function( self, _, v ) self.eActionDelai = v[1] end
    end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 27/01/2004 19:02$
]]--[[//
]]--[[// Demande a rompre le contact dans rDelai min 
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_CoordDep_Automate_INF_RompreContact_SurDelai"
{
    feedbacks = { { { "done_BEH_CoordDep_Automate_INF_RompreContact_SurDelai" }, "BEH_CoordDep_Automate_INF_RompreContact_SurDelai" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_CoordDep_Automate_INF_RompreContact_SurDelai, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "BEH_CoordDep_Automate_INF_RompreContact", { "done_BEH_CoordDep_Automate_INF_RompreContact" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rDelai = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.eActionDelai = self.eActionDelai or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        self.bStop = self.bStop or false
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Declenchement rupture de contact : debut" )
            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                    DEC_Trace( "Declenchement rupture de contact : termine" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
--[[// Declenche la rupture du contact apres rDelai..
]]        end

        if( self.eActionDelai == eActionEnCours ) then
            do
                Activate( self.activations.ACT_Misc_Delai, 1, { 1, self._namedParams.rDelai, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eActionDelai = v[1] end
                                do return end

            end
        end

        Activate( self.activations.BEH_CoordDep_Automate_INF_RompreContact, 1, {} )
self.done_BEH_CoordDep_Automate_INF_RompreContact = function( self, _, v ) self.eAction = v[1] end
    end,

    destroy = function( self )
            end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 11/08/2005 15:25
]]--[[// 
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Conduite_Automate_INF_DesactiveSauvegarde"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_DesactiveSauvegarde" }, "BEH_Conduite_Automate_INF_DesactiveSauvegarde" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_DesactiveSauvegarde, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_ArretSauvegardeSur", { "done_BEH_Ordre_Automate_ArretSauvegardeSur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rDelai = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.selPions = self.selPions or S_ObtenirPionsOperationnels()
        self.eAction = self.eAction or eActionEnCours
        if( self.eAction ~= eActionEnCours ) then
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
for _,x in pairs( self.selPions or {} ) do
            local _continue = true
                StartActivateOverride( self, self.activations.BEH_Ordre_Automate_ArretSauvegardeSur, 1, { x, self._namedParams.rDelai, } )
self.done_BEH_Ordre_Automate_ArretSauvegardeSur = function( self, _, v ) self.eAction = v[1] end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_CoupArret, "BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre", nodes.BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_CoupArret, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_CoupArret, "BEH_CoordTir_Automate_INF_Intervention_LCAR", nodes.BEH_CoordTir_Automate_INF_Intervention_LCAR }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_DesactiveSauvegarde, "BEH_Ordre_Automate_ArretSauvegardeSur", nodes.BEH_Ordre_Automate_ArretSauvegardeSur }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_INF_RompreContact, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_INF_RompreContact, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_INF_RompreContact_SurDelai, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_INF_RompreContact_SurDelai, "BEH_CoordDep_Automate_INF_RompreContact", nodes.BEH_CoordDep_Automate_INF_RompreContact }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_RuptureDeContact_Manoeuvre, "BEH_CoordDep_Automate_INF_RompreContact_SurDelai", nodes.BEH_CoordDep_Automate_INF_RompreContact_SurDelai }

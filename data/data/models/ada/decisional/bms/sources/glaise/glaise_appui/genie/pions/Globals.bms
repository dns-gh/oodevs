includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/Globals.bms"] = true

include "bit.lua"


--[[//-----------------------------------------------------------------------------
]]--[[// fichiers à inclure
]]--[[//-----------------------------------------------------------------------------
]]include "Glaise/Glaise_Common/Pions/Globals.bms"


include "glaise/glaise_appui/Genie/Pions/Donnees Doctrines.bms"

include "glaise/glaise_appui/Genie/Pions/M_POLY.bms"


--[[//=============================================================================
]]
--[[//=============================================================================
]]--[[// Macros
]]--[[//=============================================================================
]]
--[[//-----------------------------------------------------------------------------
]]--[[// Capacités des moyens de franchissement
]]--[[//-----------------------------------------------------------------------------
]]function M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_PAA()
    return 20
end



function M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_MLF()
    return 50
end



function M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_EFA()
    return 60
end



function M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_PFM()
    return 100
end

--[[//=============================================================================
]]--[[// Fonctions : ggr => et que faire quand il peut y avoir plusieurs possiblités 
]]--[[// comme dans le cas des ponts flottants discontinus ou continus?
]]--[[//=============================================================================
]]--[[//-------------------------------------------------------------------------
]]--[[// S_Obj_Pion_GEN_VerifierMoyensPourFranchissement
]]--[[//
]]--[[// Vérifie que les moyens de franchissement soient adaptés au site
]]--[[// renvoit true dans tous les autres cas !
]]--[[//-------------------------------------------------------------------------
]]--[[// Si l'objet passé en paramètre n'est pas un site de franchissement, on
]]--[[// accept.
]]--[[// Site non reconnu, les moyens sont toujours inadaptés !
]]--[[// On scrute la liste des pions en renforcemnt
]]--[[//trie en fonction des types de moyens
]]--[[//gestion en continu ou en discontinus
]]--[[// Mission de franchissement en continu
]]--[[// Mission de franchissement en discontinu
]]--[[//le pontage avec le PAA n'est pas possible. On verifie donc que
]]--[[//l'on a des moyens autres que le PAA
]]--[[// Dans le cas d'une autre mission on revoit toujours "vrai" pour la générécité.
]]--[[// ------------------------------------------------------------------------
]]--[[// Renvoie vrai si au moins un groupe MATS fait partie des renforts
]]--[[// ------------------------------------------------------------------------
]]--[[// ------------------------------------------------------------------------
]]--[[// Renvoie vrai si tous les objet planifiés (camps ici) ont bien un TC2
]]--[[// Si au moins un camp n'a pas de TC2...renvoie faux.
]]--[[// ------------------------------------------------------------------------
]]--[[// PAS DE TC2... erreur
]]function S_Obj_Pion_GEN_VerifierMoyensPourFranchissement( site, type )
    local _returnValue = false
    local eValid = nil
    if( DEC_ConnaissanceObjet_Type( site, eValid ) ~= eTypeObjectSiteFranchissement ) then
        do
            _returnValue = true
                        do return _returnValue end

        end
    end

    _returnValue = false
    local fTailleSite = DEC_ConnaissanceObjet_LargeurSiteFranchissement( site, eValid )
    if( ( fTailleSite == 0 or fTailleSite == nil ) or eValid == eRequeteInvalide ) then
        do return _returnValue end
    end

    local selPions = DEC_Renforts()
    local selPAA = S_Filtre_ChercheTypePion( selPions, GroupePAA )
    local selMLF = S_Filtre_ChercheTypePion( selPions, GroupeMLF )
    local selEFA = S_Filtre_ChercheTypePion( selPions, GroupeEFA )
    local selPFM = S_Filtre_ChercheTypePion( selPions, SectionPFM )
     do
        local _continue = true
        local switch_1 = type
        local cases_switch_1 = {}
            if switch_1 == eFranchissement_Continu then
                if( fTailleSite <= ( M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_PAA() * #( selPAA ) ) ) then
                    _returnValue = true
                end

                if( fTailleSite <= ( M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_MLF() * #( selMLF ) ) ) then
                    _returnValue = true
                end

                if( fTailleSite <= ( M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_EFA() * #( selEFA ) ) ) then
                    _returnValue = true
                end

                if( fTailleSite <= ( M_DOCTRINE_Pion_GEN_TAILLE_SITEFRANCHISSEMENT_PFM() * #( selPFM ) ) ) then
                    _returnValue = true
                end

                _continue = false
                        cases_switch_1[1] = true
elseif switch_1 == eFranchissement_Discontinu then
                if( ( #( selMLF ) + #( selEFA ) + #( selPFM ) == 0 or #( selMLF ) + #( selEFA ) + #( selPFM ) == nil ) ) then
                    _returnValue = false
                end

                _continue = false
                        cases_switch_1[2] = true

            else
                _returnValue = true
            end
        end

    if( not _returnValue ) then
        do return _returnValue end
    end

    do return _returnValue end
end

function S_Pion_GEN_EstRenforceParMATS( )
    local _returnValue = false
    _returnValue = false
    local selPions = DEC_Renforts()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( pion:GetType() == "GroupeMATS" ) then
                do
                    _returnValue = true
                                        do return _returnValue end

                end
            end

        end

    end

    do return _returnValue end
end

function S_ObjetsPlanifiesAvecTC2( travaux )
    local _returnValue = false
    _returnValue = true
    for _,camp in pairs( travaux or {} ) do
    local _continue = true
do
            if( DEC_GenObject_Type( camp ) == eTypeObjectCampPrisonniers or eTypeObjectCampRefugies ) then
                do
                    if( ( DEC_GenObject_TC2( camp ) == 0 or DEC_GenObject_TC2( camp ) == nil ) ) then
                        do
                            _returnValue = false
                                                        do return _returnValue end

                        end
                    end

                end
            end

        end

    end

    do return _returnValue end
end


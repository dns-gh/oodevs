includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/pions/common/missions/Attaquer.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// MIS_ALAT_Attaquer
]]--[[// =================
]]--[[//
]]--[[// L'attaque se déroule en avant de la ligne des constacts des forces terrestres 
]]--[[// et est précédée d'une phase d'infiltration permettant d'attaquer 
]]--[[// l'ennemi sur le flanc
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Pion_ALAT_Attaquer"
{
    feedbacks = { { { "done_MIS_Pion_ALAT_Attaquer" }, "MIS_Pion_ALAT_Attaquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ALAT_Attaquer, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirLibre", { "done_ACT_Maj_Pion_PasserEnTirLibre" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "BEH_Dep_Pion_ALAT_RejoindrePoint", { "done_BEH_Dep_Pion_ALAT_RejoindrePoint" } },
        { "BEH_Eni_Pion_ALAT_GererUnitesDetectes", { "done_BEH_Eni_Pion_ALAT_GererUnitesDetectes" } },
        { "BEH_Eni_Pion_ALAT_GererEniAttaquer", { "done_BEH_Eni_Pion_ALAT_GererEniAttaquer" } },
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", { "done_ACT_Maj_Pion_PasserEnTirSurRiposte" } },
        { "BEH_Manoeuvre_Pion_AllerStationner", { "done_BEH_Manoeuvre_Pion_AllerStationner" } },
        { "BEH_Dep_Pion_ALAT_SePoser", { "done_BEH_Dep_Pion_ALAT_SePoser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eDetruire
        self.pointFinFuseau = self.pointFinFuseau or nil
        self.pointDebutFuseau = self.pointDebutFuseau or nil
        self.listeLocalisationsMissionAttaquer = self.listeLocalisationsMissionAttaquer or {}
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                myself.plotsRavitaillement_ = self._namedParams.mission.plotsRavitaillement_
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirLibre, 1, emptyTable )
                end

                --[[//decoupage du fuseau en troncons de 5 km de long
]]--[[// ----------------------------------------------
]]self.listeLocalisationsMissionAttaquer = DEC_Geometrie_DecoupeFuseauEnTroncons( 5000 )
                self.pointFinFuseau = DEC_Geometrie_CalculerPointArrivee()
                self.pointDebutFuseau = DEC_Geometrie_CalculerPointDepart()
                DEC_Copie_Point( self._namedParams.mission.pointRegroupement_, myself.pointRegroupement_ )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                if( self.ePhase ~= eFinMission and self.ePhase ~= eSExfiltrer ) then
                    do
                        self.ePhase = eSExfiltrer
                        self.eEtat = eActionEnCours
                    end
                end

                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnAttaque, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self.pointFinFuseau, } )
                    Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindrePoint, GetMotivation( "MOT_ManoeuvrerSurEnis" ), { self.pointFinFuseau, eProgressionDefaut, eTypeItiInfiltration, } )
self.done_BEH_Dep_Pion_ALAT_RejoindrePoint = function( self, _, v ) self.eEtat = v[1] end
                    --[[// RECONNAISSANCES DES UNITES DETECTEES
]]--[[// ------------------------------------
]]Activate( self.activations.BEH_Eni_Pion_ALAT_GererUnitesDetectes, GetMotivation( "MOT_ManoeuvrerSurEnis" ), emptyTable )
                    --[[// ATTAQUER LES ENNEMIS
]]--[[// --------------------
]]Activate( self.activations.BEH_Eni_Pion_ALAT_GererEniAttaquer, GetMotivation( "MOT_ManoeuvrerSurEnis" ) * 2, { self.listeLocalisationsMissionAttaquer, self.pointFinFuseau, self._namedParams.mission.ciblesPrioritaires_, self.pointDebutFuseau, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnExfiltration, } )
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, emptyTable )
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_Warning( eRC_MissionImpossible )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    Activate( self.activations.BEH_Manoeuvre_Pion_AllerStationner, GetMotivation( "MOT_Manoeuvrer" ), { self._namedParams.mission.pointRegroupement_, } )
self.done_BEH_Manoeuvre_Pion_AllerStationner = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                        if _continue then
                        _continue = false
                    end
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), emptyTable )
self.done_BEH_Dep_Pion_ALAT_SePoser = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

    end,

    destroy = function( self )
                myself:ClearplotsRavitaillement_()
        F_Pion_SetobjectifEsquive( myself, nil )
    end,

--[[//------------------------------------------------------------------------------
]]--[[// Gestion des ennemis dans le cadre de la mission Attaquer
]]--[[//
]]--[[// Commentaires : L'attaque est effectuée par surprise sur un flanc de l'ennemi;
]]--[[//------------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_ALAT_GererEniAttaquer"
{
    feedbacks = { { { "done_BEH_Eni_Pion_ALAT_GererEniAttaquer" }, "BEH_Eni_Pion_ALAT_GererEniAttaquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_ALAT_GererEniAttaquer, {value} ) end,
    activations =
    {
        { "BEH_Eni_Pion_ALAT_GererEniDetruireDansZone", { "done_BEH_Eni_Pion_ALAT_GererEniDetruireDansZone" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listeLocalisations = self.params[1]
        self._namedParams.pointFinFuseau = self.params[2]
        self._namedParams.ciblesPrioritaires = self.params[3]
        self._namedParams.pointAProteger = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        self.pointDislocation = self.pointDislocation or DEC_Geometrie_CreerPoint()
        self.zoneCourante = self.zoneCourante or DEC_Geometrie_CreerLocalisation()
        self.barycentreZone = self.barycentreZone or DEC_Geometrie_CreerPoint()
        self.eEtat = self.eEtat or eActionEnCours
        self.orientationZone = self.orientationZone or nil
        local listeUnitesEnnemiesVivantesDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
        if( DIA_IsListEmpty( listeUnitesEnnemiesVivantesDansFuseau ) ) then
            Halt( self )
            do return end
        end

        --[[// détermination de la zone d'interet
]]--[[// ----------------------------------
]]if( ModuleBegins() or F_Pion_GeteEtatFeu( myself ) == eEtatFeu_Executer ) then
            do
                local zonePlusInterressanteBuffer = S_Geometrie_Pion_ALAT_ZonePlusInterressanteDansFuseau( self._namedParams.listeLocalisations )
                if( zonePlusInterressanteBuffer ~= nil ) then
                    do
                        DEC_Copie_Localisation( zonePlusInterressanteBuffer, self.zoneCourante )
                        local pointBuffer = S_Geometrie_BarycentreZone( self.zoneCourante )
                        if( pointBuffer ~= nil ) then
                            do
                                DEC_Copie_Point( pointBuffer, self.barycentreZone )
                                self.orientationZone = DEC_Geometrie_CreerDirection( self.barycentreZone, self._namedParams.pointFinFuseau )
                                if( self.orientationZone == nil ) then
                                    Halt( self )
                                    do return end
                                end

                            end
                        else
                            Halt( self )
                            do return end
                        end

                    end
                else
                    Halt( self )
                    do return end
                end

            end
--[[// Calcul du point de dislocation
]]--[[// ------------------------------
]]        end

        if( ModuleBegins() or F_Pion_GeteEtatFeu( myself ) == eEtatFeu_Executer or F_Pion_GeteEtatDec( myself ) == eEtatDec_Sauvegarde ) then
            do
                local directionPointDislocationDroit = DEC_Geometrie_CreerDirectionPerpendiculaire( self.orientationZone, false )
                local directionPointDislocationGauche = DEC_Geometrie_CreerDirectionPerpendiculaire( self.orientationZone, true )
                local pointDislocationDroit = DEC_Geometrie_PositionTranslateDir( self.barycentreZone, directionPointDislocationDroit, 5000 )
                local pointDislocationGauche = DEC_Geometrie_PositionTranslateDir( self.barycentreZone, directionPointDislocationGauche, 5000 )
                --[[// choisir la position la moins dangereuse
]]DEC_Copie_Point( S_Geometrie_Pion_ALAT_PositionLaMoinsDangereuse( pointDislocationDroit, pointDislocationGauche, 5000 ), self.pointDislocation )
            end
        end

        Activate( self.activations.BEH_Eni_Pion_ALAT_GererEniDetruireDansZone, 1, { self.pointDislocation, self._namedParams.ciblesPrioritaires, self.zoneCourante, 1, 0, } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ALAT_Attaquer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ALAT_GererEniAttaquer, "BEH_Eni_Pion_ALAT_GererEniDetruireDansZone", nodes.BEH_Eni_Pion_ALAT_GererEniDetruireDansZone }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "ACT_Maj_Pion_PasserEnTirLibre", nodes.ACT_Maj_Pion_PasserEnTirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Dep_Pion_ALAT_RejoindrePoint", nodes.BEH_Dep_Pion_ALAT_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Eni_Pion_ALAT_GererUnitesDetectes", nodes.BEH_Eni_Pion_ALAT_GererUnitesDetectes }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Eni_Pion_ALAT_GererEniAttaquer", nodes.BEH_Eni_Pion_ALAT_GererEniAttaquer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Manoeuvre_Pion_AllerStationner", nodes.BEH_Manoeuvre_Pion_AllerStationner }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ALAT_Attaquer, "BEH_Dep_Pion_ALAT_SePoser", nodes.BEH_Dep_Pion_ALAT_SePoser }

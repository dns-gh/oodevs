includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/Actions - Medo.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Actions/Actions - Medo.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 42 $
]]--[[// $Workfile: Actions - Medo.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
node "ACT_Mission_Automate_AssignerTransporterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerTransporterA" }, "ACT_Mission_Automate_AssignerTransporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerTransporterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointEmbarquement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.listeUnitesATransporter = self.params[5]
        self._namedParams.avecMateriel = self.params[6]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Transporter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Transporter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_Copie_Point_Mission( self._namedParams.pointDebarquement, self.missionPion, "pointDebarquement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointEmbarquement, self.missionPion, "pointEmbarquement_" )
        DEC_AssignMissionParameter( self.missionPion, "unitesATransporter_", self._namedParams.listeUnitesATransporter )
        DEC_AssignMissionParameter( self.missionPion, "avecMateriel_", self._namedParams.avecMateriel )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Medo_Automate_AffecterFuseaux
]]--[[// 
]]--[[// Commentaires:
]]--[[// 
]]--[[// *****************************************************************************
]]node "ACT_Medo_Automate_AffecterFuseaux"
{
    feedbacks = { { { "done_ACT_Medo_Automate_AffecterFuseaux" }, "ACT_Medo_Automate_AffecterFuseaux" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Medo_Automate_AffecterFuseaux, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.sPionFuseau = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_MRT_AffecteFuseaux( self._namedParams.sPionFuseau )
        else
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Medo_Automate_AffecterFuseaux_Compagnie
]]--[[// 
]]--[[// Commentaires:
]]--[[// 
]]--[[// *****************************************************************************
]]node "ACT_Medo_Automate_AffecterFuseaux_Compagnie"
{
    feedbacks = { { { "done_ACT_Medo_Automate_AffecterFuseaux_Compagnie" }, "ACT_Medo_Automate_AffecterFuseaux_Compagnie" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Medo_Automate_AffecterFuseaux_Compagnie, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pFuseau = self.params[1]
    end,

    select = function( self )
        self.sPionFuseau = self.sPionFuseau or {}
        if( ModuleBegins() ) then
            do
                DIA_PushBack( self.sPionFuseau, self._namedParams.pFuseau )
                DEC_Trace( "affectation fuseau : debut" )
                DEC_MRT_AffecteFuseaux( self.sPionFuseau )
            end
        else
do
                DIA_Remove( self.sPionFuseau, self._namedParams.pFuseau )
                DEC_Trace( "affectation fuseau : fin" )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerFaireMouvementA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerFaireMouvementA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerFaireMouvementA" }, "ACT_Mission_Automate_AssignerFaireMouvementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerFaireMouvementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptDest = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FaireMouvement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FaireMouvement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'FaireMouvement' a " .. DEC_GetSzName( self._namedParams.pPion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Affecter la mission SeDeplacer au pion avec la position aléatoire
]]assert_Mission( self.missionPion ~= 0, "Erreur dans BEH_Medo_Mission_Automate_AssignerSeDeplacerA" )
        DEC_Copie_PointDansListePoints_Mission( self._namedParams.ptDest, self.missionPion, "itineraire_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pPion ) .. " --> Mission Faire Mouvement $$" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerPrendreEnComptePrisonniersA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerPrendreEnComptePrisonniersA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerPrendreEnComptePrisonniersA" }, "ACT_Mission_Automate_AssignerPrendreEnComptePrisonniersA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerPrendreEnComptePrisonniersA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.listePrisonniersATransporter = self.params[3]
        self._namedParams.campPrisonniers = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_PrendreEnComptePrisonniers" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_PrendreEnComptePrisonniers" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Prendre en compte prisonnier' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "unitesRendues_", self._namedParams.listePrisonniersATransporter )
        DEC_AssignMissionParameter( self.missionPion, "campPrisonniers_", self._namedParams.campPrisonniers )
        F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerOrienterRefugiesA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerOrienterRefugiesA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerOrienterRefugiesA" }, "ACT_Mission_Automate_AssignerOrienterRefugiesA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerOrienterRefugiesA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.listeRefugiesATransporter = self.params[3]
        self._namedParams.campRefugies = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_OrienterRefugies" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_OrienterRefugies" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Orienter Refugies' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "refugies_", self._namedParams.listeRefugiesATransporter )
        DEC_AssignMissionParameter( self.missionPion, "campRefugies_", self._namedParams.campRefugies )
        F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerFaireMouvementSurItA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerFaireMouvementSurItA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerFaireMouvementSurItA" }, "ACT_Mission_Automate_AssignerFaireMouvementSurItA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerFaireMouvementSurItA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.itineraire = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FaireMouvement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FaireMouvement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_ListePoints_Mission( self._namedParams.itineraire, self.missionPion, "itineraire_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pPion ) .. " --> Mission Faire Mouvement $$" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSoutenirEnMesureDe
]]--[[// 
]]--[[// Commentaires:Ajout ADA
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSoutenirEnMesureDe"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSoutenirEnMesureDe" }, "ACT_Mission_Automate_AssignerSoutenirEnMesureDe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSoutenirEnMesureDe, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.itineraire = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SoutenirEnMesureDe" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SoutenirEnMesureDe" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_ListePoints_Mission( self._namedParams.itineraire, self.missionPion, "itineraire_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pPion ) .. " --> Mission Soutenir En mesure de $$" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSoutenirSurPositionEnMesureDe
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSoutenirSurPositionEnMesureDe"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSoutenirSurPositionEnMesureDe" }, "ACT_Mission_Automate_AssignerSoutenirSurPositionEnMesureDe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSoutenirSurPositionEnMesureDe, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.position = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SoutenirSurPositionEnMesureDe" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SoutenirSurPositionEnMesureDe" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( not ModuleBegins() ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_Point_Mission( self._namedParams.position, self.missionPion, "position_" )
        DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pPion ) .. " --> Mission Soutenir sur position En mesure de $$" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSuivreA
]]--[[// 
]]--[[// Commentaires: pour INF et ABC
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSuivreA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSuivreA" }, "ACT_Mission_Automate_AssignerSuivreA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSuivreA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pionASuivre = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// pion ayant la mission
]]--[[// pion à suivre
]]--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Suivre" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Suivre" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( not ModuleBegins() ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_AssignMissionParameter( self.missionPion, "uniteASuivre_", self._namedParams.pionASuivre )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Second )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSeFaireTransporterA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSeFaireTransporterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSeFaireTransporterA" }, "ACT_Mission_Automate_AssignerSeFaireTransporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSeFaireTransporterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptHeliportage = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// pion ayant la mission
]]--[[// pt d'heliportage
]]--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SeFaireTransporter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SeFaireTransporter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Se Faire Transporter : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Point_Mission( self._namedParams.ptHeliportage, self.missionPion, "pointEmbarquement_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerFranchir
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerFranchir"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerFranchir" }, "ACT_Mission_Automate_AssignerFranchir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerFranchir, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.position = self.params[3]
        self._namedParams.objPont = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// pion ayant la mission
]]--[[// Zone d'arrivee
]]--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Franchir" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_Franchir" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ " .. DEC_GetSzName( self._namedParams.pPion ) .. " --> Mission franchir $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_AssignMissionParameter( self.missionPion, "pontFlottant_", self._namedParams.objPont )
        DEC_Copie_Point_Mission( self._namedParams.position, self.missionPion, "pointArrivee_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSeFaireDecontaminerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSeFaireDecontaminerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSeFaireDecontaminerA" }, "ACT_Mission_Automate_AssignerSeFaireDecontaminerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSeFaireDecontaminerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointArrivee = self.params[3]
        self._namedParams.siteDecontamination = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_SeFaireDecontaminer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_SeFaireDecontaminer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'SeFaireDecontaminer' à " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Infos spécifiques
]]DEC_Copie_Point_Mission( self._namedParams.pointArrivee, self.missionPion, "pointArrivee_" )
        DEC_AssignMissionParameter( self.missionPion, "siteDecontamination_", self._namedParams.siteDecontamination )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerStationnerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerStationnerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerStationnerA" }, "ACT_Mission_Automate_AssignerStationnerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerStationnerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointArrivee = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Stationner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Stationner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Stationner' à " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Infos spécifiques
]]DEC_Copie_Point_Mission( self._namedParams.pointArrivee, self.missionPion, "pointAttente_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerDecrocherA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerDecrocherA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerDecrocherA" }, "ACT_Mission_Automate_AssignerDecrocherA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerDecrocherA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ptRegroupement = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Decrocher" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_Decrocher" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'Decrocher' à " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Infos spécifiques
]]DEC_Copie_Point_Mission( self._namedParams.ptRegroupement, self.missionPion, "pointRegroupement_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerFiltrerPopulationsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerFiltrerPopulationsA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerFiltrerPopulationsA" }, "ACT_Mission_Automate_AssignerFiltrerPopulationsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerFiltrerPopulationsA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pt = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FiltrerPopulations" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_FiltrerPopulations" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Filtrer Populations : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Point_Mission( self._namedParams.pt, self.missionPion, "point_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerInterdireFranchissementPopulationsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerInterdireFranchissementPopulationsA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerInterdireFranchissementPopulationsA" }, "ACT_Mission_Automate_AssignerInterdireFranchissementPopulationsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerInterdireFranchissementPopulationsA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pt = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_InterdireFranchissementPopulations" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_InterdireFranchissementPopulations" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Interdire Franchissement Populations : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Point_Mission( self._namedParams.pt, self.missionPion, "point_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerSecuriserZoneContrePopulationsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerSecuriserZoneContrePopulationsA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerSecuriserZoneContrePopulationsA" }, "ACT_Mission_Automate_AssignerSecuriserZoneContrePopulationsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerSecuriserZoneContrePopulationsA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pt = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[// pion ayant la mission
]]--[[// objectif
]]--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SecuriserZoneContrePopulations" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_SecuriserZoneContrePopulations" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Securiser Zone Contre Populations : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Point_Mission( self._namedParams.pt, self.missionPion, "point_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerControlerPopulationsDansZoneA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerControlerPopulationsDansZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerControlerPopulationsDansZoneA" }, "ACT_Mission_Automate_AssignerControlerPopulationsDansZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerControlerPopulationsDansZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ControlerPopulationsDansZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ControlerPopulationsDansZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Controler Populations Dans Zone : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerCanaliserPopulationsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_AssignerCanaliserPopulationsA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerCanaliserPopulationsA" }, "ACT_Mission_Automate_AssignerCanaliserPopulationsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerCanaliserPopulationsA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_CanaliserPopulations" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_CanaliserPopulations" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Canaliser Populations : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion a suivre
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------    
]]--[[// *****************************************************************************
]]--[[// ACT_Pion_CreerObjetSur
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Automate_CreerObjetSur"
{
    feedbacks = { { { "done_ACT_Automate_CreerObjetSur" }, "ACT_Automate_CreerObjetSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Automate_CreerObjetSur, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.localisation = self.params[1]
        self._namedParams.type = self.params[2]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            DEC_CreerObjetSansDelais( S_TypeObject_ToString( self._namedParams.type ), self._namedParams.localisation )
        end

    end,

}


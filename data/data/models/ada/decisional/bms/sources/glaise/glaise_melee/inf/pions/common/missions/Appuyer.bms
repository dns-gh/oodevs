includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/pions/common/missions/Appuyer.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-03-31 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Missions/Appuyer.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 22 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//=============================================================================
]]--[[//
]]--[[//	behavior BEH_Dep_Pion_INF_Appuyer( 	Perception_Pion repAmi, float rDist_SuiviMin, 
]]--[[//														float rDist_SuiviMax )
]]--[[//
]]--[[//	behavior BEH_Dep_Pion_INF_GererPhaseAppuyer( T_PionModeleDEC tAmi, 
]]--[[//                                               float           rDist_SuiviMin, 
]]--[[//                                               float           rDist_SuiviMax )
]]--[[//
]]--[[//  behavior BEH_Dep_Pion_INF_RejoindrePositionAppui( T_PionModeleDEC     tAmi, 
]]--[[//                                                    T_ConnaissanceAgent repEni, 
]]--[[//                                                    E_TypeProgression typeProg )
]]--[[//
]]--[[//	behavior BEH_Pion_INF_UnitesEnAppui_EnPosition( Perception_Pion repAmi )
]]--[[//
]]--[[//=============================================================================
]]

node "BEH_Dep_Pion_INF_Appuyer"
{
    feedbacks = { { { "done_BEH_Dep_Pion_INF_Appuyer" }, "BEH_Dep_Pion_INF_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_INF_Appuyer, {value} ) end,
    activations =
    {
        { "ACT_Misc_Pion_Ambiance", { "done_ACT_Misc_Pion_Ambiance" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "BEH_Dep_Suivre_Elastique", { "done_BEH_Dep_Suivre_Elastique" } },
        { "BEH_Dep_Pion_INF_GererPhaseAppuyer", { "done_BEH_Dep_Pion_INF_GererPhaseAppuyer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.tAmi = self.params[1]
        self._namedParams.rDist_SuiviMin = self.params[2]
        self._namedParams.rDist_SuiviMax = self.params[3]
    end,

    activate = function( self )
                self.eAction = self.eAction or eActionEnCours
        self.eActionSuivre = self.eActionSuivre or eActionEnCours
        self.eCurrentPhase = self.eCurrentPhase or eSuivreUnite
        self.curPtAmi = self.curPtAmi or self._namedParams.tAmi:DEC_Agent_Position()
        self.rDistPoste = self.rDistPoste or 0
        self.repCurEni = self.repCurEni or nil
        if( ModuleBegins() ) then
            do
                F_AddToselUnitesEnAppui( self._namedParams.tAmi )
            end
        end

        Activate( self.activations.ACT_Misc_Pion_Ambiance, 1, { F_Pion_GeteEtatAmbiance( self._namedParams.tAmi ), } )
        Activate( self.activations.ACT_Dep_ModulationVitesse, 2, { 1, } )
        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
        Activate( self.activations.BEH_Dep_Suivre_Elastique, 1, { self._namedParams.tAmi, self._namedParams.rDist_SuiviMin, self._namedParams.rDist_SuiviMax, } )
        if( not DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            do return end
        end

        Activate( self.activations.BEH_Dep_Pion_INF_GererPhaseAppuyer, 2, { self._namedParams.tAmi, self._namedParams.rDist_SuiviMin, self._namedParams.rDist_SuiviMax, } )
self.done_BEH_Dep_Pion_INF_GererPhaseAppuyer = function( self, _, v ) self.eCurrentPhase = v[1] end
    end,

    destroy = function( self )
                F_RemoveFromselUnitesEnAppui( self._namedParams.tAmi )
    end,

}

node "BEH_Dep_Pion_INF_GererPhaseAppuyer"
{
    feedbacks = { { { "done_BEH_Dep_Pion_INF_GererPhaseAppuyer" }, "BEH_Dep_Pion_INF_GererPhaseAppuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_INF_GererPhaseAppuyer, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Pion_INF_AC_FaireRalentir", { "done_ACT_Ordre_Pion_INF_AC_FaireRalentir" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "ACT_Obs_EtablirVisionFaceADir", { "done_ACT_Obs_EtablirVisionFaceADir" } },
        { "ACT_Dep_Pion_INF_Arret", { "done_ACT_Dep_Pion_INF_Arret" } },
        { "ACT_Dep_PasserEnModeFurtif", { "done_ACT_Dep_PasserEnModeFurtif" } },
        { "BEH_Dep_Pion_INF_RejoindrePositionAppui", { "done_BEH_Dep_Pion_INF_RejoindrePositionAppui" } },
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_Misc_UnitesEnAppui_EnPosition", { "done_ACT_Misc_UnitesEnAppui_EnPosition" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.tAmi = self.params[1]
        self._namedParams.rDist_SuiviMin = self.params[2]
        self._namedParams.rDist_SuiviMax = self.params[3]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.eActionSuivi = self.eActionSuivi or eActionEnCours
        self.ePhase = self.ePhase or eSuivreUnite
        self.bEnDeplacement = self.bEnDeplacement or false
        self.repCurEni = self.repCurEni or nil
        local rDist = DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.tAmi:DEC_Agent_Position() )
        self.repCurEni = S_Eni_Pion_INF_ChercheAppui()
        if( self.eAction == eActionImpossible ) then
            do
                                do
                    DEC_Trace( "impossible d'aller sur position d'appui" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        do
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eSuivreUnite then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Suivi de l'unite soutenue
]]--[[//-----------------------------------------------------------------------------	            	            
]]--[[// On fait ralentir l'unite en avance afin de pouvoir la couvrir
]]if( myself:GetType() == "SectionInfanterie_MILAN" or myself:GetType() == "SectionInfanterie_HOT" ) then
                        do
                            if( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                Activate( self.activations.ACT_Ordre_Pion_INF_AC_FaireRalentir, 1, { self._namedParams.tAmi, } )
                            end

                        end
                    end

                    Activate( self.activations.ACT_RC, 1, { eRC_SuitUnite, } )
                    --[[// deplacement sur la position courante de l'unite soutenue
]]--[[// effectue
]]if( rDist < self._namedParams.rDist_SuiviMin ) then
                        do
                            if( self._namedParams.tAmi:DEC_Agent_EstEnMouvement() ) then
                                self.ePhase = eAttendre
                            else
                                --[[// la section est proche de la section soutenue
]]self.ePhase = eAppuyer
                            end

                        end
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eAttendre then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                if( not self._namedParams.tAmi:DEC_Agent_EstEnMouvement() or rDist < self._namedParams.rDist_SuiviMin ) then
                                    self.ePhase = eAppuyer
                                else
                                    self.ePhase = eSuivreUnite
                                end

                                                                self:SendFeedback( self.ePhase )
                                do return end

                            end

                        end
                    end

                    local mission = DEC_GetMission( myself )
                    Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { DEC_GetDirectionDanger( mission ), } )
                    Activate( self.activations.ACT_Dep_Pion_INF_Arret, 1, { M_TEMPS_ATTENTE_APPUI(), "", } )
self.done_ACT_Dep_Pion_INF_Arret = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eAppuyer then
                    --[[// on observe l'eni
]]Activate( self.activations.ACT_RC, 1, { eRC_PasseEnAppui, } )
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )--[[// on rejoint la position d'appui a couvert
]]
                    if( rDist > self._namedParams.rDist_SuiviMax ) then
                        do
                            self.ePhase = eSuivreUnite
                                                        self:SendFeedback( eSuivreUnite )
                            do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "position d'appui atteinte" )
                                self.ePhase = eSePoster
                            end

                        end
                    else
do
                            Activate( self.activations.BEH_Dep_Pion_INF_RejoindrePositionAppui, 1, { self._namedParams.tAmi, self.repCurEni, eProgressionDirect, } )
self.done_BEH_Dep_Pion_INF_RejoindrePositionAppui = function( self, _, v ) self.eAction = v[1] end
                                                        do return end

                        end
                    end

                                cases_switch_1[3] = true
                end
                if cases_switch_1[3] or switch_1 == eSePoster then
                    --[[// Lorsque la section appuyee s'est trop deplacee
]]if( rDist > self._namedParams.rDist_SuiviMax ) then
                        do
                            if( not DEC_ConnaissanceAgent_EstValide( F_Pion_GeteniEnCours( self._namedParams.tAmi ) ) ) then
                                --[[// la section est trop loin pour appuyer
]]--[[// elle doit re suivre l'unite appuyee
]]self.ePhase = eSuivreUnite
                            else
if( not S_Geometrie_EstProchePosition( DEC_ConnaissanceAgent_Position( F_Pion_GeteniEnCours( self._namedParams.tAmi ) ), self._namedParams.tAmi:DEC_Agent_Position(), self._namedParams.rDist_SuiviMax ) ) then
                                    do
                                        --[[// Si l'unite appuye traite un ennemi mais qu'elle n'intervient
]]--[[// pas encore dessus, on se repositionne
]]self.ePhase = eAppuyer
                                        DEC_Trace( "Ennemi en Cours mais unite eloignee" )
                                    end
                                end
                            end

                            if( self.ePhase ~= eSePoster ) then
                                do
                                    self.eAction = eActionEnCours
                                                                        self:SendFeedback( self.ePhase )
                                    do return end

                                end
                            end

                        end
                    end

                    Activate( self.activations.ACT_RC, 1, { eRC_EnAppui, } )
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )
                    --[[// on observe la direction dangereuse
]]local mission = DEC_GetMission( myself )
                    Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { DEC_GetDirectionDanger( mission ), } )
                    --[[// la section debarque		
]]if( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                        Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, {} )
                    end

                    Activate( self.activations.ACT_Misc_UnitesEnAppui_EnPosition, 1, {} )--[[// on indique a l'unites appuyee que la section
]]--[[// est en position d'appui
]]
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

                self:SendFeedback( self.ePhase )
        do return end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement sur un point d'appui par rapport a un ami
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_INF_RejoindrePositionAppui"
{
    feedbacks = { { { "done_BEH_Dep_Pion_INF_RejoindrePositionAppui" }, "BEH_Dep_Pion_INF_RejoindrePositionAppui" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_INF_RejoindrePositionAppui, {value} ) end,
    activations =
    {
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.tAmi = self.params[1]
        self._namedParams.repEni = self.params[2]
        self._namedParams.typeProg = self.params[3]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.ptAppui = self.ptAppui or S_CalculerPositionAppui( self._namedParams.tAmi, M_DISTANCE_APPUIS() )
        if( ModuleBegins() ) then
            do
            end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptAppui, self._namedParams.typeProg, eTypeItiAppui, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Demande de tir d 'appui
]]--[[//  Gere uniquement le tir d'appui sur un eni
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Feu_Pion_INF_TirAppui"
{
    feedbacks = { { { "done_BEH_Feu_Pion_INF_TirAppui" }, "BEH_Feu_Pion_INF_TirAppui" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Feu_Pion_INF_TirAppui, {value} ) end,
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", { "done_ACT_MAJ_EnnemiEnCours" } },
        { "BEH_Feu_Pion_INF_TirCouverture_Fixe", { "done_BEH_Feu_Pion_INF_TirCouverture_Fixe" } },
        { "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", { "done_BEH_Feu_Pion_INF_ConduireLesFeux_Sur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
        self.eActionDeplacement = self.eActionDeplacement or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        self.eActionFixer = self.eActionFixer or eActionEnCours
        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
        if( self.eAction == eActionImpossible and not bSpontanee ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) or self.eAction == eActionEffectuee ) then
            self:SendFeedback( self.eAction )
            Halt( self )
            do return end
        end

        if( self.eActionFixer == eActionEnCours ) then
            Activate( self.activations.BEH_Feu_Pion_INF_TirCouverture_Fixe, 1, { self._namedParams.ksEni, } )
self.done_BEH_Feu_Pion_INF_TirCouverture_Fixe = function( self, _, v ) self.eActionFixer = v[1] end
        end

        Activate( self.activations.BEH_Feu_Pion_INF_ConduireLesFeux_Sur, 1, { self._namedParams.ksEni, eFormationTir_Debarque, } )
self.done_BEH_Feu_Pion_INF_ConduireLesFeux_Sur = function( self, _, v ) self.eAction = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Appuyer, "ACT_Misc_Pion_Ambiance", nodes.ACT_Misc_Pion_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Appuyer, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Appuyer, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Appuyer, "BEH_Dep_Suivre_Elastique", nodes.BEH_Dep_Suivre_Elastique }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Appuyer, "BEH_Dep_Pion_INF_GererPhaseAppuyer", nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_Ordre_Pion_INF_AC_FaireRalentir", nodes.ACT_Ordre_Pion_INF_AC_FaireRalentir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_Dep_Pion_INF_Arret", nodes.ACT_Dep_Pion_INF_Arret }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "BEH_Dep_Pion_INF_RejoindrePositionAppui", nodes.BEH_Dep_Pion_INF_RejoindrePositionAppui }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererPhaseAppuyer, "ACT_Misc_UnitesEnAppui_EnPosition", nodes.ACT_Misc_UnitesEnAppui_EnPosition }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_RejoindrePositionAppui, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_INF_TirAppui, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_INF_TirAppui, "BEH_Feu_Pion_INF_TirCouverture_Fixe", nodes.BEH_Feu_Pion_INF_TirCouverture_Fixe }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_INF_TirAppui, "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", nodes.BEH_Feu_Pion_INF_ConduireLesFeux_Sur }

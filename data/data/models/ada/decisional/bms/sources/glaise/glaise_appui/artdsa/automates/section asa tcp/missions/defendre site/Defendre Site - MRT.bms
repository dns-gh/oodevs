includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artdsa/automates/section asa tcp/missions/defendre site/Defendre Site - MRT.bms"] = true

local emptyTable = emptyTable

node "MIS_Automate_MRT_ASA_MISTRAL_DefendreSite"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ASA_MISTRAL_DefendreSite" }, "MIS_Automate_MRT_ASA_MISTRAL_DefendreSite" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreSiteAListe", { "done_BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreSiteAListe" } },
        { "BEH_Mission_Automate_AssignerStationnerA", { "done_BEH_Mission_Automate_AssignerStationnerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        --[[// variables persistantes
]]self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsDefendreSite = self.eEtatMissionsDefendreSite or eActionEnCours
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.barycentreZone = self.barycentreZone or S_Geometrie_BarycentreZone( self._namedParams.mission.zone_ )
        self.listePoints = self.listePoints or {}
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeSectionMistral = self.listeSectionMistral or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "SatcpMistral" )
        self.listeSectionMistralPourMissionDefendreSite = self.listeSectionMistralPourMissionDefendreSite or {}
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listeSectionMistral ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                else
do
                        do
                            local compteur = 0
                             do
                                local _continue = true
                                local switch_1 = self._namedParams.mission.modeDeploiement_
                                    if switch_1 == deploiementOmnidirectionnelEnCarreAutourZone then
                                        for _,x in pairs( self.listeSectionMistral or emptyTable ) do
                                        local _continue = true
do
                                                if( compteur ~= 4 ) then
                                                    DIA_PushBack( self.listeSectionMistralPourMissionDefendreSite, x )
                                                else
                                                    break
                                                end

                                                                                                compteur = compteur + 1
                                            end

                                        end

                                        self.listePoints = DEC_Geometrie_PosDeploiementASAOmni( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS() * 0.707 )
                                        _continue = false
                                    elseif switch_1 == deploiementOmnidirectionnelEnTriangleAutourZone then
                                        for _,x in pairs( self.listeSectionMistral or emptyTable ) do
                                        local _continue = true
do
                                                if( compteur ~= 3 ) then
                                                    DIA_PushBack( self.listeSectionMistralPourMissionDefendreSite, x )
                                                else
                                                    break
                                                end

                                                                                                compteur = compteur + 1
                                            end

                                        end

                                        self.listePoints = DEC_Geometrie_PosDeploiementASAOmni( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, ( M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS() / 2 ) * 1.155 )
                                        _continue = false
                                    elseif switch_1 == deploiementNasseTroisSections then
                                        for _,x in pairs( self.listeSectionMistral or emptyTable ) do
                                        local _continue = true
do
                                                if( compteur ~= 3 ) then
                                                    DIA_PushBack( self.listeSectionMistralPourMissionDefendreSite, x )
                                                else
                                                    break
                                                end

                                                                                                compteur = compteur + 1
                                            end

                                        end

                                        self.listePoints = DEC_Geometrie_PosDeploiementMistralNasse( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, self._namedParams.mission.angle_, M_POLY_DOCTRINE_DISTANCE_POINT_A_DEFENDRE(), M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS(), self._namedParams.mission.directionEnnemi_ )
                                        _continue = false
                                    elseif switch_1 == deploiementNasseQuatreSections then
                                        for _,x in pairs( self.listeSectionMistral or emptyTable ) do
                                        local _continue = true
do
                                                if( compteur ~= 4 ) then
                                                    DIA_PushBack( self.listeSectionMistralPourMissionDefendreSite, x )
                                                else
                                                    break
                                                end

                                                                                                compteur = compteur + 1
                                            end

                                        end

                                        self.listePoints = DEC_Geometrie_PosDeploiementMistralNasse( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, self._namedParams.mission.angle_, M_POLY_DOCTRINE_DISTANCE_POINT_A_DEFENDRE(), M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS(), self._namedParams.mission.directionEnnemi_ )
                                        _continue = false
                                    elseif switch_1 == deploiementDoubleRideau then
                                        self.listeSectionMistralPourMissionDefendreSite = self.listeSectionMistral
                                        self.listePoints = DEC_Geometrie_PosDeploiementDoubleRideau( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, M_POLY_DOCTRINE_DISTANCE_POINT_A_DEFENDRE(), M_POLY_DOCTRINE_DISTANCE_ENTRE_RIDEAUX(), M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS(), DEC_GetDirectionEnnemi( self._namedParams.mission ) )
                                        _continue = false
                                    elseif switch_1 == deploiementSimpleRideau then
                                        for _,x in pairs( self.listeSectionMistral or emptyTable ) do
                                        local _continue = true
do
                                                if( compteur ~= 4 ) then
                                                    DIA_PushBack( self.listeSectionMistralPourMissionDefendreSite, x )
                                                else
                                                    break
                                                end

                                                                                                compteur = compteur + 1
                                            end

                                        end

                                        self.listePoints = DEC_Geometrie_PosDeploiementMistralNasse( #( self.listeSectionMistralPourMissionDefendreSite ), self.barycentreZone, 180, M_POLY_DOCTRINE_DISTANCE_POINT_A_DEFENDRE(), M_POLY_DOCTRINE_DISTANCE_MAX_ENTRE_SECTIONS(), self._namedParams.mission.directionEnnemi_ )
                                        _continue = false
                                                                        end
                                end

                        end
--[[//construction d'une liste de 4 pions parmis listeSectionMistral
]]--[[//sqrt( 2 ) / 2 = 0.707      
]]--[[//1.155 = 2 / sqrt( 3 )
]]--[[//c'est un cas particulier du déploiement en nasse => nasse à 180°       
]]
                    end
                end

                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
        end

         do
            local _continue = true
--[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]--[[//controle des creations de missions
]]--[[//Defendre zone à partir de positions calculées
]]--[[//Le pc va toujours stationner au centre de la zone défendue
]]            local switch_1 = self.ePhase
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsDefendreSite == eActionImpossible ) then
                        do
                            DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsDefendreSite == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listeSectionMistral ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsDefendreSite = v[1] end
                    if( not DIA_IsListEmpty( self.listeSectionMistralPourMissionDefendreSite ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreSiteAListe, 1, { ePhase_MRT, self.listeSectionMistralPourMissionDefendreSite, self.listePoints, self._namedParams.mission.zone_, eEtatDeploiement_omnidirectionnel, } )
                    end

                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerA, 1, { ePhase_MRT, self.pionPC, self.barycentreZone, } )
                    _continue = false
                elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                
                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, "BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreSiteAListe", nodes.BEH_Medo_Automate_ASA_MISTRAL_AssignerMissionsDefendreSiteAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_MISTRAL_DefendreSite, "BEH_Mission_Automate_AssignerStationnerA", nodes.BEH_Mission_Automate_AssignerStationnerA }

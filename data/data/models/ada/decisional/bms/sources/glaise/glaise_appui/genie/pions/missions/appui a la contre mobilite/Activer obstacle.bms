includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/appui a la contre mobilite/Activer obstacle.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_GEN_ActiverObstacle
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_GEN_ActiverObstacle"
{
    feedbacks = { { { "done_MIS_Pion_GEN_ActiverObstacle" }, "MIS_Pion_GEN_ActiverObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_GEN_ActiverObstacle, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obj_Pion_GEN_ActiverObstacle", { "done_ACT_Obj_Pion_GEN_ActiverObstacle" } },
        { "ACT_Obj_Pion_GEN_ValoriserObstacle", { "done_ACT_Obj_Pion_GEN_ValoriserObstacle" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.mis.obstacle_ ) ) then
            Halt( self )
            do return end
        end

        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.ptObst = self.ptObst or nil
        self.localisationObstacle = self.localisationObstacle or nil--[[// localisation de l'obstacle
]]
        self.bObst = self.bObst or false
        self.eValidite = self.eValidite or nil
        --[[//-----------------------------------------------------------------
]]--[[// Verification de la faisabilité
]]--[[//-----------------------------------------------------------------
]]if( not DEC_Agent_PeutActiverObjet( DEC_ConnaissanceObjet_Type( self._namedParams.mis.obstacle_, self.eValidite ) ) ) then
            do
                Activate( self.activations.ACT_RC, 1, { eRC_AttenteRenforcement, } )
                                do return end

            end
--[[// SINON OK pour activer l'objet
]]        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "------------- Activer obstacle -----------------" )
                DEC_SetMission( myself, self._namedParams.mis )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                self.localisationObstacle = S_Obj_Localisation( self._namedParams.mis.obstacle_ )
                if( ( self.localisationObstacle == 0 or self.localisationObstacle == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
--[[// Calcule de la position
]]                end

                if( not DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self.localisationObstacle, self.ptObst ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Squelette de mission
]]--[[//-----------------------------------------------------------------
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    _continue = false
                --[[// Progression 
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.ptObst ) < 800 ) then
                        self.ePhaseMission = eActiverObstacle
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.ptObst, eProgressionReco, eTypeItiMouvement, } )
                    _continue = false
                --[[// Activation de l'obstacle
]]                cases_switch_1[2] = true
elseif switch_1 == eActiverObstacle then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    --[[// Si sauvegarde
]]if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.ptObst ) > 800 ) then
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1.1, { self.ptObst, eProgressionReco, eTypeItiMouvement, } )
                    end

                    --[[// Activation
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eValoriserObstacle
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Obj_Pion_GEN_ActiverObstacle, 1, { self._namedParams.mis.obstacle_, } )
self.done_ACT_Obj_Pion_GEN_ActiverObstacle = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Valorisation de l'obstacle --> SI POSSIBLE
]]                cases_switch_1[3] = true
elseif switch_1 == eValoriserObstacle then
                    --[[// Test si valorisation possible
]]if( not DEC_Agent_PeutValoriserObjet( DEC_ConnaissanceObjet_Type( self._namedParams.mis.obstacle_, self.eValidite ) ) ) then
                        do
                            self.ePhaseMission = eFinMission
                                                        do return end

                        end
--[[// Valorisation
]]                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Obj_Pion_GEN_ValoriserObstacle, 1, { self._namedParams.mis.obstacle_, } )
self.done_ACT_Obj_Pion_GEN_ValoriserObstacle = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                --[[// Fin de la mission
]]                cases_switch_1[4] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[5] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_ActiverObstacle = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "ACT_Obj_Pion_GEN_ActiverObstacle", nodes.ACT_Obj_Pion_GEN_ActiverObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "ACT_Obj_Pion_GEN_ValoriserObstacle", nodes.ACT_Obj_Pion_GEN_ValoriserObstacle }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_ActiverObstacle, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

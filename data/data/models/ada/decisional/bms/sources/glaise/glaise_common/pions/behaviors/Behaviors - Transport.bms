includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/pions/behaviors/Behaviors - Transport.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


include "Glaise/Glaise_Common/Pions/Actions/Actions - Transport.bms"


--[[// *****************************************************************************
]]--[[// BEH_Transport_Pion_Transporter
]]--[[//
]]--[[// Commentaires : Traiter la liste des unités a transporter pour ne retenir que 
]]--[[//                les unites que myself peut effectivement traiter
]]--[[// *****************************************************************************
]]node "BEH_Transport_Pion_Transporter"
{
    feedbacks = { { { "done_BEH_Transport_Pion_Transporter" }, "BEH_Transport_Pion_Transporter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Transport_Pion_Transporter, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Maj_Pions_ObjectifEsquive", { "done_ACT_Maj_Pions_ObjectifEsquive" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC_SurPion", { "done_ACT_RC_SurPion" } },
        { "ACT_Transport_Pion_TransportEmbarquer", { "done_ACT_Transport_Pion_TransportEmbarquer" } },
        { "ACT_Transport_Pion_TransportDebarquer", { "done_ACT_Transport_Pion_TransportDebarquer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.posEmbarquement = self.params[1]
        self._namedParams.posDebarquement = self.params[2]
        self._namedParams.unitesATransporter = self.params[3]
        self._namedParams.avecMateriel = self.params[4]
        self._namedParams.distanceEmbarquement = self.params[5]
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eTransporterAllerEmbarquer
        self.sUnitesATransporter = self.sUnitesATransporter or S_Liste_PionsTransportables( self._namedParams.unitesATransporter, not self._namedParams.avecMateriel )
        self.listeUnitesMissionTransporter = self.listeUnitesMissionTransporter or {}
        self.listeUnitesPretes = self.listeUnitesPretes or {}
        if( ModuleBegins() ) then
if( DEC_Transport_EnCoursDeTransport() ) then
                self.ePhase = eTransporterAllerDebarquer
            end
        end

        if( #( self.sUnitesATransporter ) == 0 ) then
            do
                g_bTransportEnCours = false
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
--[[//on commence le transport quand toutes les unites sont pretes
]]        end

        self.listeUnitesMissionTransporter = {}
        self.listeUnitesMissionTransporter = S_Cherche_Filtre_TypeMission( self.sUnitesATransporter, "T_Mission_Pion_SeFaireTransporter" )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eTransporterAllerEmbarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTransporterEmbarquer
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "Transporter : Impossible Rejoindre Point d'embarquemement" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.posEmbarquement, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.posEmbarquement, eProgressionDirect, eTypeItiInfiltration, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eTransporterEmbarquer then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTransporterAllerDebarquer
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                DEC_Trace( "Transporter : Impossible d'embarquer" )
                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
--[[// RC sur les unités qui ont la mission se faire transporter mais qui sont encore trop
]]--[[// loin pour être embarquer. Il faudra les attendre
]]                    end

                    local attendreUnites = false
                    self.listeUnitesPretes = {}
                    for _,x in pairs( self.listeUnitesMissionTransporter or emptyTable ) do
                    local _continue = true
do
                            --[[// si on est à plus de "distanceEmbarquement" de l'unité à transporter,
]]--[[// attendre pour embarquer
]]if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), x:DEC_Agent_Position() ) > self._namedParams.distanceEmbarquement ) then
                                do
                                    attendreUnites = true
                                    Activate( self.activations.ACT_RC_SurPion, 1, { eRC_UniteTropDistante, x, } )
                                end
                            end

                            if( DEC_Geometrie_Distance( self._namedParams.posEmbarquement, x:DEC_Agent_Position() ) > self._namedParams.distanceEmbarquement ) then
                                do
                                    if( not x:DEC_Agent_EstTransporte() ) then
                                        do
                                            attendreUnites = true
                                            Activate( self.activations.ACT_RC_SurPion, 1, { eRC_UniteTropDistante, x, } )
                                        end
                                    end

                                end
                            else
do
                                    Activate( self.activations.ACT_RC_SurPion, 1, { eRC_TransportUnitePrete, x, } )
                                    DIA_PushBack( self.listeUnitesPretes, x )
                                end
                            end

                        end
--[[// embarquement des que les unités sont pretes et a distance inf
]]--[[// à distanceEmbarquement
]]
                    end

                    if( ( #( self.listeUnitesPretes ) ~= 0 ) and not attendreUnites ) then
                        do
                            DEC_Transport_AjouterPions( self.listeUnitesPretes, not self._namedParams.avecMateriel )
                            Activate( self.activations.ACT_Transport_Pion_TransportEmbarquer, 1, emptyTable )
self.done_ACT_Transport_Pion_TransportEmbarquer = function( self, _, v ) self.eEtat = v[1] end
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_TransportEmbarquement, } )
                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eTransporterAllerDebarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_TransportEnCours, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTransporterDebarquer
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                g_bTransportEnCours = false
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Maj_Pions_ObjectifEsquive, 1, { self._namedParams.posDebarquement, } )
                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.posDebarquement, eProgressionDirect, eTypeItiInfiltration, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eTransporterDebarquer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_TransportDebarquement, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTransporterAllerEmbarquer
                                                                do return end

                            end

                        end
                    end

                    if( self.eEtat == eActionImpossible ) then
                        do
                                                        do
                                g_bTransportEnCours = false
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end

                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    Activate( self.activations.ACT_Transport_Pion_TransportDebarquer, 1, { self._namedParams.posDebarquement, } )
self.done_ACT_Transport_Pion_TransportDebarquer = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[4] = true
                end
            end

        g_bTransportEnCours = true
    end,

    destroy = function( self )
                if( DEC_Transport_EnCoursDeTransport() ) then
            DEC_Transport_Annuler()
        end

        g_bTransportEnCours = false
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_Maj_Pions_ObjectifEsquive", nodes.ACT_Maj_Pions_ObjectifEsquive }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_RC_SurPion", nodes.ACT_RC_SurPion }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_Transport_Pion_TransportEmbarquer", nodes.ACT_Transport_Pion_TransportEmbarquer }
connections[ #connections + 1 ] = { nodes.BEH_Transport_Pion_Transporter, "ACT_Transport_Pion_TransportDebarquer", nodes.ACT_Transport_Pion_TransportDebarquer }

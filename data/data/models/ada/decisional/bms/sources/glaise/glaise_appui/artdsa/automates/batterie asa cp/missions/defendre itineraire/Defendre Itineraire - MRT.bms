includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/artdsa/automates/batterie asa cp/missions/defendre itineraire/Defendre Itineraire - MRT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Roland Carol : defendre Itineraire
]]--[[//
]]--[[// Les points de deploiement sont calculés a equidistance sur une liste de points
]]--[[// qui représentent un itineraire
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_MRT_ASA_DefendreItineraire"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ASA_DefendreItineraire" }, "MIS_Automate_MRT_ASA_DefendreItineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ASA_DefendreItineraire, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ASA_AssignerMissionsSurveillerAListe", { "done_BEH_Medo_Automate_ASA_AssignerMissionsSurveillerAListe" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.eEtatMissionsDefendreItineraire = self.eEtatMissionsDefendreItineraire or eActionEnCours
        self.listePointsPourPC = self.listePointsPourPC or DEC_Geometrie_DecouperListePoints( self._namedParams.mission.itineraire_, 0 )
        self.listePoints = self.listePoints or {}
        self.listePointsAvant = self.listePointsAvant or DEC_Geometrie_CreerListePoints()
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.listeSectionRolandCarol = self.listeSectionRolandCarol or S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "SacpRolandCarol" )
        self.listePC = self.listePC or {}
        if( ( self.listePointsPourPC == 0 or self.listePointsPourPC == nil ) ) then
            self.ePhase = eMRT_MissionImpossible
        end

        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listeSectionRolandCarol ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                else
do
                        self.listePoints = DEC_Geometrie_DecouperListePoints( self._namedParams.mission.itineraire_, #( self.listeSectionRolandCarol ) - 1 )
                        if( ( self.listePoints == 0 or self.listePoints == nil ) ) then
                            self.ePhase = eMRT_MissionImpossible
                        end

                    end
                end

                DIA_PushBack( self.listePC, self.pionPC )
                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, {} )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    if( self.eEtatMissionsDefendreItineraire == eActionImpossible ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtatMissionsDefendreItineraire == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[//controle des creations de missions
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listeSectionRolandCarol ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtatMissionsDefendreItineraire = v[1] end
                    --[[//Defendre itineraire à partir de position calculées
]]if( not DIA_IsListEmpty( self.listeSectionRolandCarol ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ASA_AssignerMissionsSurveillerAListe, 1, { ePhase_MRT, self.listeSectionRolandCarol, self.listePoints, } )
                    end

                    --[[//Le pc va toujours stationner au milieu de l'itineraire
]]Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_MRT, self.listePC, DEC_ListePoints_GetAt( self.listePointsPourPC, 0 ), } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if cases_switch_1[2] or switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end
                if not cases_switch_1[1] then
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASA_DefendreItineraire = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreItineraire, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreItineraire, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreItineraire, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreItineraire, "BEH_Medo_Automate_ASA_AssignerMissionsSurveillerAListe", nodes.BEH_Medo_Automate_ASA_AssignerMissionsSurveillerAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASA_DefendreItineraire, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

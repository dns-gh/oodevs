includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/automates/common/Behaviors.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-06-18 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 23/09/05 15:11 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Behaviors.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

include "Common/Automates/Behaviors.bms"

include "Common/Automates/Behaviors/Medo/Behaviors - Medo - INF.bms"

include "Common/Automates/Behaviors/Medo/Behaviors - Medo - ABC.bms"


include "Melee/Inf/Automates/Common/Actions.bms"


include "Melee/Inf/Automates/Common/Behaviors Conduite.bms"


include "Melee/Inf/Automates/Common/Missions/Behaviors.bms"



--[[// *****************************************************************************
]]--[[// BEH_Defaut
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Defaut"
{
    feedbacks = { { { "done_BEH_Defaut" }, "BEH_Defaut" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Defaut, {value} ) end,
    activations =
    {
        { "BEH_Nbc_Automate_GererAlerteNiv4", { "done_BEH_Nbc_Automate_GererAlerteNiv4" } },
        { "BEH_ROE_Automate_GererOrdre", { "done_BEH_ROE_Automate_GererOrdre" } },
        { "BEH_Misc_Automate_GererLesMoyens", { "done_BEH_Misc_Automate_GererLesMoyens" } },
        { "BEH_Rens_Automate_GererSilenceRadio", { "done_BEH_Rens_Automate_GererSilenceRadio" } },
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Ordre_Automate_INF_GererTransporteur", { "done_BEH_Ordre_Automate_INF_GererTransporteur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.nDummy = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// ========================== En embrayé SEULEMENT =========================
]]if( not DEC_Automate_EstEmbraye() ) then
            do return end
        end

        Activate( self.activations.BEH_Nbc_Automate_GererAlerteNiv4, 1, {} )--[[//--------------------------------------------------------------------------
]]--[[// NBC --> alerte de niveau 4
]]--[[//--------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_ROE_Automate_GererOrdre, 1, {} )--[[//--------------------------------------------------------------------------
]]--[[// ROE --> Tir libre, sur riposte, interdit
]]--[[//--------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Misc_Automate_GererLesMoyens, 1, {} )--[[//--------------------------------------------------------------------------
]]--[[// Gestion des pions --> init de la place dans le dispositif
]]--[[//--------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Rens_Automate_GererSilenceRadio, 1, {} )--[[//--------------------------------------------------------------------------
]]--[[// Silence radio
]]--[[//--------------------------------------------------------------------------
]]
        --[[// Lorsque l'automate a une mission	
]]--[[// =========================================================================
]]if( DEC_GetMission( myself ) == nil ) then
            do return end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )--[[// Gestion des Ordres venant du GTIA
]]--[[//-------------------------------------------------------------------------- 	 	
]]
        Activate( self.activations.BEH_Ordre_Automate_INF_GererTransporteur, 1, {} )--[[// Gestion de l'ordre de conduite permettant de recuperer les transporteurs
]]--[[//-------------------------------------------------------------------------- 	 	
]]
    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Gestion de la Fin de mission Automate
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Situation_Automate_INF_FinDeMission_Sur"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_FinDeMission_Sur" }, "BEH_Situation_Automate_INF_FinDeMission_Sur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_FinDeMission_Sur, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_FinDeMission", { "done_BEH_Situation_Automate_INF_FinDeMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            DEC_Trace( DEC_GetSzName( self._namedParams.pion ) .. " : fin de mission." )
        end

        Activate( self.activations.BEH_Situation_Automate_INF_FinDeMission, 1, {} )
    end,

}

node "BEH_Situation_Automate_INF_FinDeMission"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_FinDeMission" }, "BEH_Situation_Automate_INF_FinDeMission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_FinDeMission, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Revoir	 
]]self.lst_Pions_EnTete = self.lst_Pions_EnTete or S_ObtenirTousPionsDe( eEtatEchelon_Premier )
        --[[// On laisse un pas de temps pour la MAJ de S_PionsEnTete()	
]]if( #( self.lst_Pions_EnTete ) == 0 ) then
            do
                                do
                end

                self.lst_Pions_EnTete = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
                                self:SendFeedback( eActionEnCours )
                do return end

            end
        end

        local rFinDeMission = #( self.lst_Pions_EnTete ) + 1
        do
        end

        do
        end

        if( GetActivity() >= rFinDeMission ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

                self:SendFeedback( eActionEnCours )
        do return end

    end,

}

node "BEH_Ordre_Automate_INF_GererTransporteur"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_INF_GererTransporteur" }, "BEH_Ordre_Automate_INF_GererTransporteur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_INF_GererTransporteur, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// =============================================================================
]]--[[// Reception d'un ordre de l'ANNIBAS
]]--[[// =============================================================================
]]local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or {} ) do
        local _continue = true
do
                local ordre = x
                local repOrdre = ordre
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Rep_OrderConduite_RecupererTransporteurs" then
                            for _,x_pion in pairs( --[[// ----------------------------------------------------------------------------
]]--[[// Fin mission
]]--[[// ----------------------------------------------------------------------------
]]DEC_Automate_PionsAvecPC() or {} ) do
                            local _continue = true
                                DEC_CDT_DonneOrdreConduiteAPion( x_pion, Rep_OrderConduite_RecupererTransporteurs )

                            end

                            Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
                            _continue = false
                                                cases_switch_1[1] = true
                        end
                    end

            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Nbc_Automate_GererAlerteNiv4", nodes.BEH_Nbc_Automate_GererAlerteNiv4 }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_ROE_Automate_GererOrdre", nodes.BEH_ROE_Automate_GererOrdre }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Misc_Automate_GererLesMoyens", nodes.BEH_Misc_Automate_GererLesMoyens }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Rens_Automate_GererSilenceRadio", nodes.BEH_Rens_Automate_GererSilenceRadio }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.BEH_Defaut, "BEH_Ordre_Automate_INF_GererTransporteur", nodes.BEH_Ordre_Automate_INF_GererTransporteur }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_INF_GererTransporteur, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_FinDeMission_Sur, "BEH_Situation_Automate_INF_FinDeMission", nodes.BEH_Situation_Automate_INF_FinDeMission }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - ASS.bms"] = true




--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ptZone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_ReconnaitreZoneDeploiement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_ReconnaitreZoneDeploiement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Zone
]]DEC_Copie_Point_Mission( self._namedParams.ptZone, self.missionPion, "positionDeploiement_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ASS_AcquerirObjectifsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ASS_AcquerirObjectifsA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ptDeploiement = self.params[3]
        self._namedParams.locZone = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_RATAC_AcquerirObjectifs" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_RATAC_AcquerirObjectifs" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Point d'installation
]]DEC_Copie_Point_Mission( self._namedParams.ptDeploiement, self.missionPion, "positionDeploiement_" )
        --[[// Zone
]]DEC_Copie_Localisation_Mission( self._namedParams.locZone, self.missionPion, "zoneAObserver_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------	
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_ASS_DLOAcquerirObjectifsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_ASS_DLOAcquerirObjectifsA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.automate = self.params[4]
        self._namedParams.eEtatEchelon = self.params[5]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_EO_AcquerirObjectifs" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ASS_EO_AcquerirObjectifs" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        if( ModuleBegins() ) then
            DEC_Trace( "Assigne mission 'AcquerirObjectifs' a " .. DEC_GetSzName( self._namedParams.pion ) )
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Zone
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zoneAObserver_" )
        --[[// Unite à appuyer
]]DEC_AssignMissionParameter( self.missionPion, "uniteAAppuyer_", self._namedParams.automate )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------	
]]
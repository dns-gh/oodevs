includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/appui a la mobilite/Equiper-exploiter site franchissement.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_GEN_EquiperExploiterSiteFranchissement
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_GEN_EquiperExploiterSiteFranchissement"
{
    activations =
    {
        { "BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mis )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
--[[//-----------------------------------------------------------------
]]--[[// Validité de l'objet
]]--[[//-----------------------------------------------------------------
]]        end

        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.mis.siteFranchissement_ ) ) then
            do
                DEC_Warning( eRC_MissionImpossible )
                                Halt( self )
                do return end

            end
--[[//-----------------------------------------------------------------
]]--[[// Comportement générique
]]--[[//-----------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, 1, { self._namedParams.mis.siteFranchissement_, self._namedParams.mis.typePontage_, self._namedParams.mis.pointRegroupement_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement"
{
    activations =
    {
        { "ACT_Info_Trace", {} },
        { "ACT_Warning", {} },
        { "BEH_Ordre_Inopine", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Dep_ProgressionVers", {} },
        { "BEH_Obj_Pion_GEN_AmenagerBerges", {} },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", {} },
        { "BEH_Objet_Pion_GEN_EquiperSite", {} },
        { "ACT_Objet_Pion_GEN_FaireFranchir", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.siteFranchissement = self.params[1]
        self._namedParams.type = self.params[2]
        self._namedParams.ptRegroupement = self.params[3]
    end,

    activate = function( self )
                self.ePhase = self.ePhase or ePreparerMission
        self.eEtat = self.eEtat or eActionEnCours
        self.ptObjet = self.ptObjet or nil
        self.genObs = self.genObs or DEC_CreerDIAThing( "T_GenObstacle_Local" )
        --[[//-----------------------------------------------------------------
]]--[[// Vérification de la validité du site (si il a été reconnu ou non)
]]--[[//-----------------------------------------------------------------
]]if( not DEC_ConnaissanceObjet_EstReconnu( self._namedParams.siteFranchissement ) ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "---- SITE NON RECONNU ---", } )
                Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossible, } )
                self.ePhase = eFinMission
                                do return end

            end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "------ MIS Equiper exploiter : Début -------" )
                --[[// Calcule position
]]self.ptObjet = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( DEC_ConnaissanceObjet_Localisation( self._namedParams.siteFranchissement ) )
                if( ( self.ptObjet == 0 or self.ptObjet == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                        self.ePhase = eFinMission
                                                do return end

                    end
--[[// Init 
]]                end

                if( self._namedParams.type == eFranchissement_Continu ) then
                    self.genObs:Settype_obstacle_( eTypeObjectPontFlottantContinu )
                else
                    self.genObs:Settype_obstacle_( eTypeObjectPontFlottantDiscontinu )
                end

                self.genObs:Setloc_obstacle_( DEC_ConnaissanceObjet_Localisation( self._namedParams.siteFranchissement ) )
            end
--[[//-----------------------------------------------------------------
]]--[[// Squelette de mission
]]--[[//-----------------------------------------------------------------
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eProgresser
                    _continue = false
                --[[// Progression
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eAmenagerBerges
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.ptObjet, eProgressionReco, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                --[[// Aménagement des berges - MIA: nécéssaire?
]]                cases_switch_1[2] = true
elseif switch_1 == eAmenagerBerges then
                    StartActivateOverride( self, self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eRealiserObstacle
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Obj_Pion_GEN_AmenagerBerges, 1, setmetatable( { self._namedParams.siteFranchissement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                --[[// Realisation du "pont flottant" continu ou discontinu - vu de l'esprit
]]                cases_switch_1[3] = true
elseif switch_1 == eRealiserObstacle then
                    --[[// Réalisation du ou des ponts flottants
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eAttendre
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Objet_Pion_GEN_EquiperSite, 1, setmetatable( { self.genObs, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                --[[// Le pion doit attendre que tous les autres soient passés pour quitter sa position !
]]                cases_switch_1[4] = true
elseif switch_1 == eAttendre then
                    StopActivateOverride( self, self.activations.ACT_MAJ_EtatPhaseMission, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnFranchissement, } )
                    Activate( self.activations.ACT_Objet_Pion_GEN_FaireFranchir, 1, {} )--[[// tj phase arrivee sur position
]]--[[// seulement RC pour l'instant
]]
                    _continue = false
                --[[// Fin de la mission
]]                cases_switch_1[5] = true
elseif switch_1 == eFinMission then
                    StopActivateOverride( self, self.activations.ACT_MAJ_EtatPhaseMission, { eEtatPhaseMission_ArriveSurLocalisation, } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    --[[// Tomber en garde
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            if( DEC_ConnaissanceObjet_EstValide( myself.objMisEnCours_ ) ) then
                                DEC_DetruireObjetSansDelais( myself.objMisEnCours_ )
                            end

                            Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.ptRegroupement, eProgressionReco, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[6] = true
                end
            end

--[[// Cas où l'opérateur donne une mission au mission sans lui ordonner d'interrompre sa mission.
]]    end,

    destroy = function( self )
                if( DEC_ConnaissanceObjet_EstValide( myself.objMisEnCours_ ) ) then
            DEC_DetruireObjetSansDelais( myself.objMisEnCours_ )
        end

        DEC_DetruireDIAThing( self.genObs )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Obj_Pion_GEN_AmenagerBerges
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// Révision MIA
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Obj_Pion_GEN_AmenagerBerges"
{
    activations =
    {
        { "ACT_Obj_Pion_GEN_AmenagerBerges", {} },
        { "ACT_Info_Trace", {} },
        { "ACT_Misc_Delai", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.siteFranchissment = self.params[1]
    end,

    activate = function( self )
        self.eEtatSansMATS = self.eEtatSansMATS or eActionEnCours
        self.eEtatAvecMATS = self.eEtatAvecMATS or eActionEnCours
        --[[// ------------------------------------------------------------------------
]]--[[// Init
]]--[[// ------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local eValid = nil
                --[[// Si les berges sont aménagées, on arrêt tout de suite le comportement
]]if( not DEC_ConnaissanceObjet_BergesAAmenagerSiteFranchissement( self._namedParams.siteFranchissment, eValid ) ) then
                    do
                        DEC_Trace( "---- Berges déjà aménagées -----" )
                                                self.params.__returnValue = eActionEffectuee
                        Halt( self )
                        do return end

                    end
                end

            end
--[[// ------------------------------------------------------------------------
]]--[[// Aménagement des berges pendant le délais calculer. Cette action 
]]--[[// ne fait que des CRs
]]--[[// ------------------------------------------------------------------------
]]--[[// juste CR début/fin
]]        end

        Activate( self.activations.ACT_Obj_Pion_GEN_AmenagerBerges, 1, {} )
        --[[// ------------------------------------------------------------------------
]]--[[// Conditions de terminaison
]]--[[// ------------------------------------------------------------------------
]]if( self.eEtatSansMATS == eActionEffectuee or self.eEtatAvecMATS == eActionEffectuee ) then
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// ------------------------------------------------------------------------
]]--[[// Si on a des renforts MATS on ne bloque pas pour autant la mission
]]--[[// ------------------------------------------------------------------------
]]if( S_Pion_GEN_EstRenforceParMATS() ) then
            do
                Activate( self.activations.ACT_Info_Trace, 1, { "***!! RENFORCEMENT MATS !!***", } )
                Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, M_DOCTRINE_Pion_GEN_DELAI_AMENAGEMENTBERGES(), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatAvecMATS = v else rawset( t, k, v ) end end } ) )
            end
--[[// ------------------------------------------------------------------------
]]--[[// Si on n'a pas de MATS on ne bloque pas pour autant la mission
]]--[[// On aménage qd même les berges MAIS délais 2x plus long
]]--[[// ------------------------------------------------------------------------
]]        end

        Activate( self.activations.ACT_Info_Trace, 1, { "***!! Pas de renforcement MATS !!***", } )
        Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 2, M_DOCTRINE_Pion_GEN_DELAI_AMENAGEMENTBERGES() * 2, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatSansMATS = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// ACT_Obj_Pion_GEN_AmenagerBerges
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Obj_Pion_GEN_AmenagerBerges"
{
    create = function( self )
    end,

    select = function( self )
        --[[// ------------------------------------------------------------------------
]]--[[// Init
]]--[[// ------------------------------------------------------------------------
]]        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_DebutAmenagementBerges )
                else
                    DEC_Message( eRC_DebutAmenagementBerges )
                end

            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinAmenagementBerges )
            else
                DEC_Message( eRC_FinAmenagementBerges )
            end

        end

    end,

}

--[[// *****************************************************************************
]]--[[// BEH_Objet_Pion_GEN_EquiperSite
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Objet_Pion_GEN_EquiperSite"
{
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_RC", {} },
        { "ACT_Obj_Pion_GEN_RealiserSite", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.genObs = self.params[1]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Organisation chantier, verification renfort, brechage et 
]]--[[// desorganisation chantier
]]--[[//-----------------------------------------------------------------
]]        end

        if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( self._namedParams.genObs:Gettype_obstacle_() ) ) ) then
            do
                Activate( self.activations.ACT_RC, 1, { eRC_AttenteRenforcement, } )
                                do return end

            end
--[[// SINON OK pour construire l'objet
]]--[[//-----------------------------------------------------------------
]]--[[// En fonction du type d'objet...
]]--[[//-----------------------------------------------------------------
]]        end

        Activate( self.activations.ACT_Obj_Pion_GEN_RealiserSite, 1, setmetatable( { self._namedParams.genObs:Getloc_obstacle_(), self._namedParams.genObs:Gettype_obstacle_(), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ****************************************************************************
]]--[[// ACT_Obj_Pion_GEN_RealiserSite
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "ACT_Obj_Pion_GEN_RealiserSite"
{
    actuators =
    {
        obstacle = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.loc = self.params[1]
        self._namedParams.eTypeObjet = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.eActionObjet = self.eActionObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bInit = self.bInit or false
        self.act = self.act or 0
        --[[//-----------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_OrganisationChantier )
                else
                    DEC_Message( eRC_OrganisationChantier )
                end

            end
--[[//-----------------------------------------------------------------
]]--[[// Début travaux
]]--[[//-----------------------------------------------------------------
]]        end

        if( not self.bInit and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                self.act = DEC_StartCreerObjet( myself.objMisEnCours_, S_TypeObject_ToString( self._namedParams.eTypeObjet ), self._namedParams.loc )
                actionCallbacks[ self.act ] = function( arg ) self.eActionObjet = arg end
                actionKnowledgeCallbacks[ self.act ] = function( arg ) myself.objMisEnCours_ = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

                self.bInit = true
            end
--[[//-----------------------------------------------------------------
]]--[[// RC éventuels
]]--[[//-----------------------------------------------------------------
]]        end

         do
            local _continue = true
            local switch_1 = self.eActionObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetTerminee then
                    DEC_Trace( "  fin travaux " )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                                        self.params.__returnValue = eActionEffectuee
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation
                or switch_1 == eActionObjetPasDeCapacite
                or switch_1 == eActionObjetImpossible then
                    DEC_Trace( "  travaux impossible " )
                                        self.params.__returnValue = eActionEffectuee
                    do return end

                    _continue = false
                                end
            end
--[[//-----------------------------------------------------------------
]]--[[// Reprise si suspendu
]]--[[//-----------------------------------------------------------------
]]
        if( self.bSuspendu and DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            do
                DEC_ReprendAction( self.act )
                self.bSuspendu = false
            end
        end

    end,

    deselect = function( self )
                DEC_PauseAction( self.act )
        self.bSuspendu = true
    end,

    destroy = function( self )
                self.act = DEC_StopAction( self.act )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Objet_Pion_GEN_FaireFranchir
]]--[[//
]]--[[// Commentaires: Il faudrait rajouter ici la notion d'animation actif du site
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Objet_Pion_GEN_FaireFranchir"
{
    create = function( self )
    end,

    select = function( self )
        --[[// ------------------------------------------------------------------------
]]--[[// Init
]]--[[// ------------------------------------------------------------------------
]]        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_DebutExploitationSiteFranchissement )
                else
                    DEC_Message( eRC_DebutExploitationSiteFranchissement )
                end

            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinExploitationSiteFranchissement )
            else
                DEC_Message( eRC_FinExploitationSiteFranchissement )
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_EquiperExploiterSiteFranchissement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_GEN_AmenagerBerges, "ACT_Obj_Pion_GEN_AmenagerBerges", nodes.ACT_Obj_Pion_GEN_AmenagerBerges }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_GEN_AmenagerBerges, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_GEN_AmenagerBerges, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "BEH_Obj_Pion_GEN_AmenagerBerges", nodes.BEH_Obj_Pion_GEN_AmenagerBerges }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "BEH_Objet_Pion_GEN_EquiperSite", nodes.BEH_Objet_Pion_GEN_EquiperSite }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement, "ACT_Objet_Pion_GEN_FaireFranchir", nodes.ACT_Objet_Pion_GEN_FaireFranchir }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperSite, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_EquiperSite, "ACT_Obj_Pion_GEN_RealiserSite", nodes.ACT_Obj_Pion_GEN_RealiserSite }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_EquiperExploiterSiteFranchissement, "BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement", nodes.BEH_Objet_Pion_GEN_EquiperExploiterPointFranchissement }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/log/pions/missions/Convoyer.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// MIS_Pion_LOG_Convoyer
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// new MIA
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_LOG_Convoyer"
{
    feedbacks = { { { "done_MIS_Pion_LOG_Convoyer" }, "MIS_Pion_LOG_Convoyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_LOG_Convoyer, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Dep_LOG_Suivre", { "done_BEH_Dep_LOG_Suivre" } },
        { "ACT_Misc_Pion_LOG_Charger", { "done_ACT_Misc_Pion_LOG_Charger" } },
        { "ACT_Misc_Pion_LOG_Decharger", { "done_ACT_Misc_Pion_LOG_Decharger" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eTestConvoyerStep_DeplacementVersPointChargement
        self.eEtat = self.eEtat or eActionEnCours
        self.pionPCRavitaillant = self.pionPCRavitaillant or DEC_Ravitaillement_Convoi_Ravitailleur()
        self.pionPCRavitaille = self.pionPCRavitaille or DEC_Ravitaillement_Convoi_Ravitaille()
        self.pionPCConvoyant = self.pionPCConvoyant or DEC_Ravitaillement_Convoi_Convoyeur()
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                DEC_Ravitaillement_Convoi_FinMission()
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        if( ModuleBegins() ) then
            do
                if( DEC_Ravitaillement_Convoi_DechargementEffectue() ) then
                    self.ePhase = eTestConvoyerStep_DeplacementRetour
                else
if( DEC_Ravitaillement_Convoi_ChargementEffectue() ) then
                        self.ePhase = eTestConvoyerStep_DeplacementVersPointDechargement
                    else
                        self.ePhase = eTestConvoyerStep_DeplacementVersPointChargement
                    end
                end

            end
        end

         do
            local _continue = true
--[[// Déplacement
]]--[[// Chargement
]]--[[// Aller
]]--[[// Déchargement
]]--[[// Retour
]]            local switch_1 = self.ePhase
                if switch_1 == eTestConvoyerStep_DeplacementVersPointChargement then
                    Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DeplacementVersPointChargement, } )
                    Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { self.pionPCRavitaillant, 500, 900, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.pionPCRavitaillant:DEC_Agent_Position() ) < 500 ) then
                        self.ePhase = eTestConvoyerStep_Chargement
                    end

                    _continue = false
                elseif switch_1 == eTestConvoyerStep_Chargement then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTestConvoyerStep_DeplacementVersPointDechargement
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Misc_Pion_LOG_Charger, 1, emptyTable )
self.done_ACT_Misc_Pion_LOG_Charger = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eTestConvoyerStep_DeplacementVersPointDechargement then
                    Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DeplacementVersPointDechargement, } )
                    Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { self.pionPCRavitaille, 500, 900, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.pionPCRavitaille:DEC_Agent_Position() ) < 500 ) then
                        self.ePhase = eTestConvoyerStep_Dechargement
                    end

                    _continue = false
                elseif switch_1 == eTestConvoyerStep_Dechargement then
                    Activate( self.activations.ACT_RC, 1, { eRC_Convoi_DechargementEnCours, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eTestConvoyerStep_DeplacementRetour
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Misc_Pion_LOG_Decharger, 1, emptyTable )
self.done_ACT_Misc_Pion_LOG_Decharger = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                elseif switch_1 == eTestConvoyerStep_DeplacementRetour then
                    Activate( self.activations.ACT_RC, 1, { eRC_Convoi_Retour, } )
                    Activate( self.activations.BEH_Dep_LOG_Suivre, 1, { self.pionPCConvoyant, 500, 900, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.pionPCConvoyant:DEC_Agent_Position() ) < 500 ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                            DEC_Ravitaillement_Convoi_FinMission()
                        end
                    end

                    _continue = false
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_LOG_Suivre
]]--[[//
]]--[[// Commentaires: suivre une unite ami
]]--[[// 		- S'arrete a distanceMin du pion suivit
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_LOG_Suivre"
{
    feedbacks = { { { "done_BEH_Dep_LOG_Suivre" }, "BEH_Dep_LOG_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_LOG_Suivre, {value} ) end,
    activations =
    {
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ami = self.params[1]
        self._namedParams.rDistanceMin = self.params[2]
        self._namedParams.rDistanceMax = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.itVersAmi = self.itVersAmi or nil
        self.eComportement = self.eComportement or eCreerItineraire
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatObstacle = self.eEtatObstacle or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Résultat d'évènnements externes
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "L'unite suit " .. DEC_GetSzName( self._namedParams.ami ) )
        end

         do
            local _continue = true
--[[//---------------------------------------------------------------------
]]--[[// Rejoindre l'ami. A la fin si l'ami, n'est pas la, le rejoindre à
]]--[[// nouveaux etc.
]]--[[//---------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 1) Creer l'itineraire et mettre à jour la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 3) Rejoindre la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Si on a fini de parcourir l'itineraire on recalcul l'itineraire
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement vers l'unite
]]--[[//-----------------------------------------------------------------------------
]]--[[// Aller au plus vite
]]--[[//-----------------------------------------------------------------------------
]]--[[// L'unité se rapproche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En parallèle, surveiller que l'on est pas près de cette unite.
]]--[[// Dans ce cas on est prêt pour l'intervention
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.eComportement
            local cases_switch_1 = {}
                if switch_1 == eCreerItineraire then
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        do return end
                    end

                    self.itVersAmi = S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
                    self.itVersAmi = DEC_CreerItineraire( self._namedParams.ami:DEC_Agent_Position(), eTypeItiLogistique )
                    self.eComportement = eRejoindre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindre then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                            self.eComportement = eCreerItineraire
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Progresser, 1, { self.itVersAmi, eProgressionDirect, } )
self.done_BEH_Dep_Progresser = function( self, _, v ) self.eEtat = v[1] end
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        self.eEtat = eActionEffectuee
                    end

                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) <= self._namedParams.rDistanceMin ) then
                        do
                            Activate( self.activations.ACT_Dep_SePoster, 1.5, emptyTable )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ami:DEC_Agent_Position(), } )
                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

    destroy = function( self )
                S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_LOG_Convoyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_LOG_Suivre, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "BEH_Dep_LOG_Suivre", nodes.BEH_Dep_LOG_Suivre }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_Misc_Pion_LOG_Charger", nodes.ACT_Misc_Pion_LOG_Charger }
connections[ #connections + 1 ] = { nodes.MIS_Pion_LOG_Convoyer, "ACT_Misc_Pion_LOG_Decharger", nodes.ACT_Misc_Pion_LOG_Decharger }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/functions/Functions - Echelons.bms"] = true

include "bit.lua"

--[[// OPT MIA: Bcp de ces fonctions sont utilisées par l'ABC seulement.
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions subordonnés correspondant aux paramètres
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions subordonnés correspondant aux paramètres
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions subordonnés correspondant au paramètre
]]--[[// Ici on ignore l'aspect opérationnel.
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions subordonnés correspondant au paramètre
]]--[[// Ici on ignore l'aspect opérationnel.
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si le pion passé en paramètre est un pion d'éclairage
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste de tous les pions en 1er echelon d'un automate 
]]--[[// éch d'eclairage compris
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions d'un automate non detruits or Ecl
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions de PE détruit tactiquement ou totalement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions en 2eme echelon ayant la mission "Freiner"
]]--[[// d'un automate  --> pour ABC seulement
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions non detruit d'un automate, peu importe l'échelon
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions detruit d'un automate, peu importe l'échelon
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions detruit d'un automate, peu importe l'échelon
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions non detruit d'un automate, peu importe l'échelon
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions non detruit d'un automate, peu importe l'échelon
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si au moins un des pions de PREMIER ECHELON a pris le contact
]]--[[//-----------------------------------------------------------------------------
]]--[[// meme les pions détruits tactiquement
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si au moins un des de l'échelon est au contact
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions d'un automate non detruits
]]--[[// POUR COORDINNATION AMIE DS COUVRIR 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions d'un automate non detruits
]]--[[//-----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie le pion de queue (en arrière) parmis ceux passés en paramètre
]]--[[// ----------------------------------------------------------------------------
]]--[[// On l'initialise au max                           
]]function S_ObtenirPionsDe( eEtatEchelon, eEtatDestruction )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsAvecPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon and F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_ObtenirPionsDe_SansPC( eEtatEchelon, eEtatDestruction )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsSansPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon and F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_ObtenirTousPionsDe( eEtatEchelon )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsAvecPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_ObtenirTousPionsDe_SansPC( eEtatEchelon )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsSansPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_EstPionEclairant( pion )
    local _returnValue = false
    _returnValue = ( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Eclairage )
    do return _returnValue end
end

function S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsAvecPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) ~= eEtatEchelon_Second and F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_ObtenirPionsEchelonPremierEtSecond( eEtatDestruction )
    local _returnValue = {}
    local listePionsSubordonnes = DEC_Automate_PionsAvecPC()
    local listePionsNonDetruits = {}
    for _,x in pairs( listePionsSubordonnes or {} ) do
    local _continue = true
do
            local pion = x
            if( ( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Second or F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Premier ) and F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction ) then
                DIA_PushFront( listePionsNonDetruits, pion )
            end

        end

    end

    _returnValue = listePionsNonDetruits
    do return _returnValue end
end

function S_ObtenirPionsDetruitsEchelonPremierEtEclairage( )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsAvecPC()
    local listePionsDetruits = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( ( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Eclairage or F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Premier ) and ( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_Tactique or F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_Total ) ) then
                DIA_PushFront( listePionsDetruits, pion )
            end

        end

    end

    _returnValue = listePionsDetruits
    do return _returnValue end
end

function S_ObtenirPionsFreinant( eEtatEchelon, eEtatDestruction )
    local _returnValue = {}
    local selTemp = {}
    local selPions = DEC_Automate_PionsAvecPC()
    for _,x in pairs( selPions or {} ) do
    local _continue = true
do
            local pion = x
            local mission = DEC_GetMission( pion )
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon and mission ~= nil and ( mission:GetType() == "T_Mission_Pion_ABC_Freiner" or mission:GetType() == "T_Mission_Pion_INF_Freiner" ) ) then
                DIA_PushBack( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_ObtenirPionsOperationnels( )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsAvecPC()
    local lstPionsOperationnels = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_None ) then
                DIA_PushFront( lstPionsOperationnels, pion )
            end

        end

    end

    _returnValue = lstPionsOperationnels
    do return _returnValue end
end

function S_ObtenirPionsDetruits( )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsAvecPC()
    local lstPionsDetruits = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                DIA_PushFront( lstPionsDetruits, pion )
            end

        end

    end

    _returnValue = lstPionsDetruits
    do return _returnValue end
end

function S_ObtenirPionsDetruits_SansPC( )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsSansPC()
    local lstPionsDetruits = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                DIA_PushFront( lstPionsDetruits, pion )
            end

        end

    end

    _returnValue = lstPionsDetruits
    do return _returnValue end
end

function S_ObtenirPionsOperationnels_SansPC( )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsSansPC()
    local lstPionsOperationnels = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_None ) then
                DIA_PushFront( lstPionsOperationnels, pion )
            end

        end

    end

    _returnValue = lstPionsOperationnels
    do return _returnValue end
end

function S_ObtenirPionsOperationnelsFiltre( typePion )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsAvecPC()
    local lstPionsOperationnels = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_None and pion:GetType() == typePion ) then
                DIA_PushFront( lstPionsOperationnels, pion )
            end

        end

    end

    _returnValue = lstPionsOperationnels
    do return _returnValue end
end

function S_EstAuContact( )
    local _returnValue = false
    _returnValue = false
    local listePionPE = S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None )
    for _,x in pairs( listePionPE or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatFeu( pion ) == eEtatFeu_Executer ) then
                _returnValue = true
            end

        end

    end

    do return _returnValue end
end

function S_PionsAuContact( eEtatEchelon )
    local _returnValue = false
    _returnValue = false
    for _,x in pairs( DEC_Automate_PionsAvecPC() or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon and F_Pion_GeteEtatFeu( pion ) == eEtatFeu_Executer ) then
                _returnValue = true
            end

        end

    end

    do return _returnValue end
end

function S_ObtenirTousPionsPour( unite, eEtatEchelon )
    local _returnValue = {}
    local listePionsTemp = {}
    local listePionsSubordonnes = DEC_Automate_PionsDeAutomateAvecPC( unite )
    for _,x in pairs( listePionsSubordonnes or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon ) then
                DIA_PushFront( listePionsTemp, pion )
            end

        end

    end

    _returnValue = listePionsTemp
    do return _returnValue end
end

function S_ObtenirPionsOperationnelsPour( unite )
    local _returnValue = {}
    local listePionsTemp = {}
    local listePionsSubordonnes = DEC_Automate_PionsDeAutomateAvecPC( unite )
    for _,x in pairs( listePionsSubordonnes or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_None ) then
                DIA_PushFront( listePionsTemp, pion )
            end

        end

    end

    _returnValue = listePionsTemp
    do return _returnValue end
end

function S_Coordination_PionEnQueue( tache, lstPions, bEnQueue )
    local _returnValue = nil
    local pionEnQueue = nil
    local rDist_LigneOpposee = 0
    local rDist_LigneProche = 1000
    for _,x_pion in pairs( lstPions or {} ) do
    local _continue = true
do
            local rDistanceLAR = DEC_Geometrie_CalculerDistanceLigneAvant( tache, x_pion )
            if( bEnQueue ) then
                do
                    if( rDistanceLAR > rDist_LigneOpposee ) then
                        do
                            rDist_LigneOpposee = rDistanceLAR
                            pionEnQueue = x_pion
                        end
                    end

                end
            else
do
                    if( rDistanceLAR < rDist_LigneProche ) then
                        do
                            rDist_LigneProche = rDistanceLAR
                            pionEnQueue = x_pion
                        end
                    end

                end
            end

        end

    end

    _returnValue = pionEnQueue
    do return _returnValue end
end


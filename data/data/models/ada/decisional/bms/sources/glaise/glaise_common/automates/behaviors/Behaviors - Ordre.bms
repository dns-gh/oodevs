includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/behaviors/Behaviors - Ordre.bms"] = true

--[[// *****************************************************************************
]]--[[// Automate_Conduite
]]--[[//
]]--[[// Commentaires : MIA ca sert à quoi? Pourquoi ne pas utilisé diredtement l'action
]]--[[//                sachant qu'une action peut être startée.
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Automate_DonnerOrdrePause"
{
    feedbacks = { { { "done_BEH_Automate_DonnerOrdrePause" }, "BEH_Automate_DonnerOrdrePause" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Automate_DonnerOrdrePause, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Pause", { "done_ACT_Ordre_Automate_Pause" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
    end,

    activate = function( self )
        Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { self._namedParams.pion, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_RecevoirOrdreInopine
]]--[[//
]]--[[// Commentaires: recevoir un ordre inopine de l'anibas
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_RecevoirOrdreInopine"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" }, "BEH_Ordre_Automate_RecevoirOrdreInopine" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_RecevoirOrdreInopine, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_Interrompre_", { "done_BEH_Ordre_Automate_Interrompre_" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_Ordre_Automate_Attendre_", { "done_BEH_Ordre_Automate_Attendre_" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Ordre_Automate_AmbianceSurete_", { "done_BEH_Ordre_Automate_AmbianceSurete_" } },
        { "BEH_Ordre_Automate_AmbianceVitesse_", { "done_BEH_Ordre_Automate_AmbianceVitesse_" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Recevoir un ordre
]]--[[//-----------------------------------------------------------------------------
]]        local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or {} ) do
        local _continue = true
do
                local ordre = x
                local repOrdre = ordre
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Rep_OrderConduite_Interrompre" then
                            --[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission ( On peut aussi débrayer l'automate )
]]--[[//-----------------------------------------------------------------------------
]]--[[// mission interrompue
]]DEC_Trace( "$ --- ORDRE Interruption mission ---$" )
                            Activate( self.activations.BEH_Ordre_Automate_Interrompre_, 1, {} )
                            Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
                                                        self:SendFeedback( eActionHalt )
                            do return end

                            _continue = false
                        --[[//-----------------------------------------------------------------------------
]]--[[// Attendre
]]--[[//-----------------------------------------------------------------------------
]]elseif switch_1 == "Rep_OrderConduite_AttendreSePoster" then
                            --[[// Mise en attente de la progression
]]DEC_Trace( "$ --- ORDRE Attendre ---$" )
                            g_bOrdreAnibas = true
                            StartActivateOverride( self, self.activations.BEH_Ordre_Automate_Attendre_, 1, {} )
                            _continue = false
                        --[[//-----------------------------------------------------------------------------
]]--[[// Attendre
]]--[[//-----------------------------------------------------------------------------
]]                        cases_switch_1[2] = true
elseif switch_1 == "Rep_OrderConduite_Deboucher"
                        or switch_1 == "Rep_OrderConduite_Poursuivre" then
                            --[[// ordre de poursuivre -> on reprend la progression
]]--[[// la section n est plus en attente d'ordre	
]]DEC_Trace( "$ --- ORDRE Poursuivre ---$" )
                            g_bOrdreAnibas = false
                            StopActivateOverride( self, self.activations.BEH_Ordre_Automate_Attendre_, {} )
                            Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )--[[// Cas des LC
]]
                            _continue = false
                        --[[//-----------------------------------------------------------------------------
]]--[[// Ambiance
]]--[[//-----------------------------------------------------------------------------
]]                        cases_switch_1[3] = true
elseif switch_1 == "Rep_OrderConduite_ChangerAmbiance" then
                            DEC_Trace( "======= Ordre --> Changer ambiance =====" )
                            --[[// Cast
]]local ordreAmbiance = repOrdre
                            if( ordreAmbiance:GetorderConduiteChangerAmbiance_() == eAmbianceMission_Surete ) then
                                Activate( self.activations.BEH_Ordre_Automate_AmbianceSurete_, 1, {} )
                            else
                                Activate( self.activations.BEH_Ordre_Automate_AmbianceVitesse_, 1, {} )--[[//eAmbianceMission_Vitesse
]]
                            end

                            _continue = false
                        --[[//-----------------------------------------------------------------------------
]]--[[// Sinon...
]]--[[//-----------------------------------------------------------------------------
]]                        cases_switch_1[4] = true

                        else
                            _continue = false
                                                end
                    end
--[[// on a finit de traiter l'ordre, on le supprime
]]
                Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
            end

        end

    end,

    destroy = function( self )
                g_bOrdreAnibas = false
    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_Interrompre_()
]]--[[//
]]--[[// Commentaires: comportement starté si ordre inopinné de l'annibas
]]--[[//				 stopé si ordre poursuivre
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_Interrompre_"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_Interrompre_" }, "BEH_Ordre_Automate_Interrompre_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_Interrompre_, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Interrompre", { "done_ACT_Ordre_Automate_Interrompre" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// Le PC peut avoir une mission
]]local listePions = DEC_Automate_PionsAvecPC()
        for _,x in pairs( listePions or {} ) do
        local _continue = true
do
                local pion = x
                Activate( self.activations.ACT_Ordre_Automate_Interrompre, 1, { pion, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_Attendre_()
]]--[[//
]]--[[// Commentaires: comportement starté si ordre inopinné de l'annibas
]]--[[//				 stopé si ordre poursuivre
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_Attendre_"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_Attendre_" }, "BEH_Ordre_Automate_Attendre_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_Attendre_, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Pause", { "done_ACT_Ordre_Automate_Pause" } },
    },

    create = function( self )
    end,

    activate = function( self )
        self.resultatCalcul = self.resultatCalcul or nil
        --[[//S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None );
]]local listePions = DEC_Automate_PionsAvecPC()
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( listePions )
        end

        for _,x in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Calcule sur PE
]]--[[//-------------------------------------------------------------------------
]]listePions or {} ) do
        local _continue = true
do
                local pion = x
                local rDistanceLigne = DEC_Geometrie_CalculerDistanceLigneAvant( self.resultatCalcul, pion )
                --[[// MIA à voir
]]if( rDistanceLigne < 300 ) then
                    Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { pion, } )
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_Poursuivre_()
]]--[[//
]]--[[// Commentaires: comportement starté si ordre inopinné de l'annibas
]]--[[//				 stopé si ordre poursuivre
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_Poursuivre_"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_Poursuivre_" }, "BEH_Ordre_Automate_Poursuivre_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_Poursuivre_, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Continue", { "done_ACT_Ordre_Automate_Continue" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Donner l'ordre de poursuivre
]]--[[//-------------------------------------------------------------------------
]]local listePionsPE = S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None )
        for _,x in pairs( listePionsPE or {} ) do
        local _continue = true
do
                local pion = x
                Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { pion, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_AmbianceSurete_()
]]--[[//
]]--[[// Commentaires: Fait passer ponctuellement les pions en ambiance Surete
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_AmbianceSurete_"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_AmbianceSurete_" }, "BEH_Ordre_Automate_AmbianceSurete_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_AmbianceSurete_, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_PasserEnAmbianceSurete", { "done_ACT_Ordre_Automate_PasserEnAmbianceSurete" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Donner l'ordre de poursuivre
]]--[[//-------------------------------------------------------------------------
]]local listePionsPE = S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None )
        for _,x in pairs( listePionsPE or {} ) do
        local _continue = true
do
                local pion = x
                Activate( self.activations.ACT_Ordre_Automate_PasserEnAmbianceSurete, 1, { pion, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_AmbianceVitesse_()
]]--[[//
]]--[[// Commentaires: Fait passer ponctuellement les pions en ambiance vitesse
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_AmbianceVitesse_"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_AmbianceVitesse_" }, "BEH_Ordre_Automate_AmbianceVitesse_" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_AmbianceVitesse_, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_PasserEnAmbianceVitesse", { "done_ACT_Ordre_Automate_PasserEnAmbianceVitesse" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-------------------------------------------------------------------------
]]--[[// Donner l'ordre de poursuivre
]]--[[//-------------------------------------------------------------------------
]]local listePionsPE = S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None )
        for _,x in pairs( listePionsPE or {} ) do
        local _continue = true
do
                local pion = x
                Activate( self.activations.ACT_Ordre_Automate_PasserEnAmbianceVitesse, 1, { pion, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_Automate_ArretSauvegardeSur(()
]]--[[//
]]--[[// Commentaires: JCR : 11/08/2005 15:37
]]--[[// Desactive la sauvegarde pendant rTime (min) si rTime != 0
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_Automate_ArretSauvegardeSur"
{
    feedbacks = { { { "done_BEH_Ordre_Automate_ArretSauvegardeSur" }, "BEH_Ordre_Automate_ArretSauvegardeSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Automate_ArretSauvegardeSur, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.rTime = self.params[2]
    end,

    activate = function( self )
                self.eEtat = self.eEtat or eActionEnCours
        if( ( self._namedParams.rTime == 0 or self._namedParams.rTime == nil ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Desactive sauvegarde sur pion " .. DEC_GetSzName( self._namedParams.pion ) )
                self._namedParams.pion:S_Mot_EtatDesactiveSauvegarde( true )
            end
        end

        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                self._namedParams.pion:S_Mot_EtatDesactiveSauvegarde( false )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        Activate( self.activations.ACT_Misc_Delai, 1, { 1, self._namedParams.rTime, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtat = v[1] end
    end,

    destroy = function( self )
                self._namedParams.pion:S_Mot_EtatDesactiveSauvegarde( false )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Automate_DonnerOrdrePause, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_AmbianceSurete_, "ACT_Ordre_Automate_PasserEnAmbianceSurete", nodes.ACT_Ordre_Automate_PasserEnAmbianceSurete }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_AmbianceVitesse_, "ACT_Ordre_Automate_PasserEnAmbianceVitesse", nodes.ACT_Ordre_Automate_PasserEnAmbianceVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_ArretSauvegardeSur, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_Attendre_, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_Interrompre_, "ACT_Ordre_Automate_Interrompre", nodes.ACT_Ordre_Automate_Interrompre }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_Poursuivre_, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "BEH_Ordre_Automate_Interrompre_", nodes.BEH_Ordre_Automate_Interrompre_ }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "BEH_Ordre_Automate_Attendre_", nodes.BEH_Ordre_Automate_Attendre_ }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "BEH_Ordre_Automate_AmbianceSurete_", nodes.BEH_Ordre_Automate_AmbianceSurete_ }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Automate_RecevoirOrdreInopine, "BEH_Ordre_Automate_AmbianceVitesse_", nodes.BEH_Ordre_Automate_AmbianceVitesse_ }

includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/actions/Actions - Manoeuvre.bms"] = true

--[[//------------------------------------------------------------------------------
]]--[[// ACT_Conduite_Automate_ReleverUnite
]]--[[//
]]--[[// Commentaires: le premier selectionner est boosté
]]--[[//------------------------------------------------------------------------------
]]node "ACT_Conduite_Automate_ALAT_ReleverUnite"
{
    feedbacks = { { { "done_ACT_Conduite_Automate_ALAT_ReleverUnite" }, "ACT_Conduite_Automate_ALAT_ReleverUnite" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Conduite_Automate_ALAT_ReleverUnite, {value} ) end,
    instances =
    {
        max = 1,
        boost = 1.1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionReleve = self.params[1]
        self._namedParams.pionARelever = self.params[2]
    end,

    select = function( self )
        self.bRelevePossible = self.bRelevePossible or false
        if( ModuleBegins() ) then
            do
                self.bRelevePossible = DEC_Automate_PionRelevePion( self._namedParams.pionReleve, self._namedParams.pionARelever )
                if( self.bRelevePossible ) then
                    DEC_RC( eRC_Releve, self._namedParams.pionARelever )
                end

            end
        end

        if( not self.bRelevePossible ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        F_Pion_SeteEtatEchelon( self._namedParams.pionReleve, F_Pion_GeteEtatEchelon( self._namedParams.pionARelever ) )
                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}


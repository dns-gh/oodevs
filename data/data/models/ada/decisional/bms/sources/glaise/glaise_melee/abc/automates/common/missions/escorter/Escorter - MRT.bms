includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/abc/automates/common/missions/escorter/Escorter - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-08-29 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Missions/Escorter/Escorter - MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 13/05/05 16:30 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: Escorter - MRT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionEscorterA
]]--[[//
]]--[[// Commentaires: assignation des missions pour un éventuel échelon d'éclairage
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_AssignerMissionEscorterA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionEscorterA" }, "BEH_Medo_Automate_ABC_AssignerMissionEscorterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionEscorterA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerEscorterA", { "done_BEH_Mission_Automate_ABC_AssignerEscorterA" } },
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPionPE = self.params[1]
        self._namedParams.convoiAEscorter = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Affectation des missions à l'echelon
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local rIterateurPion = 0
                for _,pion in pairs( self._namedParams.selPionPE or {} ) do
                local _continue = true
                    do
                        if( ( rIterateurPion == 0 or rIterateurPion == nil ) ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerEscorterA, 1, { ePhase_MRT, pion, self._namedParams.convoiAEscorter, self._namedParams.eEtatEchelon, } )
                        else
if( rIterateurPion == 1 ) then
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_MRT, pion, self._namedParams.convoiAEscorter, self._namedParams.eEtatEchelon, } )
                            end
                        end

                                                rIterateurPion = rIterateurPion + 1
                        if( rIterateurPion == #( self._namedParams.selPionPE ) ) then
                            rIterateurPion = 0
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA
]]--[[//
]]--[[// Commentaires: assignation des missions pour un éventuel échelon d'éclairage
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA" }, "BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerEscorterA", { "done_BEH_Mission_Automate_ABC_AssignerEscorterA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPionPEcl = self.params[1]
        self._namedParams.convoiAEscorter = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Affectation des missions à l'echelon
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local rIterateurPion = 0
                for _,pion in pairs( self._namedParams.selPionPEcl or {} ) do
                local _continue = true
                    do
                        if( ( rIterateurPion == 0 or rIterateurPion == nil ) ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerEscorterA, 1, { ePhase_MRT, pion, self._namedParams.convoiAEscorter, self._namedParams.eEtatEchelon, } )
                        end

                                                rIterateurPion = rIterateurPion + 1
                        if( rIterateurPion == #( self._namedParams.selPionPEcl ) ) then
                            rIterateurPion = 0
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA" }, "BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerEscorterAutomateA", { "done_BEH_Mission_Automate_ABC_AssignerEscorterAutomateA" } },
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPionPE = self.params[1]
        self._namedParams.automateAEscorter = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Affectation des missions à l'echelon
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local rIterateurPion = 0
                for _,pion in pairs( self._namedParams.selPionPE or {} ) do
                local _continue = true
                    do
                        --[[// un seul pion suffit
]]if( ( rIterateurPion == 0 or rIterateurPion == nil ) ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerEscorterAutomateA, 1, { ePhase_MRT, pion, self._namedParams.automateAEscorter, self._namedParams.eEtatEchelon, } )
                        else
if( rIterateurPion == 1 ) then
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_MRT, pion, DEC_Automate_PionPCDeAutomate( self._namedParams.automateAEscorter ), self._namedParams.eEtatEchelon, } )
                            end
                        end

                                                rIterateurPion = rIterateurPion + 1
                        if( rIterateurPion == #( self._namedParams.selPionPE ) ) then
                            rIterateurPion = 0
                        end

                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA
]]--[[//
]]--[[// Commentaires: assignation des missions pour un éventuel échelon d'éclairage
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA" }, "BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerEscorterAutomateA", { "done_BEH_Mission_Automate_ABC_AssignerEscorterAutomateA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPionPEcl = self.params[1]
        self._namedParams.automateAEscorter = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Affectation des missions à l'echelon
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local rIterateurPion = 0
                for _,pion in pairs( self._namedParams.selPionPEcl or {} ) do
                local _continue = true
                    do
                        --[[// un seul pion suffit
]]if( ( rIterateurPion == 0 or rIterateurPion == nil ) ) then
                            StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerEscorterAutomateA, 1, { ePhase_MRT, pion, self._namedParams.automateAEscorter, self._namedParams.eEtatEchelon, } )
                        end

                                                rIterateurPion = rIterateurPion + 1
                        if( rIterateurPion == #( self._namedParams.selPionPEcl ) ) then
                            rIterateurPion = 0
                        end

                    end

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterA, "BEH_Mission_Automate_ABC_AssignerEscorterA", nodes.BEH_Mission_Automate_ABC_AssignerEscorterA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterA, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA, "BEH_Mission_Automate_ABC_AssignerEscorterAutomateA", nodes.BEH_Mission_Automate_ABC_AssignerEscorterAutomateA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateA, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterAutomateEclA, "BEH_Mission_Automate_ABC_AssignerEscorterAutomateA", nodes.BEH_Mission_Automate_ABC_AssignerEscorterAutomateA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionEscorterEclA, "BEH_Mission_Automate_ABC_AssignerEscorterA", nodes.BEH_Mission_Automate_ABC_AssignerEscorterA }

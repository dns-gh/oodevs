includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/genie/pions/missions/appui a la mobilite/Ouvrir itineraire.bms"] = true

include "bit.lua"


--[[// ******************************************************************************
]]--[[// MIS_Pion_GEN_OuvrirItineraire
]]--[[//
]]--[[// Commentaires: Refonte 27/10/2006
]]--[[//
]]--[[// ******************************************************************************
]]node "MIS_Pion_GEN_OuvrirItineraire"
{
    feedbacks = { { { "done_MIS_Pion_GEN_OuvrirItineraire" }, "MIS_Pion_GEN_OuvrirItineraire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_GEN_OuvrirItineraire, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles", { "done_BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatRenfort = self.eEtatRenfort or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or eProgresser
        if( ModuleBegins() ) then
            do
                DEC_Trace( "------------- Ouvrir itineraire -----------------" )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mis )
            end
--[[//-----------------------------------------------------------------
]]--[[// Squelette de mission
]]--[[//-----------------------------------------------------------------
]]        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == eProgresser then
                    --[[// Progression
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    --[[// Progression
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                _continue = false
                            end

                        end
                    end

                        if _continue then
                        Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self._namedParams.mis.itineraire_, eProgressionReco, eTypeItiDeminage, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eEtat = v[1] end
                        --[[// Nettoyage obstacle si possible
]]Activate( self.activations.BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles, 2, {} )
                        _continue = false
                    end
                --[[// Fin de la mission
]]                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles
]]--[[//
]]--[[// Commentaires: --> Contournement si possible des obstacles
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles"
{
    feedbacks = { { { "done_BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles" }, "BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles, {value} ) end,
    activations =
    {
        { "BEH_Objet_Pion_GEN_BrecherObstacle", { "done_BEH_Objet_Pion_GEN_BrecherObstacle" } },
    },

    create = function( self )
    end,

    activate = function( self )
        self.repObjet = self.repObjet or nil
        self.rDist = self.rDist or 0
        self.bObjetProcheSurItineraire = self.bObjetProcheSurItineraire or false
        self.bObjetProcheSurItineraire = DEC_Itineraire_ProchainObjet( self.repObjet, self.rDist, S_TypeObject_ToString( eTypeObjectBouchonMines ), S_TypeObject_ToString( eTypeObjectZoneMineeLineaire ), S_TypeObject_ToString( eTypeObjectZoneMineeParDispersion ), S_TypeObject_ToString( eTypeObjectFosseAntiChar ), S_TypeObject_ToString( eTypeObjectAbatti ), S_TypeObject_ToString( eTypeObjectBarricade ), S_TypeObject_ToString( eTypeObjectEboulement ), S_TypeObject_ToString( eTypeObjectDestructionRoute ), S_TypeObject_ToString( eTypeObjectDestructionPont ) )
        self.repObjet = self.bObjetProcheSurItineraire.second.first
        self.rDist = self.bObjetProcheSurItineraire.second.second
        self.bObjetProcheSurItineraire = self.bObjetProcheSurItineraire.first
        if( self.bObjetProcheSurItineraire and DEC_ConnaissanceObjet_EstValide( self.repObjet ) and self.rDist < 200 and not S_Obj_EstContourne( self.repObjet ) ) then
            Activate( self.activations.BEH_Objet_Pion_GEN_BrecherObstacle, 1, { self.repObjet, } )
        end

    end,

--[[// ******************************************************************************
]]--[[// BEH_Objet_Pion_GEN_BrecherObstacle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]}

node "BEH_Objet_Pion_GEN_BrecherObstacle"
{
    feedbacks = { { { "done_BEH_Objet_Pion_GEN_BrecherObstacle" }, "BEH_Objet_Pion_GEN_BrecherObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Objet_Pion_GEN_BrecherObstacle, {value} ) end,
    activations =
    {
        { "BEH_Objet_Pion_GEN_ReduireObstacle", { "done_BEH_Objet_Pion_GEN_ReduireObstacle" } },
        { "BEH_Objet_Pion_GEN_Brecher", { "done_BEH_Objet_Pion_GEN_Brecher" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obj = self.params[1]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------
]]--[[// Brecher l'obstacle ou sinon le réduire
]]--[[//-----------------------------------------------------------------
]]--[[// L'objet n'ai pas contournable, on le réduit
]]if( not DEC_ConnaissanceObjet_PeutEtreContourne( self._namedParams.obj ) ) then
            Activate( self.activations.BEH_Objet_Pion_GEN_ReduireObstacle, 1, { self._namedParams.obj, } )
        else
            Activate( self.activations.BEH_Objet_Pion_GEN_Brecher, 1, { self._namedParams.obj, } )
        end

    end,

--[[// ******************************************************************************
]]--[[// BEH_Objet_Pion_GEN_Brecher
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]}

node "BEH_Objet_Pion_GEN_Brecher"
{
    feedbacks = { { { "done_BEH_Objet_Pion_GEN_Brecher" }, "BEH_Objet_Pion_GEN_Brecher" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Objet_Pion_GEN_Brecher, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_GEN_CreerContournement", { "done_ACT_Obj_Pion_GEN_CreerContournement" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Pion_GEN_AttendreRenforcementPour", { "done_ACT_Pion_GEN_AttendreRenforcementPour" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obj = self.params[1]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------
]]--[[// Validité de l'objet
]]--[[//-----------------------------------------------------------------
]]        if( not DEC_ConnaissanceObjet_EstValide( self._namedParams.obj ) ) then
            do
                --[[// hum hum
]]myself.objMisEnCours_ = nil
                                Halt( self )
                do return end

            end
--[[//-----------------------------------------------------------------
]]--[[// Organisation chantier, verification renfort, brechage et 
]]--[[// desorganisation chantier
]]--[[//-----------------------------------------------------------------        
]]        end

        if( DEC_Agent_PeutConstruireContournementObjet( self._namedParams.obj ) ) then
            Activate( self.activations.ACT_Obj_Pion_GEN_CreerContournement, 1, { self._namedParams.obj, } )
        else
do
                Activate( self.activations.ACT_Dep_SePoster, 1, {} )
                Activate( self.activations.ACT_Pion_GEN_AttendreRenforcementPour, 1, { self._namedParams.obj, } )
            end
        end

--[[// hum hum
]]    end,

    destroy = function( self )
                myself.objMisEnCours_ = nil
    end,

--[[// ******************************************************************************
]]--[[// ACT_Pion_GEN_AttendreRenforcementPour
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]}

node "ACT_Pion_GEN_AttendreRenforcementPour"
{
    feedbacks = { { { "done_ACT_Pion_GEN_AttendreRenforcementPour" }, "ACT_Pion_GEN_AttendreRenforcementPour" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_GEN_AttendreRenforcementPour, {value} ) end,
    instances =
    {
        max = 1--[[// tres important
]],
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.obj = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_AttenteRenforcement )
                else
                    DEC_Message( eRC_AttenteRenforcement )
                end

            end
--[[// pour automate hack
]]        end

        myself.objMisEnCours_ = self._namedParams.obj
    end,

}

--[[// ---------------
]]eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_GEN_OuvrirItineraire = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles, "BEH_Objet_Pion_GEN_BrecherObstacle", nodes.BEH_Objet_Pion_GEN_BrecherObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_Brecher, "ACT_Obj_Pion_GEN_CreerContournement", nodes.ACT_Obj_Pion_GEN_CreerContournement }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_Brecher, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_Brecher, "ACT_Pion_GEN_AttendreRenforcementPour", nodes.ACT_Pion_GEN_AttendreRenforcementPour }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_BrecherObstacle, "BEH_Objet_Pion_GEN_ReduireObstacle", nodes.BEH_Objet_Pion_GEN_ReduireObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Objet_Pion_GEN_BrecherObstacle, "BEH_Objet_Pion_GEN_Brecher", nodes.BEH_Objet_Pion_GEN_Brecher }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_OuvrirItineraire, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_OuvrirItineraire, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_OuvrirItineraire, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_OuvrirItineraire, "BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles", nodes.BEH_Dep_GEN_Ouvrir_ReagirFaceAObstacles }
connections[ #connections + 1 ] = { nodes.MIS_Pion_GEN_OuvrirItineraire, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

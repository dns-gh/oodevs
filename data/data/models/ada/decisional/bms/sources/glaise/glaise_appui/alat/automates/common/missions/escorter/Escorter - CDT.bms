includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/escorter/Escorter - CDT.bms"] = true

node "MIS_Automate_CDT_ALAT_Escorter"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_Escorter" }, "MIS_Automate_CDT_ALAT_Escorter" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_Escorter, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe" } },
        { "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", { "done_BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "done_BEH_Automate_ALAT_CoordonnerFeux" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eEscorter
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listePionsSgptSansRavitaillementsEnCours = self.listePionsSgptSansRavitaillementsEnCours or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.listePionsPeuventCouvrirOuEscorter = self.listePionsPeuventCouvrirOuEscorter or {}
        self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours = self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours or {}
        self.listePionsPourMissionsCouvrir = self.listePionsPourMissionsCouvrir or {}
        self.listePionsPourMissionsEscorter = self.listePionsPourMissionsEscorter or {}
        self.listeUnitesAEscorter = self.listeUnitesAEscorter or {}
        self.ravitaillementDebutMission = self.ravitaillementDebutMission or false
        if( ModuleBegins() ) then
            self.ravitaillementDebutMission = self._namedParams.mission.ravitaillementDebutMission_
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, {} )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// donner des missions aux pions qui sont opérationnels et qui ne sont pas en cours
]]--[[// de ravitaillement
]]self.listePionsSgpt = {}
        self.listePionsSgptSansRavitaillementsEnCours = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        local listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        self.listePionsSgptSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsSgpt, listePionsEnCoursRavitaillement )
        --[[// Mise à Jour des selections
]]--[[// --------------------------
]]local listeHAH = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAH" )
        local listeTigre = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleTigre" )
        local listeHAPCanons = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAC" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAM" )
        --[[// liste des unités pour IMEX
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHMLog" )
        --[[// liste des unités à escorter
]]self.listeUnitesAEscorter = {}
        self.listeUnitesAEscorter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAEscorter_ )
        --[[// liste des pions qui peuvent couvrir ou escorter
]]self.listePionsPeuventCouvrirOuEscorter = {}
        self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours = {}
        self.listePionsPeuventCouvrirOuEscorter = S_Liste_Concatene( self.listePionsPeuventCouvrirOuEscorter, listeHAH, listeTigre )
        self.listePionsPeuventCouvrirOuEscorter = S_Liste_Concatene( self.listePionsPeuventCouvrirOuEscorter, self.listePionsPeuventCouvrirOuEscorter, listeHAPCanons )
        self.listePionsPeuventCouvrirOuEscorter = S_Liste_Concatene( self.listePionsPeuventCouvrirOuEscorter, self.listePionsPeuventCouvrirOuEscorter, listeHAM )
        self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsPeuventCouvrirOuEscorter, listePionsEnCoursRavitaillement )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
        --[[// init des listes de pions pour les missions couvrir et escorter
]]self.listePionsPourMissionsCouvrir = {}
        self.listePionsPourMissionsEscorter = {}
        for _,x in pairs( self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours or {} ) do
        local _continue = true
do
                if( DIA_IsListEmpty( self.listePionsPourMissionsEscorter ) ) then
                    do
                        DIA_PushBack( self.listePionsPourMissionsEscorter, x )
                        _continue = false
                    end
                end

                    if _continue then
                    if( #( self.listePionsPourMissionsCouvrir ) / #( self.listePionsPourMissionsEscorter ) > 3 ) then
                        DIA_PushBack( self.listePionsPourMissionsEscorter, x )
                    else
                        DIA_PushBack( self.listePionsPourMissionsCouvrir, x )
                    end

                end
            end

        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eEscorter then
                    --[[//CDT des missions d'Escorter
]]if( not DIA_IsListEmpty( self.listePionsPourMissionsEscorter ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe, 1, { ePhase_CDT, self.listePionsPourMissionsEscorter, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, eNatureAtlas_Helicoptere, self.listeUnitesAEscorter, self.ravitaillementDebutMission, } )
                    end

                    --[[// CDT des missions de couverture
]]if( not DIA_IsListEmpty( self.listePionsPourMissionsCouvrir ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe, 1, { ePhase_CDT, self.listePionsPourMissionsCouvrir, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, eNatureAtlas_Helicoptere, self.listeUnitesAEscorter, self._namedParams.mission.directionEnnemi_, 60, self.ravitaillementDebutMission, } )
                    end

                    --[[// Coordination des ravitaillements
]]if( not DIA_IsListEmpty( self.listePionsPeuventCouvrirOuEscorter ) ) then
                        Activate( self.activations.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne, 1, { self.listePionsPeuventCouvrirOuEscorter, } )
                    end

                    --[[// Gestion de la coordination des feux
]]if( not DIA_IsListEmpty( self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours ) ) then
                        Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listePionsPeuventCouvrirOuEscorterSansRavitaillementsEnCours, 0, } )
                    end

                    --[[// ravitaillements et IMEX
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, false, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Escorter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsEscorterAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", nodes.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Escorter, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

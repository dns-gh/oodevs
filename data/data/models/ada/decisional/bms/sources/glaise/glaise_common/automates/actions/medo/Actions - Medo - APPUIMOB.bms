includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - APPUIMOB.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// AssignerTransporterUniteCharsA
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_LOG_AssignerTransporterUniteA"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.ptRdz = self.params[3]
        self._namedParams.ptDest = self.params[4]
        self._namedParams.unitesATransporter = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                                do
                end

            end
        else
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        self.missionPion = self.missionPion or nil--[[//-------------------------------------------------------------------------
]]--[[// Cree la myself.mission_
]]--[[//-------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_TransporterUnite" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_LOG_TransporterUnite" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self.params.__returnValue = eActionImpossible
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        F_Pion_SeteEtatPhaseMission( self._namedParams.pion, eEtatPhaseMission_EnAttenteDeMission )
        DEC_Copie_Point_Mission( self._namedParams.ptRdz, self.missionPion, "pointRendezVous_" )
        DEC_Copie_Point_Mission( self._namedParams.ptDest, self.missionPion, "pointDestination_" )
        --[[//DEC_Copie_ListePoints( iti, missionPion.itineraire_ );
]]DEC_AssignMissionParameter( self.missionPion, "unitesATransporter_", self._namedParams.unitesATransporter )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la DEC_GetMission( myself ) si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self.params.__returnValue = eActionEffectuee
        do return end

    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/pions/missionsreactionpopulations/Canaliser.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_CanaliserPopulations
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_CanaliserPopulations"
{
    feedbacks = { { { "done_MIS_Pion_CanaliserPopulations" }, "MIS_Pion_CanaliserPopulations" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_CanaliserPopulations, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_Virtuel_ProgressionVers", { "done_BEH_Dep_Virtuel_ProgressionVers" } },
        { "ACT_Pion_Canaliser", { "done_ACT_Pion_Canaliser" } },
        { "BEH_Dep_Virtuel_PreparationAction", { "done_BEH_Dep_Virtuel_PreparationAction" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.ePreparation = self.ePreparation or eActionEnCours
        self.canal = self.canal or nil
        self.localisation = self.localisation or self._namedParams.mission.zone_
        self.objectif = self.objectif or nil
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                DEC_SetMission( myself, self._namedParams.mission )
                if( not DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self.localisation, self.objectif ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "** BEH_MIS_Canaliser: début **", } )
                    self.ePhaseMission = eAborderObjectif
                    _continue = false
                --[[// 2) Rejoindre la localisation
]]                cases_switch_1[1] = true
elseif switch_1 == eAborderObjectif then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.objectif ) <= 100 ) then
                        self.ePhaseMission = eAnimer
                    else
                        Activate( self.activations.BEH_Dep_Virtuel_ProgressionVers, 1, { self.objectif, eProgressionDefaut, eTypeItiMouvement, } )
                    end

                    _continue = false
                --[[// 2) Animer la canalisation
]]                cases_switch_1[2] = true
elseif switch_1 == eAnimer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnPosition, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self.objectif ) > 100 ) then
                        do
                            self.ePhaseMission = eAborderObjectif
                            _continue = false
                        end
                    end

                        if _continue then
                        if( self.ePreparation == eActionEffectuee ) then
                            Activate( self.activations.ACT_Pion_Canaliser, 1, { self.localisation, } )
                        end

                        Activate( self.activations.BEH_Dep_Virtuel_PreparationAction, 1, {} )
self.done_BEH_Dep_Virtuel_PreparationAction = function( self, _, v ) self.ePreparation = v[1] end
                        _continue = false
                    end
                --[[// 3) Fin de la mission de reconnaissance SUR ORDRE
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                                        Halt( self )
                    do return end

                end
                if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Pion_Canaliser
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Pion_Canaliser"
{
    feedbacks = { { { "done_ACT_Pion_Canaliser" }, "ACT_Pion_Canaliser" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_Canaliser, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.loc = self.params[1]
    end,

    select = function( self )
                self.bPaused = self.bPaused or false
        if( ModuleBegins() ) then
            do
                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_AnimationCanalisation )
                    else
                        DEC_Message( eRC_AnimationCanalisation )
                    end

                end

            end
        end

        if( self.bPaused ) then
            do
                DEC_Trace( "animation canalisation" )
                self.bPaused = false
            end
        end

        if( DEC_Agent_NiveauInstallation() >= eNiveauInstallation_Poste ) then
            DEC_Agent_CanaliserPopulation( self._namedParams.loc )
        end

    end,

    deselect = function( self )
                self.bPaused = true
        DEC_Trace( "Pause animation canalisation" )
    end,

    destroy = function( self )
                DEC_Trace( "Fin animation canalisation" )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_CanaliserPopulations = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "BEH_Dep_Virtuel_ProgressionVers", nodes.BEH_Dep_Virtuel_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "ACT_Pion_Canaliser", nodes.ACT_Pion_Canaliser }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "BEH_Dep_Virtuel_PreparationAction", nodes.BEH_Dep_Virtuel_PreparationAction }
connections[ #connections + 1 ] = { nodes.MIS_Pion_CanaliserPopulations, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

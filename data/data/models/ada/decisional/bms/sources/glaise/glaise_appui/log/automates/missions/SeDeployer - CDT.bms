includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/log/automates/missions/SeDeployer - CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_SeDeployer
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_LOG_SeDeployer"
{
    feedbacks = { { { "done_MIS_Automate_CDT_LOG_SeDeployer" }, "MIS_Automate_CDT_LOG_SeDeployer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_LOG_SeDeployer, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_LOG_OrdresInopines", { "done_ACT_Ordre_Automate_LOG_OrdresInopines" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
        { "BEH_Mission_Automate_LOG_AssignerSeDeployerA", { "done_BEH_Mission_Automate_LOG_AssignerSeDeployerA" } },
        { "BEH_Mission_Automate_LOG_AssignerDecontaminerBlessesA", { "done_BEH_Mission_Automate_LOG_AssignerDecontaminerBlessesA" } },
        { "BEH_Mission_Automate_LOG_AssignerTrierEtTraiterBlessesA", { "done_BEH_Mission_Automate_LOG_AssignerTrierEtTraiterBlessesA" } },
        { "BEH_Mission_Automate_LOG_AssignerTraiterBlessesA", { "done_BEH_Mission_Automate_LOG_AssignerTraiterBlessesA" } },
        { "BEH_Mission_Automate_LOG_AssignerPrendreEnCompteReacMentalA", { "done_BEH_Mission_Automate_LOG_AssignerPrendreEnCompteReacMentalA" } },
        { "BEH_Mission_Automate_LOG_AssignerReparerA", { "done_BEH_Mission_Automate_LOG_AssignerReparerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Ordre_Automate_LOG_OrdresInopines, 1, emptyTable )
        --[[// traitement des renforts
]]local selPions = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsAvecPC() )
        local selIdle = {}
        --[[//Gestion de la réception de l'ordre de conduite Poursuivre, ne concerne que les pions de type Convoi
]]local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local ordre = x
                local repOrdre = ordre
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Rep_OrderConduite_Poursuivre" then
                            for _,y in pairs( selPions or emptyTable ) do
                            local _continue = true
do
                                    local pion = y
                                    local missionPion = DEC_GetMission( pion )
                                    if( pion:GetType() == "PionConvoi" and missionPion ~= nil and missionPion:GetType() == "T_Mission_Pion_LOG_Convoyer" and F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhaseMission_AttentePoursuivre ) then
                                        do
                                            DEC_Trace( "Transfert ODC Poursuivre a pion " .. DEC_GetSzName( pion ) )
                                            DEC_CDT_DonneOrdreConduiteAPion( pion, eOrdreConduite_Poursuivre )
                                        end
                                    end

                                end

                            end

                                                cases_switch_1[1] = true
                        end
                    end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
            end
--[[// recherche pions libres
]]
        end

        for _,x in pairs( selPions or emptyTable ) do
        local _continue = true
do
                local pion = x
                local missionPion = DEC_GetMission( pion )
                if( missionPion == nil or missionPion:GetType() == "T_Mission_Pion_LOG_Renforcer" or F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhaseMission_FinMission ) then
                    do
                        DIA_PushFront( selIdle, pion )
                    end
                end

            end
--[[// affectation mission
]]
        end

        for _,x in pairs( selIdle or emptyTable ) do
        local _continue = true
do
                local pion = x
                local posPion = DEC_Automate_PionPosition( pion )
                DEC_Trace( "Assignation mission a nouveau pion " .. DEC_GetSzName( pion ) )
                 do
                    local _continue = true
--[[// Suivant le type de pions...
]]--[[// rien
]]                    local switch_1 = pion:GetType()
                        if switch_1 == "GroupeRamassage" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerSeDeployerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "DecontaminationNBC" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerDecontaminerBlessesA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "SectionTriage" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerTrierEtTraiterBlessesA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "ACA" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerTraiterBlessesA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "UniteSoin" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerTraiterBlessesA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "UniteSpy" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerPrendreEnCompteReacMentalA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "PionStock" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerSeDeployerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "PionTransport" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerSeDeployerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "GroupeMaintenanceEvacuation" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerSeDeployerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "SectionMaintenance" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerReparerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "SectionLOGTC2" then
                            Activate( self.activations.BEH_Mission_Automate_LOG_AssignerSeDeployerA, 1, { ePhase_CDT, pion, posPion, eEtatEchelon_Second, } )
                            _continue = false
                        elseif switch_1 == "PionConvoi" then
                            _continue = false
                        
                        else
                            --[[// rien
]]DEC_Trace( "Pas de mission possible pour " .. DEC_GetSzName( pion ) )
                            _continue = false
                                                end
                    end

            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_LOG_SeDeployer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "ACT_Ordre_Automate_LOG_OrdresInopines", nodes.ACT_Ordre_Automate_LOG_OrdresInopines }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerSeDeployerA", nodes.BEH_Mission_Automate_LOG_AssignerSeDeployerA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerDecontaminerBlessesA", nodes.BEH_Mission_Automate_LOG_AssignerDecontaminerBlessesA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerTrierEtTraiterBlessesA", nodes.BEH_Mission_Automate_LOG_AssignerTrierEtTraiterBlessesA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerTraiterBlessesA", nodes.BEH_Mission_Automate_LOG_AssignerTraiterBlessesA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerPrendreEnCompteReacMentalA", nodes.BEH_Mission_Automate_LOG_AssignerPrendreEnCompteReacMentalA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_LOG_SeDeployer, "BEH_Mission_Automate_LOG_AssignerReparerA", nodes.BEH_Mission_Automate_LOG_AssignerReparerA }

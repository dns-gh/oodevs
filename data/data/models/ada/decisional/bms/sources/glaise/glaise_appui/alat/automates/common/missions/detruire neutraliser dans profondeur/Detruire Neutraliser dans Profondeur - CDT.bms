includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/detruire neutraliser dans profondeur/Detruire Neutraliser dans Profondeur - CDT.bms"] = true

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate ALAT DetruireDansProfondeur :
]]--[[//
]]--[[// Commentaires : pas de releve dans cette mission
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur"
{
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", {} },
        { "BEH_Ordre_Automate_Poursuivre_", {} },
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", {} },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe", {} },
        { "BEH_Automate_ALAT_CoordonnerFeux", {} },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", {} },
        { "BEH_ROE_Automate_TirRestreint", {} },
        { "BEH_Mission_Automate_AssignerStationnerAListe", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eDetruire
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listeDetruire = self.listeDetruire or {}
        self.listeCouverture = self.listeCouverture or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.ravitaillementDebutMission = self.ravitaillementDebutMission or false
        if( ModuleBegins() ) then
            do
                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, {} )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, {} )
            end
        end

        if( ModuleBegins() ) then
            self.ravitaillementDebutMission = self._namedParams.mission.ravitaillementDebutMission_
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatODC = v else rawset( t, k, v ) end end } ) )
        --[[// donner des missions aux pions qui sont opérationnels et qui ne sont pas en cours
]]--[[// de ravitaillement
]]DIA_Clear( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        local listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        self.listePionsSgpt = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsSgpt, listePionsEnCoursRavitaillement )
        --[[// Mise à Jour des selections
]]--[[// --------------------------
]]local listeHAH = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAH" )
        local listeTigre = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleTigre" )
        local listeHAPCanons = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAC" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAM" )
        --[[// liste des pions pour IMEX
]]DIA_Clear( self.listeHMLog )
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHMLog" )
        --[[// liste des pions qui peuvent attaquer
]]DIA_Clear( self.listeDetruire )
        S_Liste_Concatene( self.listeDetruire, listeHAH, listeTigre )
        S_Liste_Concatene( self.listeDetruire, self.listeDetruire, listeHAPCanons )
        --[[// liste pour couverture
]]DIA_Clear( self.listeCouverture )
        self.listeCouverture = listeHAM
        --[[// liste pour IMEX
]]DIA_Clear( self.listePionsAAppuyerIMEX )
        local buffer = {}
        S_Liste_Concatene( buffer, self.listeDetruire, self.listeCouverture )
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( buffer ), self.listeHMLog )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eDetruire then
                    --[[// Condition d'arret
]]if( DIA_IsListEmpty( self.listeDetruire ) ) then
                        do
                            self.ePhase = eSExfiltrer
                                                        do return end

                        end
--[[// Detruire : ordre de creation des missions
]]                    end

                    if( not DIA_IsListEmpty( self.listeDetruire ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe, 1, { ePhase_CDT, self.listeDetruire, self._namedParams.mission.zone_, self._namedParams.mission.pointDislocation_, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, self._namedParams.mission.neutraliser_, self.ravitaillementDebutMission, } )
                    end

                    --[[// Couvrir : ordre de creation des missions
]]if( not DIA_IsListEmpty( self.listeCouverture ) and not DIA_IsListEmpty( self.listeDetruire ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe, 1, { ePhase_CDT, self.listeCouverture, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, self._namedParams.mission.ciblesPrioritaires_, self.listeDetruire, self._namedParams.mission.directionEnnemi_, 60, self.ravitaillementDebutMission, } )
                    end

                    --[[// Gestion de la coordination des feux
]]Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listeDetruire, 0.3, } )
                    --[[// recompletements et IMEX
]]--[[// -----------------------
]]Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, false, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, {} )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsDetruireNeutraliserDansZoneAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsFlancGarderAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_DetruireNeutraliserDansProfondeur, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

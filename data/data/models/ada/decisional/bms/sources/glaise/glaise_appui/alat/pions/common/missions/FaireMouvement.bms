includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/pions/common/missions/FaireMouvement.bms"] = true

--[[//------------------------------------------------------------------------------
]]--[[// Faire mouvement
]]--[[//
]]--[[// Commentaires: pour l'ALAT, faire mouvement est toujours tres dangereux.
]]--[[// Cette mission n'est pas agressive, on fait donc un itinéraire d'infiltration.
]]--[[//------------------------------------------------------------------------------
]]node "MIS_Pion_FaireMouvement"
{
    feedbacks = { { { "done_MIS_Pion_FaireMouvement" }, "MIS_Pion_FaireMouvement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_FaireMouvement, {value} ) end,
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", { "done_ACT_Maj_Pion_PasserEnTirSurRiposte" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_Maj_Pion_ALAT_ParametresRecompletement", { "done_ACT_Maj_Pion_ALAT_ParametresRecompletement" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_ALAT_RejoindreParItineraire", { "done_BEH_Dep_Pion_ALAT_RejoindreParItineraire" } },
        { "BEH_Dep_Pion_ALAT_SePoser", { "done_BEH_Dep_Pion_ALAT_SePoser" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        self.pointFinItineraire = self.pointFinItineraire or nil
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                self.pointFinItineraire = DEC_ListePoints_GetAt( self._namedParams.mission.itineraire_, DEC_ListePoints_Size( self._namedParams.mission.itineraire_ ) - 1 )
                local position = DEC_Geometrie_PositionAleatoireDansCercle( self.pointFinItineraire, 300 )
                DEC_Copie_Point( position, myself.pointRegroupement_ )
                DEC_ListePoints_PushBack( self._namedParams.mission.itineraire_, position )
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, {} )
                end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        Activate( self.activations.ACT_Maj_Pion_ALAT_ParametresRecompletement, 1, { eMoyennePortee, ePolyvalent, } )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_RejoindreParItineraire, GetMotivation( "MOT_Manoeuvrer" ), { self._namedParams.mission.itineraire_, eProgressionDefaut, eTypeItiInfiltration, } )
self.done_BEH_Dep_Pion_ALAT_RejoindreParItineraire = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                myself:ClearplotsRavitaillement_()
                                F_Pion_SetobjectifEsquive( myself, nil )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ALAT_SePoser, GetMotivation( "MOT_Manoeuvrer" ), {} )
self.done_BEH_Dep_Pion_ALAT_SePoser = function( self, _, v ) self.eEtat = v[1] end
                    _continue = false
                                cases_switch_1[2] = true
                end
            end

    end,

    destroy = function( self )
                myself:ClearplotsRavitaillement_()
        F_Pion_SetobjectifEsquive( myself, nil )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_FaireMouvement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "ACT_Maj_Pion_ALAT_ParametresRecompletement", nodes.ACT_Maj_Pion_ALAT_ParametresRecompletement }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Dep_Pion_ALAT_RejoindreParItineraire", nodes.BEH_Dep_Pion_ALAT_RejoindreParItineraire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_FaireMouvement, "BEH_Dep_Pion_ALAT_SePoser", nodes.BEH_Dep_Pion_ALAT_SePoser }

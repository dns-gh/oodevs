includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/pions/common/Fonctions - Geometrie.bms"] = true

include "bit.lua"

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Fonctions - Geometrie.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 9:45 $
]]--[[// $Revision: 11 $
]]--[[// $Workfile: Fonctions - Geometrie.hal $
]]--[[//
]]--[[// *****************************************************************************
]]--[[//-----------------------------------------------------------------------------
]]--[[// Retourne true si la distance entre ptDest et la localisation est 
]]--[[// inferieure a rEcart
]]--[[//-----------------------------------------------------------------------------------------------------------------------------------
]]--[[// ------------------------------------------------------------------------
]]--[[// $Created : JCR : 21/04/2004 10:04
]]--[[//
]]--[[// ------------------------------------------------------------------------
]]--[[// Position finale ( preferencielle )
]]--[[// position intermediaire
]]--[[// On calcule la perpendiculaire a la direction donnee par myself et ptObj
]]--[[// Dans le sens des aiguilles (bDroite == true) ou dans le sens inverse
]]--[[// On se positionne a 300 m dans cette direction
]]--[[// ... de 300m dans notre direction
]]--[[// -------------------------------------------------------------------------
]]--[[// S_ChercherPosition_Mine :
]]--[[//        Cherche une position sur laquelle on peut miner et non genante pour
]]--[[//        le pion
]]--[[// -------------------------------------------------------------------------
]]--[[// Si l'on est ou non sur la position
]]--[[// Init de la position
]]--[[// (1) On cherche une position proche de l'objectif
]]--[[// ---------------------------------------------------------------------
]]--[[// Sinon, on ne s'en sert pas -> elle est detruite
]]--[[// (2) On cherche une position decale de l'objectif dans le sens de la
]]--[[//     direction dangereuse
]]--[[//       si l'on est proche de l'objectif on augmente la distance
]]--[[// ---------------------------------------------------------------------
]]--[[// On se decale
]]--[[// On a trouve une position
]]--[[// Si elle est trop proche, on quitte
]]--[[// sinon, on renvoie la position
]]function S_Geometrie_EstProcheLocalisation( ptDest, locTest, rEcart )
    local _returnValue = false
    _returnValue = false
    local ptTest = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( locTest )
    if( ptTest ~= nil ) then
        _returnValue = DEC_Geometrie_Distance( ptDest, ptTest ) <= rEcart
    end

    do return _returnValue end
end

function S_Geometrie_INF_PtPref( ptObj, bDroite )
    local _returnValue = nil
    local dirObj = DEC_Geometrie_CreerDirection( DEC_Agent_Position(), ptObj )
    local dirCouv = nil
    local ptPref = nil
    local ptInter = nil
    dirCouv = DEC_Geometrie_CreerDirectionPerpendiculaire( dirObj, bDroite )
    ptInter = DEC_Geometrie_PositionTranslateDir( ptObj, dirCouv, 600 )
    DEC_Geometrie_InverseDirection( dirObj )
    ptPref = DEC_Geometrie_PositionTranslateDir( ptInter, dirObj, 300 )
    _returnValue = ptPref
    do return _returnValue end
end

function S_Geometrie_INF_ChercherPositionObstacle( ptMission, natureObstacle, rDistMoyenObstacle )
    local _returnValue = nil
    local ptMineMieux = nil
    local rDelta = 1
    local rDistanceTranslation = 300
    _returnValue = nil
    ptMineMieux = DEC_Geometrie_CalculerPositionObstacle( ptMission, S_TypeObject_ToString( eTypeObjectBouchonMines ), rDistMoyenObstacle )
    if( ptMineMieux ~= nil and not S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMineMieux, 300 ) ) then
        do
            _returnValue = DEC_Geometrie_ConvertirPointEnLocalisation( ptMineMieux )
                        do return _returnValue end

        end
    else
        ptMineMieux = nil
    end

    if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMission, 200 ) ) then
        rDelta = 1.5
    end

    local mission = DEC_GetMission( myself )
    local ptMine = DEC_Geometrie_PositionTranslateDir( ptMission, DEC_GetDirectionDanger( mission ), rDelta * rDistanceTranslation )
    ptMineMieux = DEC_Geometrie_CalculerPositionObstacle( ptMine, S_TypeObject_ToString( eTypeObjectBouchonMines ), rDistMoyenObstacle )
    if( ptMineMieux ~= nil ) then
        do
            if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMineMieux, 300 ) ) then
                do
                    ptMineMieux = nil
                                        do return _returnValue end

                end
            end

            _returnValue = DEC_Geometrie_ConvertirPointEnLocalisation( ptMineMieux )
        end
    end

    do return _returnValue end
end


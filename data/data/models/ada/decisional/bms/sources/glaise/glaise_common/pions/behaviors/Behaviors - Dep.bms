includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/pions/behaviors/Behaviors - Dep.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// BEH_Dep_ProgressionSur
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Dep_ProgressionSur"
{
    feedbacks = { { { "done_BEH_Dep_ProgressionSur" }, "BEH_Dep_ProgressionSur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_ProgressionSur, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_GererProgression", { "done_BEH_Dep_GererProgression" } },
        { "BEH_Dep_SeDeplacer", { "done_BEH_Dep_SeDeplacer" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.itineraire = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.it = self.it or DEC_CreerItineraireListe( self._namedParams.itineraire, self._namedParams.eTypeIti )
        --[[//-----------------------------------------------------------------------------
]]--[[// Gestion lima etc si progression tactique
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_Dep_GererProgression, 1, { self._namedParams.eTypeProgression, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Deplacement de base
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                    self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionSur" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_SeDeplacer, 1, { self.it, } )
self.done_BEH_Dep_SeDeplacer = function( self, _, v ) self.eEtat = v[1] end
        Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// Observation
]]--[[//-----------------------------------------------------------------------------
]]
    end,

    destroy = function( self )
                self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionSur" )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_ProgressionVers
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_ProgressionVers"
{
    feedbacks = { { { "done_BEH_Dep_ProgressionVers" }, "BEH_Dep_ProgressionVers" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_ProgressionVers, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_GererProgression", { "done_BEH_Dep_GererProgression" } },
        { "BEH_Dep_SeDeplacer", { "done_BEH_Dep_SeDeplacer" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pointArrivee = self.params[1]
        self._namedParams.eTypeProgression = self.params[2]
        self._namedParams.eTypeIti = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.eEtat = self.eEtat or eActionEnCours
        self.it = self.it or DEC_CreerItineraire( self._namedParams.pointArrivee, self._namedParams.eTypeIti )
        --[[//=============================================================================
]]--[[// Gestion lima etc si progression tactique
]]--[[//=============================================================================
]]Activate( self.activations.BEH_Dep_GererProgression, 1, { self._namedParams.eTypeProgression, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Deplacement de base
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                    self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionVers" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_SeDeplacer, 1, { self.it, } )
self.done_BEH_Dep_SeDeplacer = function( self, _, v ) self.eEtat = v[1] end
        Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, emptyTable )--[[//-----------------------------------------------------------------------------
]]--[[// Observation
]]--[[//-----------------------------------------------------------------------------
]]
    end,

    destroy = function( self )
                self.it = S_Misc_DetruireItineraire( self.it, "BEH_Dep_ProgressionVers" )
    end,

--[[// ******************************************************************************
]]--[[// BEH_Dep_SeDeplacer
]]--[[//
]]--[[// Commentaires: appelé par BEH_ProgressionVers et BEH_ProgressionSur
]]--[[//
]]--[[// ******************************************************************************
]]}

node "BEH_Dep_SeDeplacer"
{
    feedbacks = { { { "done_BEH_Dep_SeDeplacer" }, "BEH_Dep_SeDeplacer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_SeDeplacer, {value} ) end,
    activations =
    {
        { "ACT_Pions_SeDesinstaller", { "done_ACT_Pions_SeDesinstaller" } },
        { "ACT_Dep_SeDeplacer", { "done_ACT_Dep_SeDeplacer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.it = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_Pions_SeDesinstaller, 1, emptyTable )
        if( not DEC_Agent_EstDesinstalle() ) then
            do return end
        end

        Activate( self.activations.ACT_Dep_SeDeplacer, 1, { self._namedParams.it, } )
self.done_ACT_Dep_SeDeplacer = function( self, _, v ) self.eEtat = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_GererAvantPoint
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_GererAvantPoint"
{
    feedbacks = { { { "done_BEH_Dep_GererAvantPoint" }, "BEH_Dep_GererAvantPoint" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_GererAvantPoint, {value} ) end,
    activations =
    {
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Progression_Pion_INF_Aborder", { "done_BEH_Progression_Pion_INF_Aborder" } },
        { "BEH_Obs_Pion_Gen_ReconnaitrePoint", { "done_BEH_Obs_Pion_Gen_ReconnaitrePoint" } },
        { "BEH_Obs_Pion_NBC_ReconnaitrePoint", { "done_BEH_Obs_Pion_NBC_ReconnaitrePoint" } },
        { "BEH_Obs_Pion_ABC_ReconnaitrePoint", { "done_BEH_Obs_Pion_ABC_ReconnaitrePoint" } },
        { "BEH_Obs_Pion_INF_RecoPoint_Copie", { "done_BEH_Obs_Pion_INF_RecoPoint_Copie" } },
        { "ACT_Points_Suppression", { "done_ACT_Points_Suppression" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.typeProgression = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-----------------------------------------------------------------------------
]]--[[// Regarder les eAvantPoint dans la liste des points interranssant
]]--[[//-----------------------------------------------------------------------------
]]local listePointInterressant = DEC_GetCategory( "points_interressants" )
        for _,x in pairs( listePointInterressant or emptyTable ) do
        local _continue = true
do
                local ptABC = x
                --[[// Traiter seulement les 'avantPoint'
]]if( DEC_IsAvantPoint( ptABC ) ) then
                    do
                        --[[// Cast
]]local repAvantPt = ptABC
                        --[[// On traite uniquement les points avec le type specifie
]]if( ( bit.band( self._namedParams.typeProgression, DEC_GetTypePoint( DEC_GetDestPoint( repAvantPt ) ) ) ) ~= eProgressionDirect ) then
                            do
                                 do
                                    local _continue = true
--[[//-----------------------------------------------------------------------------
]]--[[// On arrive devant un changement de compartiment terrain ou limite
]]--[[// de bond
]]--[[//-----------------------------------------------------------------------------
]]                                    local switch_1 = DEC_GetTypePoint( DEC_GetDestPoint( repAvantPt ) )
                                        if switch_1 == eTypePointCCT
                                        or switch_1 == eTypePointBond then
                                                                                    if( meleeInfPionsCommon() ) then
                                                do
                                                    if( GetActivity() >= 1 and F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                                        do
                                                            Activate( self.activations.ACT_Info_Trace, 1, { "Sur avant bond", } )
                                                            StartActivateOverride( self, self.activations.BEH_Progression_Pion_INF_Aborder, 1, { DEC_GetDestPoint( repAvantPt ), } )
                                                        end
                                                    end

                                                end
                                            end

                                            _continue = false
                                        elseif switch_1 == eTypePointParticulier then
                                            do
                                                pointVar = DEC_GetDestPoint( repAvantPt )
                                                if( appuiGeniePions() ) then
if( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                                        StartActivateOverride( self, self.activations.BEH_Obs_Pion_Gen_ReconnaitrePoint, 1, { pointVar, } )
                                                    end
                                                end

                                                if( appuiNbcPionsCommon() ) then
if( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                                        StartActivateOverride( self, self.activations.BEH_Obs_Pion_NBC_ReconnaitrePoint, 1, { pointVar, } )
                                                    end
                                                end

                                                if( meleeAbcPionsCommon() ) then
if( F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                                        StartActivateOverride( self, self.activations.BEH_Obs_Pion_ABC_ReconnaitrePoint, 1, { pointVar, } )
                                                    end
                                                end

                                                if( meleeInfPionsCommon() ) then
                                                    do
                                                        if( GetActivity() >= 1 and F_Pion_GeteEtatAmbiance( myself ) ~= eEtatAmbiance_Vitesse ) then
                                                            do
                                                                Activate( self.activations.ACT_Info_Trace, 1, { "Sur avant point", } )
                                                                StartActivateOverride( self, self.activations.BEH_Obs_Pion_INF_RecoPoint_Copie, 1, { DEC_GetRepPoint( pointVar ), S_TempsObservationPoint_Ambiance(), } )
                                                            end
                                                        end

                                                    end
                                                end

                                            end

                                            _continue = false
                                                                                end
                                    end

                            end
                        end

                        Activate( self.activations.ACT_Points_Suppression, 1, { repAvantPt, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_GererPoint
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_GererPoint"
{
    feedbacks = { { { "done_BEH_Dep_GererPoint" }, "BEH_Dep_GererPoint" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_GererPoint, {value} ) end,
    activations =
    {
        { "BEH_Obs_Pion_NBC_SePosterSurBond", { "done_BEH_Obs_Pion_NBC_SePosterSurBond" } },
        { "BEH_Obs_Pion_ABC_SePosterSurBond", { "done_BEH_Obs_Pion_ABC_SePosterSurBond" } },
        { "BEH_Misc_Pion_INF_MAJ_Repli", { "done_BEH_Misc_Pion_INF_MAJ_Repli" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Poste_Pion_INF_ArretCourt", { "done_BEH_Poste_Pion_INF_ArretCourt" } },
        { "ACT_Points_Suppression", { "done_ACT_Points_Suppression" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.typeProgression = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-----------------------------------------------------------------------------
]]--[[// Regarder les points interssants
]]--[[//-----------------------------------------------------------------------------
]]local listePointInterressant = DEC_GetCategory( "points_interressants" )
        for _,x in pairs( listePointInterressant or emptyTable ) do
        local _continue = true
do
                local ptABC = x
                --[[// Traiter suelement les 'points'
]]if( DEC_IsPoint( ptABC ) ) then
                    do
                        --[[// Cast
]]local repPoint = ptABC
                        --[[// On traite uniquement les points avec le type specifie
]]if( ( bit.band( self._namedParams.typeProgression, DEC_GetTypePoint( repPoint ) ) ) ~= eProgressionDirect ) then
                            do
                                if( appuiNbcPionsCommon() ) then
                                    StartActivateOverride( self, self.activations.BEH_Obs_Pion_NBC_SePosterSurBond, 1, { repPoint, } )
                                else
if( meleeAbcPionsCommon() ) then
                                        StartActivateOverride( self, self.activations.BEH_Obs_Pion_ABC_SePosterSurBond, 1, { repPoint, } )
                                    else
if( meleeInfPionsCommon() ) then
                                            do
                                                if( GetActivity() >= 1 ) then
                                                    do
                                                        Activate( self.activations.BEH_Misc_Pion_INF_MAJ_Repli, 1, emptyTable )
                                                        Activate( self.activations.ACT_Info_Trace, 1, { "Sur point ou bond", } )
                                                        StartActivateOverride( self, self.activations.BEH_Poste_Pion_INF_ArretCourt, 1, { repPoint:Getpoint_(), S_TempsObservationPoint_Ambiance(), } )
                                                    end
                                                end

                                            end
                                        end
                                    end
                                end

                            end
                        end

                        Activate( self.activations.ACT_Points_Suppression, 1, { ptABC, } )
                    end
                end

            end

        end

    end,

--[[// ****************************************************************************
]]--[[// BEH_Dep_GererProgression
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ****************************************************************************
]]}

node "BEH_Dep_GererProgression"
{
    feedbacks = { { { "done_BEH_Dep_GererProgression" }, "BEH_Dep_GererProgression" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_GererProgression, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Lima_GererLimas", { "done_BEH_Lima_GererLimas" } },
        { "BEH_Dep_GererPoint", { "done_BEH_Dep_GererPoint" } },
        { "BEH_Dep_GererAvantPoint", { "done_BEH_Dep_GererAvantPoint" } },
        { "ACT_Obs_ElargirObservation", { "done_ACT_Obs_ElargirObservation" } },
        { "BEH_Dep_ReagirFaceAObstacle", { "done_BEH_Dep_ReagirFaceAObstacle" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.typeProgression = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//=========================================================================
]]--[[//             ** Comportement spécifique à la progression tactique **
]]--[[//=========================================================================
]]if( self._namedParams.typeProgression ~= eProgressionDirect ) then
            do
                --[[//---------------------------------------------------------------------
]]--[[// Limas --> LC / LCA
]]--[[//---------------------------------------------------------------------
]]if( ( bit.band( self._namedParams.typeProgression, eTypePointLima ) ) ~= eProgressionDirect ) then
                    Activate( self.activations.BEH_Lima_GererLimas, 1.5, emptyTable )
                end

                --[[//---------------------------------------------------------------------
]]--[[// Reco point / CCT / Bond
]]--[[//---------------------------------------------------------------------
]]Activate( self.activations.BEH_Dep_GererPoint, 1.1, { self._namedParams.typeProgression, } )
                Activate( self.activations.BEH_Dep_GererAvantPoint, 1.1, { self._namedParams.typeProgression, } )
                Activate( self.activations.ACT_Obs_ElargirObservation, 1, emptyTable )--[[//---------------------------------------------------------------------
]]--[[// Elargir l'observation --> simulation des coups de sondes
]]--[[//---------------------------------------------------------------------
]]
            end
--[[//---------------------------------------------------------------------
]]--[[// Obstacles
]]--[[//---------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Dep_ReagirFaceAObstacle, 1.1, emptyTable )
    end,

--[[// ******************************************************************************
]]--[[// BEH_Dep_Progresser
]]--[[//
]]--[[// Commentaires:
]]--[[// ******************************************************************************
]]}

node "BEH_Dep_Progresser"
{
    feedbacks = { { { "done_BEH_Dep_Progresser" }, "BEH_Dep_Progresser" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Progresser, {value} ) end,
    activations =
    {
        { "BEH_Dep_GererProgression", { "done_BEH_Dep_GererProgression" } },
        { "ACT_Pions_SeDesinstaller", { "done_ACT_Pions_SeDesinstaller" } },
        { "ACT_Dep_SeDeplacer", { "done_ACT_Dep_SeDeplacer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.it = self.params[1]
        self._namedParams.typeProgression = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Gestion générique du deplacement
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_GererProgression, 1, { self._namedParams.typeProgression, } )
        Activate( self.activations.ACT_Pions_SeDesinstaller, 1, emptyTable )
        if( not DEC_Agent_EstDesinstalle() ) then
            do return end
        end

        Activate( self.activations.ACT_Dep_SeDeplacer, 1, { self._namedParams.it, } )
self.done_ACT_Dep_SeDeplacer = function( self, _, v ) self.eEtat = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_ReagirFaceAObstacle
]]--[[//
]]--[[// Commentaires: comportement tres simple, l'unite tombe en garde face
]]--[[// à l'obstacle.
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_ReagirFaceAObstacle"
{
    feedbacks = { { { "done_BEH_Dep_ReagirFaceAObstacle" }, "BEH_Dep_ReagirFaceAObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_ReagirFaceAObstacle, {value} ) end,
    activations =
    {
        { "ACT_RC_SurObjet", { "done_ACT_RC_SurObjet" } },
        { "ACT_Dep_SePosterFaceAObstacle", { "done_ACT_Dep_SePosterFaceAObstacle" } },
        { "BEH_Objet_Pion_INF_ReagirFaceAObstacle", { "done_BEH_Objet_Pion_INF_ReagirFaceAObstacle" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.repObjet = self.repObjet or nil
        self.rDist = self.rDist or 0
        self.bObjetProcheSurItineraire = self.bObjetProcheSurItineraire or false
        --[[// -----------------------------------------------------------------------------
]]--[[// 1) Demander au moteur les prochains objets sur itineraire
]]--[[// -----------------------------------------------------------------------------
]]self.bObjetProcheSurItineraire = DEC_Itineraire_ProchainObjet( self.repObjet, self.rDist, S_TypeObject_ToString( eTypeObjectBouchonMines ), S_TypeObject_ToString( eTypeObjectBouchonMinesParDispersion ), S_TypeObject_ToString( eTypeObjectZoneMineeLineaire ), S_TypeObject_ToString( eTypeObjectZoneMineeParDispersion ), S_TypeObject_ToString( eTypeObjectFosseAntiChar ), S_TypeObject_ToString( eTypeObjectAbatti ), S_TypeObject_ToString( eTypeObjectBarricade ), S_TypeObject_ToString( eTypeObjectEboulement ), S_TypeObject_ToString( eTypeObjectDestructionRoute ), S_TypeObject_ToString( eTypeObjectDestructionPont ) )
        self.repObjet = self.bObjetProcheSurItineraire.second.first
        self.rDist = self.bObjetProcheSurItineraire.second.second
        self.bObjetProcheSurItineraire = self.bObjetProcheSurItineraire.first
        --[[//-----------------------------------------------------------------------------
]]--[[// 2) On recupere la liste des representations des obstacles sur l'itineraire
]]--[[//  de deplacement
]]--[[// MIA ATTENTION: si on change la valeur de M_DISTANCE_REACTION_FACE_A_OBSTACLE()
]]--[[// ---> LE GENIE NE MARCHE PLUS
]]--[[//-----------------------------------------------------------------------------
]]if( self.bObjetProcheSurItineraire and DEC_ConnaissanceObjet_EstValide( self.repObjet ) and self.rDist < M_DISTANCE_REACTION_FACE_A_OBSTACLE() and not S_Obj_EstContourne( self.repObjet ) and not S_Obj_EstObstacleDeManoeuvreNonActif( self.repObjet ) ) then
            do
                                do
                    if( F_POLY_OBJET_REAGIR_FACE_A_OBSTACLE() ) then
                        do
                            Activate( self.activations.ACT_RC_SurObjet, 1, { eRC_EnPosteFaceAObstacle, self.repObjet, } )
                            Activate( self.activations.ACT_Dep_SePosterFaceAObstacle, 1, { self.repObjet, } )
                        end
                    else
if( appuiGeniePions() ) then
                            do
                                if( myself.mission_ ~= 0 and myself.mission_:GetType() == "T_Mission_Pion_GEN_ReconnaitreItineraire" ) then
                                    Activate( self.activations.ACT_Dep_SePosterFaceAObstacle, 1, { self.repObjet, } )
                                end

                            end
                        else
if( meleeAbcPionsCommon() ) then
                                do
                                    Activate( self.activations.ACT_Dep_SePosterFaceAObstacle, 1, { self.repObjet, } )
                                end
                            else
if( meleeInfPionsCommon() ) then
                                    do
                                        Activate( self.activations.ACT_RC_SurObjet, 1, { eRC_EnPosteFaceAObstacle, self.repObjet, } )
                                        StartActivateOverride( self, self.activations.BEH_Objet_Pion_INF_ReagirFaceAObstacle, 1, { self.repObjet, } )
                                    end
                                end
                            end
                        end
                    end

                end

                                self:SendFeedback( eActionEffectuee )
                do return end

            end
        else
            self:SendFeedback( eActionEnCours )
            do return end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_SePoster
]]--[[//
]]--[[//Commentaires : sert pour faire un start
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_SePoster"
{
    feedbacks = { { { "done_BEH_Dep_SePoster" }, "BEH_Dep_SePoster" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_SePoster, {value} ) end,
    activations =
    {
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Dep_SePoster, 1, emptyTable )
    end,

--[[// *****************************************************************************
]]--[[// BEH_SePosterFaceAEni
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_SePosterFaceAEni"
{
    feedbacks = { { { "done_BEH_SePosterFaceAEni" }, "BEH_SePosterFaceAEni" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_SePosterFaceAEni, {value} ) end,
    activations =
    {
        { "ACT_Dep_SePosterFaceA", { "done_ACT_Dep_SePosterFaceA" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-------------------------------------------------------------------------
]]--[[// init comp
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "En poste face a l'eni" )
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Vision / Posture / Formation
]]--[[//-------------------------------------------------------------------------
]]Activate( self.activations.ACT_Dep_SePosterFaceA, 1, { self._namedParams.repEni, } )
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.repEni ), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_SePosterFaceADirectionDangereuse
]]--[[//
]]--[[// Commentaires : // $$$$ MIA 2004-10-01:  A VIRER
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_SePosterFaceADirectionDangereuse"
{
    feedbacks = { { { "done_BEH_Dep_SePosterFaceADirectionDangereuse" }, "BEH_Dep_SePosterFaceADirectionDangereuse" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_SePosterFaceADirectionDangereuse, {value} ) end,
    activations =
    {
        { "ACT_Dep_SePosterFaceADir", { "done_ACT_Dep_SePosterFaceADir" } },
        { "ACT_Obs_EtablirVisionFaceADir", { "done_ACT_Obs_EtablirVisionFaceADir" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        if( DEC_GetMission( myself ) == nil ) then
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "En poste face a direction dangereuse" )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Posture / Vision
]]--[[//-----------------------------------------------------------------------------
]]self.directionDanger = self.directionDanger or DEC_GetDirectionDanger( DEC_GetMission( myself ) )
        Activate( self.activations.ACT_Dep_SePosterFaceADir, 1, { self.directionDanger, } )
        Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { self.directionDanger, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Suivre
]]--[[//
]]--[[// Commentaires: suivre une unite ami
]]--[[// 		- S'arrete a distanceMin du pion suivit
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Suivre"
{
    feedbacks = { { { "done_BEH_Dep_Suivre" }, "BEH_Dep_Suivre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Suivre, {value} ) end,
    activations =
    {
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ami = self.params[1]
        self._namedParams.rDistanceMin = self.params[2]
        self._namedParams.rDistanceMax = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.itVersAmi = self.itVersAmi or nil
        self.eComportement = self.eComportement or eCreerItineraire
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatObstacle = self.eEtatObstacle or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Résultat d'évènnements externes
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "L'unite suit " .. DEC_GetSzName( self._namedParams.ami ) )
        end

         do
            local _continue = true
--[[//---------------------------------------------------------------------
]]--[[// Rejoindre l'ami. A la fin si l'ami, n'est pas la, le rejoindre à
]]--[[// nouveaux etc.
]]--[[//---------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 1) Creer l'itineraire et mettre à jour la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 3) Rejoindre la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Si on a fini de parcourir l'itineraire on recalcul l'itineraire
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement vers l'unite
]]--[[//-----------------------------------------------------------------------------
]]--[[// Aller au plus vite
]]--[[//-----------------------------------------------------------------------------
]]--[[// L'unité se rapproche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En parallèle, surveiller que l'on est pas près de cette unite.
]]--[[// Dans ce cas on est prêt pour l'intervention
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.eComportement
            local cases_switch_1 = {}
                if switch_1 == eCreerItineraire then
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        do return end
                    end

                    self.itVersAmi = S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
                    self.itVersAmi = DEC_CreerItineraire( self._namedParams.ami:DEC_Agent_Position(), eTypeItiMouvement )
                    self.eComportement = eRejoindre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindre then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                            self.eComportement = eCreerItineraire
                                                        do return end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Progresser, 1, { self.itVersAmi, eProgressionDirect, } )
self.done_BEH_Dep_Progresser = function( self, _, v ) self.eEtat = v[1] end
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) < self._namedParams.rDistanceMin - 500 ) then
                        self.eEtat = eActionEffectuee
                    end

                    if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position() ) <= self._namedParams.rDistanceMin ) then
                        do
                            Activate( self.activations.ACT_Dep_SePoster, 1.5, emptyTable )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ami:DEC_Agent_Position(), } )
                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

    destroy = function( self )
                S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Suivre_Elastique
]]--[[//
]]--[[// Commentaires: suivre une unite ami
]]--[[// 		- S'arrete a distanceMin du pion suivit
]]--[[//		- Redemarre lorsque l'on se trouve a + distance de distanceMax
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Suivre_Elastique"
{
    feedbacks = { { { "done_BEH_Dep_Suivre_Elastique" }, "BEH_Dep_Suivre_Elastique" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Suivre_Elastique, {value} ) end,
    activations =
    {
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "BEH_Dep_ReagirFaceAObstacle", { "done_BEH_Dep_ReagirFaceAObstacle" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ami = self.params[1]
        self._namedParams.rDistanceMin = self.params[2]
        self._namedParams.rDistanceMax = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.itVersAmi = self.itVersAmi or nil
        self.eComportement = self.eComportement or eCreerItineraire
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatObstacle = self.eEtatObstacle or eActionEnCours
        self.bEnAttente = self.bEnAttente or false
        --[[//---------------------------------------------------------------------
]]--[[// Résultat d'évènnements externes
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "L'unite suit " .. DEC_GetSzName( self._namedParams.ami ) )
        end

         do
            local _continue = true
--[[//---------------------------------------------------------------------
]]--[[// Rejoindre l'ami. A la fin si l'ami, n'est pas la, le rejoindre à
]]--[[// nouveaux etc.
]]--[[//---------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 1) Creer l'itineraire et mettre à jour la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------
]]--[[// 3) Rejoindre la position amie
]]--[[//-----------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Si on a fini de parcourir l'itineraire on recalcul l'itineraire
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// L'unité se rapproche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Deplacement vers l'unite
]]--[[//-----------------------------------------------------------------------------
]]--[[// Aller au plus vite
]]--[[// L'unite suivit se rapproche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// En parallèle, surveiller que l'on est pas près de cette unite.
]]--[[// Dans ce cas on est prêt pour l'intervention
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Obstacles
]]--[[//-----------------------------------------------------------------------------
]]            local switch_1 = self.eComportement
            local cases_switch_1 = {}
                if switch_1 == eCreerItineraire then
                    if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position(), self._namedParams.rDistanceMin ) ) then
                        do return end
                    end

                    self.itVersAmi = S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
                    self.itVersAmi = DEC_CreerItineraire( self._namedParams.ami:DEC_Agent_Position(), eTypeItiMouvement )
                    self.eComportement = eRejoindre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindre then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                            self.eComportement = eCreerItineraire
                                                        do return end

                        end
                    end

                    if( self.bEnAttente ) then
                        self.bEnAttente = S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position(), self._namedParams.rDistanceMax )
                    end

                    Activate( self.activations.BEH_Dep_Progresser, 1, { self.itVersAmi, eProgressionDirect, } )
self.done_BEH_Dep_Progresser = function( self, _, v ) self.eEtat = v[1] end
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                    if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position(), self._namedParams.rDistanceMin - 200 ) ) then
                        self.eEtat = eActionEffectuee
                    end

                    self.bEnAttente = self.bEnAttente or S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.ami:DEC_Agent_Position(), self._namedParams.rDistanceMin )
                    if( self.bEnAttente ) then
                        do
                            Activate( self.activations.ACT_Dep_SePoster, 1.5, emptyTable )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ami:DEC_Agent_Position(), } )
                        end
                    end

                    if( self.eEtatObstacle == eActionEffectuee ) then
                        do
                            self.eComportement = eCreerItineraire
                            self.eEtat = eActionEffectuee
                        end
                    end

                    StartActivateOverride( self, self.activations.BEH_Dep_ReagirFaceAObstacle, 1.1, emptyTable )
self.done_BEH_Dep_ReagirFaceAObstacle = function( self, _, v ) self.eEtatObstacle = v[1] end
                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

    destroy = function( self )
                S_Misc_DetruireItineraire( self.itVersAmi, "BEH_Dep_Suivre: " )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "BEH_Progression_Pion_INF_Aborder", nodes.BEH_Progression_Pion_INF_Aborder }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "BEH_Obs_Pion_Gen_ReconnaitrePoint", nodes.BEH_Obs_Pion_Gen_ReconnaitrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "BEH_Obs_Pion_NBC_ReconnaitrePoint", nodes.BEH_Obs_Pion_NBC_ReconnaitrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "BEH_Obs_Pion_ABC_ReconnaitrePoint", nodes.BEH_Obs_Pion_ABC_ReconnaitrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "BEH_Obs_Pion_INF_RecoPoint_Copie", nodes.BEH_Obs_Pion_INF_RecoPoint_Copie }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererAvantPoint, "ACT_Points_Suppression", nodes.ACT_Points_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "BEH_Obs_Pion_NBC_SePosterSurBond", nodes.BEH_Obs_Pion_NBC_SePosterSurBond }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "BEH_Obs_Pion_ABC_SePosterSurBond", nodes.BEH_Obs_Pion_ABC_SePosterSurBond }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "BEH_Misc_Pion_INF_MAJ_Repli", nodes.BEH_Misc_Pion_INF_MAJ_Repli }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "BEH_Poste_Pion_INF_ArretCourt", nodes.BEH_Poste_Pion_INF_ArretCourt }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererPoint, "ACT_Points_Suppression", nodes.ACT_Points_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererProgression, "BEH_Lima_GererLimas", nodes.BEH_Lima_GererLimas }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererProgression, "BEH_Dep_GererPoint", nodes.BEH_Dep_GererPoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererProgression, "BEH_Dep_GererAvantPoint", nodes.BEH_Dep_GererAvantPoint }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererProgression, "ACT_Obs_ElargirObservation", nodes.ACT_Obs_ElargirObservation }
connections[ #connections + 1 ] = { nodes.BEH_Dep_GererProgression, "BEH_Dep_ReagirFaceAObstacle", nodes.BEH_Dep_ReagirFaceAObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Progresser, "BEH_Dep_GererProgression", nodes.BEH_Dep_GererProgression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Progresser, "ACT_Pions_SeDesinstaller", nodes.ACT_Pions_SeDesinstaller }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Progresser, "ACT_Dep_SeDeplacer", nodes.ACT_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionSur, "BEH_Dep_GererProgression", nodes.BEH_Dep_GererProgression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionSur, "BEH_Dep_SeDeplacer", nodes.BEH_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionSur, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionVers, "BEH_Dep_GererProgression", nodes.BEH_Dep_GererProgression }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionVers, "BEH_Dep_SeDeplacer", nodes.BEH_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ProgressionVers, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ReagirFaceAObstacle, "ACT_RC_SurObjet", nodes.ACT_RC_SurObjet }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ReagirFaceAObstacle, "ACT_Dep_SePosterFaceAObstacle", nodes.ACT_Dep_SePosterFaceAObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Dep_ReagirFaceAObstacle, "BEH_Objet_Pion_INF_ReagirFaceAObstacle", nodes.BEH_Objet_Pion_INF_ReagirFaceAObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Dep_SeDeplacer, "ACT_Pions_SeDesinstaller", nodes.ACT_Pions_SeDesinstaller }
connections[ #connections + 1 ] = { nodes.BEH_Dep_SeDeplacer, "ACT_Dep_SeDeplacer", nodes.ACT_Dep_SeDeplacer }
connections[ #connections + 1 ] = { nodes.BEH_Dep_SePoster, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_SePosterFaceADirectionDangereuse, "ACT_Dep_SePosterFaceADir", nodes.ACT_Dep_SePosterFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_SePosterFaceADirectionDangereuse, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre_Elastique, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre_Elastique, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre_Elastique, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre_Elastique, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Suivre_Elastique, "BEH_Dep_ReagirFaceAObstacle", nodes.BEH_Dep_ReagirFaceAObstacle }
connections[ #connections + 1 ] = { nodes.BEH_SePosterFaceAEni, "ACT_Dep_SePosterFaceA", nodes.ACT_Dep_SePosterFaceA }
connections[ #connections + 1 ] = { nodes.BEH_SePosterFaceAEni, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }

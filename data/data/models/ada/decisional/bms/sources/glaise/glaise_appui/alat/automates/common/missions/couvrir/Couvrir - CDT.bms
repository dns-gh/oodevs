includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/common/missions/couvrir/Couvrir - CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// -----------------------------------------------------------------------------
]]--[[// Conduite de la mission Automate Alat Couvrir :
]]--[[//
]]--[[//
]]--[[// Les unites de reserve suivent les patrouilles qui couvrent pour être pretes
]]--[[// à relever
]]--[[//
]]--[[// De plus, on doit toujours assurer la permanance de la couverture malgré les
]]--[[// ravitaillements.
]]--[[//
]]--[[// Les HM Log gerent les besoins en plots de ravitaillement et en IMEX
]]--[[//
]]--[[// Les unites qui peuvent relever les unites recoivent la mission suivre pour 
]]--[[// etre à meme de le faire le plus rapidement possible
]]--[[//
]]--[[// Gestion des ODC Inopinés
]]--[[// -----------------------------------------------------------------------------
]]node "MIS_Automate_CDT_ALAT_Couvrir"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ALAT_Couvrir" }, "MIS_Automate_CDT_ALAT_Couvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ALAT_Couvrir, {value} ) end,
    activations =
    {
        { "BEH_ROE_Automate_TirLibre", { "done_BEH_ROE_Automate_TirLibre" } },
        { "BEH_Ordre_Automate_Poursuivre_", { "done_BEH_Ordre_Automate_Poursuivre_" } },
        { "BEH_Ordre_Automate_RecevoirOrdreInopine", { "done_BEH_Ordre_Automate_RecevoirOrdreInopine" } },
        { "BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe", { "done_BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe" } },
        { "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", { "done_BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne" } },
        { "BEH_Automate_ALAT_CoordonnerFeux", { "done_BEH_Automate_ALAT_CoordonnerFeux" } },
        { "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", { "done_BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX" } },
        { "BEH_ROE_Automate_TirRestreint", { "done_BEH_ROE_Automate_TirRestreint" } },
        { "BEH_Mission_Automate_AssignerStationnerAListe", { "done_BEH_Mission_Automate_AssignerStationnerAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eCouvrir
        self.listePionsSgpt = self.listePionsSgpt or {}
        self.listePionsSgptSansRavitaillementsEnCours = self.listePionsSgptSansRavitaillementsEnCours or {}
        self.listePionsCouvrir = self.listePionsCouvrir or {}
        self.listePionsCouvrirSansRavitaillementsEnCours = self.listePionsCouvrirSansRavitaillementsEnCours or {}
        self.listeUnitesACouvrir = self.listeUnitesACouvrir or {}
        self.listeHMLog = self.listeHMLog or {}
        self.listePionsAAppuyerIMEX = self.listePionsAAppuyerIMEX or {}
        self.ravitaillementDebutMission = self.ravitaillementDebutMission or false
        self.directionEnnemi = self.directionEnnemi or DEC_GetDirectionEnnemi( self._namedParams.mission )
        if( ModuleBegins() ) then
            do
                Activate( self.activations.BEH_ROE_Automate_TirLibre, 1, emptyTable )
                Activate( self.activations.BEH_Ordre_Automate_Poursuivre_, 1, emptyTable )
            end
        end

        if( ModuleBegins() ) then
            self.ravitaillementDebutMission = self._namedParams.mission.ravitaillementDebutMission_
        end

        self.eEtatODC = self.eEtatODC or eActionEnCours
        if( self.eEtatODC == eActionHalt ) then
            do
                self.ePhase = eSExfiltrer
                self.eEtatODC = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Automate_RecevoirOrdreInopine, 1, emptyTable )
self.done_BEH_Ordre_Automate_RecevoirOrdreInopine = function( self, _, v ) self.eEtatODC = v[1] end
        --[[// donner des missions aux pions qui sont opérationnels et qui ne sont pas en cours
]]--[[// de ravitaillement
]]self.listePionsSgpt = {}
        self.listePionsSgptSansRavitaillementsEnCours = {}
        self.listePionsSgpt = S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        local listePionsEnCoursRavitaillement = S_Liste_Automate_ALAT_PionsEnCoursRavitaillement( self.listePionsSgpt )
        self.listePionsSgptSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsSgpt, listePionsEnCoursRavitaillement )
        --[[// Mise à Jour des selections
]]--[[// --------------------------
]]local listeHAH = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAH" )
        local listeTigre = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleTigre" )
        local listeHAPCanons = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAC" )
        local listeHAM = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHAM" )
        --[[// liste des unités pour IMEX
]]self.listeHMLog = {}
        self.listeHMLog = S_Cherche_Automate_Filtre_TypePion( self.listePionsSgpt, "PatrouilleHMLog" )
        --[[// liste des unités à appuyer
]]self.listeUnitesACouvrir = {}
        self.listeUnitesACouvrir = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesAAppuyer_ )
        --[[// liste des pions qui peuvent couvrir
]]self.listePionsCouvrir = {}
        self.listePionsCouvrirSansRavitaillementsEnCours = {}
        self.listePionsCouvrir = S_Liste_Concatene( self.listePionsCouvrir, listeHAH, listeTigre )
        self.listePionsCouvrir = S_Liste_Concatene( self.listePionsCouvrir, self.listePionsCouvrir, listeHAPCanons )
        self.listePionsCouvrir = S_Liste_Concatene( self.listePionsCouvrir, self.listePionsCouvrir, listeHAM )
        self.listePionsCouvrirSansRavitaillementsEnCours = S_Cherche_Automate_Filtre_PionNonDansListe( self.listePionsCouvrir, listePionsEnCoursRavitaillement )
        self.listePionsAAppuyerIMEX = {}
        self.listePionsAAppuyerIMEX = S_Cherche_Automate_Filtre_PionNonDansListe( S_Liste_Automate_ALAT_UnitesAAppuyer( DEC_Automate_PionsSansPC() ), self.listeHMLog )
         do
            local _continue = true
--[[// CDT des missions de couverture
]]--[[// Gestion Coordination Ravitaillement
]]--[[// -----------------------------------
]]--[[// Gestion de la coordination des feux
]]--[[// -----------------------------------
]]--[[// IMEX et ravitaillements
]]--[[// ---------------------------------------------------------------------
]]            local switch_1 = self.ePhase
                if switch_1 == eCouvrir then
                    if( not DIA_IsListEmpty( self.listePionsCouvrirSansRavitaillementsEnCours ) and not DIA_IsListEmpty( self.listeUnitesACouvrir ) ) then
                        Activate( self.activations.BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe, 1, { ePhase_CDT, self.listePionsCouvrirSansRavitaillementsEnCours, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, self._namedParams.mission.ambianceMission_, self._namedParams.mission.plotsRavitaillement_, eNatureAtlas_Helicoptere, self.listeUnitesACouvrir, self.directionEnnemi, 60, self.ravitaillementDebutMission, } )
                    end

                    if( not DIA_IsListEmpty( self.listePionsCouvrir ) ) then
                        Activate( self.activations.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne, 1, { self.listePionsCouvrir, } )
                    end

                    if( not DIA_IsListEmpty( self.listePionsCouvrirSansRavitaillementsEnCours ) ) then
                        Activate( self.activations.BEH_Automate_ALAT_CoordonnerFeux, 1, { self.listePionsCouvrirSansRavitaillementsEnCours, 0, } )
                    end

                    Activate( self.activations.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX, 1, { self.listeHMLog, self.listePionsAAppuyerIMEX, 30000, self._namedParams.mission.pointRegroupement_, self._namedParams.mission.porteeAction_, false, } )
                    _continue = false
                elseif switch_1 == eSExfiltrer then
                    Activate( self.activations.BEH_ROE_Automate_TirRestreint, 1, emptyTable )
                    Activate( self.activations.BEH_Mission_Automate_AssignerStationnerAListe, 1, { ePhase_CDT, DEC_Automate_PionsAvecPC(), self._namedParams.mission.pointRegroupement_, } )
                    _continue = false
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ALAT_Couvrir = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_ROE_Automate_TirLibre", nodes.BEH_ROE_Automate_TirLibre }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Ordre_Automate_Poursuivre_", nodes.BEH_Ordre_Automate_Poursuivre_ }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Ordre_Automate_RecevoirOrdreInopine", nodes.BEH_Ordre_Automate_RecevoirOrdreInopine }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe", nodes.BEH_Medo_Automate_ALAT_AssignerMissionsCouvrirAListe }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne", nodes.BEH_Log_Automate_ALAT_GererRavitaillementsCoordonne }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Automate_ALAT_CoordonnerFeux", nodes.BEH_Automate_ALAT_CoordonnerFeux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX", nodes.BEH_Log_Automate_ALAT_GererHelitransportsPlotsEtIMEX }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_ROE_Automate_TirRestreint", nodes.BEH_ROE_Automate_TirRestreint }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ALAT_Couvrir, "BEH_Mission_Automate_AssignerStationnerAListe", nodes.BEH_Mission_Automate_AssignerStationnerAListe }

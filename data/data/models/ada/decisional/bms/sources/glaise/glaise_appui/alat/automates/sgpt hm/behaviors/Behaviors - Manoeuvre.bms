includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_appui/alat/automates/sgpt hm/behaviors/Behaviors - Manoeuvre.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Ce comportement permet de synchroniser les unites qui transportent afin
]]--[[// d'eviter une dispertion sur le terrain.
]]--[[//
]]--[[// Les unites ont 5 états de transport :
]]--[[//              - eEtatPhaseMission_ProgressionSurAxe
]]--[[//            	- eEtatPhaseMission_TransportEnCours,
]]--[[//          	- eEtatPhaseMission_TransportEmbarquement,
]]--[[//          	- eEtatPhaseMission_TransportDebarquement
]]--[[//              - UnitesPasPretes => pas de syncronisation avec les unites qui on cet état.
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]node "BEH_Medo_Automate_ALAT_HM_SynchroniserTransport"
{
    activations =
    {
        { "ACT_Ordre_Automate_Pause", {} },
        { "ACT_Ordre_Automate_Continue", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listeUnites = self.params[1]
    end,

    activate = function( self )
        local etatAPoster = eEtatPhaseMission_None
        local pionDECBuffer = nil
        for _,x in pairs( --[[//synchronisation sur la dernière unité de la liste.
]]--[[//c'est la réference de synchronisation
]]self._namedParams.listeUnites or {} ) do
        local _continue = true
do
                pionDECBuffer = x
                if( F_Pion_GeteEtatPhaseMission( pionDECBuffer ) == eEtatPhaseMission_TransportEmbarquement ) then
                    etatAPoster = eEtatPhaseMission_TransportEnCours
                end

                if( F_Pion_GeteEtatPhaseMission( pionDECBuffer ) == eEtatPhaseMission_TransportDebarquement ) then
                    etatAPoster = eEtatPhaseMission_ProgressionSurAxe
                end

            end

        end

        if( etatAPoster == eEtatPhaseMission_None ) then
            do return end
        end

        --[[// indicateur pour savoir si toutes les unites sont synchronisées.
]]local bUnitesSynchronisees = true
        for _,x in pairs( self._namedParams.listeUnites or {} ) do
        local _continue = true
do
                pionDECBuffer = x
                if( F_Pion_GeteEtatPhaseMission( pionDECBuffer ) ~= etatAPoster ) then
                    bUnitesSynchronisees = false
                end

            end

        end

        if( not bUnitesSynchronisees ) then
            do
                for _,x in pairs( --[[//poster toutes les unites qui sont dans etatAPoster
]]self._namedParams.listeUnites or {} ) do
                local _continue = true
                    do
                        pionDECBuffer = x
                        if( F_Pion_GeteEtatPhaseMission( pionDECBuffer ) == etatAPoster ) then
                            Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { pionDECBuffer, } )
                        end

                    end

                end

            end
        else
do
                for _,x in pairs( --[[//continuer avec toutes les unites
]]self._namedParams.listeUnites or {} ) do
                local _continue = true
                    Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x, } )

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ALAT_HM_SynchroniserTransport, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }

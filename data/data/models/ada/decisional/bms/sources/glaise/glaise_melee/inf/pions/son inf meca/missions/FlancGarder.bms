includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/pions/son inf meca/missions/FlancGarder.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/FlancGarder.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:29 $
]]--[[// $Revision: 19 $
]]--[[// $Workfile: FlancGarder.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


node "MIS_Pion_INF_FlancGarder"
{
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", {} },
        { "BEH_MAJ_AgressiviteMission", {} },
        { "ACT_Misc_Pion_INF_MAJ_PositionRegroupement", {} },
        { "BEH_Ordre_Inopine", {} },
        { "ACT_Ordre_Suppression", {} },
        { "BEH_Manoeuvre_RompreContact", {} },
        { "BEH_Mission_Pion_INF_RecoAxe", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Poste_Pion_INF_TomberEnGarde", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eAction = self.eAction or eActionEnCours
        self.eActionOrdre = self.eActionOrdre or eActionEnCours
        self.ePhase = self.ePhase or eReconnaitre
        self.eCurrentPhase = self.eCurrentPhase or ePreparerMission
        --[[//-----------------------------------------------------------------------------
]]--[[// Initialisations
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Mission 'FlancGarder' : debut" )
                --[[// situation tactique
]]DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Offensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_MANOEUVRE(), } )
        --[[// Point de regroupement : uniteAFlancgarder_
]]Activate( self.activations.ACT_Misc_Pion_INF_MAJ_PositionRegroupement, 1, { self._namedParams.mission.uniteAFlancgarder_:DEC_Agent_Position(), } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Reception Ordre de conduite
]]--[[//-----------------------------------------------------------------------------						
]]if( self.eActionOrdre == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eActionOrdre = eActionEnCours
                self.eAction = eActionEnCours
            end
        end

        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionOrdre = v else rawset( t, k, v ) end end } ) )
        --[[//-----------------------------------------------------------------------------
]]--[[// Reception d ordre du superieur
]]--[[//-----------------------------------------------------------------------------
]]local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or {} ) do
        local _continue = true
do
                --[[//-----------------------------------------------------------------------------
]]--[[// ordre de conduite
]]--[[//-----------------------------------------------------------------------------
]]local repOrdre = x
                local bEstUtilise = true
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Rep_OrderConduite_Decrocher" then
                            DEC_Trace( "Traite ordre: rompre contact" )
                            if( self.ePhase == eFinMission ) then
                                self.ePhase = eRompreContact
                            else
                                bEstUtilise = false
                            end

                            _continue = false
                                                cases_switch_1[1] = true

                        else
                            bEstUtilise = false
                            _continue = false
                                                end
                    end

                if( bEstUtilise ) then
                    Activate( self.activations.ACT_Ordre_Suppression, 1, { repOrdre, } )
                end

            end
--[[//=============================================================================
]]--[[// Mission de Reconnaissance
]]--[[//
]]--[[// 1) preparation
]]--[[// 2) - progression sur l axe
]]--[[//    - retour sur l axe de progression si ce dernier a été quitte
]]--[[// 3) fin mission
]]--[[//=============================================================================
]]
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRompreContact then
                    if( self.eAction == eActionImpossible ) then
                        do
                                                        do
                                DEC_Warning( eRC_MissionImpossible )
                            end

                                                        self.params.__returnValue = eActionImpossible
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Manoeuvre_RompreContact, 2 * GetMotivation( "MOT_ManoeuvrerSurEnis" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eReconnaitre then
                    if( self.eCurrentPhase ~= eFinMission ) then
                        do
                            Activate( self.activations.BEH_Mission_Pion_INF_RecoAxe, GetMotivation( "MOT_Mission" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCurrentPhase = v else rawset( t, k, v ) end end } ) )
                            _continue = false
                        end
                    else
                        self.ePhase = eFinMission
                    end

                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    --[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission
]]--[[//-----------------------------------------------------------------------------
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "Fin mission de mission reconnaitre un axe" )
                                DEC_FinMission()
                                                                self.params.__returnValue = eActionEffectuee
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, setmetatable( { true, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

    destroy = function( self )
            end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_FlancGarder = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "ACT_Misc_Pion_INF_MAJ_PositionRegroupement", nodes.ACT_Misc_Pion_INF_MAJ_PositionRegroupement }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_Manoeuvre_RompreContact", nodes.BEH_Manoeuvre_RompreContact }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_Mission_Pion_INF_RecoAxe", nodes.BEH_Mission_Pion_INF_RecoAxe }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_FlancGarder, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

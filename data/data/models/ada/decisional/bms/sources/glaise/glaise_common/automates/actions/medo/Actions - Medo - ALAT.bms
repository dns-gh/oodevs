includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - ALAT.bms"] = true

--[[// -----------------------------------------------------------------------------
]]--[[// Action Permettant de Donner Une Mission à un Pion ALAT
]]--[[// -----------------------------------------------------------------------------
]]
--[[// Donner Mission Aller Se Ravitailler
]]--[[// -----------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA" }, "ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerAllerAllerSeRecompleterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.plotsRavitaillement = self.params[3]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_AllerSeRecompleter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_AllerSeRecompleter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission IMEX
]]--[[// -------------------
]]node "ACT_Mission_Automate_ALAT_AssignerIMEXA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerIMEXA" }, "ACT_Mission_Automate_ALAT_AssignerIMEXA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerIMEXA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.listePionsAAppuyer = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_IMEX" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_IMEX" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "unitesAAppuyer_", self._namedParams.listePionsAAppuyer )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Héliporter Hélitransporter Plot de Ravitaillement
]]--[[// ----------------------------------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA" }, "ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerHeliporterPlotsRavitaillementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointDebarquement = self.params[4]
        self._namedParams.plotsRavitaillement = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_HeliporterHelitransporterPlotRavitaillement" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_Copie_Point_Mission( self._namedParams.pointDebarquement, self.missionPion, "pointDebarquement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "positionRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Héliporter
]]--[[// -------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerHeliporterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerHeliporterA" }, "ACT_Mission_Automate_ALAT_AssignerHeliporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerHeliporterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHeliporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Heliporter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Heliporter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_Copie_Point_Mission( self._namedParams.pointDebarquement, self.missionPion, "pointDebarquement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointEmbarquement, self.missionPion, "pointEmbarquement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "unitesAHeliporter_", self._namedParams.listeUnitesAHeliporter )
        DEC_AssignMissionParameter( self.missionPion, "avecMateriel_", self._namedParams.avecMateriel )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Hélitransporer
]]--[[// -----------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerHelitransporterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerHelitransporterA" }, "ACT_Mission_Automate_ALAT_AssignerHelitransporterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerHelitransporterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.pointEmbarquement = self.params[4]
        self._namedParams.pointDebarquement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.listeUnitesAHelitransporter = self.params[7]
        self._namedParams.avecMateriel = self.params[8]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Helitransporter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Helitransporter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres particuliers de cette mission
]]DEC_Copie_Point_Mission( self._namedParams.pointDebarquement, self.missionPion, "pointDebarquement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointEmbarquement, self.missionPion, "pointEmbarquement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "unitesAHelitransporter_", self._namedParams.listeUnitesAHelitransporter )
        DEC_AssignMissionParameter( self.missionPion, "avecMateriel_", self._namedParams.avecMateriel )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Reconnaitre le Contour Ennemi
]]--[[// --------------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA" }, "ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerReconnaitreContourEniA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_ReconnaitreContourEnnemi" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_ReconnaitreContourEnnemi" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Reconnaitre dans la Profondeur
]]--[[// ---------------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA" }, "ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerReconnaitreDansLaProfondeurA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointDislocation = self.params[3]
        self._namedParams.zone = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_ReconnaitreDansLaProfondeur" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_Copie_Point_Mission( self._namedParams.pointDislocation, self.missionPion, "pointDislocation_" )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Jalonner
]]--[[// -----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerJalonnerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerJalonnerA" }, "ACT_Mission_Automate_ALAT_AssignerJalonnerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerJalonnerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Jalonner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Jalonner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Eclairer
]]--[[// -----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerEclairerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerEclairerA" }, "ACT_Mission_Automate_ALAT_AssignerEclairerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerEclairerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Eclairer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Eclairer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Freiner
]]--[[// ----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerFreinerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerFreinerA" }, "ACT_Mission_Automate_ALAT_AssignerFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerFreinerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Freiner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Freiner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Attaquer
]]--[[// -----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerAttaquerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerAttaquerA" }, "ACT_Mission_Automate_ALAT_AssignerAttaquerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerAttaquerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Attaquer" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Attaquer" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission AttaquerUneFormationAeromobile
]]--[[// ---------------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA" }, "ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerAttaquerUneFormationAeromobileA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.listeEnis = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_DetruireAeromobile" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_DetruireAeromobile" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "uniteADetruire_", self._namedParams.listeEnis )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Detruire Neutraliser dans Zone
]]--[[// ---------------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA" }, "ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerDetruireNeutraliserDansZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
        self._namedParams.pointDislocation = self.params[4]
        self._namedParams.pointRegroupement = self.params[5]
        self._namedParams.plotsRavitaillement = self.params[6]
        self._namedParams.ciblesPrioritaires = self.params[7]
        self._namedParams.neutraliser = self.params[8]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_DetruireNeutraliserDansZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_DetruireNeutraliserDansZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        DEC_Copie_Point_Mission( self._namedParams.pointDislocation, self.missionPion, "pointDislocation_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "neutraliser_", self._namedParams.neutraliser )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Appuyer Direct Au Contact
]]--[[// ----------------------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA" }, "ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerAppuyerDirectAuContactA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillement = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.unitesAAppuyer = self.params[6]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_AppuyerDirectAuContact" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_AppuyerDirectAuContact" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillement )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        DEC_AssignMissionParameter( self.missionPion, "unitesAAppuyer_", self._namedParams.unitesAAppuyer )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Escorter
]]--[[// -----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerEscorterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerEscorterA" }, "ACT_Mission_Automate_ALAT_AssignerEscorterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerEscorterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteAEscorter = self.params[6]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Escorter" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Escorter" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_AssignMissionParameter( self.missionPion, "unitesAEscorter_", self._namedParams.uniteAEscorter )
        DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillements )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Couvrir
]]--[[// ----------------------
]]node "ACT_Mission_Automate_ALAT_AssignerCouvrirA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerCouvrirA" }, "ACT_Mission_Automate_ALAT_AssignerCouvrirA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerCouvrirA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pointRegroupement = self.params[3]
        self._namedParams.plotsRavitaillements = self.params[4]
        self._namedParams.ciblesPrioritaires = self.params[5]
        self._namedParams.uniteACouvrir = self.params[6]
        self._namedParams.directionCouverture = self.params[7]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Couvrir" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Couvrir" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//on ecrase la direction de l'ennemi donnée par la mission automate par la
]]--[[//direction par laquelle on attend l'ennemi ( direction couverture )
]]DEC_Copie_DirectionDanger_Mission( self._namedParams.directionCouverture, self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_AssignMissionParameter( self.missionPion, "unitesACouvrir_", self._namedParams.uniteACouvrir )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillements )
        DEC_AssignMissionParameter( self.missionPion, "ciblesPrioritaires_", self._namedParams.ciblesPrioritaires )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[// Donner Mission Surveiller
]]--[[// -------------------------
]]node "ACT_Mission_Automate_ALAT_AssignerSurveillerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_ALAT_AssignerSurveillerA" }, "ACT_Mission_Automate_ALAT_AssignerSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_ALAT_AssignerSurveillerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.localisation = self.params[3]
        self._namedParams.pointRegroupement = self.params[4]
        self._namedParams.plotsRavitaillements = self.params[5]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
            end
--[[//cree l'instance de missionPion
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Surveiller" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_ALAT_Surveiller" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//copie de tous les elements génériques de la mission automate
]]--[[//( dir dangereuse, ROE... )
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//copie des paramètres mission
]]DEC_Copie_Point_Mission( self._namedParams.pointRegroupement, self.missionPion, "pointRegroupement_" )
        DEC_Copie_Localisation_Mission( self._namedParams.localisation, self.missionPion, "zone_" )
        DEC_AssignMissionParameter( self.missionPion, "plotsRavitaillement_", self._namedParams.plotsRavitaillements )
        if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}


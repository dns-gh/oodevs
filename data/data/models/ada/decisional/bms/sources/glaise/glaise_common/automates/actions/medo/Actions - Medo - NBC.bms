includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/actions/medo/Actions - Medo - NBC.bms"] = true



--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerReconnaitreA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_NBC_AssignerReconnaitreA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_NBC_AssignerReconnaitreA" }, "ACT_Mission_Automate_NBC_AssignerReconnaitreA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_NBC_AssignerReconnaitreA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
    end,

    select = function( self )
        self.dest = self.dest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pion )
        --[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self.dest ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]        end

        self.missionPion = self.missionPion or nil
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreItineraire" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreItineraire" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.dest, self.missionPion, "itineraire_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerArmerSiteA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_NBC_AssignerArmerSiteA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_NBC_AssignerArmerSiteA" }, "ACT_Mission_Automate_NBC_AssignerArmerSiteA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_NBC_AssignerArmerSiteA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.positionSite = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_AnimerUnPlotDeDecontamination" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_AnimerUnPlotDeDecontamination" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Site
]]DEC_Copie_Point_Mission( self._namedParams.positionSite, self.missionPion, "positionSiteDecontamination_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA" }, "ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_NBC_AssignerReconnaitreZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Zone
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerReconnaitreSiteA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_NBC_AssignerReconnaitreSiteA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_NBC_AssignerReconnaitreSiteA" }, "ACT_Mission_Automate_NBC_AssignerReconnaitreSiteA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_NBC_AssignerReconnaitreSiteA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.siteROTA = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreUnSiteROTA" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_ReconnaitreUnSiteROTA" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Site ROTA							
]]DEC_AssignMissionParameter( self.missionPion, "siteROTA_", self._namedParams.siteROTA )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_NBC_AssignerDecontaminerZoneA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_NBC_AssignerDecontaminerZoneA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_NBC_AssignerDecontaminerZoneA" }, "ACT_Mission_Automate_NBC_AssignerDecontaminerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_NBC_AssignerDecontaminerZoneA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_DecontaminerZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_NBC_DecontaminerZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Zone
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]
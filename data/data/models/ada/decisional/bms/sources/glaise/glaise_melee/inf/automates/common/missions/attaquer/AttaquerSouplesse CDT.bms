includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_melee/inf/automates/common/missions/attaquer/AttaquerSouplesse CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Missions/Attaquer/AttaquerSouplesse CDT.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 23/09/05 18:00 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: AttaquerSouplesse CDT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[// ******************************************************************************
]]--[[// BEH_Medo_Automate_INF_ReduireDetruire
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// ******************************************************************************
]]node "BEH_Situation_Automate_INF_Attaquer"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_Attaquer" }, "BEH_Situation_Automate_INF_Attaquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_Attaquer, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_Attaquer_SurLD", { "done_BEH_Situation_Automate_INF_Attaquer_SurLD" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                local selPions_PE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        if( #( selPions_PE ) ~= 0 and #( selPions_PE ) == S_Conduite_Pions_EtatLima( selPions_PE, eEtatLima_LD ) ) then
            StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_Attaquer_SurLD, 1, { selPions_PE, } )
        end

    end,

}

node "BEH_Situation_Automate_INF_Attaquer_SurLD"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_Attaquer_SurLD" }, "BEH_Situation_Automate_INF_Attaquer_SurLD" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_Attaquer_SurLD, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_AssignerSemparerA", { "done_BEH_Conduite_Automate_AssignerSemparerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions_PE = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        local sUnites_INF = S_Cherche_Automate_Filtre_TypePion( self._namedParams.selPions_PE, "SectionInfanterie" )
        local sUnites_ABC = S_Cherche_Automate_Filtre_TypePion_ABC( self._namedParams.selPions_PE )
        --[[// with ( x_pion in selPions_PE )
]]--[[//	action ACT_Ordre_Automate_Continue( x_pion );
]]Activate( self.activations.BEH_Conduite_Automate_AssignerSemparerA, 1, { sUnites_INF, } )
    end,

--[[// behavior BEH_Conduite_Automate_AssignerSemparerA( sUnites_ABC );	
]]}

node "BEH_Conduite_Automate_AssignerSemparerA"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_AssignerSemparerA" }, "BEH_Conduite_Automate_AssignerSemparerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_AssignerSemparerA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerA_Semparer", { "done_BEH_Mission_Automate_INF_AssignerA_Semparer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions_PE = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.lstObjectifs = self.lstObjectifs or DEC_Geometrie_CreerListePoints()
        if( ModuleBegins() ) then
            do
                DEC_Copie_ListePoints( self.mission.objectifs_, self.lstObjectifs )
                for _,x_pion in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Assignement des missions aux differents pions
]]--[[//-------------------------------------------------------------------------		
]]self._namedParams.selPions_PE or emptyTable ) do
                local _continue = true
                    do
                        local rIdProche = S_Geometrie_PointPlusProchePosition_DansFuseau( DEC_Automate_PionPosition( x_pion ), self.lstObjectifs )
                        if( rIdProche < DEC_ListePoints_Size( self.lstObjectifs ) ) then
                            do
                                local ptProche = DEC_Geometrie_CreerPoint()
                                DEC_Copie_Point( DEC_ListePoints_GetAt( self.lstObjectifs, rIdProche ), ptProche )
                                DEC_ListePoints_Remove( self.lstObjectifs, rIdProche )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_INF_AssignerA_Semparer, 1, { ePhase_CDT, x_pion, ptProche, } )
                            end
                        end

                    end

                end

            end
        end

    end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_AssignerSemparerA, "BEH_Mission_Automate_INF_AssignerA_Semparer", nodes.BEH_Mission_Automate_INF_AssignerA_Semparer }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Attaquer, "BEH_Situation_Automate_INF_Attaquer_SurLD", nodes.BEH_Situation_Automate_INF_Attaquer_SurLD }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Attaquer_SurLD, "BEH_Conduite_Automate_AssignerSemparerA", nodes.BEH_Conduite_Automate_AssignerSemparerA }

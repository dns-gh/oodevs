includedFiles = includedFiles or {}
includedFiles["sources/glaise/glaise_common/automates/behaviors/Behaviors - Conduite.bms"] = true

include "bit.lua"


--[[//=============================================================================
]]--[[// ********************* GESTION DES ORDRES DE CONDUITE ***********************
]]--[[//=============================================================================
]]
--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_GererFuseau
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Conduite_Automate_GererFuseau"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_GererFuseau" }, "BEH_Conduite_Automate_GererFuseau" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_GererFuseau, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_GererFuseau_Init", { "done_BEH_Conduite_Automate_GererFuseau_Init" } },
        { "BEH_Conduite_Automate_GererFuseau_Valide", { "done_BEH_Conduite_Automate_GererFuseau_Valide" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionInit = self.eActionInit or eActionEnCours
        if( self.eActionInit == eActionEnCours ) then
            Activate( self.activations.BEH_Conduite_Automate_GererFuseau_Init, 1, {} )
self.done_BEH_Conduite_Automate_GererFuseau_Init = function( self, _, v ) self.eActionInit = v[1] end
        else
            Activate( self.activations.BEH_Conduite_Automate_GererFuseau_Valide, 1, {} )
        end

    end,

}

node "BEH_Conduite_Automate_GererFuseau_Init"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_GererFuseau_Init" }, "BEH_Conduite_Automate_GererFuseau_Init" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_GererFuseau_Init, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Pause", { "done_ACT_Ordre_Automate_Pause" } },
        { "ACT_Ordre_Automate_Continue", { "done_ACT_Ordre_Automate_Continue" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.rN_PE_Init = self.rN_PE_Init or 0
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.bOrdre_Donne = self.bOrdre_Donne or false
        self.bInit = self.bInit or false
        local sUnites_PE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        if( not self.bInit ) then
            self.rN_PE_Init = #( sUnites_PE )
        end

        if( not self.bInit and #( sUnites_PE ) ~= 0 ) then
            do
                --[[// Dit a tous les pions dans le fuseau de se poster
]]local rPions_DansFuseau = 0
                for _,x in pairs( sUnites_PE or {} ) do
                local _continue = true
                    do
                        if( DEC_Automate_EstPointDansFuseauPion( DEC_Automate_PionPosition( x ), x ) ) then
                            do
                                                                rPions_DansFuseau = rPions_DansFuseau + 1
                                StartActivateOverride( self, self.activations.ACT_Ordre_Automate_Pause, 1, { x, } )
                            end
                        end

                    end

                end

                if( rPions_DansFuseau == #( sUnites_PE ) ) then
                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end
                end

                self.bInit = true
            end
        end

        if( not self.bInit ) then
            do return end
        end

        --[[// si tous les pions hors fuseau disent ok 
]]--[[//		-> on fait poursuivre tout le monde
]]local rPion_Rejoins = S_Conduite_Pions_EtatMission( sUnites_PE, eEtatPhaseMission_RejointFuseau )
        local rPion_SurFuseau = S_Conduite_Pions_EtatLima( sUnites_PE, eEtatLima_Fuseau )
        if( self.bOrdre_Donne or ( #( sUnites_PE ) < self.rN_PE_Init ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        if( rPion_Rejoins ~= 0 and rPion_SurFuseau == rPion_Rejoins ) then
            do
                for _,x in pairs( sUnites_PE or {} ) do
                local _continue = true
                    Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x, } )

                end

                self.bOrdre_Donne = true
            end
        end

    end,

}

node "BEH_Conduite_Automate_GererFuseau_Valide"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_GererFuseau_Valide" }, "BEH_Conduite_Automate_GererFuseau_Valide" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_GererFuseau_Valide, {value} ) end,
    activations =
    {
        { "ACT_Ordre_Automate_Continue", { "done_ACT_Ordre_Automate_Continue" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local sUnites_PE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        for _,x in pairs( sUnites_PE or {} ) do
        local _continue = true
do
                local pion = x
                if( F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhaseMission_RejointFuseau and F_Pion_GeteEtatLima( pion ) == eEtatLima_Fuseau ) then
                    Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x, } )
                end

            end

        end

    end,

}

node "BEH_Conduite_Automate_GererFinMission"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_GererFinMission" }, "BEH_Conduite_Automate_GererFinMission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_GererFinMission, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_FinDeMission", { "done_BEH_Situation_Automate_FinDeMission" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionMission = self.eActionMission or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Gestion de la fin de mission
]]--[[//-----------------------------------------------------------------------------
]]if( self.eActionMission == eActionEffectuee ) then
            do
                self.eActionMission = eActionEnCours
                                do
                    for _,pion in pairs( --[[//selection selPions = DEC_Pion_PionsAvecPC();
]]DEC_Automate_PionsAvecPC() or {} ) do
                    local _continue = true
                        pion:SetStateVariable( "VE_PreparationMission", 1 )

                    end

                    --[[// DEC_RC( eRC_FinMission );
]]--[[// DEC_RC( eRC_MissionTerminee );
]]DEC_Trace( "$$ Mission terminee $$" )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Situation_Automate_FinDeMission, 1, {} )
self.done_BEH_Situation_Automate_FinDeMission = function( self, _, v ) self.eActionMission = v[1] end
    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Gestion de la Fin de mission Automate
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Situation_Automate_FinDeMission_Sur"
{
    feedbacks = { { { "done_BEH_Situation_Automate_FinDeMission_Sur" }, "BEH_Situation_Automate_FinDeMission_Sur" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_FinDeMission_Sur, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_FinDeMission", { "done_BEH_Situation_Automate_FinDeMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            DEC_Trace( DEC_GetSzName( self._namedParams.pion ) .. " : fin de mission." )
        end

        Activate( self.activations.BEH_Situation_Automate_FinDeMission, 1, {} )
    end,

}

node "BEH_Situation_Automate_FinDeMission"
{
    feedbacks = { { { "done_BEH_Situation_Automate_FinDeMission" }, "BEH_Situation_Automate_FinDeMission" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_FinDeMission, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Revoir	 
]]self.lst_Pions_EnTete = self.lst_Pions_EnTete or DEC_Automate_PionsSansPC()
        local rFinDeMission = #( self.lst_Pions_EnTete ) + 1
        do
        end

        do
        end

        if( GetActivity() >= rFinDeMission ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

                self:SendFeedback( eActionEnCours )
        do return end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFinMission, "BEH_Situation_Automate_FinDeMission", nodes.BEH_Situation_Automate_FinDeMission }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFuseau, "BEH_Conduite_Automate_GererFuseau_Init", nodes.BEH_Conduite_Automate_GererFuseau_Init }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFuseau, "BEH_Conduite_Automate_GererFuseau_Valide", nodes.BEH_Conduite_Automate_GererFuseau_Valide }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFuseau_Init, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFuseau_Init, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_GererFuseau_Valide, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_FinDeMission_Sur, "BEH_Situation_Automate_FinDeMission", nodes.BEH_Situation_Automate_FinDeMission }

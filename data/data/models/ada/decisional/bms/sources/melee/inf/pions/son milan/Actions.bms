includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son milan/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Milan/Actions.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 14 $
]]--[[// $Workfile: Actions.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//-----------------------------------------------------------------------------
]]--[[// Action de Debarquement de la Section d'Infanterie
]]--[[// @perc pourcentage total de debarquement
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Transport_Pion_INF_Debarquer"
{
    actuators =
    {
        deplacement = 1,
        debarquement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bReprise = self.bReprise or false
        self.eEtat_EmbDeb = self.eEtat_EmbDeb or eActionEmbDeb_EnCours
        self.actionID = self.actionID or nil
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Debarquement : debut" )
                self.actionID = DEC_StartDebarquement(  )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtat_EmbDeb = arg end

            end
        end

         do
            local switch_1 = self.eEtat_EmbDeb
            local cases_switch_1 = {}
                if switch_1 == eActionEmbDeb_EnCours then
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionEmbDeb_ErreurEmbDebEnMemeTemps
                or switch_1 == eActionEmbDeb_PasDeTransporteurs then
                    DEC_Trace( "Debarquement : ignore transporteur" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionEmbDeb_Termine then
                    DEC_Trace( "Debarquement : fin" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
            end

        if( self.bReprise ) then
            do
                DEC_Trace( "Debarquement : reprise" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[// arret du debarquement
]]--[[// arret du debarquement
]]    end,

    deselect = function( self )
                DEC_Trace( "Debarquement : interruption" )
        DEC_PauseAction( self.actionID )
        self.bReprise = true
    end,

    destroy = function( self )
                DEC_Trace( "Debarquement : spontaneous end" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[//=============================================================================
]]--[[//=============================================================================
]]--[[// Gestion des types de tir, debarques/embarques
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Action de destruction d'un ennemi uniquement avec la composante debarque
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Tir_Pion_INF_TirDebarque"
{
    actuators =
    {
        tir = 1,
        tir_debarque = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirDirect_Running
        self.bReprendre = self.bReprendre or false
        self.actionID = self.actionID or nil
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Trace( "debut tir fantassins" )
                self.actionID = DEC_StartTirDirectDebarques( self._namedParams.repEni, 1, eTirDirectNormal )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

         do
            local switch_1 = self.eTir
            local cases_switch_1 = {}
                if switch_1 == eActionTirDirect_EnemyDestroyed then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[1] or switch_1 == eActionTirDirect_Impossible then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionTirDirect_Finished then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[3] or switch_1 == eActionTirDirect_NoAmmo then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[4] or switch_1 == eActionTirDirect_NoCapacity then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[5] or switch_1 == eActionTirDirect_Running then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_Executer )
                    do
                    end

                    
                                cases_switch_1[6] = true
                end
            end

                self.params.__returnValue = eActionEnCours
        return

    end,

    deselect = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir fantassins: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir fantassins" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Demande de tir de couverture
]]--[[// Tir uniquement avec la composante VAB ( qd les fantassins sont debarques )
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Tir_Pion_INF_TirCouverture"
{
    actuators =
    {
        tir_couverture = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirDirect_Running
        self.bReprendre = self.bReprendre or false
        self.actionID = self.actionID or nil
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Trace( "debut tir fantassins" )
                self.actionID = DEC_StartTirDirectTransporteurs( self._namedParams.repEni, 1, eTirDirectNormal )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

         do
            local switch_1 = self.eTir
            local cases_switch_1 = {}
                if switch_1 == eActionTirDirect_EnemyDestroyed then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[1] or switch_1 == eActionTirDirect_Impossible then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionTirDirect_Finished then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[3] or switch_1 == eActionTirDirect_NoAmmo then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[4] or switch_1 == eActionTirDirect_NoCapacity then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[5] or switch_1 == eActionTirDirect_Running then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_Executer )
                    do
                    end

                    
                                cases_switch_1[6] = true
                end
            end

                self.params.__returnValue = eActionEnCours
        return

    end,

    deselect = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir couverture: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir couverture" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}


includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/pions/common/missions/ArmerPointControle.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 04-01-12 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Pions/Common/Missions/ArmerPointControle.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: ArmerPointControle.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_ABC_ArmerPointDeControle
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Pion_ABC_ArmerPointDeControle"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "BEH_MAJ_Pion_ABC_AgressiviteTir", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Info_Trace", {} },
        { "ACT_Pion_ABC_CreerSiteSur", {} },
        { "BEH_Dep_ProgressionVers", {} },
        { "ACT_Pion_ABC_AnimerSite", {} },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params[1]
        self._namedParams.rPH = self.params[2]
        self._namedParams.eNiveauIdentificationEni = self.params[3]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.posteControle = self.posteControle or nil--[[// inti apres
]]
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self.params.__returnValue = eActionEffectuee
            Halt()
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Agressivite
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_MAJ_Pion_ABC_AgressiviteTir, 1, { self._namedParams.rPH, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Ambiance
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
        end

        switch_1 = self.ePhaseMission
            if switch_1 == ePreparerMission then
                --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                Activate( self.activations.ACT_Info_Trace, 1, { "Arming check point mission begining", } )
                self.ePhaseMission = eAnimer
                
            elseif switch_1 == eAnimer then
                self.posteControle = S_Objet_Pion_ABC_ObtenirSiteSur( self._namedParams.mission.pointDeControle_ )
                if( ( self.posteControle == 0 or self.posteControle == nil ) ) then
                    do
                        Activate( self.activations.ACT_Pion_ABC_CreerSiteSur, 1, { self._namedParams.mission.pointDeControle_, } )
                                                return

                    end
--[[//---------------------------------------------------------------------
]]--[[// Tester la saturation du site
]]--[[//---------------------------------------------------------------------
]]                end

                if( not DEC_ConnaissanceObjet_PeutEtreAnime( self.posteControle ) ) then
                    do
                        Activate( self.activations.ACT_Info_Trace, 1, { "Check point overloaded", } )
                                                return

                    end
--[[//---------------------------------------------------------------------
]]--[[// Rejoindre le site
]]--[[//---------------------------------------------------------------------
]]                end

                if( DEC_Geometrie_Distance( myself:DEC_Agent_Position(), self._namedParams.mission.pointDeControle_ ) > 300 ) then
                    do
                        Activate( self.activations.BEH_Dep_ProgressionVers, 1.1, { self._namedParams.mission.pointDeControle_, eProgressionDefaut, eTypeItiMouvement, } )
                        Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    end
                else
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnPosition, } )
                end

                --[[//---------------------------------------------------------------------
]]--[[// Animer le site
]]--[[//---------------------------------------------------------------------
]]Activate( self.activations.ACT_Pion_ABC_AnimerSite, 1, { self.posteControle, } )
                
            --[[// 4) Fin de la mission de reconnaissance SUR ORDRE
]]elseif switch_1 == eFinMission then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                
            
            else
                        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_Pion_ABC_AnimerSite
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Pion_ABC_AnimerSite"
{
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pointControle = self.params[1]
    end,

    select = function( self )
                self.actionAnimer = self.actionAnimer or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Animation du site" )
                self.actionAnimer = DEC__StartAnimerObjet( self._namedParams.pointControle )
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "Site non anime" )
        self.actionAnimer = DEC_StopAction( self.actionAnimer )
                Halt()

    end,

    destroy = function( self )
                DEC_Trace( "Site non anime" )
        self.actionAnimer = DEC_StopAction( self.actionAnimer )
    end,

}

--[[// *****************************************************************************
]]--[[// ACT_Pion_ABC_CreerSiteSur
]]--[[//
]]--[[// Commentaires: MIA A VIRER TROP COMPLIQUER A voir avec SDE/NLD
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Pion_ABC_CreerSiteSur"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.position = self.params[1]
    end,

    select = function( self )
                self.localisation = self.localisation or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Init --> commencer à construire l'objet
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                self.localisation = DEC_Geometrie_ConvertirPointEnLocalisation( self._namedParams.position )
                DEC_CreerObjetSansDelais( S_TypeObject_ToString( eTypeObjectPosteControle ), self.localisation )
            end
        end

--[[// DEC_DetruireObjetSansDelais( eTypeObjectPosteControle, gNullID, localisation );
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "BEH_MAJ_Pion_ABC_AgressiviteTir", nodes.BEH_MAJ_Pion_ABC_AgressiviteTir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "ACT_Pion_ABC_CreerSiteSur", nodes.ACT_Pion_ABC_CreerSiteSur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "ACT_Pion_ABC_AnimerSite", nodes.ACT_Pion_ABC_AnimerSite }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_ArmerPointDeControle, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

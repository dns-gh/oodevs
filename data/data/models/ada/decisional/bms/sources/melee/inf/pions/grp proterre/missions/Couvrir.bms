includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/grp proterre/missions/Couvrir.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/Couvrir.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 23/09/05 17:42 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Couvrir.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

node "MIS_Pion_INF_Couvrir"
{
    feedbacks = { { { "done_MIS_Pion_INF_Couvrir" }, "MIS_Pion_INF_Couvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Couvrir, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Mission_Pion_VAB_Couvrir", { "done_BEH_Mission_Pion_VAB_Couvrir" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eCouvrir
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                --[[// mise a jour des infos sur le pion ami
]]if( self._namedParams.mission.cible_ == nil ) then
                    do
                        DEC_Warning( eRC_MissionImpossible )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "Mission 'Couvrir ( " .. DEC_GetSzName( self._namedParams.mission.cible_ ) .. " )' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Defensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_STATIQUE(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                    DEC_Warning( eRC_MissionImpossible )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eCouvrir then
                    Activate( self.activations.BEH_Mission_Pion_VAB_Couvrir, GetMotivation( "MOT_Mission" ), emptyTable )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission" )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

}

node "BEH_Mission_Pion_VAB_Couvrir"
{
    feedbacks = { { { "done_BEH_Mission_Pion_VAB_Couvrir" }, "BEH_Mission_Pion_VAB_Couvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_VAB_Couvrir, {value} ) end,
    activations =
    {
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir", { "done_BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Eni_Pion_INF_Tenir", { "done_BEH_Eni_Pion_INF_Tenir" } },
        { "BEH_Dispositif_Pion_VAB_InstallationDefensive", { "done_BEH_Dispositif_Pion_VAB_InstallationDefensive" } },
        { "BEH_Eni_Pion_INF_DetruitEtFixe", { "done_BEH_Eni_Pion_INF_DetruitEtFixe" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        --[[// cast
]]self.repAmi = self.repAmi or self.mission.cible_
        self.ePhase = self.ePhase or eRejoindre
        self.eAction = self.eAction or eActionEnCours
        --[[// BEH_Lima_Pion_RejoindreFuseau_EnAttente // virer ADA
]]if( self.eAction == eActionImpossible ) then
            do
                                do
                    DEC_Warning( eRC_MissionImpossible )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, emptyTable )
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                                self.ePhase = eCouvrir
                                self.eAction = eActionEnCours
                            end

                        end
                    else
do
                            Activate( self.activations.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, 1, { M_TEMPS_PREPARATION_APPUYER(), self.mission.pointCouverture_, } )
self.done_BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir = function( self, _, v ) self.eAction = v[1] end
                                                        do return end

                        end
                    end

                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eCouvrir then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnCouverture, } )
                    Activate( self.activations.BEH_Eni_Pion_INF_Tenir, 1, { 2.5, } )
                    Activate( self.activations.BEH_Dispositif_Pion_VAB_InstallationDefensive, 1, { self.mission.pointCouverture_, false, } )
                    --[[// S'il est inoffensif et que l'on est deja en train de le traiter, 
]]--[[// ne rien faire
]]if( self.repAmi ~= nil and F_Pion_GeteniEnCours( self.repAmi ) ~= nil ) then
                        Activate( self.activations.BEH_Eni_Pion_INF_DetruitEtFixe, -1 * GetMotivation( "MOT_ManoeuvrerSurEnis" ), { F_Pion_GeteniEnCours( self.repAmi ), true, } )
                    end

                    _continue = false
                                cases_switch_1[2] = true
                end
            end

                self:SendFeedback( self.ePhase )
        do return end

    end,

}

node "BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir"
{
    feedbacks = { { { "done_BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir" }, "BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, {value} ) end,
    activations =
    {
        { "BEH_Delai_Pion_INF_PreparerMission", { "done_BEH_Delai_Pion_INF_PreparerMission" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rTempsPreparation = self.params[1]
        self._namedParams.ptObjectif = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        self.eActionRejoindre = self.eActionRejoindre or eActionEnCours
        if( self.eActionRejoindre == eActionImpossible ) then
            do
                                do
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eActionRejoindre == eActionEffectuee ) then
            do
                self.eActionRejoindre = eActionEnCours
                                do
                    if( not S_Geometrie_EstProchePosition( self._namedParams.ptObjectif, DEC_Agent_Position(), 1000 ) ) then
                        self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end
                    end

                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        do
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                        do
                            Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { self._namedParams.rTempsPreparation, } )
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.1, { eEtatPhaseMission_DebutMission, } )
                    StartActivateOverride( self, self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.ptObjectif, eProgressionDefaut, eTypeItiAppui, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eActionRejoindre = v[1] end
                    self.ePhase = eReconnaitre
                --[[// On cherche une position d'observation
]]                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eReconnaitre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// Calcul de position d'observation ?
]]if( S_EstADistanceTir_Pt( self._namedParams.ptObjectif ) ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.5, { eEtatPhaseMission_ReconnaissanceLocalisation, } )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ptObjectif, } )
                            if( DEC_Perception_PointEstVisible( self._namedParams.ptObjectif ) ) then
                                do
                                    self.ePhase = eRejoindre
                                                                        do return end

                                end
                            end

                        end
                    end

                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    _continue = false
                                cases_switch_1[3] = true

                else
                    do
                    end

                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Couvrir = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir", nodes.BEH_Dep_Pion_INF_MiseEnPlace_MissionCouvrir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "BEH_Eni_Pion_INF_Tenir", nodes.BEH_Eni_Pion_INF_Tenir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "BEH_Dispositif_Pion_VAB_InstallationDefensive", nodes.BEH_Dispositif_Pion_VAB_InstallationDefensive }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Couvrir, "BEH_Eni_Pion_INF_DetruitEtFixe", nodes.BEH_Eni_Pion_INF_DetruitEtFixe }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "BEH_Mission_Pion_VAB_Couvrir", nodes.BEH_Mission_Pion_VAB_Couvrir }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Couvrir, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/ge40/missions/offensives/Gerer appuis internes.bms"] = true

--[[// *****************************************************************************
]]--[[// BEH_GTIA_GererAppuisInternes
]]--[[// 
]]--[[// Commentaires: Faire un retour vers la doctrine --> qu'a-t-on tendance à faire 
]]--[[//               quand le rapport de force n'est pas favorable
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_GTIA_GererAppuisInternes"
{
    feedbacks = { { { "done_BEH_GTIA_GererAppuisInternes" }, "BEH_GTIA_GererAppuisInternes" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_GererAppuisInternes, {value} ) end,
    activations =
    {
        { "BEH_GTIA_GererAppuiPour", { "done_BEH_GTIA_GererAppuiPour" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// On récupère les pions de premier échelons en difficultés 
]]local listePEEnDifficultes = S_Cherche_GE_Filtre_EtatSauvegarde( S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Premier ) ) )
        if( DIA_IsListEmpty( listePEEnDifficultes ) ) then
            do return end
        end

        --[[// Assignation appuis
]]Activate( self.activations.BEH_GTIA_GererAppuiPour, 1, { listePEEnDifficultes, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_GererAppuiPour
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_GererAppuiPour"
{
    feedbacks = { { { "done_BEH_GTIA_GererAppuiPour" }, "BEH_GTIA_GererAppuiPour" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_GererAppuiPour, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionsPourAppuyer", { "done_BEH_GTIA_AssignerMissionsPourAppuyer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePEEnDifficultes = self.params[1]
    end,

    activate = function( self )
        for _,pion in pairs( self._namedParams.listePEEnDifficultes or {} ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionsPourAppuyer, 1, { pion, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsPourAppuyer
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsPourAppuyer"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsPourAppuyer" }, "BEH_GTIA_AssignerMissionsPourAppuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsPourAppuyer, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionMeleeA", { "done_BEH_GTIA_AssignerMissionMeleeA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
    end,

    activate = function( self )
        --[[// On récupère les pions de second échelons "en mesure de" 
]]local listePionsSE = S_Cherche_GE_AutomateOperationnels( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ) )
        local listePionSEDansFuseau = S_Cherche_GE_Filtre_PionsDansFuseau( listePionsSE, F_Automat_Getfuseau( self._namedParams.pion ) )
        for _,pionAppui in pairs( S_Cherche_GE_Filtre_TypeAutomate_ABC( listePionSEDansFuseau ) or {} ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionMeleeA, 1, { pionAppui, "T_Mission_Automate_ABC_Attaquer", } )

        end

        for _,pionAppui in pairs( S_Cherche_GE_Filtre_TypeAutomate_INF( listePionSEDansFuseau ) or {} ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionMeleeA, 1, { pionAppui, "T_Mission_Automate_INF_PrendrePreciserMaintenirContact", } )

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsPourAppuyer, "BEH_GTIA_AssignerMissionMeleeA", nodes.BEH_GTIA_AssignerMissionMeleeA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_GererAppuiPour, "BEH_GTIA_AssignerMissionsPourAppuyer", nodes.BEH_GTIA_AssignerMissionsPourAppuyer }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_GererAppuisInternes, "BEH_GTIA_GererAppuiPour", nodes.BEH_GTIA_GererAppuiPour }

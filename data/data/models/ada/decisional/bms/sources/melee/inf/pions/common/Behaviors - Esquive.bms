includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/common/Behaviors - Esquive.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Behaviors - Esquive.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 9/09/05 14:53 $
]]--[[// $Revision: 20 $
]]--[[// $Workfile: Behaviors - Esquive.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//=============================================================================
]]--[[// Rupture du contact
]]--[[//
]]--[[//
]]--[[// behavior BEH_Pion_INF_SeReplier			( Perception_Pion, T_Point )
]]--[[// behavior BEH_Pion_INF_RompreContact_Enis	()
]]--[[// behavior BEH_Pion_INF_RompreContact		( Perception_Pion, Rep_Point )
]]--[[// 
]]--[[//=============================================================================
]]

node "BEH_Manoeuvre_RompreContact"
{
    instances =
    {
        boost = 1.5,
    },

    activations =
    {
        { "BEH_Manoeuvre_Pion_INF_SeReplier", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.eActionRupture = self.eActionRupture or eActionEnCours
        --[[// Sur une mission retrograde
]]--[[// behavior BEH_Decrocher(); //  ? Stimulus, Esquive		
]]if( F_Pion_GetobjectifEsquive( myself ) == nil and myself.ptRegroupement_ == nil ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        if( self.eActionRupture == eActionEffectuee ) then
            do
                F_Pion_SetobjectifEsquive( myself, nil )
                self.eActionRupture = eActionEnCours
                --[[// Se Retablir ?
]]                self.params.__returnValue = eActionEffectuee
                return

            end
--[[// Si un point de repli est specifié
]]        end

        if( myself.ptRegroupement_ ~= nil ) then
            Activate( self.activations.BEH_Manoeuvre_Pion_INF_SeReplier, 3 * S_Force_Pion_INF_Regroupement( myself.ptRegroupement_ ), setmetatable( { myself.ptRegroupement_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionRupture = v else rawset( t, k, v ) end end } ) )
        else
if( F_Pion_GetobjectifEsquive( myself ) ~= nil ) then
                Activate( self.activations.BEH_Manoeuvre_Pion_INF_SeReplier, S_Force_Pion_INF_Regroupement( F_Pion_GetobjectifEsquive( myself ) ), setmetatable( { F_Pion_GetobjectifEsquive( myself ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionRupture = v else rawset( t, k, v ) end end } ) )
            end
        end

                self.params.__returnValue = self.eActionRupture
        return

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Rejoins une position de repli
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Manoeuvre_Pion_INF_SeReplier"
{
    instances =
    {
        boost = 2,
    },

    activations =
    {
        { "BEH_Mot_Pion_Embarquer", {} },
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptRepli = self.params[1]
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eCalculerPosition
        self.eAction = self.eAction or eActionEnCours
        self.eActionEmb = self.eActionEmb or eActionEnCours
        self.ptDepart = self.ptDepart or DEC_Geometrie_CreerPoint()
        if( ModuleBegins() ) then
            DEC_Copie_Point( DEC_Agent_Position(), self.ptDepart )
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        if( not S_EstADistanceTir_Pt( self.ptDepart ) ) then
            StartActivate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
        end

        if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.ptRepli, 0 ) ) then
            self.params.__returnValue = eActionEffectuee
            return
        end

        Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.ptRepli, eProgressionDirect, eTypeItiRepli, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 03/08/2004 11:16
]]--[[//
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Misc_Pion_INF_MAJ_Repli"
{
    create = function( self )
    end,

    activate = function( self )
                self.bMAJ_Effectuee = self.bMAJ_Effectuee or true
        self.ptRepli_Courant = self.ptRepli_Courant or DEC_Geometrie_CreerPoint()
        if( ModuleBegins() ) then
            do
                --[[// MAJ de la position actuelle
]]DEC_Copie_Point( DEC_Agent_Position(), self.ptRepli_Courant )
            end
        end

        if( GetActivity() <= 1 ) then
            self.bMAJ_Effectuee = true
        end

        if( self.bMAJ_Effectuee and GetActivity() > 1 ) then
            do
                DEC_Trace( "MAJ position de repli" )
                --[[// MAJ de la position de repli, correspondant a la precedente 
]]--[[// enregistree			
]]if( F_Pion_GetobjectifEsquive( myself ) ~= nil ) then
                    DEC_Copie_Point( self.ptRepli_Courant, F_Pion_GetobjectifEsquive( myself ) )
                end

                --[[// MAJ de la position actuelle
]]DEC_Copie_Point( DEC_Agent_Position(), self.ptRepli_Courant )
                --[[// Si le point de repliCourant vient d'etre creer, on init aussi
]]--[[// la position de repli
]]if( F_Pion_GetobjectifEsquive( myself ) == nil ) then
                    do
                        F_Pion_SetobjectifEsquive( myself, DEC_Geometrie_CreerPoint() )
                        DEC_Copie_Point( self.ptRepli_Courant, F_Pion_GetobjectifEsquive( myself ) )
                    end
                end

                self.bMAJ_Effectuee = false
            end
        end

    end,

    destroy = function( self )
                F_Pion_SetobjectifEsquive( myself, nil )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Manoeuvre_Pion_INF_SeReplier, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Manoeuvre_Pion_INF_SeReplier, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Manoeuvre_RompreContact, "BEH_Manoeuvre_Pion_INF_SeReplier", nodes.BEH_Manoeuvre_Pion_INF_SeReplier }

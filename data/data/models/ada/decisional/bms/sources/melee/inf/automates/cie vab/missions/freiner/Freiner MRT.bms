includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/automates/cie vab/missions/freiner/Freiner MRT.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_INF_Freiner
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_INF_Freiner"
{
    feedbacks = { { { "done_MIS_Automate_MRT_INF_Freiner" }, "MIS_Automate_MRT_INF_Freiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_INF_Freiner, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde", { "done_BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eCreationMRT = self.eCreationMRT or eActionEnCours
        local selPions = DEC_Automate_PionsSansPC()
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "MIS_Automate_MRT_INF_Freiner : debut MRT" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// MRT creee
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eCreationMRT == eActionImpossible ) then
            do
                                do
                    DEC_RC( eRC_MissionImpossible )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eCreationMRT == eActionEffectuee ) then
            do
                self.eCreationMRT = eActionEnCours
                                do
                    DEC_Trace( "MIS_Automate_MRT_INF_Freiner : fin MRT" )
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Modalité d'exécution
]]--[[//-----------------------------------------------------------------------------
]]--[[// behavior BEH_Medo_Automate_INF_Freiner() return in eCreationMRT;
]]--[[// behavior BEH_Medo_Automate_INF_PreparerMission_Retrograde( T_Mission_Automate_INF_Freiner, 0 ) return in eCreationMRT;
]]        end

        Activate( self.activations.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, 1, { "T_Mission_Automate_INF_Freiner", } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde" }, "BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, {value} ) end,
    activations =
    {
        { "ACT_Info_Automate_Trace", { "done_ACT_Info_Automate_Trace" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_INF_AssignerMissionFreinerA", { "done_BEH_Medo_Automate_INF_AssignerMissionFreinerA" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eType = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Pions subordonnés à l'Auto
]]local selPions = DEC_Automate_PionsSansPC()
        self.ePhase = self.ePhase or eMRT_DeterminerEchelonsGlobals
        self.eEtat = self.eEtat or eActionEnCours
        self.selABC_Ecl = self.selABC_Ecl or {}
        self.selABC_NonPrevu = self.selABC_NonPrevu or {}--[[// suivre le SE
]]
        self.selABC_INF = self.selABC_INF or {}
        self.selABC_PE = self.selABC_PE or {}--[[// Liste des pions en premier echelon
]]
        self.selABC_SE = self.selABC_SE or {}--[[// Liste des pions en second echelon
]]
         do
            local _continue = true
            local switch_1 = --[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[// 1) Vérifier les moyens, des renforts éventuels
]]--[[// 2) Déterminer les échelons
]]--[[// 2) Assigner certaines missions (les missions des unités de premier échelon)
]]--[[// =============================================================================                                  
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_DeterminerEchelonsGlobals then
                    for _,x in pairs( --[[//---------------------------------------------------------------------
]]--[[// Assignation des grands échelons Ecl / Utile( PE + SE )/ non prevus
]]--[[// Différenece avec mission marche à l'ennemi: que des blindes dans PE 
]]--[[// et SE
]]--[[//---------------------------------------------------------------------
]]selPions or emptyTable ) do
                    local _continue = true
do
                            local pion = x
                            --[[// On ne traite pas les pions non opérationnels
]]if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                                do
                                    DEC_Trace( DEC_GetSzName( pion ) .. " non operationnel" )
                                    DIA_PushFront( self.selABC_SE, pion )
                                    _continue = false
                                end
                            end

                                if _continue then
                                 do
                                    local _continue = true
                                    local switch_2 = pion:GetType()
                                    local cases_switch_2 = {}
                                        if switch_2 == "SectionInfanterie" then
                                            Activate( self.activations.ACT_Info_Automate_Trace, 1, { "-------$$$ Renforcements INF $$$------", } )
                                            DIA_PushFront( self.selABC_INF, pion )
                                            _continue = false
                                                                                cases_switch_2[1] = true

                                        else
                                            DIA_PushFront( self.selABC_NonPrevu, pion )
                                            _continue = false
                                                                                end
                                    end

                            end
                        end

                    end

                    self.ePhase = eMRT_AssignerMissions
                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[/* ------------------------------------------------------------- */]]--[[/* -------------  Gestion erreur/ bon deroulement -------------- */]]--[[/* ------------------------------------------------------------- */]]if( self.eEtat == eActionImpossible ) then
                        do
                            --[[// ePhase = eMRT_MissionImpossible;
]]DEC_Trace( "Warning: some front units did not received mission " )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[/* ------------------------------------------------------------- */]]--[[/* ------- Fin Gestion erreur/ bon deroulement ------- */]]--[[/* ------------------------------------------------------------- */]]--[[// Suivant le type de mission...
]]                    end

                    if( self._namedParams.eType == "T_Mission_Automate_INF_Freiner" ) then
                        do
                            Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.selABC_INF ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtat = v[1] end
                            Activate( self.activations.BEH_Medo_Automate_INF_AssignerMissionFreinerA, 1, { self.selABC_INF, eEtatEchelon_Premier, } )
                        end
                    end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eMRT_MissionImpossible then
                    Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[3] = true
elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end
                if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_INF_AssignerMissionFreinerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_INF_AssignerMissionFreinerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_AssignerMissionFreinerA" }, "BEH_Medo_Automate_INF_AssignerMissionFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_AssignerMissionFreinerA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerFreinerA", { "done_BEH_Mission_Automate_INF_AssignerFreinerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPion = self.params[1]
        self._namedParams.eEtatEchelon = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-------------------------------------------------------------------------
]]--[[// Le fuseau de l'escadron est coupé proportionnellement
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_MRT_AffecteFuseaux( self._namedParams.selPion )
        end

        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Affectation des missions du premier echelon
]]--[[// Tous les pions de premier echelon on la mssion reconnaitre
]]--[[//-----------------------------------------------------------------------------
]]self._namedParams.selPion or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_Mission_Automate_INF_AssignerFreinerA, 1, { ePhase_MRT, pion, self._namedParams.eEtatEchelon, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_INF_AssignerFreinerA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_INF_AssignerFreinerA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_INF_AssignerFreinerA" }, "BEH_Mission_Automate_INF_AssignerFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_INF_AssignerFreinerA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_INF_AssignerFreinerA", { "done_ACT_Mission_Automate_INF_AssignerFreinerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, emptyTable )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, emptyTable )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, emptyTable )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_INF_AssignerFreinerA, rForce, { self._namedParams.ePhase, self._namedParams.pPion, self._namedParams.eEtatEchelon, } )
self.done_ACT_Mission_Automate_INF_AssignerFreinerA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_INF_AssignerFreinerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Mission_Automate_INF_AssignerFreinerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerFreinerA" }, "ACT_Mission_Automate_INF_AssignerFreinerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerFreinerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    select = function( self )
        --[[// Calcul des itineraires des missions attaquer des pions
]]self.ptDest = self.ptDest or DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pion )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_Freiner" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_Freiner" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( not ModuleBegins() ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Itineraire
]]DEC_Copie_PointDansListePoints_Mission( self.ptDest, self.missionPion, "itineraire_" )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_INF_Freiner = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerMissionFreinerA, "BEH_Mission_Automate_INF_AssignerFreinerA", nodes.BEH_Mission_Automate_INF_AssignerFreinerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, "BEH_Medo_Automate_INF_AssignerMissionFreinerA", nodes.BEH_Medo_Automate_INF_AssignerMissionFreinerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_INF_AssignerFreinerA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_INF_AssignerFreinerA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_INF_AssignerFreinerA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_INF_AssignerFreinerA, "ACT_Mission_Automate_INF_AssignerFreinerA", nodes.ACT_Mission_Automate_INF_AssignerFreinerA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_INF_Freiner, "BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde", nodes.BEH_Medo_Automate_INF_DonnerLesOrdresPourMissionRetrograde }

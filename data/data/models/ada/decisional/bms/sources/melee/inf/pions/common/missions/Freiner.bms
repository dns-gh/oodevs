includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/common/missions/Freiner.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-03-31 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Missions/Freiner.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:15 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Freiner.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//=============================================================================
]]--[[//							Squelette de la mission
]]--[[//=============================================================================
]]
node "BEH_Mission_Pion_INF_Freiner"
{
    activations =
    {
        { "BEH_Mot_Pion_Embarquer", {} },
        { "BEH_Delai_Pion_INF_PreparerMission", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Dep_Pion_INF_Freiner_Decrocher", {} },
        { "BEH_Lima_GererLCAR", {} },
        { "BEH_Lima_GererLR", {} },
        { "BEH_Lima_Pion_INF_GererLIA", {} },
        { "BEH_Dep_ProgressionSur", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        self.eActionPrepa = self.eActionPrepa or eActionEnCours
        self.eActionPoste = self.eActionPoste or eActionEnCours
        self.eActionDebarquer = self.eActionDebarquer or eActionEnCours
        --[[// Lorsqu'un comportement  ne  peut  pas  s'effectuer  correctement, la mission 
]]--[[// s'arrete
]]if( self.eAction == eActionImpossible ) then
            do
                                do
                    DEC_Warning( eRC_MissionImpossible )
                                        self.params.__returnValue = eFinMission
                    Halt( self )
                    do return end

                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        do
        end

        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                        do
                            Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { M_DELAI_RUPTURECONTACT(), } )
                                                        return

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eFreiner
                    
                                cases_switch_1[1] = true
elseif switch_1 == eSurveiller then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.1, { eEtatPhaseMission_EnSurveillance, } )
                    --[[// eEtatPhaseMission_EnPosition
]]--[[// Attendre de se degager ...								
]]if( F_Pion_GeteEtatLima( myself ) ~= eEtatLima_LCAR ) then
                        StartActivate( self.activations.BEH_Dep_Pion_INF_Freiner_Decrocher, 1.1, {} )
                    end

                                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eFreiner then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                                                self.params.__returnValue = eFinMission
                                return

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnFreinage, } )
                    --[[// Sur LCAR				
]]if( F_Pion_GeteEtatLima( myself ) == eEtatLima_LCAR ) then
                        do
                            --[[// Arrete de decrocher ( si 2 LCAR sont proches )
]]if( self.ePhase == eFreiner ) then
                                StopActivate( self.activations.BEH_Dep_Pion_INF_Freiner_Decrocher, {} )
                            end

                            self.ePhase = eSurveiller
                        end
--[[// On se deplace
]]                    else
                        self.ePhase = eFreiner
                    end

                    --[[// Rmque : Ce comportement ne se trouve pas dans Progresser, 
]]--[[// 		   car sinon il induit une boucle dans le graphe DIA				
]]Activate( self.activations.BEH_Lima_GererLCAR, 2, { not DEC_Agent_AutomateEstEmbraye(), myself.bFreiner_EnTete_, } )
                    Activate( self.activations.BEH_Lima_GererLR, 2, {} )
                    Activate( self.activations.BEH_Lima_Pion_INF_GererLIA, 2, {} )
                    Activate( self.activations.BEH_Dep_ProgressionSur, 1, setmetatable( { self.mission.itineraire_, eProgressionDirect, eTypeItiRepli, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[3] = true

                else
                                end
            end

                self.params.__returnValue = self.ePhase
        return

    end,

    destroy = function( self )
                myself.bFreiner_EnTete_ = true
    end,

--[[// ----------------------------------------------------------------------------
]]--[[//
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_INF_Freiner_Decrocher"
{
    activations =
    {
        { "ACT_Tir_INF_FumigeneVersEni", {} },
        { "BEH_MOT_Pion_INF_Debarquer", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.ptDepart = self.ptDepart or DEC_Geometrie_CreerPoint()
        self.rDist_Decroche = self.rDist_Decroche or 0
        --[[// Tire les fumigenes		
]]--[[// $$$$ JCR: Peut etre a faire ailleurs et autrement
]]local eniEnCours = F_Pion_GeteniEnCours( myself )
        if( ( eniEnCours ~= 0 and eniEnCours ~= nil ) ) then
            Activate( self.activations.ACT_Tir_INF_FumigeneVersEni, 1, { eniEnCours, } )
        end

        if( ModuleBegins() ) then
            do
                --[[// Deja embarque
]]--[[// Calcul la distance a parcourir avant embarquement
]]if( DEC_ConnaissanceAgent_EstValide( eniEnCours ) ) then
                    do
                        self.rDist_Decroche = Min( M_MAX_DISTANCE_TIR_VCI(), S_Tir_PorteeMaxPourEtreTireParAgent( eniEnCours, GetStateVariable( "VE_Agressivite_Tir" ) ) )
                        DEC_Copie_Point( DEC_ConnaissanceAgent_Position( eniEnCours ), self.ptDepart )
                    end
                else
                    DEC_Copie_Point( DEC_Agent_Position(), self.ptDepart )
                end

            end
--[[// Fin embarquement
]]        end

        if( DEC_Agent_EstEmbarque() ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        --[[// Reste debarque a proximite
]]if( S_Geometrie_EstProchePosition( self.ptDepart, DEC_Agent_Position(), self.rDist_Decroche ) ) then
            Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, {} )
        end

    end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Freiner_Decrocher, "ACT_Tir_INF_FumigeneVersEni", nodes.ACT_Tir_INF_FumigeneVersEni }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_Freiner_Decrocher, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Dep_Pion_INF_Freiner_Decrocher", nodes.BEH_Dep_Pion_INF_Freiner_Decrocher }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Lima_GererLCAR", nodes.BEH_Lima_GererLCAR }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Lima_GererLR", nodes.BEH_Lima_GererLR }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Lima_Pion_INF_GererLIA", nodes.BEH_Lima_Pion_INF_GererLIA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Freiner, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }

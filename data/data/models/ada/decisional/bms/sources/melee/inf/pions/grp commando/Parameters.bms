includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/grp commando/Parameters.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-07-10 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Grp Commando/Parameters.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 24/05/05 13:56 $
]]--[[// $Revision: 8 $
]]--[[// $Workfile: Parameters.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// -----------------------------------------------------------------------------
]]--[[//			Delais Preparation
]]--[[// -----------------------------------------------------------------------------
]]

function M_TEMPS_PREPARATION_APPUYER()
    return 1
end



function M_TEMPS_PREPARATION_MISSION_RECO()
    return 1
end




--[[// Delai d'obervation pr reconnaitre le point de repli
]]function M_POLY_MODELE_PION_VITESSE_RECO_POINT()
    return 7
end




--[[// Sur le deplacement 'bond' on fait une pause de 30s
]]--[[// tous les M_DISTANCE_BOND_SECURITE() metres
]]function M_TEMPS_PAUSE_BOND_SECURITE()
    return 0.2
end




function M_DELAI_NETTOYAGE()
    return 5
end



function M_DELAI_NETTOYAGE_RECO()
    return 10
end




--[[// -----------------------------------------------------------------------------
]]--[[//			Distances Appui/Soutien
]]--[[// -----------------------------------------------------------------------------
]]--[[// Distances autorisées pour suivre une unite appuye
]]function M_DISTANCE_SUIVI_MIN()
    return 300
end



function M_DISTANCE_SUIVI_MAX()
    return 800
end



--[[// Distance pour le calcul de la position d'appuis
]]function M_DISTANCE_APPUIS()
    return 400
end



--[[// Longueur du dispositif d'arret lors de l'embuscade
]]function M_LONGUEUR_ABATTIS()
    return 8
end



function M_NOMBRE_MINES()
    return 8
end




--[[// Distance a partir de laquelle on va contourner l'obstacle
]]function M_DISTANCE_CONTOURNEMENT_OBSTACLE()
    return 800
end




--[[// Diametre de la zone pour la recherche de points 
]]function M_DIAMETRE_ZONE()
    return 300
end




--[[// Distance permettant de considerer qu'une unite se trouve sur une position
]]function M_DISTANCE_DELTA()
    return 800
end



--[[// Distance entre les obstacles creer pour defendre ou interdire et le point
]]--[[// d'attente de la section
]]function M_DIST_OBSTACLE()
    return 300
end

--[[// Distance sur laquelle on va chercher un noeud
]]--[[// Distance utile, approximative pour fixer
]]--[[// (debarque)
]]--[[// --------------------------------------------
]]function S_DistanceInstallationObstacle( )
    local _returnValue = 0
    _returnValue = 0
    local mission = DEC_GetMission( myself )
    if( ( mission == 0 or mission == nil ) ) then
        return _returnValue
    end

     do
        local switch_1 = mission:GetType()
        local cases_switch_1 = {}
            if switch_1 == "T_Mission_Pion_INF_ControlerSecteur" then
                _returnValue = 1500
                
                        cases_switch_1[1] = true

            else
                _returnValue = 300
                        end
        end

    return _returnValue
end

function M_DISTANCE_TIR_FIXE()
    return 1200
end



--[[// Distance minimum sur laquelle on peut engager 
]]--[[// le feu
]]--[[// --------------------------------------------
]]function M_MIN_DISTANCE_TIR()
    return 0
end

function S_EstADistanceTir_Pt( ptTir )
    local _returnValue = false
    _returnValue = DEC_Geometrie_Distance( DEC_Agent_Position(), ptTir ) < M_DISTANCE_TIR_FIXE()
    return _returnValue
end


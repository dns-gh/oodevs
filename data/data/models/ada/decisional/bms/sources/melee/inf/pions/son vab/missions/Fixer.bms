includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son vab/missions/Fixer.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/Fixer.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 10:25 $
]]--[[// $Revision: 21 $
]]--[[// $Workfile: Fixer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

node "MIS_Pion_INF_Fixer"
{
    activations =
    {
        { "ACT_RC", {} },
        { "BEH_Misc_Pion_DefinirTypeMission", {} },
        { "BEH_MAJ_AgressiviteMission", {} },
        { "BEH_Ordre_Inopine", {} },
        { "BEH_Mission_Pion_VAB_Fixer", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Poste_Pion_INF_TomberEnGarde", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eFixer
        self.eCurrentPhase = self.eCurrentPhase or eRejoindre
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                --[[// mise a jour des infos de mission
]]DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
                --[[// si l'eni est deja identifie
]]--[[// on passe en phase de destruction
]]--[[// sinon on tente de la rejoindre
]]if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.mission.ennemi_ ) ) then
                    do
                                                do
                        end

                        Activate( self.activations.ACT_RC, 1, { eRC_MissionImpossible, } )
                                                self.params.__returnValue = eActionImpossible
                        self.deselect = function() end
                        self.destroy = function() end
                        Halt()

                    end
                end

                DEC_Trace( "Mission 'Fixer' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Offensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_MANOEUVRE(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[// *************************************************************************
]]--[[// Corps principal de la mission
]]--[[// *************************************************************************
]]        end

        if( self.eAction == eActionImpossible ) then
            do
                Activate( self.activations.ACT_RC, 1, { eRC_MissionImpossible, } )
                                self.params.__returnValue = eActionImpossible
                self.deselect = function() end
                self.destroy = function() end
                Halt()

            end
        end

        do
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eFixer then
                    if( self.eAction == eActionImpossible or self.eAction == eActionHalt ) then
                        self.ePhase = eFinMission
                    end

                    if( self.eCurrentPhase ~= eFinMission ) then
                        do
                            Activate( self.activations.BEH_Mission_Pion_VAB_Fixer, GetMotivation( "MOT_Mission" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCurrentPhase = v else rawset( t, k, v ) end end } ) )
                                                        return

                        end
                    else
                        self.ePhase = eFinMission
                    end

                                end
                if cases_switch_1[1] or switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission fixer" )
                                DEC_FinMission()
                                                                self.deselect = function() end
                                self.destroy = function() end
                                Halt()

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, setmetatable( { true, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                
                else
                                end
            end

    end,

}

node "BEH_Mission_Pion_VAB_Fixer"
{
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", {} },
        { "BEH_Dep_Pion_INF_PreciserMaintenirContact", {} },
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "BEH_Eni_Pion_VAB_Fixer", {} },
        { "BEH_Obs_Pion_INF_EnReconnaissance", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.mission = self.mission or DEC_GetMission( myself )
        self.ksMission = self.ksMission or self.mission.ennemi_
        self.eActionPreciser = self.eActionPreciser or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                StartActivate( self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, {} )
            end
--[[// Lorsque l'action est impossible
]]        end

        if( self.eActionPreciser == eActionImpossible or self.eAction == eActionImpossible ) then
            do
                DEC_Trace( "Action impossible sur Eni" )
                if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                    return
                end

                                self.params.__returnValue = eFinMission
                self.deselect = function() end
                self.destroy = function() end
                Halt()

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        do
                    end

                                        self.params.__returnValue = eFinMission
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                end

            end
--[[// Si le niveau d'identification s'acroit, on garde ce niveau		
]]        end

        Activate( self.activations.BEH_Dep_Pion_INF_PreciserMaintenirContact, 1, setmetatable( { self.ksMission, false, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionPreciser = v else rawset( t, k, v ) end end } ) )
         do
            local switch_1 = DEC_ConnaissanceAgent_NiveauPerceptionMax( self.ksMission )
            local cases_switch_1 = {}
                if switch_1 == eReconnu
                or switch_1 == eIdentifie then
                    Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self.ksMission ), } )
                    Activate( self.activations.BEH_Eni_Pion_VAB_Fixer, 2 * S_Force_DangerSur( self.ksMission ), setmetatable( { self.ksMission, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[1] = true

                else
                    --[[// Si on n'a pas retrouve la connaissance
]]if( DEC_ConnaissanceAgent_EstValide( self.ksMission ) and S_Geometrie_EstProchePosition( DEC_Agent_Position(), DEC_ConnaissanceAgent_Position( self.ksMission ), M_DISTANCE_FIXER_SECURITE() ) ) then
                        do
                            Activate( self.activations.BEH_Obs_Pion_INF_EnReconnaissance, 3, { DEC_ConnaissanceAgent_Position( self.ksMission ), } )
                        end
                    end

                                end
            end

    end,

    destroy = function( self )
                do
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Fixer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Dep_Pion_INF_PreciserMaintenirContact", nodes.BEH_Dep_Pion_INF_PreciserMaintenirContact }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Eni_Pion_VAB_Fixer", nodes.BEH_Eni_Pion_VAB_Fixer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Fixer, "BEH_Obs_Pion_INF_EnReconnaissance", nodes.BEH_Obs_Pion_INF_EnReconnaissance }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Mission_Pion_VAB_Fixer", nodes.BEH_Mission_Pion_VAB_Fixer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Fixer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

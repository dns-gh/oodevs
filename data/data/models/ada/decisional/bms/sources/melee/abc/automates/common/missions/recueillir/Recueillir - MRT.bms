includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/common/missions/recueillir/Recueillir - MRT.bms"] = true



--[[// idem Barrer
]]--[[// BEH_Medo_Automate_ABC_Recueillir_AssignerMissionBarrerA
]]
--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_DonnerCoupArret_AssignerMissionBarrerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_Recueillir_AssignerMissionBarrerA"
{
    activations =
    {
        { "ACT_Warning", {} },
        { "BEH_Mission_Automate_ABC_AssignerBarrerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.eEtatEchelon = self.params[2]
    end,

    activate = function( self )
        self.rIterateurPosition = self.rIterateurPosition or 0
        self.listePositions = self.listePositions or {}
        if( ( #( self._namedParams.selPions ) == 0 or #( self._namedParams.selPions ) == nil ) ) then
            return
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// On recupère la LR
]]local LR = DEC_GetLima( eTypeLima_LR )
                if( ( LR == 0 or LR == nil ) ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleLimaInvalide, } )
                                                self.params.__returnValue = eActionImpossible
                        return

                    end
--[[// positions
]]                end

                self.listePositions = DEC_Geometrie_CalculerPositionsParRapportALima( LR, 10, #( self._namedParams.selPions ) )
                if( ( self.listePositions == 0 or self.listePositions == nil ) ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleLimaInvalide, } )
                                                self.params.__returnValue = eActionImpossible
                        return

                    end
--[[//---------------------------------------------------------------------
]]--[[// Affectation des missions du premier echelon
]]--[[// Tous les pions de premiers echelons ont la mission Barrer
]]--[[//---------------------------------------------------------------------
]]                end

                for _,pion in pairs( self._namedParams.selPions ) do
                local _continue = true
do
                        if( self.rIterateurPosition == DEC_ListePoints_Size( self.listePositions ) ) then
                            self.rIterateurPosition = 0
                        end

                        --[[// Position courante d'installation
]]local positionInstallation = DEC_ListePoints_GetAt( self.listePositions, self.rIterateurPosition )
                        --[[// Assignation de la mission
]]StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerBarrerA, 1, { ePhase_MRT, pion, positionInstallation, self._namedParams.eEtatEchelon, } )
                                                self.rIterateurPosition = self.rIterateurPosition + 1
                    end

                end

            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA"
{
    activations =
    {
        { "ACT_Warning", {} },
        { "BEH_Mission_Automate_ABC_AssignerSurveillerA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.eEtatEchelon = self.params[2]
    end,

    activate = function( self )
        self.rIterateurPosition = self.rIterateurPosition or 0
        self.listePositions = self.listePositions or {}
        if( ( #( self._namedParams.selPions ) == 0 or #( self._namedParams.selPions ) == nil ) ) then
            return
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                --[[// On recupère la LR
]]local LIA = DEC_GetLima( eTypeLima_LIA )
                if( ( LIA == 0 or LIA == nil ) ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleLimaInvalide, } )
                                                self.params.__returnValue = eActionImpossible
                        return

                    end
--[[// positions
]]                end

                self.listePositions = DEC_Geometrie_CalculerPositionsParRapportALima( LIA, 10, #( self._namedParams.selPions ) )
                if( ( self.listePositions == 0 or self.listePositions == nil ) ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleLimaInvalide, } )
                                                self.params.__returnValue = eActionImpossible
                        return

                    end
--[[//---------------------------------------------------------------------
]]--[[// Affectation des missions du premier echelon
]]--[[// Tous les pions de premiers echelons ont la mission Barrer
]]--[[//---------------------------------------------------------------------
]]                end

                for _,pion in pairs( self._namedParams.selPions ) do
                local _continue = true
do
                        if( self.rIterateurPosition == DEC_ListePoints_Size( self.listePositions ) ) then
                            self.rIterateurPosition = 0
                        end

                        --[[// Position courante d'installation
]]local positionInstallation = DEC_ListePoints_GetAt( self.listePositions, self.rIterateurPosition )
                        --[[// Assignation de la mission
]]StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSurveillerA, 1, { ePhase_MRT, pion, positionInstallation, self._namedParams.eEtatEchelon, } )
                                                self.rIterateurPosition = self.rIterateurPosition + 1
                    end

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionBarrerA, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionBarrerA, "BEH_Mission_Automate_ABC_AssignerBarrerA", nodes.BEH_Mission_Automate_ABC_AssignerBarrerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA, "BEH_Mission_Automate_ABC_AssignerSurveillerA", nodes.BEH_Mission_Automate_ABC_AssignerSurveillerA }

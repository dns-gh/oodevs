includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/common/missions/reconnaitrepoint surete/ReconnaitrePoint Pat - MRT.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-09-26 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Missions/ReconnaitrePoint surete/ReconnaitrePoint Pat - MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 2/09/05 13:36 $
]]--[[// $Revision: 21 $
]]--[[// $Workfile: ReconnaitrePoint Pat - MRT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// ******************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA
]]--[[// 
]]--[[// Commentaires:
]]--[[// 
]]--[[// ******************************************************************************
]]node "BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA" }, "BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA, {value} ) end,
    activations =
    {
        { "ACT_Warning", { "done_ACT_Warning" } },
        { "BEH_Mission_Automate_ABC_AssignerReconnaitrePointA", { "done_BEH_Mission_Automate_ABC_AssignerReconnaitrePointA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.zoneAReconnaitre = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.listeSousSecteurs = self.listeSousSecteurs or {}
        self.rIterateurSecteur = self.rIterateurSecteur or 0
        if( #( self._namedParams.selPions ) == 0 ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local nErrorCode1 = nil
                self.listeSousSecteurs = DEC_Geometrie_DecoupeLocalisation( self._namedParams.zoneAReconnaitre, #( self._namedParams.selPions ), nErrorCode1 )
                nErrorCode1 = self.listeSousSecteurs.second
                self.listeSousSecteurs = self.listeSousSecteurs.first
                --[[// Gestion erreur
]]if( nErrorCode1 ~= eNoError ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleZoneHorsFuseau, } )
                                                self:SendFeedback( eActionImpossible )
                        do return end

                    end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission une par une au pion (pas simultanément)
]]--[[//-----------------------------------------------------------------------------
]]                end

                for _,pion in pairs( self._namedParams.selPions or emptyTable ) do
                local _continue = true
do
                        if( self.rIterateurSecteur == #( self.listeSousSecteurs ) ) then
                            self.rIterateurSecteur = 0
                        end

                        local secteur = DEC_UserTypeList_GetAt( self.listeSousSecteurs, self.rIterateurSecteur )
                        local pointAReconnaitre = S_Geometrie_BarycentreZone( secteur )
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerReconnaitrePointA, 1, { ePhase_MRT, pion, pointAReconnaitre, self._namedParams.eEtatEchelon, } )
                                                self.rIterateurSecteur = self.rIterateurSecteur + 1
                    end

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionReconnaitrePointA, "BEH_Mission_Automate_ABC_AssignerReconnaitrePointA", nodes.BEH_Mission_Automate_ABC_AssignerReconnaitrePointA }

includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/automates/sgpt inf abc/missions/releverrecueil/ReleverRecueil MRT.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-07-29 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Sgpt Inf Abc/Missions/ReleverRecueil/ReleverRecueil MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 24/05/05 13:56 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: ReleverRecueil MRT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
node "MIS_Automate_MRT_INF_ReleverEnRecueillant"
{
    activations =
    {
        { "BEH_Medo_Automate_INF_ReleverEnRecueillant", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
                self.eCreationMRT = self.eCreationMRT or eActionEnCours
        local selPions = DEC_Automate_PionsSansPC()
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "T_Mission_Automate_INF_ReleverEnRecueillant : debut MRT" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// MRT creee
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eCreationMRT == eActionImpossible ) then
            do
                                do
                    DEC_RC( eRC_MissionImpossible )
                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
        end

        if( self.eCreationMRT == eActionEffectuee ) then
            do
                self.eCreationMRT = eActionEnCours
                                do
                    DEC_Trace( "T_Mission_Automate_INF_ReleverEnRecueillant : fin MRT" )
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt()

                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Modalité d'exécution
]]--[[//-----------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_Medo_Automate_INF_ReleverEnRecueillant, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCreationMRT = v else rawset( t, k, v ) end end } ) )
    end,

    destroy = function( self )
            end,

}

node "BEH_Medo_Automate_INF_ReleverEnRecueillant"
{
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux", {} },
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_INF_OrganiserMissions_ReleverEnRecueillant", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                local mission = DEC_GetMission( myself )
        self.selPions = self.selPions or DEC_Automate_PionsSansPC()
        self.rNombrePions = self.rNombrePions or #( self.selPions )
        self.lstPionsAttaque = self.lstPionsAttaque or {}
        self.lstPionsAppui = self.lstPionsAppui or {}
        self.ePhase = self.ePhase or eMRT_SelectionnerPions
        self.eActionMRT = self.eActionMRT or eActionEnCours
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Nombre de pions : " .. FloatToString( self.rNombrePions ) )
            end
        end

        switch_1 = self.ePhase
            if switch_1 == eMRT_SelectionnerPions then
                --[[//-----------------------------------------------------------------------------
]]--[[//	Distribution des types de mission
]]--[[//-----------------------------------------------------------------------------
]]--[[// Regarde le nombre de localisation				
]]--[[// Premier Echelon
]]local rN_PE = 3
                --[[// Second Echelon
]]local rN_SE = #( DEC_Automate_PionsSansPC() ) - rN_PE
                DEC_Trace( "Selection des composantes pion" )
                for _,x in pairs( self.selPions ) do
                local _continue = true
do
                        local pion = x
                        switch_2 = pion:GetType()
                            if switch_2 == "SectionInfanterie" then
                                if( #( self.lstPionsAttaque ) < rN_PE ) then
                                    DIA_PushBack( self.lstPionsAttaque, pion )
                                else
if( #( self.lstPionsAppui ) < rN_SE ) then
                                        DIA_PushBack( self.lstPionsAppui, pion )
                                    end
                                end

                                
                            elseif switch_2 == "SectionInfanterie_MILAN"
                            or switch_2 == "SectionInfanterie_HOT"
                            or switch_2 == "Peloton_AMX"
                            or switch_2 == "Peloton_XL" then
                                if( #( self.lstPionsAppui ) < rN_SE ) then
                                    DIA_PushBack( self.lstPionsAppui, pion )
                                end

                                
                                                        end

                        if( #( self.lstPionsAttaque ) >= rN_PE and #( self.lstPionsAppui ) >= rN_SE ) then
                            break
                        end

                    end
--[[// 
]]--[[// L'execution de la mission necessite la presence d'un 1er ech
]]
                end

                if( ( #( self.lstPionsAttaque ) == 0 or #( self.lstPionsAttaque ) == nil ) ) then
                    do
                        DEC_Trace( "Pas de 1er echelon" )
                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                self.ePhase = eMRT_AffecterFuseaux
                
            elseif switch_1 == eMRT_AffecterFuseaux then
                --[[//-----------------------------------------------------------------------------
]]--[[//Le fuseau de la compagnie est coupe en DEUX
]]--[[//le pion en appui utilise le fuseau de la compagnie
]]--[[//-----------------------------------------------------------------------------
]]if( self.eActionMRT == eActionEffectuee ) then
                    do
                        self.eActionMRT = eActionEnCours
                                                do
                            self.ePhase = eMRT_AssignerMissions
                                                        return

                        end

                    end
                end

                Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux, 1, setmetatable( { self.lstPionsAttaque, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionMRT = v else rawset( t, k, v ) end end } ) )
                
            elseif switch_1 == eMRT_AssignerMissions then
                --[[//-----------------------------------------------------------------------------
]]--[[// Assigner les missions au pions subordonnéss
]]--[[//-----------------------------------------------------------------------------
]]if( self.eActionMRT == eActionImpossible ) then
                    do
                                                do
                        end

                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                if( self.eValidationMRT == eActionImpossible ) then
                    do
                                                do
                            DEC_Trace( "eValidationMRT == eActionImpossible" )
                        end

                                                self.params.__returnValue = eActionImpossible
                        Halt()

                    end
                end

                if( self.eValidationMRT == eActionEffectuee ) then
                    do
                        self.eValidationMRT = eActionEnCours
                                                do
                                                        self.params.__returnValue = eActionEffectuee
                            Halt()

                        end

                    end
                end

                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.lstPionsAttaque ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eValidationMRT = v else rawset( t, k, v ) end end } ) )
                Activate( self.activations.BEH_Medo_Automate_INF_OrganiserMissions_ReleverEnRecueillant, 1, setmetatable( { self.lstPionsAttaque, self.lstPionsAppui, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionMRT = v else rawset( t, k, v ) end end } ) )
                
                        end

    end,

    destroy = function( self )
            end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_INF_ReleverEnRecueillant = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_ReleverEnRecueillant, "ACT_Medo_Automate_AffecterFuseaux", nodes.ACT_Medo_Automate_AffecterFuseaux }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_ReleverEnRecueillant, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_ReleverEnRecueillant, "BEH_Medo_Automate_INF_OrganiserMissions_ReleverEnRecueillant", nodes.BEH_Medo_Automate_INF_OrganiserMissions_ReleverEnRecueillant }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_INF_ReleverEnRecueillant, "BEH_Medo_Automate_INF_ReleverEnRecueillant", nodes.BEH_Medo_Automate_INF_ReleverEnRecueillant }

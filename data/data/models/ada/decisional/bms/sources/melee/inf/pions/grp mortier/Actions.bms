includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/grp mortier/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Grp Mortier/Actions.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:21 $
]]--[[// $Revision: 30 $
]]--[[// $Workfile: Actions.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//=============================================================================
]]--[[//=============================================================================
]]--[[// Gestion des types de tir, debarques/embarques
]]--[[//=============================================================================
]]

--[[//-----------------------------------------------------------------------------
]]--[[// Action de Debarquement de la Section d'Infanterie
]]--[[// @perc pourcentage total de debarquement
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Transport_Pion_INF_Debarquer"
{
    actuators =
    {
        deplacement = 1,
        debarquement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bReprise = self.bReprise or false
        self.eEtat_EmbDeb = self.eEtat_EmbDeb or eActionEmbDeb_EnCours
        self.actionID = self.actionID or nil
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Debarquement : debut" )
                self.actionID = DEC_StartDebarquement(  )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtat_EmbDeb = arg end

            end
        end

         do
            local switch_1 = self.eEtat_EmbDeb
            local cases_switch_1 = {}
                if switch_1 == eActionEmbDeb_EnCours then
                    
                                cases_switch_1[1] = true
elseif switch_1 == eActionEmbDeb_ErreurEmbDebEnMemeTemps
                or switch_1 == eActionEmbDeb_PasDeTransporteurs then
                    DEC_Trace( "Debarquement : ignore transporteur" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionEmbDeb_Termine then
                    DEC_Trace( "Debarquement : fin" )
                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
            end

        if( self.bReprise ) then
            do
                DEC_Trace( "Debarquement : reprise" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[// arret du debarquement
]]--[[// arret du debarquement
]]    end,

    deselect = function( self )
                DEC_Trace( "Debarquement : interruption" )
        DEC_PauseAction( self.actionID )
        self.bReprise = true
    end,

    destroy = function( self )
                DEC_Trace( "Debarquement : spontaneous end" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

node "ACT_Tir_Pion_INF_TirCouverture"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.params.__returnValue = eActionEffectuee
        self.deselect = function() end
        self.destroy = function() end
        Halt()

    end,

}

--[[// ============================================================================
]]--[[// ACT_Tir_Pion_Mortier_SurPosition:
]]--[[//		Applique un tir indirect sur la position @ptTir
]]--[[// ============================================================================
]]node "ACT_Tir_Pion_Mortier_SurPosition"
{
    actuators =
    {
        tir = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptTir = self.params[1]
        self._namedParams.rIT = self.params[2]
        self._namedParams.dotation = self.params[3]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirIndirect_Impossible
        self.bReprendre = self.bReprendre or false
        self.bPremierCoupPartie = self.bPremierCoupPartie or false
        self.actionID = self.actionID or nil
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "debut tir indirect" )
                self.actionID = DEC_StartTirIndirectSurPosition( self._namedParams.dotation, self._namedParams.rIT, self._namedParams.ptTir )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

        myself.eEtatTir_Indirect_ = self.eTir
         do
            local switch_1 = self.eTir
            local cases_switch_1 = {}
                if switch_1 == eActionTirIndirect_Impossible then
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[1] or switch_1 == eActionTirIndirect_Termine then
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirExecute )
                        else
                            DEC_Message( eRC_TirExecute )
                        end

                    end

                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionTirIndirect_NoAmmo then
                    do
                    end

                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirExecute )
                        else
                            DEC_Message( eRC_TirExecute )
                        end

                    end

                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirImpossiblePlusDeMunitions )
                        else
                            DEC_Message( eRC_TirImpossiblePlusDeMunitions )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[3] or switch_1 == eActionTirIndirect_PasDeCapacite then
                    do
                    end

                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirAnnule )
                        else
                            DEC_Message( eRC_TirAnnule )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[4] or switch_1 == eActionTirIndirect_EnCours then
                    if( self.bPremierCoupPartie ) then
                        do
                            if( not DEC_Agent_AutomateEstEmbraye() ) then
                                DEC_RC( eRC_PremierCoupParti )
                            else
                                DEC_Message( eRC_PremierCoupParti )
                            end

                        end
                    end

                    self.bPremierCoupPartie = ModuleBegins()
                    do
                    end

                    
                                cases_switch_1[5] = true
                end
            end

                self.params.__returnValue = eActionEnCours
        return

    end,

    deselect = function( self )
                DEC_Trace( "fin tir indirct: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                DEC_Trace( "fin tir indirect: spontaneous end" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[// ============================================================================
]]--[[// ACT_Tir_Pion_Mortier_SurConnaissance:
]]--[[// 		Applique un tir indirect sur la connaissance @ksTir
]]--[[// ============================================================================
]]node "ACT_Tir_Pion_Mortier_SurConnaissance"
{
    actuators =
    {
        tir = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksTir = self.params[1]
        self._namedParams.rIT = self.params[2]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirIndirect_EnCours
        self.bReprendre = self.bReprendre or false
        self.bPremierCoupPartie = self.bPremierCoupPartie or false
        self.actionID = self.actionID or nil
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Trace( "debut tir fantassins" )
                self.actionID = DEC_StartTirIndirectSurConnaissance( DEC_Tir_MunitionPourTirIndirect( eObus_Explosif, DEC_ConnaissanceAgent_Position( ksTir ) ), self._namedParams.rIT, self._namedParams.ksTir )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

        myself.eEtatTir_Indirect_ = self.eTir
         do
            local switch_1 = self.eTir
            local cases_switch_1 = {}
                if switch_1 == eActionTirIndirect_Impossible then
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[1] or switch_1 == eActionTirIndirect_Termine then
                    do
                    end

                    self.actionID = DEC_StopAction( self.actionID )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirExecute )
                        else
                            DEC_Message( eRC_TirExecute )
                        end

                    end

                                        self.params.__returnValue = eActionEffectuee
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[2] or switch_1 == eActionTirIndirect_NoAmmo then
                    do
                    end
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirAnnule )
                        else
                            DEC_Message( eRC_TirAnnule )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[3] or switch_1 == eActionTirIndirect_PasDeCapacite then
                    do
                    end

                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_TirAnnule )
                        else
                            DEC_Message( eRC_TirAnnule )
                        end

                    end

                    self.actionID = DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionImpossible
                    self.deselect = function() end
                    self.destroy = function() end
                    Halt()

                                end
                if cases_switch_1[4] or switch_1 == eActionTirIndirect_EnCours then
                    if( self.bPremierCoupPartie ) then
                        do
                            if( not DEC_Agent_AutomateEstEmbraye() ) then
                                DEC_RC( eRC_PremierCoupParti )
                            else
                                DEC_Message( eRC_PremierCoupParti )
                            end

                        end
                    end

                    self.bPremierCoupPartie = ModuleBegins()
                    do
                    end

                    
                                cases_switch_1[5] = true
                end
            end

                self.params.__returnValue = eActionEnCours
        return

    end,

    deselect = function( self )
                do
        end

        DEC_Trace( "fin tir fantassins: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                DEC_Trace( "fin tir fantassins: spontaneous end" )
        self.actionID = DEC_StopAction( self.actionID )
    end,

}

--[[// ============================================================================
]]--[[// ACT_Tir_Pion_ASS_PreparerTirSur:
]]--[[// 		Bloque les actuateurs pour l'instance @ptCible
]]--[[// ============================================================================  
]]node "ACT_Tir_Pion_Mortier_PreparerTirSur"
{
    actuators =
    {
        tir = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCible = self.params[1]
    end,

    select = function( self )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Preparation du tir ..." )
            end
        end

    end,

}


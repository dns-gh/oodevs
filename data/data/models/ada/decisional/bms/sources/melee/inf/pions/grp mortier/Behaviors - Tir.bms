includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/grp mortier/Behaviors - Tir.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Grp Mortier/Behaviors - Tir.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:23 $
]]--[[// $Revision: 10 $
]]--[[// $Workfile: Behaviors - Tir.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
node "BEH_Ordre_Pion_Mortier_AppliquerLesFeux"
{
    activations =
    {
        { "ACT_RC", {} },
        { "BEH_MOT_Pion_INF_Debarquer", {} },
        { "BEH_Tir_Pion_Mortier_AppliquerFeux", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCible = self.params[1]
        self._namedParams.rIT = self.params[2]
        self._namedParams.dotation = self.params[3]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            Activate( self.activations.ACT_RC, 1, { eRC_ReceptionOrdreDeFeu, } )
        end

        if( self.eAction ~= eActionEnCours ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 2, {} )
        if( not DEC_Agent_EstEmbarque() ) then
            Activate( self.activations.BEH_Tir_Pion_Mortier_AppliquerFeux, 1, setmetatable( { self._namedParams.ptCible, self._namedParams.rIT, self._namedParams.dotation, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
        end

    end,

--[[// ============================================================================
]]--[[// BEH_Tir_Pion_Mortier_AppliquerFeux:
]]--[[// 		Appliquer les feux sur une position
]]--[[// ============================================================================
]]}

node "BEH_Tir_Pion_Mortier_AppliquerFeux"
{
    activations =
    {
        { "ACT_Dep_SePosterFaceADir", {} },
        { "BEH_Tir_Pion_Mortier_PreparerTirSur", {} },
        { "ACT_Tir_Pion_Mortier_SurPosition", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCible = self.params[1]
        self._namedParams.rIT = self.params[2]
        self._namedParams.dotation = self.params[3]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.dirCible = self.dirCible or DEC_Geometrie_CreerDirection( DEC_Agent_Position(), self._namedParams.ptCible )
        if( ModuleBegins() ) then
            do
                if( not S_Tir_MunitionIndirect_EstValide( self._namedParams.dotation ) ) then
                    do
                                                do
                            --[[// Tir Impossible plus de munition
]]if( not DEC_Agent_AutomateEstEmbraye() ) then
                                DEC_RC( eRC_TirImpossiblePlusDeMunitions )
                            else
                                DEC_Message( eRC_TirImpossiblePlusDeMunitions )
                            end

                        end

                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
                end

                if( not S_Tir_DistancePorteeIndirect_EstValide( self._namedParams.dotation, self._namedParams.ptCible ) ) then
                    do
                                                do
                            --[[// Tir Impossible
]]if( not DEC_Agent_AutomateEstEmbraye() ) then
                                DEC_RC( eRC_TirHorsDePortee )
                            else
                                DEC_Message( eRC_TirHorsDePortee )
                            end

                        end

                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
                end

            end
        end

        if( self.eAction ~= eActionEnCours ) then
            do
                Activate( self.activations.ACT_Dep_SePosterFaceADir, 1, { self.dirCible, } )
                self.eAction = eActionEnCours
                                self.params.__returnValue = eActionEffectuee
                do return end

            end
        end

        Activate( self.activations.BEH_Tir_Pion_Mortier_PreparerTirSur, 2, { self._namedParams.ptCible, M_DELAI_PREPARATION_TIR(), } )
        Activate( self.activations.ACT_Tir_Pion_Mortier_SurPosition, 1, setmetatable( { self._namedParams.ptCible, self._namedParams.rIT, self._namedParams.dotation, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
    end,

--[[// ============================================================================
]]--[[// BEH_Tir_Pion_ASS_PreparerTirSur:
]]--[[//		Prepare un tir sur la position @ptCible pendant @rDelai
]]--[[// ============================================================================
]]}

node "BEH_Tir_Pion_Mortier_PreparerTirSur"
{
    activations =
    {
        { "ACT_Tir_Pion_Mortier_PreparerTirSur", {} },
        { "ACT_Misc_Delai", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCible = self.params[1]
        self._namedParams.rDelai = self.params[2]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        if( self.eAction == eActionEnCours ) then
            do
                Activate( self.activations.ACT_Tir_Pion_Mortier_PreparerTirSur, 1, { self._namedParams.ptCible, } )
                Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { 1, self._namedParams.rDelai, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
            end
        end

    end,

--[[// ============================================================================
]]--[[// BEH_Tir_Pion_INF_TirDebarque:
]]--[[//		Tir de riposte sur l'unite ennemi @ksEni
]]--[[// ============================================================================
]]}

node "BEH_Tir_Pion_INF_TirDebarque"
{
    activations =
    {
        { "ACT_Tir_DirectSur", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        local eActionReturn = self.eAction
        Activate( self.activations.ACT_Tir_DirectSur, 1, setmetatable( { self._namedParams.ksEni, 1, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                self.params.__returnValue = eActionReturn
        do return end

    end,

--[[// ============================================================================
]]--[[// BEH_MOT_Pion_Mortier_AppliquerLesFeux()
]]--[[// 		Lorsque l'on a envie de appliquer les feux ( ordre ), choisi la 
]]--[[// 		meilleure cible.
]]--[[// ============================================================================
]]}

node "BEH_MOT_Pion_Mortier_AppliquerLesFeux"
{
    activations =
    {
        { "ACT_RC", {} },
        { "BEH_MOT_Pion_INF_Debarquer", {} },
        { "BEH_Tir_Pion_Mortier_AppliquerFeux", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.rIT = self.rIT or 2
        if( ModuleBegins() ) then
            Activate( self.activations.ACT_RC, 1, { eRC_ReceptionOrdreDeFeu, } )
        end

        Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 2, {} )
        local selPions_Compagnie = DEC_Pion_PionsAvecPC()
        for _,x_pion in pairs( selPions_Compagnie ) do
        local _continue = true
do
                local pPion = x_pion
                if( F_Pion_GeteEtatDec( pPion ) ~= eEtatDec_Sauvegarde ) then
                    _continue = false
                end

                    if _continue then
                    local ksEni = F_Pion_GeteniEnCours( pPion )
                    local ptEni = DEC_ConnaissanceAgent_Position( ksEni )
                    --[[// On ne tire que sur des connaissances ennemies valides, non detruites			
]]if( eTristate_True == DEC_ConnaissanceAgent_EstUnEnnemi( ksEni ) and ( not DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) and ( not S_ConnaissanceAgent_EstEnVol( ksEni ) ) and S_Tir_DistancePorteeIndirect_EstValide( DEC_Tir_MunitionPourTirIndirect( eObus_Explosif, ptEni ), ptEni ) ) then
                        do
                            local rForce = S_Eni_ForceDangerPour( pPion, ksEni )
                            Activate( self.activations.BEH_Tir_Pion_Mortier_AppliquerFeux, rForce, { ptEni, self.rIT, DEC_Tir_MunitionPourTirIndirect( eObus_Explosif, ptEni ), } )
                        end
                    end

                end
            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_Mortier_AppliquerLesFeux, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_Mortier_AppliquerLesFeux, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_MOT_Pion_Mortier_AppliquerLesFeux, "BEH_Tir_Pion_Mortier_AppliquerFeux", nodes.BEH_Tir_Pion_Mortier_AppliquerFeux }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_Mortier_AppliquerLesFeux, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_Mortier_AppliquerLesFeux, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_Mortier_AppliquerLesFeux, "BEH_Tir_Pion_Mortier_AppliquerFeux", nodes.BEH_Tir_Pion_Mortier_AppliquerFeux }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_INF_TirDebarque, "ACT_Tir_DirectSur", nodes.ACT_Tir_DirectSur }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_Mortier_AppliquerFeux, "ACT_Dep_SePosterFaceADir", nodes.ACT_Dep_SePosterFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_Mortier_AppliquerFeux, "BEH_Tir_Pion_Mortier_PreparerTirSur", nodes.BEH_Tir_Pion_Mortier_PreparerTirSur }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_Mortier_AppliquerFeux, "ACT_Tir_Pion_Mortier_SurPosition", nodes.ACT_Tir_Pion_Mortier_SurPosition }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_Mortier_PreparerTirSur, "ACT_Tir_Pion_Mortier_PreparerTirSur", nodes.ACT_Tir_Pion_Mortier_PreparerTirSur }
connections[ #connections + 1 ] = { nodes.BEH_Tir_Pion_Mortier_PreparerTirSur, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }

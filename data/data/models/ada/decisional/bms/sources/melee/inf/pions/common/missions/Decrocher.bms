includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/common/missions/Decrocher.bms"] = true


--[[// *****************************************************************************
]]--[[// MIS_Pion_Decrocher
]]--[[//
]]--[[// Commentaires: BUT: au niveau de la patrouille, renseigner en permanence sur
]]--[[//               un eni sans se laisser accrocher NI identifier. Au niveau de
]]--[[//               de la patrouille, pas d'opportunité d'ouverture du feu.
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_Decrocher"
{
    feedbacks = { { { "done_MIS_Pion_Decrocher" }, "MIS_Pion_Decrocher" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_Decrocher, {value} ) end,
    activations =
    {
        { "BEH_MOT_DesactiveSauvegarde", { "done_BEH_MOT_DesactiveSauvegarde" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_Lima_GererLR", { "done_BEH_Lima_GererLR" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                StartActivateOverride( self, self.activations.BEH_MOT_DesactiveSauvegarde, 1, {} )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "Disengagement mission begining", } )
                    self.ePhaseMission = eDecrocher
                    _continue = false
                --[[// 2) Decrocher
]]                cases_switch_1[1] = true
elseif switch_1 == eDecrocher then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_Decroche, } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self._namedParams.mission.pointRegroupement_, eProgressionDirect, eTypeItiRepli, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eEtat = v[1] end
                    Activate( self.activations.BEH_Lima_GererLR, 1, {} )
                    _continue = false
                --[[// 4) Fin de la mission
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    StopActivateOverride( self, self.activations.BEH_MOT_DesactiveSauvegarde, {} )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end
--[[/* ADA MIA
    persistent E_EtatAction   eEtat                = eActionEnCours;
    persistent E_PhaseMission ePhaseMission        = ePreparerMission;

    if( DIA_ModuleBegins() )
    {
    	DEC_SetMission( myself,  mission );
    	F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse );
        start behavior BEH_MOT_DesactiveSauvegarde();            
    }
	
	persistent E_EtatAction eEtatOrdreFinMission = eActionEnCours;    behavior BEH_Ordre_Inopine() return in eEtatOrdreFinMission;    if( eEtatOrdreFinMission == eActionHalt )    {    	 ePhaseMission = eFinMission; eEtat = eActionEnCours;     	eEtatOrdreFinMission = eActionEnCours;    }

    action ACT_Misc_Pion_INF_MAJ_PositionRegroupement( mission.pointRegroupement_ );
    switch( ePhaseMission )
    {
        case ePreparerMission:
        {            
         	action ACT_RC( eRC_PreparationMission );
         	action ACT_MAJ_EtatPhaseMission( eEtatPhaseMission_DebutMission );
            ePhaseMission = eDecrocher;
            break;
        }
        case eDecrocher:
        {
     		action ACT_MAJ_EtatPhaseMission( eEtatPhaseMission_Decroche );
     		if(  eEtat  == eActionEffectuee )    {         eEtat =eActionEnCours;         { ePhaseMission = eFinMission; return; }     }
            behavior BEH_Lima_GererLR();
            behavior BEH_Lima_Pion_INF_GererLIA();
            behavior BEH_Manoeuvre_RompreContact() return in eEtat;                
    		break;
        }
        case eFinMission:
        {
        	stop behavior BEH_MOT_DesactiveSauvegarde();
			action ACT_MAJ_EtatPhaseMission( eEtatPhaseMission_FinMission );
            break;
        }
        default: {}
    }
    */]]
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_Decrocher = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "BEH_MOT_DesactiveSauvegarde", nodes.BEH_MOT_DesactiveSauvegarde }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "BEH_Lima_GererLR", nodes.BEH_Lima_GererLR }
connections[ #connections + 1 ] = { nodes.MIS_Pion_Decrocher, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

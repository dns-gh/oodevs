includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/groupe te/Behaviors - Eni.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[/** \file S VAB - Behaviors - Destruction.hal
 *
 * $Author: Ggr $
 * $Modtime: 25/08/05 18:19 $
 * $Revision: 28 $
 *
 */]]--[[// Created: JCR 03-02-12
]]--[[// *****************************************************************************
]]--[[//-----------------------------------------------------------------------------
]]--[[// Fixer un ennemi
]]--[[//-----------------------------------------------------------------------------
]]

node "BEH_Eni_Pion_VAB_Fixer"
{
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", {} },
        { "BEH_MOT_Pion_INF_Debarquer", {} },
        { "BEH_Dep_ProgressionVers", {} },
        { "ACT_RC", {} },
        { "ACT_MAJ_EtatSituationEni", {} },
        { "ACT_Dep_SePoster", {} },
        { "BEH_Feu_Pion_INF_TirFixer", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    activate = function( self )
        self.eActionFixer = self.eActionFixer or eActionEnCours
        self.ptEni_EnCours = self.ptEni_EnCours or S_Eni_Position( self._namedParams.repEni )
        --[[// On arrete de tirer lorsque la section est detruite tactiquement
]]local rPH = GetStateVariable( "VE_Agressivite_Tir" )
        if( ModuleBegins() ) then
            do
            end
--[[// on traite l'ennemi en cours
]]        end

        if( S_Eni_EstDetruitTactique( self._namedParams.repEni ) ) then
            self.eActionFixer = eActionEffectuee
        end

        --[[// On debarque
]]if( self.eActionFixer == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eActionFixer == eActionEffectuee ) then
            do
                self.eActionFixer = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.repEni, } )
        if( S_Tir_EstAPortee( self._namedParams.repEni, rPH / 2 ) ) then
            Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1.2, {} )
        end

        --[[// Attention / si l'ennemi est en mouvement
]]if( not S_Tir_EstAPortee_Debarque( self._namedParams.repEni, rPH ) ) then
            do
                if( S_Geometrie_EstProchePosition( self.ptEni_EnCours, S_Eni_Position( self._namedParams.repEni ), 500 ) ) then
                    self.ptEni_EnCours = S_Eni_Position( self._namedParams.repEni )
                end

                --[[// MAJs etats
]]Activate( self.activations.BEH_Dep_ProgressionVers, 1.1, { self.ptEni_EnCours, eProgressionDirect, eTypeItiInfiltration, } )
            end
--[[// Se poste
]]        else
do
                Activate( self.activations.ACT_RC, 1, { eRC_PretPourConduiteTir, } )
                Activate( self.activations.ACT_MAJ_EtatSituationEni, 1, { eEtatSituationEnnemi_PretPourConduiteTir, } )
                Activate( self.activations.ACT_Dep_SePoster, 1, {} )--[[//-----------------------------------------------------------------------------
]]--[[// Destruction d'un ennemi le rapport de force est toujours favorable !
]]
                --[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_Feu_Pion_INF_TirFixer, 1, setmetatable( { self._namedParams.repEni, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionFixer = v else rawset( t, k, v ) end end } ) )
            end
        end

    end,

}

node "BEH_Eni_Pion_VAB_ManoeuvreDetruire"
{
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "BEH_Dep_Pion_INF_AborderEnnemi", {} },
        { "ACT_Tir_FumigeneVersEni", {} },
        { "BEH_MOT_Pion_INF_Debarquer", {} },
        { "ACT_Dep_PasserEnModeFurtif", {} },
        { "ACT_Dep_ModulationVitesse", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
        self.eActionDeplacement = self.eActionDeplacement or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        local rPH = GetStateVariable( "VE_Agressivite_Tir" )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Debut destruction de l'unite eni." )
            end
--[[// observation de l'unite
]]        end

        do
        end

        do
        end
--[[// behavior BEH_Mot_Pion_Embarquer();
]]
        do
        end

        do
        end
--[[// Se deplace vers l'ennemi
]]--[[// Tant que l'on est dans le fuseau ...
]]
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), } )
        if( DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            Activate( self.activations.BEH_Dep_Pion_INF_AborderEnnemi, 1, setmetatable( { self._namedParams.ksEni, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionDeplacement = v else rawset( t, k, v ) end end } ) )
        end

        if( ( S_Eni_EstDetruitPhysique( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) ) then
            --[[// Distance de tir atteinte ( VAB ), on fixe
]]self.ePhase = eNettoyer
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    --[[// Rejoindre base d'assaut
]]if( S_Tir_EstAPortee( self._namedParams.ksEni, rPH ) or S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        self.ePhase = eRejoindreAssaut
                    else
                        do return end
--[[// la section rejoint la base d'assaut            
]]                    end

                --[[// stop behavior BEH_Pion_INF_TirCouverture_Fixe( ksEni );
]]                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindreAssaut then
                    if( S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        do
                            --[[// Détruire l'eni : on lance l'assaut
]]DEC_Trace( "base d'assaut atteinte - lance l'assaut" )
                            --[[// if ( M_TRANSPORT_INF_EST_EMBARQUE() )
]]Activate( self.activations.ACT_Tir_FumigeneVersEni, 1, { self._namedParams.ksEni, } )
                            self.ePhase = eDetruire
                        end
--[[// On fait en sorte de ne pas etre vu
]]                    end

                                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eDetruire then
                    --[[// mise en place du dispositif d' assaut
]]Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1.1, {} )
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )--[[// Ennemi detruit on nettoie la position
]]
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
                    _continue = false
                                cases_switch_1[3] = true
elseif switch_1 == eNettoyer then
                    _continue = false--[[// ----------------------------------------------------------------------------
]]
                --[[// Gere la prise de contact avec l'ennemi :
]]--[[//		- Precise le contact
]]                cases_switch_1[4] = true

                else
                --[[// 		- Si l'ennemi est detruit, nettoie la position
]]                end
            end
--[[// ----------------------------------------------------------------------------
]]
    end,

}

node "BEH_Dep_Pion_INF_GererDispositif_Offensif"
{
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_Pion_INF_PreciserMaintenirContact", {} },
        { "BEH_Poste_Pion_INF_NettoyerPosition", {} },
        { "ACT_MAJ_EnnemiEnCours", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
        --[[// Si c'est un ami ... comme on start le comportment
]]        self.eActionPreciser = self.eActionPreciser or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        --[[// Si on est en ambiance vitesse et je ne sais pas si c'est un ennemi,
]]self.ePhase = self.ePhase or eDetruire
        --[[// On passe son chemin
]]if( DEC_ConnaissanceAgent_EstUnEnnemi( self._namedParams.ksEni ) == eTristate_False ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        if( DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEni ) and F_Pion_GeteEtatAmbiance( myself ) == eEtatAmbiance_Vitesse and DEC_ConnaissanceAgent_EstUnEnnemi( self._namedParams.ksEni ) == eTristate_DontKnow ) then
            do return end
--[[// On veut qd meme rester dans son fuseau
]]        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eActionPreciser ~= eActionEnCours or self.eAction == eActionEffectuee ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        --[[// Si l'ennemie sort du fuseau, on abandonne les poursuites.
]]Activate( self.activations.BEH_Dep_Pion_INF_PreciserMaintenirContact, 1, setmetatable( { self._namedParams.ksEni, false, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionPreciser = v else rawset( t, k, v ) end end } ) )
        if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEni ) ) then
            do return end
--[[// Nettoyer et retablir dispositif si l'ennemi est detruit
]]        end

        if( not DEC_Geometrie_EstPointDansFuseau( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ) ) ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        if( ( S_Eni_EstDetruitPhysique( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) ) then
            StartActivateOverride( self, self.activations.BEH_Poste_Pion_INF_NettoyerPosition, 2, setmetatable( { self._namedParams.ksEni, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
--[[// Nettoyer et retablir dispositif
]]--[[// ----------------------------------------------------------------------------
]]    end,

    destroy = function( self )
            end,

}

node "BEH_Poste_Pion_INF_NettoyerPosition"
{
    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "ACT_Dep_Pion_INF_Arret", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
                self.ptEni = self.ptEni or DEC_Geometrie_CreerPoint()
        self.eAction = self.eAction or eActionEnCours
        self.bInitFouille = self.bInitFouille or true
        if( ModuleBegins() ) then
            DEC_Copie_Point( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), self.ptEni )
        end

        --[[/*
		if ( bInitFouille )
		{
			bInitFouille = false;
			start behavior BEH_Poste_Pion_INF_RetablirDispositif() : strength = 1.1;			
		}
		*/]]if( self.eAction ~= eActionEnCours ) then
            self.params.__returnValue = eActionEffectuee
            do return end
        end

        --[[// Vision vers l'ennemi Ennemi
]]if( not S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.ptEni, 200 ) ) then
            self.params.__returnValue = eActionEnCours
            do return end
        end

        --[[// ----------------------------------------------------------------------------
]]--[[// Manoeuvre sur les unites potentiellement dangereuses
]]--[[// ----------------------------------------------------------------------------
]]Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { self.ptEni, } )
        Activate( self.activations.ACT_Dep_Pion_INF_Arret, 1, setmetatable( { M_DELAI_NETTOYAGE(), "nettoyage de la position", }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
--[[// Si le pion n'est pas dans son fuseau, on n'agit pas sur les ennemis
]]    end,

    destroy = function( self )
            end,

}

node "BEH_Eni_Pion_VAB_Offensif_Manoeuvre"
{
    activations =
    {
        { "BEH_Dep_Pion_INF_GererDispositif_Offensif", {} },
        { "BEH_Eni_Pion_VAB_ManoeuvreDetruire", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        if( not DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            do return end
        end

        local lstUnitesDetectees = DEC_Connaissances_UnitesDetecteesDansFuseau()
        for _,ksEni in pairs( lstUnitesDetectees or {} ) do
        local _continue = true
do
                --[[// On lance l'assaut si le niveau de perception attendu est atteind
]]local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce, { ksEni, true, } )
            end

        end

        local lstEnisPercus = DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau()
        for _,ksEni in pairs( lstEnisPercus or {} ) do
        local _continue = true
do
                if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                    _continue = false--[[// ----------------------------------------------------------------------------
]]
                end

                    if _continue then
                    --[[// Gestion du tir
]]--[[// ----------------------------------------------------------------------------
]]local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                    if( S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                        Activate( self.activations.BEH_Eni_Pion_VAB_ManoeuvreDetruire, 1 + rForce, { ksEni, true, } )
                    end

                    Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce, { ksEni, true, } )
                end
            end

        end

    end,

}

node "BEH_Eni_Pion_INF_GererContactEni"
{
    activations =
    {
        { "BEH_Feu_Pion_VAB_Detruire_SurEni", {} },
        { "BEH_Eni_Pion_VAB_Fixer", {} },
        { "BEH_Eni_Pion_INF_DetruitEtFixe", {} },
        { "BEH_Feu_Pion_INF_TirAppui", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
        if( DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) then
            do return end
        end

         do
            local _continue = true
            local switch_1 = F_Pion_GeteTypeContact( myself )
            local cases_switch_1 = {}
                if switch_1 == eTypeContact_Offensif then
                    Activate( self.activations.BEH_Feu_Pion_VAB_Detruire_SurEni, 1, { self._namedParams.ksEni, true, } )
                    if( S_Misc_EstMissionAffectee( "T_Mission_Pion_INF_Fixer" ) ) then
                        Activate( self.activations.BEH_Eni_Pion_VAB_Fixer, 1, { self._namedParams.ksEni, } )
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eTypeContact_Defensif then
                    Activate( self.activations.BEH_Eni_Pion_INF_DetruitEtFixe, 1, { self._namedParams.ksEni, false, } )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eTypeContact_Appui then
                    Activate( self.activations.BEH_Feu_Pion_INF_TirAppui, 1, { self._namedParams.ksEni, } )
                    _continue = false
                                cases_switch_1[3] = true

                else
                    Activate( self.activations.BEH_Eni_Pion_INF_DetruitEtFixe, 1, { self._namedParams.ksEni, true, } )
                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "BEH_Dep_Pion_INF_PreciserMaintenirContact", nodes.BEH_Dep_Pion_INF_PreciserMaintenirContact }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "BEH_Poste_Pion_INF_NettoyerPosition", nodes.BEH_Poste_Pion_INF_NettoyerPosition }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_GererContactEni, "BEH_Feu_Pion_VAB_Detruire_SurEni", nodes.BEH_Feu_Pion_VAB_Detruire_SurEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_GererContactEni, "BEH_Eni_Pion_VAB_Fixer", nodes.BEH_Eni_Pion_VAB_Fixer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_GererContactEni, "BEH_Eni_Pion_INF_DetruitEtFixe", nodes.BEH_Eni_Pion_INF_DetruitEtFixe }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_GererContactEni, "BEH_Feu_Pion_INF_TirAppui", nodes.BEH_Feu_Pion_INF_TirAppui }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "ACT_MAJ_EtatSituationEni", nodes.ACT_MAJ_EtatSituationEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Fixer, "BEH_Feu_Pion_INF_TirFixer", nodes.BEH_Feu_Pion_INF_TirFixer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "BEH_Dep_Pion_INF_AborderEnnemi", nodes.BEH_Dep_Pion_INF_AborderEnnemi }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Tir_FumigeneVersEni", nodes.ACT_Tir_FumigeneVersEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Offensif_Manoeuvre, "BEH_Dep_Pion_INF_GererDispositif_Offensif", nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Offensif_Manoeuvre, "BEH_Eni_Pion_VAB_ManoeuvreDetruire", nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.BEH_Poste_Pion_INF_NettoyerPosition, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Poste_Pion_INF_NettoyerPosition, "ACT_Dep_Pion_INF_Arret", nodes.ACT_Dep_Pion_INF_Arret }

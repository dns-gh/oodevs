includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/automates/common/Behaviors CDT - Situation.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors CDT - Situation.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/08/05 14:41 $
]]--[[// $Revision: 11 $
]]--[[// $Workfile: Behaviors CDT - Situation.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


node "BEH_Situation_Automate_INF_Defaut"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_Defaut" }, "BEH_Situation_Automate_INF_Defaut" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_Defaut, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_FinDeMission_Sur", { "done_BEH_Situation_Automate_INF_FinDeMission_Sur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.bFinMission = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        local sComposants = DEC_Automate_PionsSansPC()
        for _,x in pairs( sComposants or emptyTable ) do
        local _continue = true
do
                local x_pion = x
                 do
                    local _continue = true
--[[// Situation Mission
]]--[[// --------------------------------------------------------------------
]]                    local switch_1 = F_Pion_GeteEtatPhaseMission( x_pion )
                        if switch_1 == eEtatPhaseMission_FinMission then
                            if( self._namedParams.bFinMission ) then
                                do
                                     do
                                        local _continue = true
                                        local switch_2 = F_Pion_GetmissionPrecedente( x_pion )
                                            if switch_2 == "T_Mission_Pion_INF_Appuyer"
                                            or switch_2 == "T_Mission_Pion_ABC_Appuyer"
                                            or switch_2 == "T_Mission_Pion_ABC_Soutenir" then
                                                                                            _continue = false
                                            
                                            else
                                                StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_FinDeMission_Sur, 1 / GetActivity(), { x_pion, } )
                                            end
                                        end

                                end
                            end

                            _continue = false
                                                end
                    end

            end

        end

    end,

}

node "BEH_Situation_Automate_INF_CadreOffensif"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_CadreOffensif" }, "BEH_Situation_Automate_INF_CadreOffensif" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_CadreOffensif, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_FinDeMission_Sur", { "done_BEH_Situation_Automate_INF_FinDeMission_Sur" } },
        { "BEH_Conduite_Automate_INF_AssignerSemparerA", { "done_BEH_Conduite_Automate_INF_AssignerSemparerA" } },
        { "BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco", { "done_BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local sComposants = DEC_Automate_PionsSansPC()
        for _,x in pairs( sComposants or emptyTable ) do
        local _continue = true
do
                local x_pion = x
                 do
                    local _continue = true
--[[// Situation Mission
]]--[[// --------------------------------------------------------------------
]]--[[// case T_Mission_Pion_INF_Reduire:				
]]--[[// 
]]--[[// Ajout ADA MIA											
]]                    local switch_1 = F_Pion_GeteEtatPhaseMission( x_pion )
                        if switch_1 == eEtatPhaseMission_FinMission then
                             do
                                local _continue = true
                                local switch_2 = F_Pion_GetmissionPrecedente( x_pion )
                                local cases_switch_2 = {}
                                    if switch_2 == "T_Mission_Pion_INF_Reduire"
                                    or switch_2 == "T_Mission_Pion_INF_ReconnaitreAxe" then
                                        StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_FinDeMission_Sur, 1 / GetActivity(), { x_pion, } )
                                        _continue = false
                                                                        cases_switch_2[1] = true
elseif switch_2 == "T_Mission_Pion_INF_Fixer" then
                                        DEC_Trace( "Fin mission : Fixer." )
                                        if( S_Misc_EstMissionAffectee( "T_Mission_Automate_INF_Semparer" ) ) then
                                            do
                                                local mission = DEC_GetMission( myself )
                                                StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_AssignerSemparerA, 1, { x_pion, mission.objectif_, } )
                                            end
                                        end

                                        _continue = false
                                                                        cases_switch_2[2] = true
elseif switch_2 == "T_Mission_Pion_INF_PrendrePreciserContact" then
                                        DEC_Trace( "Fin mission : Reduire | PPContact." )
                                        if( not S_Misc_EstMissionAffectee( "T_Mission_Automate_INF_Semparer" ) ) then
                                            StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco, 1, { x_pion, } )
                                        end

                                                                        cases_switch_2[3] = true
                                    end
                                    if cases_switch_2[3] or switch_2 == "T_Mission_Pion_INF_Semparer" then
                                                                        cases_switch_2[4] = true
end
                                    if not cases_switch_2[1] and not cases_switch_2[2] then
                                        F_Pion_SeteEtatEchelon( x_pion, eEtatEchelon_Second )
                                    end
                                end

                            _continue = false
                                                end
                    end

            end

        end

    end,

}

node "BEH_Conduite_Automate_INF_AssignerSemparerA"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_AssignerSemparerA" }, "BEH_Conduite_Automate_INF_AssignerSemparerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_AssignerSemparerA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerA_Semparer", { "done_BEH_Mission_Automate_INF_AssignerA_Semparer" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.locZone = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
                self.ptZone = self.ptZone or S_Geometrie_BarycentreZone( self._namedParams.locZone )
        if( self.ptZone == nil ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( not ModuleBegins() ) then
            Halt( self )
            do return end
        end

        Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Semparer, 1, { ePhase_CDT, self._namedParams.pion, self.ptZone, } )
    end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_AssignerSemparerA, "BEH_Mission_Automate_INF_AssignerA_Semparer", nodes.BEH_Mission_Automate_INF_AssignerA_Semparer }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_CadreOffensif, "BEH_Situation_Automate_INF_FinDeMission_Sur", nodes.BEH_Situation_Automate_INF_FinDeMission_Sur }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_CadreOffensif, "BEH_Conduite_Automate_INF_AssignerSemparerA", nodes.BEH_Conduite_Automate_INF_AssignerSemparerA }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_CadreOffensif, "BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco", nodes.BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Defaut, "BEH_Situation_Automate_INF_FinDeMission_Sur", nodes.BEH_Situation_Automate_INF_FinDeMission_Sur }

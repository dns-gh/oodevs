includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/grp proterre/missions/ReconnaitreAxe.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Pion_INF_ReconnaitreAxe
]]--[[//
]]--[[// Commentaire:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_INF_ReconnaitreAxe"
{
    feedbacks = { { { "done_MIS_Pion_INF_ReconnaitreAxe" }, "MIS_Pion_INF_ReconnaitreAxe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_ReconnaitreAxe, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Eni_Pion_VAB_RecoAxe", { "done_BEH_Eni_Pion_VAB_RecoAxe" } },
        { "BEH_Mission_Pion_INF_RecoAxe", { "done_BEH_Mission_Pion_INF_RecoAxe" } },
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eReconnaitre
        self.eCurrentPhase = self.eCurrentPhase or ePreparerMission
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Mission 'Reconnaitre Axe' : debut" )
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Offensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_MANOEUVRE(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//=============================================================================
]]--[[// Mission de Reconnaissance
]]--[[//=============================================================================
]]        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eReconnaitre then
                    if( self.eAction == eActionImpossible or self.eAction == eActionHalt ) then
                        self.ePhase = eFinMission
                    end

                    if( self.eCurrentPhase ~= eFinMission ) then
                        do
                            Activate( self.activations.BEH_Eni_Pion_VAB_RecoAxe, 1, {} )
                            Activate( self.activations.BEH_Mission_Pion_INF_RecoAxe, GetMotivation( "MOT_Mission" ), {} )
self.done_BEH_Mission_Pion_INF_RecoAxe = function( self, _, v ) self.eCurrentPhase = v[1] end
                                                        do return end

                        end
                    else
                        self.ePhase = eFinMission
                    end

                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eFinMission then
                    Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, {} )
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "Fin mission de mission reconnaitre un axe" )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

--[[//=============================================================================
]]--[[//=============================================================================
]]--[[//						Gestion de l'ennemi
]]--[[//	
]]--[[//=============================================================================
]]--[[// *****************************************************************************
]]--[[// BEH_Eni_Pion_VAB_RecoAxe
]]--[[//
]]--[[// Commentaire: dans le cadre de la reco offencive, on precise et prends le contact sur les
]]--[[//              ennemis dans le fuseau et non detruit tactiquement.
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Eni_Pion_VAB_RecoAxe"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_RecoAxe" }, "BEH_Eni_Pion_VAB_RecoAxe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_RecoAxe, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_INF_GererDispositif_Offensif", { "done_BEH_Dep_Pion_INF_GererDispositif_Offensif" } },
        { "BEH_Eni_Pion_VAB_ManoeuvreDetruire", { "done_BEH_Eni_Pion_VAB_ManoeuvreDetruire" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// Si on quitte notre fuseau, on reinitialise toute les manoeuvres sur 
]]--[[// les ennemis
]]if( not DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            Halt( self )
            do return end
        end

        --[[// Precise le contact sur les unites detectees
]]local lstUnitesDansFuseau = DEC_Connaissances_UnitesDetecteesDansFuseau()
        for _,ksEni in pairs( lstUnitesDansFuseau or {} ) do
        local _continue = true
do
                local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                local rForceReco = S_Force_DistanceReco( DEC_ConnaissanceAgent_Position( ksEni ), 4000 )
                --[[// On traite l'unite si elle est dans le fuseau de la section    								
]]Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce * rForceReco, { ksEni, true, } )
            end
--[[// On traite l'unite si elle est dans le fuseau de la section
]]
        end

        local lstEnisDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
        for _,ksEni in pairs( lstEnisDansFuseau or {} ) do
        local _continue = true
do
                if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                    _continue = false
                end

                    if _continue then
                    local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                    local rForceReco = S_Force_DistanceReco( DEC_ConnaissanceAgent_Position( ksEni ), 4000 )
                    --[[// Le comportement doit etre starte car une fois que l'unite est 
]]--[[// detruite, il retablit le dispositif.
]]StartActivateOverride( self, self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce * rForceReco, { ksEni, true, } )
                    --[[// On lance l'assaut si le niveau de perception attendu est atteind
]]if( S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                        Activate( self.activations.BEH_Eni_Pion_VAB_ManoeuvreDetruire, 1.1 * ( 2.5 + rForce ) * rForceReco, { ksEni, true, } )
                    end

                end
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_ReconnaitreAxe = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_RecoAxe, "BEH_Dep_Pion_INF_GererDispositif_Offensif", nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_RecoAxe, "BEH_Eni_Pion_VAB_ManoeuvreDetruire", nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_Eni_Pion_VAB_RecoAxe", nodes.BEH_Eni_Pion_VAB_RecoAxe }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_Mission_Pion_INF_RecoAxe", nodes.BEH_Mission_Pion_INF_RecoAxe }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_ReconnaitreAxe, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

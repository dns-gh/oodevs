includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/common/missions/Reconnaissance.bms"] = true


--[[//=============================================================================
]]--[[//=============================================================================
]]--[[//						Squelette de la mission
]]--[[//	
]]--[[//=============================================================================
]]node "BEH_Mission_Pion_INF_RecoAxe"
{
    feedbacks = { { { "done_BEH_Mission_Pion_INF_RecoAxe" }, "BEH_Mission_Pion_INF_RecoAxe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_INF_RecoAxe, {value} ) end,
    activations =
    {
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Obs_EtablirVisionCur", { "done_ACT_Obs_EtablirVisionCur" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "BEH_Lima_GererLimas", { "done_BEH_Lima_GererLimas" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eProgresser
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                            end

                        end
--[[// dispositif de deplacement
]]                    end

                    Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                    --[[// Progression sur l'itineraire
]]Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self.mission.itineraire_, eProgressionReco, eTypeItiReconnaissance, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eAction = v[1] end
                    Activate( self.activations.BEH_Lima_GererLimas, 1.5, {} )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    _continue = false
                                cases_switch_1[3] = true
                end
            end

                self:SendFeedback( self.ePhase )
        do return end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Lima_GererLimas", nodes.BEH_Lima_GererLimas }

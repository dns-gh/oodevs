includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/pions/common/missions/Appuyer.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-01-25 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Pions/Common/Missions/Appuyer.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 23/08/05 15:21 $
]]--[[// $Revision: 22 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[/// $$$$ MIA 03-01-24: RAJOUTER REACTION ENI AVANT POSITION APPUI
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_ABC_Appuyer
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// Comportements:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Pion_ABC_Appuyer"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "BEH_MAJ_Pion_ABC_AgressiviteTir", { "onHalt" } },
        { "ACT_Info_Trace", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "ACT_Dep_ModulationVitesse", { "onHalt" } },
        { "BEH_Dep_ProgressionVers", { "onHalt" } },
        { "BEH_Dep_Pion_ABC_RejoindrePositionAppuiPour", { "onHalt" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "onHalt" } },
        { "BEH_Obj_RejoindreEmbossements", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Mission_Pion_ABC_Appuyer" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params[1]
        self._namedParams.rPH = self.params[2]
        self._namedParams.eNiveauIdentificationEni = self.params[3]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.positionAmie = self.positionAmie or nil
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self.params.__returnValue = eActionEffectuee
            Feedback( self.feedbacks["onHalt"], { "BEH_Mission_Pion_ABC_Appuyer" } )
Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Agressivite
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_MAJ_Pion_ABC_AgressiviteTir, 1, { self._namedParams.rPH, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Creation de l'itineraire par rapport à la position amie
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                self.positionAmie = self._namedParams.mission.uniteAAppuyer_:DEC_Agent_Position()
            end
        end

         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_Info_Trace, 1, { "Spontaneous support mission begining", } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhaseMission = eProgresser
                    
                --[[// 3) Progression vers position amie --> au plus vite
]]                cases_switch_1[1] = true
elseif switch_1 == eProgresser then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// passer en appui à une certaine distance de l'ami
]]if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.mission.uniteAAppuyer_:DEC_Agent_Position() ) < M_MODELE_PION_ABC_DISTANCE_PASSAGE_APPUI() ) then
                        do
                            DEC_Trace( "L'unite passe en appui" )
                            self.ePhaseMission = ePasserEnAppui
                                                        return

                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = ePasserEnAppui
                                                                return

                            end

                        end
--[[// au plus vite
]]                    end

                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                    --[[// force de 1.
]]Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.positionAmie, eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// Passer en appui
]]                cases_switch_1[2] = true
elseif switch_1 == ePasserEnAppui then
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eSePoster
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ABC_RejoindrePositionAppuiPour, 1, setmetatable( { self._namedParams.mission.uniteAAppuyer_, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    
                --[[// On se poste sur la position d'appui
]]                cases_switch_1[3] = true
elseif switch_1 == eSePoster then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnAppui, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    Activate( self.activations.BEH_Obj_RejoindreEmbossements, 1, {} )
                    
                --[[// 4) Fin de la mission de reconnaissance
]]                cases_switch_1[4] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    
                                cases_switch_1[5] = true

                else
                                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_MAJ_Pion_ABC_AgressiviteTir", nodes.BEH_MAJ_Pion_ABC_AgressiviteTir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_Dep_Pion_ABC_RejoindrePositionAppuiPour", nodes.BEH_Dep_Pion_ABC_RejoindrePositionAppuiPour }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Appuyer, "BEH_Obj_RejoindreEmbossements", nodes.BEH_Obj_RejoindreEmbossements }

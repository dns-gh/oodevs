includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son proterre/Behaviors - Obj.bms"] = true

--[[// *****************************************************************************
]]--[[/** \file S VAB - Behaviors - Defensif.hal
 *
 * $Author: Ggr $
 * $Modtime: 24/05/05 13:57 $
 * $Revision: 10 $
 *
 */]]--[[// Created: JCR 03-02-12
]]--[[// *****************************************************************************
]]
--[[//=============================================================================
]]--[[//
]]
--[[// Comportements defensifs, renseignement ..
]]
--[[//
]]
--[[//=============================================================================
]]
--[[//
]]
--[[// behavior BEH_Obj_Pion_VAB_InstallerPlanObstacle ( T_Localisation )
]]--[[// 
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Installation d'une zone d'obstacles suivant le terrains a une certaine 
]]--[[// distance vers la direction dangereuse
]]
--[[//
]]
--[[// Principalement utilise dans les missions defensives comme :
]]
--[[//			- MIS_Pion_INF_Defendre()
]]
--[[//			- MIS_Pion_INF_Interdire()
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Obj_Pion_VAB_InstallerPlanObstacle"
{
    activations =
    {
        { "ACT_Obj_Pion_INF_RealiserBouchonMines", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locMine = self.params[1]
    end,

    activate = function( self )
                self.eAction = self.eAction or eActionEnCours
        self.locPtMine = self.locPtMine or nil
        self.ptMission = self.ptMission or nil
        if( ModuleBegins() ) then
            do
                if( ( self._namedParams.locMine == 0 or self._namedParams.locMine == nil ) ) then
                    self.params.__returnValue = eActionImpossible
                    Halt()
                end

                DEC_Trace( "  installation plan d'obstacle" )
                self.ptMission = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self._namedParams.locMine )
                if( ( self.ptMission == 0 or self.ptMission == nil ) ) then
                    self.params.__returnValue = eActionImpossible
                    Halt()
                end

                self.locPtMine = S_Geometrie_INF_ChercherPositionObstacle( self.ptMission, eTypeObjectBouchonMines, S_DistanceInstallationObstacle() )
                if( ( self.locPtMine == 0 or self.locPtMine == nil ) ) then
--[[// Pour le moment, on fait un bouchon de mines
]]                    self.params.__returnValue = eActionEffectuee
                    Halt()
                end

            end
        end

        if( self.eAction ~= eActionEnCours ) then
            self.params.__returnValue = self.eAction
            Halt()
        end

        Activate( self.activations.ACT_Obj_Pion_INF_RealiserBouchonMines, 1, setmetatable( { self.locPtMine, 10, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
--[[// ============================================================================
]]--[[// BEH_Obj_Pion_VAB_InstallerCheckPoint
]]--[[// ============================================================================
]]    end,

    destroy = function( self )
            end,

}

node "BEH_Obj_Pion_VAB_InstallerCheckPoint"
{
    activations =
    {
        { "ACT_Obj_Pion_INF_RealiserObjet", {} },
        { "ACT_Obj_Pion_AnimerSite", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptCheckPoint = self.params[1]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eInstallerDispositif
        self.locPtCheckPoint = self.locPtCheckPoint or nil
        self.ksPosteControle = self.ksPosteControle or 0
        if( ModuleBegins() ) then
            do
                DEC_Trace( "  installation plan d'obstacle" )
                self.locPtCheckPoint = S_Geometrie_INF_ChercherPositionObstacle( self._namedParams.ptCheckPoint, eTypeObjectPosteControle, 100 )
                if( ( self.locPtCheckPoint == 0 or self.locPtCheckPoint == nil ) ) then
                    self.locPtCheckPoint = DEC_Geometrie_ConvertirPointEnLocalisation( self._namedParams.ptCheckPoint )
                end

            end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
        end

        switch_1 = self.ePhase
            if switch_1 == eInstallerDispositif then
                --[[// Cree un poste de controle				
]]if( self.eAction == eActionEffectuee ) then
                    do
                        self.ksPosteControle = S_Obj_ObtenirObjetProcheDe( self.locPtCheckPoint, eTypeObjectPosteControle, 500 )
                        self.ePhase = eAnimer
                                                return

                    end
--[[// Si on arrive a retrouver la connaissance de l'objet construit, 
]]--[[// on active le poste
]]                end

                Activate( self.activations.ACT_Obj_Pion_INF_RealiserObjet, 1, setmetatable( { eTypeObjectPosteControle, self.locPtCheckPoint, 0, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                
            elseif switch_1 == eAnimer then
                if( DEC_ConnaissanceObjet_EstValide( self.ksPosteControle ) ) then
                    --[[// ============================================================================
]]Activate( self.activations.ACT_Obj_Pion_AnimerSite, 1, { self.ksPosteControle, } )
                end

                --[[// BEH_Obj_Pion_VAB_NettoyerObstacle
]]
            --[[//
]]--[[// Nettoie un obstacle construit proche de la position actuelle
]]            end
--[[// ============================================================================
]]
    end,

--[[// Recherche l'obstacle
]]}

node "BEH_Obj_Pion_VAB_NettoyerObstacle"
{
    activations =
    {
        { "ACT_Obj_Pion_INF_Detruire", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// Pas d'objet trouve
]]self.eAction = self.eAction or eActionEnCours
        self.repObj = self.repObj or 0
        if( ModuleBegins() ) then
            do
                --[[// le detruit
]]self.repObj = DEC_Connaissances_ObjetLePlusProche( S_TypeObject_ToString( eTypeObjectBouchonMines ) )
                if( ( self.repObj == 0 or self.repObj == nil ) ) then
                    self.params.__returnValue = eActionEffectuee
                    Halt()
                end

            end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt()

                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt()

                end

            end
        end

        Activate( self.activations.ACT_Obj_Pion_INF_Detruire, 1, setmetatable( { self.repObj, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_InstallerCheckPoint, "ACT_Obj_Pion_INF_RealiserObjet", nodes.ACT_Obj_Pion_INF_RealiserObjet }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_InstallerCheckPoint, "ACT_Obj_Pion_AnimerSite", nodes.ACT_Obj_Pion_AnimerSite }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_InstallerPlanObstacle, "ACT_Obj_Pion_INF_RealiserBouchonMines", nodes.ACT_Obj_Pion_INF_RealiserBouchonMines }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_NettoyerObstacle, "ACT_Obj_Pion_INF_Detruire", nodes.ACT_Obj_Pion_INF_Detruire }

includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/ge40/missions/defensives/freiner/Freiner - CDT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_ABC_GTIA_Freiner
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_ABC_GTIA_Freiner"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ABC_GTIA_Freiner" }, "MIS_Automate_CDT_ABC_GTIA_Freiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ABC_GTIA_Freiner, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AnalyserSituationPourMissionRetrograde", { "done_ACT_GTIA_AnalyserSituationPourMissionRetrograde" } },
        { "BEH_GTIA_OrganiserLesMoyensPourFreiner", { "done_BEH_GTIA_OrganiserLesMoyensPourFreiner" } },
        { "BEH_GTIA_RendreCompte", { "done_BEH_GTIA_RendreCompte" } },
        { "BEH_GTIA_EchelonnerDispositif", { "done_BEH_GTIA_EchelonnerDispositif" } },
        { "BEH_GTIA_RepartirDansFuseaux", { "done_BEH_GTIA_RepartirDansFuseaux" } },
        { "BEH_GTIA_AssignerLesOrdresPourFreiner", { "done_BEH_GTIA_AssignerLesOrdresPourFreiner" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.objectifsPrioritaires = self.objectifsPrioritaires or {}--[[// Vide dans cette mission
]]
        Activate( self.activations.ACT_GTIA_AnalyserSituationPourMissionRetrograde, 1, emptyTable )--[[// Analyse environnement
]]
        --[[// Init
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                                do
                    g_bPhaseReceuil = false
                    local listePionsSubordonnes = DEC_Automate_AutomatesSubordonnes()
                    for _,x in pairs( listePionsSubordonnes or emptyTable ) do
                    local _continue = true
                        do
                            local automat = x
                            F_Automat_SeteEtatEchelon( automat, eEtatEchelon_None )
                            F_Automat_SeteEtatPhaseMission( automat, eEtatPhaseMission_None )
                        end

                    end

                end

                                do return end

            end
--[[/* **************TEST *******************/]]        end

        if( not self._namedParams.mission.sansRearticulation_ ) then
            --[[//// tres moche priorite
]]Activate( self.activations.BEH_GTIA_OrganiserLesMoyensPourFreiner, 10, emptyTable )
        end

        Activate( self.activations.BEH_GTIA_RendreCompte, 1, emptyTable )--[[// CR
]]
        Activate( self.activations.BEH_GTIA_EchelonnerDispositif, 1, emptyTable )--[[// Dispositif
]]
        --[[// pas d'objectifs
]]Activate( self.activations.BEH_GTIA_RepartirDansFuseaux, 1, { self.objectifsPrioritaires, } )
        --[[// Missions
]]Activate( self.activations.BEH_GTIA_AssignerLesOrdresPourFreiner, 1, { self._namedParams.mission.travaux_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_OrganiserLesMoyensPourFreiner
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_OrganiserLesMoyensPourFreiner"
{
    feedbacks = { { { "done_BEH_GTIA_OrganiserLesMoyensPourFreiner" }, "BEH_GTIA_OrganiserLesMoyensPourFreiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_OrganiserLesMoyensPourFreiner, {value} ) end,
    activations =
    {
        { "BEH_GTIA_OrganiserMoyensVersPionsOp", { "done_BEH_GTIA_OrganiserMoyensVersPionsOp" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local listePionsMeleeDetruits = S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_AutomateNonOperationnels( S_Cherche_GE_Filtre_TypeAutomate_Melee( DEC_Automate_AutomatesSubordonnes() ) ) )
        --[[// temp proto mia
]]Activate( self.activations.BEH_GTIA_OrganiserMoyensVersPionsOp, 1, { listePionsMeleeDetruits, } )
    end,

--[[// *****************************************************************************
]]--[[// ACT_GTIA_AnalyserSituationPourMissionRetrograde
]]--[[//
]]--[[// Commentaires: Attention calcule délais sur le PE seulement!!!
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_GTIA_AnalyserSituationPourMissionRetrograde"
{
    feedbacks = { { { "done_ACT_GTIA_AnalyserSituationPourMissionRetrograde" }, "ACT_GTIA_AnalyserSituationPourMissionRetrograde" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_GTIA_AnalyserSituationPourMissionRetrograde, {value} ) end,
    create = function( self )
    end,

    select = function( self )
        --[[// cast
]]self.mission = self.mission or DEC_GetMission( myself )
        g_rRapEniDebarques = DEC_Rens_PourcentageEnnemisDebarquesDansFuseau( DEC_Fuseau() )
        g_rRapEniEmbarques = DEC_Rens_PourcentageEnnemisEmbarquesDansFuseau( DEC_Fuseau() )
        g_rRapTerrainComp = DEC_Geometrie_PourcentageTerrainCompartimente( DEC_Fuseau() )
        g_rRapTerrainOuvert = DEC_Geometrie_PourcentageTerrainOuvert( DEC_Fuseau() )
        g_rEstimationRetard = DEC_Geometrie_CalculerRetard( DEC_Fuseau(), S_Cherche_GE_Filtre_TypeAutomate_Melee( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Premier ) ), DEC_ProchaineLimaHoraireNonFlagee() )
        if( self.mission.delaisCourts_ ) then
            g_rEstimationDelais = 1
        else
            g_rEstimationDelais = 0
        end

    end,

}

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerLesOrdres
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_GTIA_AssignerLesOrdresPourFreiner"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerLesOrdresPourFreiner" }, "BEH_GTIA_AssignerLesOrdresPourFreiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerLesOrdresPourFreiner, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerLesMissionsRetrogrades", { "done_BEH_GTIA_AssignerLesMissionsRetrogrades" } },
        { "BEH_GTIA_AssurerLaCoordinationRetrograde", { "done_BEH_GTIA_AssurerLaCoordinationRetrograde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.travaux = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_GTIA_AssignerLesMissionsRetrogrades, 1, { self._namedParams.travaux, } )
        Activate( self.activations.BEH_GTIA_AssurerLaCoordinationRetrograde, 1, emptyTable )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerLesMissionsRetrogrades
]]--[[// 
]]--[[// Commentaires: deux patterns implémentés, règle(s) de décision permettant dechoisir
]]--[[//              entre les deux (presence de LR?)
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerLesMissionsRetrogrades"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerLesMissionsRetrogrades" }, "BEH_GTIA_AssignerLesMissionsRetrogrades" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerLesMissionsRetrogrades, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionsRetrogradesEcl", { "done_BEH_GTIA_AssignerMissionsRetrogradesEcl" } },
        { "BEH_GTIA_AssignerMissionsRetrogradesPE", { "done_BEH_GTIA_AssignerMissionsRetrogradesPE" } },
        { "BEH_GTIA_AssignerMissionsRetrogradesSE", { "done_BEH_GTIA_AssignerMissionsRetrogradesSE" } },
        { "BEH_GTIA_AssignerMissionsRetrogradesSEAppui", { "done_BEH_GTIA_AssignerMissionsRetrogradesSEAppui" } },
        { "BEH_GTIA_AssignerMissionRetrogradePC", { "done_BEH_GTIA_AssignerMissionRetrogradePC" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.travaux = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_GTIA_AssignerMissionsRetrogradesEcl, 1, { S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Eclairage ), } )
        Activate( self.activations.BEH_GTIA_AssignerMissionsRetrogradesPE, 1, { S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Premier ), } )
        Activate( self.activations.BEH_GTIA_AssignerMissionsRetrogradesSE, 1, { S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ), } )
        Activate( self.activations.BEH_GTIA_AssignerMissionsRetrogradesSEAppui, 1, { S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ), self._namedParams.travaux, } )
        Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradePC, 1, { DEC_Automate_PionPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsRetrogradesEcl
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsRetrogradesEcl"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsRetrogradesEcl" }, "BEH_GTIA_AssignerMissionsRetrogradesEcl" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsRetrogradesEcl, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionRetrogradeMelee", { "done_BEH_GTIA_AssignerMissionRetrogradeMelee" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pion in pairs( self._namedParams.listePion or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeMelee, 1, { pion, "T_Mission_Automate_ABC_Jalonner", } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsRetrogradesPE
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsRetrogradesPE"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsRetrogradesPE" }, "BEH_GTIA_AssignerMissionsRetrogradesPE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsRetrogradesPE, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionRetrogradeMelee", { "done_BEH_GTIA_AssignerMissionRetrogradeMelee" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pion in pairs( --[[// Assignation missions ABC
]]S_Cherche_GE_Filtre_TypeAutomate_ABC( self._namedParams.listePions ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeMelee, 1, { pion, "T_Mission_Automate_ABC_Freiner", } )

        end

        for _,pion in pairs( --[[// Assignation missions INF  
]]S_Cherche_GE_Filtre_TypeAutomate_INF( self._namedParams.listePions ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeMelee, 1, { pion, "T_Mission_Automate_INF_Freiner", } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsRetrogradesSE
]]--[[//  
]]--[[// Commentaires: Le SE freine puis est receuilli par le PE qui, apres son coup 
]]--[[// arret va receuillir sur la LR
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsRetrogradesSE"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsRetrogradesSE" }, "BEH_GTIA_AssignerMissionsRetrogradesSE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsRetrogradesSE, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionRetrogradeMelee", { "done_BEH_GTIA_AssignerMissionRetrogradeMelee" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pion in pairs( --[[// Assignation missions ABC
]]S_Cherche_GE_Filtre_TypeAutomate_ABC( self._namedParams.listePion ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeMelee, 1, { pion, "T_Mission_Automate_ABC_Freiner", } )

        end

        for _,pion in pairs( --[[// Assignation missions INF
]]S_Cherche_GE_Filtre_TypeAutomate_INF( self._namedParams.listePion ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeMelee, 1, { pion, "T_Mission_Automate_INF_Freiner", } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionRetrogradeMelee
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionRetrogradeMelee"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionRetrogradeMelee" }, "BEH_GTIA_AssignerMissionRetrogradeMelee" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionRetrogradeMelee, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionRetrograde", { "done_ACT_GTIA_AssignerMissionRetrograde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.mission = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_GTIA_AssignerMissionRetrograde, 1, { self._namedParams.pion, F_Automat_Getfuseau( self._namedParams.pion ), self._namedParams.mission, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsRetrogradesSEAppui
]]--[[// 
]]--[[// Commentaires: ici décider de tel ou tel mission en fonction du terrain, 
]]--[[//               des objectifs etc.
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsRetrogradesSEAppui"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsRetrogradesSEAppui" }, "BEH_GTIA_AssignerMissionsRetrogradesSEAppui" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsRetrogradesSEAppui, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionRetrogradeLogA", { "done_BEH_GTIA_AssignerMissionRetrogradeLogA" } },
        { "BEH_GTIA_AssignerMissionRetrogradeGenieA", { "done_BEH_GTIA_AssignerMissionRetrogradeGenieA" } },
        { "BEH_GTIA_AssignerMissionRetrogradeART", { "done_BEH_GTIA_AssignerMissionRetrogradeART" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePion = self.params[1]
        self._namedParams.travaux = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pion in pairs( --[[// Assignation missions TC2
]]S_Cherche_GE_Filtre_TypeAutomate_Log( self._namedParams.listePion ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeLogA, 1, { pion, } )

        end

        for _,pion in pairs( --[[// Assignation missions Genie // Spé Freiner 
]]S_Cherche_GE_Filtre_TypeAutomate_Genie( self._namedParams.listePion ) or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeGenieA, 1, { pion, self._namedParams.travaux, } )

        end

        for _,pion in pairs( --[[// Assignation missions ART
]]S_Cherche_GE_Filtre_TypeAutomate_ART( self._namedParams.listePion ) or emptyTable ) do
        local _continue = true
            --[[// idem attaquer
]]Activate( self.activations.BEH_GTIA_AssignerMissionRetrogradeART, 1, { pion, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionRetrogradeART
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionRetrogradeART"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionRetrogradeART" }, "BEH_GTIA_AssignerMissionRetrogradeART" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionRetrogradeART, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionAcquerirObjectifA", { "done_ACT_GTIA_AssignerMissionAcquerirObjectifA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionDLO = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// TEMP hack
]]self.listeLoc = self.listeLoc or DEC_Geometrie_DecoupeFuseauEnTroncons( 50000 )
        local listePions = S_Cherche_GE_AutomateOperationnels( S_Cherche_GE_Filtre_TypeAutomate_Melee( DEC_Automate_AutomatesSubordonnes() ) )
        Activate( self.activations.ACT_GTIA_AssignerMissionAcquerirObjectifA, 1, { self._namedParams.pionDLO, listePions, self.listeLoc, DEC_Fuseau(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionRetrogradeLogA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionRetrogradeLogA"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionRetrogradeLogA" }, "BEH_GTIA_AssignerMissionRetrogradeLogA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionRetrogradeLogA, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionDeployerTC2", { "done_ACT_GTIA_AssignerMissionDeployerTC2" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionLog = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.positionDeploiement = self.positionDeploiement or DEC_Geometrie_PositionAleatoireSurCercle( DEC_Geometrie_CalculerPointArrivee(), 500 )
        Activate( self.activations.ACT_GTIA_AssignerMissionDeployerTC2, 1, { self._namedParams.pionLog, F_Automat_Getfuseau( self._namedParams.pionLog ), self.positionDeploiement, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionRetrogradePC
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionRetrogradePC"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionRetrogradePC" }, "BEH_GTIA_AssignerMissionRetrogradePC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionRetrogradePC, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_AssignerFaireMouvementA", { "done_ACT_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionPC = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.dest = self.dest or DEC_Geometrie_CalculerPointArrivee()
        Activate( self.activations.ACT_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, self._namedParams.pionPC, self.dest, eEtatEchelon_Second, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionRetrogradeGenieA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionRetrogradeGenieA"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionRetrogradeGenieA" }, "BEH_GTIA_AssignerMissionRetrogradeGenieA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionRetrogradeGenieA, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionRealiserTravauxA", { "done_ACT_GTIA_AssignerMissionRealiserTravauxA" } },
        { "ACT_GTIA_AssignerMissionRetrograde", { "done_ACT_GTIA_AssignerMissionRetrograde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionGen = self.params[1]
        self._namedParams.travaux = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// On a des travaux à faire
]]if( not DIA_IsListEmpty( self._namedParams.travaux ) ) then
            Activate( self.activations.ACT_GTIA_AssignerMissionRealiserTravauxA, 1, { self._namedParams.pionGen, F_Automat_Getfuseau( self._namedParams.pionGen ), self._namedParams.travaux, } )
        else
            Activate( self.activations.ACT_GTIA_AssignerMissionRetrograde, 1, { self._namedParams.pionGen, F_Automat_Getfuseau( self._namedParams.pionGen ), "T_Mission_Automate_FaireMouvement", } )
        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_GTIA_AssignerMissionRetrograde
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_GTIA_AssignerMissionRetrograde"
{
    feedbacks = { { { "done_ACT_GTIA_AssignerMissionRetrograde" }, "ACT_GTIA_AssignerMissionRetrograde" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_GTIA_AssignerMissionRetrograde, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.fuseau = self.params[2]
        self._namedParams.typeMission = self.params[3]
    end,

    select = function( self )
        if( DIA_GetLocalFakeActuator( "ACT_GTIA_AssignerMissionRetrograde", self._namedParams.pion ) < GetActivity() ) then
            do
                DIA_SetLocalFakeActuator( "ACT_GTIA_AssignerMissionRetrograde", self._namedParams.pion, GetActivity() )
                self.bMissionAssignee = self.bMissionAssignee or false
                --[[// fuseau pas encore assigné
]]if( self._namedParams.fuseau == nil or self.bMissionAssignee ) then
                    do return end
                end

                --[[// Assignation de la mission
]]self.bMissionAssignee = true
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.typeMission
                    local cases_switch_1 = {}
                        if switch_1 == "T_Mission_Automate_FaireMouvement" then
                            local dest = DEC_Geometrie_CalculerPointArrivee()
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            DEC_Copie_PointDansListePoints_Mission( dest, missionPion, "itineraire_" )
                            DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                            DEC_DonnerMissionAutomate_Mission( missionPion )
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == "T_Mission_Automate_ABC_Freiner" then
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                            DEC_DonnerMissionAutomate_Mission( missionPion )
                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == "T_Mission_Automate_ABC_Jalonner" then
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                            DEC_DonnerMissionAutomate_Mission( missionPion )
                            _continue = false
                                                cases_switch_1[3] = true
elseif switch_1 == "T_Mission_Automate_INF_Freiner" then
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                            DEC_DonnerMissionAutomate_Mission( missionPion )
                            _continue = false
                                                cases_switch_1[4] = true
                        end
                    end

            end
        end

    end,

}

--[[// *****************************************************************************
]]--[[// ACT_GTIA_AssignerMissionRealiserTravauxA
]]--[[// 
]]--[[// Commentaires: spé Génie dans mission retrograde, pas de compet
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_GTIA_AssignerMissionRealiserTravauxA"
{
    feedbacks = { { { "done_ACT_GTIA_AssignerMissionRealiserTravauxA" }, "ACT_GTIA_AssignerMissionRealiserTravauxA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_GTIA_AssignerMissionRealiserTravauxA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pionGenie = self.params[1]
        self._namedParams.fuseau = self.params[2]
        self._namedParams.travaux = self.params[3]
    end,

    select = function( self )
        self.bMissionAssignee = self.bMissionAssignee or false
        if( self._namedParams.fuseau == nil or self.bMissionAssignee ) then
            do return end
        end

        self.bMissionAssignee = true
        local missionPion = DEC_CreerMissionAutomate( self._namedParams.pionGenie, "T_Mission_Automate_GEN_RealiserTravaux" )
        DEC_AssignMissionParameter( missionPion, "travaux_", self._namedParams.travaux )
        DEC_AssignMissionParameter( missionPion, "zoneRegroupement_", DEC_Geometrie_ConvertirPointEnLocalisation( DEC_Geometrie_CalculerPointArrivee() ) )
        DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
        DEC_DonnerMissionAutomate_Mission( missionPion )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ABC_GTIA_Freiner = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsRetrogrades, "BEH_GTIA_AssignerMissionsRetrogradesEcl", nodes.BEH_GTIA_AssignerMissionsRetrogradesEcl }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsRetrogrades, "BEH_GTIA_AssignerMissionsRetrogradesPE", nodes.BEH_GTIA_AssignerMissionsRetrogradesPE }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsRetrogrades, "BEH_GTIA_AssignerMissionsRetrogradesSE", nodes.BEH_GTIA_AssignerMissionsRetrogradesSE }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsRetrogrades, "BEH_GTIA_AssignerMissionsRetrogradesSEAppui", nodes.BEH_GTIA_AssignerMissionsRetrogradesSEAppui }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsRetrogrades, "BEH_GTIA_AssignerMissionRetrogradePC", nodes.BEH_GTIA_AssignerMissionRetrogradePC }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourFreiner, "BEH_GTIA_AssignerLesMissionsRetrogrades", nodes.BEH_GTIA_AssignerLesMissionsRetrogrades }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourFreiner, "BEH_GTIA_AssurerLaCoordinationRetrograde", nodes.BEH_GTIA_AssurerLaCoordinationRetrograde }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradeART, "ACT_GTIA_AssignerMissionAcquerirObjectifA", nodes.ACT_GTIA_AssignerMissionAcquerirObjectifA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradeGenieA, "ACT_GTIA_AssignerMissionRealiserTravauxA", nodes.ACT_GTIA_AssignerMissionRealiserTravauxA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradeGenieA, "ACT_GTIA_AssignerMissionRetrograde", nodes.ACT_GTIA_AssignerMissionRetrograde }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradeLogA, "ACT_GTIA_AssignerMissionDeployerTC2", nodes.ACT_GTIA_AssignerMissionDeployerTC2 }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradeMelee, "ACT_GTIA_AssignerMissionRetrograde", nodes.ACT_GTIA_AssignerMissionRetrograde }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionRetrogradePC, "ACT_Mission_Automate_AssignerFaireMouvementA", nodes.ACT_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesEcl, "BEH_GTIA_AssignerMissionRetrogradeMelee", nodes.BEH_GTIA_AssignerMissionRetrogradeMelee }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesPE, "BEH_GTIA_AssignerMissionRetrogradeMelee", nodes.BEH_GTIA_AssignerMissionRetrogradeMelee }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesSE, "BEH_GTIA_AssignerMissionRetrogradeMelee", nodes.BEH_GTIA_AssignerMissionRetrogradeMelee }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesSEAppui, "BEH_GTIA_AssignerMissionRetrogradeLogA", nodes.BEH_GTIA_AssignerMissionRetrogradeLogA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesSEAppui, "BEH_GTIA_AssignerMissionRetrogradeGenieA", nodes.BEH_GTIA_AssignerMissionRetrogradeGenieA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsRetrogradesSEAppui, "BEH_GTIA_AssignerMissionRetrogradeART", nodes.BEH_GTIA_AssignerMissionRetrogradeART }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_OrganiserLesMoyensPourFreiner, "BEH_GTIA_OrganiserMoyensVersPionsOp", nodes.BEH_GTIA_OrganiserMoyensVersPionsOp }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "ACT_GTIA_AnalyserSituationPourMissionRetrograde", nodes.ACT_GTIA_AnalyserSituationPourMissionRetrograde }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "BEH_GTIA_OrganiserLesMoyensPourFreiner", nodes.BEH_GTIA_OrganiserLesMoyensPourFreiner }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "BEH_GTIA_RendreCompte", nodes.BEH_GTIA_RendreCompte }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "BEH_GTIA_EchelonnerDispositif", nodes.BEH_GTIA_EchelonnerDispositif }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "BEH_GTIA_RepartirDansFuseaux", nodes.BEH_GTIA_RepartirDansFuseaux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Freiner, "BEH_GTIA_AssignerLesOrdresPourFreiner", nodes.BEH_GTIA_AssignerLesOrdresPourFreiner }

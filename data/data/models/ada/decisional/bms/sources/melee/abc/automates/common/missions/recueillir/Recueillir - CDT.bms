includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/common/missions/recueillir/Recueillir - CDT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-08-26 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Missions/Recueillir/Recueillir - CDT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 26/08/05 17:57 $
]]--[[// $Revision: 15 $
]]--[[// $Workfile: Recueillir - CDT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_ABC_Recueillir
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Conduite_Automate_ABC_Recueillir"
{
    activations =
    {
        { "BEH_Dispositif_Automate_ABC_GererLesAppuis_", { "onHalt" } },
        { "BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_", { "onHalt" } },
        { "BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl", { "onHalt" } },
        { "BEH_RC_Automate_GererConditionOperationnelle", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Conduite_Automate_ABC_Recueillir" } },

    create = function( self )
    end,

    activate = function( self )
        self.LR = self.LR or DEC_GetLima( eTypeLima_LR )
        Activate( self.activations.BEH_Dispositif_Automate_ABC_GererLesAppuis_, 1, {} )--[[//-----------------------------------------------------------------------------
]]--[[// Coordination
]]--[[//-----------------------------------------------------------------------------
]]--[[//behavior BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_();
]]--[[//-----------------------------------------------------------------------------
]]--[[// Gestion appuis et releve et SE
]]--[[//-----------------------------------------------------------------------------
]]
        Activate( self.activations.BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_, 1, { true, self.LR, } )
        Activate( self.activations.BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl, 1, {} )--[[//-----------------------------------------------------------------------------
]]--[[// Gestion des unites sur la LIA
]]--[[//-----------------------------------------------------------------------------
]]
        --[[//-----------------------------------------------------------------------------
]]--[[// Condition opérationnelle
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_RC_Automate_GererConditionOperationnelle, 1, { eEtatEchelon_Eclairage, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl"
{
    activations =
    {
        { "BEH_Mission_Automate_AssignerDecrocherA", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl" } },

    create = function( self )
    end,

    activate = ActivateWithStart,

    internalactivate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.pointArrivee = self.pointArrivee or S_Geometrie_BarycentreZone( self.mission.zoneRegroupement_ )
        if( S_Dispositif_Automate_ABC_EstPEclEnDanger() ) then
            do
                --[[// Donner décrocher des que problème
]]local listePionsEclairant = S_ObtenirPionsDe( eEtatEchelon_Eclairage, eEtatDestruction_None )
                for _,pion in pairs( listePionsEclairant ) do
                local _continue = true
                    do
                        local pionDEC = pion
                        StartInstance( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, pion, self.pointArrivee, F_Pion_GeteEtatEchelon( pionDEC ), } )
                    end
--[[// Cas particulier pour le PC EI // MIA faire un truc plus propre
]]
                end

                if( myself:GetType() == "Peloton_EEI" ) then
                    StartInstance( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_CDT, DEC_Automate_PionPC(), self.pointArrivee, eEtatEchelon_Second, } )
                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ABC_Recueillir, "BEH_Dispositif_Automate_ABC_GererLesAppuis_", nodes.BEH_Dispositif_Automate_ABC_GererLesAppuis_ }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ABC_Recueillir, "BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_", nodes.BEH_Dispositif_Automate_ABC_GererLeDispositifStatiqueSurLima_ }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ABC_Recueillir, "BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl", nodes.BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ABC_Recueillir, "BEH_RC_Automate_GererConditionOperationnelle", nodes.BEH_RC_Automate_GererConditionOperationnelle }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_ABC_Recueillir_FaireDecrocherLePEcl, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }

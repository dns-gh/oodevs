includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/ge40/missions/fairemouvement/FaireMouvement - CDT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_ABC_GTIA_FaireMouvement
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_ABC_GTIA_FaireMouvement"
{
    feedbacks = { { { "done_MIS_Automate_CDT_ABC_GTIA_FaireMouvement" }, "MIS_Automate_CDT_ABC_GTIA_FaireMouvement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_ABC_GTIA_FaireMouvement, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerLesOrdresPourFaireMouvement", { "done_BEH_GTIA_AssignerLesOrdresPourFaireMouvement" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        --[[// Init
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                                do
                    g_bPhaseReceuil = false
                    local listePionsSubordonnes = DEC_Automate_AutomatesSubordonnes()
                    for _,x in pairs( listePionsSubordonnes or {} ) do
                    local _continue = true
                        do
                            local automat = x
                            F_Automat_SeteEtatEchelon( automat, eEtatEchelon_None )
                            F_Automat_SeteEtatPhaseMission( automat, eEtatPhaseMission_None )
                        end

                    end

                end

                                do return end

            end
        end

        Activate( self.activations.BEH_GTIA_AssignerLesOrdresPourFaireMouvement, 1, { self._namedParams.mission.zoneArrivee_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerLesOrdresPourFaireMouvement
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerLesOrdresPourFaireMouvement"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerLesOrdresPourFaireMouvement" }, "BEH_GTIA_AssignerLesOrdresPourFaireMouvement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerLesOrdresPourFaireMouvement, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionFaireMouvementA", { "done_ACT_GTIA_AssignerMissionFaireMouvementA" } },
        { "BEH_GTIA_AssignerMissionsFaireMouvementPC", { "done_BEH_GTIA_AssignerMissionsFaireMouvementPC" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zoneArrivee = self.params[1]
    end,

    activate = function( self )
        for _,pion in pairs( DEC_Automate_AutomatesSubordonnes() or {} ) do
        local _continue = true
            Activate( self.activations.ACT_GTIA_AssignerMissionFaireMouvementA, 1, { pion, self._namedParams.zoneArrivee, } )

        end

        Activate( self.activations.BEH_GTIA_AssignerMissionsFaireMouvementPC, 1, { DEC_Automate_PionPC(), self._namedParams.zoneArrivee, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsFaireMouvementPC
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsFaireMouvementPC"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsFaireMouvementPC" }, "BEH_GTIA_AssignerMissionsFaireMouvementPC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsFaireMouvementPC, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_AssignerFaireMouvementA", { "done_ACT_Mission_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.zoneArrivee = self.params[2]
    end,

    activate = function( self )
        self.dest = self.dest or DEC_Geometrie_CalculerBarycentreLocalisation( self._namedParams.zoneArrivee )
        Activate( self.activations.ACT_Mission_Automate_AssignerFaireMouvementA, 1, { ePhase_CDT, self._namedParams.pion, self.dest, eEtatEchelon_Premier, } )
    end,

--[[// *****************************************************************************
]]--[[// ACT_GTIA_AssignerMissionFaireMouvementA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_GTIA_AssignerMissionFaireMouvementA"
{
    feedbacks = { { { "done_ACT_GTIA_AssignerMissionFaireMouvementA" }, "ACT_GTIA_AssignerMissionFaireMouvementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_GTIA_AssignerMissionFaireMouvementA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.zoneArrivee = self.params[2]
    end,

    select = function( self )
        if( not ModuleBegins() ) then
            do return end
        end

        local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, "T_Mission_Automate_FaireMouvement" )
        local dest = DEC_Geometrie_CalculerBarycentreLocalisation( self._namedParams.zoneArrivee )
        dest = DEC_Geometrie_PositionAleatoireDansCercle( dest, 500 )
        DEC_Copie_PointDansListePoints_Mission( dest, missionPion, "itineraire_" )
        DEC_AssignerFuseauAMissionAutomate_Mission( DEC_Fuseau(), missionPion )
        DEC_DonnerMissionAutomate_Mission( missionPion )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ABC_GTIA_FaireMouvement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourFaireMouvement, "ACT_GTIA_AssignerMissionFaireMouvementA", nodes.ACT_GTIA_AssignerMissionFaireMouvementA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourFaireMouvement, "BEH_GTIA_AssignerMissionsFaireMouvementPC", nodes.BEH_GTIA_AssignerMissionsFaireMouvementPC }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsFaireMouvementPC, "ACT_Mission_Automate_AssignerFaireMouvementA", nodes.ACT_Mission_Automate_AssignerFaireMouvementA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_FaireMouvement, "BEH_GTIA_AssignerLesOrdresPourFaireMouvement", nodes.BEH_GTIA_AssignerLesOrdresPourFaireMouvement }

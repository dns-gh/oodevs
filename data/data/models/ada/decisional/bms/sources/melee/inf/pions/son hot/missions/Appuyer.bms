includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son hot/missions/Appuyer.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Hot/Missions/Appuyer.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:25 $
]]--[[// $Revision: 23 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//=============================================================================
]]--[[// Details :
]]--[[//		Définition : apporter une aide à une autre unité, spontanément ou sur 
]]--[[//		ordre par le mouvement ou par le feu. 
]]--[[//
]]--[[//		Principes : Il s’agit, dans le cadre de la manoeuvre de la compagnie 
]]--[[//		et à partir d’une position choisie, d’apporter, sur ordre ou de façon 
]]--[[//		spontanée, une aide aux éléments amis par des feux appliqués sur des
]]--[[//		objectifs repérés.
]]--[[//=============================================================================
]]node "MIS_Pion_INF_Appuyer"
{
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", {} },
        { "BEH_MAJ_AgressiviteMission", {} },
        { "BEH_MOT_DesactiveSauvegarde", {} },
        { "BEH_Ordre_Inopine", {} },
        { "BEH_Delai_Pion_INF_PreparerMission", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Manoeuvre_Pion_HOT_Appuyer", {} },
        { "BEH_Poste_Pion_INF_TomberEnGarde", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.repAmi = self.repAmi or self._namedParams.mission.uniteAAppuyer_
        --[[// initalisation de la mission
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                if( ( self.repAmi == 0 or self.repAmi == nil ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossible )
                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "Mission 'Appuyer ( " .. DEC_GetSzName( self.repAmi ) .. " )' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Appui, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_APPUYER(), } )
        Activate( self.activations.BEH_MOT_DesactiveSauvegarde, 1, {} )--[[// ajout ADA mia
]]
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                        do
                            Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { M_TEMPS_PREPARATION_APPUYER(), } )
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eAppuyer
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eAppuyer then
                    Activate( self.activations.BEH_Manoeuvre_Pion_HOT_Appuyer, 1, setmetatable( { self.repAmi, "spontanee", }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission" )
                                                                do
                                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                                        DEC_RC( eRC_FinMission )
                                    else
                                        DEC_Message( eRC_FinMission )
                                    end

                                end

                                DEC_FinMission()
                                                                self.params.__returnValue = eActionEffectuee
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, setmetatable( { false, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_MOT_DesactiveSauvegarde", nodes.BEH_MOT_DesactiveSauvegarde }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Manoeuvre_Pion_HOT_Appuyer", nodes.BEH_Manoeuvre_Pion_HOT_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

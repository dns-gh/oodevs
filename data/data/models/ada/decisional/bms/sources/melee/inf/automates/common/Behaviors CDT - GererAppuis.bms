includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/automates/common/Behaviors CDT - GererAppuis.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors CDT - GererAppuis.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 21/09/05 9:42 $
]]--[[// $Revision: 8 $
]]--[[// $Workfile: Behaviors CDT - GererAppuis.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//-------------------------------------------------------------------------
]]--[[// Gestion des appuis INF
]]--[[//-------------------------------------------------------------------------
]]node "BEH_Conduite_Automate_INF_GererAppuis_INF"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererAppuis_INF" }, "BEH_Conduite_Automate_INF_GererAppuis_INF" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererAppuis_INF, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        local selPions = DEC_Automate_PionsSansPC()
        --[[// Pions recevant les appuis
]]local selPions_PE = S_ObtenirTousPionsDe_SansPC( eEtatEchelon_Premier )
        --[[// Pions qui devrait appuyer
]]--[[// Pions du 2e echelon non detruits
]]local lstPions_SE = S_ObtenirPionsDe_SansPC( eEtatEchelon_Second, eEtatDestruction_None )
        local selPions_SE_INF = S_Cherche_Automate_Filtre_TypePion_INF( lstPions_SE )
        do
        end

        if( #( selPions_PE ) == 0 ) then
            do return end
        end

        for _,x_inf in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Distribution des pions INF
]]--[[//-------------------------------------------------------------------------
]]selPions_SE_INF or {} ) do
        local _continue = true
do
                local pionAppui_INF = x_inf
                --[[// On donne la mission appuyer si le pion n'a pas de mission en cours
]]--[[// ou si le pion a la mission suivre
]]local mission = DEC_GetMission( pionAppui_INF )
                if( ( mission == nil ) or ( mission:GetType() == "T_Mission_Pion_Suivre" ) or ( mission:GetType() == "T_Mission_Pion_INF_Appuyer" ) ) then
                    do
                        local pionPE = S_Cherche_Automate_INF_PionReception_Appui( x_inf, selPions_PE )
                        if( pionPE ~= nil ) then
                            do
                                Activate( self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_CDT, x_inf, pionPE, eEtatEchelon_Second, } )
                                                                do return end

                            end
                        end

                    end
                end

            end

        end

    end,

--[[//-------------------------------------------------------------------------
]]--[[// Gestion des appuis ABC
]]--[[//-------------------------------------------------------------------------
]]}

node "BEH_Conduite_Automate_INF_GererAppuis_ABC"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererAppuis_ABC" }, "BEH_Conduite_Automate_INF_GererAppuis_ABC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererAppuis_ABC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local selPions = DEC_Automate_PionsSansPC()
        --[[// Pions recevant les appuis
]]local selPions_PE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        --[[// Pions qui devrait appuyer
]]local lstPions_SE = S_ObtenirPionsDe_SansPC( eEtatEchelon_Second, eEtatDestruction_None )
        local selPions_SE_ABC = S_Cherche_Automate_Filtre_TypePion_ABC( lstPions_SE )
        do
        end

        if( #( selPions_PE ) == 0 ) then
            do return end
        end

        for _,x_abc in pairs( --[[//-------------------------------------------------------------------------
]]--[[// Distribution des pions ABC
]]--[[//-------------------------------------------------------------------------	
]]selPions_SE_ABC or {} ) do
        local _continue = true
do
                local pionAppui_ABC = x_abc
                --[[// On donne la mission appuyer si le pion n'a pas de mission en cours
]]--[[// ou si le pion a la mission suivre
]]local mission = DEC_GetMission( pionAppui_ABC )
                if( ( mission == nil ) or ( mission:GetType() == "T_Mission_Pion_Suivre" ) or ( mission:GetType() == "T_Mission_Pion_ABC_Soutenir" ) or ( F_Pion_GeteEtatPhaseMission( pionAppui_ABC ) == eEtatPhaseMission_FinMission ) ) then
                    do
                        local pionPE = S_Cherche_Automate_INF_PionReception_Appui( pionAppui_ABC, selPions_PE )
                        if( pionPE ~= nil ) then
                            do
                                Activate( self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_CDT, pionAppui_ABC, pionPE, eEtatEchelon_Second, } )
                                                                do return end

                            end
                        end

                    end
                end

            end

        end

    end,

--[[// ============================================================================
]]--[[// BEH_Conduite_Automate_INF_GererAppuiMortier
]]--[[//		Gestion des appuis mortiers
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_GererAppui_Mortier"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererAppui_Mortier" }, "BEH_Conduite_Automate_INF_GererAppui_Mortier" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererAppui_Mortier, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_INF_GererOrdre_Mortier", { "done_BEH_Conduite_Automate_INF_GererOrdre_Mortier" } },
        { "BEH_Conduite_Automate_INF_GererMission_Mortier", { "done_BEH_Conduite_Automate_INF_GererMission_Mortier" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// DEC_Automate_PionsSansPC();
]]local selPions = S_ObtenirPionsOperationnels()
        local selAppuis_Mortier = S_Cherche_Automate_Filtre_TypePion( selPions, "GroupeInfanterie_Mortier" )
        Activate( self.activations.BEH_Conduite_Automate_INF_GererOrdre_Mortier, 1, { selAppuis_Mortier, } )
        Activate( self.activations.BEH_Conduite_Automate_INF_GererMission_Mortier, 1, { selAppuis_Mortier, } )
    end,

--[[// ============================================================================
]]--[[// BEH_Conduite_Automate_INF_GererAppuiMortier
]]--[[//		Gere les missions des pions mortiers
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_GererMission_Mortier"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererMission_Mortier" }, "BEH_Conduite_Automate_INF_GererMission_Mortier" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererMission_Mortier, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selAppuis_Mortier = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        local selPions_SE = S_ObtenirPionsDe_SansPC( eEtatEchelon_Second, eEtatDestruction_None )
        if( #( selPions_SE ) == 0 ) then
            selPions_SE = S_ObtenirPionsDe_SansPC( eEtatEchelon_Premier, eEtatDestruction_None )
        end

        local selPions_Appuye = S_Cherche_Automate_Filtre_NotTypePion( selPions_SE, "GroupeInfanterie_Mortier" )
        for _,x in pairs( self._namedParams.selAppuis_Mortier or {} ) do
        local _continue = true
do
                local pionAppui_Mortier = x
                local mission = DEC_GetMission( pionAppui_Mortier )
                if( ( mission == nil ) or ( mission:GetType() == "T_Mission_Pion_Suivre" ) or ( mission:GetType() == "T_Mission_Pion_INF_Appuyer" ) ) then
                    do
                        local pion = S_Cherche_Automate_INF_PionReception_Appui( pionAppui_Mortier, selPions_Appuye )
                        if( pion ~= nil ) then
                            do
                                Activate( self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_CDT, pionAppui_Mortier, pion, eEtatEchelon_Second, } )
                                                                do return end

                            end
                        end

                    end
                end

            end

        end

    end,

--[[// ============================================================================
]]--[[// BEH_Conduite_Automate_INF_GererAppuiMortier
]]--[[//		Gestion de demandes de tirs des pions mortiers
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_GererOrdre_Mortier"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererOrdre_Mortier" }, "BEH_Conduite_Automate_INF_GererOrdre_Mortier" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererOrdre_Mortier, {value} ) end,
    activations =
    {
        { "ACT_MOT_Automate_INF_DemandeAppliqerFeux", { "done_ACT_MOT_Automate_INF_DemandeAppliqerFeux" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selAppuis_Mortier = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// --> S'il ya des pions en difficulte en PE, demande de les aider
]]--[[// S_ObtenirTousPionsDe( eEtatEchelon_Premier );
]]local selPions_PE = DEC_Automate_PionsAvecPC()
        local rN_Demande = 0
        for _,x in pairs( selPions_PE or {} ) do
        local _continue = true
do
                local pion = x
                if( F_Pion_GeteEtatDec( pion ) == eEtatDec_Sauvegarde and rN_Demande < #( self._namedParams.selAppuis_Mortier ) ) then
                    do
                        Activate( self.activations.ACT_MOT_Automate_INF_DemandeAppliqerFeux, 1, { DIA_GetAt( self._namedParams.selAppuis_Mortier, rN_Demande ), } )
                                                rN_Demande = rN_Demande + 1
                    end
                end

            end

        end

    end,

--[[// ============================================================================
]]--[[// BEH_Conduite_Automate_INF_GererAppuiMortier
]]--[[//		Gere toute les unites a priori inconnues n'ayant pas de mission
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_GererMission_PC"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_GererMission_PC" }, "BEH_Conduite_Automate_INF_GererMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_GererMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        for _,x in pairs( DEC_Automate_PionsSansPC() or {} ) do
        local _continue = true
do
                local pion = x
                local bInconnue = true
                 do
                    local _continue = true
                    local switch_1 = pion:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Peloton_AMX"
                        or switch_1 == "Peloton_XL" then
                            bInconnue = false
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == "SectionInfanterie"
                        or switch_1 == "SectionInfanterie_MILAN"
                        or switch_1 == "SectionInfanterie_HOT"
                        or switch_1 == "SectionInfanterie_Appui"
                        or switch_1 == "GroupeInfanterie_Mortier" then
                            bInconnue = false
                            _continue = false
                                                cases_switch_1[2] = true
                        end
                    end
--[[// On donne la mission suivre 
]]--[[//		si le pion n'est pas connu
]]--[[//		si le pion n'a pas de mission en cours
]]--[[// 		si le pion a la mission suivre						
]]
                if( bInconnue and DEC_GetMission( pion ) == nil and F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Second ) then
                    do
                        Activate( self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, pion, DEC_Automate_PionPC(), } )
                    end
                end

            end

        end

    end,

--[[// ============================================================================
]]--[[// BEH_Conduite_Automate_INF_GererAppuiMortier
]]--[[//		Gere toute les unites a priori inconnues n'ayant pas de mission
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_Gerer_UniteInconnues"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Gerer_UniteInconnues" }, "BEH_Conduite_Automate_INF_Gerer_UniteInconnues" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Gerer_UniteInconnues, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        for _,x in pairs( DEC_Automate_PionsSansPC() or {} ) do
        local _continue = true
do
                local pion = x
                local bInconnue = true
                 do
                    local _continue = true
                    local switch_1 = pion:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Peloton_AMX"
                        or switch_1 == "Peloton_XL" then
                            bInconnue = false
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == "SectionInfanterie"
                        or switch_1 == "SectionInfanterie_MILAN"
                        or switch_1 == "SectionInfanterie_HOT"
                        or switch_1 == "SectionInfanterie_Appui"
                        or switch_1 == "GroupeInfanterie_Mortier" then
                            bInconnue = false
                            _continue = false
                                                cases_switch_1[2] = true
                        end
                    end
--[[// On donne la mission suivre 
]]--[[//		si le pion n'est pas connu
]]--[[//		si le pion n'a pas de mission en cours
]]--[[// 		si le pion a la mission suivre						
]]
                if( bInconnue and DEC_GetMission( pion ) == nil and F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Second ) then
                    do
                        Activate( self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, pion, DEC_Automate_PionPC(), } )
                    end
                end

            end

        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererAppui_Mortier, "BEH_Conduite_Automate_INF_GererOrdre_Mortier", nodes.BEH_Conduite_Automate_INF_GererOrdre_Mortier }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererAppui_Mortier, "BEH_Conduite_Automate_INF_GererMission_Mortier", nodes.BEH_Conduite_Automate_INF_GererMission_Mortier }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererAppuis_ABC, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererAppuis_INF, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererMission_Mortier, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_GererOrdre_Mortier, "ACT_MOT_Automate_INF_DemandeAppliqerFeux", nodes.ACT_MOT_Automate_INF_DemandeAppliqerFeux }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Gerer_UniteInconnues, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }

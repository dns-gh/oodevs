includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son vab/Behaviors - Feu.bms"] = true

include "bit.lua"


--[[//-----------------------------------------------------------------------------
]]--[[// Tir sur l'ennemi avec les vab si on est hors de porte des fantassins
]]--[[// On ne cherche pas se deplacer, c'est une sorte de riposte
]]--[[//
]]--[[// Remarque : ?   - Est ce que ACT_FaireFeuSur ne ferait pas l'affaire ?
]]--[[//            JCR - Non, car tient compte de l'etat d'embarquement des pions.
]]--[[//                  d'autre part, gere une eventuelle couverture par les 
]]--[[//                  transporteurs
]]--[[//
]]--[[// bool	@bDestructionTactique : On cherche une destruction Tactique de l'ennemi 
]]--[[// 								est pas forcement Physique
]]--[[//
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Feu_Pion_VAB_Detruire_SurEni"
{
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", {} },
        { "BEH_Feu_Pion_INF_TirTactique_Couverture", {} },
        { "BEH_Feu_Pion_INF_TirCouverture_Fixe", {} },
        { "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
                self.eActionDetruire = self.eActionDetruire or eActionEnCours
        self.eActionCouverture = self.eActionCouverture or eActionEnCours
        if( ModuleBegins() ) then
            do
                if( DEC_ConnaissanceAgent_EstMort( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) then
                    self.params.__returnValue = eActionEffectuee
                    Halt()
                end

                DEC_Trace( "Detruire_SurEni : debut" )
            end
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
        if( self.eActionDetruire == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
        end

        if( self.eActionCouverture == eActionImpossible ) then
            do
                                do
                end

                                self.params.__returnValue = eActionImpossible
                Halt()

            end
--[[// L'ennemi est detruit Tactiquement ou Physiquement
]]        end

        if( DEC_ConnaissanceAgent_EstMort( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) then
            do
                DEC_Trace( "DEC_ConnaissanceAgent_EstDetruitTactique" )
                self.eActionDetruire = eActionEffectuee
                self.eActionCouverture = eActionEffectuee
            end
        end

        if( self.eActionDetruire == eActionEffectuee or self.eActionCouverture == eActionEffectuee ) then
            do
                DEC_Trace( "Eni detruit" )
                --[[// Eni detruit, arret les tirs de couverture		
]]DEC_RC( eRC_EnnemiDetruit, self._namedParams.ksEni )
                                self.params.__returnValue = eActionEffectuee
                Halt()

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Si le tir est inefficace, on ne tir pas (uniquement fixer)
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eActionDetruire == eActionEnPause ) then
            do
                self.eActionDetruire = eActionEnCours
                                self.params.__returnValue = eActionEnPause
                return

            end
--[[// tir sur l'ennemi
]]--[[// Si les fantassins sont hors de portee
]]        end

        if( DEC_ConnaissanceAgent_PercoitUnite( self._namedParams.ksEni ) and S_Tir_EstAPortee( self._namedParams.ksEni, GetStateVariable( "VE_Agressivite_Tir" ) / 2 ) and not S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, GetStateVariable( "VE_Agressivite_Tir" ) ) ) then
            do
                --[[// On tir sur l'unite la plus dangereuse hors ennemi principale
]]Activate( self.activations.BEH_Feu_Pion_INF_TirTactique_Couverture, 1, setmetatable( { self._namedParams.ksEni, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionCouverture = v else rawset( t, k, v ) end end } ) )
                --[[// Couverture, si l'ennemi principale se deplace trop
]]Activate( self.activations.BEH_Feu_Pion_INF_TirCouverture_Fixe, 1, { self._namedParams.ksEni, } )
            end
--[[// Si on est a porte des fantassins, on tir	    
]]        end

        Activate( self.activations.BEH_Feu_Pion_INF_ConduireLesFeux_Sur, 1, setmetatable( { self._namedParams.ksEni, eFormationTir_Debarque, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionDetruire = v else rawset( t, k, v ) end end } ) )
    end,

    destroy = function( self )
                DEC_Trace( "Detruire_SurEni : fin" )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_VAB_Detruire_SurEni, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_VAB_Detruire_SurEni, "BEH_Feu_Pion_INF_TirTactique_Couverture", nodes.BEH_Feu_Pion_INF_TirTactique_Couverture }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_VAB_Detruire_SurEni, "BEH_Feu_Pion_INF_TirCouverture_Fixe", nodes.BEH_Feu_Pion_INF_TirCouverture_Fixe }
connections[ #connections + 1 ] = { nodes.BEH_Feu_Pion_VAB_Detruire_SurEni, "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", nodes.BEH_Feu_Pion_INF_ConduireLesFeux_Sur }

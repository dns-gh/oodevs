includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/pions/common/missions/Protect.bms"] = true

include "bit.lua"

--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_ABC_Protect
]]--[[// 
]]--[[// Commentaires: Escorte une seule unité pion
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Pion_ABC_Protect"
{
    feedbacks = { { { "done_BEH_Mission_Pion_ABC_Protect" }, "BEH_Mission_Pion_ABC_Protect" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_ABC_Protect, {value} ) end,
    activations =
    {
        { "ACT_Misc_Pion_ABC_Escorter", { "done_ACT_Misc_Pion_ABC_Escorter" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_MAJ_Pion_ABC_AgressiviteTir", { "done_BEH_MAJ_Pion_ABC_AgressiviteTir" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "BEH_Dep_Suivre", { "done_BEH_Dep_Suivre" } },
        { "BEH_Dep_Progresser", { "done_BEH_Dep_Progresser" } },
        { "BEH_Dep_ReagirFaceAObstacle", { "done_BEH_Dep_ReagirFaceAObstacle" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionAmi = self.params[1]
        self._namedParams.rPH = self.params[2]
        self._namedParams.eNiveauIdentificationEni = self.params[3]
        self.maxStartDistance = 1000 -- to be read from XML file
        self.maxFollowDistance = 300 -- to be read from XML file
        self.minFollowDistance = 50
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        if( ModuleBegins() ) then
            do
                --[[// Escorter (dire à l'unite qu'on l'escorte ]]
                StartActivateOverride( self, self.activations.ACT_Misc_Pion_ABC_Escorter, 1, { self._namedParams.pionAmi, } )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
            end
            local myPosition = DEC_Agent_PositionPtr( myself )
            local protectedUnitPosition = DEC_Agent_PositionPtr( self._namedParams.pionAmi )
            local distance = DEC_Geometrie_Distance( myPosition, protectedUnitPosition )
            -- protected unit must be operational and in range:
            if( F_Pion_GeteEtatDestruction( self._namedParams.pionAmi ) ~= eEtatDestruction_None ) or
              ( distance > self.maxStartDistance ) then
                DEC_Trace( "Protected unit is not operational or out of range" )
                DEC_RC( eRC_MissionImpossible )
                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
        self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            self.ePhaseMission = eFinMission
            self.eEtat = eActionEnCours
            self.eEtatOrdreFinMission = eActionEnCours
--[[//-----------------------------------------------------------------------------
]]--[[// Agressivite
]]--[[//----------------------------------------------------------------------------- ]]
        end

        Activate( self.activations.BEH_MAJ_Pion_ABC_AgressiviteTir, 1, { self._namedParams.rPH, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]
        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        do
            local switch_1 = self.ePhaseMission
            if switch_1 == ePreparerMission then
                --[[// 1) Preparation de la mission ]]
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                Activate( self.activations.ACT_Info_Trace, 1, { "Escort mission beginig", } )
                self.ePhaseMission = eRejoindre
                --[[// Progression tactique ]]
            elseif switch_1 == eRejoindre then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_RejointUnite, } )
                --[[// Aller au plus vite
]]--[[// se dépecher ]]
                Activate( self.activations.ACT_Dep_ModulationVitesse, 1.5, { 1, } )
                --[[// Escvorter l'unite à bonne distance ]]
                if( DEC_Geometrie_Distance( DEC_Agent_Position(), self._namedParams.pionAmi:DEC_Agent_Position() ) < self.maxFollowDistance ) then
                    self.ePhaseMission = eProgresser
                    do return end
                end
--[[//-----------------------------------------------------------------------------
]]--[[// Rejoindre unite
]]--[[//-----------------------------------------------------------------------------      
]]
                Activate( self.activations.BEH_Dep_Suivre, 1, { self._namedParams.pionAmi, self.minFollowDistance, } )
                --[[// Escorte ]]
            elseif switch_1 == eProgresser then
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EscorteUnite, } )
                --[[// Objectif de l'unité escorté                ]]
                if( F_Pion_GetitMvt( self._namedParams.pionAmi ) == nil ) then
                    Activate( self.activations.ACT_Info_Trace, 1, { "Waiting for friendly unit to have a mission", } )
                    do return end
                end
--[[//-----------------------------------------------------------------------------
]]--[[// Reconnaissance sur l'axe 
]]--[[//----------------------------------------------------------------------------- ]]

                if( self.eEtat == eActionEffectuee ) then
                    self.eEtat = eActionEnCours
                    self.ePhaseMission = eFinMission
                    do return end
                end

                Activate( self.activations.BEH_Dep_Progresser, 1, { F_Pion_GetitMvt( self._namedParams.pionAmi ), eProgressionReco, } )
                self.done_BEH_Dep_Progresser = function( self, _, v ) self.eEtat = v[1] end
                    --[[//-----------------------------------------------------------------------------
]]--[[// Obstacle
]]--[[//----------------------------------------------------------------------------- ]]
                Activate( self.activations.BEH_Dep_ReagirFaceAObstacle, 1.1, {} )
                --[[// Fin de la mission ]]
            elseif switch_1 == eFinMission then
                StopActivateOverride( self, self.activations.ACT_Misc_Pion_ABC_Escorter, { self._namedParams.pionAmi, } )
                Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
            end
        end
    end,
}

node "MIS_Pion_ABC_Protect"
{
    feedbacks = { { { "done_MIS_Pion_ABC_Protect" }, "MIS_Pion_ABC_Protect" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ABC_Protect, {value} ) end,
    activations =
    {
        { "BEH_Mission_Pion_ABC_Protect", { "done_BEH_Mission_Pion_ABC_Protect" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtat = self.eEtat or nil
        --[[//-----------------------------------------------------------------------------
]]--[[// Terminaison
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionImpossible ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( self.eEtat == eActionEffectuee ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Comportement de la mission
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_Mission_Pion_ABC_Protect, 1, { self._namedParams.mission.uniteAEscorter_, M_MODELE_PION_ABC_ESCORTER_PH(), M_MODELE_PION_ABC_ESCORTER_ID(), } )
self.done_BEH_Mission_Pion_ABC_Protect = function( self, _, v ) self.eEtat = v[1] end
    end,
}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ABC_Protect = { "mission" }

connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_ABC_Protect, "BEH_Mission_Pion_ABC_Protect", nodes.BEH_Mission_Pion_ABC_Protect }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "ACT_Misc_Pion_ABC_Escorter", nodes.ACT_Misc_Pion_ABC_Escorter }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_MAJ_Pion_ABC_AgressiviteTir", nodes.BEH_MAJ_Pion_ABC_AgressiviteTir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_Dep_Suivre", nodes.BEH_Dep_Suivre }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_Dep_Progresser", nodes.BEH_Dep_Progresser }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_Dep_ReagirFaceAObstacle", nodes.BEH_Dep_ReagirFaceAObstacle }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Protect, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }

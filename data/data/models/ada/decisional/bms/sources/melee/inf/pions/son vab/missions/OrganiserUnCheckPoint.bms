includedFiles = includedFiles or {}
includedFiles["sources/melee/inf/pions/son vab/missions/OrganiserUnCheckPoint.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_INF_OrganiserUnCheckPoint
]]--[[//
]]--[[// Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_INF_OrganiserUnCheckPoint"
{
    activations =
    {
        { "ACT_Maj_Pion_PasserEnTirSurRiposte", {} },
        { "BEH_Misc_Pion_DefinirTypeMission", {} },
        { "BEH_MAJ_AgressiviteMission", {} },
        { "BEH_Ordre_Inopine", {} },
        { "ACT_Ordre_Suppression", {} },
        { "BEH_Mission_Pion_VAB_OrganiserUnCheckPoint", {} },
        { "BEH_Manoeuvre_RompreContact", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Poste_Pion_INF_TomberEnGarde", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eSeMettreEnPlace
        self.eCurrentPhase = self.eCurrentPhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                F_Pion_SeteEtatEchelon( myself, eEtatEchelon_Premier )
                Activate( self.activations.ACT_Maj_Pion_PasserEnTirSurRiposte, 1, {} )
                DEC_Trace( "Mission 'Organiser un check point' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Defensif, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_STATIQUE(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        local sOrdre = DEC_GetCategory( "ordres_recus" )
        for _,repOrder in pairs( sOrdre ) do
        local _continue = true
do
                local repOrdreCond = repOrder
                if( repOrdreCond:GetType() == "Rep_OrderConduite_Decrocher" ) then
                    do
                        DEC_Trace( "Ordre : Decrocher" )
                        self.ePhase = eRompreContact
                        self.eAction = eActionEnCours
                    end
                end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { repOrder, } )
            end

        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eSeMettreEnPlace then
                    if( self.eCurrentPhase == eFinMission ) then
                        do
                            self.ePhase = eFinMission
                                                        return

                        end
                    end

                    Activate( self.activations.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, GetMotivation( "MOT_Mission" ), setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eCurrentPhase = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eRompreContact then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eFinMission
                                                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Manoeuvre_RompreContact, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                --[[//-----------------------------------------------------------------------------
]]--[[// On rend compte de la mission
]]--[[//-----------------------------------------------------------------------------
]]DEC_Trace( "mission MIS_Pion_INF_Defendre: fin" )
                                DEC_FinMission()
                                                                self.params.__returnValue = eActionEffectuee
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, setmetatable( { true, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

}

node "BEH_Mission_Pion_VAB_OrganiserUnCheckPoint"
{
    activations =
    {
        { "BEH_Mot_Pion_Embarquer", {} },
        { "BEH_Dep_Pion_INF_MiseEnPlace_Mission", {} },
        { "ACT_RC", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "BEH_Obj_Pion_VAB_InstallerCheckPoint", {} },
        { "BEH_Dispositif_Pion_VAB_InstallationDefensive", {} },
        { "ACT_Misc_Pion_DelaiInstallation", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or eSeMettreEnPlace
        self.eAction = self.eAction or eActionEnCours
         do
            local switch_1 = --[[// BEH_Lima_Pion_RejoindreFuseau_EnAttente // virer ADA
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eSeMettreEnPlace then
                    --[[// On va se mettre en position en restant sur nos garde
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eInstallerDispositif
                                                                self.params.__returnValue = self.ePhase
                                return

                            end

                        end
                    end

                    Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
                    Activate( self.activations.BEH_Dep_Pion_INF_MiseEnPlace_Mission, 1, setmetatable( { M_TEMPS_PREPARATION_MISSION(), self.mission.pointInstallation_, true, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[1] = true
elseif switch_1 == eInstallerDispositif then
                    Activate( self.activations.ACT_RC, 1, { eRC_ArriveSurPosition, } )
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_InstallationDispositif, } )
                    --[[// On surveille la zone en meme temps que l'on prepare
]]--[[// On fait d'abord debarquer				
]]StartActivateOverride( self, self.activations.BEH_Obj_Pion_VAB_InstallerCheckPoint, 1.1, { self.mission.pointInstallation_, } )
                    StartActivateOverride( self, self.activations.BEH_Dispositif_Pion_VAB_InstallationDefensive, 1.1, { self.mission.pointInstallation_, false, } )
                    --[[// Demander aux appuis de se mettre en place.
]]--[[// preparation 5min
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eSurveiller
                                                                self.params.__returnValue = self.ePhase
                                return

                            end

                        end
                    end

                    Activate( self.activations.ACT_Misc_Pion_DelaiInstallation, 1, setmetatable( { eNiveauInstallation_PosteAmenage, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                --[[// On surveille jusqu'a la fin...
]]                cases_switch_1[2] = true
elseif switch_1 == eSurveiller then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnSurveillance, } )
                    
                                cases_switch_1[3] = true

                else
                                end
            end

                self.params.__returnValue = self.ePhase
        return

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_OrganiserUnCheckPoint = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "BEH_Dep_Pion_INF_MiseEnPlace_Mission", nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "BEH_Obj_Pion_VAB_InstallerCheckPoint", nodes.BEH_Obj_Pion_VAB_InstallerCheckPoint }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "BEH_Dispositif_Pion_VAB_InstallationDefensive", nodes.BEH_Dispositif_Pion_VAB_InstallationDefensive }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint, "ACT_Misc_Pion_DelaiInstallation", nodes.ACT_Misc_Pion_DelaiInstallation }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "ACT_Maj_Pion_PasserEnTirSurRiposte", nodes.ACT_Maj_Pion_PasserEnTirSurRiposte }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_Mission_Pion_VAB_OrganiserUnCheckPoint", nodes.BEH_Mission_Pion_VAB_OrganiserUnCheckPoint }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_Manoeuvre_RompreContact", nodes.BEH_Manoeuvre_RompreContact }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_OrganiserUnCheckPoint, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

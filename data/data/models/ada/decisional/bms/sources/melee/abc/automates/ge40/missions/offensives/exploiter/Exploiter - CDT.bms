includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/ge40/missions/offensives/exploiter/Exploiter - CDT.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_CDT_ABC_GTIA_Exploiter
]]--[[// 
]]--[[// Commentaires:idem attaquer sauf INF en décentralisée et pas de coordination
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_CDT_ABC_GTIA_Exploiter"
{
    activations =
    {
        { "ACT_GTIA_AnalyserSituationPourAttaquer", {} },
        { "BEH_GTIA_OrganiserLesMoyensPourAttaquer", {} },
        { "BEH_GTIA_UtiliserInfEnDecentraliser", {} },
        { "BEH_GTIA_RendreCompte", {} },
        { "BEH_GTIA_EchelonnerDispositif", {} },
        { "BEH_GTIA_RepartirDansFuseaux", {} },
        { "BEH_GTIA_GererAppuisInternes", {} },
        { "BEH_GTIA_AssignerLesOrdresPourExploiter", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        --[[// Analyse environnement --> idem Attaquer
]]Activate( self.activations.ACT_GTIA_AnalyserSituationPourAttaquer, 1, { self._namedParams.mission.objectifsPrioritaires_, } )
        --[[// Init
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                                do
                    g_bPhaseReceuil = false
                    local listePionsSubordonnes = DEC_Automate_AutomatesSubordonnes()
                    for _,x in pairs( listePionsSubordonnes or {} ) do
                    local _continue = true
                        do
                            local automat = x
                            F_Automat_SeteEtatEchelon( automat, eEtatEchelon_None )
                            F_Automat_SeteEtatPhaseMission( automat, eEtatPhaseMission_None )
                        end

                    end

                end

                                do return end

            end
--[[/***************TEST *******************/]]        end

        if( not self._namedParams.mission.sansRearticulation_ ) then
            do
                Activate( self.activations.BEH_GTIA_OrganiserLesMoyensPourAttaquer, 10, {} )
                Activate( self.activations.BEH_GTIA_UtiliserInfEnDecentraliser, 10, {} )
            end
--[[/***************TEST *******************/]]--[[// CR
]]        end

        Activate( self.activations.BEH_GTIA_RendreCompte, 1, {} )
        Activate( self.activations.BEH_GTIA_EchelonnerDispositif, 1, {} )--[[// Dispositif 
]]
        Activate( self.activations.BEH_GTIA_RepartirDansFuseaux, 1, { self._namedParams.mission.objectifsPrioritaires_, } )
        --[[// Missions
]]Activate( self.activations.BEH_GTIA_GererAppuisInternes, 10, {} )
        Activate( self.activations.BEH_GTIA_AssignerLesOrdresPourExploiter, 1, { self._namedParams.mission.objectifsPrioritaires_, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerLesOrdresPourExploiter
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerLesOrdresPourExploiter"
{
    activations =
    {
        { "BEH_GTIA_AssignerLesMissions", {} },
        { "BEH_GTIA_AssignerLesMissionsAuxPCsINF", {} },
        { "BEH_GTIA_AssurerLaCoordinationPourExploiter", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.objectifsPrioritaires = self.params[1]
    end,

    activate = function( self )
        --[[//IDEM_ATTAQUER
]]Activate( self.activations.BEH_GTIA_AssignerLesMissions, 1, { self._namedParams.objectifsPrioritaires, } )--[[// SPE Exploiter 
]]
        Activate( self.activations.BEH_GTIA_AssignerLesMissionsAuxPCsINF, 1, {} )
        Activate( self.activations.BEH_GTIA_AssurerLaCoordinationPourExploiter, 1, {} )--[[// SPE Exploiter
]]
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssurerLaCoordinationPourExploiter
]]--[[// 
]]--[[// Commentaires:inclue la coordination interne de l'automate, et les ordres de 
]]--[[//              coodination de l'anibas
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssurerLaCoordinationPourExploiter"
{
    activations =
    {
        { "BEH_GTIA_SePosterSurEntreeFuseau", {} },
        { "BEH_GTIA_AssurerLaCoordinationInternePourExploiter", {} },
        { "BEH_GTIA_AssurerLaCoordinationExterne", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        if( not S_Analyse_GE_TousPionsDansFuseau( S_Cherche_GE_Filtre_TypeAutomate_Melee( DEC_Automate_AutomatesSubordonnes() ), DEC_Fuseau() ) ) then
            Activate( self.activations.BEH_GTIA_SePosterSurEntreeFuseau, 1, { DEC_Fuseau(), } )
        else
do
                Activate( self.activations.BEH_GTIA_AssurerLaCoordinationInternePourExploiter, 1, {} )
                Activate( self.activations.BEH_GTIA_AssurerLaCoordinationExterne, 1, {} )
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssurerLaCoordinationInternePourExploiter
]]--[[// 
]]--[[// Commentaires: pas de coordination max (pas d'alignement)
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssurerLaCoordinationInternePourExploiter"
{
    activations =
    {
        { "BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        local listePEcl = S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Eclairage ) )
        local listePE = S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Premier ) )
        local listeSEMelee = S_Cherche_GE_Filtre_TypeAutomate_Melee( S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ) ) )
        local listeSEAppui = S_Cherche_GE_Filtre_TypeAutomate_Appui( S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ) ) )
        local listeSEDetruit = S_Cherche_GE_AutomateNonOperationnels( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second ) )
        local listePionEnSoutien = S_Cherche_GE_Filtre_EnMesureDe( listeSEMelee )
        --[[// Coordination PE / SE
]]Activate( self.activations.BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin, 1, { listePE, listePionEnSoutien, 1000, } )
        Activate( self.activations.BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin, 1, { listePE, listeSEDetruit, 3000, } )
        Activate( self.activations.BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin, 1, { listePE, listeSEAppui, 3000, } )
    end,

--[[// *****************************************************************************
]]--[[// behavior BEH_GTIA_UtiliserInfEnDecentraliser
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_UtiliserInfEnDecentraliser"
{
    activations =
    {
        { "BEH_GTIA_TransfererMoyensOp", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        local listePionsINF = S_Cherche_GE_Filtre_TypeAutomate_INF( DEC_Automate_AutomatesSubordonnes() )
        --[[// Pas d'infanterie
]]if( DIA_IsListEmpty( listePionsINF ) ) then
            do return end
        end

        --[[// Répartir les sections dans les compagnies
]]local listePionsABC = S_Cherche_GE_Filtre_TypeAutomate_ABC( DEC_Automate_AutomatesSubordonnes() )
        for _,pion in pairs( listePionsINF or {} ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_TransfererMoyensOp, 1, { pion, listePionsABC, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// behavior BEH_GTIA_AssignerLesMissionsAuxPCsINF
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerLesMissionsAuxPCsINF"
{
    activations =
    {
        { "ACT_Mission_Automate_AssignerSuivreA", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.pionPC_GTIA = self.pionPC_GTIA or DEC_Automate_PionPC()
        local listePionsINF = S_Cherche_GE_Filtre_TypeAutomate_INF( DEC_Automate_AutomatesSubordonnes() )
        --[[// Pas d'infanterie
]]if( DIA_IsListEmpty( listePionsINF ) ) then
            do return end
        end

        for _,pion in pairs( --[[// Répartir les PC dans les compagnies
]]listePionsINF or {} ) do
        local _continue = true
do
                local pionPC = DEC_Automate_PionPCDeAutomate( pion )
                --[[// pion ayant la mission
]]--[[// pion à suivre
]]Activate( self.activations.ACT_Mission_Automate_AssignerSuivreA, 1, { ePhase_CDT, pionPC, self.pionPC_GTIA, } )
            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_ABC_GTIA_Exploiter = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesMissionsAuxPCsINF, "ACT_Mission_Automate_AssignerSuivreA", nodes.ACT_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourExploiter, "BEH_GTIA_AssignerLesMissions", nodes.BEH_GTIA_AssignerLesMissions }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourExploiter, "BEH_GTIA_AssignerLesMissionsAuxPCsINF", nodes.BEH_GTIA_AssignerLesMissionsAuxPCsINF }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerLesOrdresPourExploiter, "BEH_GTIA_AssurerLaCoordinationPourExploiter", nodes.BEH_GTIA_AssurerLaCoordinationPourExploiter }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssurerLaCoordinationInternePourExploiter, "BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin", nodes.BEH_GTIA_AssurerLaCoordinationInterEchelonDistanceMin }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssurerLaCoordinationPourExploiter, "BEH_GTIA_SePosterSurEntreeFuseau", nodes.BEH_GTIA_SePosterSurEntreeFuseau }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssurerLaCoordinationPourExploiter, "BEH_GTIA_AssurerLaCoordinationInternePourExploiter", nodes.BEH_GTIA_AssurerLaCoordinationInternePourExploiter }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssurerLaCoordinationPourExploiter, "BEH_GTIA_AssurerLaCoordinationExterne", nodes.BEH_GTIA_AssurerLaCoordinationExterne }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_UtiliserInfEnDecentraliser, "BEH_GTIA_TransfererMoyensOp", nodes.BEH_GTIA_TransfererMoyensOp }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "ACT_GTIA_AnalyserSituationPourAttaquer", nodes.ACT_GTIA_AnalyserSituationPourAttaquer }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_OrganiserLesMoyensPourAttaquer", nodes.BEH_GTIA_OrganiserLesMoyensPourAttaquer }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_UtiliserInfEnDecentraliser", nodes.BEH_GTIA_UtiliserInfEnDecentraliser }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_RendreCompte", nodes.BEH_GTIA_RendreCompte }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_EchelonnerDispositif", nodes.BEH_GTIA_EchelonnerDispositif }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_RepartirDansFuseaux", nodes.BEH_GTIA_RepartirDansFuseaux }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_GererAppuisInternes", nodes.BEH_GTIA_GererAppuisInternes }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_ABC_GTIA_Exploiter, "BEH_GTIA_AssignerLesOrdresPourExploiter", nodes.BEH_GTIA_AssignerLesOrdresPourExploiter }

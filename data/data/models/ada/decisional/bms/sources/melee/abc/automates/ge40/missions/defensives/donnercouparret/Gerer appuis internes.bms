includedFiles = includedFiles or {}
includedFiles["sources/melee/abc/automates/ge40/missions/defensives/donnercouparret/Gerer appuis internes.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// BEH_GTIA_GererAppuisInternesEnDefense
]]--[[// 
]]--[[// Commentaires: Faire un retour vers la doctrine --> qu'a-t-on tendance à faire 
]]--[[//               quand le rapport de force n'est pas favorable
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_GTIA_GererAppuisInternesEnDefense"
{
    feedbacks = { { { "done_BEH_GTIA_GererAppuisInternesEnDefense" }, "BEH_GTIA_GererAppuisInternesEnDefense" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_GererAppuisInternesEnDefense, {value} ) end,
    activations =
    {
        { "BEH_GTIA_GererAppuiEnDefensePour", { "done_BEH_GTIA_GererAppuiEnDefensePour" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// On récupère les pions de premier échelons en difficultés 
]]local listePEEnDifficultes = S_Cherche_GE_Filtre_EtatSauvegarde( S_Cherche_GE_Filtre_PasFinMission( S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Premier ) ) )
        if( DIA_IsListEmpty( listePEEnDifficultes ) ) then
            do return end
        end

        --[[// Assignation appuis
]]Activate( self.activations.BEH_GTIA_GererAppuiEnDefensePour, 1, { listePEEnDifficultes, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_GererAppuiEnDefensePour
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_GererAppuiEnDefensePour"
{
    feedbacks = { { { "done_BEH_GTIA_GererAppuiEnDefensePour" }, "BEH_GTIA_GererAppuiEnDefensePour" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_GererAppuiEnDefensePour, {value} ) end,
    activations =
    {
        { "BEH_GTIA_AssignerMissionsPourAppuyerEnDefense", { "done_BEH_GTIA_AssignerMissionsPourAppuyerEnDefense" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePEEnDifficultes = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pion in pairs( self._namedParams.listePEEnDifficultes or emptyTable ) do
        local _continue = true
            Activate( self.activations.BEH_GTIA_AssignerMissionsPourAppuyerEnDefense, 1, { pion, } )

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_GTIA_AssignerMissionsPourAppuyerEnDefense
]]--[[// 
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_GTIA_AssignerMissionsPourAppuyerEnDefense"
{
    feedbacks = { { { "done_BEH_GTIA_AssignerMissionsPourAppuyerEnDefense" }, "BEH_GTIA_AssignerMissionsPourAppuyerEnDefense" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_GTIA_AssignerMissionsPourAppuyerEnDefense, {value} ) end,
    activations =
    {
        { "ACT_GTIA_AssignerMissionAppuyerPourDefense", { "done_ACT_GTIA_AssignerMissionAppuyerPourDefense" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionAAppuyer = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        --[[// On récupère les pions de second échelons "en mesure de" 
]]local listePionsSE = S_Cherche_GE_ObtenirPionsDe( eEtatEchelon_Second )
        local listePionSEAppui = S_Cherche_GE_Filtre_EnMesureDe( S_Cherche_GE_AutomateOperationnels( listePionsSE ) )
        for _,x in pairs( --[[// Assignation missions ABC
]]S_Cherche_GE_Filtre_TypeAutomate_ABC( listePionSEAppui ) or emptyTable ) do
        local _continue = true
do
                local pion = x
                StartActivateOverride( self, self.activations.ACT_GTIA_AssignerMissionAppuyerPourDefense, S_Force_GE_DistanceAgent( self._namedParams.pionAAppuyer, pion ), { pion, self._namedParams.pionAAppuyer, F_Automat_Getfuseau( self._namedParams.pionAAppuyer ), "T_Mission_Automate_ABC_Tenir", } )
            end
--[[// Assignation missions INF
]]
        end

        for _,x in pairs( S_Cherche_GE_Filtre_TypeAutomate_INF( listePionSEAppui ) or emptyTable ) do
        local _continue = true
do
                local pion = x
                StartActivateOverride( self, self.activations.ACT_GTIA_AssignerMissionAppuyerPourDefense, S_Force_GE_DistanceAgent( self._namedParams.pionAAppuyer, pion ), { pion, self._namedParams.pionAAppuyer, F_Automat_Getfuseau( self._namedParams.pionAAppuyer ), "T_Mission_Automate_INF_DefendreFerme", } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// ACT_GTIA_AssignerMissionAppuyerPourDefense
]]--[[// 
]]--[[// Commentaires: pionAAppuyer = actuateur --> on appui qu'une seule fois
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_GTIA_AssignerMissionAppuyerPourDefense"
{
    feedbacks = { { { "done_ACT_GTIA_AssignerMissionAppuyerPourDefense" }, "ACT_GTIA_AssignerMissionAppuyerPourDefense" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_GTIA_AssignerMissionAppuyerPourDefense, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
        self._namedParams.pionAAppuyer = self.params[2]
        self._namedParams.fuseau = self.params[3]
        self._namedParams.typeMission = self.params[4]
    end,

    select = function( self )
        --[[/* POUR ACTUATEUR -->*/]]if( DIA_GetLocalFakeActuator( "ACT_GTIA_AssignerMissionAppuyerPourDefense", self._namedParams.pionAAppuyer ) < GetActivity() ) then
            do
                DIA_SetLocalFakeActuator( "ACT_GTIA_AssignerMissionAppuyerPourDefense", self._namedParams.pionAAppuyer, GetActivity() )
                self.bMissionAssignee = self.bMissionAssignee or false
                --[[// fuseau pas encore assigné
]]if( self._namedParams.fuseau == nil or self.bMissionAssignee ) then
                    do return end
                end

                --[[// Assignation de la mission
]]self.bMissionAssignee = true
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.typeMission
                    local cases_switch_1 = {}
                        if switch_1 == "T_Mission_Automate_ABC_Tenir" then
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            local lima = DEC_GetLima( eTypeLima_LCAR )
                            local listePositions = DEC_Geometrie_CalculerPositionsParRapportALima( lima, 100, 1 )
                            if( listePositions == nil ) then
                                do
                                    DEC_Trace( "Mission impossible, position impossible" )
                                    _continue = false
                                end
                            end

                                if _continue then
                                local positionATenir = DEC_Geometrie_CreerLocalisationCercle( DEC_ListePoints_GetAt( listePositions, 0 ), 4000 )
                                DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                                DEC_Copie_Localisation_Mission( positionATenir, missionPion, "positionInstallation_" )
                                DEC_DonnerMissionAutomate_Mission( missionPion )
                                _continue = false
                            end
                                                cases_switch_1[1] = true
elseif switch_1 == "T_Mission_Automate_INF_DefendreFerme" then
                            local missionPion = DEC_CreerMissionAutomate( self._namedParams.pion, self._namedParams.typeMission )
                            local lima = DEC_GetLima( eTypeLima_LCAR )
                            local listePositions = DEC_Geometrie_CalculerPositionsParRapportALima( lima, 100, 1 )
                            if( listePositions == nil ) then
                                do
                                    DEC_Trace( "Mission impossible, position impossible INF" )
                                    _continue = false
                                end
--[[//Position
]]                            end

                                if _continue then
                                local positionATenir = DEC_Geometrie_CreerLocalisationCercle( DEC_ListePoints_GetAt( listePositions, 0 ), 4000 )
                                DEC_Copie_Localisation_Mission( positionATenir, missionPion, "position_" )
                                DEC_AssignerFuseauAMissionAutomate_Mission( self._namedParams.fuseau, missionPion )
                                DEC_DonnerMissionAutomate_Mission( missionPion )
                                _continue = false
                            end
                                                cases_switch_1[2] = true
                        end
                    end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_GTIA_AssignerMissionsPourAppuyerEnDefense, "ACT_GTIA_AssignerMissionAppuyerPourDefense", nodes.ACT_GTIA_AssignerMissionAppuyerPourDefense }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_GererAppuiEnDefensePour, "BEH_GTIA_AssignerMissionsPourAppuyerEnDefense", nodes.BEH_GTIA_AssignerMissionsPourAppuyerEnDefense }
connections[ #connections + 1 ] = { nodes.BEH_GTIA_GererAppuisInternesEnDefense, "BEH_GTIA_GererAppuiEnDefensePour", nodes.BEH_GTIA_GererAppuiEnDefensePour }

includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/actions/medo/Actions - Medo - INF.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Actions/Medo/Actions - Medo - INF.hal $
]]--[[// $Author: Nld $
]]--[[// $Modtime: 22/09/05 18:13 $
]]--[[// $Revision: 27 $
]]--[[// $Workfile: Actions - Medo - INF.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// include "DEC\Common\Automates\Actions.bms"
]]--[[// include "DEC\Common\Pions\Actions.bms"
]]
--[[//=============================================================================
]]--[[//
]]--[[// Surete
]]--[[//-----------------------------------------------------------------------------
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Appuyer
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Surveiller
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Controler
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Freiner
]]--[[//
]]--[[//-----------------------------------------------------------------------------
]]--[[// Offensif
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Semparer
]]--[[//
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Reconnaitre
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_ReconnaitrePt
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Reduire
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Fixer
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_PrendrePreciserContact
]]--[[//
]]--[[//-----------------------------------------------------------------------------
]]--[[// Defensif
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Interdire
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Couvrir
]]--[[//        action ACT_Mission_Automate_INF_AssignerA_Barrer
]]--[[//
]]--[[//
]]--[[//
]]--[[//=============================================================================
]]
--[[//=============================================================================
]]--[[// Missions de Surete
]]--[[//=============================================================================
]]


node "ACT_Mission_Automate_INF_AssignerAppuyerA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerAppuyerA" }, "ACT_Mission_Automate_INF_AssignerAppuyerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerAppuyerA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pAppuye = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Appuyer" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Appuyer" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Appuyer' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Pion à soutenir
]]DEC_AssignMissionParameter( self.missionPion, "uniteAAppuyer_", self._namedParams.pAppuye )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]--[[//eEtatEchelon_Second;
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Surveiller par rapport a une zone
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_SurveillerZone"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_SurveillerZone" }, "ACT_Mission_Automate_INF_AssignerA_SurveillerZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_SurveillerZone, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux_Compagnie", { "done_ACT_Medo_Automate_AffecterFuseaux_Compagnie" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.locZone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        self.eActionFuseau = self.eActionFuseau or eActionEnCours
        self.ePhaseMRT = self.ePhaseMRT or eMRT_AssignerMissions
        self.ptZone = self.ptZone or nil
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------		
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_SurveillerSecteur" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_SurveillerSecteur" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Surveiller' a " .. DEC_GetSzName( self._namedParams.pPion ) )
                S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                self.ptZone = DEC_Automate_CalculerPointProcheLocalisationDansFuseauPourPion( self._namedParams.locZone, self._namedParams.pPion )
                if( not self.ptZone ) then
                    do
                        self.ptZone = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self._namedParams.locZone )
                        if( self.ptZone == nil ) then
                            self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end
                        end

                    end
                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMRT
                if switch_1 == eMRT_AssignerMissions then
                    DEC_Copie_Point_Mission( self.ptZone, self.missionPion, "positionInstallation_" )
                    F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
                    self.ePhaseMRT = eMRT_RetablirFuseau
                    _continue = false
                elseif switch_1 == eMRT_RetablirFuseau then
                    if( self.eActionFuseau == eActionEffectuee ) then
                        do
                            self.eActionFuseau = eActionEnCours
                            self.ePhaseMRT = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux_Compagnie, 1, { self._namedParams.pPion, } )
self.done_ACT_Medo_Automate_AffecterFuseaux_Compagnie = function( self, _, v ) self.eActionFuseau = v[1] end
                    _continue = false
                elseif switch_1 == eMRT_Valider then
                    if( self._namedParams.ePhase == ePhase_CDT ) then
                        DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
            end

    end,

--[[//=============================================================================
]]--[[// Mission : Surveiller
]]--[[//
]]--[[//=============================================================================
]]}

node "ACT_Mission_Automate_INF_AssignerA_SurveillerSurPosition"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_SurveillerSurPosition" }, "ACT_Mission_Automate_INF_AssignerA_SurveillerSurPosition" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_SurveillerSurPosition, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux_Compagnie", { "done_ACT_Medo_Automate_AffecterFuseaux_Compagnie" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptZone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        self.eActionFuseau = self.eActionFuseau or eActionEnCours
        self.ePhaseMRT = self.ePhaseMRT or eMRT_AssignerMissions
        self.ptObjectif = self.ptObjectif or nil
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_SurveillerSecteur" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_SurveillerSecteur" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Surveiller' a " .. DEC_GetSzName( self._namedParams.pPion ) )
                S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMRT
                if switch_1 == eMRT_AssignerMissions then
                    DEC_Copie_Point_Mission( self._namedParams.ptZone, self.missionPion, "positionInstallation_" )
                    self.ePhaseMRT = eMRT_RetablirFuseau
                    _continue = false
                elseif switch_1 == eMRT_RetablirFuseau then
                    if( self.eActionFuseau == eActionEffectuee ) then
                        do
                            self.eActionFuseau = eActionEnCours
                            self.ePhaseMRT = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux_Compagnie, 1, { self._namedParams.pPion, } )
self.done_ACT_Medo_Automate_AffecterFuseaux_Compagnie = function( self, _, v ) self.eActionFuseau = v[1] end
                    _continue = false
                elseif switch_1 == eMRT_Valider then
                    if( self._namedParams.ePhase == ePhase_CDT ) then
                        DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
            end

    end,

--[[//=============================================================================
]]--[[// Mission : Controler une Zone
]]--[[//
]]--[[//=============================================================================
]]}

node "ACT_Mission_Automate_INF_AssignerA_Controler"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Controler" }, "ACT_Mission_Automate_INF_AssignerA_Controler" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Controler, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.locZone = self.params[3]
        self._namedParams.bPreparerTerrain = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------		
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ControlerSecteur" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ControlerSecteur" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Controler' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Inscription du secteur
]]DEC_Copie_Localisation_Mission( self._namedParams.locZone, self.missionPion, "zone_" )
        --[[// Preparation du terrain : Minage ?
]]DEC_AssignMissionParameter( self.missionPion, "preparerTerrain_", self._namedParams.bPreparerTerrain )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[//=============================================================================
]]--[[// Mission : Controler une Zone
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_Rezzou"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Rezzou" }, "ACT_Mission_Automate_INF_AssignerA_Rezzou" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Rezzou, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.locZone = self.params[3]
        self._namedParams.locRegroupement = self.params[4]
        self._namedParams.natureObjectif = self.params[5]
    end,

    select = function( self )
        self.ptRegroupement = self.ptRegroupement or S_Geometrie_BarycentreZone( self._namedParams.locRegroupement )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------			
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Rezzou" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Rezzou" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Rezzou' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//DEC_Debug( "assert halt failed : " +  "AssignerA_Harceler: ptRegroupement != nil"  );	
]]if( not ( self.ptRegroupement ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
--[[// Inscription du secteur
]]        end

        DEC_Copie_Localisation_Mission( self._namedParams.locZone, self.missionPion, "secteur_" )
        DEC_Copie_Point_Mission( self.ptRegroupement, self.missionPion, "pointRegroupement_" )
        --[[// Preparation du terrain : Minage ?
]]DEC_AssignMissionParameter( self.missionPion, "natureObjectif_", self._namedParams.natureObjectif )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Missions Offensives
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Mission Semparer
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_INF_AssignerA_Semparer"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Semparer" }, "ACT_Mission_Automate_INF_AssignerA_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Semparer, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptMission = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Semparer" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Semparer" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Semparer' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//-----------------------------------------------------------------------------
]]--[[// Determine l'objectif
]]--[[//-----------------------------------------------------------------------------						
]]DEC_Copie_Point_Mission( self._namedParams.ptMission, self.missionPion, "pointObjectif_" )
        --[[// MAJ par defaut le type de mission { PE | SE }
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Mission Reconnaitre
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_INF_AssignerA_Reconnaitre"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Reconnaitre" }, "ACT_Mission_Automate_INF_AssignerA_Reconnaitre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Reconnaitre, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
    end,

    select = function( self )
        self.dest = self.dest or nil
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ReconnaitreAxe" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ReconnaitreAxe" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//calcul des itineraires des missions attaquer des pions
]]--[[// $$$$ ?
]]self.dest = DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pPion )
        --[[//DEC_Debug( "assert halt failed : " +  "pas de point d'arrivee"  );
]]if( not ( self.dest ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Reconnaitre' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        do
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//itineraire	
]]DEC_Copie_PointDansListePoints_Mission( self.dest, self.missionPion, "itineraire_" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

node "ACT_Mission_Automate_INF_AssignerA_ReconnaitrePt"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_ReconnaitrePt" }, "ACT_Mission_Automate_INF_AssignerA_ReconnaitrePt" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_ReconnaitrePt, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptDest = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------		
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ReconnaitreAxe" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_ReconnaitreAxe" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Reconnaitre' a " .. DEC_GetSzName( self._namedParams.pPion ) )
                                do
                end

            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_Copie_PointDansListePoints_Mission( self._namedParams.ptDest, self.missionPion, "itineraire_" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Reduire
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_Reduire"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Reduire" }, "ACT_Mission_Automate_INF_AssignerA_Reduire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Reduire, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ksPionReduire = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Reduire" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Reduire" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Reduire' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "uniteAReduire_", self._namedParams.ksPionReduire )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Prendre Preciser Maintenir Contact
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_PrendrePreciserContact"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_PrendrePreciserContact" }, "ACT_Mission_Automate_INF_AssignerA_PrendrePreciserContact" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_PrendrePreciserContact, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ksPionReduire = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_PrendrePreciserContact" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_PrendrePreciserContact" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'PrendrePreciserContact' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "ennemi_", self._namedParams.ksPionReduire )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Fixer
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_Fixer"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Fixer" }, "ACT_Mission_Automate_INF_AssignerA_Fixer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Fixer, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ksPionFixer = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Fixer" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Fixer" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Fixer' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        DEC_AssignMissionParameter( self.missionPion, "ennemi_", self._namedParams.ksPionFixer )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Missions Defensives
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Mission Interdire
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_INF_AssignerA_Interdire"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Interdire" }, "ACT_Mission_Automate_INF_AssignerA_Interdire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Interdire, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptInterdire = self.params[3]
        self._namedParams.bPreparerTerrain = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Interdire" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Interdire" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Interdire' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// if ( !(  missionPion.pointAInterdire_ != nil ) )	{		halt( eActionImpossible );	}//DEC_Debug( "assert halt failed : " +  "missionPion.zoneInterdite_ != nil"  );
]]--[[//DEC_Debug( "assert halt failed : " +  "AssignerA_Interdire: ptInterdire != nil"  );
]]if( not ( self._namedParams.ptInterdire ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        DEC_Copie_Point_Mission( self._namedParams.ptInterdire, self.missionPion, "pointAInterdire_" )
        --[[// Preparation du terrain : Minage ?
]]DEC_AssignMissionParameter( self.missionPion, "preparerTerrain_", self._namedParams.bPreparerTerrain )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Mission Defendre
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_INF_AssignerA_Defendre"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Defendre" }, "ACT_Mission_Automate_INF_AssignerA_Defendre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Defendre, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptDefendre = self.params[3]
        self._namedParams.bPreparerTerrain = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Defendre" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Defendre" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Defendre' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// if ( !(  missionPion.pointADefendre_ != nil ) )	{		halt( eActionImpossible );	}//DEC_Debug( "assert halt failed : " +  "missionPion.zoneInterdite_ != nil"  );
]]--[[//DEC_Debug( "assert halt failed : " +  "AssignerA_Defendre: ptDefendre != nil"  );
]]if( not ( self._namedParams.ptDefendre ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        DEC_Copie_Point_Mission( self._namedParams.ptDefendre, self.missionPion, "pointADefendre_" )
        --[[// Preparation du terrain : Minage ?
]]DEC_AssignMissionParameter( self.missionPion, "preparerTerrain_", self._namedParams.bPreparerTerrain )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Mission Freiner - 
]]--[[//    Mission uniquement utilisee pour l'utilisation de l'automate Freiner
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Mission_Automate_INF_AssignerA_Freiner"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Freiner" }, "ACT_Mission_Automate_INF_AssignerA_Freiner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Freiner, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptRgpt = self.params[3]
    end,

    select = function( self )
        self.ptDest = self.ptDest or self._namedParams.ptRgpt
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Freiner" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Freiner" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//Direction dangereuse	
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Freiner' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[//calcul des itineraires des missions attaquer des pions
]]--[[// $$$$ ?				
]]if( self._namedParams.ptRgpt == nil ) then
            self.ptDest = DEC_Geometrie_CalculerPointArriveePourPion( self._namedParams.pPion )
        end

        do
        end

        S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[//itineraire	
]]DEC_Copie_PointDansListePoints_Mission( self.ptDest, self.missionPion, "itineraire_" )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Couvrir
]]--[[//
]]--[[//    T_PionModeleDEC            @pAppui :    elt a appuyer
]]--[[//    T_Localisation    @locCouv :  position que l'on doit couvrir. On calcul une
]]--[[//                                nouvelle position par rapport a celle-ci
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_Couvrir"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Couvrir" }, "ACT_Mission_Automate_INF_AssignerA_Couvrir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Couvrir, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.pAppui = self.params[3]
        self._namedParams.ptLoc = self.params[4]
    end,

    select = function( self )
        self.ptPion = self.ptPion or DEC_Automate_PionPosition( self._namedParams.pPion )
        self.ptDest = self.ptDest or nil
        self.dirCouv = self.dirCouv or nil
        self.ptCouv = self.ptCouv or nil
        self.ptCouvMieux = self.ptCouvMieux or nil
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Couvrir" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Couvrir" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Couvrir' a " .. DEC_GetSzName( self._namedParams.pPion ) )
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[//DEC_Debug( "assert halt failed : " +  "AssignerA_Couvrir pAppui != nil."  );
]]if( not ( self._namedParams.pAppui ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        do
        end

        local mission = DEC_GetMission( myself )
        --[[// Creer la position en fonction de l'ennemi
]]S_Misc_Copie_MissionPion_Mission( mission, self.missionPion )
        --[[// Direction de la couverture
]]--[[// ptDest = DEC_Geometrie_PositionTranslateDir( ptPion, DEC_GetDirectionDanger( mission ) , 300 );
]]self.dirCouv = DEC_Geometrie_CreerDirectionPerpendiculaire( DEC_GetDirectionEnnemi( mission ), false )
        DEC_Copie_DirectionDanger_Mission( self.dirCouv, self.missionPion )
        --[[/*M_DISTANCE_COUVERTURE()*/]]self.ptCouv = DEC_Geometrie_PositionTranslateDir( self._namedParams.ptLoc, self.dirCouv, 1500 )
        --[[//DEC_Debug( "assert halt failed : " +  "BEH_Mission_Automate_INF_AssignerA_Couvrir : ptCouv"  );
]]if( not ( self.ptCouv ~= nil ) ) then
            do
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        local bResultat = false
        self.ptCouvMieux = DEC_Geometrie_CalculerPositionObstacle( self.ptCouv, S_TypeObject_ToString( eTypeObjectBouchonMines ), 500 )
        --[[//
]]--[[// itineraire
]]DEC_Copie_Point_Mission( self.ptCouvMieux, self.missionPion, "pointCouverture_" )
        DEC_AssignMissionParameter( self.missionPion, "cible_", self._namedParams.pAppui )
        F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//=============================================================================
]]--[[// Mission : Barrer
]]--[[//
]]--[[//=============================================================================
]]node "ACT_Mission_Automate_INF_AssignerA_Barrer"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerA_Barrer" }, "ACT_Mission_Automate_INF_AssignerA_Barrer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerA_Barrer, {value} ) end,
    activations =
    {
        { "ACT_Medo_Automate_AffecterFuseaux_Compagnie", { "done_ACT_Medo_Automate_AffecterFuseaux_Compagnie" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptBarrer = self.params[3]
        self._namedParams.bRetablirFuseau = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        self.eActionFuseau = self.eActionFuseau or eActionEnCours
        self.ePhaseMRT = self.ePhaseMRT or eMRT_AssignerMissions
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------		
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Barrer" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_INF_Barrer" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "Assigne mission 'Barrer' a " .. DEC_GetSzName( self._namedParams.pPion ) )
                S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
                F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
            end
        end

         do
            local _continue = true
--[[//DEC_Debug( "assert halt failed : " +  "ACT_Mission_Automate_INF_AssignerA_Barrer : ptBarrer != nil"  );
]]--[[// if ( !(  missionPion.positionABarrer_ != nil ) )	{		halt( eActionImpossible );	}//DEC_Debug( "assert halt failed : " +  "ACT_Mission_Automate_INF_AssignerA_Barrer : missionPion.positionABarrer_ != nil"  );
]]--[[// Dans le cas ou une section HOT a ete rajoute en renforcement, 
]]--[[// on la recule de 1000m (au risque qu'elle ne voit rien ...)
]]--[[// DEC_Copie_Point( ptRgrpt, missionPion.pointRegroupement_ );
]]--[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------					
]]            local switch_1 = self.ePhaseMRT
                if switch_1 == eMRT_AssignerMissions then
                    if( not ( self._namedParams.ptBarrer ~= nil ) ) then
                        do
                                                        self:SendFeedback( eActionImpossible )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self._namedParams.pPion:GetType() == "SectionInfanterie_HOT" and myself:GetType() ~= "CompagnieInfanterie_HOT" ) then
                        do
                            local ptBarrer_HOT = S_Geometrie_PtInvDirDangereuse( self._namedParams.ptBarrer, DEC_GetDirectionEnnemi( DEC_GetMission( myself ) ), 1000 )
                            DEC_Copie_Point_Mission( ptBarrer_HOT, self.missionPion, "positionABarrer_" )
                        end
                    else
                        DEC_Copie_Point_Mission( self._namedParams.ptBarrer, self.missionPion, "positionABarrer_" )
                    end

                    if( self._namedParams.bRetablirFuseau ) then
                        self.ePhaseMRT = eMRT_RetablirFuseau
                    else
                        self.ePhaseMRT = eMRT_Valider
                    end

                    _continue = false
                elseif switch_1 == eMRT_RetablirFuseau then
                    if( self.eActionFuseau == eActionEffectuee ) then
                        do
                            self.eActionFuseau = eActionEnCours
                            self.ePhaseMRT = eMRT_Valider
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_Medo_Automate_AffecterFuseaux_Compagnie, 1, { self._namedParams.pPion, } )
self.done_ACT_Medo_Automate_AffecterFuseaux_Compagnie = function( self, _, v ) self.eActionFuseau = v[1] end
                    _continue = false
                elseif switch_1 == eMRT_Valider then
                    self.ePhaseMRT = eMRT_Effectuee
                    if( self._namedParams.ePhase == ePhase_CDT ) then
                        DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                elseif switch_1 == eMRT_Valider then
                    self.ePhaseMRT = eMRT_Effectuee
                    if( self._namedParams.ePhase == ePhase_CDT ) then
                        DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
                    end

                                        self:SendFeedback( eActionEffectuee )
                    do return end

                    _continue = false
                elseif switch_1 == eMRT_Effectuee then
                                        self:SendFeedback( eActionEffectuee )
                    do return end

                                end
            end

    end,

--[[//Ajouté par LLS pour mission Escorter de la PROTERRE
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_INF_AssignerEscorterA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Mission_Automate_INF_AssignerEscorterA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerEscorterA" }, "ACT_Mission_Automate_INF_AssignerEscorterA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerEscorterA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.pionAEscorter = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_EscorterUnite" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_EscorterUnite" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Unite à escorter
]]DEC_AssignMissionParameter( self.missionPion, "uniteAEscorter_", self._namedParams.pionAEscorter )
        --[[// Marquage échelon
]]--[[// En dur pour l'instant
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_INF_AssignerEscorterA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_INF_AssignerEscorterUnitesA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerEscorterUnitesA" }, "ACT_Mission_Automate_INF_AssignerEscorterUnitesA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerEscorterUnitesA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pion = self.params[2]
        self._namedParams.automateAEscorter = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//--------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//--------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_EscorterUnites" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pion, "T_Mission_Pion_INF_EscorterUnites" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//--------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Unite à escorter
]]DEC_AssignMissionParameter( self.missionPion, "automateAEscorter_", self._namedParams.automateAEscorter )
        --[[// Marquage échelon
]]--[[// En dur pour l'instant
]]F_Pion_SeteEtatEchelon( self._namedParams.pion, self._namedParams.eEtatEchelon )
        --[[//--------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//--------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//--------------------------------------------------------------------------
]]--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_INF_AssignerSoutenirA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "ACT_Mission_Automate_INF_AssignerSoutenirA"
{
    feedbacks = { { { "done_ACT_Mission_Automate_INF_AssignerSoutenirA" }, "ACT_Mission_Automate_INF_AssignerSoutenirA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_INF_AssignerSoutenirA, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pionSoutien = self.params[2]
        self._namedParams.pionASoutenir = self.params[3]
        self._namedParams.eEtatEchelon = self.params[4]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------	
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pionSoutien, "T_Mission_Pion_INF_Soutenir" )
                            self.missionPion = misMRT
                            _continue = false
                        elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pionSoutien, "T_Mission_Pion_INF_Soutenir" )
                            self.missionPion = misCDT
                            _continue = false
                        
                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------		
]]if( ModuleBegins() ) then
            do
            end
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Pion à soutenir
]]DEC_AssignMissionParameter( self.missionPion, "uniteASoutenir_", self._namedParams.pionASoutenir )
        --[[// Infos globales	    
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// Marquage soutien
]]F_Pion_SeteEtatSoutien( self._namedParams.pionASoutenir, eEtatSoutien_OK )
        --[[// Marquage échelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pionSoutien, self._namedParams.eEtatEchelon )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]connections = connections or {}
connections[ #connections + 1 ] = { nodes.ACT_Mission_Automate_INF_AssignerA_Barrer, "ACT_Medo_Automate_AffecterFuseaux_Compagnie", nodes.ACT_Medo_Automate_AffecterFuseaux_Compagnie }
connections[ #connections + 1 ] = { nodes.ACT_Mission_Automate_INF_AssignerA_SurveillerSurPosition, "ACT_Medo_Automate_AffecterFuseaux_Compagnie", nodes.ACT_Medo_Automate_AffecterFuseaux_Compagnie }
connections[ #connections + 1 ] = { nodes.ACT_Mission_Automate_INF_AssignerA_SurveillerZone, "ACT_Medo_Automate_AffecterFuseaux_Compagnie", nodes.ACT_Medo_Automate_AffecterFuseaux_Compagnie }

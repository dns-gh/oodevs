includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/missions/SEmparerObjectifOriginal.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/SEmparerObjectif.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:29 $
]]--[[// $Revision: 26 $
]]--[[// $Workfile: SEmparerObjectif.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//=============================================================================
]]--[[// S’emparer de : s’assurer de la possession d’un point ou d'une zone en détruisant, 
]]--[[//		en capturant ou en chassant l’ennemi qui peut l’occuper.
]]--[[//=============================================================================
]]
node "MIS_Pion_INF_Semparer"
{
    feedbacks = { { { "done_MIS_Pion_INF_Semparer" }, "MIS_Pion_INF_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Semparer, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Eni_Pion_VAB_Semparer", { "done_BEH_Eni_Pion_VAB_Semparer" } },
        { "BEH_Mission_Pion_VAB_Semparer", { "done_BEH_Mission_Pion_VAB_Semparer" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhase = self.ePhase or eSeMettreEnPlace
        self.eCurrentPhase = self.eCurrentPhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        if( S_RapForLocal() == eEtatRapportDeForce_Favorable ) then
            do
                if( ModuleBegins() ) then
                    do
                        DEC_SetMission( myself, self._namedParams.mission )
                        F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                        DEC_Trace( "Mission 'S'emparer De' : debut" )
                    end
                end

                Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Offensif, } )
                Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_DETRUIRE(), } )
                self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
                Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
                if( self.eEtatOrdreFinMission == eActionHalt ) then
                    do
                        self.ePhase = eFinMission
                        self.eAction = eActionEnCours
                        self.eEtatOrdreFinMission = eActionEnCours
                    end
                end

                do
                end

                 do
                    local _continue = true
                    local switch_1 = self.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == eSeMettreEnPlace then
                            if( self.eCurrentPhase ~= eFinMission ) then
                                do
                                    Activate( self.activations.BEH_Eni_Pion_VAB_Semparer, GetMotivation( "MOT_ManoeuvrerSurEnis" ), emptyTable )
                                    Activate( self.activations.BEH_Mission_Pion_VAB_Semparer, GetMotivation( "MOT_Mission" ), emptyTable )
self.done_BEH_Mission_Pion_VAB_Semparer = function( self, _, v ) self.eCurrentPhase = v[1] end
                                    _continue = false
                                end
                            else
                                self.ePhase = self.eCurrentPhase
                            end

                                                cases_switch_1[1] = true
elseif switch_1 == eFinMission then
                            if( self.eAction == eActionEffectuee ) then
                                do
                                    self.eAction = eActionEnCours
                                                                        do
                                        --[[// RendreCompte								
]]DEC_Trace( "Mission 'S'emparer De' : fin" )
                                        DEC_FinMission()
                                                                                self:SendFeedback( eActionEffectuee )
                                        Halt( self )
                                        do return end

                                    end

                                end
                            end

                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                            Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                                                end
                    end

            end
--[[//Rapport de force défavorable ou neutre => se replier
]]        else
do
                DEC_Trace( "Rapport de force défavorable - Repli sur la zone de regroupement" )
                self.ePhase = eSeReplier
            end
        end

    end,

--[[//=============================================================================
]]--[[//			Gestion de l'ennemi
]]--[[//=============================================================================
]]}

node "BEH_Eni_Pion_VAB_Semparer"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_Semparer" }, "BEH_Eni_Pion_VAB_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_Semparer, {value} ) end,
    activations =
    {
        { "ACT_RC_SurEni", { "done_ACT_RC_SurEni" } },
        { "ACT_MAJ_EtatSituationEni", { "done_ACT_MAJ_EtatSituationEni" } },
        { "BEH_Eni_Pion_VAB_PreparerEngagement", { "done_BEH_Eni_Pion_VAB_PreparerEngagement" } },
        { "BEH_Eni_Pion_ManoeuvreDetruire", { "done_BEH_Eni_Pion_ManoeuvreDetruire" } },
        { "BEH_Dep_Pion_INF_GererDispositif_Offensif", { "done_BEH_Dep_Pion_INF_GererDispositif_Offensif" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.eActionEni = self.eActionEni or eActionEnCours
        if( not DEC_Connaissances_PresenceEnnemieDansCercle( self.mission.objectif_, 1500 ) ) then
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//  Rencontre d'un eni lorsque l'on est pas dans la phase d'assaut
]]--[[//-----------------------------------------------------------------------------		
]]local lstEnisDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
        for _,ksEni in pairs( lstEnisDansFuseau or emptyTable ) do
        local _continue = true
do
                --[[// L'ennemi est trop loin de la position
]]if( DEC_Geometrie_Distance( DEC_ConnaissanceAgent_Position( ksEni ), self.mission.objectif_ ) > 1500 ) then
                    _continue = false
                end

                    if _continue then
                    Activate( self.activations.ACT_RC_SurEni, 1, { eRC_EniSurObjectif, ksEni, } )
                    Activate( self.activations.ACT_MAJ_EtatSituationEni, 1, { eEtatSituationEnnemi_EniSurObjectif, } )
                    if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                        _continue = false
                    end

                        if _continue then
                        local rForce = S_Force_ActionContre( ksEni )
                        if( not S_UnitesAppuis_EnPosition() ) then
                            Activate( self.activations.BEH_Eni_Pion_VAB_PreparerEngagement, 1.5 + rForce, { ksEni, } )
                        end

                        if( S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                            Activate( self.activations.BEH_Eni_Pion_ManoeuvreDetruire, 1 + rForce, { ksEni, true, } )
                        end

                        Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce, { ksEni, true, } )
                    end
                end
            end

        end

    end,

    destroy = function( self )
            end,

--[[//=============================================================================
]]--[[// Objectif : On cherche à tenir la position. Si l'ennemi est en position, on
]]--[[//			  veut au minimum le faire partir
]]--[[//=============================================================================
]]}

node "BEH_Mission_Pion_VAB_Semparer"
{
    feedbacks = { { { "done_BEH_Mission_Pion_VAB_Semparer" }, "BEH_Mission_Pion_VAB_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_VAB_Semparer, {value} ) end,
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", { "done_BEH_Lima_Pion_RejoindreFuseau_EnAttente" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "BEH_Dep_Pion_INF_MiseEnPlace_Mission", { "done_BEH_Dep_Pion_INF_MiseEnPlace_Mission" } },
        { "BEH_Ordre_Pion_VAB_Semparer_Demande", { "done_BEH_Ordre_Pion_VAB_Semparer_Demande" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Misc_Pion_Ambiance", { "done_ACT_Misc_Pion_Ambiance" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_Dep_Pion_INF_Arret", { "done_ACT_Dep_Pion_INF_Arret" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or eRejoindrePosition
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            StartActivateOverride( self, self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, emptyTable )
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindrePosition then
                    Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, emptyTable )
                    --[[// On ne se rapproche pas trop pour éviter de se faire prendre à parti
]]if( S_EstADistanceTir_Pt( self.mission.objectif_ ) ) then
                        self.eAction = eActionEffectuee
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eObserver
                                                                self:SendFeedback( self.ePhase )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_INF_MiseEnPlace_Mission, 1, { M_TEMPS_PREPARATION_MISSION(), self.mission.objectif_, false, } )
self.done_BEH_Dep_Pion_INF_MiseEnPlace_Mission = function( self, _, v ) self.eAction = v[1] end
                    if( not DEC_Agent_AutomateEstEmbraye() and F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        Activate( self.activations.BEH_Ordre_Pion_VAB_Semparer_Demande, 1, emptyTable )
                    end

                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eObserver then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ReconnaissanceLocalisation, } )
                    --[[// behavior BEH_MOT_Pion_INF_Debarquer();
]]if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            self.ePhase = eRejoindreAssaut
                                                        self:SendFeedback( self.ePhase )
                            do return end

                        end
--[[// Si la reconnaissance renvoie eActionEffectuee, on n'a pas rencontre d'enis, 
]]--[[//	 sinon eActionHalt
]]                    end

                    if( self.eAction == eActionHalt ) then
                        do
                            DEC_Trace( "Patrouille accrochee" )
                                                        self:SendFeedback( eActionHalt )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eRejoindre
                                                                self:SendFeedback( self.ePhase )
                                do return end

                            end

                        end
--[[//On envoie une patrouille en reconnaissance.
]]--[[//behavior BEH_Obs_Pion_INF_EnReconnaissance( mission.objectif_ ) return in eAction;
]]                    end

                    _continue = false
                --[[// On rejoint l'objectif pour s'en emparer
]]                cases_switch_1[2] = true
elseif switch_1 == eRejoindreAssaut then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( F_Pion_GeteniEnCours( myself ) == nil ) then
                        do
                            self.eAction = eActionEnCours
                            if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.mission.objectif_, 100 ) ) then
                                self.ePhase = eFouiller
                            else
                                self.ePhase = eRejoindre
                            end

                        end
                    end

                    _continue = false
                --[[// L'objectif est libre, on peut le rejoindre ..
]]                cases_switch_1[3] = true
elseif switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( not S_EstADistanceTir_Pt( self.mission.objectif_ ) ) then
                        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, emptyTable )
                    end

                    if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            self.ePhase = eRejoindreAssaut
                                                        do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eFouiller
                                                                do return end

                            end

                        end
--[[// Normalement, on est sur la position
]]                    end

                    Activate( self.activations.ACT_Misc_Pion_Ambiance, 1, { eEtatAmbiance_Surete, } )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.mission.objectif_, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                --[[// Une fois sur place, on fouille les lieux
]]                cases_switch_1[4] = true
elseif switch_1 == eFouiller then
                    Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, emptyTable )
                    if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            self.ePhase = eRejoindreAssaut
                                                        do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                                                self:SendFeedback( eFinMission )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Dep_Pion_INF_Arret, 1, { M_TEMPS_FOUILLE(), "fouille des lieux ... ", } )
self.done_ACT_Dep_Pion_INF_Arret = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[5] = true

                else
                                end
            end

                self:SendFeedback( self.ePhase )
        do return end

    end,

--[[//=============================================================================
]]--[[//	On a besoin d'un ordre de conduite de la part de la hiérarchie sur une 
]]--[[//  situation particulière.
]]--[[//=============================================================================
]]}

node "BEH_Ordre_Pion_VAB_Semparer_Demande"
{
    feedbacks = { { { "done_BEH_Ordre_Pion_VAB_Semparer_Demande" }, "BEH_Ordre_Pion_VAB_Semparer_Demande" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_Pion_VAB_Semparer_Demande, {value} ) end,
    activations =
    {
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Ordre_SePoster_EnAttente", { "done_BEH_Ordre_SePoster_EnAttente" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.eOrdre = self.eOrdre or eActionEnCours
        if( self.eOrdre == eActionEffectuee ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// On se poste
]]Activate( self.activations.ACT_RC, 1, { eRC_AttenteOrdrePoursuivre, } )
        Activate( self.activations.BEH_Ordre_SePoster_EnAttente, 1, emptyTable )
self.done_BEH_Ordre_SePoster_EnAttente = function( self, _, v ) self.eOrdre = v[1] end
    end,

--[[// ----------------------------------------------------------------------------
]]--[[// On attend que les appuis soit en position
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_VAB_PreparerEngagement"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_PreparerEngagement" }, "BEH_Eni_Pion_VAB_PreparerEngagement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_PreparerEngagement, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", { "done_ACT_MAJ_EnnemiEnCours" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "ACT_Misc_Pion_Ambiance", { "done_ACT_Misc_Pion_Ambiance" } },
        { "ACT_Dep_SePosterFaceA", { "done_ACT_Dep_SePosterFaceA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.bUniteAppuis_OK = self.bUniteAppuis_OK or false
        self.bUniteAppuis_OK = self.bUniteAppuis_OK or S_UnitesAppuis_EnPosition()
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Attent l'arrivee des renforts" )
            end
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), } )
        Activate( self.activations.ACT_Misc_Pion_Ambiance, 1, { eEtatAmbiance_Surete, } )
        --[[// On se déplace jusqu'à la reco
]]if( S_Eni_EstNiveauPerceptionGTIA( self._namedParams.ksEni, F_Pion_GeteNiveauAction( myself ) ) and DEC_Geometrie_Distance( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), DEC_Agent_Position() ) <= S_Tir_PorteeMaxPourEtreTireParAgent( self._namedParams.ksEni, 0.1 ) ) then
            Activate( self.activations.ACT_Dep_SePosterFaceA, 1, { self._namedParams.ksEni, } )
        end

        if( self.bUniteAppuis_OK ) then
            do
                DEC_Trace( "Renforts en position" )
                                self:SendFeedback( eActionEffectuee )
                do return end

            end
        end

        do
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Semparer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Misc_Pion_Ambiance", nodes.ACT_Misc_Pion_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Dep_SePosterFaceA", nodes.ACT_Dep_SePosterFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "ACT_RC_SurEni", nodes.ACT_RC_SurEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "ACT_MAJ_EtatSituationEni", nodes.ACT_MAJ_EtatSituationEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "BEH_Eni_Pion_VAB_PreparerEngagement", nodes.BEH_Eni_Pion_VAB_PreparerEngagement }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "BEH_Eni_Pion_ManoeuvreDetruire", nodes.BEH_Eni_Pion_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "BEH_Dep_Pion_INF_GererDispositif_Offensif", nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Dep_Pion_INF_MiseEnPlace_Mission", nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Ordre_Pion_VAB_Semparer_Demande", nodes.BEH_Ordre_Pion_VAB_Semparer_Demande }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_Misc_Pion_Ambiance", nodes.ACT_Misc_Pion_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_Dep_Pion_INF_Arret", nodes.ACT_Dep_Pion_INF_Arret }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_VAB_Semparer_Demande, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_Pion_VAB_Semparer_Demande, "BEH_Ordre_SePoster_EnAttente", nodes.BEH_Ordre_SePoster_EnAttente }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_Eni_Pion_VAB_Semparer", nodes.BEH_Eni_Pion_VAB_Semparer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_Mission_Pion_VAB_Semparer", nodes.BEH_Mission_Pion_VAB_Semparer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Semparer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

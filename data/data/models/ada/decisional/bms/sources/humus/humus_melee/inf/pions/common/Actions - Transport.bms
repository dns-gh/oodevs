includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/Actions - Transport.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Actions - Transport.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 23/09/05 10:52 $
]]--[[// $Revision: 7 $
]]--[[// $Workfile: Actions - Transport.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// -----------------------------------------------------------------------------
]]--[[// Transport : Embarquement / Debarquement 
]]--[[// -----------------------------------------------------------------------------
]]

--[[//-----------------------------------------------------------------------------
]]--[[// Action d' Embarquement de la Section d'Infanterie
]]--[[// @perc pourcentage total de personnel encore debarqué à la fin de l'embarquement
]]--[[//-----------------------------------------------------------------------------	  
]]node "ACT_Transport_Pion_INF_Embarquer"
{
    actuators =
    {
        deplacement = 1,
        debarquement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bReprise = self.bReprise or false
        self.eEtat_EmbDeb = self.eEtat_EmbDeb or eActionEmbDeb_EnCours
        self.actionID = self.actionID or 0
        if( ModuleBegins() ) then
            do
                DEC_Message( eRC_EmbarkmentStarted )
                self.actionID = DEC_StartEmbarquement(  )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtat_EmbDeb = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtat_EmbDeb
            local cases_switch_1 = {}
                if switch_1 == eActionEmbDeb_EnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionEmbDeb_ErreurEmbDebEnMemeTemps
                or switch_1 == eActionEmbDeb_PasDeTransporteurs then
                    DEC_Trace( "Embarquement : ignore transporteur" )
                    DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEmbDeb_Termine then
                    DEC_Message( eRC_EmbarkmentFinished )
                    DEC_StopAction( self.actionID )
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                                end
            end

        if( self.bReprise ) then
            do
                DEC_Message( eRC_EmbarkmentResumed )
                self.eEtat_EmbDeb = eActionEmbDeb_EnCours
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[// arret de l'embarquement
]]--[[// arret de l'embarquement
]]    end,

    deselect = function( self )
        DEC_Message( eRC_EmbarkmentInterrupted )
        DEC_PauseAction( self.actionID )
        self.bReprise = true
    end,

    destroy = function( self )
                DEC_StopAction( self.actionID )
    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Bloque toute nouvelle action de debarquement ou embarquement
]]--[[//-----------------------------------------------------------------------------	  
]]node "ACT_Transport_MaintenirEtat"
{
    actuators =
    {
        debarquement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eEtat = self.params[1]
    end,

    select = function( self )
    end,

}


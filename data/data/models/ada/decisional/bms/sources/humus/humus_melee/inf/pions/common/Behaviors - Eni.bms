includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/Behaviors - Eni.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Behaviors - Eni.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 24/05/05 13:56 $
]]--[[// $Revision: 14 $
]]--[[// $Workfile: Behaviors - Eni.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//=============================================================================
]]--[[// Fixe et Detruit l'enis. Demande des tirs d'appui si necessaire
]]--[[//
]]--[[//=============================================================================
]]node "BEH_Eni_Pion_INF_DetruitEtFixe"
{
    feedbacks = { { { "done_BEH_Eni_Pion_INF_DetruitEtFixe" }, "BEH_Eni_Pion_INF_DetruitEtFixe" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_INF_DetruitEtFixe, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", { "done_ACT_MAJ_EnnemiEnCours" } },
        { "BEH_Feu_Pion_INF_TirFixer", { "done_BEH_Feu_Pion_INF_TirFixer" } },
        { "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", { "done_BEH_Feu_Pion_INF_ConduireLesFeux_Sur" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
        self._namedParams.bFixer = self.params[2]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.eActionFixer = self.eActionFixer or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// On tir sur l'ennemi
]]--[[//-----------------------------------------------------------------------------
]]if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee or S_Eni_EstDetruitTactique( self._namedParams.repEni ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// Traite l'ennemi en cours
]]--[[// --------------------------------------------------------------------
]]Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.repEni, } )
        --[[// Fixe l'ennemi si l'on est à distance de tir
]]if( self._namedParams.bFixer and self.eActionFixer == eActionEnCours ) then
            Activate( self.activations.BEH_Feu_Pion_INF_TirFixer, 1, { self._namedParams.repEni, } )
self.done_BEH_Feu_Pion_INF_TirFixer = function( self, _, v ) self.eActionFixer = v[1] end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Si le tir est inefficace, on ne tir pas (uniquement fixer)
]]--[[//-----------------------------------------------------------------------------
]]if( self.eAction == eActionEnPause ) then
            do
                self.eActionFixer = eActionEnCours
                                self:SendFeedback( eActionEnPause )
                do return end

            end
--[[// Tout le monde tire lorsque l'on est à distance de tir	
]]        end

        if( S_Eni_SuisDetectePar( self._namedParams.repEni ) ) then
            Activate( self.activations.BEH_Feu_Pion_INF_ConduireLesFeux_Sur, 1, { self._namedParams.repEni, eFormationTir_Embarque, } )
self.done_BEH_Feu_Pion_INF_ConduireLesFeux_Sur = function( self, _, v ) self.eAction = v[1] end
        end

        if( S_Tir_EstAPortee_Debarque( self._namedParams.repEni, GetStateVariable( "VE_Agressivite_Tir" ) ) ) then
            Activate( self.activations.BEH_Feu_Pion_INF_ConduireLesFeux_Sur, 1, { self._namedParams.repEni, eFormationTir, } )
        end

    end,

--[[// ----------------------------------------------------------------------------
]]--[[// Manoeuvre sur les unites potentiellement dangereuses
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_VAB_Offensif_Manoeuvre"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_Offensif_Manoeuvre" }, "BEH_Eni_Pion_VAB_Offensif_Manoeuvre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_Offensif_Manoeuvre, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_INF_GererDispositif_Offensif", { "done_BEH_Dep_Pion_INF_GererDispositif_Offensif" } },
        { "BEH_Eni_Pion_VAB_ManoeuvreDetruire", { "done_BEH_Eni_Pion_VAB_ManoeuvreDetruire" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[// Si le pion n'est pas dans son fuseau, on n'agit pas sur les ennemis
]]if( not DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            do return end
        end

        local lstUnitesDetectees = DEC_Connaissances_UnitesDetecteesDansFuseau()
        for _,ksEni in pairs( lstUnitesDetectees or {} ) do
        local _continue = true
do
                local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce, { ksEni, true, } )
            end

        end

        local lstEnisPercus = DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau()
        for _,ksEni in pairs( lstEnisPercus or {} ) do
        local _continue = true
do
                if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                    _continue = false
                end

                    if _continue then
                    local rForce = GetMotivation( "MOT_ManoeuvrerSurEnis" ) + S_Force_ActionContre( ksEni )
                    --[[// On lance l'assaut si le niveau de perception attendu est atteint
]]if( S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                        Activate( self.activations.BEH_Eni_Pion_VAB_ManoeuvreDetruire, 1 + rForce, { ksEni, true, } )
                    end

                    Activate( self.activations.BEH_Dep_Pion_INF_GererDispositif_Offensif, rForce, { ksEni, true, } )
                end
            end

        end

    end,

--[[// ----------------------------------------------------------------------------
]]--[[// Gère la prise de contact avec l'ennemi :
]]--[[//		- Précise le contact
]]--[[// 		- Si l'ennemi est détruit, nettoyer la position
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Dep_Pion_INF_GererDispositif_Offensif"
{
    feedbacks = { { { "done_BEH_Dep_Pion_INF_GererDispositif_Offensif" }, "BEH_Dep_Pion_INF_GererDispositif_Offensif" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_INF_GererDispositif_Offensif, {value} ) end,
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "BEH_Dep_Pion_INF_PreciserMaintenirContact", { "done_BEH_Dep_Pion_INF_PreciserMaintenirContact" } },
        { "BEH_Poste_Pion_INF_NettoyerPosition", { "done_BEH_Poste_Pion_INF_NettoyerPosition" } },
        { "ACT_MAJ_EnnemiEnCours", { "done_ACT_MAJ_EnnemiEnCours" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
                self.eActionPreciser = self.eActionPreciser or eActionEnCours
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or eDetruire
        --[[// Si c'est un ami ... comme on start le comportment
]]if( DEC_ConnaissanceAgent_EstUnEnnemi( self._namedParams.ksEni ) == eTristate_False ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// Si on est en ambiance vitesse et je ne sais pas si c'est un ennemi,
]]--[[// On passe son chemin
]]if( DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEni ) and F_Pion_GeteEtatAmbiance( myself ) == eEtatAmbiance_Vitesse and DEC_ConnaissanceAgent_EstUnEnnemi( self._namedParams.ksEni ) == eTristate_DontKnow ) then
            do return end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eActionPreciser ~= eActionEnCours or self.eAction == eActionEffectuee ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// On veut qd meme rester dans son fuseau
]]Activate( self.activations.BEH_Dep_Pion_INF_PreciserMaintenirContact, 1, { self._namedParams.ksEni, false, } )
self.done_BEH_Dep_Pion_INF_PreciserMaintenirContact = function( self, _, v ) self.eActionPreciser = v[1] end
        if( not DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEni ) ) then
            do return end
        end

        --[[// Si l'ennemi sort du fuseau, on abandonne les poursuites.
]]if( not DEC_Geometrie_EstPointDansFuseau( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ) ) ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// Nettoyer et retablir dispositif si l'ennemi est detruit
]]if( ( S_Eni_EstDetruitPhysique( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) ) then
            StartActivateOverride( self, self.activations.BEH_Poste_Pion_INF_NettoyerPosition, 2, { self._namedParams.ksEni, } )
self.done_BEH_Poste_Pion_INF_NettoyerPosition = function( self, _, v ) self.eAction = v[1] end
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
    end,

    destroy = function( self )
            end,

--[[//-----------------------------------------------------------------------------
]]--[[// Destruction d'un ennemi le rapport de force est toujours favorable !
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_VAB_ManoeuvreDetruire"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_ManoeuvreDetruire" }, "BEH_Eni_Pion_VAB_ManoeuvreDetruire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_ManoeuvreDetruire, {value} ) end,
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "BEH_Dep_Pion_INF_AborderEnnemi", { "done_BEH_Dep_Pion_INF_AborderEnnemi" } },
        { "ACT_Tir_FumigeneVersEni", { "done_ACT_Tir_FumigeneVersEni" } },
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_Dep_PasserEnModeFurtif", { "done_ACT_Dep_PasserEnModeFurtif" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
        self.eActionDeplacement = self.eActionDeplacement or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        local rPH = GetStateVariable( "VE_Agressivite_Tir" )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Debut destruction de l'unite eni." )
            end
        end

        do
        end

        do
        end

        do
        end

        do
        end
--[[// observation de l'unite
]]
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), } )
        --[[// behavior BEH_Mot_Pion_Embarquer();
]]--[[// Se deplace vers l'ennemi
]]--[[// Tant que l'on est dans le fuseau ...
]]if( DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            Activate( self.activations.BEH_Dep_Pion_INF_AborderEnnemi, 1, { self._namedParams.ksEni, } )
self.done_BEH_Dep_Pion_INF_AborderEnnemi = function( self, _, v ) self.eActionDeplacement = v[1] end
        end

        if( ( S_Eni_EstDetruitPhysique( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) ) then
            self.ePhase = eNettoyer
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    --[[// Distance de tir atteinte ( VAB ), on fixe
]]if( S_Tir_EstAPortee( self._namedParams.ksEni, rPH ) or S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        self.ePhase = eRejoindreAssaut
                    else
                        do return end
                    end

                --[[// Rejoindre base d'assaut
]]                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindreAssaut then
                    if( S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        do
                            --[[// la section rejoint la base d'assaut            
]]--[[// stop behavior BEH_Pion_INF_TirCouverture_Fixe( ksEni );
]]DEC_Trace( "base d'assaut atteinte - lance l'assaut" )
                            Activate( self.activations.ACT_Tir_FumigeneVersEni, 1, { self._namedParams.ksEni, } )
                            self.ePhase = eDetruire
                        end
                    end

                --[[// Détruire l'eni : on lance l'assaut
]]                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eDetruire then
                    --[[// if ( DEC_Agent_EstEmbarque() )
]]Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1.1, {} )
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )--[[// On fait en sorte de ne pas etre vu
]]
                    --[[// mise en place du dispositif d' assaut
]]Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
                    _continue = false
                --[[// Ennemi detruit on nettoie la position
]]                cases_switch_1[3] = true
elseif switch_1 == eNettoyer then
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[//Copier depuis behavior BEH_Eni_Pion_VAB_ManoeuvreDetruire
]]--[[//Mais volonté de modifier la notion de débarquement pour le rezzou
]]--[[//Laisser cette notion pour la reco offensive dans behavior BEH_Eni_Pion_VAB_ManoeuvreDetruire
]]--[[//-----------------------------------------------------------------------------
]]--[[// Destruction d'un ennemi le rapport de force est toujours favorable !
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_ManoeuvreDetruire"
{
    feedbacks = { { { "done_BEH_Eni_Pion_ManoeuvreDetruire" }, "BEH_Eni_Pion_ManoeuvreDetruire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_ManoeuvreDetruire, {value} ) end,
    instances =
    {
        boost = 1.1,
        max = 1,
    },

    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "BEH_Dep_Pion_INF_AborderEnnemi", { "done_BEH_Dep_Pion_INF_AborderEnnemi" } },
        { "ACT_Tir_FumigeneVersEni", { "done_ACT_Tir_FumigeneVersEni" } },
        { "ACT_Dep_PasserEnModeFurtif", { "done_ACT_Dep_PasserEnModeFurtif" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
        self._namedParams.bDestructionTactique = self.params[2]
    end,

    activate = function( self )
        self.eActionDeplacement = self.eActionDeplacement or eActionEnCours
        self.ePhase = self.ePhase or eRejoindre
        local rPH = GetStateVariable( "VE_Agressivite_Tir" )
        if( ModuleBegins() ) then
            do
                DEC_Trace( "Debut destruction de l'unite eni." )
            end
        end

        do
        end

        do
        end

        do
        end

        do
        end
--[[// observation de l'unite
]]
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), } )
        --[[// Se deplace vers l'ennemi
]]--[[// Tant que l'on est dans le fuseau ...
]]if( DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
            Activate( self.activations.BEH_Dep_Pion_INF_AborderEnnemi, 1, { self._namedParams.ksEni, } )
self.done_BEH_Dep_Pion_INF_AborderEnnemi = function( self, _, v ) self.eActionDeplacement = v[1] end
        end

        if( ( S_Eni_EstDetruitPhysique( self._namedParams.ksEni ) or ( self._namedParams.bDestructionTactique and DEC_ConnaissanceAgent_EstDetruitTactique( self._namedParams.ksEni ) ) ) ) then
            self.ePhase = eNettoyer
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    --[[// Distance de tir atteinte ( Mitrailleuse coaxiale BTR 60 PB ), on fixe
]]if( S_Tir_EstAPortee( self._namedParams.ksEni, rPH ) or S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        self.ePhase = eRejoindreAssaut
                    else
                        do return end
                    end

                --[[// Rejoindre base d'assaut
]]                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eRejoindreAssaut then
                    if( S_Tir_EstAPortee_Debarque( self._namedParams.ksEni, rPH ) ) then
                        do
                            DEC_Trace( "base d'assaut atteinte - lance l'assaut" )
                            Activate( self.activations.ACT_Tir_FumigeneVersEni, 1, { self._namedParams.ksEni, } )
                            self.ePhase = eDetruire
                        end
                    end

                --[[// Détruire l'ennemi : on lance l'assaut sans débarquer
]]                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eDetruire then
                    Activate( self.activations.ACT_Dep_PasserEnModeFurtif, 1, {} )--[[// On fait en sorte de ne pas être vu
]]
                    --[[//Mise en place du dispositif d'assaut
]]Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
                    _continue = false
                --[[// Ennemi détruit ; on nettoie la position
]]                cases_switch_1[3] = true
elseif switch_1 == eNettoyer then
                    _continue = false
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

--[[// Nettoyer et retablir dispositif
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Poste_Pion_INF_NettoyerPosition"
{
    feedbacks = { { { "done_BEH_Poste_Pion_INF_NettoyerPosition" }, "BEH_Poste_Pion_INF_NettoyerPosition" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Poste_Pion_INF_NettoyerPosition, {value} ) end,
    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "ACT_Dep_Pion_INF_Arret", { "done_ACT_Dep_Pion_INF_Arret" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
                self.ptEni = self.ptEni or DEC_Geometrie_CreerPoint()
        self.eAction = self.eAction or eActionEnCours
        self.bInitFouille = self.bInitFouille or true
        if( ModuleBegins() ) then
            DEC_Copie_Point( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), self.ptEni )
        end

        if( self.eAction ~= eActionEnCours ) then
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        if( not S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.ptEni, 200 ) ) then
            self:SendFeedback( eActionEnCours )
            do return end
        end

        --[[/*
		if ( bInitFouille )
		{
			bInitFouille = false;
			start behavior BEH_Poste_Pion_INF_RetablirDispositif() : strength = 1.1;			
		}
		*/]]--[[// Vision vers l'ennemi Ennemi
]]Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { self.ptEni, } )
        Activate( self.activations.ACT_Dep_Pion_INF_Arret, 1, { M_DELAI_NETTOYAGE(), "nettoyage de la position", } )
self.done_ACT_Dep_Pion_INF_Arret = function( self, _, v ) self.eAction = v[1] end
    end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "BEH_Dep_Pion_INF_PreciserMaintenirContact", nodes.BEH_Dep_Pion_INF_PreciserMaintenirContact }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "BEH_Poste_Pion_INF_NettoyerPosition", nodes.BEH_Poste_Pion_INF_NettoyerPosition }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_DetruitEtFixe, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_DetruitEtFixe, "BEH_Feu_Pion_INF_TirFixer", nodes.BEH_Feu_Pion_INF_TirFixer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_INF_DetruitEtFixe, "BEH_Feu_Pion_INF_ConduireLesFeux_Sur", nodes.BEH_Feu_Pion_INF_ConduireLesFeux_Sur }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ManoeuvreDetruire, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ManoeuvreDetruire, "BEH_Dep_Pion_INF_AborderEnnemi", nodes.BEH_Dep_Pion_INF_AborderEnnemi }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ManoeuvreDetruire, "ACT_Tir_FumigeneVersEni", nodes.ACT_Tir_FumigeneVersEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ManoeuvreDetruire, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ManoeuvreDetruire, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "BEH_Dep_Pion_INF_AborderEnnemi", nodes.BEH_Dep_Pion_INF_AborderEnnemi }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Tir_FumigeneVersEni", nodes.ACT_Tir_FumigeneVersEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Dep_PasserEnModeFurtif", nodes.ACT_Dep_PasserEnModeFurtif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Offensif_Manoeuvre, "BEH_Dep_Pion_INF_GererDispositif_Offensif", nodes.BEH_Dep_Pion_INF_GererDispositif_Offensif }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Offensif_Manoeuvre, "BEH_Eni_Pion_VAB_ManoeuvreDetruire", nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.BEH_Poste_Pion_INF_NettoyerPosition, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Poste_Pion_INF_NettoyerPosition, "ACT_Dep_Pion_INF_Arret", nodes.ACT_Dep_Pion_INF_Arret }

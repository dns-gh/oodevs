includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/automates/common/Behaviors CDT - Offensive.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors CDT - Offensive.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 24/08/05 15:59 $
]]--[[// $Revision: 17 $
]]--[[// $Workfile: Behaviors CDT - Offensive.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//-----------------------------------------------------------------------------
]]--[[// Reassigne reconnaitre au pion terminant une mission annexe
]]--[[// Et demande a l'autre pion de PE de poursuivre
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco" }, "BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
        { "BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt", { "done_BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pPion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or nil
        self.ptDest = self.ptDest or DEC_Geometrie_CalculerPointArrivee()
        if( not ModuleBegins() ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[// S'il ya 3 pions en premier echelon et qu'un pion
]]--[[// n'est pas appuye, alors on l'appui
]]local selPionsPE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        local pAAppuyer = S_Cherche_Automate_INF_PionAAppuyer( selPionsPE, self._namedParams.pPion )
        if( pAAppuyer ~= 0 ) then
            do
                 do
                    local _continue = true
                    local switch_1 = --[[// On ajoute l'appui			
]]self._namedParams.pPion:GetType()
                    local cases_switch_1 = {}
                        if switch_1 == "Peloton_AMX"
                        or switch_1 == "Peloton_XL" then
                                                    Activate( self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_CDT, self._namedParams.pPion, pAAppuyer, eEtatEchelon_Second, } )
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == "SectionInfanterie"
                        or switch_1 == "SectionInfanterie_MILAN"
                        or switch_1 == "SectionInfanterie_HOT"
                        or switch_1 == "SectionInfanterie_Appui"
                        or switch_1 == "GroupeInfanterie_Mortier" then
                                                    Activate( self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_CDT, self._namedParams.pPion, pAAppuyer, eEtatEchelon_Second, } )
                            _continue = false
                                                cases_switch_1[2] = true
                        end
                    end

            end
        else
            Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt, 1, { ePhase_CDT, self._namedParams.pPion, self.ptDest, } )
self.done_BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt = function( self, _, v ) self.eAction = v[1] end
        end

    end,

    destroy = function( self )
            end,

}

node "BEH_Conduite_Automate_INF_Reduire_Manoeuvre"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Reduire_Manoeuvre" }, "BEH_Conduite_Automate_INF_Reduire_Manoeuvre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Reduire_Manoeuvre, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_INF_Assaut_Manoeuvre", { "done_BEH_Conduite_Automate_INF_Assaut_Manoeuvre" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptEni = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.ksEni = self.ksEni or nil
        self.eAction = self.eAction or eActionEnCours
        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        local pPion = S_Cherche_Automate_INF_PionMission( DEC_Automate_PionsSansPC(), "T_Mission_Pion_INF_Semparer" )
        if( pPion == 0 ) then
            self:SendFeedback( eActionEnCours )
            do return end
        end

        if( DEC_ConnaissanceAgent_EstValide( self.ksEni ) ) then
            Activate( self.activations.BEH_Conduite_Automate_INF_Assaut_Manoeuvre, 1, { pPion, self.ksEni, } )
self.done_BEH_Conduite_Automate_INF_Assaut_Manoeuvre = function( self, _, v ) self.eAction = v[1] end
        end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Conduites des assauts
]]--[[//-----------------------------------------------------------------------------	
]]--[[//-----------------------------------------------------------------------------
]]--[[/* bReduire */]]}

node "BEH_Situation_Automate_INF_Assaut"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_Assaut" }, "BEH_Situation_Automate_INF_Assaut" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_Assaut, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_INF_Assaut_Manoeuvre", { "done_BEH_Conduite_Automate_INF_Assaut_Manoeuvre" } },
        { "BEH_Conduite_Automate_INF_Assaut_Reduction", { "done_BEH_Conduite_Automate_INF_Assaut_Reduction" } },
        { "BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact", { "done_BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.bReduire = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Gestion des RC recus 
]]--[[//-----------------------------------------------------------------------------		
]]DEC_Automate_PionsSansPC() or {} ) do
        local _continue = true
do
                local x_pion = x
                 do
                    local _continue = true
                    local switch_1 = --[[// Situation Ennemi
]]--[[// --------------------------------------------------------------------
]]F_Pion_GeteEtatSituationEnnemi( x_pion )
                    local cases_switch_1 = {}
                        if switch_1 == eEtatSituationEnnemi_EniSurObjectif then
                            if( S_Misc_EstMissionAffectee_Pion( x_pion, "T_Mission_Pion_INF_Semparer" ) ) then
                                do
                                    local ksEniEnCours = S_Pion_EniEnCours( x_pion )
                                    if( DEC_ConnaissanceAgent_EstValide( ksEniEnCours ) and not S_Eni_Automate_EstDetruitTactique( ksEniEnCours ) ) then
                                        do
                                            local fakeK = nil
                                            StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Manoeuvre, 1, { x_pion, fakeK, } )
                                        end
                                    else
if( self._namedParams.bReduire ) then
                                            StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Reduction, 1, { x_pion, } )
                                        end
                                    end

                                end
                            end

                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == eEtatSituationEnnemi_PriseContact then
                            if( self._namedParams.bReduire ) then
                                StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact, 1, { x_pion, } )
                            end

                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == eEtatSituationEnnemi_PretPourConduiteTir then
                            if( self._namedParams.bReduire and S_Misc_EstMissionAffectee_Pion( x_pion, "T_Mission_Pion_INF_Fixer" ) ) then
                                StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Reduction, 1, { x_pion, } )
                            end

                            _continue = false
                                                cases_switch_1[3] = true
                        end
                    end

            end

        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 06/07/2005 12:10
]]--[[// BEH_Conduite_Automate_INF_Assaut_Manoeuvre
]]--[[// 
]]--[[// Cherche a fixer l'unite ennemie et trouve une couverture 
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_Assaut_Manoeuvre"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Assaut_Manoeuvre" }, "BEH_Conduite_Automate_INF_Assaut_Manoeuvre" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Assaut_Manoeuvre, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerA_Fixer", { "done_BEH_Mission_Automate_INF_AssignerA_Fixer" } },
        { "BEH_Mission_Automate_INF_AssignerA_Couvrir", { "done_BEH_Mission_Automate_INF_AssignerA_Couvrir" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pPion = self.params[1]
        self._namedParams.ksEniManoeuvre = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.misPion = self.misPion or DEC_GetMission( self._namedParams.pPion )
        self.loc = self.loc or nil
        local selAppui = F_Pion_GetselUnitesEnAppui( self._namedParams.pPion )
        self.ksEni = self.ksEni or S_Pion_EniEnCours( self._namedParams.pPion )
        --[[// Pas d'appui
]]--[[// --------------------------------------------------------------------------------
]]if( #( selAppui ) == 0 or ( not DEC_ConnaissanceAgent_EstValide( self.ksEni ) and not DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEniManoeuvre ) ) ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "Conduite Assaut : Manoeuvre" )
            end
        else
--[[// L'appui (MILAN ou HOT) devrait l'avoir detruit
]]--[[// On reste dans la meme configuration
]]            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        DEC_Trace( "Conduite Assaut : Mission Fixer " .. DEC_GetSzName( self._namedParams.pPion ) )
        --[[// Le PE fixe
]]if( DEC_ConnaissanceAgent_EstValide( self.ksEni ) ) then
            Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Fixer, 1, { ePhase_CDT, self._namedParams.pPion, self.ksEni, } )
        else
if( DEC_ConnaissanceAgent_EstValide( self._namedParams.ksEniManoeuvre ) ) then
                Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Fixer, 1, { ePhase_CDT, self._namedParams.pPion, self._namedParams.ksEniManoeuvre, } )
            end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Installation de la couverture
]]--[[//-----------------------------------------------------------------------------
]]local pionCouv = S_Cherche_Automate_TypePion( selAppui, "SectionInfanterie" )
        if( pionCouv == 0 ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        --[[// Initialise la couverture
]]DEC_Trace( "Conduite Assaut : Mission Couvrir " .. DEC_GetSzName( pionCouv ) )
        --[[// Objectif		
]]Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Couvrir, 1, { ePhase_CDT, pionCouv, self._namedParams.pPion, self.misPion.pointObjectif_, } )
    end,

    destroy = function( self )
            end,

--[[// ============================================================================
]]--[[// $Created : JCR : 06/07/2005 12:10
]]--[[// BEH_Conduite_Automate_INF_Assaut_Reduction
]]--[[// 
]]--[[// Cherche reduire l'ennemi ( on cherche 2 unites dans les appuis )
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact" }, "BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_INF_Assaut_Reduction", { "done_BEH_Conduite_Automate_INF_Assaut_Reduction" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pPion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                local pionAppui = S_Automate_INF_UniteMission_Appuyer( self._namedParams.pPion )
                if( pionAppui ~= 0 ) then
                    StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Reduction, 1, { pionAppui, } )
                else
                    StartActivateOverride( self, self.activations.BEH_Conduite_Automate_INF_Assaut_Reduction, 1, { self._namedParams.pPion, } )
                end

            end
        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 06/07/2005 12:10
]]--[[// BEH_Conduite_Automate_INF_Assaut_Reduction
]]--[[// 
]]--[[// Cherche reduire l'ennemi ( on cherche 2 unites dans les appuis )
]]--[[// ============================================================================
]]}

node "BEH_Conduite_Automate_INF_Assaut_Reduction"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Assaut_Reduction" }, "BEH_Conduite_Automate_INF_Assaut_Reduction" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Assaut_Reduction, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerA_Reduire", { "done_BEH_Mission_Automate_INF_AssignerA_Reduire" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pPion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.ksEni = self.ksEni or S_Pion_EniEnCours( self._namedParams.pPion )
        local selAppui = F_Pion_GetselUnitesEnAppui( self._namedParams.pPion )
        --[[// Pas d'appui
]]--[[// --------------------------------------------------------------------------------
]]if( #( selAppui ) == 0 ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( not DEC_ConnaissanceAgent_EstValide( self.ksEni ) ) then
            self.ksEni = S_Cherche_Automate_INF_EniValide_Pour( self._namedParams.pPion )
        end

        --[[// Pas d'ennemi trouve a proximite
]]if( not DEC_ConnaissanceAgent_EstValide( self.ksEni ) ) then
            self:SendFeedback( eActionImpossible )
            Halt( self )
            do return end
        end

        if( ModuleBegins() ) then
            do
                DEC_Trace( "Conduite Assaut : Reduction" )
            end
        else
do
                --[[// L'appui (MILAN ou HOT) devrait l'avoir detruit
]]--[[// On reste dans la meme configuration
]]                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        end

        if( S_Misc_EstMissionAffectee_Pion( self._namedParams.pPion, "T_Mission_Pion_INF_Semparer" ) ) then
            --[[// Initialise la reduction
]]Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Reduire, 1, { ePhase_CDT, self._namedParams.pPion, self.ksEni, eEtatEchelon_Premier, } )
        end

        for _,x_assaut in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Installation de l'assaut
]]--[[//-----------------------------------------------------------------------------		
]]S_Cherche_Automate_Filtre_TypePion( selAppui, "SectionInfanterie" ) or {} ) do
        local _continue = true
do
                --[[// Initialise la reduction
]]Activate( self.activations.BEH_Mission_Automate_INF_AssignerA_Reduire, 1, { ePhase_CDT, x_assaut, self.ksEni, eEtatEchelon_Premier, } )
            end

        end

    end,

    destroy = function( self )
            end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Assaut_Manoeuvre, "BEH_Mission_Automate_INF_AssignerA_Fixer", nodes.BEH_Mission_Automate_INF_AssignerA_Fixer }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Assaut_Manoeuvre, "BEH_Mission_Automate_INF_AssignerA_Couvrir", nodes.BEH_Mission_Automate_INF_AssignerA_Couvrir }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Assaut_Reduction, "BEH_Mission_Automate_INF_AssignerA_Reduire", nodes.BEH_Mission_Automate_INF_AssignerA_Reduire }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact, "BEH_Conduite_Automate_INF_Assaut_Reduction", nodes.BEH_Conduite_Automate_INF_Assaut_Reduction }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Reconnaitre_AssignerReco, "BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt", nodes.BEH_Mission_Automate_INF_AssignerA_ReconnaitrePt }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Reduire_Manoeuvre, "BEH_Conduite_Automate_INF_Assaut_Manoeuvre", nodes.BEH_Conduite_Automate_INF_Assaut_Manoeuvre }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Assaut, "BEH_Conduite_Automate_INF_Assaut_Manoeuvre", nodes.BEH_Conduite_Automate_INF_Assaut_Manoeuvre }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Assaut, "BEH_Conduite_Automate_INF_Assaut_Reduction", nodes.BEH_Conduite_Automate_INF_Assaut_Reduction }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Assaut, "BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact", nodes.BEH_Conduite_Automate_INF_Assaut_Reduction_SurPriseContact }

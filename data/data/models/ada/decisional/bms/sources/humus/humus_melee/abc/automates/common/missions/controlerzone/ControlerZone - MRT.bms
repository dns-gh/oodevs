includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/missions/controlerzone/ControlerZone - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Missions/ControlerZone/ControlerZone - MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 2/09/05 13:36 $
]]--[[// $Revision: 18 $
]]--[[// $Workfile: ControlerZone - MRT.hal $
]]--[[// *****************************************************************************
]]


--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerControlerZoneA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_AssignerControlerZoneA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerControlerZoneA" }, "BEH_Medo_Automate_ABC_AssignerControlerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerControlerZoneA, {value} ) end,
    activations =
    {
        { "ACT_Warning", { "done_ACT_Warning" } },
        { "BEH_Mission_Automate_ABC_AssignerControlerA", { "done_BEH_Mission_Automate_ABC_AssignerControlerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.zoneAControler = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.listeSousSecteurs = self.listeSousSecteurs or {}
        self.rIterateurSecteur = self.rIterateurSecteur or 0
        if( #( self._namedParams.selPions ) == 0 ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local nErrorCode1 = nil
                self.listeSousSecteurs = DEC_Geometrie_DecoupeLocalisation( self._namedParams.zoneAControler, #( self._namedParams.selPions ), nErrorCode1 )
                nErrorCode1 = self.listeSousSecteurs.second
                self.listeSousSecteurs = self.listeSousSecteurs.first
                --[[// Gestion erreur
]]if( nErrorCode1 ~= eNoError ) then
                    do
                        DEC_Trace( "Impossiblde de trouver des sous secteurs dans localisation" )
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleZoneHorsFuseau, } )
                                                self:SendFeedback( eActionImpossible )
                        do return end

                    end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation des mission une par une au pion (pas simultanément)
]]--[[//-----------------------------------------------------------------------------
]]                end

                for _,pion in pairs( self._namedParams.selPions or {} ) do
                local _continue = true
do
                        if( self.rIterateurSecteur == #( self.listeSousSecteurs ) ) then
                            self.rIterateurSecteur = 0
                        end

                        local secteur = DEC_UserTypeList_GetAt( self.listeSousSecteurs, self.rIterateurSecteur )
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerControlerA, 1, { ePhase_MRT, pion, secteur, self._namedParams.eEtatEchelon, } )
                                                self.rIterateurSecteur = self.rIterateurSecteur + 1
                    end

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerControlerZoneA, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerControlerZoneA, "BEH_Mission_Automate_ABC_AssignerControlerA", nodes.BEH_Mission_Automate_ABC_AssignerControlerA }

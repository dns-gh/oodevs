includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/sec cdo/missions/Appuyer.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Vab/Missions/Appuyer.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:27 $
]]--[[// $Revision: 24 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[//=============================================================================
]]--[[// Details :
]]--[[//		Définition : apporter une aide à une autre unité, spontanément ou sur 
]]--[[//		ordre par le mouvement ou par le feu. 
]]--[[//
]]--[[//		Principes : Il s’agit, dans le cadre de la manoeuvre de la compagnie 
]]--[[//		et à partir d’une position choisie, d’apporter, sur ordre ou de façon 
]]--[[//		spontanée, une aide aux éléments amis par des feux appliqués sur des
]]--[[//		objectifs repérés.
]]--[[//=============================================================================
]]node "MIS_Pion_INF_Appuyer"
{
    feedbacks = { { { "done_MIS_Pion_INF_Appuyer" }, "MIS_Pion_INF_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Delai_Pion_INF_PreparerMission", { "done_BEH_Delai_Pion_INF_PreparerMission" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_INF_Appuyer", { "done_BEH_Dep_Pion_INF_Appuyer" } },
        { "BEH_Eni_Pion_VAB_Appuyer", { "done_BEH_Eni_Pion_VAB_Appuyer" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.pionRompre = self.pionRompre or 0
        self.eAction = self.eAction or eActionEnCours
        self.eActionSuivi = self.eActionSuivi or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.repAmi = self.repAmi or self._namedParams.mission.uniteAAppuyer_
        --[[// initalisation de la mission
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                --[[// mise a jour des infos sur le pion ami
]]if( self.repAmi == 0 ) then
                    do
                        DEC_Warning( eRC_MissionImpossible )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "Mission 'Appuyer ( " .. DEC_GetSzName( self.repAmi ) .. " )' : debut" )
            end
        end

        Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Appui, } )
        Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_APPUYER(), } )
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                        do
                            Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { M_TEMPS_PREPARATION_APPUYER(), } )
                                                        do return end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    self.ePhase = eAppuyer
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eAppuyer then
                    Activate( self.activations.BEH_Dep_Pion_INF_Appuyer, GetMotivation( "MOT_Mission" ), { self.repAmi, M_DISTANCE_SUIVI_MIN(), M_DISTANCE_SUIVI_MAX(), } )
                    --[[// Gestion des ennemis
]]--[[//-------------------------------------------------------------------------	
]]local rMotivation = GetMotivation( "MOT_ManoeuvrerSurEnis" ) * S_Force_Pion_INF_DistanceAppuisEnnemis( self.repAmi, M_DISTANCE_SUIVI_MAX() )
                    --[[// Ennemi propre a la section
]]Activate( self.activations.BEH_Eni_Pion_VAB_Appuyer, rMotivation, { self.repAmi, } )
                    _continue = false
                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                DEC_Trace( "fin mission" )
                                DEC_FinMission()
                                                                self:SendFeedback( eActionEffectuee )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Destruction de plusieurs ennemis
]]--[[// Sur les ennemis sur lesquels on a recu une demande
]]--[[// Considere uniquement la manoeuvre
]]--[[//-----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_VAB_Appuyer"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_Appuyer" }, "BEH_Eni_Pion_VAB_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_Dep_Pion_INF_PreciserContact", { "done_BEH_Dep_Pion_INF_PreciserContact" } },
        { "ACT_Misc_UnitesEnAppui_EnPosition", { "done_ACT_Misc_UnitesEnAppui_EnPosition" } },
        { "BEH_Eni_Pion_VAB_ManoeuvreDetruire", { "done_BEH_Eni_Pion_VAB_ManoeuvreDetruire" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.tAmi = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                if( not ( myself.bDefenseStatique_Mobile_ or F_Pion_GeteTypeContact( self._namedParams.tAmi ) == eTypeContact_Offensif ) ) then
            do return end
        end

        local lstEnisDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
        for _,ksEni in pairs( lstEnisDansFuseau or {} ) do
        local _continue = true
do
                local rForceDemande = 1
                --[[// Si l'ennemi est traite par le pion appuye
]]--[[// ----------------------------------------------------------------
]]local ksEni_Appui = F_Pion_GeteniEnCours( self._namedParams.tAmi )
                if( ksEni_Appui == ksEni ) then
                    rForceDemande = 2
                end

                --[[// Il faut que l'on soit a distance de tir ..
]]--[[// ----------------------------------------------------------------
]]if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) or F_Pion_GeteEtatAmbiance( myself ) == eEtatAmbiance_Vitesse ) then
                    _continue = false
                end

                    if _continue then
                    --[[// Precise le contact
]]--[[// ----------------------------------------------------------------
]]local rForce_Action = 1 + rForceDemande * S_Force_ActionContre( ksEni )
                    local rForce_Contact = rForce_Action * S_Force_DistanceReco( DEC_ConnaissanceAgent_Position( ksEni ), 4000 )
                    if( not ( S_Eni_EstPercu( ksEni ) and S_Tir_EstAPortee( ksEni, GetStateVariable( "VE_Agressivite_Tir" ) ) ) ) then
                        do
                            Activate( self.activations.BEH_Dep_Pion_INF_PreciserContact, rForce_Contact, { ksEni, eIdentifie, true, } )
                        end
                    else
do
                            Activate( self.activations.ACT_Misc_UnitesEnAppui_EnPosition, 1, {} )
                            Activate( self.activations.BEH_Eni_Pion_VAB_ManoeuvreDetruire, 1 + rForce_Contact, { ksEni, true, } )
                        end
                    end

                end
            end

        end

--[[// on supprime les demandes non valide
]]    end,

    destroy = function( self )
            end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Appuyer, "BEH_Dep_Pion_INF_PreciserContact", nodes.BEH_Dep_Pion_INF_PreciserContact }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Appuyer, "ACT_Misc_UnitesEnAppui_EnPosition", nodes.ACT_Misc_UnitesEnAppui_EnPosition }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Appuyer, "BEH_Eni_Pion_VAB_ManoeuvreDetruire", nodes.BEH_Eni_Pion_VAB_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Dep_Pion_INF_Appuyer", nodes.BEH_Dep_Pion_INF_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Eni_Pion_VAB_Appuyer", nodes.BEH_Eni_Pion_VAB_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }

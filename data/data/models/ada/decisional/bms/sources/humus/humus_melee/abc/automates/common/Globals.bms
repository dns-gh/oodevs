includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/Globals.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 02-11-08 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Globals.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 20/09/05 18:12 $
]]--[[// $Revision: 31 $
]]--[[// $Workfile: Globals.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
include "Common/Automates/Globals.bms"


include "Melee/Abc/Automates/Common/Parameters.bms"

--[[//-----------------------------------------------------------------------------
]]--[[// SPE automate ABC
]]--[[//-----------------------------------------------------------------------------
]]--[[//=============================================================================
]]--[[// Definition des functions ecrites en script ABC
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions de premier echelon en mode "RAS" sur ennemi
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions de premier echelon en mode "Fixe" ou"esquive" 
]]--[[// sur ennemi
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions succeptibles de soutenir une unite de premier 
]]--[[// echelon 
]]--[[// LES 2 CONDITIONS pour etre en mesure de soutenir:
]]--[[// 1) Ne pas être détruit
]]--[[// 2) Etre un pion de deuxieme echelon
]]--[[//-----------------------------------------------------------------------------
]]--[[// seul pion suceptible de soutenir ou reprendre mission à leur compte
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie le pion qui soutien l'unite passé en paramètre.
]]--[[// Si ce pion n'a pas de soutien renvoie 0.
]]--[[// // $$$$ MIA 03-10-13: faire plus générique et renvoyer une liste?
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai qd tous les pions passer en paramètre sont en position( mission statique )
]]--[[//-----------------------------------------------------------------------------
]]--[[// TEMP
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions Ecl
]]--[[// --> en PAUSE ou ESQUIVE
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si le pion passé en paramètre est un pion INF
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si au moins un pion de premier echelon  ou Ecl est detruit
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions sans mission 
]]--[[// Pour missions rétrogrades
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions qui freinent
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie le pion ami (meme escadron) le plus proche
]]--[[//-----------------------------------------------------------------------------
]]--[[// M_FLOATMAX()
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie le pion ami (meme escadron) le plus proche
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions détruits (tactiquement OU totalement) de l'échelon
]]--[[// passé en paramètre
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions détruits (tactiquement OU totalement) de l'échelon
]]--[[// passé en paramètre
]]--[[//-----------------------------------------------------------------------------
]]--[[// ATTENTION le dispositif est inversé, Devant = derriere...
]]--[[// Le pion est devant
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si au moins un pion amis est en difficulte
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie vrai si tous les pions de l'automate sont hors fuseau
]]--[[//-----------------------------------------------------------------------------
]]function S_Dispositif_Automate_ABC_ObtenirPionsPE_EnRAS( )
    local _returnValue = {}
    local listePionsPEEnRAS = {}
    local listePions = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDec( pion ) == eEtatDec_RAS ) then
                DIA_PushFront( listePionsPEEnRAS, pion )
            end

        end

    end

    _returnValue = listePionsPEEnRAS
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_ObtenirPionsPE_EnDifficultes( )
    local _returnValue = {}
    local listePionsPEEnDifficulte = {}
    local listePions = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDec( pion ) == eEtatDec_Sauvegarde or F_Pion_GeteEtatDecPrudence( pion ) == eEtatDecPrudence_Actif ) then
                DIA_PushFront( listePionsPEEnDifficulte, pion )
            end

        end

    end

    _returnValue = listePionsPEEnDifficulte
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_ObtenirPionsSoutien( )
    local _returnValue = {}
    local listePion = DEC_Automate_PionsSansPC()
    local listePionDeSoutien = {}
    for _,x in pairs( listePion or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon_Second and F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_None ) then
                do
                     do
                        local _continue = true
                        local switch_1 = pion:GetType()
                        local cases_switch_1 = {}
                            if switch_1 == "Peloton_AMX"
                            or switch_1 == "Peloton_XL" then
                                                            DIA_PushFront( listePionDeSoutien, pion )
                                _continue = false
                                                        cases_switch_1[1] = true
                            end
                        end

                end
            end

        end

    end

    _returnValue = listePionDeSoutien
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_ObtenirPionEnSoutienDe( pionSoutenu )
    local _returnValue = nil
    local pionEnSoutien = nil
    local listePions = DEC_Automate_PionsSansPC()
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            local mission = DEC_GetMission( pion )
            if( mission ~= nil and mission:GetType() == "T_Mission_Pion_ABC_Soutenir" ) then
                do
                    local mis = DEC_GetMission( pion )
                    if( mis.uniteASoutenir_ == pionSoutenu ) then
                        pionEnSoutien = pion
                    end

                end
            end

        end

    end

    _returnValue = pionEnSoutien
    do return _returnValue end
end

function S_Misc_Automate_ABC_PionsEnPosition( listePions )
    local _returnValue = false
    _returnValue = false
    local rNbrePionsPrets = 0
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatPhaseMission( pion ) == eEtatPhaseMission_EnPosition ) then
                                rNbrePionsPrets = rNbrePionsPrets + 1
            end

        end

    end

    _returnValue = ( rNbrePionsPrets == #( listePions ) )
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_EstPEclEnDanger( )
    local _returnValue = false
    _returnValue = false
    local listePionEcl = S_ObtenirPionsDe( eEtatEchelon_Eclairage, eEtatDestruction_None )
    for _,x in pairs( listePionEcl or {} ) do
    local _continue = true
do
            local pionEcl = x
            if( F_Pion_GeteEtatDec( pionEcl ) == eEtatDec_Sauvegarde ) then
                do
                    _returnValue = true
                                        do return _returnValue end

                end
            end

        end

    end

    do return _returnValue end
end

function S_Dispositif_Automate_ABC_EstPionInfanterie( pion )
    local _returnValue = false
    _returnValue = false
    if( pion:GetType() == "SectionInfanterie_HOT" or pion:GetType() == "SectionInfanterie_MILAN" or pion:GetType() == "SectionInfanterie" ) then
        _returnValue = true
    end

    do return _returnValue end
end

function S_Dispositif_Automate_ABC_EvtPionDetruit( )
    local _returnValue = false
    _returnValue = false
    local listePionsPE = S_ObtenirTousPionsDe( eEtatEchelon_Premier )
    local listePionsPEcl = S_ObtenirTousPionsDe( eEtatEchelon_Eclairage )
    for _,x in pairs( listePionsPE or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                do
                    _returnValue = true
                                        do return _returnValue end

                end
            end

        end

    end

    for _,x in pairs( listePionsPEcl or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                _returnValue = true
            end

        end

    end

    do return _returnValue end
end

function S_Dispositif_Automate_ABC_PionsSansMission( )
    local _returnValue = {}
    local selTemp = {}
    for _,x in pairs( DEC_Automate_PionsAvecPC() or {} ) do
    local _continue = true
do
            local pion = x
            if( DEC_GetMission( pion ) == nil ) then
                DIA_PushFront( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_ObtenirListePionsFreinantDe( eEtatEchelon )
    local _returnValue = {}
    local listeFiltre = {}
    local listePionFreinant = S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsAvecPC(), "T_Mission_Pion_ABC_Freiner" )
    for _,x in pairs( listePionFreinant or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon ) then
                DIA_PushFront( listeFiltre, pion )
            end

        end

    end

    _returnValue = listeFiltre
    do return _returnValue end
end

function S_Dispositif_ObtenirPionSoutienProcheDe( pion )
    local _returnValue = nil
    _returnValue = 0
    local rDistanceMax = 1105199104
    local listePionsSecondEchelonNonDetruits = S_ObtenirPionsDe( eEtatEchelon_Second, eEtatDestruction_None )
    for _,x in pairs( listePionsSecondEchelonNonDetruits or {} ) do
    local _continue = true
do
            local pionProche = x
            if( pionProche:GetType() == "Peloton_XL" or pionProche:GetType() == "Peloton_AMX" ) then
                do
                    local rDistanceCourante = DEC_Geometrie_Distance( DEC_Automate_PionPosition( pion ), DEC_Automate_PionPosition( pionProche ) )
                    if( rDistanceCourante < rDistanceMax ) then
                        do
                            rDistanceCourante = rDistanceMax
                            _returnValue = pionProche
                        end
                    end

                end
            end

        end

    end

    do return _returnValue end
end

function S_Dispositif_Automate_ABC_PionsPourArmerPointControle( )
    local _returnValue = {}
    local listePionPatrouille = S_ObtenirPionsOperationnelsFiltre( "Patrouille_EI" )
    local listePionPatrouilleMilan = S_ObtenirPionsOperationnelsFiltre( "Patrouille_EI_Milan" )
    local listePionPAD = S_ObtenirPionsOperationnelsFiltre( "Peloton_AD" )
    local selTemp = {}
    for _,pion in pairs( listePionPatrouille or {} ) do
    local _continue = true
        DIA_PushFront( selTemp, pion )

    end

    for _,pion in pairs( listePionPatrouilleMilan or {} ) do
    local _continue = true
        DIA_PushFront( selTemp, pion )

    end

    for _,pion in pairs( listePionPAD or {} ) do
    local _continue = true
        DIA_PushFront( selTemp, pion )

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_ObtenirPionDetruitsDe( eEtatEchelon )
    local _returnValue = {}
    local selTemp = {}
    local listePions = S_ObtenirTousPionsDe( eEtatEchelon )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                DIA_PushFront( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_Dispositif_Automate_ABC_Freiner_PionsDevant( resultatCalcul, eEtatEchelon )
    local _returnValue = false
    _returnValue = false
    local listePions = S_ObtenirTousPionsDe( eEtatEchelon )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( DEC_Geometrie_CalculerDistanceLigneArriere( resultatCalcul, pion ) > 200 ) then
                _returnValue = true
            end

        end

    end

    do return _returnValue end
end

function S_Dispositif_Automate_ABC_PionsAmisEnDifficultes( compagnie )
    local _returnValue = false
    _returnValue = false
    for _,x in pairs( DEC_Automate_PionsDeAutomateAvecPC( compagnie ) or {} ) do
    local _continue = true
do
            local pion = x
            if( F_Pion_GeteEtatDec( pion ) == eEtatDec_Sauvegarde ) then
                _returnValue = true
            end

        end

    end

    do return _returnValue end
end

function S_Dispositif_ABC_Automate_TousPionsHorsFuseau( compagnie )
    local _returnValue = false
    _returnValue = false
    local rIterateur = 0
    local listePions = DEC_Automate_PionsDeAutomateAvecPC( compagnie )
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            if( not DEC_Geometrie_EstPointDansFuseau( DEC_Automate_PionPosition( pion ) ) ) then
                                rIterateur = rIterateur + 1
            end

        end

    end

    if( rIterateur == #( listePions ) ) then
        _returnValue = true
    end

    do return _returnValue end
end


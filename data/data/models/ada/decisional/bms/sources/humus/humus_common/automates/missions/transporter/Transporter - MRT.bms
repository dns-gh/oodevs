includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/missions/transporter/Transporter - MRT.bms"] = true

--[[// $$$$GGR : donner des missions de transport uniquement à des pions qui peuvent transporter
]]
node "MIS_Automate_MRT_Transporter"
{
    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.selPions = self.selPions or DEC_Automate_PionsAvecPC()
        self.listeTransporteurs = self.listeTransporteurs or {}
        self.listePionsATransporter = self.listePionsATransporter or {}
        self.listeTransporteurs = S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "PelotonAppuiMob" )
        self.listeTransporteurs = S_Liste_Concatene( self.listeTransporteurs, S_Cherche_Automate_Filtre_TypePionOperationnels( self.selPions, "LandingCraft" ) )
        if( ModuleBegins() ) then
            do
                if( DIA_IsListEmpty( self.listeTransporteurs ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
--[[//liste des pions que l'on va pouvoir transporter
]]                end

                self.listePionsATransporter = S_SelectionnePCEtSubordonnes( self._namedParams.mission.unitesATransporter_ )
                self.listePionsATransporter = S_Cherche_Automate_PionsOperationnels( self.listePionsATransporter )
                --[[// Si il n'y a aucune unité que l'on peut transporter
]]if( DIA_IsListEmpty( self.listePionsATransporter ) ) then
                    do
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                                                self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end

                    end
                end

            end
        end

        DEC_MRT_Valide()
                self.params.__returnValue = eActionEffectuee
        Halt( self )
        do return end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_Transporter = { "mission" }

includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/missions/prendreencompteprisonniers/MRT - PrendreEnComptePrisonniers.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_PrendreEnComptePrisonniers
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_PrendreEnComptePrisonniers"
{
    feedbacks = { { { "done_MIS_Automate_MRT_PrendreEnComptePrisonniers" }, "MIS_Automate_MRT_PrendreEnComptePrisonniers" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_PrendreEnComptePrisonniers, {value} ) end,
    activations =
    {
        { "ACT_Warning", { "done_ACT_Warning" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Mission_Automate_AssignerPrendreEnComptePrisonniersA", { "done_BEH_Mission_Automate_AssignerPrendreEnComptePrisonniersA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local eValidite = nil
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_MRT_PrendreEnComptePrisonniers : debut MRT $" )
                                do
                    local listePionsSubordonnes = DEC_Automate_PionsAvecPC()
                    for _,x in pairs( listePionsSubordonnes or {} ) do
                    local _continue = true
                        do
                            local pion = x
                            F_Pion_SeteEtatEchelon( pion, eEtatEchelon_Second )
                            F_Pion_SeteEtatSoutien( pion, eEtatSoutien_aucun )
                        end

                    end

                end

                local loc = DEC_ConnaissanceObjet_Localisation( self._namedParams.mission.campPrisonniers_, eValidite )
                local point = nil
                if( not DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( loc, point ) ) then
                    do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleZoneHorsFuseau, } )
                                                Halt( self )
                        do return end

                    end
                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { 1, } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        if( not DIA_IsListEmpty( DEC_Automate_PionsSansPC() ) ) then
            Activate( self.activations.BEH_Mission_Automate_AssignerPrendreEnComptePrisonniersA, 1, { ePhase_MRT, DIA_GetAt( DEC_Automate_PionsSansPC(), 0 ), self._namedParams.mission.unitesRendues_, self._namedParams.mission.campPrisonniers_, eEtatEchelon_Premier, } )
        else
            Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossible, } )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_PrendreEnComptePrisonniers = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_PrendreEnComptePrisonniers, "ACT_Warning", nodes.ACT_Warning }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_PrendreEnComptePrisonniers, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_PrendreEnComptePrisonniers, "BEH_Mission_Automate_AssignerPrendreEnComptePrisonniersA", nodes.BEH_Mission_Automate_AssignerPrendreEnComptePrisonniersA }

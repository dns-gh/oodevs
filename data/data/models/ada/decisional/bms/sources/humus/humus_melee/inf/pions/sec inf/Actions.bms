includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/sec inf/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[/** \file S VAB - Actions.hal
 *
 * $Author: Jcr $
 * $Modtime: 22/09/05 18:27 $
 * $Revision: 24 $
 *
 */]]--[[// Created: JCR 03-02-13
]]--[[// *****************************************************************************
]]--[[//-----------------------------------------------------------------------------
]]--[[// Action de Debarquement de la Section d'Infanterie
]]--[[// @perc pourcentage total de debarquement
]]
--[[//-----------------------------------------------------------------------------
]]
node "ACT_Transport_Pion_INF_Debarquer"
{
    feedbacks = { { { "done_ACT_Transport_Pion_INF_Debarquer" }, "ACT_Transport_Pion_INF_Debarquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Transport_Pion_INF_Debarquer, {value} ) end,
    actuators =
    {
        deplacement = 1,
        debarquement = 1,
    },

    create = function( self )
    end,

    select = function( self )
                self.bReprise = self.bReprise or false
        self.eEtat_EmbDeb = self.eEtat_EmbDeb or eActionEmbDeb_EnCours
        self.actionID = self.actionID or 0
        if( ModuleBegins() ) then
            do
                DEC_Message( eRC_DisembarkmentStarted )
                self.actionID = DEC_StartDebarquement(  )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtat_EmbDeb = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtat_EmbDeb
                if switch_1 == eActionEmbDeb_EnCours then
                    _continue = false
                elseif switch_1 == eActionEmbDeb_ErreurEmbDebEnMemeTemps
                or switch_1 == eActionEmbDeb_PasDeTransporteurs then
                    DEC_Trace( "Debarquement : ignore transporteur" )
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionEmbDeb_Termine then
                    DEC_Message( eRC_DisembarkmentFinished )
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
            end

        if( self.bReprise ) then
            do
                DEC_Message( eRC_DisembarkmentResumed )
                DEC_ReprendAction( self.actionID )
                --[[// arret du debarquement
]]self.bReprise = false
            end
        end

--[[// arret du debarquement
]]--[[//=============================================================================
]]--[[//=============================================================================
]]--[[// Gestion des types de tir, debarques/embarques
]]--[[//=============================================================================
]]    end,

    deselect = function( self )
                DEC_Message( eRC_DisembarkmentInterrupted )
        DEC_PauseAction( self.actionID )
        self.bReprise = true
    end,

    destroy = function( self )
                DEC_Trace( "Debarquement : spontaneous end" )
        DEC_StopAction( self.actionID )
    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Action de destruction d'un ennemi uniquement avec la composante debarque
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Tir_Pion_INF_TirDebarque"
{
    feedbacks = { { { "done_ACT_Tir_Pion_INF_TirDebarque" }, "ACT_Tir_Pion_INF_TirDebarque" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_Pion_INF_TirDebarque, {value} ) end,
    actuators =
    {
        tir_debarque = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirDirect_Running
        self.bReprendre = self.bReprendre or false
        self.actionID = self.actionID or 0
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Trace( "debut tir fantassins" )
                self.actionID = DEC_StartTirDirectDebarques( self._namedParams.repEni, 1, eTirDirectNormal )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

         do
            local _continue = true
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]            local switch_1 = self.eTir
                if switch_1 == eActionTirDirect_EnemyDestroyed then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Impossible then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Finished then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_NoAmmo then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_NoCapacity then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Running then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_Executer )
                    do
                    end

                    _continue = false
                                end
            end

                self:SendFeedback( eActionEnCours )
        do return end

--[[//-----------------------------------------------------------------------------
]]--[[// Demande de tir de couverture
]]--[[// Tir uniquement avec la composante VAB ( qd les fantassins sont debarques )
]]--[[//-----------------------------------------------------------------------------
]]    end,

    deselect = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir fantassins: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir fantassins" )
        DEC_StopAction( self.actionID )
    end,

}

node "ACT_Tir_Pion_INF_TirCouverture"
{
    feedbacks = { { { "done_ACT_Tir_Pion_INF_TirCouverture" }, "ACT_Tir_Pion_INF_TirCouverture" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_Pion_INF_TirCouverture, {value} ) end,
    actuators =
    {
        tir_couverture = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    select = function( self )
                self.eTir = self.eTir or eActionTirDirect_Running
        self.bReprendre = self.bReprendre or false
        self.actionID = self.actionID or 0
        if( self.bReprendre ) then
            do
                self.bReprendre = false
                DEC_ReprendAction( self.actionID )
            end
        end

        if( ModuleBegins() ) then
            do
                                do
                end

                DEC_Trace( "debut tir couverture" )
                self.actionID = DEC_StartTirDirectTransporteurs( self._namedParams.repEni, 1, eTirDirectNormal )
                actionCallbacks[ self.actionID ] = function( arg ) self.eTir = arg end

                self.bReprendre = true
            end
        end

         do
            local _continue = true
--[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMunition );
]]            local switch_1 = self.eTir
                if switch_1 == eActionTirDirect_EnemyDestroyed then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Impossible then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Finished then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_NoAmmo then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_NoCapacity then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
                    do
                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if switch_1 == eActionTirDirect_Running then
                    F_Pion_SeteEtatFeu( myself, eEtatFeu_Executer )
                    do
                    end

                    _continue = false
                                end
            end

                self:SendFeedback( eActionEnCours )
        do return end

    end,

    deselect = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir couverture: perte de focus" )
        self.bReprendre = true
        DEC_PauseAction( self.actionID )
    end,

    destroy = function( self )
                F_Pion_SeteEtatFeu( myself, eEtatFeu_aucun )
        do
        end

        DEC_Trace( "fin tir couverture" )
        DEC_StopAction( self.actionID )
    end,

}

node "ACT_Pion_VAB_ControleZone"
{
    feedbacks = { { { "done_ACT_Pion_VAB_ControleZone" }, "ACT_Pion_VAB_ControleZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Pion_VAB_ControleZone, {value} ) end,
    actuators =
    {
        controle_zone = 1,
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locZone = self.params[1]
        self._namedParams.rDist = self.params[2]
        self._namedParams.bFaireFeu = self.params[3]
    end,

    select = function( self )
                self.bInit = self.bInit or true
        self.bTirDeclenche = self.bTirDeclenche or false
        self.actionID = self.actionID or 0
        --[[// Le rc eRC_DebutControleZone est fait au debut de la phase de la 
]]--[[// mission
]]if( self.bInit ) then
            do
                --[[// {	if( ! DEC_Agent_AutomateEstEmbraye() )	    DEC_RC(  eRC_DebutControleZone  );    else        DEC_Message(  eRC_DebutControleZone  );}
]]DEC_Trace( "Controle Zone : debut" )
                self.actionID = DEC_StartControlerZone( self._namedParams.rDist, self._namedParams.bFaireFeu )
                actionCallbacks[ self.actionID ] = function( arg ) self._namedParams.locZone = arg end

            end
        end

        if( self.bTirDeclenche ) then
            do
                if( not DEC_Agent_AutomateEstEmbraye() ) then
                    DEC_RC( eRC_TirExecute )
                else
                    DEC_Message( eRC_TirExecute )
                end

            end
        end

        self.bInit = false
--[[//-----------------------------------------------------------------------------
]]--[[// Preparation de l'objet
]]--[[//-----------------------------------------------------------------------------
]]    end,

    deselect = function( self )
                self.bInit = true
        DEC_Trace( "Controle Zone : fin" )
        DEC_StopAction( self.actionID )
        do
            if( not DEC_Agent_AutomateEstEmbraye() ) then
                DEC_RC( eRC_FinControleZone )
            else
                DEC_Message( eRC_FinControleZone )
            end

        end

    end,

    destroy = function( self )
                if( not self.bInit ) then
            DEC_StopAction( self.actionID )
        end

    end,

}

--[[//booleens suspension reprise et terminaison
]]node "ACT_Obj_Pion_INF_PreparerAbattis"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_PreparerAbattis" }, "ACT_Obj_Pion_INF_PreparerAbattis" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_PreparerAbattis, {value} ) end,
    actuators =
    {
        deplacement = 2,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locObjet = self.params[1]
        self._namedParams.rLongueur = self.params[2]
    end,

    select = function( self )
        --[[//objet reel pour le creation de la representation de l'abatti
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or 0
        if( ModuleBegins() ) then
            do
                DEC_Trace( "preparation abatti ( l = " .. FloatToString( self._namedParams.rLongueur ) .. " ) : debut" )
                if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( eTypeObjectAbatti ) ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                self.actionID = DEC_StartPreparerObjet( self.repObj, S_TypeObject_ToString( eTypeObjectAbatti ), self._namedParams.locObjet, self._namedParams.rLongueur )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end
                actionKnowledgeCallbacks[ self.actionID ] = function( arg ) self.repObj = arg end

                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
--[[// Pas de delais de reorganisation du chantier
]]            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "preparation : fin" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "preparation : manque dotations." )
                                cases_switch_1[3] = true
                end
                if cases_switch_1[3] or switch_1 == eActionObjetImpossible then
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "preparation : reprise" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[//-----------------------------------------------------------------------------
]]--[[// Valoriser l'objet ( miner )
]]--[[//-----------------------------------------------------------------------------
]]    end,

    deselect = function( self )
                DEC_Trace( "preparation : suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "preparation : arretee" )
        DEC_StopAction( self.actionID )
    end,

}

--[[//booleens suspension reprise et terminaison
]]node "ACT_Obj_Pion_INF_Valoriser"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_Valoriser" }, "ACT_Obj_Pion_INF_Valoriser" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_Valoriser, {value} ) end,
    actuators =
    {
        deplacement = 2,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
        --[[//objet reel pour le creation de la representation de l'abatti
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.obj = self.obj or nil
        if( ModuleBegins() ) then
            do
                DEC_Trace( "valorisation : debut" )
                self.actionID = DEC_StartValoriserObjet( self._namedParams.repObj )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end

                                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
--[[// Pas de delais de reorganisation du chantier
]]            local switch_1 = self.eEtatObjet
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "valorisation : fin" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetImpossible
                or switch_1 == eActionObjetManqueDotation then
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "valorisation : reprise" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

--[[//-----------------------------------------------------------------------------
]]--[[// Activation de l'objet
]]--[[//-----------------------------------------------------------------------------
]]    end,

    deselect = function( self )
                DEC_Trace( "valorisation : suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "valorisation : arretee" )
        DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_INF_Activer"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_Activer" }, "ACT_Obj_Pion_INF_Activer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_Activer, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Trace( "activation : debut" )
        end

        if( DEC_ActiverObjet( self._namedParams.repObj ) ) then
            do
                DEC_Trace( "activation : fin" )
                                self:SendFeedback( eActionEffectuee )
                Halt( self )
                do return end

            end
        else
do
                DEC_Trace( "activation : impossible" )
                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
            end,

}


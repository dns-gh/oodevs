includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/behaviors/medo/Behaviors - Medo - ASS.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Behaviors/Medo/Behaviors - Medo - ASS.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 24/03/05 15:38 $
]]--[[// $Revision: 8 $
]]--[[// $Workfile: Behaviors - Medo - ASS.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
include "Common/Automates/Actions/Medo/Actions - Medo - ASS.bms"


--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA" }, "BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA", { "done_ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptZone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, rForce, { self._namedParams.ePhase, self._namedParams.pPion, self._namedParams.ptZone, } )
self.done_ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_ASS_AcquerirObjectifsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_ASS_AcquerirObjectifsA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_ASS_AcquerirObjectifsA" }, "BEH_Mission_Automate_ASS_AcquerirObjectifsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_ASS_AcquerirObjectifsA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_ASS_AcquerirObjectifsA", { "done_ACT_Mission_Automate_ASS_AcquerirObjectifsA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.ptDeploiement = self.params[3]
        self._namedParams.locZone = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_ASS_AcquerirObjectifsA, rForce, { self._namedParams.ePhase, self._namedParams.pPion, self._namedParams.ptDeploiement, self._namedParams.locZone, } )
self.done_ACT_Mission_Automate_ASS_AcquerirObjectifsA = function( self, _, v ) self.eActionCreation = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AcquerirObjectifsA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AcquerirObjectifsA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AcquerirObjectifsA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AcquerirObjectifsA, "ACT_Mission_Automate_ASS_AcquerirObjectifsA", nodes.ACT_Mission_Automate_ASS_AcquerirObjectifsA }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA, "ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA", nodes.ACT_Mission_Automate_ASS_AssignerReconnaitreZoneDeploiementA }

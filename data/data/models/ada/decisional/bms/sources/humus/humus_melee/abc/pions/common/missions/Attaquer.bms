includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/pions/common/missions/Attaquer.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-10-27 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Pions/Common/Missions/Attaquer.hal $
]]--[[// $Author: Mia $
]]--[[// $Modtime: 23/09/05 19:27 $
]]--[[// $Revision: 28 $
]]--[[// $Workfile: Attaquer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_ABC_Attaquer
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Pion_ABC_Attaquer"
{
    feedbacks = { { { "done_BEH_Mission_Pion_ABC_Attaquer" }, "BEH_Mission_Pion_ABC_Attaquer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_ABC_Attaquer, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_MAJ_Pion_ABC_AgressiviteTir", { "done_BEH_MAJ_Pion_ABC_AgressiviteTir" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_Pion_ABC_GererDeboucher", { "done_BEH_Dep_Pion_ABC_GererDeboucher" } },
        { "BEH_Dep_ProgressionSur", { "done_BEH_Dep_ProgressionSur" } },
        { "ACT_Dep_ModulationVitesse", { "done_ACT_Dep_ModulationVitesse" } },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", { "done_BEH_Dep_SePosterFaceADirectionDangereuse" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params[1]
        self._namedParams.rPH = self.params[2]
        self._namedParams.eNiveauIdentificationEni = self.params[3]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Pion detruit
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( F_Pion_GeteEtatDestruction( myself ) ~= eEtatDestruction_None ) then
            self:SendFeedback( eActionEffectuee )
            Halt( self )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Agressivite
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_MAJ_Pion_ABC_AgressiviteTir, 1, { self._namedParams.rPH, } )
        if( ModuleBegins() ) then
            F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "MIS_Pion_ABC_Attaquer: debut", } )
                    self.ePhaseMission = eDonnerAssaut
                    _continue = false
                --[[// 4) Déboucher
]]                cases_switch_1[1] = true
elseif switch_1 == eDonnerAssaut then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                    Activate( self.activations.BEH_Dep_Pion_ABC_GererDeboucher, 1, {} )--[[// Gestion du déboucher
]]
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_ProgressionSur, 1, { self._namedParams.mission.itineraireAssaut_, eProgressionDefaut, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionSur = function( self, _, v ) self.eEtat = v[1] end
                    Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
                    _continue = false
                --[[// 5) Fin de la mission
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Pion_ABC_GererDeboucher
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_ABC_GererDeboucher"
{
    feedbacks = { { { "done_BEH_Dep_Pion_ABC_GererDeboucher" }, "BEH_Dep_Pion_ABC_GererDeboucher" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dep_Pion_ABC_GererDeboucher, {value} ) end,
    activations =
    {
        { "BEH_Ordre_SePosterPourDeboucher", { "done_BEH_Ordre_SePosterPourDeboucher" } },
        { "ACT_Points_Suppression", { "done_ACT_Points_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Regarder les eAvantPoint dans la liste des points interessants
]]--[[//-----------------------------------------------------------------------------
]]local listePointInterressant = DEC_GetCategory( "points_interressants" )
        for _,x in pairs( listePointInterressant or {} ) do
        local _continue = true
do
                local ptABC = x
                --[[// Traiter seulement les 'avantPoint'
]]if( DEC_IsAvantPoint( ptABC ) ) then
                    do
                        --[[// Cast
]]local repAvantPt = ptABC
                        if( DEC_GetTypePoint( DEC_GetDestPoint( repAvantPt ) ) == eTypePointLima ) then
                            do
                                --[[// cast
]]local pointLima = DEC_GetDestPoint( repAvantPt )
                                if( DEC_GetTypeLimaPoint( pointLima ) == eTypeLima_LD ) then
                                    do
                                        local lima = DEC_GetLimaPoint( pointLima )
                                        --[[// Flaguer dans gestion des limas générique
]]if( not DEC_GetMissionLimaFlag( lima ) ) then
                                            StartActivateOverride( self, self.activations.BEH_Ordre_SePosterPourDeboucher, 1, { lima, } )
                                        end

                                    end
                                end

                            end
                        end

                        Activate( self.activations.ACT_Points_Suppression, 1, { ptABC, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Ordre_SePosterPourDeboucher
]]--[[//
]]--[[//Commentaires :
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Ordre_SePosterPourDeboucher"
{
    feedbacks = { { { "done_BEH_Ordre_SePosterPourDeboucher" }, "BEH_Ordre_SePosterPourDeboucher" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Ordre_SePosterPourDeboucher, {value} ) end,
    activations =
    {
        { "ACT_Dep_SePoster", { "done_ACT_Dep_SePoster" } },
        { "ACT_Dep_PasserSurLima", { "done_ACT_Dep_PasserSurLima" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.LimaLD = self.params[1]
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------        
]]if( ModuleBegins() ) then
            do
                SetStateVariable( "VE_SePoster", 2 )
                Activate( self.activations.ACT_Dep_SePoster, 1, {} )
                                do return end

            end
--[[// Triche car on est avant lima...
]]        end

        Activate( self.activations.ACT_Dep_PasserSurLima, 1, { eEtatLima_LD, } )
        if( ( GetStateVariable( "VE_SePoster" ) == 0 or GetStateVariable( "VE_SePoster" ) == nil ) ) then
            do
                DEC_SetMissionLimaFlagHoraire( self._namedParams.LimaLD, true )
                DEC_SetMissionLimaFlag( self._namedParams.LimaLD, true )
                                Halt( self )
                do return end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ABC_GererDeboucher, "BEH_Ordre_SePosterPourDeboucher", nodes.BEH_Ordre_SePosterPourDeboucher }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ABC_GererDeboucher, "ACT_Points_Suppression", nodes.ACT_Points_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "BEH_MAJ_Pion_ABC_AgressiviteTir", nodes.BEH_MAJ_Pion_ABC_AgressiviteTir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "BEH_Dep_Pion_ABC_GererDeboucher", nodes.BEH_Dep_Pion_ABC_GererDeboucher }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Attaquer, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_SePosterPourDeboucher, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Ordre_SePosterPourDeboucher, "ACT_Dep_PasserSurLima", nodes.ACT_Dep_PasserSurLima }

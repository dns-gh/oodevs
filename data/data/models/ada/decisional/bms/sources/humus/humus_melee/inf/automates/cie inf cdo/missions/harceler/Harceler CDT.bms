includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/automates/cie inf cdo/missions/harceler/Harceler CDT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-07-29 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Cie Vab/Missions/Harceler/Harceler CDT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 26/08/05 17:57 $
]]--[[// $Revision: 23 $
]]--[[// $Workfile: Harceler CDT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]--[[/*
behavior MIS_Automate_CDT_INF_Harceler( T_Mission_Automate_INF_Harceler mission, id nDummy )
{
	when updated:
	{
		persistent E_EtatAction		eActionMission = eActionEnCours;		
	    if(!DEC_Nuit())
	    {
		//-----------------------------------------------------------------------------
		// Init
		//-----------------------------------------------------------------------------
		if( DIA_ModuleBegins() )
		{	
			DEC_SetMission( myself, mission );
			// Coordination lors de la mise en place du dispositif dans les fuseaux
			
			start behavior BEH_Conduite_Automate_GererFuseau();			
		}
		

		// Conduite des pions au niveau section
		//-----------------------------------------------------------------------------		
		if(  eActionMission == eActionEffectuee )    {         eActionMission=eActionEnCours;         { halt( eActionEffectuee ); }     }
		behavior BEH_Conduite_Automate_INF_Defaut( false ) return in eActionMission;
		behavior BEH_Conduite_Automate_INF_CadreOffensif();
		behavior BEH_Conduite_Automate_INF_Harceler();
    }
    else
    {
        action ACT_Info_Trace( "Il fait nuit, l'unité s'arrête" );			        
    }
	}

	on spontaneous end:
	{
	}
}

behavior BEH_Conduite_Automate_INF_Harceler()
{
	when updated:
	{
		persistent T_Mission_Automate_INF_Harceler  mission = DEC_GetMission(myself);
						
		if ( DIA_ModuleBegins() )
		{			
		}
						
		//---------------------------------------------------------------------
		// Gestion des RC recus 		
		//---------------------------------------------------------------------
		behavior BEH_Situation_Automate_INF_Harceler_GestionSituation();
			
        // ---------------------------------------------------------------------	
		// 
		//---------------------------------------------------------------------
		behavior BEH_Dispositif_Automate_INF_GererLesPionsDetruits( true );
		behavior BEH_Dispositif_Automate_INF_GererReleve();
	}
	
	on spontaneous end:
	{
	}
}


behavior BEH_Situation_Automate_INF_Harceler_GestionSituation()
{
	selection	selEnTete = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None );
	
	with ( x in DEC_Automate_PionsSansPC() ) 
	{
		T_PionModeleDEC	x_pion = x;
		
		// Situation Mission
		// --------------------------------------------------------------------
		switch ( F_Pion_GeteEtatPhaseMission( x_pion ) )
		{			
            case eEtatPhaseMission_FinMission:	
			{				
				switch ( F_Pion_GetmissionPrecedente( x_pion ) ) 
				{
                    case T_Mission_Pion_INF_Harceler:
                    case T_Mission_Pion_INF_ControlerSecteur:
					{
						start behavior BEH_Situation_Automate_INF_FinDeMission_Sur( x_pion );
						break;
					}
								
                    case T_Mission_Pion_INF_DetruireEmbuscade:	
                    case T_Mission_Pion_INF_Reduire:	
					{
						if ( DIA_Size( selEnTete ) <= 0 )
							return;
						T_Pion	pPion = DIA_GetAt( selEnTete, 0);
						// On reassigne la mission Appuye
						switch(  x_pion.__type_ )	{    	case Peloton_AMX:        case Peloton_XL: 		{						 									behavior BEH_Mission_Automate_ABC_AssignerSoutenirA( ePhase_CDT, x_pion, pPion, eEtatEchelon_Second );			break;		}    	case SectionInfanterie:    	case SectionInfanterie_MILAN:    	case SectionInfanterie_HOT:	    	case SectionInfanterie_Appui:    	case GroupeInfanterie_Mortier:		{																								behavior BEH_Mission_Automate_INF_AssignerAppuyerA( ePhase_CDT, x_pion, pPion, eEtatEchelon_Second );								
			break;
		}
	}
						break;
					}
				}
				F_Pion_SeteEtatEchelon( x_pion, eEtatEchelon_Second );	
				break;
			}
			
            case eEtatPhaseMission_ArriveSurLocalisation:
			{
				if ( S_Misc_EstMissionAffectee_Pion( x_pion, T_Mission_Pion_INF_Harceler ) )
					start behavior BEH_Conduite_Automate_INF_Harceler_FaireRejoindrePositionRegroupement();				
				break;
			}
		}
		
		// Situation Info
		// --------------------------------------------------------------------
	}
}

behavior BEH_Conduite_Automate_INF_Harceler_FaireRejoindrePositionRegroupement()
{
	persistent T_Mission_Automate_INF_Harceler	mission = DEC_GetMission(myself);
	persistent T_Point							ptRegroupement = S_Geometrie_BarycentreZone( mission.pointRegroupement_ );
	
	if ( DIA_ModuleBegins() )
	{				
		behavior BEH_Mission_Automate_AssignerStationnerA( ePhase_CDT, DEC_Automate_PionPC(), ptRegroupement );
		with ( x_pion in S_ObtenirTousPionsDe( eEtatEchelon_Second ) )		
			behavior BEH_Mission_Automate_AssignerFaireMouvementA( ePhase_CDT, x_pion, ptRegroupement, eEtatEchelon_Second );			
	}
}
*/]]--[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]--[[// Coordination lors de la mise en place du dispositif dans les fuseaux
]]--[[// Conduite des pions au niveau section
]]--[[//-----------------------------------------------------------------------------		
]]--[[//---------------------------------------------------------------------
]]--[[// Gestion des RC recus 		
]]--[[//---------------------------------------------------------------------
]]--[[// Situation Mission
]]--[[// --------------------------------------------------------------------
]]--[[// On réassigne les missions Appuyer et Soutenir
]]--[[//Seulement 5 pions sont concernés par la mission REZZOU (4 INF + 1 AC)
]]--[[//Fin de la posture : Se Poster
]]

node "MIS_Automate_CDT_INF_Rezzou"
{
    feedbacks = { { { "done_MIS_Automate_CDT_INF_Rezzou" }, "MIS_Automate_CDT_INF_Rezzou" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_CDT_INF_Rezzou, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_GererFuseau", { "done_BEH_Conduite_Automate_GererFuseau" } },
        { "BEH_Conduite_Automate_INF_Defaut", { "done_BEH_Conduite_Automate_INF_Defaut" } },
        { "BEH_Conduite_Automate_INF_CadreOffensif", { "done_BEH_Conduite_Automate_INF_CadreOffensif" } },
        { "BEH_Conduite_Automate_INF_Rezzou", { "done_BEH_Conduite_Automate_INF_Rezzou" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
                self.eActionMission = self.eActionMission or eActionEnCours
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                StartActivateOverride( self, self.activations.BEH_Conduite_Automate_GererFuseau, 1, {} )
            end
        end

        if( self.eActionMission == eActionEffectuee ) then
            do
                self.eActionMission = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Conduite_Automate_INF_Defaut, 1, { false, } )
self.done_BEH_Conduite_Automate_INF_Defaut = function( self, _, v ) self.eActionMission = v[1] end
        Activate( self.activations.BEH_Conduite_Automate_INF_CadreOffensif, 1, {} )
        Activate( self.activations.BEH_Conduite_Automate_INF_Rezzou, 1, {} )
    end,

    destroy = function( self )
            end,

}

node "BEH_Conduite_Automate_INF_Rezzou"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_Rezzou" }, "BEH_Conduite_Automate_INF_Rezzou" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_Rezzou, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_Rezzou_GestionSituation", { "done_BEH_Situation_Automate_INF_Rezzou_GestionSituation" } },
        { "BEH_Dispositif_Automate_INF_GererLesPionsDetruits", { "done_BEH_Dispositif_Automate_INF_GererLesPionsDetruits" } },
        { "BEH_Dispositif_Automate_INF_GererReleve", { "done_BEH_Dispositif_Automate_INF_GererReleve" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        if( ModuleBegins() ) then
            do
            end
        end

        Activate( self.activations.BEH_Situation_Automate_INF_Rezzou_GestionSituation, 1, {} )
        Activate( self.activations.BEH_Dispositif_Automate_INF_GererLesPionsDetruits, 1, { true, } )
        Activate( self.activations.BEH_Dispositif_Automate_INF_GererReleve, 1, {} )
    end,

    destroy = function( self )
            end,

}

node "BEH_Situation_Automate_INF_Rezzou_GestionSituation"
{
    feedbacks = { { { "done_BEH_Situation_Automate_INF_Rezzou_GestionSituation" }, "BEH_Situation_Automate_INF_Rezzou_GestionSituation" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Situation_Automate_INF_Rezzou_GestionSituation, {value} ) end,
    activations =
    {
        { "BEH_Situation_Automate_INF_FinDeMission_Sur", { "done_BEH_Situation_Automate_INF_FinDeMission_Sur" } },
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
        { "ACT_Ordre_Automate_Pause", { "done_ACT_Ordre_Automate_Pause" } },
        { "ACT_Ordre_Automate_Continue", { "done_ACT_Ordre_Automate_Continue" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local selEnTete = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        self.eOrdre = self.eOrdre or eActionEnCours
        for _,x in pairs( DEC_Automate_PionsSansPC() or {} ) do
        local _continue = true
do
                local x_pion = x
                 do
                    local _continue = true
                    local switch_1 = F_Pion_GeteEtatPhaseMission( x_pion )
                    local cases_switch_1 = {}
                        if switch_1 == eEtatPhaseMission_FinMission then
                             do
                                local _continue = true
                                local switch_2 = F_Pion_GetmissionPrecedente( x_pion )
                                local cases_switch_2 = {}
                                    if switch_2 == "T_Mission_Pion_INF_Rezzou"
                                    or switch_2 == "T_Mission_Pion_INF_Harceler"
                                    or switch_2 == "T_Mission_Pion_INF_ControlerSecteur" then
                                        StartActivateOverride( self, self.activations.BEH_Situation_Automate_INF_FinDeMission_Sur, 1, { x_pion, } )
                                        _continue = false
                                                                        cases_switch_2[1] = true
elseif switch_2 == "T_Mission_Pion_INF_DetruireEmbuscade"
                                    or switch_2 == "T_Mission_Pion_INF_Reduire" then
                                        if( #( selEnTete ) <= 0 ) then
                                            do return end
                                        end

                                        local pPion = DIA_GetAt( selEnTete, 0 )
                                         do
                                            local _continue = true
                                            local switch_3 = x_pion:GetType()
                                            local cases_switch_3 = {}
                                                if switch_3 == "Peloton_AMX"
                                                or switch_3 == "Peloton_XL" then
                                                    Activate( self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_CDT, x_pion, pPion, eEtatEchelon_Second, } )
                                                    _continue = false
                                                                                                cases_switch_3[1] = true
elseif switch_3 == "SectionInfanterie"
                                                or switch_3 == "SectionInfanterie_MILAN"
                                                or switch_3 == "SectionInfanterie_HOT"
                                                or switch_3 == "SectionInfanterie_Appui"
                                                or switch_3 == "GroupeInfanterie_Mortier" then
                                                    Activate( self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_CDT, x_pion, pPion, eEtatEchelon_Second, } )
                                                    _continue = false
                                                                                                cases_switch_3[2] = true
                                                end
                                            end

                                        _continue = false
                                                                        cases_switch_2[2] = true
                                    end
                                end

                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == eEtatPhaseMission_AttenteConditionFavorablePourInfiltration then
                            if( S_Misc_EstMissionAffectee_Pion( x_pion, "T_Mission_Pion_INF_Rezzou" ) ) then
                                do
                                    Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { x_pion, } )
                                    local ordres_recus = DEC_GetCategory( "ordres_recus" )
                                    for _,ordreRecus in pairs( ordres_recus or {} ) do
                                    local _continue = true
                                        do
                                            local ordre = ordreRecus
                                            local repOrdre = ordre
                                             do
                                                local _continue = true
                                                local switch_2 = repOrdre:GetType()
                                                local cases_switch_2 = {}
                                                    if switch_2 == "Rep_OrderConduite_Poursuivre" then
                                                                                                            DEC_Trace( "======= Ordre --> POURSUIVRE =====" )
                                                        SetStateVariable( "VE_SePoster", 0 )
                                                        F_Pion_SeteEtatPhaseMission( x_pion, eEtatPhaseMission_ProgressionVersLocalisation )
                                                        Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { x_pion, } )
                                                        _continue = false
                                                                                                        cases_switch_2[1] = true

                                                    else
                                                                                                            _continue = false
                                                                                                        end
                                                end

                                            Activate( self.activations.ACT_Ordre_Suppression, 1, { ordre, } )
                                        end

                                    end

                                end
                            end

                                                cases_switch_1[2] = true
                        end
                    end

            end

        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_CDT_INF_Rezzou = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Rezzou, "BEH_Situation_Automate_INF_Rezzou_GestionSituation", nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Rezzou, "BEH_Dispositif_Automate_INF_GererLesPionsDetruits", nodes.BEH_Dispositif_Automate_INF_GererLesPionsDetruits }
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_Rezzou, "BEH_Dispositif_Automate_INF_GererReleve", nodes.BEH_Dispositif_Automate_INF_GererReleve }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "BEH_Situation_Automate_INF_FinDeMission_Sur", nodes.BEH_Situation_Automate_INF_FinDeMission_Sur }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.BEH_Situation_Automate_INF_Rezzou_GestionSituation, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_INF_Rezzou, "BEH_Conduite_Automate_GererFuseau", nodes.BEH_Conduite_Automate_GererFuseau }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_INF_Rezzou, "BEH_Conduite_Automate_INF_Defaut", nodes.BEH_Conduite_Automate_INF_Defaut }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_INF_Rezzou, "BEH_Conduite_Automate_INF_CadreOffensif", nodes.BEH_Conduite_Automate_INF_CadreOffensif }
connections[ #connections + 1 ] = { nodes.MIS_Automate_CDT_INF_Rezzou, "BEH_Conduite_Automate_INF_Rezzou", nodes.BEH_Conduite_Automate_INF_Rezzou }

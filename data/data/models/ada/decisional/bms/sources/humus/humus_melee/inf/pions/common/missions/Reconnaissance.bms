includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/missions/Reconnaissance.bms"] = true


--[[//=============================================================================
]]--[[//=============================================================================
]]--[[//						Squelette de la mission
]]--[[//	
]]--[[//=============================================================================
]]node "BEH_Mission_Pion_INF_RecoAxe"
{
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", {} },
        { "BEH_Mot_Pion_Embarquer", {} },
        { "BEH_Delai_Pion_INF_PreparerMission", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Obs_EtablirVisionCur", {} },
        { "BEH_Dep_ProgressionSur", {} },
        { "BEH_Lima_GererLimas", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        if( S_RapForLocal() == eEtatRapportDeForce_Favorable ) then
            do
                if( ModuleBegins() ) then
                    StartActivateOverride( self, self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, {} )
                end

                do
                end

                Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
                 do
                    local _continue = true
                    local switch_1 = self.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePreparerMission then
                            if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                                do
                                    Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1.2, { M_TEMPS_PREPARATION_MISSION_RECO(), } )
                                                                        do return end

                                end
                            end

                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.1, { eEtatPhaseMission_DebutMission, } )
                            self.ePhase = eProgresser
                                                cases_switch_1[1] = true
                        end
                        if cases_switch_1[1] or switch_1 == eProgresser then
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionSurAxe, } )
                            if( self.eAction == eActionEffectuee ) then
                                do
                                    self.eAction = eActionEnCours
                                                                        do
                                        self.ePhase = eFinMission
                                    end

                                end
--[[// dispositif de deplacement
]]                            end

                            Activate( self.activations.ACT_Obs_EtablirVisionCur, 1, {} )
                            --[[// Progression sur l'itineraire
]]Activate( self.activations.BEH_Dep_ProgressionSur, 1, setmetatable( { self.mission.itineraire_, eProgressionReco, eTypeItiReconnaissance, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                            Activate( self.activations.BEH_Lima_GererLimas, 1.5, {} )
                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                            _continue = false
                                                cases_switch_1[3] = true
                        end
                    end

                                self.params.__returnValue = self.ePhase
                do return end

            end
--[[//Rapport de force défavorable ou neutre => se replier
]]        else
do
                DEC_Trace( "Rapport de force défavorable - Repli sur la zone de regroupement" )
                self.ePhase = eSeReplier
            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "ACT_Obs_EtablirVisionCur", nodes.ACT_Obs_EtablirVisionCur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_RecoAxe, "BEH_Lima_GererLimas", nodes.BEH_Lima_GererLimas }

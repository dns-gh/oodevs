includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/missionsreactionpopulations/controlerpopulationsdanszone/MRT - ControlerPopulationsDansZone.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_ControlerPopulationsDansZone
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ControlerPopulationsDansZone"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ControlerPopulationsDansZone" }, "MIS_Automate_MRT_ControlerPopulationsDansZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ControlerPopulationsDansZone, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Mission_Automate_AssignerControlerPopulationsDansZoneAListe", { "done_BEH_Mission_Automate_AssignerControlerPopulationsDansZoneAListe" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        self.ePhase = self.ePhase or eMRT_AssignerMissions
        self.points = self.points or DEC_Geometrie_CreerListePoints()
        self.listePions = self.listePions or S_Cherche_Automate_PionsOperationnels( DEC_Automate_PionsSansPC() )
        if( ModuleBegins() ) then
            do
                if( DIA_IsListEmpty( self._namedParams.mission.zones_ ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_SetMission( myself, self._namedParams.mission )
                if( DIA_IsListEmpty( self.listePions ) ) then
                    do
                        self.ePhase = eMRT_Valider
                        DEC_Warning( eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles )
                    end
                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_AssignerMissions then
                    --[[// GESTION DES ERREURS / CONTROLE VALIDITE MRT
]]if( self.eValidationMRT == eActionImpossible ) then
                        do
                            DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eValidationMRT == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[// Assigner interdire franchissement
]]                    end

                    Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.listePions ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
                    Activate( self.activations.BEH_Mission_Automate_AssignerControlerPopulationsDansZoneAListe, 1, { ePhase_MRT, self.listePions, self._namedParams.mission.zones_, } )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eMRT_MissionImpossible then
                    DEC_Trace( "MISSION IMPOSSIBLE" )
                    DEC_RC( eRC_MissionImpossible )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                                end
                if cases_switch_1[2] or switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                                end
            end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ControlerPopulationsDansZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ControlerPopulationsDansZone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ControlerPopulationsDansZone, "BEH_Mission_Automate_AssignerControlerPopulationsDansZoneAListe", nodes.BEH_Mission_Automate_AssignerControlerPopulationsDansZoneAListe }

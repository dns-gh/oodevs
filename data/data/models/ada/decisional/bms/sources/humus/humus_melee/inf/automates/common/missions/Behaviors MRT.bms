includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/automates/common/missions/Behaviors MRT.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Missions/Behaviors MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 27 $
]]--[[// $Workfile: Behaviors MRT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// Mission MRT Generiques infanterie
]]include "Humus/Humus_Melee/Inf/Automates/Common/Missions/Behaviors MRT - Statique.bms"

include "Humus/Humus_Melee/Inf/Automates/Common/Missions/Behaviors MRT - Manoeuvre.bms"

include "Humus/Humus_Melee/Inf/Automates/Common/Missions/Behaviors MRT - Retrograde.bms"


--[[//-----------------------------------------------------------------------------
]]--[[// PC
]]--[[//-----------------------------------------------------------------------------    	
]]node "BEH_Medo_Automate_INF_AssignerMission_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_AssignerMission_PC" }, "BEH_Medo_Automate_INF_AssignerMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_AssignerMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPion_PE = self.params[1]
        self._namedParams.selPion_SE = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------    	
]]local pAppui = nil
                if( #( self._namedParams.selPion_SE ) ~= 0 ) then
                    pAppui = DIA_GetAt( self._namedParams.selPion_SE, #( self._namedParams.selPion_SE ) - 1 )
                else
                    pAppui = DIA_GetAt( self._namedParams.selPion_PE, 0 )
                end

                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, DEC_Automate_PionPC(), pAppui, } )
            end
        end

    end,

--[[// ============================================================================
]]--[[// $Created : JCR : 07/07/2005 16:46
]]--[[// BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC
]]--[[// Assigne une mission de deplacement du pc vers la fin du fuseau
]]--[[// ============================================================================
]]}

node "BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC" }, "BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerDecrocherA", { "done_BEH_Mission_Automate_AssignerDecrocherA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPionsAttaque = self.params[1]
        self._namedParams.lstPionsAppui = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
                self.ptFin = self.ptFin or DEC_Geometrie_CalculerPointArriveePourPion( DEC_Automate_PionPC() )
        --[[// Donner la mission freiner au pion PC
]]if( ModuleBegins() ) then
            StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerDecrocherA, 1, { ePhase_MRT, DEC_Automate_PionPC(), self.ptFin, eEtatEchelon_Second, } )
        end

    end,

    destroy = function( self )
            end,

}

node "BEH_Medo_Automate_INF_InitialiseSE"
{
    feedbacks = { { { "done_BEH_Medo_Automate_INF_InitialiseSE" }, "BEH_Medo_Automate_INF_InitialiseSE" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_INF_InitialiseSE, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPionsAppui = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            S_Medo_Automate_InitialiseSE( self._namedParams.lstPionsAppui, eEtatEchelon_Second )
        end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// Soutenir pour le pion ABC de la Compagnie INF
]]--[[//-----------------------------------------------------------------------------    	
]]}

node "BEH_Medo_Automate_ABC_AssignerMissionSoutenirA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionSoutenirA" }, "BEH_Medo_Automate_ABC_AssignerMissionSoutenirA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionSoutenirA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerSoutenirA", { "done_BEH_Mission_Automate_ABC_AssignerSoutenirA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lstPionsAppui = self.params[1]
        self._namedParams.pionsAntiChar = self.params[2]
        self._namedParams.eEtatEchelon_Second = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        for _,pPion in pairs( --[[//Définition du pion ABC en appui : T55
]]self._namedParams.lstPionsAppui or emptyTable ) do
        local _continue = true
do
                for _,pPionAAppuyer in pairs( --[[//Défintion du pion à appuyer par le pion ABC : Pion AntiChar
]]self._namedParams.pionsAntiChar or emptyTable ) do
                local _continue = true
do
                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSoutenirA, 1, { ePhase_MRT, pPion, pPionAAppuyer, self._namedParams.eEtatEchelon_Second, } )
                    end

                end

            end

        end

    end,

--[[//-----------------------------------------------------------------------------
]]--[[// SemparerZone pour le pion ABC de la Compagnie INF lors du REZZOU
]]--[[//-----------------------------------------------------------------------------    	
]]}

node "BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA" }, "BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "BEH_Mission_Automate_ABC_AssignerSemparerZoneA", { "done_BEH_Mission_Automate_ABC_AssignerSemparerZoneA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions_PE = self.params[1]
        self._namedParams.locZone = self.params[2]
        self._namedParams.eEtatEchelon_Premier = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
                self.ptZone = self.ptZone or S_Geometrie_BarycentreZone( self._namedParams.locZone )
        if( self.ptZone == nil ) then
            do
                if( ModuleBegins() ) then
                    do
                        DEC_Trace( "Zone hors fuseau." )
                        DEC_Warning( eRC_MissionImpossibleZoneHorsFuseau )
                    end
                end

                Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, 1, emptyTable )
                                self:SendFeedback( eActionImpossible )
                do return end

            end
--[[//-------------------------------------------------------------------------
]]--[[// Assignement des missions aux differents pions
]]--[[//-------------------------------------------------------------------------        
]]        end

        if( ModuleBegins() ) then
for _,x_pion in pairs( self._namedParams.selPions_PE or emptyTable ) do
            local _continue = true
                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSemparerZoneA, 1, { ePhase_MRT, x_pion, self._namedParams.locZone, self._namedParams.eEtatEchelon_Premier, } )

            end
        end

    end,

    destroy = function( self )
            end,

}

node "BEH_Medo_Automate_AssignerMission_PC"
{
    feedbacks = { { { "done_BEH_Medo_Automate_AssignerMission_PC" }, "BEH_Medo_Automate_AssignerMission_PC" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_AssignerMission_PC, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerSuivreA", { "done_BEH_Mission_Automate_AssignerSuivreA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.selPion_PE = self.params[3]
        self._namedParams.selPion_SE = self.params[4]
    end,

    activate = function( self )
        local Activate = Activate
        if( ModuleBegins() ) then
            do
                --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------    	
]]local pAppui = nil
                if( #( self._namedParams.selPion_SE ) ~= 0 ) then
                    pAppui = DIA_GetAt( self._namedParams.selPion_SE, #( self._namedParams.selPion_SE ) - 1 )
                else
                    pAppui = DIA_GetAt( self._namedParams.selPion_PE, 0 )
                end

                StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerSuivreA, 1, { ePhase_MRT, self._namedParams.pPion, pAppui, } )
            end
        end

    end,

}

node "BEH_Medo_Automate_HUMUS_AssignerAppuyerA_Mortier"
{
    feedbacks = { { { "done_BEH_Medo_Automate_HUMUS_AssignerAppuyerA_Mortier" }, "BEH_Medo_Automate_HUMUS_AssignerAppuyerA_Mortier" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_HUMUS_AssignerAppuyerA_Mortier, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_INF_AssignerAppuyerA", { "done_BEH_Mission_Automate_INF_AssignerAppuyerA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions_Mortier = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.pionPC = self.pionPC or DEC_Automate_PionPC()
        self.lstPions = self.lstPions or DEC_Automate_PionsSansPC()
        self.bTrouver = self.bTrouver or false
        if( ModuleBegins() ) then
            do
                for _,x1 in pairs( self.lstPions or emptyTable ) do
                local _continue = true
                    do
                        local x_pion = x1
                        if( ( x_pion:GetType() == "Peloton_AMX" or x_pion:GetType() == "Peloton_XL" ) and self.bTrouver == false ) then
                            do
                                for _,x_inf in pairs( self._namedParams.selPions_Mortier or emptyTable ) do
                                local _continue = true
                                    do
                                        StartActivateOverride( self, self.activations.BEH_Mission_Automate_INF_AssignerAppuyerA, 1, { ePhase_MRT, x_inf, x_pion, eEtatEchelon_Second, } )
                                        self.bTrouver = true
                                        break
                                    end

                                end

                            end
                        end

                        if( self.bTrouver ) then
                            do
                                break
                            end
                        end

                    end

                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionSemparerZoneA, "BEH_Mission_Automate_ABC_AssignerSemparerZoneA", nodes.BEH_Mission_Automate_ABC_AssignerSemparerZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionSoutenirA, "BEH_Mission_Automate_ABC_AssignerSoutenirA", nodes.BEH_Mission_Automate_ABC_AssignerSoutenirA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_HUMUS_AssignerAppuyerA_Mortier, "BEH_Mission_Automate_INF_AssignerAppuyerA", nodes.BEH_Mission_Automate_INF_AssignerAppuyerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerMissionRetrograde_PC, "BEH_Mission_Automate_AssignerDecrocherA", nodes.BEH_Mission_Automate_AssignerDecrocherA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_INF_AssignerMission_PC, "BEH_Mission_Automate_AssignerSuivreA", nodes.BEH_Mission_Automate_AssignerSuivreA }

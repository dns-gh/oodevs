includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/functions/Functions.bms"] = true

include "bit.lua"

--[[// *****************************************************************************
]]--[[// Fonctions Communes aux pions
]]--[[// Thème : Ennemis
]]--[[// *****************************************************************************
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie si l'agent est au moins détruit tactiquement
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie si l'agent est détruit physiquement
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie la position d'une Connaissance Eni ( T_ConnaissanceAgent )
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie l'eni le plus proche de la position passée en paramètre
]]--[[//-------------------------------------------------------------------------
]]--[[// -----------------------------------------------------------------------------
]]--[[// Renvoie une force entre 1 et 2 en fonction de la distance des pion passés 
]]--[[//
]]--[[//                                   1
]]--[[//  force = 1 + -----------------------------------------------
]]--[[//               1 + ( ( Distance entre pion1 et pion2 ) / 1000 )
]]--[[//
]]--[[// -----------------------------------------------------------------------------
]]--[[// $$$$ MIA 04-02-23: automate ABC
]]--[[//-------------------------------------------------------------------------
]]--[[// Calcul d'une force entre 1 et 2 par rapport à la distance de l'eni.
]]--[[//
]]--[[//                                   1
]]--[[//  force = 1 + -----------------------------------------------
]]--[[//               1 + ( ( Distance entre eni et unite ) / 1000 )
]]--[[//
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Calcul d'une force entre 1 et 2 par rapport à la distance à un eni.
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Calcul d'une force entre 1 et 2 par rapport à la distance à un eni.
]]--[[//-------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la force d'action contre un ennemi suivant son niveau
]]--[[// d'identification
]]--[[//
]]--[[// 0 <= S_Force_ActionContre <= 2
]]--[[// 0 <= S_Force_DangerSur <= 2
]]--[[// 1 <= S_Force_Distance <= 2
]]--[[//
]]--[[//-----------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie vrai si la position d'une connaissance se trouve dans la zone
]]--[[//-------------------------------------------------------------------------
]]--[[//-------------------------------------------------------------------------
]]--[[// Renvoie l'eni en cours du pion passé en paramètre
]]--[[//-------------------------------------------------------------------------
]]function S_Pion_EstDetruitTactique( pion )
    local _returnValue = false
    _returnValue = ( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_Tactique ) or ( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_Total )
    do return _returnValue end
end

function S_Pion_EstDetruitPhysique( pion )
    local _returnValue = false
    _returnValue = ( F_Pion_GeteEtatDestruction( pion ) == eEtatDestruction_Total )
    do return _returnValue end
end

function S_Eni_Position( repUnite )
    local _returnValue = nil
    local eValidite = eRequeteInvalide
    _returnValue = DEC_ConnaissanceAgent_Position( repUnite, eValidite )
    if( eValidite == eRequeteInvalide ) then
        _returnValue = 0
    end

    do return _returnValue end
end

function S_Eni_ChercheEniPlusProchePosition( point, listeEnis )
    local _returnValue = nil
    local rDist_Min = 1105199104
    local rDistanceConnaissance = 0
    _returnValue = 0
    for _,ksEni in pairs( listeEnis or {} ) do
    local _continue = true
do
            if( not DEC_ConnaissanceAgent_EstValide( ksEni ) ) then
                _continue = false
            end

                if _continue then
                rDistanceConnaissance = DEC_Geometrie_Distance( point, DEC_ConnaissanceAgent_Position( ksEni ) )
                if( rDistanceConnaissance < rDist_Min ) then
                    do
                        _returnValue = ksEni
                        rDist_Min = rDistanceConnaissance
                    end
                end

            end
        end

    end

    do return _returnValue end
end

function S_ForceSoutien( pion1, pion2 )
    local _returnValue = 0
    _returnValue = 1
    _returnValue = 1 + ( 1 / ( 1 + ( DEC_Geometrie_Distance( DEC_Automate_PionPosition( pion1 ), DEC_Automate_PionPosition( pion2 ) ) / 1000 ) ) )
    do return _returnValue end
end

function S_Pion_ForceDistancePt( pion, pt )
    local _returnValue = 0
    _returnValue = 1 + 1 / ( 1 + DEC_Geometrie_Distance( DEC_Automate_PionPosition( pion ), pt ) / 1000 )
    do return _returnValue end
end

function S_Pion_ForceDistance( pion, ksEni )
    local _returnValue = 0
    local eValidite = eRequeteInvalide
    local positionEni = DEC_ConnaissanceAgent_Position( ksEni, eValidite )
    if( eValidite == eRequeteInvalide ) then
        _returnValue = 0
    else
        _returnValue = S_Pion_ForceDistancePt( pion, positionEni )
    end

    do return _returnValue end
end

function S_Connaissance_ForceDistance( ksA, ksB )
    local _returnValue = 0
    local eValidite = eRequeteInvalide
    local positionA = nil
    local positionB = nil
    positionA = DEC_ConnaissanceAgent_Position( ksA, eValidite )
    if( eValidite == eRequeteInvalide ) then
        do
            _returnValue = 0
                        do return _returnValue end

        end
    end

    positionB = DEC_ConnaissanceAgent_Position( ksB, eValidite )
    if( eValidite == eRequeteInvalide ) then
        do
            _returnValue = 0
                        do return _returnValue end

        end
    end

    _returnValue = 1 + 1 / ( 1 + DEC_Geometrie_Distance( positionA, positionB ) / 1000 )
    do return _returnValue end
end

function S_Pion_ForceActionContre( pion, ksEni )
    local _returnValue = 0
    _returnValue = S_ForceDangerSurPion( ksEni, pion ) * ( S_Pion_ForceDistance( pion, ksEni ) - 1 )
    do return _returnValue end
end

function S_Eni_EstDansZone( ksEni, locZone )
    local _returnValue = false
    local eValidite = eRequeteInvalide
    local ptEni = DEC_ConnaissanceAgent_Position( ksEni, eValidite )
    _returnValue = false
    if( eValidite == eRequeteInvalide or locZone == nil ) then
        do return _returnValue end
    end

    _returnValue = DEC_Geometrie_EstPointDansFuseau( ptEni ) and DEC_Geometrie_EstPointDansLocalisation( ptEni, locZone )
    do return _returnValue end
end

function S_Pion_EniEnCours( pion )
    local _returnValue = nil
    _returnValue = F_Pion_GeteniEnCours( pion )
    do return _returnValue end
end


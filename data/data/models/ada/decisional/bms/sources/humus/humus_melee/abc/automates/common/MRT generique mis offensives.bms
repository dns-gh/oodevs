includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/MRT generique mis offensives.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/MRT generique mis offensives.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 9/09/05 16:55 $
]]--[[// $Revision: 28 $
]]--[[// $Workfile: MRT generique mis offensives.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique" }, "BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_ABC_AssignerMissionEclairerA", { "done_BEH_Medo_Automate_ABC_AssignerMissionEclairerA" } },
        { "BEH_Medo_Automate_ABC_AssignerMissionAttaquerA", { "done_BEH_Medo_Automate_ABC_AssignerMissionAttaquerA" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eType = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        local selPions = {}
        self.ePhase = self.ePhase or eMRT_DeterminerEchelonsGlobals
        self.eEtat = self.eEtat or eActionEnCours
        self.selABC_Ecl = self.selABC_Ecl or {}
        self.selABC_NonPrevu = self.selABC_NonPrevu or {}--[[// suivre le SE
]]
        self.selABC_PE = self.selABC_PE or {}--[[// Liste des pions en premier echelon
]]
        self.selABC_SE = self.selABC_SE or {}--[[// Liste des pions en second echelon
]]
        local pionPC = DEC_Automate_PionPC()
        if( pionPC:GetType() == "Peloton_EEI" ) then
            --[[// Pions subordonnés à l'Auto
]]selPions = DEC_Automate_PionsAvecPC()
        else
            --[[// Pions subordonnés à l'Auto
]]selPions = DEC_Automate_PionsSansPC()
        end

         do
            local _continue = true
            local switch_1 = --[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[// 1) Vérifier les moyens, des renforts éventuels
]]--[[// 2) Déterminer les échelons
]]--[[// 2) Assigner certaines missions (les missions des unités de premier échelon)
]]--[[// $$$$ MIA 2004-10-01: les missions du deuxieme échelon sont données dans la conduite
]]--[[// $$$$ MIA 2004-10-01: car elles sont en permance évaluées durant la mission.
]]--[[// =============================================================================                                  
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_DeterminerEchelonsGlobals then
                    for _,x in pairs( --[[//---------------------------------------------------------------------
]]--[[// Assignation des grands échelons Ecl / Utile( PE + SE )/ non prevus
]]--[[//---------------------------------------------------------------------
]]selPions or emptyTable ) do
                    local _continue = true
do
                            local pion = x
                            --[[// On ne traite pas les pions non opérationnels
]]if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                                do
                                    DEC_Trace( DEC_GetSzName( pion ) .. " non operationnal" )
                                    DIA_PushFront( self.selABC_SE, pion )
                                    _continue = false
                                end
                            end

                                if _continue then
                                 do
                                    local _continue = true
                                    local switch_2 = pion:GetType()
                                    local cases_switch_2 = {}
                                        if switch_2 == "Patrouille_EI" then
                                            DIA_PushFront( self.selABC_Ecl, pion )
                                            _continue = false
                                                                                cases_switch_2[1] = true
                                        end
                                    end

                            end
                        end

                    end

                    self.ePhase = eMRT_AssignerMissions
                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[/* ------------------------------------------------------------- */]]--[[/* -------------  Gestion erreur/ bon deroulement -------------- */]]--[[/* ------------------------------------------------------------- */]]if( self.eEtat == eActionImpossible ) then
                        do
                            --[[// ePhase = eMRT_MissionImpossible;
]]DEC_Trace( "Warning: some front units did not received mission " )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[/* ------------------------------------------------------------- */]]--[[/* ------- Fin Gestion erreur/ bon deroulement ------- */]]--[[/* ------------------------------------------------------------- */]]--[[// Suivant le type de mission...
]]                    end

                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eType
                        local cases_switch_2 = {}
                            if switch_2 == "T_Mission_Automate_ABC_Eclairer" then
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.selABC_Ecl ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtat = v[1] end
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionEclairerA, 1, { self.selABC_Ecl, eEtatEchelon_Eclairage, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// Flanc garder
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[1] = true
elseif switch_2 == "T_Mission_Automate_ABC_FlancGarder" then
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( self.selABC_PE ) + #( self.selABC_Ecl ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eEtat = v[1] end
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionEclairerA, 1, { self.selABC_Ecl, eEtatEchelon_Eclairage, } )
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionAttaquerA, 1, { self.selABC_PE, eEtatEchelon_Premier, } )
                                _continue = false
                                                        cases_switch_2[2] = true
                            end
                        end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eMRT_MissionImpossible then
                    Activate( self.activations.ACT_Info_Trace, 1, { "MISSION IMPOSSIBLE", } )
                    --[[//action ACT_RC_Automate( eRC_MissionImpossible );
]]Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                    _continue = false
                --[[//---------------------------------------------------------------------
]]--[[// Validation
]]--[[//---------------------------------------------------------------------
]]                cases_switch_1[3] = true
elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end
                if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, "BEH_Medo_Automate_ABC_AssignerMissionEclairerA", nodes.BEH_Medo_Automate_ABC_AssignerMissionEclairerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, "BEH_Medo_Automate_ABC_AssignerMissionAttaquerA", nodes.BEH_Medo_Automate_ABC_AssignerMissionAttaquerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionDynamique, "ACT_Warning", nodes.ACT_Warning }

includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/missions/surveiller/Surveiller - MRT.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 04-02-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Missions/Surveiller/Surveiller - MRT.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 31/08/05 18:34 $
]]--[[// $Revision: 16 $
]]--[[// $Workfile: Surveiller - MRT.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_AssignerMissionSurveillerA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_AssignerMissionSurveillerA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_ABC_AssignerMissionSurveillerA" }, "BEH_Medo_Automate_ABC_AssignerMissionSurveillerA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ABC_AssignerSurveillerA", { "done_BEH_Mission_Automate_ABC_AssignerSurveillerA" } },
        { "ACT_Warning", { "done_ACT_Warning" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.selPions = self.params[1]
        self._namedParams.positionInstallation = self.params[2]
        self._namedParams.eEtatEchelon = self.params[3]
    end,

    activate = function( self )
        self.listePoint = self.listePoint or {}
        self.rIterateurPosition = self.rIterateurPosition or 0
        if( ( #( self._namedParams.selPions ) == 0 or #( self._namedParams.selPions ) == nil ) ) then
            do return end
        end

        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                local mission = DEC_GetMission( myself )
                self.listePoint = DEC_Geometrie_PositionsParRapportALocalisation( self._namedParams.selPions, self._namedParams.positionInstallation, DEC_GetDirectionEnnemi( mission ), M_MODELE_AUTOMATE_ABC_DISTANCE_MAX_POSITION_SUR_LOCALISATION() )
                --[[//-----------------------------------------------------------------------------
]]--[[// Gestion erreur
]]--[[//-----------------------------------------------------------------------------
]]if( ( self.listePoint ~= 0 and self.listePoint ~= nil ) ) then
                    do
                        for _,pion in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Assignation de la mission 
]]--[[//-----------------------------------------------------------------------------    
]]self._namedParams.selPions or {} ) do
                        local _continue = true
                            do
                                if( self.rIterateurPosition == DEC_ListePoints_Size( self.listePoint ) ) then
                                    self.rIterateurPosition = 0
                                end

                                local positionSurveiller = DEC_ListePoints_GetAt( self.listePoint, self.rIterateurPosition )
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ABC_AssignerSurveillerA, 1, { ePhase_MRT, pion, positionSurveiller, self._namedParams.eEtatEchelon, } )
                                                                self.rIterateurPosition = self.rIterateurPosition + 1
                            end

                        end

                    end
                else
do
                        Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleZoneHorsFuseau, } )
                                                self:SendFeedback( eActionImpossible )
                        do return end

                    end
                end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, "BEH_Mission_Automate_ABC_AssignerSurveillerA", nodes.BEH_Mission_Automate_ABC_AssignerSurveillerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, "ACT_Warning", nodes.ACT_Warning }

includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/grp ac/missions/Appuyer.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Son Milan/Missions/Appuyer.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:26 $
]]--[[// $Revision: 22 $
]]--[[// $Workfile: Appuyer.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//=============================================================================
]]--[[// Details :
]]--[[//		Définition : apporter une aide à une autre unité, spontanément ou sur 
]]--[[//		ordre par le mouvement ou par le feu. 
]]--[[//
]]--[[//		Principes : Il s’agit, dans le cadre de la manoeuvre de la compagnie 
]]--[[//		et à partir d’une position choisie, d’apporter, sur ordre ou de façon 
]]--[[//		spontanée, une aide aux éléments amis par des feux appliqués sur des
]]--[[//		objectifs repérés.
]]--[[//=============================================================================
]]node "MIS_Pion_INF_Appuyer"
{
    feedbacks = { { { "done_MIS_Pion_INF_Appuyer" }, "MIS_Pion_INF_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_INF_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_Misc_Pion_DefinirTypeMission", { "done_BEH_Misc_Pion_DefinirTypeMission" } },
        { "BEH_MAJ_AgressiviteMission", { "done_BEH_MAJ_AgressiviteMission" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Delai_Pion_INF_PreparerMission", { "done_BEH_Delai_Pion_INF_PreparerMission" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_Pion_INF_Appuyer", { "done_BEH_Dep_Pion_INF_Appuyer" } },
        { "BEH_Eni_Pion_MILAN_Appuyer", { "done_BEH_Eni_Pion_MILAN_Appuyer" } },
        { "BEH_Poste_Pion_INF_TomberEnGarde", { "done_BEH_Poste_Pion_INF_TomberEnGarde" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eAction = self.eAction or eActionEnCours
        self.ePhase = self.ePhase or ePreparerMission
        self.eActionOrdre = self.eActionOrdre or eActionEnCours
        self.tAmi = self.tAmi or self._namedParams.mission.uniteAAppuyer_
        if( not DEC_Nuit() ) then
            do
                --[[// initalisation de la mission
]]if( ModuleBegins() ) then
                    do
                        DEC_SetMission( myself, self._namedParams.mission )
                        F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                        --[[// unite a soutenir
]]--[[// mise a jour des infos sur le pion ami				
]]if( self.tAmi == nil ) then
                            do
                                DEC_Warning( eRC_MissionImpossible )
                                                                self:SendFeedback( eActionImpossible )
                                Halt( self )
                                do return end

                            end
                        end

                        DEC_Trace( "Mission 'Appuyer ( " .. DEC_GetSzName( self.tAmi ) .. " )' : debut" )
                    end
                end

                Activate( self.activations.BEH_Misc_Pion_DefinirTypeMission, 1, { eTypeContact_Appui, } )
                Activate( self.activations.BEH_MAJ_AgressiviteMission, 1, { eReconnu, M_TIR_PH_MISSION_APPUYER(), } )
                --[[//=============================================================================
]]--[[// Gestion des Ordres de conduite
]]--[[//=============================================================================	
]]--[[// gestion des ordres generaux    
]]if( self.eActionOrdre == eActionHalt ) then
                    do
                        self.ePhase = eFinMission
                        self.eActionOrdre = eActionEnCours
                        self.eAction = eActionEnCours
                    end
                end

                Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eActionOrdre = v[1] end
                 do
                    local _continue = true
                    local switch_1 = --[[//=============================================================================
]]--[[// Squelette de mission
]]--[[//=============================================================================		
]]self.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePreparerMission then
                            --[[//-----------------------------------------------------------------------------
]]--[[// preparation de la mission
]]--[[//-----------------------------------------------------------------------------	
]]if( GetStateVariable( "VE_PreparationMission" ) > 0 ) then
                                do
                                    Activate( self.activations.BEH_Delai_Pion_INF_PreparerMission, 1, { M_TEMPS_PREPARATION_APPUYER(), } )
                                                                        do return end

                                end
                            end

                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                            self.ePhase = eAppuyer
                        --[[//-----------------------------------------------------------------------------
]]--[[// Mission
]]--[[//-----------------------------------------------------------------------------
]]                        cases_switch_1[1] = true
                        end
                        if cases_switch_1[1] or switch_1 == eAppuyer then
                            --[[// Mission : Gestion du deplacement / Coordination
]]--[[//-------------------------------------------------------------------------	
]]Activate( self.activations.BEH_Dep_Pion_INF_Appuyer, GetMotivation( "MOT_Mission" ), { self.tAmi, M_DISTANCE_SUIVI_MIN(), M_DISTANCE_SUIVI_MAX(), } )
                            --[[// Gestion des ennemis
]]--[[//-------------------------------------------------------------------------							
]]Activate( self.activations.BEH_Eni_Pion_MILAN_Appuyer, GetMotivation( "MOT_ManoeuvrerSurEnis" ), emptyTable )
                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                            --[[//-----------------------------------------------------------------------------
]]--[[// Fin de mission
]]--[[//-----------------------------------------------------------------------------
]]if( self.eAction == eActionEffectuee ) then
                                do
                                    self.eAction = eActionEnCours
                                                                        do
                                        DEC_Trace( "Appuyer : fin mission" )
                                        DEC_FinMission()
                                                                                self:SendFeedback( eActionEffectuee )
                                        Halt( self )
                                        do return end

                                    end

                                end
                            end

                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                            Activate( self.activations.BEH_Poste_Pion_INF_TomberEnGarde, 1, { true, } )
self.done_BEH_Poste_Pion_INF_TomberEnGarde = function( self, _, v ) self.eAction = v[1] end
                            _continue = false
                                                cases_switch_1[3] = true

                        else
                                                end
                    end

            end
        else
do
                Activate( self.activations.ACT_Info_Trace, 1, { "Il fait nuit, l'unité s'arrête", } )
            end
        end

    end,

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 12/08/2005 15:13
]]--[[// Gestion des ennemis
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_MILAN_Appuyer"
{
    feedbacks = { { { "done_BEH_Eni_Pion_MILAN_Appuyer" }, "BEH_Eni_Pion_MILAN_Appuyer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_MILAN_Appuyer, {value} ) end,
    activations =
    {
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_Dep_SePosterFaceA", { "done_ACT_Dep_SePosterFaceA" } },
        { "ACT_Misc_UnitesEnAppui_EnPosition", { "done_ACT_Misc_UnitesEnAppui_EnPosition" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                local lstEnisPercus = DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau()
        for _,ksEni in pairs( lstEnisPercus or emptyTable ) do
        local _continue = true
do
                if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                    _continue = false
                end

                    if _continue then
                    local rForce_Action = 1 + S_Force_ActionContre( ksEni )
                    local bDemandeDebarquement = S_Tir_EstAPortee_Debarque( ksEni, GetStateVariable( "VE_Agressivite_Tir" ) ) or S_Tir_EstAPortee( ksEni, GetStateVariable( "VE_Agressivite_Tir" ) )
                    if( bDemandeDebarquement ) then
                        do
                            Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, emptyTable )
                            --[[// Si on est a porte, on se poste
]]Activate( self.activations.ACT_Dep_SePosterFaceA, 1, { ksEni, } )
                            Activate( self.activations.ACT_Misc_UnitesEnAppui_EnPosition, 1, emptyTable )
                        end
--[[//  Gestion particuliere:
]]--[[//  On tir principalement sur les blindes
]]                    end

                    if( not S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                        _continue = false
                    end

                        if _continue then
                        --[[// On favorise les blindes en plus du combat de rencontre
]]local rForce_Arme = 1
                    end
                end
            end
--[[//			switch ( S_Eni_NatureArme( ksEni ) )
]]--[[//			{
]]--[[//				case eNatureWeapon_Cavalerie:
]]--[[//				case eNatureWeapon_Blinde:
]]--[[//					{
]]--[[//						// Tir A distance de tir
]]--[[//						// Si c'est un ennemi a pied on peut debarquer et tirer						
]]--[[//						behavior BEH_Feu_Pion_INF_TirAppui( ksEni )	: strength = 2;
]]--[[//						break;
]]--[[//					}
]]--[[//			}
]]
        end

    end,

    destroy = function( self )
            end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_INF_Appuyer = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_MILAN_Appuyer, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_MILAN_Appuyer, "ACT_Dep_SePosterFaceA", nodes.ACT_Dep_SePosterFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_MILAN_Appuyer, "ACT_Misc_UnitesEnAppui_EnPosition", nodes.ACT_Misc_UnitesEnAppui_EnPosition }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Misc_Pion_DefinirTypeMission", nodes.BEH_Misc_Pion_DefinirTypeMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_MAJ_AgressiviteMission", nodes.BEH_MAJ_AgressiviteMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Delai_Pion_INF_PreparerMission", nodes.BEH_Delai_Pion_INF_PreparerMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Dep_Pion_INF_Appuyer", nodes.BEH_Dep_Pion_INF_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Eni_Pion_MILAN_Appuyer", nodes.BEH_Eni_Pion_MILAN_Appuyer }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "BEH_Poste_Pion_INF_TomberEnGarde", nodes.BEH_Poste_Pion_INF_TomberEnGarde }
connections[ #connections + 1 ] = { nodes.MIS_Pion_INF_Appuyer, "ACT_Info_Trace", nodes.ACT_Info_Trace }

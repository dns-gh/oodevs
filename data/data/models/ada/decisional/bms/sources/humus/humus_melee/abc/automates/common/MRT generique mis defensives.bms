includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/MRT generique mis defensives.bms"] = true

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique"
{
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", {} },
        { "BEH_Medo_Automate_ABC_AssignerControlerZoneA", {} },
        { "BEH_Medo_Automate_ABC_AssignerMissionSurveillerA", {} },
        { "BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA", {} },
        { "ACT_Info_Trace", {} },
        { "ACT_Warning", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eType = self.params[1]
    end,

    activate = function( self )
        --[[// Pions subordonnés à l'Auto
]]local selPions = DEC_Automate_PionsSansPC()
        self.ePhase = self.ePhase or eMRT_DeterminerEchelonsGlobals
        self.eEtat = self.eEtat or eActionEnCours
        self.selABC_SE = self.selABC_SE or {}--[[// Liste Premier Echelon / Liste Second Echelon
]]--[[// Pour l'instant pion qui suivent "en mesure de"
]]
        self.selABC_PE = self.selABC_PE or {}
        self.selABC_PEcl = self.selABC_PEcl or {}
        self.selABC_NonPrevus = self.selABC_NonPrevus or {}
         do
            local _continue = true
            local switch_1 = --[[// =============================================================================
]]--[[// PHASE DU COMPORTEMENT
]]--[[// 1) Vérifier les moyens, des renforts éventuels
]]--[[// 2) Déterminer les échelons
]]--[[// 2) Assigner certaines missions (les missions des unités de premier échelon)
]]--[[// $$$$ MIA 2004-10-01: les missions du deuxieme échelon sont données dans la conduite
]]--[[// $$$$ MIA 2004-10-01: car elles sont en permance évaluées durant la mission.
]]--[[// =============================================================================                                  
]]self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eMRT_DeterminerEchelonsGlobals then
                    for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Verification des moyens
]]--[[//-----------------------------------------------------------------------------
]]selPions or {} ) do
                    local _continue = true
do
                            local pion = x
                            --[[// On ne traite pas les pions non opérationnels
]]if( F_Pion_GeteEtatDestruction( pion ) ~= eEtatDestruction_None ) then
                                do
                                    DEC_Trace( DEC_GetSzName( pion ) .. " non operationnal" )
                                    DIA_PushFront( self.selABC_SE, pion )
                                    _continue = false
                                end
                            end

                                if _continue then
                                 do
                                    local _continue = true
                                    local switch_2 = pion:GetType()
                                    local cases_switch_2 = {}
                                        if switch_2 == "Patrouille_EI" then
                                            DIA_PushFront( self.selABC_PEcl, pion )
                                            _continue = false
                                                                                cases_switch_2[1] = true

                                        else
                                            DIA_PushFront( self.selABC_NonPrevus, pion )
                                            _continue = false
                                                                                end
                                    end

                            end
                        end
--[[// Si pas de pions capable de faire la mission...mission impossible
]]
                    end

                    if( DIA_IsListEmpty( self.selABC_PEcl ) ) then
                        do
                            DEC_Trace( "Pas assez de pions capables de faire cette mission" )
                            self.ePhase = eMRT_MissionImpossible
                                                        do return end

                        end
--[[// que de l'éclairage --> on peut qd même faire certaines missions
]]                    end

                    self.ePhase = eMRT_AssignerMissions
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// 1) Assigner les missions
]]--[[//// $$$$ MIA 04-02-06: TEMP A REFAIRE L'ECHELONNEMENT AVEC P ECL
]]--[[//// $$$$ MIA 04-02-06: GENERICITE ++
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[1] = true
elseif switch_1 == eMRT_AssignerMissions then
                    --[[/* ------------------------------------------------------------- */]]--[[/* -------------  Gestion erreur/ bon deroulement -------------- */]]--[[/* ------------------------------------------------------------- */]]if( self.eEtat == eActionImpossible ) then
                        do
                            --[[// ePhase = eMRT_MissionImpossible;
]]DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
                    end

                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.ePhase = eMRT_Valider
                                                        do return end

                        end
--[[/* ------------------------------------------------------------- */]]--[[/* ------- Fin Gestion erreur/ bon deroulement ------- */]]--[[/* ------------------------------------------------------------- */]]--[[// Suivant le type de mission...
]]                    end

                     do
                        local _continue = true
                        local switch_2 = self._namedParams.eType
                        local cases_switch_2 = {}
                            if switch_2 == "T_Mission_Automate_ABC_ArmerPointDeControle" then
                                --[[//-----------------------------------------------------------------------------
]]--[[// Armer point controle
]]--[[//-----------------------------------------------------------------------------
]]local mission = DEC_GetMission( myself )
                                local pointTemp = S_Geometrie_BarycentreZone( mission.zoneDeControle_ )
                                local zoneControle = DEC_Geometrie_ConvertirPointEnLocalisation( pointTemp )
                                DEC_CreerObjetSansDelais( S_TypeObject_ToString( eTypeObjectPosteControle ), zoneControle, "" )
                                self.ePhase = eMRT_Valider
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// CONTROLER
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[1] = true
elseif switch_2 == "T_Mission_Automate_ABC_Controler" then
                                local mission = DEC_GetMission( myself )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selABC_PEcl ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerControlerZoneA, 1, { self.selABC_PEcl, mission.zoneAControler_, eEtatEchelon_Eclairage, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// ReconnaitrePoint
]]--[[// SPE EEI, les patrouille n'ont pas cette mission donc 
]]--[[// on leur donne Eclairer vers le point
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[2] = true
elseif switch_2 == "T_Mission_Automate_ABC_ReconnaitrePoint" then
                                local mission = DEC_GetMission( myself )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selABC_PEcl ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, 1, { self.selABC_PEcl, mission.pointAReconnaitre_, eEtatEchelon_Eclairage, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// COUP D'ARRET
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[3] = true
elseif switch_2 == "T_Mission_Automate_ABC_RecueillirUnite" then
                                --[[// Spé mission à cause LR et LIA
]]Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selABC_PEcl ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                                Activate( self.activations.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA, 1, { self.selABC_PEcl, eEtatEchelon_Eclairage, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// RENSEIGNER SECTEUR --> donner eclairer plutôt...aller dans la zone...
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[4] = true
elseif switch_2 == "T_Mission_Automate_ABC_RenseignerSur" then
                                local mission = DEC_GetMission( myself )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selABC_PEcl ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, 1, { self.selABC_PEcl, mission.zoneARenseigner_, eEtatEchelon_Eclairage, } )
                                _continue = false
                            --[[//-----------------------------------------------------------------------------
]]--[[// Surveiller secteur
]]--[[//-----------------------------------------------------------------------------
]]                            cases_switch_2[5] = true
elseif switch_2 == "T_Mission_Automate_ABC_Surveiller" then
                                local mission = DEC_GetMission( myself )
                                Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, setmetatable( { #( self.selABC_PEcl ), }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                                Activate( self.activations.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA, 1, { self.selABC_PEcl, mission.zoneInstallation_, eEtatEchelon_Eclairage, } )
                                _continue = false
                                                        cases_switch_2[6] = true
                            end
                        end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Mission impossible
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eMRT_MissionImpossible then
                    Activate( self.activations.ACT_Info_Trace, 1, { "MISSION IMPOSSIBLE", } )
                    --[[//action ACT_RC_Automate( eRC_MissionImpossible );
]]Activate( self.activations.ACT_Warning, 1, { eRC_MissionImpossibleUnitesSubordonneesNonOperationnelles, } )
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// 2) Validation MRT
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[3] = true
elseif switch_1 == eMRT_Valider then
                    DEC_MRT_Valide()
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end
                if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "BEH_Medo_Automate_ABC_AssignerControlerZoneA", nodes.BEH_Medo_Automate_ABC_AssignerControlerZoneA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "BEH_Medo_Automate_ABC_AssignerMissionSurveillerA", nodes.BEH_Medo_Automate_ABC_AssignerMissionSurveillerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA", nodes.BEH_Medo_Automate_ABC_Recueillir_AssignerMissionSurveillerA }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_ABC_DonnerLesOrdresPourMissionStatique, "ACT_Warning", nodes.ACT_Warning }

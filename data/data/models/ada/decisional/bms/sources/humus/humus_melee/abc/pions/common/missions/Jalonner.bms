includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/pions/common/missions/Jalonner.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 03-04-10 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Pions/Common/Missions/Jalonner.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 29 $
]]--[[// $Workfile: Jalonner.hal $
]]--[[//
]]--[[// *****************************************************************************
]]

--[[// *****************************************************************************
]]--[[// BEH_Mission_Pion_ABC_Jalonner
]]--[[//
]]--[[// Commentaires: BUT: au niveau de la patrouille, renseigner en permanence sur
]]--[[//               un eni sans se laisser accrocher NI identifier. Au niveau de
]]--[[//               de la patrouille, pas d'opportunité d'ouverture du feu.
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_Mission_Pion_ABC_Jalonner"
{
    activations =
    {
        { "BEH_Ordre_Inopine", {} },
        { "BEH_MAJ_Pion_ABC_AgressiviteTir", {} },
        { "BEH_MOT_DesactiveSauvegarde", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Info_Trace", {} },
        { "BEH_Dep_Pion_ABC_RejoindreFuseau", {} },
        { "BEH_Lima_Pion_ABC_Jalonner_GererLimas", {} },
        { "BEH_Dep_ProgressionSur", {} },
        { "BEH_Eni_Pion_ABC_JalonnerLesGros", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params[1]
        self._namedParams.bAvecFeu = self.params[2]
        self._namedParams.rPH = self.params[3]
        self._namedParams.eNiveauIdentificationEni = self.params[4]
    end,

    activate = function( self )
        self.eEtat = self.eEtat or eActionEnCours
        self.eEtatRecueil = self.eEtatRecueil or eActionEnCours
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.bLRPassee = self.bLRPassee or false
        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtat = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Agressivite
]]--[[//-----------------------------------------------------------------------------
]]        end

        Activate( self.activations.BEH_MAJ_Pion_ABC_AgressiviteTir, 1, { self._namedParams.rPH, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Init
]]--[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                F_Pion_SeteEtatAmbiance( myself, eEtatAmbiance_Vitesse )
                StartActivateOverride( self, self.activations.BEH_MOT_DesactiveSauvegarde, 1, {} )
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// 1) Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "Screen mission begining", } )
                    if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eJalonner
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Dep_Pion_ABC_RejoindreFuseau, 1, setmetatable( { eProgressionDirect, eTypeItiMouvement, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    _continue = false
                --[[// 2) Jalonner l'eni
]]                cases_switch_1[1] = true
elseif switch_1 == eJalonner then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnJalonnement, } )
                    --[[//-----------------------------------------------------------------------------
]]--[[// Comportement par défaut: déplacement vers le second echelon
]]--[[// La reaction face à l'eni consiste à freiner ce deplacement en fonction des
]]--[[// mvts de l'eni.
]]--[[//-----------------------------------------------------------------------------
]]if( self.eEtat == eActionEffectuee ) then
                        do
                            self.eEtat = eActionEnCours
                                                        do
                                self.ePhaseMission = eFinMission
                                                                do return end

                            end

                        end
                    end

                    Activate( self.activations.BEH_Lima_Pion_ABC_Jalonner_GererLimas, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatRecueil = v else rawset( t, k, v ) end end } ) )
                    Activate( self.activations.BEH_Dep_ProgressionSur, 1, setmetatable( { self._namedParams.mission.itineraire_, eProgressionDirect, eTypeItiReconnaissance, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
                    --[[//=============================================================================
]]--[[// Activer par automate
]]--[[//=============================================================================
]]--[[// MIA à remplacer par une motivation
]]if( F_Pion_GetbOrdreDecrocher( myself ) or self.eEtatRecueil == eActionEffectuee ) then
                        do return end
                    end

                    --[[//-----------------------------------------------------------------------------
]]--[[// Jalonner les enis
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_Eni_Pion_ABC_JalonnerLesGros, 1.1, {} )
                    _continue = false
                --[[// 4) Fin de la mission
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    StopActivateOverride( self, self.activations.BEH_MOT_DesactiveSauvegarde, {} )--[[// reprendre sauvegarde
]]
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                    _continue = false
                                cases_switch_1[3] = true

                else
                                end
            end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Eni_Pion_ABC_JalonnerLesGros
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Eni_Pion_ABC_JalonnerLesGros"
{
    activations =
    {
        { "BEH_Eni_Pion_ABC_JalonnementSur", {} },
        { "BEH_Dep_SePosterFaceADirectionDangereuse", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// On jalonne les unites eni seulement
]]--[[//-----------------------------------------------------------------------------
]]local listeConnaissances = DEC_Connaissances_UnitesEnnemiesDangereuses()
        if( not DIA_IsListEmpty( listeConnaissances ) ) then
            do
                for _,repEni in pairs( listeConnaissances or {} ) do
                local _continue = true
--[[// Attention au seuil
]]if( DEC_ConnaissanceAgent_Dangerosite( repEni ) < 1.5 ) then
                        Activate( self.activations.BEH_Eni_Pion_ABC_JalonnementSur, S_Force_DangerSur( repEni ), { repEni, } )
                    end

                end

            end
--[[// Si pas d'ennemi à jalonner, surveiller
]]        else
            Activate( self.activations.BEH_Dep_SePosterFaceADirectionDangereuse, 1, {} )
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Eni_Pion_ABC_JalonnementSur
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Eni_Pion_ABC_JalonnementSur"
{
    instances =
    {
        max = 1--[[// tres important!
]],
    },

    activations =
    {
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "ACT_Dep_ModulationVitesse", {} },
        { "BEH_Eni_SePosterFaceA", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repEni = self.params[1]
    end,

    activate = function( self )
        self.eEtatPerteContact = self.eEtatPerteContact or eActionEnCours
        --[[//-----------------------------------------------------------------------------
]]--[[// Tenir l'eni sous son regard / Vitesse
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.repEni ), } )
        --[[// vitesse max
]]Activate( self.activations.ACT_Dep_ModulationVitesse, 1, { 1, } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Se poster face a eni
]]--[[//-----------------------------------------------------------------------------
]]if( DEC_Geometrie_Distance( DEC_Agent_Position(), DEC_ConnaissanceAgent_Position( self._namedParams.repEni ) ) > S_Misc_Pion_ABC_ObtenirDistanceDangerSur( self._namedParams.repEni ) ) then
            --[[// Sinon...jalonnement actif
]]Activate( self.activations.BEH_Eni_SePosterFaceA, 1, { self._namedParams.repEni, } )
        end

    end,

--[[//////////////////////////////////////////////// Gestion LC dans Jalonner /////////////////////////////////////////////////////
]]--[[// *****************************************************************************
]]--[[// BEH_Lima_Pion_ABC_Jalonner_GererLimas
]]--[[//
]]--[[// Commentaires: juste RC sur les LC
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Lima_Pion_ABC_Jalonner_GererLimas"
{
    activations =
    {
        { "BEH_Lima_Pion_ABC_Jalonner_PasserSurLC", {} },
        { "BEH_Lima_Pion_ABC_Jalonner_PasserSurLR", {} },
        { "BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA", {} },
        { "ACT_Limas_Suppression", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        --[[//-----------------------------------------------------------------------------
]]--[[// Traiter les points interressants
]]--[[//-----------------------------------------------------------------------------
]]local listePointInterressant = DEC_GetCategory( "points_interressants" )
        for _,x in pairs( listePointInterressant or {} ) do
        local _continue = true
do
                local pointABC = x
                if( pointABC:GetType() == "Rep_PointLima" ) then
                    do
                        --[[// cast
]]local pointLima = pointABC
                         do
                            local _continue = true
                            local switch_1 = DEC_GetTypeLimaPoint( pointLima )
                            local cases_switch_1 = {}
                                if switch_1 == eTypeLima_LC then
                                                                    Activate( self.activations.BEH_Lima_Pion_ABC_Jalonner_PasserSurLC, 1, { DEC_GetLimaPoint( pointLima ), } )
                                    _continue = false
                                                                cases_switch_1[1] = true
elseif switch_1 == eTypeLima_LR then
                                                                    Activate( self.activations.BEH_Lima_Pion_ABC_Jalonner_PasserSurLR, 1, { DEC_GetLimaPoint( pointLima ), } )
                                                                        self.params.__returnValue = eActionEffectuee
                                    do return end

                                    _continue = false
                                elseif switch_1 == eTypeLima_LIA then
                                                                    Activate( self.activations.BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA, 1, { DEC_GetLimaPoint( pointLima ), } )
                                                                        self.params.__returnValue = eActionEffectuee
                                    do return end

                                    _continue = false
                                                                end
                            end

                        Activate( self.activations.ACT_Limas_Suppression, 1, { pointLima, } )
                    end
                end

            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Dep_Pion_ABC_RejoindreFuseau()
]]--[[//
]]--[[// Commentaires : spé ici
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_ABC_RejoindreFuseau"
{
    activations =
    {
        { "BEH_Dep_ProgressionVers", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeProgression = self.params[1]
        self._namedParams.ePathType = self.params[2]
    end,

    activate = function( self )
        --[[// init
]]self.eEtat = self.eEtat or eActionEnCours
        self.positionArrivee = self.positionArrivee or DEC_Geometrie_CalculerEntreeFuseauLaPlusProche()
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                if( DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
                    self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end
                end

            end
--[[//---------------------------------------------------------------------
]]--[[// Deplacement
]]--[[//---------------------------------------------------------------------
]]        end

        if( self.eEtat == eActionEffectuee ) then
            do
                self.eEtat = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self.positionArrivee, self._namedParams.eTypeProgression, self._namedParams.ePathType, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtat = v else rawset( t, k, v ) end end } ) )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Lima_Pion_ABC_Jalonner_PasserSurLC()
]]--[[//
]]--[[// Commentaires : spé ici
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Lima_Pion_ABC_Jalonner_PasserSurLC"
{
    activations =
    {
        { "ACT_Dep_PasserSurLima", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lima = self.params[1]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
if( not F_Pion_GetbPasserSurLC( myself ) ) then
                do
                    DEC_Trace( "FLAGAGE LIMA LC ************************" )
                    DEC_SetMissionLimaFlagHoraire( self._namedParams.lima, true )
                end
            end
        end

        Activate( self.activations.ACT_Dep_PasserSurLima, 1, { eEtatLima_LC, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Lima_Pion_ABC_Jalonner_PasserSurLR()
]]--[[//
]]--[[// Commentaires : spé ici
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Lima_Pion_ABC_Jalonner_PasserSurLR"
{
    activations =
    {
        { "ACT_Dep_PasserSurLima", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lima = self.params[1]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
if( not F_Pion_GetbPasserSurLC( myself ) ) then
                do
                    DEC_Trace( "FLAGAGE LIMA LR ************************" )
                    DEC_SetMissionLimaFlagHoraire( self._namedParams.lima, true )
                end
            end
        end

        Activate( self.activations.ACT_Dep_PasserSurLima, 1, { eEtatLima_LR, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA()
]]--[[//
]]--[[// Commentaires : spé ici
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA"
{
    activations =
    {
        { "ACT_Dep_PasserSurLima", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.lima = self.params[1]
    end,

    activate = function( self )
        if( ModuleBegins() ) then
if( not F_Pion_GetbPasserSurLC( myself ) ) then
                do
                    DEC_Trace( "FLAGAGE LIMA LIA ************************" )
                    DEC_SetMissionLimaFlagHoraire( self._namedParams.lima, true )
                end
            end
        end

        Activate( self.activations.ACT_Dep_PasserSurLima, 1, { eEtatLima_LIA, } )
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_ABC_RejoindreFuseau, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ABC_JalonnementSur, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ABC_JalonnementSur, "ACT_Dep_ModulationVitesse", nodes.ACT_Dep_ModulationVitesse }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ABC_JalonnementSur, "BEH_Eni_SePosterFaceA", nodes.BEH_Eni_SePosterFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ABC_JalonnerLesGros, "BEH_Eni_Pion_ABC_JalonnementSur", nodes.BEH_Eni_Pion_ABC_JalonnementSur }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ABC_JalonnerLesGros, "BEH_Dep_SePosterFaceADirectionDangereuse", nodes.BEH_Dep_SePosterFaceADirectionDangereuse }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_GererLimas, "BEH_Lima_Pion_ABC_Jalonner_PasserSurLC", nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLC }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_GererLimas, "BEH_Lima_Pion_ABC_Jalonner_PasserSurLR", nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLR }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_GererLimas, "BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA", nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_GererLimas, "ACT_Limas_Suppression", nodes.ACT_Limas_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLC, "ACT_Dep_PasserSurLima", nodes.ACT_Dep_PasserSurLima }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLIA, "ACT_Dep_PasserSurLima", nodes.ACT_Dep_PasserSurLima }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_ABC_Jalonner_PasserSurLR, "ACT_Dep_PasserSurLima", nodes.ACT_Dep_PasserSurLima }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_MAJ_Pion_ABC_AgressiviteTir", nodes.BEH_MAJ_Pion_ABC_AgressiviteTir }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_MOT_DesactiveSauvegarde", nodes.BEH_MOT_DesactiveSauvegarde }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_Dep_Pion_ABC_RejoindreFuseau", nodes.BEH_Dep_Pion_ABC_RejoindreFuseau }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_Lima_Pion_ABC_Jalonner_GererLimas", nodes.BEH_Lima_Pion_ABC_Jalonner_GererLimas }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_ABC_Jalonner, "BEH_Eni_Pion_ABC_JalonnerLesGros", nodes.BEH_Eni_Pion_ABC_JalonnerLesGros }

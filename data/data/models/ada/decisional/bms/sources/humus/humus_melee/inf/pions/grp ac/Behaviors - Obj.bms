includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/grp ac/Behaviors - Obj.bms"] = true

--[[// *****************************************************************************
]]--[[/** \file S VAB - Behaviors - Defensif.hal
 *
 * $Author: Ggr $
 * $Modtime: 24/05/05 13:57 $
 * $Revision: 10 $
 *
 */]]--[[// Created: JCR 03-02-12
]]--[[// *****************************************************************************
]]--[[//
]]--[[// Comportements defensifs, renseignement ..
]]--[[//
]]--[[// behavior BEH_Obj_Pion_VAB_InstallerPlanObstacle ( T_Localisation )
]]
--[[// 
]]--[[// behavior BEH_Obj_Pion_VAB_NettoyerObstacle()
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Installation d'une zone d'obstacles suivant le terrains a une certaine 
]]--[[// distance vers la direction dangereuse
]]--[[//
]]--[[// Principalement utilise dans les missions defensives comme :
]]--[[//			- MIS_Pion_INF_Defendre()
]]
--[[//			- MIS_Pion_INF_Interdire()
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Obj_Pion_VAB_InstallerPlanObstacle"
{
    feedbacks = { { { "done_BEH_Obj_Pion_VAB_InstallerPlanObstacle" }, "BEH_Obj_Pion_VAB_InstallerPlanObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Obj_Pion_VAB_InstallerPlanObstacle, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_INF_RealiserBouchonMines", { "done_ACT_Obj_Pion_INF_RealiserBouchonMines" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locMine = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.eAction = self.eAction or eActionEnCours
        self.locPtMine = self.locPtMine or nil
        self.ptMission = self.ptMission or nil
        if( ModuleBegins() ) then
            do
                if( self._namedParams.locMine == 0 ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "  installation plan d'obstacle" )
                self.ptMission = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self._namedParams.locMine )
                if( self.ptMission == 0 ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                self.locPtMine = S_Geometrie_INF_ChercherPositionObstacle( self.ptMission, eTypeObjectBouchonMines, S_DistanceInstallationObstacle() )
                if( self.locPtMine == 0 ) then
--[[// Pour le moment, on fait un bouchon de mines
]]                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end
                end

            end
        end

        if( self.eAction ~= eActionEnCours ) then
            self:SendFeedback( self.eAction )
            Halt( self )
            do return end
        end

        Activate( self.activations.ACT_Obj_Pion_INF_RealiserBouchonMines, 1, { self.locPtMine, 10, } )
self.done_ACT_Obj_Pion_INF_RealiserBouchonMines = function( self, _, v ) self.eAction = v[1] end
--[[// ============================================================================
]]--[[// BEH_Obj_Pion_VAB_NettoyerObstacle
]]--[[//
]]--[[// Nettoie un obstacle construit proche de la position actuelle
]]--[[// ============================================================================
]]    end,

    destroy = function( self )
            end,

--[[// Recherche l'obstacle
]]}

node "BEH_Obj_Pion_VAB_NettoyerObstacle"
{
    feedbacks = { { { "done_BEH_Obj_Pion_VAB_NettoyerObstacle" }, "BEH_Obj_Pion_VAB_NettoyerObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Obj_Pion_VAB_NettoyerObstacle, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_INF_Detruire", { "done_ACT_Obj_Pion_INF_Detruire" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Pas d'objet trouve
]]self.eAction = self.eAction or eActionEnCours
        self.repObj = self.repObj or 0
        if( ModuleBegins() ) then
            do
                --[[// le detruit
]]self.repObj = DEC_Connaissances_ObjetLePlusProche( eTypeObjectBouchonMines )
                if( self.repObj == 0 ) then
                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end
                end

            end
        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eAction == eActionEffectuee ) then
            do
                self.eAction = eActionEnCours
                                do
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.ACT_Obj_Pion_INF_Detruire, 1, { self.repObj, } )
self.done_ACT_Obj_Pion_INF_Detruire = function( self, _, v ) self.eAction = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_InstallerPlanObstacle, "ACT_Obj_Pion_INF_RealiserBouchonMines", nodes.ACT_Obj_Pion_INF_RealiserBouchonMines }
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_NettoyerObstacle, "ACT_Obj_Pion_INF_Detruire", nodes.ACT_Obj_Pion_INF_Detruire }

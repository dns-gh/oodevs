includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/Actions.bms"] = true

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-02-20 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Pions/Common/Actions.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/08/05 17:44 $
]]--[[// $Revision: 22 $
]]--[[// $Workfile: Actions.hal $
]]--[[//
]]--[[// *****************************************************************************
]]
--[[//// A VIRER A METTRE DANS ACTION DE BAS NIVEAUX
]]--[[// ****************************************************************************** 
]]--[[// ACT_MAJ_RC_EtatSituationEni
]]--[[// 
]]--[[// Commentaires: Mets a jour la situation du pion 
]]--[[// 
]]--[[// ******************************************************************************
]]node "ACT_MAJ_EtatSituationEni"
{
    feedbacks = { { { "done_ACT_MAJ_EtatSituationEni" }, "ACT_MAJ_EtatSituationEni" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_MAJ_EtatSituationEni, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.eEtatSituationEnnemi = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            F_Pion_SeteEtatSituationEnnemi( myself, self._namedParams.eEtatSituationEnnemi )
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                F_Pion_SeteEtatSituationEnnemi( myself, eEtatSituationEnnemi_None )
    end,

}

--[[// FIN A DEPLACER
]]--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:39
]]--[[// ACT_Dep_Pion_INF_Arret
]]--[[//
]]--[[// Action d'Arret effectuee par une section d'infanterie
]]--[[// @delai delai (en s)
]]--[[// ============================================================================
]]node "ACT_Dep_Pion_INF_Arret"
{
    feedbacks = { { { "done_ACT_Dep_Pion_INF_Arret" }, "ACT_Dep_Pion_INF_Arret" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_Pion_INF_Arret, {value} ) end,
    actuators =
    {
        deplacement = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rDelai = self.params[1]
        self._namedParams.stMessage = self.params[2]
    end,

    select = function( self )
                do
            do
                self.rTempsDebut = self.rTempsDebut or DEC_TempsSim()
                if( ModuleBegins() ) then
                    DEC_Trace( "debut " .. self._namedParams.stMessage .. " (" .. FloatToString( self._namedParams.rDelai ) .. "min)" )
                end

                do
                end
--[[// bloc tick
]]
                if( self._namedParams.rDelai * 60 <= DEC_TempsSim() - self.rTempsDebut ) then
                    do
                        --[[// bloc fin
]]DEC_Trace( "fin" )
                                                self:SendFeedback( eActionEffectuee )
                        Halt( self )
                        do return end

                    end
                end

            end

        end

    end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:39
]]--[[// ACT_Tir_Pion_INF_Neutraliser
]]--[[//
]]--[[// Mise en securite par rapport aux tirs de toutes les unites
]]--[[// ennemies percues
]]--[[// ============================================================================
]]node "ACT_Tir_Pion_INF_Neutraliser"
{
    feedbacks = { { { "done_ACT_Tir_Pion_INF_Neutraliser" }, "ACT_Tir_Pion_INF_Neutraliser" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_Pion_INF_Neutraliser, {value} ) end,
    instances =
    {
        max = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ppEni = self.params[1]
    end,

    select = function( self )
    end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:38
]]--[[// ACT_Ordre_Pion_INF_AC_FaireRalentir
]]--[[// ============================================================================
]]node "ACT_Ordre_Pion_INF_AC_FaireRalentir"
{
    feedbacks = { { { "done_ACT_Ordre_Pion_INF_AC_FaireRalentir" }, "ACT_Ordre_Pion_INF_AC_FaireRalentir" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Ordre_Pion_INF_AC_FaireRalentir, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.tAmi = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                DEC_Trace( "Demande SePoster : debut" )
                self._namedParams.tAmi:SetStateVariable( "VE_Ralentir", 1.8 )
            end
        end

--[[// tAmi.S_Mot_Pion_AffecterEtat( VE_SePoster, 0 );
]]    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Trace( "Demande SePoster : fin" )
        self._namedParams.tAmi:SetStateVariable( "VE_Ralentir", 0 )
    end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:38
]]--[[// ACT_TirerFumigeneVersEnis
]]--[[// ============================================================================
]]node "ACT_Tir_INF_FumigeneVersEni"
{
    feedbacks = { { { "done_ACT_Tir_INF_FumigeneVersEni" }, "ACT_Tir_INF_FumigeneVersEni" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Tir_INF_FumigeneVersEni, {value} ) end,
    actuators =
    {
        tir = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    select = function( self )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]        if( ModuleBegins() ) then
            DEC_Tir_LancerFumigeneSurConnaissance( self._namedParams.ksEni )
        end

    end,

    deselect = function( self )
            end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:37
]]--[[// ACT_Misc_Pion_INF_MAJ_PositionRegroupement
]]--[[// 
]]--[[// Met a jour la position de regroupement d'un pion
]]--[[// ============================================================================
]]node "ACT_Misc_Pion_INF_MAJ_PositionRegroupement"
{
    feedbacks = { { { "done_ACT_Misc_Pion_INF_MAJ_PositionRegroupement" }, "ACT_Misc_Pion_INF_MAJ_PositionRegroupement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_INF_MAJ_PositionRegroupement, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ptRegroupement = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            do
                if( myself.ptRegroupement_ == 0 ) then
                    myself.ptRegroupement_ = DEC_Geometrie_CreerPoint()
                end

                DEC_Copie_Point( self._namedParams.ptRegroupement, myself.ptRegroupement_ )
            end
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                myself.ptRegroupement_ = 0
    end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:36
]]--[[// ACT_Misc_Pion_Ambiance
]]--[[// ============================================================================
]]node "ACT_Misc_Pion_Ambiance"
{
    feedbacks = { { { "done_ACT_Misc_Pion_Ambiance" }, "ACT_Misc_Pion_Ambiance" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Misc_Pion_Ambiance, {value} ) end,
    actuators =
    {
        etat_Ambiance = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eEtatAmbiance = self.params[1]
    end,

    select = function( self )
        F_Pion_SeteEtatAmbiance( myself, self._namedParams.eEtatAmbiance )
    end,

}

--[[// ============================================================================
]]--[[// $Created : JCR : 25/08/2005 10:36
]]--[[// ACT_Dep_Pion_INF_ActiverFurtivite
]]--[[// ============================================================================
]]node "ACT_Dep_Pion_INF_ActiverFurtivite"
{
    feedbacks = { { { "done_ACT_Dep_Pion_INF_ActiverFurtivite" }, "ACT_Dep_Pion_INF_ActiverFurtivite" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Dep_Pion_INF_ActiverFurtivite, {value} ) end,
    actuators =
    {
        furtivite = 1,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rFurtivite = self.params[1]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Perception_Furtivite( self._namedParams.rFurtivite )
        end

    end,

    deselect = function( self )
            end,

    destroy = function( self )
                DEC_Perception_Furtivite( 1 )
    end,

}

node "ACT_Obj_Pion_INF_RealiserBouchonMines"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_RealiserBouchonMines" }, "ACT_Obj_Pion_INF_RealiserBouchonMines" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_RealiserBouchonMines, {value} ) end,
    actuators =
    {
        deplacement = 2,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locObjet = self.params[1]
        self._namedParams.rQte = self.params[2]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or nil--[[//objet reel pour la creation de la representation de l'abatti
]]
        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( eTypeObjectBouchonMines ) ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "realisation bouchon mines : nbre = " .. FloatToString( self._namedParams.rQte ) )
                self.actionID = DEC_StartCreerObjet( self.repObj, S_TypeObject_ToString( eTypeObjectBouchonMines ), self._namedParams.locObjet, self._namedParams.rQte )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end
                actionKnowledgeCallbacks[ self.actionID ] = function( arg ) self.repObj = arg end

                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "fin realisation" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetImpossible then
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "reprise realisation" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "realisation suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "realisation arretee" )
        DEC_StopAction( self.actionID )
    end,

}

node "ACT_Obj_Pion_INF_RealiserObjet"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_RealiserObjet" }, "ACT_Obj_Pion_INF_RealiserObjet" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_RealiserObjet, {value} ) end,
    actuators =
    {
        deplacement = 2,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.eTypeObjet = self.params[1]
        self._namedParams.locObjet = self.params[2]
        self._namedParams.rParam = self.params[3]
    end,

    select = function( self )
        --[[//booleens suspension reprise et terminaison
]]        self.actionID = self.actionID or 0
        self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        self.repObj = self.repObj or nil--[[//objet reel pour la creation de la representation de l'abatti
]]
        if( ModuleBegins() ) then
            do
                if( not DEC_Agent_PeutConstruireObjet( S_TypeObject_ToString( self._namedParams.eTypeObjet ) ) ) then
                    do
                        DEC_Trace( "realisation objet : impossible" )
                                                self:SendFeedback( eActionImpossible )
                        Halt( self )
                        do return end

                    end
                end

                DEC_Trace( "realisation objet : debut" )
                self.actionID = DEC_StartCreerObjet( self.repObj, S_TypeObject_ToString( eTypeObjectBouchonMines ), self._namedParams.locObjet, self._namedParams.rParam )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end
                actionKnowledgeCallbacks[ self.actionID ] = function( arg ) self.repObj = arg end

                do
                    if( not DEC_Agent_AutomateEstEmbraye() ) then
                        DEC_RC( eRC_DebutTravaux )
                    else
                        DEC_Message( eRC_DebutTravaux )
                    end

                end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "realisation objet : fin realisation" )
                    do
                        if( not DEC_Agent_AutomateEstEmbraye() ) then
                            DEC_RC( eRC_FinTravaux )
                        else
                            DEC_Message( eRC_FinTravaux )
                        end

                    end

                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetPasDeCapacite then
                    DEC_Trace( "realisation objet : pas de capacites" )
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetManqueDotation then
                    DEC_Trace( "realisation objet : manque dotation" )
                --[[// DEC_RC( eRC_SituationLogDefavorable, eRCType_DotationMine );
]]                cases_switch_1[4] = true
                end
                if cases_switch_1[4] or switch_1 == eActionObjetImpossible then
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "reprise realisation" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "realisation suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "realisation arretee" )
        DEC_StopAction( self.actionID )
    end,

}

--[[//-----------------------------------------------------------------------------
]]--[[// Destruction de l'objet
]]--[[//-----------------------------------------------------------------------------
]]node "ACT_Obj_Pion_INF_Detruire"
{
    feedbacks = { { { "done_ACT_Obj_Pion_INF_Detruire" }, "ACT_Obj_Pion_INF_Detruire" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Obj_Pion_INF_Detruire, {value} ) end,
    actuators =
    {
        deplacement = 2,
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.repObj = self.params[1]
    end,

    select = function( self )
                self.actionID = self.actionID or 0
        --[[//booleens suspension reprise et terminaison
]]self.eEtatObjet = self.eEtatObjet or eActionObjetEnCours
        self.bSuspendu = self.bSuspendu or false
        self.bReprise = self.bReprise or false
        if( ModuleBegins() ) then
            do
                --[[// if ( !DEC_Agent_PeutDetruireObjet( ? ) )
]]--[[// 		halt( eActionImpossible );
]]DEC_Trace( "destruction : debut" )
                self.actionID = DEC_StartDetruireObjet( self._namedParams.repObj )
                actionCallbacks[ self.actionID ] = function( arg ) self.eEtatObjet = arg end

            end
        end

         do
            local _continue = true
            local switch_1 = self.eEtatObjet
            local cases_switch_1 = {}
                if switch_1 == eActionObjetEnCours then
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionObjetTerminee then
                    DEC_Trace( "destruction : fin" )
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                    _continue = false
                elseif switch_1 == eActionObjetImpossible
                or switch_1 == eActionObjetManqueDotation then
                    DEC_StopAction( self.actionID )
                                        self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end

                    _continue = false
                                end
            end

        if( self.bSuspendu ) then
            do
                --[[// Pas de delais de reorganisation du chantier
]]self.bReprise = true
                self.bSuspendu = false
            end
        end

        if( self.bReprise ) then
            do
                DEC_Trace( "destruction : reprise" )
                DEC_ReprendAction( self.actionID )
                self.bReprise = false
            end
        end

    end,

    deselect = function( self )
                DEC_Trace( "destruction : suspendue" )
        DEC_PauseAction( self.actionID )
        self.bSuspendu = true
    end,

    destroy = function( self )
                DEC_Trace( "destruction : arretee" )
        DEC_StopAction( self.actionID )
    end,

}


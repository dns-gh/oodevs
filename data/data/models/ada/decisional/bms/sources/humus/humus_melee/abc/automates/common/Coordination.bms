includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/abc/automates/common/Coordination.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: MIA 04-02-24 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Abc/Automates/Common/Coordination.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/07/05 9:59 $
]]--[[// $Revision: 19 $
]]--[[// $Workfile: Coordination.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//     /* Coordination  */
]]
--[[// behavior BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_
]]
--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerPEcl_
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_
]]
--[[// --- Comportement coordination avec amis ---
]]--[[// behavior BEH_CoordDep_Automate_ABC_SeCoordonnerAvecAmi_
]]--[[// behavior BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur
]]--[[// behavior BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur
]]
--[[// --- Comportement coordination retrograde ---
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordinationRetrograde_
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerFreinage
]]--[[// behavior BEH_CoordDep_Automate_ABC_CoordonnerJalonnement
]]

--[[////////////////////////////////
]]--[[////////////////////////    **   COORDINATION    **   /////////////////////////
]]--[[////////////////////////////////
]]

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_
]]--[[//
]]--[[// Commentaires: coordonner l'escadron avec l'unité appuyée ou soutenue
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]node "BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_"
{
    activations =
    {
        { "ACT_Info_Automate_Trace", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerPEcl_", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        Activate( self.activations.ACT_Info_Automate_Trace, 1, { "***$$$ Activation des coordinations $$$***", } )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_, 1, {} )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_, 1, {} )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_, 1, {} )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerPEcl_, 1, {} )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_
]]--[[//
]]--[[// Commentaires: PAS POUR MISSION RETROGRADE
]]--[[//               Controle l'écart entre éléments de têtes et de queues
]]--[[//
]]--[[//  ATTENTION: à activer qd toutes les unités sont dans le fuseau
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_"
{
    activations =
    {
        { "BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        local listePionsBlindes = S_ObtenirPionsEchelonPremierEtSecond( eEtatDestruction_None )
        --[[//-----------------------------------------------------------------------------
]]--[[// Inutile si plus de pions
]]--[[//-----------------------------------------------------------------------------
]]if( DIA_IsListEmpty( listePionsBlindes ) ) then
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Coordinnation SE / PE 
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur, 1, { listePionsBlindes, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerPEcl_
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerPEcl_"
{
    activations =
    {
        { "BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        local listePionsEclairant = S_ObtenirPionsDe( eEtatEchelon_Eclairage, eEtatDestruction_None )
        --[[//-----------------------------------------------------------------------------
]]--[[// Inutile si plus de pions
]]--[[//-----------------------------------------------------------------------------
]]if( DIA_IsListEmpty( listePionsEclairant ) ) then
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// Coordinnation SE / PE 
]]--[[//-----------------------------------------------------------------------------
]]Activate( self.activations.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur, 1, { listePionsEclairant, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_SeCoordonnerAvecAmi_
]]--[[//
]]--[[// Commentaires: coordonner l'escadron avec l'unité appuyée ou soutenue
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_SeCoordonnerAvecAmi_"
{
    activations =
    {
        { "BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.compagnieAmie = self.params[1]
        self._namedParams.bResterAHauteur = self.params[2]
    end,

    activate = function( self )
        local listePionsACoordonner = S_ObtenirPionsOperationnelsPour( self._namedParams.compagnieAmie )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur, 1, { listePionsACoordonner, self._namedParams.bResterAHauteur, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur"
{
    activations =
    {
        { "ACT_Info_Automate_Trace", {} },
        { "ACT_Ordre_Automate_Pause", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listeUnitesAmiesACoordonner = self.params[1]
        self._namedParams.bResterAHauteur = self.params[2]
    end,

    activate = function( self )
                self.resultatCalcul = self.resultatCalcul or nil
        self.bPremierOrdreDonne = self.bPremierOrdreDonne or false
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$$ Init coordinnation avec unites amies $$" )
                DEC_Trace( "$$ Nombre de pions a coordonner = " .. FloatToString( #( self._namedParams.listeUnitesAmiesACoordonner ) ) .. " $$" )
                self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( self._namedParams.listeUnitesAmiesACoordonner )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Determiner les pions à coordonner
]]--[[//-----------------------------------------------------------------------------
]]        end

        local selPions = S_ObtenirPionsEchelonPremierEtEclairage( eEtatDestruction_None )
        for _,x in pairs( selPions or {} ) do
        local _continue = true
do
                local pion = x
                local rDistanceLigne = 0--[[// Calcule distance LAV (si on veut être à hauteur) ou LAR
]]
                local rDistanceMin = 0
                --[[// Appuyer
]]if( not self._namedParams.bResterAHauteur ) then
                    do
                        rDistanceLigne = DEC_Geometrie_CalculerDistanceLigneArriere( self.resultatCalcul, pion )
                        rDistanceMin = M_MODELE_AUTOMATE_ABC_DISTANCE_LIGNE_MAX_APPUYER()
                    end
--[[// soutenir, couvrir
]]                else
do
                        rDistanceLigne = DEC_Geometrie_CalculerDistanceLigneAvant( self.resultatCalcul, pion )
                        --[[// Venir à hauteur
]]rDistanceMin = 100
                    end
--[[// ERREUR // $$$$ MIA 03-11-19: temp?
]]                end

                if( ( rDistanceLigne == 0 or rDistanceLigne == nil ) ) then
                    do
                        Activate( self.activations.ACT_Info_Automate_Trace, 1, { "-->Impossible de se coordonner avec ami...", } )
                        Activate( self.activations.ACT_Info_Automate_Trace, 1, { "-->L'ami n'a pas de mission??...", } )
                        break
                    end
                end

                if( rDistanceLigne < rDistanceMin ) then
                    do
                        Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { pion, } )
                        Activate( self.activations.ACT_Info_Automate_Trace, 1, { " ==> Coordinnation avec AMI --> ORDRE attendre à " .. DEC_GetSzName( pion ), } )
                    end
                end

            end

        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur
]]--[[//
]]--[[// Commentaires:    // $$$$ MIA 04-01-13: Nouvelle instance du comportement à chaque 
]]--[[//                  // $$$$ MIA 04-01-13: fois que la liste des pions amis change 
]]--[[//                  // $$$$ MIA 04-01-13: (pions détruits tactiquements)
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur"
{
    activations =
    {
        { "ACT_Info_Automate_Trace", {} },
        { "ACT_Ordre_Automate_Ralentir", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsACoordonner = self.params[1]
    end,

    activate = function( self )
                self.resultatCalcul = self.resultatCalcul or nil
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$$ Nombre de pions a coordonner = " .. FloatToString( #( self._namedParams.listePionsACoordonner ) ) .. " $$" )
                self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( self._namedParams.listePionsACoordonner )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Determiner le pion de queue
]]--[[//-----------------------------------------------------------------------------
]]        end

        local pionEnQueue = S_Coordination_PionEnQueue( self.resultatCalcul, self._namedParams.listePionsACoordonner, true )
        --[[//-----------------------------------------------------------------------------
]]--[[// Pas de pion en queue
]]--[[//-----------------------------------------------------------------------------
]]if( ( pionEnQueue == 0 or pionEnQueue == nil ) ) then
            do return end
        end

        --[[//=============================================================================
]]--[[// Coordinnation
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Escadron trop etalé --> le PE ralentit
]]--[[//-----------------------------------------------------------------------------
]]if( DEC_Geometrie_CalculerDistanceLigneAvant( self.resultatCalcul, pionEnQueue ) > M_MODELE_AUTOMATE_ABC_DISTANCE_ETALEMENT_ESC_MAX() ) then
            do
                Activate( self.activations.ACT_Info_Automate_Trace, 1, { "==< Coordinnation active >==", } )
                for _,x in pairs( self._namedParams.listePionsACoordonner or {} ) do
                local _continue = true
                    do
                        local pion = x
                        --[[// 1) Ralentir
]]if( DEC_Geometrie_CalculerDistanceLigneAvant( self.resultatCalcul, pion ) < M_MODELE_AUTOMATE_ABC_DISTANCE_LAV_MIN() ) then
                            do
                                Activate( self.activations.ACT_Info_Automate_Trace, 1, { " ==> Coordination ESC --> ORDRE ralentir à " .. DEC_GetSzName( pion ), } )
                                Activate( self.activations.ACT_Ordre_Automate_Ralentir, 1, { pion, } )
                            end
                        end

                    end

                end

            end
        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_
]]--[[//
]]--[[// Commentaires: dit au pion Ecl  pause si trop loin du PE
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_"
{
    create = function( self )
    end,

    activate = function( self )
    end,

--[[// $$$$ MIA 04-01-27: A faire ?
]]--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_
]]--[[//
]]--[[// Commentaires: dit au pion PE  pause si trop pres des Ecl
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_"
{
    activations =
    {
        { "ACT_Info_Automate_Trace", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        local listePionsEclairant = S_ObtenirPionsDe( eEtatEchelon_Eclairage, eEtatDestruction_None )
        --[[//-----------------------------------------------------------------------------
]]--[[// Inutile si plus de pions
]]--[[//-----------------------------------------------------------------------------
]]if( DIA_IsListEmpty( listePionsEclairant ) or S_Dispositif_Automate_ABC_EstPEclEnDanger() ) then
            do
                Activate( self.activations.ACT_Info_Automate_Trace, 1, { "$$ ****  Desactivation coordination de PE avec eclairage $$ *******", } )
                                do return end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Coordination
]]--[[//-----------------------------------------------------------------------------
]]        end

        Activate( self.activations.ACT_Info_Automate_Trace, 1, { "==< Coordinnation Eclairage active >==", } )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl, 1, { listePionsEclairant, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl"
{
    activations =
    {
        { "ACT_Info_Automate_Trace", {} },
        { "ACT_Ordre_Automate_Pause", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePionsEclairant = self.params[1]
    end,

    activate = function( self )
                self.resultatCalcul = self.resultatCalcul or nil
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( self._namedParams.listePionsEclairant )
        end

        --[[//-----------------------------------------------------------------------------
]]--[[// PE trop pres de l'Ecl --> le PE attend
]]--[[//-----------------------------------------------------------------------------
]]local listePionsPE = S_ObtenirPionsDe( eEtatEchelon_Premier, eEtatDestruction_None )
        for _,x in pairs( listePionsPE or {} ) do
        local _continue = true
do
                local pion = x
                if( DEC_Geometrie_CalculerDistanceLigneArriere( self.resultatCalcul, pion ) < M_MODELE_AUTOMATE_ABC_DISTANCE_ETALEMENT_ECL_MIN() ) then
                    do
                        Activate( self.activations.ACT_Info_Automate_Trace, 1, { " ==> Coordinnation Ecl --> ORDRE attendre à " .. DEC_GetSzName( pion ), } )
                        Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { pion, } )
                    end
                end

            end

        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[///////// COORDINATION RETROGRADE ////////
]]--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerFreinage
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordinationRetrograde_"
{
    activations =
    {
        { "BEH_CoordDep_Automate_ABC_CoordonnerJalonnement", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerFreinage", {} },
        { "BEH_CoordDep_Automate_ABC_CoordonnerMouvement", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerJalonnement, 1, {} )--[[// définie dans mis jalonner
]]
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerFreinage, 1, {} )
        Activate( self.activations.BEH_CoordDep_Automate_ABC_CoordonnerMouvement, 1, {} )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerFreinage
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerFreinage"
{
    activations =
    {
        { "ACT_Info_Trace", {} },
        { "ACT_Ordre_Automate_Continue", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.resultatCalcul = self.resultatCalcul or nil
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( DEC_Automate_PionsSansPC() )
        end

        --[[// MAJ Listes pions PE et SE
]]local selPionsFreinantsSE = S_Dispositif_Automate_ABC_ObtenirListePionsFreinantDe( eEtatEchelon_Second )
        local selPionsFreinantsPE = S_Dispositif_Automate_ABC_ObtenirListePionsFreinantDe( eEtatEchelon_Premier )
        --[[// TRACE / DEBUG
]]Activate( self.activations.ACT_Info_Trace, 1, { "Nombre pion freinant  PE = " .. FloatToString( #( selPionsFreinantsPE ) ), } )
        Activate( self.activations.ACT_Info_Trace, 1, { "Nombre pion freinant  SE = " .. FloatToString( #( selPionsFreinantsSE ) ), } )
        --[[//-----------------------------------------------------------------------------
]]--[[// Coordination PE au contact
]]--[[//-----------------------------------------------------------------------------
]]if( S_PionsAuContact( eEtatEchelon_Premier ) ) then
            do
                DEC_Trace( "****** ----- PION PE AU CONTACT ----- ******" )
                for _,x in pairs( selPionsFreinantsPE or {} ) do
                local _continue = true
                    do
                        local pion = x
                        Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { pion, } )
                    end
--[[// SI SECOND DEVANT 
]]
                end

                if( S_Dispositif_Automate_ABC_Freiner_PionsDevant( self.resultatCalcul, eEtatEchelon_Second ) ) then
for _,x in pairs( selPionsFreinantsSE or {} ) do
                    local _continue = true
                        do
                            local pion = x
                            Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { pion, } )
                        end

                    end
                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Coordination SE au contact
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( S_PionsAuContact( eEtatEchelon_Second ) ) then
            do
                DEC_Trace( "****** ----- PION SE AU CONTACT ----- ******" )
                for _,x in pairs( selPionsFreinantsSE or {} ) do
                local _continue = true
                    do
                        local pion = x
                        Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { pion, } )
                    end
--[[// SI PE DEVANT 
]]
                end

                if( S_Dispositif_Automate_ABC_Freiner_PionsDevant( self.resultatCalcul, eEtatEchelon_Premier ) ) then
for _,x in pairs( selPionsFreinantsPE or {} ) do
                    local _continue = true
                        do
                            local pion = x
                            Activate( self.activations.ACT_Ordre_Automate_Continue, 1, { pion, } )
                        end

                    end
                end

            end
        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerJalonnement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerJalonnement"
{
    activations =
    {
        { "ACT_Ordre_Automate_ABC_Decrocher", {} },
        { "ACT_Info_Automate_Trace", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.pionEnQueue = self.pionEnQueue or nil
        self.resultatCalcul = self.resultatCalcul or nil
        --[[// Persistent car les pions on tj la mission jalonner meme si detruit
]]self.selPionsJal = self.selPionsJal or S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsAvecPC(), "T_Mission_Pion_ABC_Jalonner" )
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_Trace( "$$ Coordinnation jalonnement active $$" )
                self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( self.selPionsJal )
            end
        end

        if( #( self.selPionsJal ) == 1 ) then
            do return end
        end

        for _,x in pairs( --[[//-----------------------------------------------------------------------------
]]--[[// Coordinnation
]]--[[//-----------------------------------------------------------------------------
]]self.selPionsJal or {} ) do
        local _continue = true
do
                local pion = x
                if( DEC_Geometrie_CalculerDistanceLigneAvant( self.resultatCalcul, pion ) > M_MODELE_AUTOMATE_ABC_DISTANCE_LAV_MIN_JALONNER() ) then
                    do
                        Activate( self.activations.ACT_Ordre_Automate_ABC_Decrocher, 1, { pion, } )
                        Activate( self.activations.ACT_Info_Automate_Trace, 1, { " ==> Coordination JAL --> ORDRE decrocher à " .. DEC_GetSzName( pion ), } )
                    end
                end

            end

        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[// *****************************************************************************
]]--[[// BEH_CoordDep_Automate_ABC_CoordonnerMouvement
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_CoordDep_Automate_ABC_CoordonnerMouvement"
{
    activations =
    {
        { "ACT_Ordre_Automate_Pause", {} },
    },

    create = function( self )
    end,

    activate = function( self )
                self.resultatCalcul = self.resultatCalcul or nil
        local listePionACoordonner = S_ObtenirPionsOperationnels()
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            self.resultatCalcul = DEC_Geometrie_StartCalculLignesAvantEtArriere( listePionACoordonner )
        end

        --[[//---------------------------------------------------------------------
]]--[[// Récuper les unités qui on la mission decrocher
]]--[[//---------------------------------------------------------------------
]]local listePionEnMvt = S_Cherche_Automate_Filtre_TypeMission( DEC_Automate_PionsAvecPC(), "T_Mission_Pion_Decrocher" )
        for _,pion in pairs( listePionEnMvt or {} ) do
        local _continue = true
do
                --[[// VALEUR A DEFINIR
]]if( DEC_Geometrie_CalculerDistanceLigneArriere( self.resultatCalcul, pion ) < -2000 ) then
                    Activate( self.activations.ACT_Ordre_Automate_Pause, 1, { pion, } )
                end

            end

        end

    end,

    destroy = function( self )
                DEC_Geometrie_StopCalculLignesAvantEtArriere( self.resultatCalcul )
    end,

--[[////////////////////////////////
]]--[[////////////////////////    ** FIN COORDINNATION **   /////////////////////////
]]--[[////////////////////////////////
]]}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur, "ACT_Ordre_Automate_Ralentir", nodes.ACT_Ordre_Automate_Ralentir }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_, "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_", nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_ }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_, "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_", nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_ }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_, "BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_", nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEclAvecPE_ }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_AssurerLaCoordinationInterne_, "BEH_CoordDep_Automate_ABC_CoordonnerPEcl_", nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEcl_ }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordinationRetrograde_, "BEH_CoordDep_Automate_ABC_CoordonnerJalonnement", nodes.BEH_CoordDep_Automate_ABC_CoordonnerJalonnement }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordinationRetrograde_, "BEH_CoordDep_Automate_ABC_CoordonnerFreinage", nodes.BEH_CoordDep_Automate_ABC_CoordonnerFreinage }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordinationRetrograde_, "BEH_CoordDep_Automate_ABC_CoordonnerMouvement", nodes.BEH_CoordDep_Automate_ABC_CoordonnerMouvement }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerFreinage, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerFreinage, "ACT_Ordre_Automate_Continue", nodes.ACT_Ordre_Automate_Continue }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerJalonnement, "ACT_Ordre_Automate_ABC_Decrocher", nodes.ACT_Ordre_Automate_ABC_Decrocher }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerJalonnement, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerMouvement, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl, "ACT_Ordre_Automate_Pause", nodes.ACT_Ordre_Automate_Pause }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_, "ACT_Info_Automate_Trace", nodes.ACT_Info_Automate_Trace }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl_, "BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl", nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecPEcl }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEAvecSE_, "BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur", nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_CoordonnerPEcl_, "BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur", nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinnationSur }
connections[ #connections + 1 ] = { nodes.BEH_CoordDep_Automate_ABC_SeCoordonnerAvecAmi_, "BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur", nodes.BEH_CoordDep_Automate_ABC_ActiverCoordinationAmisSur }

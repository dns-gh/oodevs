includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/pions/common/missions/Harceler.bms"] = true

include "bit.lua"


--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Humus/Humus_Melee/Inf/Pions/Common/Missions/Harceler.hal $
]]--[[// $Author: Jcr $
]]--[[// $Modtime: 22/09/05 18:17 $
]]--[[// $Revision: 21 $
]]--[[// $Workfile: Harceler.hal $
]]--[[//
]]--[[// *****************************************************************************
]]--[[//UTILISE POUR LA MISSION REZZOU
]]node "BEH_Mission_Pion_INF_Rezzou"
{
    feedbacks = { { { "done_BEH_Mission_Pion_INF_Rezzou" }, "BEH_Mission_Pion_INF_Rezzou" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_INF_Rezzou, {value} ) end,
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", { "done_BEH_Lima_Pion_RejoindreFuseau_EnAttente" } },
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_RC", { "done_ACT_RC" } },
        { "BEH_Eni_Pion_VAB_Semparer", { "done_BEH_Eni_Pion_VAB_Semparer" } },
        { "BEH_Mission_Pion_VAB_Semparer", { "done_BEH_Mission_Pion_VAB_Semparer" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        self.ePhase = self.ePhase or eSeMettreEnPlace
        self.eCurrentPhase = self.eCurrentPhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        self.poursuivreMission = self.poursuivreMission or false
        if( ModuleBegins() ) then
            do
                --[[// Vérifie que l'on est bien dans son fuseau
]]StartActivateOverride( self, self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, {} )
            end
--[[// Lorsqu'un comportement  ne  peut  pas  s'effectuer  correctement, la mission s'arrête
]]        end

        if( self.eAction == eActionImpossible ) then
            do
                                do
                    DEC_Warning( eRC_MissionImpossible )
                                        self:SendFeedback( eSeReplier )
                    Halt( self )
                    do return end

                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, {} )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhase = eSeReplier
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

        do
        end

        if( not DEC_Nuit() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == eSeMettreEnPlace then
                                                    Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )--[[// Se mettre en position en restant sur ses gardes
]]
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                            if( self.eAction == eActionEffectuee ) then
                                do
                                    self.eAction = eActionEnCours
                                                                        do
                                        self.ePhase = eAttendre
                                                                                do return end

                                    end

                                end
--[[//Déplacement vers la zone de regroupement
]]                            end

                            Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.mission.pointRegroupement_, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                            _continue = false
                        --[[// Attendre pour poursuivre la mission
]]                        cases_switch_1[1] = true
elseif switch_1 == eAttendre then
                            Activate( self.activations.ACT_RC, 1, { eRC_AttenteOrdrePoursuivre, } )
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_AttenteConditionFavorablePourInfiltration, } )
                            if( not DEC_Agent_AutomateEstEmbraye() ) then
                                do
                                    SetStateVariable( "VE_SePoster", 2 )
                                    self.poursuivreMission = true
                                    F_Pion_SeteEtatPhaseMission( myself, eEtatPhaseMission_ProgressionVersLocalisation )
                                end
--[[//Le pion est en attente de l'ordre de conduite Poursuivre qui provoque le changement de mission et la fin de l'attente :
]]--[[//	- F_Pion_GeteEtatPhaseMission( myself ) devient eEtatPhaseMission_ProgressionVersLocalisation
]]--[[//  - DIA_GetInternalState( VE_SePoster) passe de 2 à 0
]]                            end

                            if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_AttenteConditionFavorablePourInfiltration and GetStateVariable( "VE_SePoster" ) == 2 ) then
                                self.poursuivreMission = true
                            end

                            --[[//Fin de la posture
]]if( F_Pion_GeteEtatPhaseMission( myself ) == eEtatPhaseMission_ProgressionVersLocalisation and GetStateVariable( "VE_SePoster" ) == 0 and self.poursuivreMission ) then
                                do
                                    self.eAction = eActionEffectuee
                                    self.ePhase = eRejoindre
                                end
                            end

                            _continue = false
                                                cases_switch_1[2] = true
elseif switch_1 == eRejoindre then
                            if( self.eCurrentPhase ~= eSeReplier ) then
                                do
                                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                                    --[[//Rapport de force favorable ou neutre => continuer la mission
]]if( S_RapForLocal() == eEtatRapportDeForce_Favorable ) then
                                        do
                                            Activate( self.activations.BEH_Eni_Pion_VAB_Semparer, 1, {} )
                                            Activate( self.activations.BEH_Mission_Pion_VAB_Semparer, 1, {} )
self.done_BEH_Mission_Pion_VAB_Semparer = function( self, _, v ) self.eCurrentPhase = v[1] end
                                        end
--[[//Rapport de force défavorable ou neutre => se replier
]]                                    else
do
                                            DEC_Trace( "Rapport de force défavorable - Repli sur la zone de regroupement" )
                                            self.ePhase = eSeReplier
                                        end
                                    end

                                end
                            else
do
                                    self.ePhase = self.eCurrentPhase
                                end
                            end

                            _continue = false
                                                cases_switch_1[3] = true
elseif switch_1 == eSeReplier then
                                                        self:SendFeedback( eSeReplier )
                            Halt( self )
                            do return end

                        end
                        if not cases_switch_1[1] and not cases_switch_1[2] and not cases_switch_1[3] then
                                                end
                    end

                                self:SendFeedback( self.ePhase )
                do return end

            end
        else
do
                Activate( self.activations.ACT_Info_Trace, 1, { "Il fait nuit, l'unité s'arrête", } )
            end
        end

    end,

--[[//===============================================
]]--[[// Contrôle et gestion de la présence d'un ennemi
]]--[[//===============================================
]]}

node "BEH_Eni_Pion_VAB_Semparer"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_Semparer" }, "BEH_Eni_Pion_VAB_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_Semparer, {value} ) end,
    activations =
    {
        { "ACT_RC_SurEni", { "done_ACT_RC_SurEni" } },
        { "ACT_MAJ_EtatSituationEni", { "done_ACT_MAJ_EtatSituationEni" } },
        { "BEH_Eni_Pion_VAB_PreparerEngagement", { "done_BEH_Eni_Pion_VAB_PreparerEngagement" } },
        { "BEH_Eni_Pion_ManoeuvreDetruire", { "done_BEH_Eni_Pion_ManoeuvreDetruire" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                self.mission = self.mission or DEC_GetMission( myself )
        self.eActionEni = self.eActionEni or eActionEnCours
        --[[//Calcul du point central de la zone à attaquer
]]self.pointCentreLocalisation = self.pointCentreLocalisation or S_Geometrie_BarycentreZone( self.mission.zone_ )
        if( not DEC_Connaissances_PresenceEnnemieDansCercle( self.pointCentreLocalisation, 1500 ) ) then
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]--[[//  Rencontre d'un eni lorsque l'on est pas dans la phase d'assaut
]]--[[//-----------------------------------------------------------------------------		
]]local lstEnisDansFuseau = DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau()
        for _,ksEni in pairs( lstEnisDansFuseau or {} ) do
        local _continue = true
do
                --[[// L'ennemi est trop loin de la position
]]if( DEC_Geometrie_Distance( DEC_ConnaissanceAgent_Position( ksEni ), self.pointCentreLocalisation ) > 1500 ) then
                    _continue = false
                end

                    if _continue then
                    Activate( self.activations.ACT_RC_SurEni, 1, { eRC_EniSurObjectif, ksEni, } )
                    Activate( self.activations.ACT_MAJ_EtatSituationEni, 1, { eEtatSituationEnnemi_EniSurObjectif, } )
                    if( DEC_ConnaissanceAgent_EstDetruitTactique( ksEni ) ) then
                        _continue = false
                    end

                        if _continue then
                        local rForce = S_Force_ActionContre( ksEni )
                        if( not S_UnitesAppuis_EnPosition() ) then
                            Activate( self.activations.BEH_Eni_Pion_VAB_PreparerEngagement, 1.5 + rForce, { ksEni, } )
                        end

                        if( S_Eni_EstNiveauPerceptionGTIA( ksEni, F_Pion_GeteNiveauAction( myself ) ) ) then
                            Activate( self.activations.BEH_Eni_Pion_ManoeuvreDetruire, 1, { ksEni, true, } )
                        end

                    end
                end
            end

        end

    end,

    destroy = function( self )
            end,

--[[// ----------------------------------------------------------------------------
]]--[[// On attend que les appuis soit en position
]]--[[// ----------------------------------------------------------------------------
]]}

node "BEH_Eni_Pion_VAB_PreparerEngagement"
{
    feedbacks = { { { "done_BEH_Eni_Pion_VAB_PreparerEngagement" }, "BEH_Eni_Pion_VAB_PreparerEngagement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_VAB_PreparerEngagement, {value} ) end,
    activations =
    {
        { "ACT_MAJ_EnnemiEnCours", { "done_ACT_MAJ_EnnemiEnCours" } },
        { "ACT_Obs_EtablirVisionVersPt", { "done_ACT_Obs_EtablirVisionVersPt" } },
        { "ACT_Misc_Pion_Ambiance", { "done_ACT_Misc_Pion_Ambiance" } },
        { "ACT_Dep_SePosterFaceA", { "done_ACT_Dep_SePosterFaceA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ksEni = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.bUniteAppuis_OK = self.bUniteAppuis_OK or false
        self.bUniteAppuis_OK = self.bUniteAppuis_OK or S_UnitesAppuis_EnPosition()
        if( ModuleBegins() ) then
            DEC_Trace( "Attent l'arrivee des renforts" )
        end

        Activate( self.activations.ACT_MAJ_EnnemiEnCours, 1, { self._namedParams.ksEni, } )
        Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1, { DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), } )
        Activate( self.activations.ACT_Misc_Pion_Ambiance, 1, { eEtatAmbiance_Surete, } )
        --[[// On se déplace jusqu'à la reco
]]if( S_Eni_EstNiveauPerceptionGTIA( self._namedParams.ksEni, F_Pion_GeteNiveauAction( myself ) ) and DEC_Geometrie_Distance( DEC_ConnaissanceAgent_Position( self._namedParams.ksEni ), DEC_Agent_Position() ) <= S_Tir_PorteeMaxPourEtreTireParAgent( self._namedParams.ksEni, 0.1 ) ) then
            Activate( self.activations.ACT_Dep_SePosterFaceA, 1, { self._namedParams.ksEni, } )
        end

        if( self.bUniteAppuis_OK ) then
            do
                DEC_Trace( "Renforts en position" )
                                self:SendFeedback( eActionEffectuee )
                do return end

            end
        end

        do
        end

    end,

--[[//=============================================================================
]]--[[// Objectif : On cherche à tenir la position. Si l'ennemi est en position, on
]]--[[// veut au minimum le faire partir
]]--[[//=============================================================================
]]}

node "BEH_Mission_Pion_VAB_Semparer"
{
    feedbacks = { { { "done_BEH_Mission_Pion_VAB_Semparer" }, "BEH_Mission_Pion_VAB_Semparer" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Pion_VAB_Semparer, {value} ) end,
    activations =
    {
        { "BEH_Lima_Pion_RejoindreFuseau_EnAttente", { "done_BEH_Lima_Pion_RejoindreFuseau_EnAttente" } },
        { "BEH_Mot_Pion_Embarquer", { "done_BEH_Mot_Pion_Embarquer" } },
        { "BEH_Dep_ProgressionVers", { "done_BEH_Dep_ProgressionVers" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "BEH_Obs_Pion_INF_EnReconnaissance", { "done_BEH_Obs_Pion_INF_EnReconnaissance" } },
        { "ACT_Misc_Pion_Ambiance", { "done_ACT_Misc_Pion_Ambiance" } },
        { "BEH_MOT_Pion_INF_Debarquer", { "done_BEH_MOT_Pion_INF_Debarquer" } },
        { "ACT_Dep_Pion_INF_Arret", { "done_ACT_Dep_Pion_INF_Arret" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        --[[// Calcul du point central de la zone d'attaque pour permettre les comportements de type ProgresserVers
]]--[[// qui attendent en paramètre un point et non une zone
]]self.pointCentreLocalisation = self.pointCentreLocalisation or S_Geometrie_BarycentreZone( self.mission.zone_ )
        --[[// Phase de la mission
]]self.ePhase = self.ePhase or eRejoindrePosition
        --[[// Etat des actions générales
]]self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            --[[// Vérifier que l'on est bien dans son fuseau
]]StartActivateOverride( self, self.activations.BEH_Lima_Pion_RejoindreFuseau_EnAttente, 1.1, {} )
        end

         do
            local _continue = true
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindrePosition then
                    Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )--[[//Rejoindre l'objectif
]]
                    --[[// On ne se rapproche pas trop pour éviter de se faire prendre à parti
]]if( S_EstADistanceTir_Pt( self.pointCentreLocalisation ) ) then
                        self.eAction = eActionEffectuee
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eObserver
                                                                self:SendFeedback( self.ePhase )
                                do return end

                            end

                        end
--[[//Progression directe vers la zone d'attente
]]                    end

                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.pointCentreLocalisation, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eObserver then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ReconnaissanceLocalisation, } )
                    if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            self.ePhase = eRejoindreAssaut
                                                        self:SendFeedback( self.ePhase )
                            do return end

                        end
--[[// Si la reconnaissance renvoie eActionEffectuee, on n'a pas rencontre d'enis, 
]]--[[// sinon eActionHalt
]]                    end

                    if( self.eAction == eActionHalt ) then
                        do
                            DEC_Trace( "Patrouille accrochee" )
                                                        self:SendFeedback( eActionHalt )
                            Halt( self )
                            do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eRejoindre
                                                                self:SendFeedback( self.ePhase )
                                do return end

                            end

                        end
--[[//On envoie une patrouille en reconnaissance.
]]                    end

                    Activate( self.activations.BEH_Obs_Pion_INF_EnReconnaissance, 1, { self.pointCentreLocalisation, } )
self.done_BEH_Obs_Pion_INF_EnReconnaissance = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// On rejoint l'objectif pour s'en emparer
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[2] = true
elseif switch_1 == eRejoindreAssaut then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( F_Pion_GeteniEnCours( myself ) == nil ) then
                        do
                            self.eAction = eActionEnCours
                            if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), self.pointCentreLocalisation, 100 ) ) then
                                self.ePhase = eFouiller
                            else
                                self.ePhase = eRejoindre
                            end

                        end
                    end

                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// L'objectif est libre, on peut le rejoindre ..		
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[3] = true
elseif switch_1 == eRejoindre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    if( not S_EstADistanceTir_Pt( self.pointCentreLocalisation ) ) then
                        Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )
                    end

                    if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            self.ePhase = eRejoindreAssaut
                                                        do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                self.ePhase = eFouiller
                                                                do return end

                            end

                        end
--[[// Normalement, on est sur la position
]]                    end

                    Activate( self.activations.ACT_Misc_Pion_Ambiance, 1, { eEtatAmbiance_Surete, } )
                    Activate( self.activations.BEH_Dep_ProgressionVers, 1, { self.pointCentreLocalisation, eProgressionDirect, eTypeItiMouvement, } )
self.done_BEH_Dep_ProgressionVers = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                --[[//-----------------------------------------------------------------------------
]]--[[// Une fois sur place, on fouille les lieux		
]]--[[//-----------------------------------------------------------------------------
]]                cases_switch_1[4] = true
elseif switch_1 == eFouiller then
                    Activate( self.activations.BEH_MOT_Pion_INF_Debarquer, 1, {} )
                    if( F_Pion_GeteniEnCours( myself ) ~= nil ) then
                        do
                            Activate( self.activations.BEH_Mot_Pion_Embarquer, 1, {} )--[[//Peut-être embarquer avant
]]
                            self.ePhase = eRejoindreAssaut
                                                        do return end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                                                self:SendFeedback( eSeReplier )
                                Halt( self )
                                do return end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Dep_Pion_INF_Arret, 1, { M_TEMPS_FOUILLE(), "fouille des lieux ... ", } )
self.done_ACT_Dep_Pion_INF_Arret = function( self, _, v ) self.eAction = v[1] end
                    _continue = false
                                cases_switch_1[5] = true

                else
                                end
            end

                self:SendFeedback( self.ePhase )
        do return end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_MAJ_EnnemiEnCours", nodes.ACT_MAJ_EnnemiEnCours }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Misc_Pion_Ambiance", nodes.ACT_Misc_Pion_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_PreparerEngagement, "ACT_Dep_SePosterFaceA", nodes.ACT_Dep_SePosterFaceA }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "ACT_RC_SurEni", nodes.ACT_RC_SurEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "ACT_MAJ_EtatSituationEni", nodes.ACT_MAJ_EtatSituationEni }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "BEH_Eni_Pion_VAB_PreparerEngagement", nodes.BEH_Eni_Pion_VAB_PreparerEngagement }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_VAB_Semparer, "BEH_Eni_Pion_ManoeuvreDetruire", nodes.BEH_Eni_Pion_ManoeuvreDetruire }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Eni_Pion_VAB_Semparer", nodes.BEH_Eni_Pion_VAB_Semparer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "BEH_Mission_Pion_VAB_Semparer", nodes.BEH_Mission_Pion_VAB_Semparer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_INF_Rezzou, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Lima_Pion_RejoindreFuseau_EnAttente", nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Mot_Pion_Embarquer", nodes.BEH_Mot_Pion_Embarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_Obs_Pion_INF_EnReconnaissance", nodes.BEH_Obs_Pion_INF_EnReconnaissance }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_Misc_Pion_Ambiance", nodes.ACT_Misc_Pion_Ambiance }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "BEH_MOT_Pion_INF_Debarquer", nodes.BEH_MOT_Pion_INF_Debarquer }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Pion_VAB_Semparer, "ACT_Dep_Pion_INF_Arret", nodes.ACT_Dep_Pion_INF_Arret }

includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/functions/Functions - Filtre.bms"] = true

include "bit.lua"

--[[//-----------------------------------------------------------------------------
]]--[[// Recherche parmi une selection de pions, le premier pion de type : @type// 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Recherche parmi une selection de pions, les pions de type : @type// 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Recherche parmi une selection de pions, les pions de type : @type// + echelon 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions opérationnels 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions non opérationnels 
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[//  Renvoie la liste des pions de 'listePionReference' qui ne sont pas dans 
]]--[[//  'listePion' 
]]--[[// OPT MIA: spé ALAT
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Recherche parmi une selection de pions les pions qui ne sont pas du type 
]]--[[// passé en paramètrede
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions de Type ABC
]]--[[// OPT MIA: spé INF
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pions de Type INF 
]]--[[// OPT MIA: spé INF
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]--[[// Recherche parmi une selection de pions, les pions ayant la mission du
]]--[[// type passé en paramètre
]]--[[//-----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Mets les pions de la liste sUnites dans selPion_PE si le pion est 
]]--[[//	operationnel et si la liste n'est pas pleine ( rMax_PE). Sinon, le mets
]]--[[//	dans selPion_SE. + Renvoie la liste des pions selectionnes
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// S_Automate_ValideTroisEchelons_Pion:
]]--[[// 		+ Mets les pions de la liste sUnites dans selPion_PE ou selPion_DE si 
]]--[[//		le pion est operationnel et si la liste n'est pas pleine (rMax_PE, rMax_DE). 
]]--[[//		Sinon, le mets dans selPion_SE.
]]--[[//		+ Renvoie la liste des pions selectionnes dans selPion_PE
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Converti E_TypeLima en E_EtatPion_Lima
]]--[[// ----------------------------------------------------------------------------
]]--[[// ----------------------------------------------------------------------------
]]--[[// Renvoie la liste des pion sur le type de lima passé en paramètre
]]--[[// ----------------------------------------------------------------------------
]]function S_Cherche_Automate_TypePion( sPions, type )
    local _returnValue = nil
    local pFoo = nil
    _returnValue = pFoo
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
            if( pion:GetType() == type ) then
                do
                    _returnValue = pion
                                        do return _returnValue end

                end
            end

        end

    end

    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypePion( sPions, type )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
            if( pion:GetType() == type ) then
                DIA_PushBack( sFiltre, pion )
            end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypePionEchelon( sPions, type, eEtatEchelon )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
            if( pion:GetType() == type and F_Pion_GeteEtatEchelon( pion ) == eEtatEchelon ) then
                DIA_PushBack( sFiltre, pion )
            end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_PionsOperationnels( sPions )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            if( S_Pion_EstDetruitTactique( x ) ) then
                _continue = false
            end

                if _continue then
                DIA_PushBack( sFiltre, x )
            end
        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypePionOperationnels( sPions, type )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            if( S_Pion_EstDetruitTactique( x ) ) then
                _continue = false
            end

                if _continue then
                local pion = x
                if( pion:GetType() == type ) then
                    DIA_PushBack( sFiltre, pion )
                end

            end
        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_PionNonDansListe( listePionReference, listePion )
    local _returnValue = {}
    local listeOutput = {}
    for _,x in pairs( listePionReference or {} ) do
    local _continue = true
if( not DIA_Contains( listePion, x ) ) then
            DIA_PushBack( listeOutput, x )
        end

    end

    _returnValue = listeOutput
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_NotTypePion( sPions, type )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
            if( pion:GetType() ~= type ) then
                DIA_PushBack( sFiltre, pion )
            end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypePion_ABC( sPions )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
             do
                local _continue = true
                local switch_1 = pion:GetType()
                local cases_switch_1 = {}
                    if switch_1 == "Peloton_XL"
                    or switch_1 == "Peloton_AMX" then
                        DIA_PushBack( sFiltre, pion )
                        _continue = false
                                        cases_switch_1[1] = true
                    end
                end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypePion_INF( sPions )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
             do
                local _continue = true
                local switch_1 = pion:GetType()
                local cases_switch_1 = {}
                    if switch_1 == "SectionInfanterie"
                    or switch_1 == "SectionInfanterie_MILAN"
                    or switch_1 == "SectionInfanterie_HOT"
                    or switch_1 == "SectionInfanterie_Appui"
                    or switch_1 == "GroupeInfanterie_Mortier" then
                        DIA_PushBack( sFiltre, pion )
                        _continue = false
                                        cases_switch_1[1] = true
                    end
                end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Cherche_Automate_Filtre_TypeMission( sPions, type )
    local _returnValue = {}
    local sFiltre = {}
    for _,x in pairs( sPions or {} ) do
    local _continue = true
do
            local pion = x
            local mission = DEC_GetMission( pion )
            if( mission ~= nil and mission:GetType() == type ) then
                DIA_PushBack( sFiltre, pion )
            end

        end

    end

    _returnValue = sFiltre
    do return _returnValue end
end

function S_Automate_ValideEchelonPion( sUnites_XL, selPion_PE, rMax_PE, selPion_SE )
    local _returnValue = {}
    local selTemp = {}
    for _,x_xl in pairs( sUnites_XL or {} ) do
    local _continue = true
do
            if( not S_Pion_EstDetruitTactique( x_xl ) and #( selPion_PE ) < rMax_PE ) then
                do
                    DIA_PushBack( selPion_PE, x_xl )
                    DIA_PushBack( selTemp, x_xl )
                end
            else
                DIA_PushBack( selPion_SE, x_xl )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_Automate_ValideTroisEchelons_Pion( sUnites_Distribuees, selPion_PE, rMax_PE, selPion_DE, rMax_DE, selPion_TE )
    local _returnValue = {}
    local selTemp = {}
    for _,x_inf in pairs( sUnites_Distribuees or {} ) do
    local _continue = true
do
            if( not S_Pion_EstDetruitTactique( x_inf ) and #( selPion_PE ) < rMax_PE ) then
                do
                    DIA_PushBack( selPion_PE, x_inf )
                    DIA_PushBack( selTemp, x_inf )
                end
            else
if( not S_Pion_EstDetruitTactique( x_inf ) and #( selPion_DE ) < rMax_DE ) then
                    DIA_PushBack( selPion_DE, x_inf )
                else
                    DIA_PushBack( selPion_TE, x_inf )
                end
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end

function S_Convertir_TypeLima_EtatLima( eTypeLima )
    local _returnValue = nil
    _returnValue = eEtatLima_aucune
     do
        local _continue = true
        local switch_1 = eTypeLima
        local cases_switch_1 = {}
            if switch_1 == eTypeLima_LD then
                _returnValue = eEtatLima_LD
                _continue = false
                        cases_switch_1[1] = true
elseif switch_1 == eTypeLima_LC then
                _returnValue = eEtatLima_LC
                _continue = false
                        cases_switch_1[2] = true
elseif switch_1 == eTypeLima_LI then
                _returnValue = eEtatLima_LI
                _continue = false
                        cases_switch_1[3] = true
elseif switch_1 == eTypeLima_LO then
                _returnValue = eEtatLima_LO
                _continue = false
                        cases_switch_1[4] = true
elseif switch_1 == eTypeLima_LCAR then
                _returnValue = eEtatLima_LCAR
                _continue = false
                        cases_switch_1[5] = true
elseif switch_1 == eTypeLima_LR then
                _returnValue = eEtatLima_LR
                _continue = false
                        cases_switch_1[6] = true
elseif switch_1 == eTypeLima_LIA then
                _returnValue = eEtatLima_LIA
                _continue = false
                        cases_switch_1[7] = true
elseif switch_1 == eTypeLima_LCA then
                _returnValue = eEtatLima_LCA
                _continue = false
                        cases_switch_1[8] = true
            end
        end

    do return _returnValue end
end

function S_ObtenirPionsSurLima( eTypeLima )
    local _returnValue = {}
    local listePions = DEC_Automate_PionsSansPC()
    local selTemp = {}
    for _,x in pairs( listePions or {} ) do
    local _continue = true
do
            local pion = x
            local eEtatLima = S_Convertir_TypeLima_EtatLima( eTypeLima )
            if( F_Pion_GeteEtatLima( pion ) == eEtatLima ) then
                DIA_PushFront( selTemp, pion )
            end

        end

    end

    _returnValue = selTemp
    do return _returnValue end
end


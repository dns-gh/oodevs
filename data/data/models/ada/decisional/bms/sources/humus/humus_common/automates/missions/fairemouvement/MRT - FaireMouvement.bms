includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_common/automates/missions/fairemouvement/MRT - FaireMouvement.bms"] = true

--[[// *****************************************************************************
]]--[[// $Created$
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Common/Automates/Missions/FaireMouvement/MRT - FaireMouvement.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 19/09/05 9:45 $
]]--[[// $Revision: 15 $
]]--[[// $Workfile: MRT - FaireMouvement.hal $
]]--[[// *****************************************************************************
]]
--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_FaireMouvement
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_FaireMouvement"
{
    feedbacks = { { { "done_MIS_Automate_MRT_FaireMouvement" }, "MIS_Automate_MRT_FaireMouvement" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_FaireMouvement, {value} ) end,
    activations =
    {
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
        { "BEH_Medo_Automate_AssignerFaireMouvementA", { "done_BEH_Medo_Automate_AssignerFaireMouvementA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
                DEC_Trace( "$ MIS_Automate_MRT_FaireMouvement : debut MRT $" )
            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et vérification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Attention toutes les missions n'ont pas été données au PE!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
        Activate( self.activations.BEH_Medo_Automate_AssignerFaireMouvementA, 1, { DEC_Automate_PionsAvecPC(), } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Medo_Automate_AssignerFaireMouvementA
]]--[[//
]]--[[// Commentaires: 
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Medo_Automate_AssignerFaireMouvementA"
{
    feedbacks = { { { "done_BEH_Medo_Automate_AssignerFaireMouvementA" }, "BEH_Medo_Automate_AssignerFaireMouvementA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Medo_Automate_AssignerFaireMouvementA, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_AssignerFaireMouvementSurItA", { "done_BEH_Mission_Automate_AssignerFaireMouvementSurItA" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.listePions = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.mission = self.mission or DEC_GetMission( myself )
        --[[//---------------------------------------------------------------------
]]--[[// Assignation des missions
]]--[[//---------------------------------------------------------------------	
]]if( ModuleBegins() ) then
            do
                for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                local _continue = true
                    StartActivateOverride( self, self.activations.BEH_Mission_Automate_AssignerFaireMouvementSurItA, 1, { ePhase_MRT, pion, self.mission.itineraire_, } )

                end

            end
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_FaireMouvement = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Medo_Automate_AssignerFaireMouvementA, "BEH_Mission_Automate_AssignerFaireMouvementSurItA", nodes.BEH_Mission_Automate_AssignerFaireMouvementSurItA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_FaireMouvement, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_FaireMouvement, "BEH_Medo_Automate_AssignerFaireMouvementA", nodes.BEH_Medo_Automate_AssignerFaireMouvementA }

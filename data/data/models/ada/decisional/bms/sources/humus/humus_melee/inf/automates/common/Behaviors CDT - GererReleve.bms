includedFiles = includedFiles or {}
includedFiles["sources/humus/humus_melee/inf/automates/common/Behaviors CDT - GererReleve.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JCR 03-05-15 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Melee/Inf/Automates/Common/Behaviors CDT - GererReleve.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 22/08/05 16:07 $
]]--[[// $Revision: 5 $
]]--[[// $Workfile: Behaviors CDT - GererReleve.hal $
]]--[[//
]]--[[// *****************************************************************************
]]


--[[//-----------------------------------------------------------------------------
]]--[[// Conduite par defaut de l'automate face a une demande d'ordre
]]--[[//-----------------------------------------------------------------------------
]]--[[//-----------------------------------------------------------------------------
]]
--[[// ----------------------------------------------------------------------------
]]--[[// Gere la releve des pions detruits
]]--[[// ----------------------------------------------------------------------------
]]node "BEH_Dispositif_Automate_INF_GererReleve"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_INF_GererReleve" }, "BEH_Dispositif_Automate_INF_GererReleve" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_INF_GererReleve, {value} ) end,
    activations =
    {
        { "BEH_Conduite_Automate_INF_AssignerReleve", { "done_BEH_Conduite_Automate_INF_AssignerReleve" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[// Recupere les section d'infanterie en appui
]]local selPions_PourReleve = S_Cherche_Automate_PionsPourReleve()
        for _,x_pion in pairs( DEC_Automate_PionsSansPC() or emptyTable ) do
        local _continue = true
do
                if( not S_Pion_EstDetruitTactique( x_pion ) ) then
                    _continue = false
                end

                    if _continue then
                    local pionDetruit = x_pion
                    if( F_Pion_GeteEtatEchelon( pionDetruit ) == eEtatEchelon_Premier ) then
                        do
                            for _,x_appui in pairs( selPions_PourReleve or emptyTable ) do
                            local _continue = true
                                do
                                    if( not DEC_Automate_PionPeutReleverPion( x_appui, pionDetruit ) ) then
                                        _continue = false
                                    end

                                        if _continue then
                                        local rForceSoutien = 1
                                        --[[// On favorise la releve par un des pions en appui
]]if( DIA_Contains( F_Pion_GetselUnitesEnAppui( pionDetruit ), x_appui ) ) then
                                            rForceSoutien = 3
                                        end

                                        Activate( self.activations.BEH_Conduite_Automate_INF_AssignerReleve, rForceSoutien * S_ForceSoutien( x_appui, pionDetruit ), { x_appui, pionDetruit, } )
                                    end
                                end

                            end

                        end
                    end

                end
            end

        end

    end,

}

node "BEH_Dispositif_Automate_INF_GererReleve_EnDepassant"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_INF_GererReleve_EnDepassant" }, "BEH_Dispositif_Automate_INF_GererReleve_EnDepassant" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_INF_GererReleve_EnDepassant, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
    end,

}

node "BEH_Dispositif_Automate_INF_GererReleve_SurPlace"
{
    feedbacks = { { { "done_BEH_Dispositif_Automate_INF_GererReleve_SurPlace" }, "BEH_Dispositif_Automate_INF_GererReleve_SurPlace" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Dispositif_Automate_INF_GererReleve_SurPlace, {value} ) end,
    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
    end,

--[[// *****************************************************************************
]]--[[// BEH_Conduite_Automate_INF_AssignerReleve
]]--[[//
]]--[[// Commentaires: seule le comportement associé au pionEnSoutien le + proche
]]--[[//               sera instancié.
]]--[[//
]]--[[// A Mettre dans common
]]--[[// *****************************************************************************
]]}

node "BEH_Conduite_Automate_INF_AssignerReleve"
{
    feedbacks = { { { "done_BEH_Conduite_Automate_INF_AssignerReleve" }, "BEH_Conduite_Automate_INF_AssignerReleve" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Conduite_Automate_INF_AssignerReleve, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "ACT_Conduite_Automate_ReleverUnite", { "done_ACT_Conduite_Automate_ReleverUnite" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pionEnSoutien = self.params[1]
        self._namedParams.pionEnDifficulte = self.params[2]
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-------------------------------------------------------------------------
]]--[[// Init
]]--[[//-------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                                do
                end

                StartActivateOverride( self, self.activations.ACT_Conduite_Automate_ReleverUnite, 1, { self._namedParams.pionEnSoutien, self._namedParams.pionEnDifficulte, } )
            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Conduite_Automate_INF_AssignerReleve, "ACT_Conduite_Automate_ReleverUnite", nodes.ACT_Conduite_Automate_ReleverUnite }
connections[ #connections + 1 ] = { nodes.BEH_Dispositif_Automate_INF_GererReleve, "BEH_Conduite_Automate_INF_AssignerReleve", nodes.BEH_Conduite_Automate_INF_AssignerReleve }

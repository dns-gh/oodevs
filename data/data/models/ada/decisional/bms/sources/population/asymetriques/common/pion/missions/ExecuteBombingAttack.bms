includedFiles = includedFiles or {}
includedFiles["sources/population/asymetriques/common/pion/missions/ExecuteBombingAttack.bms"] = true

local emptyTable = emptyTable

--[[// *****************************************************************************
]]--[[// MIS_Pion_ASY_CommettreExaction
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_ASY_ExecuteBombingAttack"
{
    feedbacks = { { { "done_MIS_Pion_ASY_ExecuteBombingAttack" }, "MIS_Pion_ASY_ExecuteBombingAttack" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Pion_ASY_ExecuteBombingAttack, {value} ) end,
    activations =
    {
        { "BEH_Ordre_Inopine", { "done_BEH_Ordre_Inopine" } },
        { "ACT_MAJ_EtatPhaseMission", { "done_ACT_MAJ_EtatPhaseMission" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
        { "BEH_Dep_Pion_ASY_ProgresserATraversPopulationVers", { "done_BEH_Dep_Pion_ASY_ProgresserATraversPopulationVers" } },
        { "BEH_Eni_Pion_ASY_ExecuteBombingAttackAt", { "done_BEH_Eni_Pion_ASY_ExecuteBombingAttackAt" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self._namedParams.mission )
            end
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, emptyTable )
self.done_BEH_Ordre_Inopine = function( self, _, v ) self.eEtatOrdreFinMission = v[1] end
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eAction = eActionEnCours
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local _continue = true
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "** MIS_Pion_ASY_ExecuteBombingAttack: start **", } )
                    self.ePhaseMission = eAborderObjectif
                    _continue = false
                --[[// Rejoindre la zone
]]                cases_switch_1[1] = true
elseif switch_1 == eAborderObjectif then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnInfiltration, } )
                    if( not S_Geometrie_EstProchePosition( DEC_Agent_Position(), self._namedParams.mission.location_, 100 ) ) then
                        Activate( self.activations.BEH_Dep_Pion_ASY_ProgresserATraversPopulationVers, 1, { self._namedParams.mission.location_, } )
                    else
                        self.ePhaseMission = eNettoyer
                    end

                    _continue = false
                --[[// Commettre les exactions
]]                cases_switch_1[2] = true
elseif switch_1 == eNettoyer then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_EnPosition, } )
                    --[[//choisir une population et la rejoindre, en même temps agresser toute population ennemie à portée
]]Activate( self.activations.BEH_Eni_Pion_ASY_ExecuteBombingAttackAt, 1, { self._namedParams.mission.location_, } )
                    _continue = false
                --[[// Fin --> sur ordre
]]                cases_switch_1[3] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                                        Halt( self )
                    do return end

                                end
            end

    end,

}

node "BEH_Eni_Pion_ASY_ExecuteBombingAttackAt"
{
    feedbacks = { { { "done_BEH_Eni_Pion_ASY_ExecuteBombingAttackAt" }, "BEH_Eni_Pion_ASY_ExecuteBombingAttackAt" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Eni_Pion_ASY_ExecuteBombingAttackAt, {value} ) end,
    activations =
    {
        { "ACT_Eni_Pion_ASY_CommettreAttentatContrePopulation", { "done_ACT_Eni_Pion_ASY_CommettreAttentatContrePopulation" } },
        { "ACT_Info_Trace", { "done_ACT_Info_Trace" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.location = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.locPosition = self.locPosition or nil
        self.listPopulations = self.listPopulations or DEC_Connaissances_Populations()
        if( ModuleBegins() ) then
            do
                local point = DEC_Geometrie_CalculerPositionObstacle( self._namedParams.location, S_TypeObject_ToString( eTypeObjectDirtyBomb ), 200 )
                self.locPosition = DEC_Geometrie_ConvertirPointEnLocalisation( point )
                DEC_CreerObjetSansDelais( S_TypeObject_ToString( eTypeObjectDirtyBomb ), self.locPosition )
                for _,pop in pairs( self.listPopulations or emptyTable ) do
                local _continue = true
                    do
                        --[[//rejoindre la population
]]local populationLocation = DEC_ConnaissancePopulation_PointPlusProche( pop )
                        if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), populationLocation, 100 ) ) then
                            Activate( self.activations.ACT_Eni_Pion_ASY_CommettreAttentatContrePopulation, 1, { pop, } )
                        end

                    end

                end

            end
        end

        Activate( self.activations.ACT_Info_Trace, 1, { "Suicide Attack : done", } )
    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASY_ExecuteBombingAttack = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ASY_ExecuteBombingAttackAt, "ACT_Eni_Pion_ASY_CommettreAttentatContrePopulation", nodes.ACT_Eni_Pion_ASY_CommettreAttentatContrePopulation }
connections[ #connections + 1 ] = { nodes.BEH_Eni_Pion_ASY_ExecuteBombingAttackAt, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_ExecuteBombingAttack, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_ExecuteBombingAttack, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_ExecuteBombingAttack, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_ExecuteBombingAttack, "BEH_Dep_Pion_ASY_ProgresserATraversPopulationVers", nodes.BEH_Dep_Pion_ASY_ProgresserATraversPopulationVers }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_ExecuteBombingAttack, "BEH_Eni_Pion_ASY_ExecuteBombingAttackAt", nodes.BEH_Eni_Pion_ASY_ExecuteBombingAttackAt }

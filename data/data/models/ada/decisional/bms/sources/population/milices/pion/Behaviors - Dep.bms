includedFiles = includedFiles or {}
includedFiles["sources/population/milices/pion/Behaviors - Dep.bms"] = true

--[[// *****************************************************************************
]]--[[// BEH_Lima_Pion_RejoindreFuseau_EnAttente
]]--[[//
]]--[[// Commentaires: Gerer la coordination sur les fuseaux. Lorsque l'on rejoint
]]--[[//	 son fuseau, le pion attent l'ordre de pousuivre (deboucher)
]]--[[// *****************************************************************************
]]node "BEH_Lima_Pion_RejoindreFuseau_EnAttente"
{
    activations =
    {
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Dep_PasserSurLima", {} },
        { "BEH_Ordre_SePoster_EnAttente", {} },
    },

    create = function( self )
    end,

    activate = function( self )
        self.ePhase = self.ePhase or eRejoindre
        self.eOrdre = self.eOrdre or eActionEnCours
        if( ModuleBegins() ) then
if( DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
                self.params.__returnValue = eActionEffectuee
                Halt( self )
                do return end
            end
        end

        if( self.eOrdre == eActionEffectuee ) then
            self.params.__returnValue = eActionEffectuee
            Halt( self )
            do return end
        end

        Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_RejointFuseau, } )
        if( self.ePhase == eAttendre ) then
            Activate( self.activations.ACT_Dep_PasserSurLima, 1, { eEtatLima_Fuseau, } )
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eRejoindre then
                    if( not DEC_Geometrie_EstPointDansFuseau( DEC_Agent_Position() ) ) then
                        return
                    end

                    self.ePhase = eAttendre
                                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eAttendre then
                    Activate( self.activations.BEH_Ordre_SePoster_EnAttente, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eOrdre = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[2] = true
                end
            end

    end,

--[[// *****************************************************************************
]]--[[//
]]--[[// $Created: JDY 02-11-06 $
]]--[[// $Archive: /MVW_v10/Build/Data/Data/Modeles/Sources/Population/Milices/Pion/Behaviors - Dep.hal $
]]--[[// $Author: Ggr $
]]--[[// $Modtime: 25/08/05 17:45 $
]]--[[// $Revision: 13 $
]]--[[// $Workfile: Behaviors - Dep.hal $
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Dep_Pion_INF_MiseEnPlace_Mission"
{
    activations =
    {
        { "ACT_RC", {} },
        { "BEH_Dep_ProgressionVers", {} },
        { "ACT_MAJ_EtatPhaseMission", {} },
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "ACT_Obs_EtablirVisionFaceADir", {} },
        { "ACT_Misc_Pion_DelaiInstallation", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.rTempsPreparation = self.params[1]
        self._namedParams.ptObjectif = self.params[2]
        self._namedParams.bRejoindreObj = self.params[3]
    end,

    activate = function( self )
        self.ePhase = self.ePhase or ePreparerMission
        self.eAction = self.eAction or eActionEnCours
        self.eActionIti = self.eActionIti or eActionEnCours
        self.eActionPreparation = self.eActionPreparation or eActionEnCours
        self.eActionRejoindre = self.eActionRejoindre or eActionEnCours
        if( self.eActionRejoindre == eActionImpossible ) then
            do
                                do
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eActionRejoindre == eActionEffectuee ) then
            do
                self.eActionRejoindre = eActionEnCours
                                do
                    if( not S_Geometrie_EstProchePosition( self._namedParams.ptObjectif, DEC_Agent_Position(), 1000 ) ) then
                        self.params.__returnValue = eActionImpossible
                        Halt( self )
                        do return end
                    end

                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        do
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    Activate( self.activations.ACT_RC, 1, { eRC_DebutMission, } )
                    StartActivate( self.activations.BEH_Dep_ProgressionVers, 1, setmetatable( { self._namedParams.ptObjectif, eProgressionDefaut, eTypeItiReconnaissance, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionRejoindre = v else rawset( t, k, v ) end end } ) )
                    self.ePhase = eReconnaitre
                --[[// On cherche une position d'observation
]]                cases_switch_1[1] = true
                end
                if cases_switch_1[1] or switch_1 == eReconnaitre then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_ProgressionVersLocalisation, } )
                    --[[// Calcul de position d'observation ?
]]if( S_EstADistanceTir_Pt( self._namedParams.ptObjectif ) ) then
                        do
                            Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1.5, { eEtatPhaseMission_ReconnaissanceLocalisation, } )
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ptObjectif, } )
                            if( DEC_Perception_PointEstVisible( self._namedParams.ptObjectif ) ) then
                                self.eAction = eActionEffectuee
                            end

                        end
                    end

                    if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = eSurveiller
                            if( not self._namedParams.bRejoindreObj ) then
                                StopActivate( self.activations.BEH_Dep_ProgressionVers, { self._namedParams.ptObjectif, eProgressionDefaut, eTypeItiReconnaissance, } )
                            end

                        end
                    else
                        self.params.__returnValue = eActionEnCours
                        return
                    end

                                cases_switch_1[2] = true
                end
                if cases_switch_1[2] or switch_1 == eSurveiller then
                    --[[// Observe la direction dangereuse		
]]local mission = DEC_GetMission( myself )
                    Activate( self.activations.ACT_Obs_EtablirVisionFaceADir, 1, { DEC_GetDirectionDanger( mission ), } )
                    --[[// Encore d'actualite ?
]]--[[// $$$$ Penser au debarquement pr les VAB/MILAN				
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                                                        do
                                                                do
                                end

                                if( self._namedParams.bRejoindreObj ) then
                                    self.ePhase = eRejoindre
                                else
                                    self.params.__returnValue = eActionEffectuee
                                    Halt( self )
                                    do return end
                                end

                            end

                        end
                    end

                    Activate( self.activations.ACT_Misc_Pion_DelaiInstallation, 1, setmetatable( { eNiveauInstallation_Poste, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eAction = v else rawset( t, k, v ) end end } ) )
                    
                                cases_switch_1[3] = true
elseif switch_1 == eRejoindre then
                    
                                cases_switch_1[4] = true

                else
                                end
            end

    end,

}

node "BEH_Dep_Pion_Milice_MiseEnPlace_Embuscade"
{
    activations =
    {
        { "BEH_Dep_ProgressionSur", {} },
        { "ACT_Obs_EtablirVisionVersPt", {} },
        { "ACT_Dep_SePoster", {} },
        { "ACT_Info_Trace", {} },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ptEmbuscade = self.params[1]
    end,

    activate = function( self )
        self.itineraire_Pt = self.itineraire_Pt or {}
        self.ePhase = self.ePhase or eReconnaitre
        self.eAction = self.eAction or eActionEnCours
        self.eActionRejoindre = self.eActionRejoindre or eActionEnCours
        if( ModuleBegins() ) then
            self.itineraire_Pt = S_CreerItineraire_Embuscade( self._namedParams.ptEmbuscade )
        end

        if( self.eActionRejoindre == eActionImpossible ) then
            do
                                do
                                        self.params.__returnValue = eActionImpossible
                    Halt( self )
                    do return end

                end

                                self.params.__returnValue = eActionImpossible
                Halt( self )
                do return end

            end
        end

        if( self.eActionRejoindre == eActionEffectuee ) then
            do
                self.eActionRejoindre = eActionEnCours
                                do
                                        self.params.__returnValue = eActionEffectuee
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Dep_ProgressionSur, 1, setmetatable( { self.itineraire_Pt, eProgressionReco, eTypeItiReconnaissance, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eActionRejoindre = v else rawset( t, k, v ) end end } ) )
        do
        end

         do
            local switch_1 = self.ePhase
            local cases_switch_1 = {}
                if switch_1 == eReconnaitre then
                    --[[// On cherche une position d'observation
]]if( S_Geometrie_EstProchePosition( self._namedParams.ptEmbuscade, DEC_Agent_Position(), 600 ) ) then
                        do
                            Activate( self.activations.ACT_Obs_EtablirVisionVersPt, 1.5, { self._namedParams.ptEmbuscade, } )
                            if( DEC_Perception_PointEstVisible( self._namedParams.ptEmbuscade ) ) then
                                do
                                    self.eAction = eActionEnCours
                                    self.ePhase = eSurveiller
                                end
                            end

                        end
                    end

                                        self.params.__returnValue = eActionEnCours
                    return

                                end
                if cases_switch_1[1] or switch_1 == eSurveiller then
                    Activate( self.activations.ACT_Dep_SePoster, 1.1, {} )
                    Activate( self.activations.ACT_Info_Trace, 1, { "Position atteinte", } )
                    --[[// $$$$ Penser au debarquement pr les VAB/MILAN
]]--[[// Observe la direction dangereuse				action ACT_Misc_Pion_DelaiInstallation( eNiveauInstallation_Poste ) return in  
]]if( self.eAction == eActionEffectuee ) then
                        do
                            self.eAction = eActionEnCours
                            self.ePhase = eRejoindre
                        end
                    else
do
                            
                                                        return

                        end
                    end

                    
                                cases_switch_1[2] = true

                else
                                end
            end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "BEH_Dep_ProgressionVers", nodes.BEH_Dep_ProgressionVers }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "ACT_Obs_EtablirVisionFaceADir", nodes.ACT_Obs_EtablirVisionFaceADir }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_INF_MiseEnPlace_Mission, "ACT_Misc_Pion_DelaiInstallation", nodes.ACT_Misc_Pion_DelaiInstallation }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Milice_MiseEnPlace_Embuscade, "BEH_Dep_ProgressionSur", nodes.BEH_Dep_ProgressionSur }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Milice_MiseEnPlace_Embuscade, "ACT_Obs_EtablirVisionVersPt", nodes.ACT_Obs_EtablirVisionVersPt }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Milice_MiseEnPlace_Embuscade, "ACT_Dep_SePoster", nodes.ACT_Dep_SePoster }
connections[ #connections + 1 ] = { nodes.BEH_Dep_Pion_Milice_MiseEnPlace_Embuscade, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente, "ACT_Dep_PasserSurLima", nodes.ACT_Dep_PasserSurLima }
connections[ #connections + 1 ] = { nodes.BEH_Lima_Pion_RejoindreFuseau_EnAttente, "BEH_Ordre_SePoster_EnAttente", nodes.BEH_Ordre_SePoster_EnAttente }

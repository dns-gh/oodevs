includedFiles = includedFiles or {}
includedFiles["sources/population/milices/pion/Behaviors - Obj.bms"] = true

--[[// *****************************************************************************
]]--[[/** \file S VAB - Behaviors - Defensif.hal
 *
 * $Author: Ggr $
 * $Modtime: 19/09/05 9:45 $
 * $Revision: 10 $
 *
 */]]--[[// Created: JCR 03-02-12
]]--[[// *****************************************************************************
]]
--[[//=============================================================================
]]--[[//
]]
--[[// Comportements defensifs, renseignement ..
]]
--[[//
]]
--[[//=============================================================================
]]
--[[//
]]
--[[// behavior BEH_Obj_Pion_VAB_InstallerPlanObstacle ( T_Localisation )
]]--[[// 
]]--[[//=============================================================================
]]--[[//-----------------------------------------------------------------------------
]]--[[// Installation d'une zone d'obstacles suivant le terrains a une certaine 
]]--[[// distance vers la direction dangereuse
]]
--[[//
]]
--[[// Principalement utilise dans les missions defensives comme :
]]
--[[//            - MIS_Pion_INF_Defendre()
]]
--[[//            - MIS_Pion_INF_Interdire()
]]--[[//-----------------------------------------------------------------------------
]]node "BEH_Obj_Pion_VAB_InstallerPlanObstacle"
{
    feedbacks = { { { "done_BEH_Obj_Pion_VAB_InstallerPlanObstacle" }, "BEH_Obj_Pion_VAB_InstallerPlanObstacle" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Obj_Pion_VAB_InstallerPlanObstacle, {value} ) end,
    activations =
    {
        { "ACT_Obj_Pion_INF_RealiserBouchonMines", { "done_ACT_Obj_Pion_INF_RealiserBouchonMines" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.locMine = self.params[1]
    end,

    activate = function( self )
        self.eAction = self.eAction or eActionEnCours
        self.locPtMine = self.locPtMine or nil
        self.ptMission = self.ptMission or nil
        if( ModuleBegins() ) then
            do
                if( ( self._namedParams.locMine == 0 or self._namedParams.locMine == nil ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                DEC_Trace( "  installation plan d'obstacle" )
                self.ptMission = DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( self._namedParams.locMine )
                if( ( self.ptMission == 0 or self.ptMission == nil ) ) then
                    self:SendFeedback( eActionImpossible )
                    Halt( self )
                    do return end
                end

                self.locPtMine = DEC_Geometrie_CalculerPositionObstacle( self.ptMission, S_TypeObject_ToString( eTypeObjectBouchonMines ), 800 )
                if( ( self.locPtMine == 0 or self.locPtMine == nil ) ) then
--[[// Pour le moment, on fait un bouchon de mines
]]                    self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end
                end

            end
        end

        if( self.eAction ~= eActionEnCours ) then
            self:SendFeedback( self.eAction )
            Halt( self )
            do return end
        end

        Activate( self.activations.ACT_Obj_Pion_INF_RealiserBouchonMines, 1, { self.locPtMine, } )
self.done_ACT_Obj_Pion_INF_RealiserBouchonMines = function( self, _, v ) self.eAction = v[1] end
    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Obj_Pion_VAB_InstallerPlanObstacle, "ACT_Obj_Pion_INF_RealiserBouchonMines", nodes.ACT_Obj_Pion_INF_RealiserBouchonMines }

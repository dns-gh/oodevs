includedFiles = includedFiles or {}
includedFiles["sources/population/milices/pion/Fonctions.bms"] = true

include "bit.lua"

--[[// ----------------------------------------------------------------------------
]]--[[// $Created : JCR : 16/06/2004 10:47
]]--[[// Cree un itineraire a partir d'un seul point
]]--[[// ----------------------------------------------------------------------------
]]--[[// -------------------------------------------------------------------------
]]--[[// S_ChercherPosition_Mine :
]]--[[//        Cherche une position sur laquelle on peut miner et non genante pour
]]--[[//        le pion
]]--[[// -------------------------------------------------------------------------
]]--[[// Si l'on est ou non sur la position
]]--[[// Init de la position
]]--[[// (1) On cherche une position proche de l'objectif
]]--[[// ---------------------------------------------------------------------
]]--[[//$$$ INUTILE
]]--[[// (2) On cherche une position decale de l'objectif dans le sens de la
]]--[[//     direction dangereuse
]]--[[//       si l'on est proche de l'objectif on augmente la distance
]]--[[// ---------------------------------------------------------------------
]]--[[// On se decale
]]--[[// On a trouve une position
]]--[[//$$$ INUTILE
]]--[[// Si elle est trop proche, on quitte
]]--[[// sinon, on renvoie la position
]]function S_EstADistanceTir_Pt( ptTir )
    local _returnValue = false
    _returnValue = DEC_Geometrie_Distance( DEC_Agent_Position(), ptTir ) < 1000
    return _returnValue
end

function S_CreerItineraire_Embuscade( ptEmbuscade )
    local _returnValue = {}
    _returnValue = DEC_Geometrie_CreerListePoints()
    assert( ( myself.ptRegroupement_ ~= 0 and myself.ptRegroupement_ ~= nil ), "myself.objectifEsquive_ != 0" )
    assert( ( ptEmbuscade ~= 0 and ptEmbuscade ~= nil ), "ptEmbuscade != 0" )
    DEC_Copie_PointDansListePoints( myself.ptRegroupement_, _returnValue )
    DEC_ListePoints_PushBack( _returnValue, ptEmbuscade )
    return _returnValue
end

function S_Geometrie_Milice_ChercherPositionObstacle( ptMission, natureObstacle, rDistMoyenObstacle )
    local _returnValue = nil
    local ptMineMieux = nil
    local rDelta = 1
    _returnValue = nil
    ptMineMieux = DEC_Geometrie_CalculerPositionObstacle( ptMission, S_TypeObject_ToString( natureObstacle ), 500 )
    if( ( ptMineMieux ~= 0 and ptMineMieux ~= nil ) and not S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMineMieux, 200 ) ) then
        do
            _returnValue = DEC_Geometrie_ConvertirPointEnLocalisation( ptMineMieux )
                        return _returnValue

        end
    end

    if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMission, 200 ) ) then
        rDelta = 1.5
    end

    local mission = DEC_GetMission( myself )
    local ptMine = DEC_Geometrie_PositionTranslateDir( ptMission, DEC_GetDirectionDanger( mission ), rDelta * rDistMoyenObstacle )
    ptMineMieux = DEC_Geometrie_CalculerPositionObstacle( ptMine, S_TypeObject_ToString( natureObstacle ), 800 )
    if( ( ptMineMieux ~= 0 and ptMineMieux ~= nil ) ) then
        do
            if( S_Geometrie_EstProchePosition( DEC_Agent_Position(), ptMineMieux, 300 ) ) then
                return _returnValue
            end

            _returnValue = DEC_Geometrie_ConvertirPointEnLocalisation( ptMineMieux )
        end
    end

    return _returnValue
end


includedFiles = includedFiles or {}
includedFiles["sources/population/populations/Behaviors.bms"] = true

local emptyTable = emptyTable

include "bit.lua"


--[[// *****************************************************************************
]]--[[// L'ESSENTIEL DE L'ADAPTATION PEUT SE FAIRE EN MODIFIANT DES PARAMETRES
]]--[[// DANS LE FICHIER "Functions.hal"
]]--[[// *****************************************************************************
]]
use_priority = no

max_instances = 10

max_activations = 10


actuators = {
silenceradio = 1,
deplacement = 1,
ordre = 1,
}


--[[//INCLUDE ACTIONS
]]include "Population/Populations/Actions.bms"


--[[// INCLUDE MISSIONS
]]include "Population/Populations/Missions/FaireMouvement.bms"

include "Population/Populations/Missions/CommettreExactions.bms"

include "Population/Populations/Missions/Manifester.bms"
--[[// *****************************************************************************
]]--[[// default
]]--[[//
]]--[[// Commentaires: Mise à jour de la variable VE_Courage qui autorise ou inhibe le tir
]]--[[// la valeur est corrélée à la VE_Domination selon un mécanisme de double seuil
]]--[[//
]]--[[// *****************************************************************************
]]node "DefaultBehavior"
{
    feedbacks = { { { "done_Default" }, "Default" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_Default, {value} ) end,
    activations =
    {
        { "BEH_Default", { "done_BEH_Default" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.BEH_Default, 1, emptyTable )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Default
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.Default, "Default", nodes.DefaultBehavior }
node "BEH_Default"
{
    feedbacks = { { { "done_BEH_Default" }, "BEH_Default" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Default, {value} ) end,
    activations =
    {
        { "BEH_Pop_ReagirFaceAPropagande", { "done_BEH_Pop_ReagirFaceAPropagande" } },
        { "ACT_Ordre_Suppression", { "done_ACT_Ordre_Suppression" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        S_ChangerAttitude( S_AggraveAttitudeAttrition( GetStateVariable( "VE_Morts" ) ) )
        UpdateStateVariable( "VE_Morts", DEC_Population_Morts() - GetStateVariable( "VE_Morts" ) )
        --[[// =============================================================================
]]--[[// Evolution naturelle de la VE_Domination
]]--[[// On utilise pas de "natural evolution" car celle ci doit être une
]]--[[// valeur constante dans DirectIA3, ce qui peut être restrictif dans le cas présent
]]--[[// =============================================================================
]]UpdateStateVariable( "VE_Domination", g_NaturalEvolutionDomination )
        --[[// =============================================================================
]]--[[// Gestion du blocage du tir avec la domination à deux seuils
]]--[[// =============================================================================
]]local rCourage = GetStateVariable( "VE_Courage" )
        if( GetStateVariable( "VE_Domination" ) == 0 and rCourage == 1 ) then
            do
                UpdateStateVariable( "VE_Courage", -rCourage )
                if( GetStimulus( "STIM_ZoneSecurisee" ) > 0 ) then
                    DEC_RC( eRC_PopulationTemporairementControlee )
                else
                    DEC_RC( eRC_PopulationTemporairementRepoussee )
                end

            end
        else
if( GetStateVariable( "VE_Domination" ) == 1 and rCourage == 0 ) then
                do
                    UpdateStateVariable( "VE_Courage", 1 - rCourage )
                end
--[[// =============================================================================
]]--[[// Signalisation de la domination
]]--[[// =============================================================================
]]            end
        end

        DEC_Population_ChangeEtatDomination( GetStateVariable( "VE_Domination" ) * GetStateVariable( "VE_Courage" ) )
        Activate( self.activations.BEH_Pop_ReagirFaceAPropagande, 1, emptyTable )
        --[[// =============================================================================
]]--[[// Reception d'un ordre de l'ANIBAS
]]--[[// =============================================================================
]]local ordres_recus = DEC_GetCategory( "ordres_recus" )
        for _,x in pairs( ordres_recus or emptyTable ) do
        local _continue = true
do
                local repOrdre = x
                 do
                    local _continue = true
                    local switch_1 = repOrdre:GetType()
                        if switch_1 == "Rep_OrderConduite_AttendreSePoster" then
                            DEC_Trace( "======= Ordre --> Stationnement =====" )
                            UpdateStateVariable( "VE_Stationner", 1 - GetStateVariable( "VE_Stationner" ) )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Poursuivre" then
                            DEC_Trace( "======= Ordre --> Fin du Stationnement =====" )
                            UpdateStateVariable( "VE_Stationner", 0 - GetStateVariable( "VE_Stationner" ) )
                            _continue = false
                        elseif switch_1 == "Rep_OrderConduite_Population_ChangerAttitude" then
                            local ordreAtt = repOrdre
                            S_ChangerAttitude( ordreAtt:GetorderConduitePopulationChangerAttitude_() )
                            _continue = false
                                                end
                    end

                Activate( self.activations.ACT_Ordre_Suppression, 1, { x, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_RejoindrePoint
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_RejoindrePoint"
{
    feedbacks = { { { "done_BEH_Pop_RejoindrePoint" }, "BEH_Pop_RejoindrePoint" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_RejoindrePoint, {value} ) end,
    activations =
    {
        { "ACT_Pop_RejoindrePoint", { "done_ACT_Pop_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.point = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Pop_RejoindrePoint, 1, { self._namedParams.point, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_Stationner
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_Stationner"
{
    feedbacks = { { { "done_BEH_Pop_Stationner" }, "BEH_Pop_Stationner" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_Stationner, {value} ) end,
    activations =
    {
        { "ACT_Pop_Stationner", { "done_ACT_Pop_Stationner" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
                if( ModuleBegins() ) then
            DEC_RC( eRC_EnStationnement )
        end

        Activate( self.activations.ACT_Pop_Stationner, 1, emptyTable )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_RejoindreInstallation
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_RejoindreInstallation"
{
    feedbacks = { { { "done_BEH_Pop_RejoindreInstallation" }, "BEH_Pop_RejoindreInstallation" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_RejoindreInstallation, {value} ) end,
    instances =
    {
        max = 1,
    },

    activations =
    {
        { "BEH_Pop_RejoindrePoint", { "done_BEH_Pop_RejoindrePoint" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.installation = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
                self.objectif = self.objectif or nil
        if( ModuleBegins() ) then
            do
                DEC_RC( eRC_AttaqueInstallation, self._namedParams.installation )
                self.objectif = DEC_ConnaissanceObjet_PointPlusProche( self._namedParams.installation )
            end
        end

        Activate( self.activations.BEH_Pop_RejoindrePoint, S_Force_Distance( DEC_ConnaissanceObjet_Distance( self._namedParams.installation ) ), { self.objectif, } )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_DegraderInstallations
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_DegraderInstallations"
{
    feedbacks = { { { "done_BEH_Pop_DegraderInstallations" }, "BEH_Pop_DegraderInstallations" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_DegraderInstallations, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "ACT_Pop_DegraderInstallations", { "done_ACT_Pop_DegraderInstallations" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.zone = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtatDelai = self.eEtatDelai or eActionEnCours
        if( self.eEtatDelai == eActionEnCours and GetStateVariable( "VE_Courage" ) > 0 ) then
            do
                --[[//un echauffouré dure g_delaiAltercations min, ce qui signifie qu'il n'y a de tir réel qu'un tick toute les 2 min
]]Activate( self.activations.ACT_Misc_Delai, 1, { BEH_Pop_DegraderInstallations, g_delaiAltercations, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtatDelai = v[1] end
                Activate( self.activations.ACT_Pop_DegraderInstallations, 1, { self._namedParams.zone, 0, } )
            end
        else
if( GetStateVariable( "VE_Courage" ) > 0 ) then
                do
                    --[[//tir réel représentant l'effet d'un echauffouré de 2 min
]]Activate( self.activations.ACT_Pop_DegraderInstallations, 1, { self._namedParams.zone, 1, } )
                    self.eEtatDelai = eActionEnCours
                end
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_RalentissementPions
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_RalentissementPions"
{
    feedbacks = { { { "done_BEH_Pop_RalentissementPions" }, "BEH_Pop_RalentissementPions" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_RalentissementPions, {value} ) end,
    activations =
    {
        { "ACT_Pop_RalentissementPions", { "done_ACT_Pop_RalentissementPions" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        Activate( self.activations.ACT_Pop_RalentissementPions, 1, emptyTable )
    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_PAPPions
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_PAPPions"
{
    feedbacks = { { { "done_BEH_Pop_PAPPions" }, "BEH_Pop_PAPPions" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_PAPPions, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "ACT_Pop_PAPPions", { "done_ACT_Pop_PAPPions" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtatDelai = self.eEtatDelai or eActionEnCours
        if( self.eEtatDelai == eActionEnCours and GetStateVariable( "VE_Courage" ) > 0 ) then
            do
                --[[//un echauffouré dure g_delaiAltercations min, ce qui signifie qu'il n'y a de tir réel qu'un tick toute les 2 min
]]Activate( self.activations.ACT_Misc_Delai, 1, { BEH_Pop_PAPPions, g_delaiAltercations, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtatDelai = v[1] end
                Activate( self.activations.ACT_Pop_PAPPions, 1, { 0.01, } )
            end
        else
if( GetStateVariable( "VE_Courage" ) > 0 ) then
                do
                    --[[//tir réel représentant l'effet d'un echauffouré de 2 min
]]Activate( self.activations.ACT_Pop_PAPPions, 1, { S_IntensiteManifestationSurPions(), } )
                    self.eEtatDelai = eActionEnCours
                end
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_PAPPion
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_PAPPion"
{
    feedbacks = { { { "done_BEH_Pop_PAPPion" }, "BEH_Pop_PAPPion" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_PAPPion, {value} ) end,
    activations =
    {
        { "ACT_Misc_Delai", { "done_ACT_Misc_Delai" } },
        { "ACT_Pop_PAPPion", { "done_ACT_Pop_PAPPion" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.pion = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.eEtatDelai = self.eEtatDelai or eActionEnCours
        if( self.eEtatDelai == eActionEnCours and GetStateVariable( "VE_Courage" ) > 0 ) then
            do
                --[[//un echauffouré dure g_delaiAltercations min, ce qui signifie qu'il n'y a de tir réel qu'un tick toute les 2 min
]]Activate( self.activations.ACT_Misc_Delai, 1, { BEH_Pop_PAPPion, g_delaiAltercations, } )
self.done_ACT_Misc_Delai = function( self, _, v ) self.eEtatDelai = v[1] end
                Activate( self.activations.ACT_Pop_PAPPion, 1, { self._namedParams.pion, 0.01, } )
            end
        else
if( GetStateVariable( "VE_Courage" ) > 0 ) then
                do
                    --[[//tir réel représentant l'effet d'un echauffouré de 2 min
]]Activate( self.activations.ACT_Pop_PAPPion, 1, { self._namedParams.pion, S_IntensiteManifestationSurPions(), } )
                    self.eEtatDelai = eActionEnCours
                end
            end
        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_RepondreALaPriseAPartie
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_RepondreALaPriseAPartie"
{
    feedbacks = { { { "done_BEH_Pop_RepondreALaPriseAPartie" }, "BEH_Pop_RepondreALaPriseAPartie" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_RepondreALaPriseAPartie, {value} ) end,
    activations =
    {
        { "BEH_Pop_PAPPion", { "done_BEH_Pop_PAPPion" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        local lstPions = DEC_Connaissances_PionsPrenantAPartie()
        for _,pion in pairs( lstPions or emptyTable ) do
        local _continue = true
do
                Activate( self.activations.BEH_Pop_PAPPion, 1, { pion, } )
            end

        end

    end,

--[[// *****************************************************************************
]]--[[// BEH_Pop_ReagirFaceAPropagande
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Pop_ReagirFaceAPropagande"
{
    feedbacks = { { { "done_BEH_Pop_ReagirFaceAPropagande" }, "BEH_Pop_ReagirFaceAPropagande" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_ReagirFaceAPropagande, {value} ) end,
    activations =
    {
        { "BEH_Pop_DiminueAgressivite", { "done_BEH_Pop_DiminueAgressivite" } },
    },

    create = function( self )
    end,

    activate = function( self )
        local Activate = Activate
        --[[//-----------------------------------------------------------------------------
]]--[[// Look at closed propaganda objects
]]--[[//-----------------------------------------------------------------------------
]]local locations = DEC_Population_Positions()
        local it = 0
        while it < #( locations ) do
            local _continue = true
do
                local location = DEC_UserTypeList_GetAt( locations, it )
                local leaflets = DEC_Connaissances_ObjetsDansZone( location, S_TypeObject_ToString( eTypeObjectLeaflet ) )
                for _,leaflet in pairs( leaflets or emptyTable ) do
                local _continue = true
do
                        local ptPOP = DEC_Geometrie_CalculerBarycentreLocalisation( location )
                        local locLeaflet = DEC_ConnaissanceObjet_Localisation( leaflet )
                        local ptLeaflet = DEC_Geometrie_CalculerBarycentreLocalisation( locLeaflet )
                        if( S_Geometrie_EstProchePosition( ptPOP, ptLeaflet, 300 ) ) then
                            StartActivateOverride( self, self.activations.BEH_Pop_DiminueAgressivite, 1, { leaflet, } )
                        end

                    end

                end

            end
        it = it + 1
        end

    end,

}

node "BEH_Pop_DiminueAgressivite"
{
    feedbacks = { { { "done_BEH_Pop_DiminueAgressivite" }, "BEH_Pop_DiminueAgressivite" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Pop_DiminueAgressivite, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ptLeaflet = self.params[1]
    end,

    activate = function( self )
        local Activate = Activate
        self.attitude = self.attitude or DEC_Population_Attitude()
        if( ModuleBegins() ) then
            do
                DEC_Trace( "=== New leaflet perceived " )
                DEC_Trace( " == UPDATE population attitude" )
                 do
                    local _continue = true
--[[/*NOTHING*/]]                    local switch_1 = self.attitude
                        if switch_1 == eAttitudePopulation_Calme then
                                                    DEC_Trace( "=== was Calme ===" )
                            _continue = false
                        elseif switch_1 == eAttitudePopulation_Agitee then
                                                    DEC_Trace( "=== was Agitee ===" )
                            S_ChangerAttitude( eAttitudePopulation_Calme )
                            _continue = false
                        elseif switch_1 == eAttitudePopulation_Excitee then
                                                    DEC_Trace( "=== was Excitee ===" )
                            S_ChangerAttitude( eAttitudePopulation_Agitee )
                            _continue = false
                        elseif switch_1 == eAttitudePopulation_Agressive then
                                                    DEC_Trace( "=== was Agressive ===" )
                            S_ChangerAttitude( eAttitudePopulation_Excitee )
                            _continue = false
                                                end
                    end

            end
        end

    end,

}

connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Default, "BEH_Pop_ReagirFaceAPropagande", nodes.BEH_Pop_ReagirFaceAPropagande }
connections[ #connections + 1 ] = { nodes.BEH_Default, "ACT_Ordre_Suppression", nodes.ACT_Ordre_Suppression }
connections[ #connections + 1 ] = { nodes.BEH_Pop_DegraderInstallations, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Pop_DegraderInstallations, "ACT_Pop_DegraderInstallations", nodes.ACT_Pop_DegraderInstallations }
connections[ #connections + 1 ] = { nodes.BEH_Pop_PAPPion, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Pop_PAPPion, "ACT_Pop_PAPPion", nodes.ACT_Pop_PAPPion }
connections[ #connections + 1 ] = { nodes.BEH_Pop_PAPPions, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }
connections[ #connections + 1 ] = { nodes.BEH_Pop_PAPPions, "ACT_Pop_PAPPions", nodes.ACT_Pop_PAPPions }
connections[ #connections + 1 ] = { nodes.BEH_Pop_RalentissementPions, "ACT_Pop_RalentissementPions", nodes.ACT_Pop_RalentissementPions }
connections[ #connections + 1 ] = { nodes.BEH_Pop_ReagirFaceAPropagande, "BEH_Pop_DiminueAgressivite", nodes.BEH_Pop_DiminueAgressivite }
connections[ #connections + 1 ] = { nodes.BEH_Pop_RejoindreInstallation, "BEH_Pop_RejoindrePoint", nodes.BEH_Pop_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Pop_RejoindrePoint, "ACT_Pop_RejoindrePoint", nodes.ACT_Pop_RejoindrePoint }
connections[ #connections + 1 ] = { nodes.BEH_Pop_RepondreALaPriseAPartie, "BEH_Pop_PAPPion", nodes.BEH_Pop_PAPPion }
connections[ #connections + 1 ] = { nodes.BEH_Pop_Stationner, "ACT_Pop_Stationner", nodes.ACT_Pop_Stationner }
connections[ #connections + 1 ] = { nodes.DefaultBehavior, "BEH_Default", nodes.BEH_Default }

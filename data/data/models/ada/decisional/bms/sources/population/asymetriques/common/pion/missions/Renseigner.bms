includedFiles = includedFiles or {}
includedFiles["sources/population/asymetriques/common/pion/missions/Renseigner.bms"] = true

--[[// *****************************************************************************
]]--[[// MIS_Pion_ASY_Renseigner
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Pion_ASY_Renseigner"
{
    activations =
    {
        { "BEH_Ordre_Inopine", { "onHalt" } },
        { "ACT_MAJ_EtatPhaseMission", { "onHalt" } },
        { "ACT_Info_Trace", { "onHalt" } },
        { "ACT_RC", { "onHalt" } },
        { "ACT_Pion_ASY_Renseigner", { "onHalt" } },
        { "ACT_Misc_Delai", { "onHalt" } },
    },

    onHalt = OnHalt,

    feedbacks = { { { "onHalt" }, "MIS_Pion_ASY_Renseigner" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        self.ePhaseMission = self.ePhaseMission or ePreparerMission
        self.eEtatDelai = self.eEtatDelai or eActionDebut
        if( ModuleBegins() ) then
            DEC_SetMission( myself, self._namedParams.mission )
        end

        self.eEtatOrdreFinMission = self.eEtatOrdreFinMission or eActionEnCours
        Activate( self.activations.BEH_Ordre_Inopine, 1, setmetatable( {}, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatOrdreFinMission = v else rawset( t, k, v ) end end } ) )
        if( self.eEtatOrdreFinMission == eActionHalt ) then
            do
                self.ePhaseMission = eFinMission
                self.eEtatOrdreFinMission = eActionEnCours
            end
        end

         do
            local switch_1 = self.ePhaseMission
            local cases_switch_1 = {}
                if switch_1 == ePreparerMission then
                    --[[// Preparation de la mission
]]Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_DebutMission, } )
                    Activate( self.activations.ACT_Info_Trace, 1, { "** MIS_Pion_ASY_Renseigner:debut **", } )
                    self.ePhaseMission = eTransmettreInformations
                    
                --[[// Partager connaissance
]]                cases_switch_1[1] = true
elseif switch_1 == eTransmettreInformations then
                    if( self.eEtatDelai == eActionDebut ) then
                        do
                            Activate( self.activations.ACT_RC, 1, { eRC_DebutLiaison, } )
                            self.eEtatDelai = eActionEnCours
                            Activate( self.activations.ACT_Pion_ASY_Renseigner, 1, { self._namedParams.mission.destinataire_, 2.0, } )
                        end
                    else
if( self.eEtatDelai == eActionEnCours ) then
                            Activate( self.activations.ACT_Misc_Delai, 1, setmetatable( { MIS_Pion_ASY_Renseigner, 2.0, }, { __newindex = function( t, k, v ) if k == "__returnValue" then self.eEtatDelai = v else rawset( t, k, v ) end end } ) )
                        else
do
                                Activate( self.activations.ACT_RC, 1, { eRC_FinLiaison, } )
                                self.ePhaseMission = eFinMission
                            end
                        end
                    end

                    
                --[[// Fin
]]                cases_switch_1[2] = true
elseif switch_1 == eFinMission then
                    Activate( self.activations.ACT_MAJ_EtatPhaseMission, 1, { eEtatPhaseMission_FinMission, } )
                                        Feedback( self.feedbacks["onHalt"], { "MIS_Pion_ASY_Renseigner" } )
Halt( self )
                    do return end

                                end
            end

    end,

--[[// ******************************************************************************
]]--[[// ACT_Pion_ASY_Renseigner
]]--[[//
]]--[[// Commentaires:
]]--[[//
]]--[[// ******************************************************************************
]]}

node "ACT_Pion_ASY_Renseigner"
{
    feedbacks = { { { "onHalt" }, "ACT_Pion_ASY_Renseigner" } },

    create = function( self )
        self._namedParams = {}
        self._namedParams.destinataire = self.params[1]
        self._namedParams.delaiEnMin = self.params[2]
    end,

    select = function( self )
                if( ModuleBegins() ) then
            DEC_Connaissances_PartageConnaissancesAvec( self._namedParams.destinataire, self._namedParams.delaiEnMin )
        end

    end,

}

eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Pion_ASY_Renseigner = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "BEH_Ordre_Inopine", nodes.BEH_Ordre_Inopine }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "ACT_MAJ_EtatPhaseMission", nodes.ACT_MAJ_EtatPhaseMission }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "ACT_Info_Trace", nodes.ACT_Info_Trace }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "ACT_RC", nodes.ACT_RC }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "ACT_Pion_ASY_Renseigner", nodes.ACT_Pion_ASY_Renseigner }
connections[ #connections + 1 ] = { nodes.MIS_Pion_ASY_Renseigner, "ACT_Misc_Delai", nodes.ACT_Misc_Delai }

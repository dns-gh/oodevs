includedFiles = includedFiles or {}
includedFiles["sources/population/asymetriques/common/automate/missions/commettreexactionssurpopulationdanszone/MRT - CommettreExactionsSurPopulationDansZone.bms"] = true



--[[// *****************************************************************************
]]--[[// MIS_Automate_MRT_CommettreExactionsSurPopulationDansZone
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]node "MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone"
{
    feedbacks = { { { "done_MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone" }, "MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone, {value} ) end,
    activations =
    {
        { "BEH_Mission_Automate_ASY_AssignerCommettreExactionsA", { "done_BEH_Mission_Automate_ASY_AssignerCommettreExactionsA" } },
        { "BEH_Medo_Automate_ControleCreationMission", { "done_BEH_Medo_Automate_ControleCreationMission" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.mission = self.params.mission
    end,

    activate = function( self )
        local Activate = Activate
        self.eValidationMRT = self.eValidationMRT or eActionEnCours
        self.missionExaction = self.missionExaction or self._namedParams.mission
        --[[//---------------------------------------------------------------------
]]--[[// Init
]]--[[//---------------------------------------------------------------------
]]if( ModuleBegins() ) then
            do
                DEC_SetMission( myself, self.missionExaction )
                DEC_Trace( "$ MIS_Automate_MRT_CommettreExactionsSurPopulationDansZone : debut MRT $" )
                local szListeZones = #( self.missionExaction.zones_ )
                if( szListeZones > 0 ) then
                    do
                        local nCurrentZoneIndex = 0
                        for _,pion in pairs( DEC_Automate_PionsAvecPC() or {} ) do
                        local _continue = true
                            do
                                StartActivateOverride( self, self.activations.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, 1, { ePhase_MRT, pion, DEC_UserTypeList_GetAt( self.missionExaction.zones_, nCurrentZoneIndex ), } )
                                if( nCurrentZoneIndex >= szListeZones - 1 ) then
                                    nCurrentZoneIndex = 0
                                else
                                                                        nCurrentZoneIndex = nCurrentZoneIndex + 1
                                end

                            end

                        end

                    end
                end

            end
--[[//-----------------------------------------------------------------------------
]]--[[// Assignation et v√©rification
]]--[[//-----------------------------------------------------------------------------
]]        end

        if( self.eValidationMRT == eActionImpossible ) then
            do
                                do
                    DEC_MRT_Valide()
                    DEC_Trace( "!!!!Mind out some first line units didn't receive mission!!!!" )
                end

                                self:SendFeedback( eActionImpossible )
                Halt( self )
                do return end

            end
        end

        if( self.eValidationMRT == eActionEffectuee ) then
            do
                self.eValidationMRT = eActionEnCours
                                do
                    DEC_MRT_Valide()
                                        self:SendFeedback( eActionEffectuee )
                    Halt( self )
                    do return end

                end

            end
        end

        Activate( self.activations.BEH_Medo_Automate_ControleCreationMission, 1, { #( DEC_Automate_PionsAvecPC() ), } )
self.done_BEH_Medo_Automate_ControleCreationMission = function( self, _, v ) self.eValidationMRT = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// BEH_Mission_Automate_ASY_AssignerCommettreExactionsA
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "BEH_Mission_Automate_ASY_AssignerCommettreExactionsA"
{
    feedbacks = { { { "done_BEH_Mission_Automate_ASY_AssignerCommettreExactionsA" }, "BEH_Mission_Automate_ASY_AssignerCommettreExactionsA" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, {value} ) end,
    activations =
    {
        { "ACT_Mission_Automate_ControleCreation_EnCours", { "done_ACT_Mission_Automate_ControleCreation_EnCours" } },
        { "ACT_Mission_Automate_ControleCreation_NOK", { "done_ACT_Mission_Automate_ControleCreation_NOK" } },
        { "ACT_Mission_Automate_ControleCreation_OK", { "done_ACT_Mission_Automate_ControleCreation_OK" } },
        { "ACT_Mission_Automate_AssignerCommettreExactionsDansZone", { "done_ACT_Mission_Automate_AssignerCommettreExactionsDansZone" } },
    },

    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    activate = function( self )
        local Activate = Activate
        self.eActionCreation = self.eActionCreation or eActionEnCours
        local rForce = 1 / GetActivity()
         do
            local _continue = true
            local switch_1 = self.eActionCreation
            local cases_switch_1 = {}
                if switch_1 == eActionEnCours then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_EnCours, rForce, {} )
                    _continue = false
                                cases_switch_1[1] = true
elseif switch_1 == eActionHalt
                or switch_1 == eActionImpossible then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_NOK, rForce, {} )
                                        do return end

                                end
                if cases_switch_1[2] or switch_1 == eActionEffectuee then
                    Activate( self.activations.ACT_Mission_Automate_ControleCreation_OK, -rForce, {} )
                                        do return end

                                end
            end

        Activate( self.activations.ACT_Mission_Automate_AssignerCommettreExactionsDansZone, rForce, { self._namedParams.ePhase, self._namedParams.pPion, self._namedParams.zone, } )
self.done_ACT_Mission_Automate_AssignerCommettreExactionsDansZone = function( self, _, v ) self.eActionCreation = v[1] end
    end,

--[[// *****************************************************************************
]]--[[// ACT_Mission_Automate_AssignerCommettreExactionsDansZone
]]--[[// 
]]--[[// Commentaires:
]]--[[//
]]--[[// *****************************************************************************
]]}

node "ACT_Mission_Automate_AssignerCommettreExactionsDansZone"
{
    feedbacks = { { { "done_ACT_Mission_Automate_AssignerCommettreExactionsDansZone" }, "ACT_Mission_Automate_AssignerCommettreExactionsDansZone" } },
    SendFeedback = function( self, value ) Feedback( self.feedbacks.done_ACT_Mission_Automate_AssignerCommettreExactionsDansZone, {value} ) end,
    create = function( self )
        self._namedParams = {}
        self._namedParams.ePhase = self.params[1]
        self._namedParams.pPion = self.params[2]
        self._namedParams.zone = self.params[3]
    end,

    select = function( self )
        self.missionPion = self.missionPion or nil--[[//-----------------------------------------------------------------------------
]]--[[// Cree la Mission
]]--[[//-----------------------------------------------------------------------------
]]
        if( ModuleBegins() ) then
            do
                 do
                    local _continue = true
                    local switch_1 = self._namedParams.ePhase
                    local cases_switch_1 = {}
                        if switch_1 == ePhase_MRT then
                                                    local misMRT = DEC_MRT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ASY_CommettreExactionsSurPopulationDansZone" )
                            self.missionPion = misMRT
                            _continue = false
                                                cases_switch_1[1] = true
elseif switch_1 == ePhase_CDT then
                                                    local misCDT = DEC_CDT_CreerMissionPion( self._namedParams.pPion, "T_Mission_Pion_ASY_CommettreExactionsSurPopulationDansZone" )
                            self.missionPion = misCDT
                            _continue = false
                                                cases_switch_1[2] = true

                        else
                            assert( false, "parametre invalide : ePhase" )
                        end
                    end

            end
        end

        if( self.missionPion == nil ) then
            self:SendFeedback( eActionImpossible )
            do return end
        end

        --[[//-----------------------------------------------------------------------------
]]if( ModuleBegins() ) then
            DEC_Trace( "$$ Commettre Exactions Dans Zone : " .. DEC_GetSzName( self._namedParams.pPion ) .. " $$" )
        else
            self:SendFeedback( eActionEffectuee )
            do return end
        end

        --[[// Infos globales
]]S_Misc_Copie_MissionPion_Mission( DEC_GetMission( myself ), self.missionPion )
        --[[// zone
]]DEC_Copie_Localisation_Mission( self._namedParams.zone, self.missionPion, "zone_" )
        --[[// Marquage √©chelon
]]F_Pion_SeteEtatEchelon( self._namedParams.pPion, eEtatEchelon_Premier )
        --[[//-----------------------------------------------------------------------------
]]--[[// Envoie la mission si l'on se trouve dans la conduite
]]--[[//-----------------------------------------------------------------------------
]]if( self._namedParams.ePhase == ePhase_CDT ) then
            DEC_CDT_DonnerMissionPion_Mission( self.missionPion )
        end

                self:SendFeedback( eActionEffectuee )
        do return end

    end,

}

--[[//-----------------------------------------------------------------------------
]]eventmanager_plugin = eventmanager_plugin or {}
eventmanager_plugin.MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone = { "mission" }
connections = connections or {}
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, "ACT_Mission_Automate_ControleCreation_EnCours", nodes.ACT_Mission_Automate_ControleCreation_EnCours }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, "ACT_Mission_Automate_ControleCreation_NOK", nodes.ACT_Mission_Automate_ControleCreation_NOK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, "ACT_Mission_Automate_ControleCreation_OK", nodes.ACT_Mission_Automate_ControleCreation_OK }
connections[ #connections + 1 ] = { nodes.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA, "ACT_Mission_Automate_AssignerCommettreExactionsDansZone", nodes.ACT_Mission_Automate_AssignerCommettreExactionsDansZone }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone, "BEH_Mission_Automate_ASY_AssignerCommettreExactionsA", nodes.BEH_Mission_Automate_ASY_AssignerCommettreExactionsA }
connections[ #connections + 1 ] = { nodes.MIS_Automate_MRT_ASY_CommettreExactionsSurPopulationDansZone, "BEH_Medo_Automate_ControleCreationMission", nodes.BEH_Medo_Automate_ControleCreationMission }

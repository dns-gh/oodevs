-- **************************************************************************** 
-- Attack a unit
-- self.params.unit: the unit to attack
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveTo, skill.links.attack },
    feedbacks = { "arrived" },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    done = function( self ) -- call by "moveTo" skill.
         self.arrived = true
         Feedback( self.feedbacks.arrived )-- the skill is done once the crowd has reach the destination
    end,
    attackActionCompleted = function( self ) -- call by moveTo actin skill.
        self.targetDestroyed = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init --> set agressive attitude to attack the objective
    -- user will be able, during the mission to change himself the attitude.
    -- --------------------------------------------------------------------------------
    create = function( self, params )
        self.arrived = false
        self.targetDestroyed = false
        meKnowledge:adoptAgressiveAttitude()
    end,

    -- -------------------------------------------------------------------------------- 
    -- Movement and attack of the objective
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- Sent the feedback only if the entire crowd is arrived and the target is destroyed.
        if self.arrived and self.targetDestroyed then 
            Feedback( self.feedbacks.done )
        end

        -- Crowd is under control, cannot commit agression
        if not meKnowledge:canAttack( unit ) then
            meKnowledge:sendReport( eRC_AgressionImpossible )
            Feedback( self.feedbacks.failed )
        end

        -- Once entity is reached attack it.
        if self.params.unit:canBeAttacked() then
            Activate( skill.links.attack, 1, { unit = self.params.unit } )
        end
        -- Move to target position (permanently)
        Activate( skill.links.moveTo, 1, { wayPoints = { self.params.unit } } )
        self.arrived = false
    end
}
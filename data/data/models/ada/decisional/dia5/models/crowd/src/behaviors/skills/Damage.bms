-- **************************************************************************** 
-- Move toward and damage objective
-- self.params.installation: the damagable element
-- Comments: this skill uses the dalay between the moment where the crowd recahe the insdtallation
-- and the moment it is entierly arrived.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveTo, skill.links.damage },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks 'done' function is called if objective is reached
    -- --------------------------------------------------------------------------------
    done = function( self )
        self.arrived = true
    end,
    damageActionCompleted = function( self ) -- from MoveTo
        self.damageDone = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init --> set agressive attitude to attack the objective
    -- user will be able, during the mission to change himself the attitude.
    -- --------------------------------------------------------------------------------
    create = function( self, params )
        self.damageDone = false
        self.arrived    = false
        meKnowledge:adoptAgressiveAttitude()
    end,

    -- -------------------------------------------------------------------------------- 
    -- Moveto element and start destroying it when arrived
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- Sent the feedback only if the entire crowd is arrived and the target is destroyed.
        if self.arrived and self.damageDone then 
            Feedback( self.feedbacks.done )
        end

        -- Crowd is under control, cannot commit agression
        if not meKnowledge:canDamage( self.params.installation ) then
            meKnowledge:sendReport( eRC_AgressionImpossible )
            Feedback( self.feedbacks.failed )
        end

        -- Once installation can be damaged, damage it.
        if self.params.installation:canBeDamaged() then
            Activate( skill.links.damage, 1, 
              { installation = self.params.installation, quantityOfDamage = self.params.quantityOfDamage } )
        end
        -- Move to target position (permanently)
        Activate( skill.links.moveTo, 1, { wayPoints = { self.params.installation } } )
        self.arrived = false
    end
}
-- **************************************************************************** 
-- ManageFragOrder.
-- self.params.entity: the unit to interrogate
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.SendFragOrder },

    -- -------------------------------------------------------------------------------- 
    -- Get subordinates units and propagate the order
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        local oldEntities = myself.oldEntities
        local newEntities = integration.getEntitiesFromAutomatCommunication( meKnowledge, "none", true )

        -- Si un pion a été ajouté à l'automate et que celui-ci est embrayé
        if oldEntities and #oldEntities > 0 then
            if meKnowledge:isCommanding() then
                for i, entity in pairs( newEntities ) do
                    if not exists( oldEntities, entity ) then
                        meKnowledge:UpdateNewUnitInAutomat( entity ) -- Gestion et Mise à jour des ROE/Priorités à partir de l'automate
                    end
                end
            end
        end
        myself.oldEntities = newEntities -- on enregistre la liste pour le tic suivant

        -- Get the commander FRAGO
        for _, fragOrder in ipairs( self.params.fragOrders ) do
            if fragOrder:isROE() then
                integration.setCompanyROE( fragOrder.source:GetorderConduiteChangerReglesEngagement_() )
            end
            fragOrder:setAutomatFragOrder()
            if fragOrder:mustBePropagate() then
            
                local typeOrder = fragOrder.source:GetType()
                local send = typeOrder ~= "Rep_OrderConduite_Deboucher"
                local sendFirstEchelon = typeOrder == "Rep_OrderConduite_AttendreSePoster"
                local entities = self.params.entities
                if typeOrder == "Rep_OrderConduite_ArreterSilenceRadio" 
                             or "ActivateRadioCommunication" 
                             or "Rep_OrderConduite_MettreTenueNBC" 
                             or "ActivateNBCProtection"  then -- Il faut enlever le silence radio à tous les pions
                    local automatkn = CreateKnowledge( world.Company, DEC_GetAutomate( entities[1].source ) )
                    local allEntities = integration.getEntitiesFromAutomat( automatkn, "none", true )
                    entities = allEntities
                end
                for _, entity in pairs( entities ) do
                    local echelon =  F_Pion_GeteEtatEchelon( entity.source )
                    if sendFirstEchelon then
                        if echelon == eEtatEchelon_First then
                            Activate( skill.nodes.SendFragOrder, 1, { fragOrder = fragOrder, entity = entity } )
                        end
                    elseif send or echelon ~= eEtatEchelon_Scout then
                       Activate( skill.nodes.SendFragOrder, 1, { fragOrder = fragOrder, entity = entity } )
                    end
                end
            end
        end
        
    end
}

node "SendFragOrder"
{
    select = function( self )
        meKnowledge:sendFragOrder( self.params.entity, self.params.fragOrder )
    end
}
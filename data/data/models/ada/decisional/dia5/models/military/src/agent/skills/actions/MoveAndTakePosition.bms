-- ****************************************************************************
-- Move straigth toward the objective and take position on it if reached.
-- Simple skill uses by all the high level skill.
-- self.params.entity: the positionable element
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.MoveTo, skill.nodes.TakePosition },

    feedbacks = { "elementFailed" },

    -- --------------------------------------------------------------------------------
    -- Feedback when position reached and when occupied
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams )
        Feedback( self.feedbacks.done, additionalParams )
    end,

    blocked = function( self, params, additionalParams )
        Feedback( self.feedbacks.elementFailed, additionalParams )
    end,

    -- --------------------------------------------------------------------------------
    -- Move toward the objective, when it is possible (not occupied, reached...),
    -- take position on it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- move toward the entities
        if self.params.entity:canTakePosition() or myself.blocked or myself.blockForcesContinue then
            Activate( skill.nodes.TakePosition, 1, { position = self.params.entity } )
        else -- underway
            Activate( skill.nodes.MoveTo, 1, { 
                position = self.params.entity, pathType = self.params.pathType } )
        end
    end,
}

-- ****************************************************************************
-- Simple action uses to take position on a posisionnable element
-- self.params.position: the positionnable element
-- ****************************************************************************
node "TakePosition"
{
    acquire = { [ skill.resources.move ] = 1 },
    feedbacks = { "blocked" }, -- blocked by an obstacle or terrain constraints

    select = function( self )
        if not myself.blocked and not myself.blockForcesContinue then
            if self.params.position:takeUpPosition() then
                Feedback( self.feedbacks.done, { reason = "posted",
                                                 element = self.params.position } )
            else
                Feedback( self.feedbacks.done, { reason = "arrived",
                                                 element = self.params.position } )
            end
        else
            myself.blockForcesContinue = nil
            if myself.blocked then
                Feedback( self.feedbacks.blocked, { reason = "blocked",
                                                    element = self.params.position } )
                myself.blocked = false -- $$$ MIA TEMP: wait for refactor 
            end
        end
    end,
}

-- ****************************************************************************
-- Simple action uses to move toward a reachable element
-- self.params.position: the reachable element
-- ****************************************************************************
node "MoveTo"
{
    acquire = { [ skill.resources.move ] = 1 },

    select = function( self )
        if self.params.position:moveToIt( self.params.pathType ) then
            Feedback( self.feedbacks.done, { reason = "arrived",
                                             element = self.params.position } )
        end
    end,

    destroy = function( self )
        self.params.position:destroyMoveToIt()
    end
}

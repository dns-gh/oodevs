-- **************************************************************************** 
-- Snipe
-- Utilisation de l'intention de MoveToward pour tirer sur les éléments
-- à partir de position de tirs passés en paramètre.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Shoot },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    -- Once engagement is started unit trash the current postion and take an other one.
    shot = function( self )
        -- entity has been shot, increment position index
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.hasShot = true
        self.movementDone = false
        if self.nextTargetIndex > #self.params.positions then
            Feedback( self.feedbacks.done )
        end
    end,

    -- moveToward skill feedback
    done = function( self ) 
        if self.hasShot then
            self.movementDone = true 
            self.hasShot = false
        end
    end,
	
    -- -------------------------------------------------------------------------------- 
    -- Node begins: store each objective in a table
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.hasShot = true
        self.nextTargetIndex = 1
    end,

    -- -------------------------------------------------------------------------------- 
    -- Select the more interesting position and move toward it to engage ennemy. 
    -- The more interesting is the first in the table $$$$ MIA à voir
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- Move toward unused position (sorted by user)
        Activate( skill.links.moveToward, 1, { entities  = { self.params.positions[ self.nextTargetIndex ] } } )

        -- Shoot at the enemies
        local hostileElements = queries_enemies.getEnemiesInRange[ "execute" ]( { probabilityToHit = 0.7 } )
        if #hostileElements ~= 0 and self.movementDone then -- arrived on a position to engage enemies
            for _,  element in pairs( hostileElements ) do
                if element:canDestroyIt() then
                    Activate( skill.nodes.Shoot, element:destructionPriority(), { entity = element } ) -- $$$ MIA: attention à la priority
                end
            end
        end
    end
}
-- **************************************************************************** 
-- Shoot action on the destroyable element
-- $$$ MIA cas particulier utitlisation de destroy pour faire une tire de ???
-- ****************************************************************************
node "Shoot"
{
    feedbacks = { "shot" },
    acquire = { [ skill.resources.engage ] = 1 },
    select = function( self )
        if self.params.entity:destroyIt() then
            Feedback( self.feedbacks.shot )
        end
    end
}

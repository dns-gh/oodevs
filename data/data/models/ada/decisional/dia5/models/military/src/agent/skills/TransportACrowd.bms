-- **************************************************************************** 
-- TransportCrowd.
-- self.params.crowd: crowd to transport
-- self.params.loadingPoint: loading area
-- self.params.destination: destination where 
-- ****************************************************************************
rootnode
{
    connections =
    {
        skill.links.moveToward,
        skill.nodes.LoadCrowd,
        skill.nodes.UnloadCrowd
    },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams ) -- from skill moveTo
        self.arrived = true
    end,

    loaded = function( self ) -- from LoadCrowd action within this skill
        self.loadFinished = true
        self.unloadFinished = false
        self.arrived = false
        self.goToLoadingPosition = false
    end, 

    unloaded = function( self )-- from LoadCrowd action within this skill
        self.unloadFinished = true -- current position to move to becomes the loading position
        self.loadFinished = false
        self.arrived = false
        self.goToLoadingPosition = true

        -- after having unloaded, verify if there is still a concentration on the loading point.
        -- if not skill ends. 
        local concentration = integration.getNearbyConcentration( 
              meKnowledge.crowdTransporting, self.params.loadingPoint, self.params.minDistance )
        if concentration == 0 or concentration ~= self.concentration then
            Feedback( self.feedbacks.done )
            return
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- init
    -- --------------------------------------------------------------------------------
    create = function( self )
        meKnowledge.isStoppingTransport = false
        -- init crowd's concentration information
        meKnowledge.crowdTransporting = self.params.crowd
        self.concentration = integration.getNearbyConcentration( 
          meKnowledge.crowdTransporting, self.params.loadingPoint, self.params.minDistance )

        self.goToLoadingPosition = true
        self.arrived             = false
        self.loadFinished        = false
        self.unloadFinished      = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Make round trips between loading position and final destination
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- The agent cannot transport a crowd, skill failed
        if self.concentration == 0 then
            meKnowledge:sendMessage( "the agent cannot load the crowd (no crowd's concentration on loading position )" )
            Feedback( self.feedbacks.failed )
            return
        end

        -- The agent cannot transport a crowd, the skill failed
        if not meKnowledge:canTransportCrowd() then
            meKnowledge:RC( eRC_TransportImpossiblePasDeMoyens )
            Feedback( self.feedbacks.failed )
            return
        end

        -- Move to loading position / final destination
        if self.goToLoadingPosition and not self.arrived then
            Activate( skill.links.moveToward, 1, { entities = { self.params.loadingPoint } } )
        elseif not self.goToLoadingPosition and not self.arrived then-- go to destination
            Activate( skill.links.moveToward, 1, { entities = { self.params.destination } } )
        end

        -- Unload Crowd
        if self.arrived and not self.goToLoadingPosition and not self.unloadFinished then
            Activate( skill.nodes.UnloadCrowd, 1, { crowd = meKnowledge.crowdTransporting, position = self.params.destination } )
        end

        -- Load crowd
        if self.arrived and self.goToLoadingPosition and not self.loadFinished then
            Activate( skill.nodes.LoadCrowd, 1, { crowd = meKnowledge.crowdTransporting, concentration = self.concentration } )
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- End of skill instance
    -- --------------------------------------------------------------------------------
    destroy = function( self )
        meKnowledge.isStoppingTransport = true
    end,
}

-- **************************************************************************** 
-- Load crowd action.
-- ****************************************************************************
node "LoadCrowd"
{
    feedbacks = { "loaded" },
    acquire = { [ skill.resources.loadcapacity ] = 1 },

    select = function( self )
        if self.params.crowd:loadIt( self.params.concentration ) then
            Feedback( self.feedbacks.loaded )
        end
    end
}

-- **************************************************************************** 
-- Unload crowd action.
-- ****************************************************************************
node "UnloadCrowd"
{
    feedbacks = { "unloaded" },
    acquire = { [ skill.resources.loadcapacity ] = 1 },
 
    select = function( self )
        if self.params.crowd:unloadIt( self.params.position ) then
            Feedback( self.feedbacks.unloaded )
        end
    end
}
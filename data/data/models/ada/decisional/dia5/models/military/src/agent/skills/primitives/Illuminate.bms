-- **************************************************************************** 
-- Illuminate elements.
-- self.params.entities: the illuminable elements
-- self.params.positions: the illuminating elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.illuminateElement };
    
    -- -------------------------------------------------------------------------------- 
    -- Feedback when entity is illuminated
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        Feedback( self.feedbacks.done, { entity = additionnalParams.entity, state = additionnalParams.state } )
    end,

    create = function( self )
        self.positions = queries.getPositionsToIlluminate[ "execute" ]({elementsToIlluminate = self.params.entities})
    end,
    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to activate it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.illuminateElement, entity:illuminationPriority(), 
                { entity = entity, allie = self.params.allies, positions = self.positions } )
        end
    end
}
-- **************************************************************************** 
-- activate illuminable element using MoveAndTakePosition skills
-- self.params.entity: the illuminable element
-- self.params.positions: the illuminating elements
-- ****************************************************************************
node "illuminateElement"
{
    connections = { skill.links.moveAndTakePosition, 
                    skill.nodes.illuminate, skill.nodes.CR_NoCapacity,
                    skill.links.observe },

    feedbacks = { "done" };
    
    -- -------------------------------------------------------------------------------- 
    -- Feedback when position reached and when occupied
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        Feedback( self.feedbacks.done, { entity = self.params.entity, state = additionnalParams.state } )
    end;

    -- -------------------------------------------------------------------------------- 
    -- Move toward an illuminating element and illuminate the entity
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- when the entity is illuminated send a feedback
        if self.params.entity:isDefinitelyIlluminated() then
            Feedback( self.feedbacks.done, { illuminatedEntity = self.params.entity, 
                                             state = "already Illuminate" } )
        end

        -- Main observation effort toward the entity
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- when it possible illuminate the element
        if not meKnowledge:canIlluminate() then
            Activate( skill.nodes.CR_NoCapacity, 1 )
            Feedback( self.feedbacks.done, { state ="no capacity" } )
            return
        end

        -- Illuùinate the target.
        if self.params.entity:canIlluminateIt() then
            Activate( skill.nodes.illuminate, 1, { 
                entity = self.params.entity, allie = self.params.allie } )
        end

        -- Moving toward an illuminating positions
        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition, 
                position:illuminationEfficiency( self.params.entity ), { entity = position } )
        end
    end
}
-- **************************************************************************** 
-- illuminate action on the illuminable element 
-- ****************************************************************************
node "illuminate"
{
    feedbacks = { "done" };
    
    acquire = { [ skill.resources.illuminatingCapacity ] = 1 };

    select = function( self ) 
        if self.params.entity:illuminateIt( self.params.allie ) then
            Feedback( self.feedbacks.done, { state = "definitely illuminated or stop after indirectFire" } ) 
        else
            Feedback( self.feedbacks.done, { state = "partially illuminated" } )
        end
    end
}

node "CR_NoCapacity"
{ 
    create = function( self )
        meKnowledge:RC( eRC_TirSansCapacite )
    end
}
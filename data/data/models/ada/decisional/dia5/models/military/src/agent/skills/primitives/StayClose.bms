-- *******************************************************************************************************
-- Stay close to reachable entities
-- self.params.entities: the reachable elements / self.params.positions: the reaching positions to use
-- *******************************************************************************************************
rootnode
{
    connections = { skill.nodes.StayCloseToElement },

    -- --------------------------------------------------------------------------------
    -- Skill initialization
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.entities = copyTable( self.params.entities ) -- store entities to stay close to.
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, try to stay close to it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local positions = {}
        if self.params.positions == NIL then -- no positions issued, agent try to find close position by calling the query
            positions = queries.getPositionsToFollow[ "execute" ]( 
              { elementsToFollow = self.params.entities, distanceMin = self.params.distanceMin, dynamic = true } )
        else -- the skill gets some positions to use.
            positions = self.params.positions
        end
 
        -- For each entities activate the node with a priority depending on the implementation of 
        -- the reachPriority() method. See implementations in classes that realizes the "reachable"
        -- interface.
        for _, entity in pairs( self.entities ) do
            Activate( skill.nodes.StayCloseToElement, entity:reachPriority(), { entity = entity, -- the entity to stay nearby
                                                                                positions = positions } ) -- the set of positions to use
        end
    end
}
-- ****************************************************************************
-- Move to positions that allows the agent to get nearby objective
-- ****************************************************************************
node "StayCloseToElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe },

    -- --------------------------------------------------------------------------------
    -- Move toward closest positionable elements using the skill MoveAndTakePosition
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- Main observation effort on the issued element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- For each positions activate the node with a priority depending on the implementation of 
        -- the reachEfficiency(...) method. See implementations in classes that realizes the "reaching"
        -- interface.
        for _, position in pairs ( self.params.positions ) do
                Activate( skill.links.moveAndTakePosition, position:reachEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

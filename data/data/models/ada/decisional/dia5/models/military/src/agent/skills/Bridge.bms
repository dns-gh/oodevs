-- **************************************************************************** 
-- Bridge: to contruct a bridge on a crossing site object.
--
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Bridge, skill.nodes.RC },

    -- -------------------------------------------------------------------------------- 
    -- Feeback and slots
    -- --------------------------------------------------------------------------------
    done = function( self ) -- call by moveToward skill
        self.arrived = true
    end,

    equiped = function( self )
        meKnowledge:sendStopNeededReinforcement( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge)
        Feedback( self.feedbacks.done )
        self.bridgeBuilt = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.bridgeBuilt = false
        if self.params.bridgeSystem == 0 then
            self.bridgeSystem = eTypeObjectContinuousPontoonBridge
        else
            self.bridgeSystem = eTypeObjectDiscontinuousPontoonBridge
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate  -- lua optim

        -- Object is not reconnoitered, cannot construct the bridge
        if not self.params.crossingSite:isReconnoitred() then
            Activate( skill.nodes.RC, 1, { RC = eRC_CrossingSiteNotRecon } )
            return
        end

        -- Move to object and build the bridge
        if self.arrived and not self.bridgeBuilt then
            Activate( skill.nodes.Bridge, 1, { crossingSite = self.params.crossingSite, bridgeSystem = self.bridgeSystem } )
        elseif not self.arrived then -- Moving to position
            Activate( skill.links.moveToward, 1, { entities = { self.params.crossingSite } } )
            self.arrived = false
        end
    end,

    destroy = function( self )
        self.params.crossingSite:unEquipIt()
    end,
}

-- **************************************************************************** 
-- Bridge: to contruct a bridge on a crossing site object.
--
-- ****************************************************************************
node "Bridge"
{
    connections = { skill.nodes.RC },

    feedbacks = { "equiped" },

    -- -------------------------------------------------------------------------------- 
    -- Equip crossing site with a bridge
    -- --------------------------------------------------------------------------------
    activate = function( self )
        if not self.params.crossingSite:canEquipIt( self.params.bridgeSystem ) then
            integration.setNeedReinforcement( meKnowledge, "build", self.params.crossingSite, false )
            Activate( skill.nodes.RC, 1, { RC = eRC_ConstructionObjetImpossible } )
            return
        end
        if self.params.crossingSite:equipIt( self.params.bridgeSystem ) then
            Feedback( self.feedbacks.equiped )
        end
    end,
}
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
-- ****************************************************************************
-- Destroy elements.
-- self.params.entities: the detroyable elements
-- self.params.positions: the detroying elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.DestroyElement },

    done = function( self ) end,

    -- --------------------------------------------------------------------------------
    -- Main effect is reached: send feedback when entities are all destroyed
    -- --------------------------------------------------------------------------------
     destroyed = function( self, params, additionalParams )
        self.targets[ additionalParams.entity ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done ) -- the job is done, all targets are destroyed
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Store each elements to detroy for feedbaks
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, try to destroy it.
    -- --------------------------------------------------------------------------------
    activate = function( self )

        local positions
        if self.params.positions == NIL then
            positions = queries_positions.getPositionsToDestroy[ "execute" ]( { elementsToDestroy = self.params.entities, dynamic = true } )
        else
            positions = self.params.positions
        end

        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.DestroyElement, entity:destructionPriority(),
                { entity = entity, positions = positions } )
        end
    end
}
-- ****************************************************************************
-- Destroy destroyable element using MoveAndTakePosition skills
-- self.params.entity: the destroyable element
-- self.params.positions: the destroying elements
-- ****************************************************************************
node "DestroyElement"
{
    feedbacks = { "destroyed" },
    connections = { skill.links.moveAndTakePosition, skill.nodes.Destroy,
                    skill.links.observe, skill.nodes.CR_TargetInvalid };

    -- --------------------------------------------------------------------------------
    -- Move toward a destroying element and edstroy the entity
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- Check if target is valid
        if not self.params.entity:isValid() then
            Activate( skill.nodes.CR_TargetInvalid, 1, { RC = eRC_InvalidTarget } )
            Feedback( self.feedbacks.destroyed, { entity = self.params.entity } )
            return
        end
        
        -- when the entity is destroyed send a feedback
        if self.params.entity:isDestroyed() then
            Feedback( self.feedbacks.destroyed, { entity = self.params.entity } )
            return
        end

        -- current observation toward the element to reconnoiter
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

       -- when it possible destroy the element (ROE, etc.)
        if self.params.entity:canDestroyIt() then
            Activate( skill.nodes.Destroy, 1, { entity = self.params.entity } )
        end

        -- Moving toward destroying positions
        for _, position in pairs ( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
                position:destructionEfficiency( self.params.entity ), { entity = position } )
        end
    end
}
-- ****************************************************************************
-- Destroy action on the destroyable element
-- ****************************************************************************
node "Destroy"
{
    feedbacks = { "destroyed" },
    acquire = { [ skill.resources.engage ] = 1 },

    select = function( self )
        self.params.entity:destroyIt()
    end
}

-- ****************************************************************************
-- CR
-- ****************************************************************************
node "CR_TargetInvalid"
{
    create = function( self )
        meKnowledge:RC( eRC_InvalidTarget )
    end
}

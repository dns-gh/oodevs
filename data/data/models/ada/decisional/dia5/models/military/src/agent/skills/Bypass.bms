-- **************************************************************************** 
-- Bypass obstacles sorted by user
-- ****************************************************************************
rootnode
{
    connections = { skill.links.bypass, skill.links.remove, skill.nodes.CR },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    -- bypass skill feedback
    done = function( self, params, additionalParams )
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.obstacles then
            self.obstacles = {}
            self.nextTargetIndex = 1
            Feedback( self.feedbacks.done )
        end
    end,

    elementBypassed = function( self, params, additionalParams )
        if self.elementToRemove == additionalParams.element then
            self.elementToRemove = nil
        end
        meKnowledge:sendStopNeededReinforcement( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge)
    end,

    elementFailed = function( self, params, additionalParams )
        integration.setNeedReinforcement( meKnowledge, additionalParams.needReinforcement, additionalParams.element, false )
        self.report = eRC_ObjetNonSupprimable
    end,

    elementNotBypassable = function( self, params, additionalParams )
        self.elementToRemove = additionalParams.element
    end,

    -- -------------------------------------------------------------------------------- 
    -- Node begins: store each objective in a table
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.nextTargetIndex = 1
        self.report = nil
        self.elementToRemove = nil
        self.obstacles = queries.getObstaclesAroundMe[ "execute" ]({ distance = 100 })
    end,

    -- -------------------------------------------------------------------------------- 
    -- Select the more interesting position and move toward it to remove obstacle ennemy. 
    -- The more interesting is the first in the table $$$$ MIA à voir
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if self.params.entities == NIL then
            local obstacles = queries.getObstaclesOnPath[ "execute" ]()
            if #obstacles > 0 then
                self.obstacles = obstacles
            end
        else 
            self.obstacles = self.params.entities
        end    

        if #self.obstacles < 1 then
            Feedback( self.feedbacks.done ) -- no obstacles to remove
            return
        end

        if self.params.entities == NIL then
            self.positions = queries.getAvoidingArea[ "execute" ]( { objects = self.obstacles } )
        else
            self.positions = queries.getPositionsToBypass[ "execute" ]( { elementsToBypass = self.obstacles } )
        end

        -- CR on physical capability --> need reinforcement or recompletion
        if self.report then
            Activate( skill.nodes.CR, 1, { RC = self.report } ) 
        end

        if self.elementToRemove == self.obstacles[ self.nextTargetIndex ] then
            Activate( skill.links.remove, 1, { entities  = { self.obstacles[ self.nextTargetIndex ] }, 
                                          positions = self.positions } )
        else
            Activate( skill.links.bypass, 1, { entities  = { self.obstacles[ self.nextTargetIndex ] }, 
                                          positions = self.positions, avoidObstacles = self.params.avoidObstacles } )
        end
        self.report = nil
    end
}

-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
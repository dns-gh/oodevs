-- ****************************************************************************************** 
-- SetPace: select adapted pace
-- ******************************************************************************************
local emptyTable = emptyTable

rootnode
{
    connections = { skill.nodes.Wait },

    done = function( self ) end,

    create = function( self )
        myself.speedModulation = myself.speedModulation or {}
    end,

    activate = function( self )
        local maxSpeed = 1

        if integration.isAgentInsideTown() and not integration.isFlying() and ( meKnowledge:getEchelon() == eEtatEchelon_First or meKnowledge:isSelfCommanding()) then
          myself.speedModulation.urbanSpeed = 0.7
        else
          myself.speedModulation.urbanSpeed = 1
        end

        if not myself.speedModulationHasToBeMax then
            for _, speed in pairs( myself.speedModulation ) do
                maxSpeed = math.min( maxSpeed, speed )
            end
        end
        if maxSpeed <= 0 then
            Activate( skill.nodes.Wait, 1000, emptyTable ) -- $$$ MIA???? TODO A REVOIR
        else
            integration.speedMaxModulation( maxSpeed ) -- $$$ MIA TODO a appler dans le moveto côté intégration
        end
    end
}

-- ****************************************************************************************** 
-- node Wait: unit must take resource of movement when node created or continue its moving 
-- when node destroyed
-- self.params.entity: unit to stop for waiting or continue moving
-- ******************************************************************************************
node "Wait"
{
   acquire = { [ skill.resources.move ] = 1 };

   -- DO NOT DELETE
   create = function( self )
   end,

   select = function( self )
   end,

   destroy = function( self )
   end,

}
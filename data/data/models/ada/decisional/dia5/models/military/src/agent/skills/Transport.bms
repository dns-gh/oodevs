-- **************************************************************************** 
-- Transport: to transport troops from a loading position to a specific 
-- destination (realistic transporation, see definition in Sword authoring tool)
-- The trnsportation is managed by simuolation. This skill uses informations from
-- the transportation module to make round trips from the loading position to the
-- destination.
-- self.params.units: units to transport
-- self.params.loadingPoint: loading area
-- self.params.destination: destination where 
-- ****************************************************************************
rootnode
{
    connections =
    { 
        skill.links.moveToward,
        skill.nodes.QueueForLoad,
        skill.nodes.LoadQueue,
        skill.nodes.UnloadQueue
    },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    -- unite arrivee a destination
    done = function( self, params ) -- call by moveTo skill
        if params.entities[ 1 ] == self.params.destination then
            self.arrivedDestination = true
        elseif params.entities[ 1 ] == self.params.loadingPoint then
            self.arrivedLoadPoint = true
        end
    end,
    -- add a unit to transport in the queue
    queued = function( self, params, additionalParams )
        self.loadableUnits[ additionalParams.element ] = nil
        self.newqueued = true
        if not next( self.loadableUnits ) then
            self.everybodyQueued = true
        end
    end,
    -- once loaded, the agent goes to destination
    loaded = function( self )
        self.position = self.params.destination
    end,
    -- called once agent is being unloaded
    unloaded = function( self )
        self.position = self.params.loadingPoint
         if meKnowledge:isTransportFinished() then
            self.newqueued = false
            if self.everybodyQueued then
                Feedback( self.feedbacks.done ) -- end of skill
            end
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        meKnowledge.isStoppingTransport = false
        -- Select transportable units
        self.loadableUnits = {}
        for _, unit in pairs( self.params.units ) do
            if unit:canTransportIt( self.params.onlyLoadable ) then
                self.loadableUnits[ unit ] = true
            end
        end
        -- If units can be transported, the skill failed.
        if not next( self.loadableUnits ) then
            meKnowledge:RC( eRC_TransportImpossiblePasDeMoyens )
            Feedback( self.feedbacks.done ) -- done but failed actually...
        end
        -- local initializations
        self.position           = self.params.loadingPoint -- start to move to loading position
        self.arrivedLoadPoint   = false
        self.arrivedDestination = false
        self.everybodyQueued    = false
        self.newqueued          = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Troop transportation
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate   = Activate   -- lua optim
        local emptyTable = emptyTable -- lua optim

        -- for each units to transport, add them to queue
        if self.arrivedLoadPoint then
            for unit, _ in pairs( self.loadableUnits ) do
                if unit:readyForBeingTransported( self.params.distanceMin ) then
                    Activate( skill.nodes.QueueForLoad, 1, { unit = unit } )
                else
                    meKnowledge:sendMessage( "waiting for the unit to get ready" )
                end
            end
        end

        -- load units in queue
        if self.newqueued and self.arrivedLoadPoint then
            Activate( skill.nodes.LoadQueue, 1, emptyTable )
        end

        -- unload units in queue
        if self.arrivedDestination then
            Activate( skill.nodes.UnloadQueue, 1, emptyTable )
        end

        -- moving to loading point or disembarquing position (round trips)
        Activate( skill.links.moveToward, 1, { entities = { self.position } } )
        self.arrivedLoadPoint   = false
        self.arrivedDestination = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- end of skill
    -- --------------------------------------------------------------------------------
    destroy = function( self )
        meKnowledge.isStoppingTransport = true
    end,
}

-- **************************************************************************** 
-- QueueForLoad: add the unit in queue
-- self.params.unit: unit to be transported
-- ****************************************************************************
node "QueueForLoad"
{
    feedbacks = { "queued" },

    create = function( self )
        self.params.unit:addToTransport( self.params.onlyLoadable )
        Feedback( self.feedbacks.queued, { element = self.params.unit } )
    end,
}

-- **************************************************************************** 
-- QueueForLoad: start to transport all units in queue.
-- ****************************************************************************
node "LoadQueue"
{
    feedbacks = { "loaded" },
    acquire = { [ skill.resources.transportationCapacity ] = 1 },

    select = function( self )
        if meKnowledge:transportTroups() then
            Feedback( self.feedbacks.loaded )
        else
            meKnowledge:sendMessage( "The units is being loaded into carrier" )
        end
    end
}

-- **************************************************************************** 
-- QueueForLoad: start to transport all units in queue.
-- ****************************************************************************
node "UnloadQueue"
{
    feedbacks = { "unloaded" },
    acquire = { [ skill.resources.transportationCapacity ] = 1 },

    select = function( self )
        if meKnowledge:dropTroups() then
            Feedback( self.feedbacks.unloaded )
        end
    end
}
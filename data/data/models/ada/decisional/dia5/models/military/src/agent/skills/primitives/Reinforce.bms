-- **************************************************************************** 
-- Reinforce elements.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveAndTakePosition, skill.nodes.reinforce,
                    skill.links.observe, skill.links.dismount, skill.links.mount },

     -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to reinforce it. 
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        if additionnalParams.reason == "arrived" or additionnalParams.reason == "posted"  then
            self.arrived = true
        end
        if additionnalParams.state == "reinforced" then
            self.arrived = true
            Feedback( self.feedbacks.done, { entity = self.params.entity, state = additionnalParams.state } )
        end
    end,

    create = function( self )
        self.arrived = false
        if not DEC_Agent_AutomateEstEmbraye() and masalife.brain.core.class.isOfType( self.params.entity, world.PlatoonAlly ) then
           meKnowledge:sendReinforceGivenByUser( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge )
        end
        self.params.entity:changeAutomate()
        self.isMounted = meKnowledge:isMounted() 
    end,

    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to reinforce it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        if self.arrived then
            if self.params.entity:canReinforceIt() then
                if self.isMounted and meKnowledge:canDismount() then
                    Activate( skill.links.dismount, 1 )
                end
                Activate( skill.nodes.reinforce, 1, { entity = self.params.entity } )
            else
                self.arrived = false
                if self.isMounted and meKnowledge:canMount() then
                    Activate( skill.links.mount, 1 )
                end
                -- skip activate to force a new pathfind in order not to activate each tic moveandtakeposition
                return
            end
        else
            if self.isMounted and meKnowledge:canMount() then
                Activate( skill.links.mount, 1 )
            end
        end

       local positions = {}
        if self.params.positions and self.params.positions ~= NIL then
          positions = self.params.positions
        else 
           positions = queries.getPositionsToReinforce[ "execute" ]({ elementsToReinforce = { self.params.entity } })
        end
        for _,position in pairs( positions ) do
            Activate( skill.links.moveAndTakePosition, 
                position:reinforcementEfficiency( self.params.entity ), { entity = position } )
        end

        self.arrived = false
    end
}

-- **************************************************************************** 
-- Simple reinforcement action.
-- ****************************************************************************
node "reinforce"
{
    feedbacks = { "done" },

    select = function( self )
        if self.params.entity:reinforceIt() then
            Feedback( self.feedbacks.done, { state = "reinforced" } )
        end
    end
}
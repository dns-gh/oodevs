rootnode {

connections = {},

    done = function( self ) end,

    create = function( self )
        local echelons = integration.getPionsInEchelons( self.params.objectives )
        local pionsPE =  echelons[1]
        local itPionPE = 1

        itPionPE = 0
        myself.pionParams = {}
        
        -- Tous les pions rejoignent l'automate à relever
        if next( pionsPE ) then
            for _, elem in pairs (self.params.commandingEntities) do
                  itPionPE = itPionPE % #pionsPE + 1
                  myself.pionParams[elem] = pionsPE[itPionPE]
                  meKnowledge:sendTaskToPion( elem, self.params.followTask, { objectives = { pionsPE[ itPionPE ] },
                                   dangerDirection_ = self.params.automateParameters.dangerDirection_}, eEtatEchelon_First )
            end
        else
            meKnowledge:RC( eRC_EchecRelever )
            Feedback( self.feedbacks.done, { reason = "Cannot relieve a unit without mission" })
        end
    end,

    activate = function( self )
        local Activate = Activate
        -- Dès qu'un élément est à porter de tir de l'unité qu'il suit, dans ce cas, l'automate peut relever
        for _, elem in pairs (self.params.commandingEntities) do
            if myself.pionParams[elem] then
                local position = elem:getMyPosition()
                if integration.distance( position, myself.pionParams[elem]:getMyPosition() ) < getMaxRangeToFireAgentForPH(elem.source, 0.8) then
                      local mission = integration.getRawMission( self.params.objective.source )
                      integration.giveCommanderTask( mission )
                end
            end
        end
  end,
}
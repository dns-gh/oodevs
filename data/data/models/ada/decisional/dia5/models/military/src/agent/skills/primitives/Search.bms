-- **************************************************************************** 
-- Search elements.
-- self.params.entities: the reconnoitrable elements
-- self.params.positions: the reconnoitring elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.SearchElement },

    done = function( self ) end,

    -- -------------------------------------------------------------------------------- 
    -- Main effect is reached: send feedback when entities are reconnoitered
    -- --------------------------------------------------------------------------------
    searched = function( self, params, additionnalParams )
        self.unsearchedEntities[ additionnalParams.searchedEntity ] = nil
        if not next( self.unsearchedEntities ) then
            Feedback( self.feedbacks.done ) -- the job is done, all targets are searched
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Store each elements to reconnoiter for feedbaks
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.unsearchedEntities = {}
        for _, entity in pairs( self.params.entities ) do
                self.unsearchedEntities[ entity ] = true 
            end
    end,

    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, reconnoiter it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        for entity in pairs( self.unsearchedEntities ) do
            Activate( skill.nodes.SearchElement, entity:reconnaissancePriority(),
                 { entity = entity, positions = self.params.positions } )
        end
    end
}


-- **************************************************************************** 
-- Reconnoiter reconnoiterable element using advance skills
-- self.params.entity: the reconnoitrable element
-- self.params.positions: the reconnoitering elements
-- ****************************************************************************
node "SearchElement"
{
    connections = {skill.links.observe, skill.nodes.Search, 
                   skill.links.moveAndTakePosition },

    feedbacks =  { "searched" },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self )-- from moveAndTakePosition
        self.movementDone = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create  = function( self )
        self.movementDone = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move toward a reconnoitering element and recconnoiter the entity
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        if self.params.entity:isSearched() and self.movementDone then
            Feedback( self.feedbacks.searched, { searchedEntity = self.params.entity } )
        end

        -- current observation toward the element to reconnoiter
        Activate( skill.links.observe, 1, { entity = self.params.entity } )
        
        -- when it possible reconnoiter the element.
        if self.params.entity:canReconnoitreIt() then
            if self.params.entity:isBeingReconnoiteredByMeOrNoOne( myself ) then
                Activate( skill.nodes.Search, 1, { target = self.params.entity } )
            else
                Feedback( self.feedbacks.reconnoitred, { element = self.params.entity } )
            end
        end

        -- Moving toward a reconnoitering positions
        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition, 
                position:reconnaissanceEfficiency( self.params.entity ), { entity = position } )
        end 
        self.movementDone = false
    end
}

-- **************************************************************************** 
-- Search action on the reconnoitrable element 
-- ****************************************************************************
node "Search"
{
    select = function( self )
        self.params.target:searchIt()
    end
}

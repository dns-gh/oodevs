-- ****************************************************************************
-- Follow a set of motile entities
-- self.params.entities: the motile elements to follow
-- ****************************************************************************
rootnode
{
    connections = { skill.links.stayClose },

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, stay close to it.
    -- --------------------------------------------------------------------------------
    activate = function( self )

        -- Filtering entities to be followed 
        self.entities = {} -- init
        for _, entity in pairs( self.params.entities ) do
            if entity:isValid() then
                if entity:canBeFollowed() then -- see method implementations in classes that realizes the "Motile" type.
                    self.entities[ #self.entities + 1 ] = entity
                else
                    meKnowledge:RC( eRC_FollowingUnitIsDead )
                end
            end -- else...the knowldedge of the entity is lost. Can't follow it
        end

        -- None of the entities can be followed...
        if not next( self.entities ) then
            meKnowledge:RC( eRC_NoUnitsInParameter )
            Feedback( self.feedbacks.failed )
            return
        end -- else, decide to follow filtered intities

        -- Activate "StayClose" skill to follow operational entities
        Activate( skill.links.stayClose, 1, { entities = self.entities } )
    end
}
-- **************************************************************************** 
-- Delay
-- Uitilisation de l'intention "moveToward" pour se déplacer vers les positions
-- de tir.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Shoot },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    -- Engagement is started on current firing position
    shot = function( self )
        self.fireStarted = true
    end,

    -- Movement toward firing position is done
    done = function( self )
        local fragorderReceived = integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_Decrocher" )
        if DEC_Agent_AutomateEstEmbraye() then 
            if  not self.arrived  then
              self.arrived = true
              integration.SendMessage( "ArrivedOnLima", integration.GetSuperiorKnowledge( meKnowledge), { arrived = true, me = meKnowledge }, { type = "dynamic" } )
            end
            if fragorderReceived then
              meKnowledge:launchDREB()
              self.nextTargetIndex = self.nextTargetIndex + 1 
              self.arrived = false			  
            end
        else
            if self.fireStarted or fragorderReceived or meKnowledge:hasBadForceRatio() then
                meKnowledge:launchDREB()
                self.nextTargetIndex = self.nextTargetIndex + 1
                self.arrived = false
            end
        end
        if self.nextTargetIndex > #self.params.positions then
            Feedback( self.feedbacks.done ) -- last fire position is reached
        end
        self.fireStarted = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        myself.desactiveSelfProtection = true
        self.fireStarted = false
        self.nextTargetIndex = 1
        myself.fragorderAutomate = false
        self.arrived = false
    end,
 
    -- -------------------------------------------------------------------------------- 
    -- Move toward current firing position and try to fire at entities
    -- --------------------------------------------------------------------------------
    activate = function( self )
    
        self.startDecrocher = false

        -- moving toward next fire position
        Activate( skill.links.moveToward, 1, 
            { entities = { self.params.positions[ self.nextTargetIndex ] } } )

        -- Shoot at the enemies
        local hostileElements = integration.query.getNearbyPlatoons()
        for _,  element in pairs( hostileElements ) do
            if element:canDestroyIt() then
                Activate( skill.nodes.Shoot, element:destructionPriority(), { entity = element } ) 
            end
        end    
    end,

    -- -------------------------------------------------------------------------------- 
    -- End of behavior
    -- --------------------------------------------------------------------------------
    destroy = function( self )
        myself.desactiveSelfProtection = false
    end,
    
}

-- **************************************************************************** 
-- Shoot action on the destroyable element
-- ****************************************************************************
node "Shoot"
{
    feedbacks = { "shot" },
    acquire = { [ skill.resources.engage ] = 1 },
    select = function( self )
        if self.params.entity:destroyIt() then
            Feedback( self.feedbacks.shot )
        end
    end
}

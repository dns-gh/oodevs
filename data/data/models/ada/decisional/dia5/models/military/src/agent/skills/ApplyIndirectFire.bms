-- **************************************************************************** 
-- Apply indirect fire
-- Apply fire and send reports
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.ApplyFire },

    -- -------------------------------------------------------------------------------- 
    -- Feedback
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            Feedback( self.feedbacks.done, { state = "hasFire" } )
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.nextTargetIndex = 1
        meKnowledge:sendMessage( tostring( #self.params.entities ).." targets found within the area" )
    end,

    -- --------------------------------------------------------------------------------  
    -- Execute an indirect fire to obtain an effect corresponding to the munition
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        if not meKnowledge:canUseDotation( self.params.dotationType ) then
            meKnowledge:RC( eRC_TirIndirectForbiddenAmmo )
            meKnowledge:sendMessage( "forbidden ammo" )
            Feedback( self.feedbacks.done, { state = "forbidden ammo" } )
            return
        end

        if not meKnowledge:hasDotation( self.params.dotationType ) then
            meKnowledge:RC( eRC_TirImpossiblePlusDeMunitions )
            meKnowledge:sendMessage( "no ammo" )
            Feedback( self.feedbacks.done, { state = "no ammo" } )
            return
        end

        if not meKnowledge:hasLauncherFor( self.params.dotationType ) then
            meKnowledge:RC( eRC_TirIndirectNoCapacity )
            meKnowledge:sendMessage( "no Launcher" )
            Feedback( self.feedbacks.done, { state = "no Launcher" } )
            return
        end

        if self.params.entities[ self.nextTargetIndex ] then
            if not self.params.entities[ self.nextTargetIndex ]:isOnRangeFor( self.params.dotationType ) then
                meKnowledge:RC( eRC_TirHorsDePortee )
                meKnowledge:sendMessage( "target out of range" )
                Feedback( self.feedbacks.done, { state = "out of range" } )
                return
            end

            -- Apply fire on target
            Activate( skill.nodes.ApplyFire, 1, { entity   = self.params.entities[ self.nextTargetIndex ], 
                                                  munition = self.params.dotationType, 
                                                  quantity = self.params.quantity } )
        end
    end
}

-- **************************************************************************** 
-- ApplyFire on target 
-- ****************************************************************************
node "ApplyFire"
{
    acquire = { [ skill.resources.indirectFire ] = 1 },

    select = function( self )
        if( self.params.entity:applyFireOnIt( self.params.munition, self.params.quantity ) ) then
            Feedback( self.feedbacks.done, { state = "finish" } )
        end
    end
}
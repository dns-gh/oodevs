-- **************************************************************************** 
-- Activate elements.
-- self.params.entities: the activable elements
-- self.params.positions: the animating elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.activateElement },

    -- -------------------------------------------------------------------------------- 
    -- Feedback when obstacle activated
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        self.targets[ params.entity ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done )
            return
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
    end,
    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to activate it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for entity in pairs( self.targets ) do
            Activate( skill.nodes.activateElement, entity:activationPriority(), 
                { entity = entity, positions = self.params.positions } )
        end
    end,
}


-- **************************************************************************** 
-- activate activable element using MoveAndTakePosition skills
-- self.params.entity: the activable element
-- self.params.positions: the animating elements
-- ****************************************************************************
node "activateElement"
{
    connections = { skill.links.moveAndTakePosition, skill.nodes.activate,
                    skill.links.observe },

    feedbacks = { "done" },
    
    -- -------------------------------------------------------------------------------- 
    -- Feedback when position reached and when occupied
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        if additionnalParams.reason == "activated" then
            Feedback( self.feedbacks.done, { entity = params.entity } )
        end
    end,

    create = function( self )
        if self.params.positions or self.params.positions == NIL then
            self.positionsToActivate = queries.getPositionsToActivate[ "execute" ](
                                             { elementsToActivate = { self.params.entity } } )
        else
            self.positionsToActivate = self.params.positions
        end
        self.activatingPositionIsReached = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move toward an animating element and activate the entity
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- when the entity is activated send a feedback
        if not self.params.entity:isManeuverObstacle() or self.params.entity:isActifManeuverObstacle() or self.params.entity:delayedActivationTime() > 0 then
               meKnowledge:RC( eRC_ObstacleNonActivable, self.params.entity.source )
               Feedback( self.feedbacks.done, { entity = self.params.entity, reason = "activated"  } )
               return
        end

        -- current observation toward the element to reconnoiter
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

       -- when it possible activate the element
        if self.activatingPositionIsReached and self.params.entity:canActivateIt() then
            Activate( skill.nodes.activate, 1, { entity = self.params.entity } )
        end

        -- Moving toward an activating positions
        for _,position in pairs( self.positionsToActivate )  do
            Activate( skill.links.moveAndTakePosition, 
                position:activationEfficiency( self.params.entity ), { entity = position } )
            if position:isReached() then
                self.activatingPositionIsReached = true
            end
        end
    end,
}
-- **************************************************************************** 
-- activate action on the activable element 
-- ****************************************************************************
node "activate"
{
    feedbacks = { "done" };

    acquire = { [ skill.resources.activationCapacity ] = 1 };

    select = function( self )
        if self.params.entity:activateIt() then
            Feedback( self.feedbacks.done, { entity = self.params.entity, reason = "activated" } )
        end
    end
}
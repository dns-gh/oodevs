-- **************************************************************************** 
-- To ensure indirect fire onto issued 
-- self.params.objective: the goal element
-- ****************************************************************************
rootnode
{
    connections = { skill.links.deploy, skill.links.applyIndirectFire },

    -- --------------------------------------------------------------------------------
    -- Slots
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams ) -- called by ApplyIndirectFire skill
        if  additionnalParams.state == "hasFire" or
            additionnalParams.state == "no ammo" or
            additionnalParams.state == "forbidden ammo" or
            additionnalParams.state == "out of range" or
            additionnalParams.state == "impossible to fire" or
            additionnalParams.state == "no Launcher" or
            additionnalParams.state == "target not illuminated" then
            self.order = nil
            if self.params.changeAutomatically then
                self.nextTargetIndex = self.nextTargetIndex + 1
                if self.nextTargetIndex > #self.params.firePositions then
                   self.nextTargetIndex = 1 -- one more time...starting from the first position.
                end
            end
        end
    end,
    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.order = nil
        self.positions = {}
        self.nextTargetIndex = 1
        self.waitOrder = false
    end,

    -- --------------------------------------------------------------------------------
    -- Move to firing position, and then deploy on it, toget ready to apply fire.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate -- lua optim

        -- The agent deploys on its own position.
        if self.params.firePositions == NIL then
            self.waitOrder = true -- wait order to go to next position.
        end

        -- Deploy on next position
        if self.nextTargetIndex <= #self.params.firePositions then
            self.waitOrder = true
            Activate( skill.links.deploy, 1, { objective = self.params.firePositions[ self.nextTargetIndex ] } )
        end

        -- Ready to apply fires
        if self.waitOrder then
            if not self.order then
                self.order = integration.query.getFirstFireOrder() -- $$$ MIA TODO faire une query réutilisable.
            end
            if meKnowledge:isDeployed() then
                integration.sendfireAvailable( true ) -- agent is OK to deliver fire
                meKnowledge:RC( eRC_PretPourConduiteTir )
                if self.params.callByFragOrder then
                      Feedback( self.feedbacks.done )
                end
                if self.order then
                    meKnowledge:RC( eRC_ReceptionOrdreDeFeu )
                    Activate( skill.links.applyIndirectFire, 1, self.order )
                end
            else
                integration.sendfireAvailable( false ) -- cannot deliver fire, the agent is not deployed.
                if self.order then
                    meKnowledge:RC( eRC_NotDeployedIndirectFireImpossible )
                end
            end
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Instance destruction, notify that the agent cannot deliver fire.
    -- --------------------------------------------------------------------------------
    destroy = function( self )
        integration.sendfireAvailable( false )
    end
}
local result = 
{
    fillParameters = function( self, companyTask, params, entity, retrogradeContext, objectif, taskName )
        if self.alreadyInit then
            companyTask:init()
            self.alreadyInit = true
        end
        local siteFranchissement = companyTask:getSite( params )
        local typePontage = companyTask:getTypePontage( params )
        return { siteFranchissement = siteFranchissement, typePontage = typePontage }
    end,

    getObstaclesParameter = function( self, companyTask, params )
        return companyTask:getObjectives( params )
    end,

    hasDotation = function( self, entity, obstacle )
        return integration.hasDotationToBuildObject( entity.source, tostring(obstacle:getType()) )
    end,

    canDoIt = function( self, entity, obstacle )
        local localisation = obstacle:getLocalisation()
        if localisation ~= nil then
            return integration.canBuildObjectWhenLoadedWithLocation( entity.source, tostring(obstacle:getType()), localisation )
        else
            return false
        end
    end
}

local t = initTaskKnowledge( result )
taskKnowledge["platoon.combat.support.engineer.tasks.knowledges.EquiperExploiterSite"] = t

return result
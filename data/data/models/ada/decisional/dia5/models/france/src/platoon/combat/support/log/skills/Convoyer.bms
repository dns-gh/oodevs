rootnode {
connections = { skill.nodes.RC, skill.links.moveAlong },

done = function( self, params, additionalParams ) -- moveToward
    self.arrived = true
end,

create = function( self )
    self.arrived = false
    self.fragOrderReceived = false
    self.sendCR = false
    
    self.transporteur = CreateKnowledge( world.PlatoonAlly, integration.getTransporter() )
    self.fluxTire = integration.distance(self.transporteur, meKnowledge) < 10
end,

 activate = function( self )
    self.ePhase = integration.getActionCouranteConvoi()

    if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_PoursuivreConvoi" )  then
        self.fragOrderReceived = true
    end
    
    local continueConvoy = self.fragOrderReceived  or F_Pion_GetpionEnEscorte( meKnowledge.source ) 
    -- Action de chargement
    if self.ePhase == eConvoyerAction_Load then
        self.arrived = false
        self.sendCR = false
        self.fragOrderReceived = false
        Activate(skill.nodes.RC, 1, { RC = eRC_Convoi_ChargementEnCours, } )
    -- Action de déchargement
    elseif self.ePhase == eConvoyerAction_Unload  then
        self.arrived = false
        self.sendCR = false
        self.fragOrderReceived = false
        Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DechargementEnCours, } )
    -- Action de déplacement vers le ravitailleur
    elseif self.ePhase == eConvoyerAction_MoveToSupplier then
        if continueConvoy or not self.fluxTire  then
            self.sendCR = false
            Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DeplacementVersPointChargement, } )
            self.ravitailleur = CreateKnowledge( world.PlatoonAlly, integration.getRavitailleur() )
            if not self.itineraryToSupplier then
                local itinerary = integration.getItineraireVersProchaineDestination()
                self.itineraryToSupplier = {}
                for _, pos in pairs( itinerary ) do
                  self.itineraryToSupplier[#self.itineraryToSupplier + 1] = CreateKnowledge( world.Point, pos )
                end
                self.itineraryToSupplier[#self.itineraryToSupplier + 1] = self.ravitailleur:getMyPosition()
            end
            Activate( skill.links.moveAlong, 1, { entities = self.itineraryToSupplier, pathType = eTypeItiLogistique } )
            if( self.arrived ) then
                self.arrived = false
                integration.deplacementVersRavitailleurEffectue()
            end
         else
            self.sendCR = true
         end
    -- Action de déplacement vers le destinataire du convoi
     elseif self.ePhase == eConvoyerAction_MoveToSupplyRecipient then
        if self.fragOrderReceived then
            self.sendCR = false
            Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DeplacementVersPointDechargement, } )
            self.destinataireCourant = CreateKnowledge( world.PlatoonAlly, integration.getDestinataireCourant() )
            if not self.itineraryToSupplyRecipient then
                local itinerary = integration.getItineraireVersProchaineDestination()
                self.itineraryToSupplyRecipient = {}
                for _, pos in pairs( itinerary ) do
                  self.itineraryToSupplyRecipient[#self.itineraryToSupplyRecipient + 1] = CreateKnowledge( world.Point, pos )
                end
                self.itineraryToSupplyRecipient[#self.itineraryToSupplyRecipient + 1] = self.destinataireCourant:getMyPosition()
            end
            Activate( skill.links.moveAlong, 1, { entities = self.itineraryToSupplyRecipient, pathType = eTypeItiLogistique } )
            if( self.arrived ) then
                self.arrived = false
                integration.deplacementVersDestinataireEffectue()
            end
         else
            self.sendCR = true
         end
    -- Action de déplacement vers le transporteur qui a prêté les véhicules
     elseif self.ePhase == eConvoyerAction_MoveToTransportersProvider then
        if continueConvoy or self.fluxTire then
            self.sendCR = false
            Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_Retour, } )
            if not self.itineraryToTransportersProvider then
                local itinerary = integration.getItineraireVersProchaineDestination()
                self.itineraryToTransportersProvider = {}
                for _, pos in pairs( itinerary ) do
                  self.itineraryToTransportersProvider[#self.itineraryToTransportersProvider + 1] = CreateKnowledge( world.Point, pos )
                end
                self.itineraryToTransportersProvider[#self.itineraryToTransportersProvider + 1] = self.transporteur:getMyPosition()
            end
            Activate( skill.links.moveAlong, 1, { entities = self.itineraryToTransportersProvider, pathType = eTypeItiLogistique } )
            if( self.arrived ) then
                self.arrived = false
                integration.deplacementVersTransporteurEffectue()
            end
         else
            self.sendCR = true
         end
     end

    if self.sendCR then
        Activate( skill.nodes.RC, 1, { RC = eRC_AttenteOrdrePoursuivreConvoi } )
        self.sendCR = false
    end

 end,
 
 destroy = function( self )
    integration.finMissionConvoi()
 end,
}

-- noeud permettant de renvoyer un compte rendu
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
-- **************************************************************************** 
-- Relieve unit.
-- self.params.objective: the relievable unit
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.links.moveAndTakePosition },

    done = function( self ) 
        self.arrived = true
        meKnowledge:sendNeedRoute( self.escortableUnit, true )
        self.route = nil
        meKnowledge:sendGetRouteForEscorting( self.escortableUnit, false )
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        if masalife.brain.core.class.isOfType( self.params.objective, world.Platoon ) then
            self.escortableUnit = integration.getAgentFromKnowledge( self.params.objective )
        else
            self.escortableUnit = self.params.objective
        end
        meKnowledge:sendNeedRoute( self.escortableUnit, false )
        F_Pion_SetpionEnEscorte( self.escortableUnit.source, meKnowledge.source )
        myself.speedModulation = myself.speedModulation or {}
    end,

    -- -------------------------------------------------------------------------------- 
    -- Try to relieve unit
    -- Move to element and relieve it if possible
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        myself.speedModulation.escort = 1
        -- si l'unit� que l'on escorte a fait un itin�raire, bouger vers cet itin�raire, sinon, bouger vers l'unit�
       if self.arrived then
          if myself.canGiveRoute then
               if F_Pion_GetNewEscorted( meKnowledge.source ) then
                    F_Pion_SetNewEscorted( meKnowledge.source, false )
                    self.route = F_Pion_GetitMvt( self.escortableUnit.source )
               else
                    self.route = self.route or F_Pion_GetitMvt( self.escortableUnit.source )
               end
          end
       end
       if self.route then
            meKnowledge:sendNeedRoute( self.escortableUnit, false )
            local distance = meKnowledge:getProximity( self.escortableUnit )
            if distance < 50 then
                myself.speedModulation.escort =  0 -- l'unit� qui escorte s'arrete
            elseif distance < 90 then
                local mySpeed = DEC_Agent_GetCurrentSpeed(meKnowledge.source)
                local hisSpeed = DEC_Agent_GetCurrentSpeed(self.escortableUnit.source)
                self.speedModulation = self.speedModulation or 1
                if hisSpeed~= 0 and mySpeed ~= 0 then
                    self.speedModulation = ( mySpeed/hisSpeed ) + self.speedModulation
                end
                local oldSpeed = DEC_GetModulationVitesseMax( meKnowledge.source )
                local newSpeed =  oldSpeed/self.speedModulation
                myself.speedModulation.escort = newSpeed
            end
            meKnowledge:sendGetRouteForEscorting( self.escortableUnit, true )
            local itinerary = CreateKnowledge( world.Itinerary, self.route )
            Activate( skill.links.moveAndTakePosition, 1, { entity  = itinerary } ) -- itinerary is reachable element and a reaching element.
        else
            if not self.arrived then
                if myself.canGiveRoute then
                    if F_Pion_GetNewEscorted( meKnowledge.source ) then
                        F_Pion_SetNewEscorted( meKnowledge.source, false )
                    end
                    self.route = F_Pion_GetitMvt( self.escortableUnit.source )
                     if self.route then
                         meKnowledge:sendNeedRoute( self.escortableUnit, false )
                         local itinerary = CreateKnowledge( world.Itinerary, self.route )
                         Activate( skill.links.moveAndTakePosition, 1, { entity  = itinerary } ) -- itinerary is reachable element and a reaching element.
                     else
                         meKnowledge:sendNeedRoute( self.escortableUnit, false )
                         Activate( skill.links.moveToward, 1, { entities  = { self.escortableUnit } } )
                     end    
                else  
                    meKnowledge:sendNeedRoute( self.escortableUnit, false )
                    Activate( skill.links.moveToward, 1, { entities  = { self.escortableUnit } } )
                end
            end
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- End of behavior
    -- --------------------------------------------------------------------------------
    destroy = function( self )
        myself.speedModulation.escort = 1
        F_Pion_SetpionEnEscorte( self.escortableUnit.source, nil )
    end,
}

-- Find which unit will do the task
-- @params self
-- @params tasks : a list of platoon taks*
-- @params nbrFront : how many platoon can take this task
-- @params echelon : echelon number
-- @author LMT
-- @release 2011-01-13
local function issueMission ( self, tasks, nbrFront )
    local tasks = explode( ";", tasks )
    local bestUnits = findBestsAutomat( self.entitiesWithoutMission, tasks, self.companyTask, self.parameters, nbrFront ) --Save the nbrFront best couple unit/task
    self.entitiesWithoutMission = removeFromListForLead( bestUnits, self.entitiesWithoutMission )
    local nBestUnits = #bestUnits
    for i = 1, nBestUnits do
        local elem = bestUnits[i]
        integration.communication.StartMissionAutomate( elem )
    end
    return bestUnits
end

rootnode {

done = function( self ) end,

create = function( self )
        myself.newTask = false
        self.parameters = myself.taskParams
        self.parameters.commandingEntities = integration.getEntitiesFromBatallion()
        
        -- Init
        myself.leadData = {}
        self.entitiesWithoutMission = copyTable( self.parameters.commandingEntities )
        self.companyTask = integration.RetrieveAutomateTask( meKnowledge, self.params.companyTask )
        self.companyTask:init( self.params, self.parameters )

        self.nbrFront = #self.parameters.commandingEntities -- All platoons in front

        -- Initialisation des missions pion

        -- Le premier echelon recoit les missions principales ("mainTasks")
        local bestUnits = issueMission ( self, self.params.mainTasks, self.nbrFront )
        
        if #bestUnits == 0 then
            meKnowledge:RCOutsideNode(eRC_NoPEInAutomat)
            return
        end

        -- Ceux qui n'ont toujours pas de mission recoivent la mission par défaut
        issueMission ( self, self.params.defaultTask, #self.entitiesWithoutMission )
end,


activate = function( self )
    if myself.newTask then
      self:create()
    end
end
}

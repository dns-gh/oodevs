-------------------------------------------------------------------------------
-- Skill ReparerAvecRenforcement
-- @author GGE
-- @created 2011-08-18
--
-- This file is part of a MASA library or program.
-- Refer to the included end-user license agreement for restrictions.
--
-- Copyright (c) 2011 Mathématiques Appliquées SA (MASA)
-------------------------------------------------------------------------------
rootnode
{
    connections = { skill.links.repair, skill.links.improverepair, skill.nodes.RC },

    done = function( self ) end,

    elementFailed = function( self, params, additionalParams )
        self.report = additionalParams.reason
        if additionalParams.reason == eRC_PasDotationConstructionObjet then
            integration.setNeedReinforcement( meKnowledge, "build", additionalParams.element, true )
        else
            integration.setNeedReinforcement( meKnowledge, "build", additionalParams.element, false )
        end
    end,

    elementRepaired = function( self, params, additionalParams )
        if self.params.withImprovement then
            self.toImprove = additionalParams.element
        else
            meKnowledge:sendStopNeededReinforcement( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge)
            self.nextTargetIndex = self.nextTargetIndex + 1
            if self.nextTargetIndex > #self.params.entities then
                Feedback( self.feedbacks.done )
            end
        end
    end,

    elementImproved = function( self, params, additionalParams )
        self.toImprove = nil
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            Feedback( self.feedbacks.done )
        end
    end,
    
    elementNotImprovable = function( self )
        self.toImprove = nil
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            Feedback( self.feedbacks.done )
        end
    end,

    create = function( self )
        self.nextTargetIndex = 1
        self.report = nil
        self.toImprove = nil
        self.alltry = #self.params.entities == 0
        self.positions = queries.getPositionsToRepair[ "execute" ]({elementsToRepair = self.params.entities})
    end,

    activate = function( self )
        local Activate = Activate
        if self.params.entities == NIL or self.params.entities == nil then
            Feedback( self.feedbacks.done ) -- no obstacles to repair
            return
        end

        -- CR on physical capability --> need reinforcement or recompletion
        if self.report then
            Activate( skill.nodes.RC, 1, { RC = self.report } )
        end

        if self.alltry then
            Feedback( self.feedbacks.done )
            return
        end

        if self.toImprove then
            Activate( skill.links.improverepair, 1, { entities  = { self.toImprove }, 
                                          positions = self.positions } )
        else
            Activate( skill.links.repair, 1, { entities  = { self.params.entities[ self.nextTargetIndex ] }, 
                                          positions = self.positions } )
        end

        self.alltry = false
        self.report = nil
    end,
}

node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
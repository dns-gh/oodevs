local echelonString = {}
echelonString[ eEtatEchelon_First ] = "eEtatEchelon_Premier"
echelonString[ eEtatEchelon_Second ] = "eEtatEchelon_Second"
echelonString[ eEtatEchelon_Scout ] = "eEtatEchelon_Eclairage"

-- **************************************************************************** 
-- Default CR skill
-- ****************************************************************************
rootnode
{
    connections = 
    { 
        skill.nodes.DecisionalState, 
        skill.nodes.ChangeEtatRapportDeForce,
        skill.nodes.ChangeEtatOperationnel,
        skill.links.dismount,
        skill.links.moveTo,
        skill.links.engage,
        skill.nodes.RC
    },

    done = function( self, params, additionalParams ) -- skill moveTo
        self.isMoving = false
    end,

    activate = function( self )
        local Activate = Activate

        -- Debarquement sur magic move
        if integration.shouldDismount() then
            Activate( skill.links.dismount, 1 )
        end
        
        if meKnowledge:getROE() == eRoeStateFreeFire then -- engage ennemies if the Rules Of Engagement is free fire
            self.ennemis = sword.military.queries.enemies.getEnemiesInRange[ "execute" ]( {probabilityToHit = 0,8})
            self.positionForEngaging = sword.military.queries.tactical.getPositionsToDestroy[ "execute" ]( {elementsToDestroy = self.ennemis} )
            Activate( skill.links.engage, 1, { entities = self.ennemis, positions = self.positionForEngaging } )
        end
        -- Alert NBC
        if meKnowledge:isContaminated() or meKnowledge:isPoisoned() then
            meKnowledge:alertNBC()
        end

        if meKnowledge:isUnderIndirectFire() and not self.isMoving then
            if not self.isMoving then
                self.direction = sword.military.queries.miscellaneous.getMissionDirection[ "execute" ]()
                if meKnowledge:isParked() then
                    self.positionSurete = meKnowledge:getPosition()
                elseif( self.direction[1] ~= nil ) then
                    self.positionSurete = DEC_Geometrie_PositionTranslateDir( meKnowledge:getPosition(), self.direction[1].source, -1100 )
                else
                    self.positionSurete = DEC_Geometrie_PositionTranslateDir( meKnowledge:getPosition(), DEC_Agent_Direction(), -1100 )
                end
             self.isMoving = true
             end
        end
        if self.positionSurete and DEC_Agent_EstNeutralise() then
            Activate( skill.links.moveTo, 10, { entities = {CreateKnowledge( integration.ontology.types.point, self.positionSurete )} } )
        end

        -- Transport
        if DEC_Agent_EstTransporte() then -- $$$ MIA TODO Virer fonction DEC, mettre isNeutraized sur le body
            Activate( skill.nodes.RC, 1, { RC = eRC_TransportEnCours } )
        end

        -- Se rendre : on ne partage plus de connaissances avec son groupe de connaissances
        if meKnowledge:isSurrendered() then
            meKnowledge:switchRadioOff()
        end

        -- Etat décisionnel sur les echelons
        local etat = meKnowledge:getEchelon()
        Activate( skill.nodes.DecisionalState, 1, { category = "Echelon", value = echelonString[ etat ] or "eEtatEchelon_None" } )

        -- CR sur le rapport de force 
        if meKnowledge:hasBadForceRatio() then
            Activate( skill.nodes.DecisionalState, 1, { category = "Contact", value = "eEtatDec_Sauvegarde" } )
            Activate( skill.nodes.ChangeEtatRapportDeForce, 1, { value = eForceRatioStateUnfavorable } )
            F_Pion_SeteEtatDec ( meKnowledge.source, eEtatDec_Sauvegarde )
        else -- favorable ou neutre
            Activate( skill.nodes.DecisionalState, 1, { category = "Contact", value = "eEtatDec_Continu" } )
            Activate( skill.nodes.ChangeEtatRapportDeForce, 1, { value = eForceRatioStateFavorable } )
            F_Pion_SeteEtatDec ( meKnowledge.source, eEtatDec_Continu ) -- pour l'automate
        end

        -- Etat décisionnel sur la destruction
        if meKnowledge:isDestroyed() then
            Activate( skill.nodes.DecisionalState, 1, { category = "EtatOps", value = "eEtatDestruction_Total" } )
            Activate( skill.nodes.ChangeEtatOperationnel, 1, { value = 0 } ) -- $$$ MIA TODO trouver l'enum!
        elseif not meKnowledge:isOperational() then
            Activate( skill.nodes.DecisionalState, 1, { category = "EtatOps", value = "eEtatDestruction_Tactique" } )
            Activate( skill.nodes.ChangeEtatOperationnel, 1, { value = 1 } ) -- $$$ MIA TODO trouver l'enum!
        else -- operational
            Activate( skill.nodes.DecisionalState, 1, { category = "EtatOps", value = "eEtatDestruction_None" } )
            Activate( skill.nodes.ChangeEtatOperationnel, 1, { value = 2 } ) -- $$$ MIA TODO trouver l'enum!
        end
    end
}

-- **************************************************************************** 
-- Affiche l'état décisionnel 
-- **************************************************************************** 
node "DecisionalState"
{
    create = function( self )
        DEC_DecisionalState( self.params.category, self.params.value )
    end
}
node "ChangeEtatRapportDeForce"
{
    create = function( self )
       DEC_Agent_ChangeEtatRapportDeForce( self.params.value )
    end
} 
node "ChangeEtatOperationnel"
{
    create = function( self )
        DEC_Agent_ChangeEtatOperationnel( self.params.value )
    end
}
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end
}

-- **************************************************************************** 
-- Buid obstacles sorted by user
-- ****************************************************************************
rootnode
{
    connections = 
    { skill.links.build, skill.links.improve, skill.nodes.RC },

    done = function( self ) end,

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    elementFailed = function( self, params, additionalParams )
        self.report = additionalParams.reason
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
    end,
    
    elementNotActivated = function( self, params, additionalParams )
        if self.params.withImprovement then
            self.toImprove = additionalParams.element
        end
        self.objectsToActivate[#self.objectsToActivate + 1] = additionalParams.element
        meKnowledge:RC( eRC_ObstacleEnAttenteActivation, additionalParams.element.source )
        self.nextTargetIndex = self.nextTargetIndex + 1
        myself.obstacleToActivate = true
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
    end,

    elementBuilt = function( self, params, additionalParams )
        if self.params.withImprovement then
            self.toImprove = additionalParams.element
        else
            self.nextTargetIndex = self.nextTargetIndex + 1
            if self.nextTargetIndex > #self.params.entities then
                self.alltry = true
            end
        end
    end,

    elementImproved = function( self, params, additionalParams )
        self.toImprove = nil
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
    end,

    elementNotImprovable = function( self )
        self.toImprove = nil
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Node begins: store each objective in a table
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.nextTargetIndex = 1
        self.report = nil
        self.toImprove = nil
        self.alltry = #self.params.entities == 0
        self.objectsToActivate = {}
        myself.obstacleToActivate = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Select the more interesting position and move toward it to engage ennemy. 
    -- The more interesting is the first in the table $$$$ MIA à voir
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if self.params.entities == NIL or self.params.entities == nil then
            Feedback( self.feedbacks.done ) -- no obstacles to build
            return
        end

        -- CR on physical capability --> need reinforcement or recompletion or need activate obstacle
        if self.report then
            Activate( skill.nodes.RC, 1, { RC = self.report } )
        end

        if self.alltry then
            for _, objective in pairs( self.objectsToActivate ) do -- Obstacles should be activated to consider action over 
                if objective:isManeuverObstacle() and not objective:isActifManeuverObstacle() and objective:delayedActivationTime() > 0 then
                    return
                end
            end
            self.objectsToActivate = nil
            myself.obstacleToActivate = false
            Feedback( self.feedbacks.done )
            return
        end

        if self.toImprove then
            Activate( skill.links.improve, 1, { entities  = { self.toImprove }, 
                                          positions = self.params.positions } )
        else
            Activate( skill.links.build, 1, { entities  = {self.params.entities[self.nextTargetIndex]}, 
                                          positions = self.params.positions } )
        end

        self.alltry = false
        self.report = nil
    end,
}

-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
-- ****************************************************************************
-- Observe toward observable entities
-- self.params.entity: the observable elements
-- self.params.area: the observing elements
-- ****************************************************************************
rootnode
{
    connections = { skill.links.indirectFire, skill.links.dismount, skill.nodes.CR_ReceiveFireOrder },

    done = function( self, params, additionnalParams )
        if additionnalParams.state == "hasFire" then
            self.order = nil
        elseif additionnalParams.state == "no ammo" or
               additionnalParams.state == "forbidden ammo" or
               additionnalParams.state == "out of range" or
               additionnalParams.state == "impossible to fire" or
               additionnalParams.state == "no Launcher" or
               additionnalParams.state == "target not illuminated" then
            self.order = nil
        end
    end,
    
    create = function( self )
        self.dangerousEnemies = {}
        self.platoonsToSupport = {}
        self.selfCommanding = true
        self.alliedUnits = copyTable( self.params.alliedUnits )
        if not meKnowledge:isSelfCommanding() then -- if support automat : support all first echelon platoons
             self.selfCommanding = false
             self.commanderToSupport = integration.GetSuperiorKnowledge( self.alliedUnits[1] )
             self.entitiesInFirstEchelon = integration.filterPionWithEchelon( 
                        integration.getEntitiesFromAutomatCommunication( self.commanderToSupport, "none", true), eEtatEchelon_First )
             if next(self.entitiesInFirstEchelon) then
                 self.platoonsToSupport = self.entitiesInFirstEchelon
             else -- no platoon in first echelon, return input allies
                 self.platoonsToSupport = self.alliedUnits
             end
        end
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, try to shoot it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        
        if not self.order then -- received frago : apply fire
            self.order = integration.query.getFirstFireOrder()
        end
        
        -- Apply fire when supporting allies who need help and not self commanding
        if not self.selfCommanding then
            self.dangerousEnemies = integration.query.getEnemiesToIndirectFireWhenSupport( self.platoonsToSupport )
            self.automaticTarget = integration.findEnemyToMortarIndirectFire( self.dangerousEnemies ) -- unit should be unload to have result
        end
        if self.order or ( self.dangerousEnemies and #self.dangerousEnemies > 0 ) then --Need to dismount before firing
            if not meKnowledge:isDismounted() and meKnowledge:canDismount() then
                Activate( skill.links.dismount, 1 )
            end
        end
        
        if self.order then  --Apply fire when received frago
            if meKnowledge:isDismounted() then
                integration.sendfireAvailable(true)
                Activate( skill.nodes.CR_ReceiveFireOrder, 1 )
                Activate( skill.links.indirectFire, 1, self.order )
            end
        end
        
        if self.automaticTarget and self.automaticTarget:isValid() then --Apply fire to support allies automatically
            if meKnowledge:isDismounted() then
                self.dotation = integration.munitionPourTirIndirect( self.automaticTarget:getPosition() )
                if integration.hasDotation( self.dotation ) then
                    integration.sendfireAvailable(true)
                    Activate( skill.nodes.CR_ReceiveFireOrder, 1 )
                    Activate( skill.links.indirectFire, 1, { entities = { self.automaticTarget }, interventionType = 1, munition = self.dotation } )
                end
            end
        end
    end,
    
    destroy = function( self )
        integration.sendfireAvailable(false)
    end,
}

node "CR_ReceiveFireOrder"
{ 
    create = function( self )
        meKnowledge:RC( eRC_ReceptionOrdreDeFeu )
    end
}

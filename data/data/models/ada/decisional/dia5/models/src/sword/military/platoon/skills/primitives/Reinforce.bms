-- **************************************************************************** 
-- Reinforce elements.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveAndTakePosition, skill.nodes.reinforce,
                    skill.links.observe, skill.links.mount, skill.links.dismount },

     -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to reinforce it. 
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionnalParams )
        if additionnalParams.reason == "arrived" then
            self.arrived = true
        end
        if additionnalParams.state == "reinforced" then
            self.arrived = true
            Feedback( self.feedbacks.done, { entity = self.params.entity, state = additionnalParams.state } )
        end
    end,

    create = function( self )
        self.arrived = false
        self.params.entity:changeAutomate()
        self.isMounted = meKnowledge:isMounted()
    end,

    -- -------------------------------------------------------------------------------- 
    -- For each objective of the skill, try to reinforce it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        if self.arrived then
           if self.params.entity:canReinforceIt() then
               Activate( skill.nodes.reinforce, 1, { entity = self.params.entity } )
               if self.isMounted then
                   Activate( skill.links.dismount, 1 )
               end
           else
               self.arrived = false
               -- skip activate to force a new pathfind in order not to activate each tic moveandtakeposition
               return
           end
        else
           if self.isMounted then
               Activate( skill.links.mount, 1 )
           end
        end

       local positions = {}
        if self.params.positions and self.params.positions ~= NIL then
          positions = self.params.positions
        else 
           positions = sword.military.queries.tactical.getPositionsToFollow[ "execute" ]({ elementsToFollow = {self.params.entity} })
        end
        for _,position in pairs( positions ) do
            Activate( skill.links.moveAndTakePosition, 
                position:reinforcementEfficiency( self.params.entity ), { entity = position } )
        end

        self.arrived = false
    end,
    
    destroy = function( self )
        if self.isMounted then
            Activate( skill.links.mount, 1 )
        end
    end
}

-- **************************************************************************** 
-- Simple reinforcement action.
-- ****************************************************************************
node "reinforce"
{
    feedbacks = { "done" },

    select = function( self )
        if self.params.entity:reinforceIt() then
            Feedback( self.feedbacks.done, { state = "reinforced" } )
        end
    end
}
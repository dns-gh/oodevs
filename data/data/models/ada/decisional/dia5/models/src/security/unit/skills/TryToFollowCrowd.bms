rootnode {

  connections = { 
    skill.links.moveTo, 
    skill.nodes.ACT_Info_Trace 
  },

  create = function( self )
  end,
  
  -- -------------------------------------------------------------------------------- 
  -- Feedbacks
  -- --------------------------------------------------------------------------------
  done = function( self, params ) -- element is reached
  end,

  -- -------------------------------------------------------------------------------- 
  -- Always want to reach the head of the population. 
  -- If the population is moving, unit tries to forhead it
  -- --------------------------------------------------------------------------------  
  activate = function( self )
        
        local isCrowdMoving = function( crowdPosition )
            return not self.lastCrowdPosition or crowdPosition:getProximity( self.lastCrowdPosition ) > 5
        end
        
        local Activate = Activate

        Activate( skill.nodes.ACT_Info_Trace, 1, { value = "Move toward the nearest population.", } )
        Activate( skill.nodes.ACT_Info_Trace, 1, { value = "Monitor population. Reach the target destination.", } )

        local crowdPosition = self.params.crowd:getHeadPosition()
        if isCrowdMoving( crowdPosition ) then
          local distance = meKnowledge:getProximity( crowdPosition )                    
          Activate( skill.nodes.ACT_Info_Trace, 1, { value = "Distance: " .. tostring( distance ), } )
          if distance <= 100 then
            Activate( skill.links.moveTo, 2, { element = self.params.destination } )
          end
        end
        Activate( skill.links.moveTo, 1, { element = crowdPosition } )
        self.lastCrowdPosition = crowdPosition
  end,
}

node "ACT_Info_Trace" 
{
  create = function( self )
    DEC_Trace( self.params.value )
    -- meKnowledge:RC( self.param.value )
  end
}
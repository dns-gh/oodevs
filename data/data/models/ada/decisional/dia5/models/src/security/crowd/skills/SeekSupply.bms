rootnode
{
    connections = { skill.links.moveTo };

    done = function( self, params )
        if self.arrived == true then
            DEC_ReintegrateUrbanBlock()
    	    Feedback( self.feedbacks.done, { reason = "seek supply done" } )
	    end
	    self.arrived = true
	    self.nextChangeAttitudeTime = DEC_GetTimeInSeconds() + 60 * 60
    end,

    create = function( self )
        self.arrived = false
        self.nextAgressiveTime = nil
        local pos = DEC_Geometrie_CopiePoint( DEC_GetPosition() )
        self.initialPosition = CreateKnowledge( integration.ontology.types.point, pos )   
    end,

    activate = function( self )
        local Activate = Activate
        if self.arrived == false then
            for _, supplyPoint in pairs( self.params.supplyPoints ) do
                Activate( skill.links.moveTo, supplyPoint:proximityLevel(), { element = supplyPoint } )
            end
        else
            local angriness = DEC_GetUrbanBlockAngriness()            
            if angriness < 0.1 then
                integration.changeAttitude( eAttitudePopulation_Calme )
                Activate( skill.links.moveTo, 1, { element = self.initialPosition } )
            else
                local currentTime = DEC_GetTimeInSeconds()
                if self.nextChangeAttitudeTime and self.nextChangeAttitudeTime > currentTime then
                    local newAttitude = DEC_Population_Attitude() + 1
                    newAttitude = newAttitude < eAttitudePopulation_Agressive and newAttitude or eAttitudePopulation_Agressive
                    integration.changeAttitude( newAttitude )
                    self.nextChangeAttitudeTime = currentTime + 60 * 60
                end
            end
        end
    end
}

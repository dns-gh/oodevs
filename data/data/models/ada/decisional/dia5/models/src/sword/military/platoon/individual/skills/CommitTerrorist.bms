-- **************************************************************************** 
-- Attack units. This skill means "terrorist attack" with a bomb to destroy.
-- A bomb can be use on different elements, 
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Attack, skill.nodes.CR },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    exploded = function( self ) -- attack is commited
        self.commited = true
    end,
    done = function( self ) --moveToward feedback
        if self.IEDReady then
            self.arrived = true
        else
            self.IEDReady = true
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.commited = false
        self.firing = false
        self.IEDReady = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Activate
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if self.commited and self.arrived then -- IED exploded and unit joined his fallback position : task completed
            Feedback( self.feedbacks.done )
            return
        end
        
        if not integration.hasDotation( self.params.dotation ) then -- no more IED
            Activate( skill.nodes.CR, 1, { RC = eRC_TirImpossiblePlusDeMunitions } )
            Feedback( self.feedbacks.done )
            return
        end
        
        if not self.IEDReady then
            Activate( skill.links.moveToward, 1, { entities = { self.params.objective } } )
            if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_MiseAFeuIED" ) then-- delete frago before IED ready
                Activate( skill.nodes.CR, 1, { RC = eRC_IEDNotReady } )
            end
            return
        else
            Activate( skill.nodes.CR, 1, { RC = eRC_IEDReadyForFiring } )
            Activate( skill.links.moveToward, 1, { entities = { self.params.position } } )
        end
        
        if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_MiseAFeuIED" ) then
            self.firing = true
        else
           if self.arrived and not self.params.manual then
               self.firing = true
           end
        end
        
        if self.firing then
            if self.params.objective:isValid() then
                if self.params.objective:isInAttackRange( self.params.suicide, self.params.dotation ) then
                    Activate( skill.nodes.Attack, 1, { objective = self.params.objective, 
                       suicide = self.params.suicide, dotation = self.params.dotation } )
                else -- out of range to activate IED and firing
                    Activate( skill.nodes.CR, 1, { RC = eRC_ImpossibleActivateIED } )
                    Feedback( self.feedbacks.done )
                    return
                end
            else  -- target is no longer valid
                Activate( skill.nodes.CR, 1, { RC = eRC_InvalidTarget } )
                Feedback( self.feedbacks.done )
                return
            end
        end
        
        self.arrived = false
    end,
}

-- **************************************************************************** 
-- Simple action to attack an element
-- ****************************************************************************
node "Attack"
{
    feedbacks = { "exploded" },

    select = function( self )
        if self.params.objective:attackIt( self.params.suicide, self.params.dotation ) then
           Feedback( self.feedbacks.exploded )
        end
    end,
}

-- ****************************************************************************
-- CR
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
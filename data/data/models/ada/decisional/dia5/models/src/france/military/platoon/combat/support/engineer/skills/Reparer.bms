-- **************************************************************************** 
-- Repair elements.
-- self.params.entities: the buildable/repairable elements
-- self.params.positions: the repairing elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.RepairElement },

    -- -------------------------------------------------------------------------------- 
    -- Feedback when position reached and when occupied 
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams )
        Feedback( self.feedbacks.elementRepaired, { element = params.entity } )
        self.objectsToRepair[ params.entity ] = nil
        if next( self.objectsToRepair ) == nil then
            Feedback( self.feedbacks.done )
        end
    end,

    failed = function( self, params, additionalParams )
        Feedback( self.feedbacks.elementFailed, { element = additionalParams.element, reason = additionalParams.reason } )
    end,

    create = function( self )
        self.objectsToRepair = {}
        for _, object in pairs( self.params.entities ) do
            self.objectsToRepair[ object ] = true
        end
    end,

    activate = function( self ) 
        local Activate = Activate
        for object, _ in pairs( self.objectsToRepair ) do
            Activate( skill.nodes.RepairElement, 
                object:buildPriority(), { entity = object, positions = self.params.positions } )
        end
    end
}

node "RepairElement"
{
    connections = 
    {
        skill.links.moveAndTakePosition, 
        skill.links.observe,
        skill.links.dismount,
        skill.nodes.Repair
    },

    done = function( self, params, additionalParams )
       self.arrived = true
    end,

    create = function( self )
        self.arrived = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move to appropriate position to element and repair (build) it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- when the entity is repaired/built send a feedback
        if self.params.entity:isBuilt() then
            Feedback( self.feedbacks.done )
            return
        end

        -- current observation toward the element to repair
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        if self.arrived then
            if not self.params.entity:buildingCapacity() then
                Feedback( self.feedbacks.failed, { element = self.params.entity, reason = eRC_ConstructionObjetImpossible } )
            elseif not self.params.entity:buildingDotation() then
                Feedback( self.feedbacks.failed, { element = self.params.entity, reason = eRC_PasDotationConstructionObjet } )
            else
                
                Activate( skill.links.dismount, 1 )
                Activate( skill.nodes.Repair, 1, { entity = self.params.entity } )
            end
        end

        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition, position:reachEfficiency( self.params.entity ), { entity = position, pathType = eTypeItiDeminage } )
        end

        self.arrived = false
    end
}

-- **************************************************************************** 
-- Repair.
-- Simple action to repair element, in fact build 
-- ****************************************************************************
node "Repair"
{
    acquire = { [ skill.resources.buildCapacity ] = 1 },

    select = function( self )
        self.params.entity:buildIt()
    end
}

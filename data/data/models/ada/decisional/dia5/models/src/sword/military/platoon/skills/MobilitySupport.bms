rootnode
{
    connections = { skill.links.StayClose, skill.links.ByPass },

    done = function( self, params, additionnalParams ) -- ByPass
        for i = 1, #self.params.entities do
            meKnowledge:sendObstacleByPassed( self.params.entities[i] )
        end
    end,
    
    create = function( self )
        for i = 1, #self.params.entities do
            meKnowledge:giveMobilitySupport( self.params.entities[i] )
        end
    end,

    activate = function( self )
        local Activate = Activate
        self.obstacles = sword.military.queries.objects.getObstaclesToSupport[ "execute" ]()
        self.positions = sword.military.queries.tactical.getPositionsToFollow[ "execute" ]( {elementsToFollow = self.params.entities,
                                                                                             distanceMin = self.params.distanceMin, 
                                                                                             dynamic = "true" })
        Activate( skill.links.StayClose, 0.1, {entities = self.params.entities, positions = self.positions})
        if self.obstacles then
            Activate( skill.links.ByPass, 0.9, {entities = self.obstacles})
        end
    end,
    
    destroy = function( self )
        for i = 1, #self.params.entities do
            meKnowledge:endMobilitySupport( self.params.entities[i] )
        end
    end,
}

-- **************************************************************************** 
-- Activate network
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.moveToward, skill.links.dismount, skill.nodes.HideInUndergroundNetwork, skill.nodes.CR },
    
   -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    inside = function( self )
        Feedback( self.feedbacks.done )
    end,
    done = function( self ) -- done from moveToward
        self.arrived = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        myself.alreadySend = false
        self.arrived = false
        self.IssuesNotInSameNetwork = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move inside the network.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        --Test si l'entrée et la sortie sont dans le même réseau dans le cas ou l'on veut faire mouvement via un reseau souterrain
        if self.params.exitUndergroundNetwork ~= NIL then
            if self.IssuesNotInSameNetwork then
                if not integration.enterAndExitInSameUndergroundNetwork( self.params.undergroundNetwork, self.params.exitUndergroundNetwork ) then
                    Activate( skill.nodes.CR, 1, { RC = eRC_NotInSameUndergroundNetwork } )
                    Feedback( self.feedbacks.failed )
                end
                self.IssuesNotInSameNetwork = false    
            end
        end
        
        if self.arrived then
            Activate( skill.links.dismount, 1 )
            if masalife.brain.knowledge.me.body:isDismounted() then
                Activate( skill.nodes.HideInUndergroundNetwork, 1, { undergroundNetwork = self.params.undergroundNetwork } )
            end
        end
        Activate( skill.links.moveToward, 1, { entities = { self.params.undergroundNetwork } } )
        self.arrived = false
    end
}

-- **************************************************************************** 
-- HideInUndergroundNetwork
-- ****************************************************************************
node "HideInUndergroundNetwork"
{
    feedbacks = { "inside" },

    activate = function( self )
    -- si le réseau n'est pas activé on arrete la mission. Sinon, on garde le skill activé pour le débarquement.
        if self.params.undergroundNetwork:EnterInIt() then
            meKnowledge:allowCarriers() -- les transporteurs ne rentrent pas
            Feedback( self.feedbacks.inside )
        end
    end
}

-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
rootnode
{
    connections = { skill.links.extract, skill.links.supply },

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.mustSupply = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params )
        local canExtract = function( self )
        	for _, stock in pairs( self.params.sourcePoints ) do
               if stock:isExtractPossible( self.params.resourceTypes ) then
                   return true
               end
            end
            return false
        end

        local canSupply = function( self )
            return self.params.supplyPoint:isSupplyPossible( self.params.resourceTypes )
        end

         self.mustSupply = canSupply( self )
         if not self.params.waitForStockAvailable and not self.mustSupply and not canExtract( self ) then
             Feedback( self.feedbacks.done, { reason = "mission completed" } )
         end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Extract then supply
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if meKnowledge.mustStopAndGotoGarage == true then
            meKnowledge.mustStopAndGotoGarage = nil
            Feedback( self.feedbacks.done, { reason = "stopped" } )
        end
        
    	if self.mustSupply == true then
           Activate( skill.links.supply, 1, { stock = self.params.supplyPoint, resourceTypes = self.params.resourceTypes } )
        else
            Activate( skill.links.extract, 1, { stocks = self.params.sourcePoints, resourceTypes = self.params.resourceTypes } )
    	end
    end
}

-- ****************************************************************************
-- TakeCover from elements.
-- self.params.entities: the safeguardable elements
-- self.params.positions: the safeguarding elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.TakeCoverAgainstElement },
    feedbacks = { "movementDone" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    movementDone = function( self, params, additionalParams )
        Feedback( self.feedbacks.movementDone, { position = additionalParams.position } )
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, safeguard from it
    -- --------------------------------------------------------------------------------
    activate = function( self )

        local Activate = Activate
        if self.params.positions == NIL then
            self.positions = sword.military.queries.tactical.getPositionsToCover[ "execute" ]( 
                { elementsToCoverFrom = self.params.entities, dynamic = true } )
        else
            self.positions =  self.params.positions
        end

        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.TakeCoverAgainstElement, entity:safetyPriority(),
                 { entity = entity, positions =  self.positions } )
        end
    end
}
-- ****************************************************************************
-- Take cover against a safeguardable element using MoveAndTakePosition skills
-- self.params.entity: the safeguardable element
-- self.params.positions: the safeguarding elements
-- ****************************************************************************
node "TakeCoverAgainstElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe },
    feedbacks = { "movementDone" },

    -- --------------------------------------------------------------------------------
    -- feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams ) -- from moveAndTakePosition skill
        Feedback( self.feedbacks.movementDone, { position = additionalParams.element } )
    end,

    -- --------------------------------------------------------------------------------
    -- Self protect and try to reach a nearby covered position with respond capability
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- Main observation effort on current safeguardable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Move toward best covered position
        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
                position:safetyEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

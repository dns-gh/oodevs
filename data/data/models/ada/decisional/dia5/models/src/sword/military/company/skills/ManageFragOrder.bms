-------------------------------------------------------------------------------
-- Skill: ManageFragOrder
-- @author MGD
-- @created 2010-12-28
--
-- This file is part of a MASA library or program.
-- Refer to the included end-user license agreement for restrictions.
--
-- Copyright (c) 2010 Mathématiques Appliquées SA (MASA)
-------------------------------------------------------------------------------

rootnode
{
    connections =
    {
        skill.nodes.SendFragOrder,
    },

    done = function( self ) end,
    
    activate = function( self )
        local Activate = Activate
        local oldEntities = myself.oldEntities
        local newEntities = integration.getEntitiesFromAutomatCommunication( meKnowledge, "none", true )

        -- Si un pion a été ajouté à l'automate et que celui-ci est embrayé
        if oldEntities and #oldEntities > 0 then
            if meKnowledge:isCommanding() then
                for i, entity in pairs( newEntities ) do
                    if not exists( oldEntities, entity ) then
                        meKnowledge:UpdateNewUnitInAutomat( entity ) -- Gestion et Mise à jour des ROE/Priorités à partir de l'automate
                    end
                end
            end
        end
        myself.oldEntities = newEntities -- on enregistre la liste pour le tic suivant
        
        for _, fragOrder in ipairs( self.params.fragOrders ) do
            if fragOrder:isROE() then
                integration.setCompanyROE( integration.getOrderConduiteChangerReglesEngagementParameter(fragOrder))
            end
            fragOrder:setAutomatFragOrder()
            if fragOrder:mustBePropagate() then
                local typeOrder = fragOrder.source:GetType()
                local send = typeOrder ~= "Rep_OrderConduite_Deboucher"
                local sendFirstEchelon = typeOrder == "Rep_OrderConduite_AttendreSePoster"
                local entities = self.params.entities
                local entitiesToSwitchOffRadio = {}
                if typeOrder == "Rep_OrderConduite_ArreterSilenceRadio" then -- Il faut enlever le silence radio à tous les pions
                    local automatkn = CreateKnowledge( sword.military.world.Company, DEC_GetAutomate( entities[1].source ) ) -- les pions passés en paramètre sont forcément dans le même automate pour cet prdre de conduite
                    entitiesToSwitchOffRadio = integration.getEntitiesFromAutomat( automatkn, "none", true )
                    entities = entitiesToSwitchOffRadio
                end
                for _, entity in pairs( entities ) do
                    local echelon =  F_Pion_GeteEtatEchelon( entity.source )
                    if sendFirstEchelon then
                        if echelon == eEtatEchelon_First then
                            Activate( skill.nodes.SendFragOrder, 1, { fragOrder = fragOrder, entity = entity } )
                        end
                    elseif send or echelon ~= eEtatEchelon_Scout then
                       Activate( skill.nodes.SendFragOrder, 1, { fragOrder = fragOrder, entity = entity } )
                    end
                end
            end
        end
        
    end
}

node "SendFragOrder"
{
    select = function( self )
        meKnowledge:sendFragOrder( self.params.entity, self.params.fragOrder  )
    end
}
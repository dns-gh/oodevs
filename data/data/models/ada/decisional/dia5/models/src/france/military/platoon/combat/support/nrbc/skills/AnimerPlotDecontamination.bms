-- **************************************************************************** 
-- AnimerPlotDecontamination.
-- self.params.position: the position where unit need to animate.
-- ****************************************************************************
rootnode 
{
    connections = { skill.nodes.AdoptAnimatingDecontaminatePosture, skill.links.moveToward, skill.links.dismount, skill.links.manageFragOrder },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self ) -- done from moveToward
        self.arrived = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- MoveToward position and adopt a filter posture
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        local fragOrder = CreateFragOrder("Rep_OrderConduite_MettreTenueNBC")
        local fragOrderKn = CreateKnowledge( sword.military.world.FragOrder, fragOrder )       
            
        Activate( skill.links.manageFragOrder, 1, { fragOrders = { fragOrderKn } } )

        if self.arrived then
            if self.params.position:isReached() then
                if meKnowledge:isPosted() then
                    Activate( skill.nodes.AdoptAnimatingDecontaminatePosture, 1, 
                            { position = self.params.position } )
                end
            else -- Objective not reached, don't build decontaminating
                meKnowledge:RC( eRC_ImpossibleAtteindreObjectif )
                Feedback( self.feedbacks.failed )
            end
        end
        Activate( skill.links.moveToward, 1, { entities = { self.params.position } } )
        self.arrived = false
    end,

}

-- **************************************************************************** 
-- AdoptAnimatingPosture.
-- self.params.position: the position to animate
-- ****************************************************************************
node "AdoptAnimatingDecontaminatePosture"
{    
    select = function( self )
        meKnowledge:adoptAnimatingDecontaminatePosture( self.params.position )
    end
}
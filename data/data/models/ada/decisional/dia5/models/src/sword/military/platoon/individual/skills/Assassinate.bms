-- **************************************************************************** 
-- Assassinate officers within a unit.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Assassinate, skill.nodes.CR_TargetInvalid },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    commited = function( self ) -- attack is commited
        Feedback( self.feedbacks.done )
    end,
    done = function( self ) --moveToward feedback
        self.arrived = true
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if not self.params.unit:isValid() then -- Check if unit is valid
            Activate( skill.nodes.CR_TargetInvalid, 1, { RC = eRC_InvalidTarget } )
            Feedback( self.feedbacks.done )
            return
        end    
        Activate( skill.links.moveToward, 1, { entities = { self.params.unit } } )
        if self.arrived then
            Activate( skill.nodes.Assassinate, 1, { unit = self.params.unit } )
        end
        self.arrived = false
    end,
}

-- **************************************************************************** 
-- Simple action to assassinate officers within a unit
-- ****************************************************************************
node "Assassinate"
{
    feedbacks = { "commited" },

    select = function( self )
        if self.params.unit:killOfficersWithin() then
            Feedback( self.feedbacks.commited )
        end
    end
}

-- ****************************************************************************
-- CR
-- ****************************************************************************
node "CR_TargetInvalid"
{
    create = function( self )
        meKnowledge:RC( eRC_InvalidTarget )
    end
}
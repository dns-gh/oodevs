rootnode {

    connections = { skill.links.intercepterMissile, skill.links.deploy },
    
    done = function(self)
        self.deployed = true
    end,

    create = function (self )
        self.direction = queriesgetMissionDirection[ "execute" ]()
        self.deployed = false
        meKnowledge:setROE( eRoeStateRestrictedFire )
    end,

    activate = function (self )
        local Activate = Activate
        
        if self.deployed then                     
            self.ennemies = france.military.platoon.combat.support.art.queries.getFlyingEnemies[ "execute" ]()            
            for i=1, #self.ennemies do
                distance = integration.distance( meKnowledge, self.ennemies[i] )
                if self.ennemies[i]:canRespond() then
                if self.params.typeDeploiement == eEtatDeploiement_directionnel then
                    if integration.connaissanceAgentEstAPorteDeCapteurDansCone( self.ennemies[i], self.direction[1], MISTRAL_ANGLE_OUVERTURE_DIRECTIONEL ) then
                       Activate( skill.links.intercepterMissile, 1, { enemy = self.ennemies[i], percentageEquipement = 1, ph = self.params.ph, projectileSpeed = M_MODELE_VITESSE_MISSILE_MISTRAL } )
                    else
                       Activate( skill.links.intercepterMissile, 1, { enemy = self.ennemies[i], percentageEquipement = 0.17, ph = self.params.ph, projectileSpeed = M_MODELE_VITESSE_MISSILE_MISTRAL } )
                    end
                elseif self.params.typeDeploiement == eEtatDeploiement_omnidirectionnel then
                    if( distance >= 3000 ) then
                       Activate( skill.links.intercepterMissile, 1, { enemy = self.ennemies[i], percentageEquipement = 0.34, ph = self.params.ph, projectileSpeed = M_MODELE_VITESSE_MISSILE_MISTRAL } )
                    else
                       Activate( skill.links.intercepterMissile, 1, { enemy = self.ennemies[i], percentageEquipement = 0.67, ph = self.params.ph, projectileSpeed = M_MODELE_VITESSE_MISSILE_MISTRAL } )
                    end
                end
              end
            end
        end
        
        Activate( skill.links.deploy, 1, { objective = self.params.position } )
        
        self.deployed = false
    end,

}
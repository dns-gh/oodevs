rootnode
{
    connections = { skill.links.moveToward, skill.nodes.EquiperSite, skill.nodes.RC },

    done = function( self )
        self.arrived = true
    end,

    equiped = function( self )
        meKnowledge:sendStopNeededReinforcement( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge)
        Feedback( self.feedbacks.done )
        self.bridgeBuilt = true
    end,

    create = function( self )
        self.arrived = false
        self.bridgeBuilt = false
        if self.params.typePontage == 0 then
            self.typePont = eTypeObjectPontFlottantContinu
        else
            self.typePont = eTypeObjectPontFlottantDiscontinu
        end
    end,

    activate = function( self )
        local Activate = Activate
        local CreateKnowledge = CreateKnowledge
        local emptyTable = emptyTable
        if not self.params.siteFranchissement:isReconnoitred() then
            Activate( skill.nodes.RC, 1, { RC = eRC_CrossingSiteNotRecon } )
            return
        end
        if self.arrived and not self.bridgeBuilt then
            Activate( skill.nodes.EquiperSite, 1, { site = self.params.siteFranchissement, typePont = self.typePont } )
        end
        local positions = self.params.siteFranchissement:getPositions()
        local positionsKn = {}
        for i = 1, #positions do
            positionsKn[ #positionsKn + 1 ] = CreateKnowledge( world_elements.Point, positions[i] )
        end
        Activate( skill.links.moveToward, 1, { entities = positionsKn } )
        self.arrived = false
    end,

    destroy = function( self )
        self.params.siteFranchissement:unEquipIt()
    end,
}

node "EquiperSite"
{
    connections = { skill.nodes.RC },

    feedbacks = { "equiped" },

    activate = function( self )
        if not self.params.site:canEquipIt( self.params.typePont ) then
            integration.setNeedReinforcement( meKnowledge, "build", self.params.site, false )
            Activate( skill.nodes.RC, 1, { RC = eRC_ConstructionObjetImpossible } )
            return
        end
        if self.params.site:equipIt( self.params.typePont ) then
            Feedback( self.feedbacks.equiped )
        end
    end,
}

-- noeud permettant de renvoyer un compte rendu
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
-- ****************************************************************************
-- Unload elements
-- self.params.entities: the loadable elements
-- self.params.positions: loading elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.UnloadElement },

    done = function( self ) end,

    -- --------------------------------------------------------------------------------
    -- Main effect is reached, all the targets are neutralized
    -- --------------------------------------------------------------------------------
    unloaded = function( self, params, additionalParams )
        self.targets[ additionalParams.element ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done ) -- the job is done, all targets are unloaded
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Store targets in a table for feedbacks informations
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Try to unload each elements.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.UnloadElement, entity:unloadPriority(),
                { entity = entity, positions = self.params.positions } )
        end
    end
}

-- ****************************************************************************
-- Unload element
-- self.params.entity: the loadable element
-- self.params.positions: loading elements
-- ****************************************************************************
node "UnloadElement"
{
    connections =
    {
        skill.links.moveAndTakePosition,
        skill.links.observe,
        skill.nodes.Unload
    },

    feedbacks = { "unloaded" },

    -- --------------------------------------------------------------------------------
    -- Arrived on a loading position
    -- --------------------------------------------------------------------------------
    done = function( self )  -- feedbackfrom moveAndTakePosition
        self.arrived = true
    end,
    unloaded = function( self, params, additionalParams )
        Feedback( self.feedbacks.unloaded, additionalParams )
    end,

    -- --------------------------------------------------------------------------------
    -- Initialization of the query returning the reaching positions for the objective
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
    end,

    -- --------------------------------------------------------------------------------
    -- Try to reach a (un)loading position
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- If possible, unload from vehicle
        if self.params.entity:canUnloadIt() and self.arrived then
            Activate( skill.nodes.Unload, 1, { entity = self.params.entity } )
        end

        -- Moving toward unloading positions
        for _, position in pairs( self.params.positions ) do
           Activate( skill.links.moveAndTakePosition,
               position:unloadEfficiency( self.params.entity ), { entity = position } )
        end
        self.arrived = false
    end
}

-- ****************************************************************************
-- Unload
-- self.params.entity: the loadable element
-- ****************************************************************************
node "Unload"
{
    feedbacks = { "unloaded" },

    create = function( self ) -- no select because no load capacity here
        if self.params.entity:unloadIt() then
            Feedback( self.feedbacks.unloaded, { element = self.params.entity } )
        end
    end
}

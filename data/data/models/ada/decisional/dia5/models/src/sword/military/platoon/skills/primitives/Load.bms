-- ****************************************************************************
-- Load elements
-- self.params.entities: the loadable elements
-- self.params.entities: the loading elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.LoadElement },

    done = function( self ) end,

    -- --------------------------------------------------------------------------------
    -- Main effect is reached, all the targets are neutralized
    -- --------------------------------------------------------------------------------
    loaded = function( self, params, additionalParams )
        self.targets[ additionalParams.element ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done ) -- the job is done, all targets are loaded
        end
    end,
    -- --------------------------------------------------------------------------------
    -- Store targets in a table for feedbacks informations
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
        self.positions = sword.military.queries.tactical.getPositionsToLoad[ "execute" ]({elementsToLoad = self.params.entities})
    end,

    -- --------------------------------------------------------------------------------
    -- Try to load each elements.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.LoadElement, entity:loadPriority(),
                { entity = entity, positions = self.positions } )
        end
    end
}

-- ****************************************************************************
-- Load
-- self.params.entity: the loadable element
-- ****************************************************************************
node "LoadElement"
{
    connections =
    {
        skill.links.moveAndTakePosition,
        skill.links.observe,
        skill.nodes.Load,
        skill.nodes.RC
    },

    feedbacks = { "loaded" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams ) -- feedbackfrom moveAndTakePosition
        self.arrived = true
    end,
    loaded = function( self, params, additionalParams ) -- Main effect is done: entity is loaded
        Feedback( self.feedbacks.loaded, additionalParams )
    end,

    -- --------------------------------------------------------------------------------
    -- Initialization of the query returning the loading positions for the objective
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
    end,

    -- --------------------------------------------------------------------------------
    -- Try to reach a loading position
    -- --------------------------------------------------------------------------------
    activate = function( self )
        if self.params.entity:isLoaded() then
            return
        end
        
        if not self.params.entity:isUnitCaptured( meKnowledge ) then
            Activate( skill.nodes.RC, 1, { RC = eRC_UnitNotCaptured } )
            return
        end

        -- Main observation effort on current loadable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Load the element if conditions are OK.
        if self.params.entity:canLoadIt() and self.arrived then
            Activate( skill.nodes.Load, 1, { entity = self.params.entity } )
        end

        -- Moving toward a destroynig positions
        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
                position:loadEfficiency( self.params.entity ), { entity = position } )
        end
        self.arrived = false
    end
}

-- ****************************************************************************
-- Load
-- self.params.entity: the loadable element
-- ****************************************************************************
node "Load"
{
    feedbacks = { "loaded" },

    create = function( self )  -- no select because no load capacity here
        if self.params.entity:loadIt() then
            Feedback( self.feedbacks.loaded, { element = self.params.entity } )
        end
    end
}

node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}

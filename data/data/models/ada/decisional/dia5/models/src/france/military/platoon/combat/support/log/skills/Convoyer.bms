rootnode {
connections = { skill.nodes.RC, skill.links.moveAlong },

done = function( self, params, additionalParams ) -- moveToward
    self.arrived = true
end,

create = function( self )
    self.arrived = false
    self.fragOrderReceived = false
    self.sendCR = false
end,

 activate = function( self )
    self.ePhase = integration.getActionCouranteConvoi()

    if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_PoursuivreConvoi" )  then
        self.fragOrderReceived = true
    end
    
    local executeFragOrder = self.fragOrderReceived  or F_Pion_GetpionEnEscorte( meKnowledge.source ) 
    
    if self.ePhase == eConvoyerAction_MoveToSupplier or self.ePhase == eConvoyerAction_MoveToSupplyRecipient then
        self.sendCR = true
    end
    
    -- Action de chargement
    if self.ePhase == eConvoyerAction_Load then
        self.arrived = false
        Activate(skill.nodes.RC, 1, { RC = eRC_Convoi_ChargementEnCours, } )
    -- Action de déchargement
    elseif self.ePhase == eConvoyerAction_Unload  then
        self.arrived = false
        Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DechargementEnCours, } )
    -- Action de déplacement vers le ravitailleur
    elseif self.ePhase == eConvoyerAction_MoveToSupplier and executeFragOrder then
        Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DeplacementVersPointChargement, } )
        self.ravitailleur = CreateKnowledge( sword.military.world.PlatoonAlly, integration.getRavitailleur() )
        Activate( skill.links.moveAlong, 1, { entities = { self.ravitailleur:getMyPosition()} } )
        if( self.arrived ) then
            self.arrived = false
            self.fragOrderReceived = false
            integration.deplacementVersRavitailleurEffectue()
        end
    -- Action de déplacement vers le destinataire du convoi
     elseif self.ePhase == eConvoyerAction_MoveToSupplyRecipient and executeFragOrder then     
        Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_DeplacementVersPointDechargement, } )
        self.destinataireCourant = CreateKnowledge( sword.military.world.PlatoonAlly, integration.getDestinataireCourant() )
        Activate( skill.links.moveAlong, 1, { entities = { self.destinataireCourant:getMyPosition()} } )
        if( self.arrived ) then
            self.arrived = false
            self.fragOrderReceived = false
            integration.deplacementVersDestinataireEffectue()
        end
    -- Action de déplacement vers le transporteur qui a prêté les véhicules
     elseif self.ePhase == eConvoyerAction_MoveToTransportersProvider then
        Activate( skill.nodes.RC, 1, { RC = eRC_Convoi_Retour, } )
        self.transporteur = CreateKnowledge( sword.military.world.PlatoonAlly, integration.getTransporter() )
        Activate( skill.links.moveAlong, 1, { entities = { self.transporteur:getMyPosition()} } )
        if( self.arrived ) then
            self.arrived = false
            integration.deplacementVersTransporteurEffectue()
        end
     end

    if self.sendCR then
        Activate( skill.nodes.RC, 1, { RC = eRC_AttenteOrdrePoursuivreConvoi, } )
        self.sendCR = false
    end

 end,
 
 destroy = function( self )
    integration.finMissionConvoi()
 end,
}

-- noeud permettant de renvoyer un compte rendu
node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
-- **************************************************************************** 
-- React to lima
-- Decide to stop on ligne issued as parameters and to sent message
-- $$$ MIA TODO A revoir
-- ****************************************************************************

rootnode
{
    connections = 
    { 
        skill.nodes.ActionOnLima, 
        skill.nodes.TakeUpPosition, 
        skill.nodes.CR_OnLima, skill.nodes.CR_LeaveLima, 
        skill.nodes.CR_WaitOrder, skill.links.manageFragOrder
    },

    done = function( self ) end,
    
    create = function( self )
        self.limas = {}
        self.limasFromQuery = {}
    end,

    -- -------------------------------------------------------------------------------- 
    -- Wait on ligne 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        
        self.limasFromQuery = sword.military.queries.miscellaneous.getLimaOnPath[ "execute" ]()
        self.limas = fusionList( self.limasFromQuery, self.limas )

        for _, lima in pairs( self.limas ) do
            Activate( skill.nodes.CR_OnLima, 1, { lima = lima } )
            Activate( skill.nodes.ActionOnLima, 1, { lima = lima } )
            if lima:isCoordinationLigne() and not lima:isCoordinationFinish() then
                Activate( skill.nodes.CR_WaitOrder, 1, { lima = lima }  )
                Activate( skill.nodes.TakeUpPosition, 100, { lima = lima } )
            else
                Activate( skill.nodes.CR_LeaveLima, 1, { lima = lima } )
                lima:clean()
                removeFromList( lima, self.limas )
            end
            if lima:getLimaType() == eTypeLima_LCA then
                local fragOrder = CreateFragOrder("Rep_OrderConduite_ChangerAmbiance")
                integration.setOrderConduiteChangerAmbiance( fragOrder, eEtatAmbiance_Surete )
                local fragOrderKn = CreateKnowledge( sword.military.world.FragOrder, fragOrder )
                Activate( skill.links.manageFragOrder, 1, { fragOrders = { fragOrderKn } } )
            end
        end
    end
}

-- **************************************************************************** 
-- $$$ MIA TODO A revoir
-- ****************************************************************************
node "ActionOnLima"
{
    select = function( self )
        self.params.lima:actionOnIt()
    end
}

-- **************************************************************************** 
-- $$$ MIA TODO A revoir
-- ****************************************************************************
node "TakeUpPosition"
{
    acquire = { [ skill.resources.move ] = 1 };

    select = function( self )
        self.params.lima:takeUpPosition()
    end
}

-- **************************************************************************** 
-- $$$ MIA TODO A revoir
-- ****************************************************************************
node "CR_OnLima"
{
    create = function( self )
        meKnowledge:RC( eRC_SurLima, self.params.lima:getLimaType() )
    end
}
node "CR_LeaveLima"
{
    create = function( self )
        meKnowledge:RC( eRC_LeaveLima, self.params.lima:getLimaType() )
    end
}
node "CR_WaitOrder"
{
    create = function( self )
        meKnowledge:sendReport( integration.GetSuperiorKnowledge( meKnowledge ), self.params.lima:getLimaType(), true )
    end,
    
    destroy = function( self )
        meKnowledge:sendReport( integration.GetSuperiorKnowledge( meKnowledge ), self.params.lima:getLimaType(), false )
    end
}

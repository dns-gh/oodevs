rootnode {

    connections = { skill.links.moveTo, skill.links.dismount, skill.links.orienterCapteur, skill.nodes.AcquireIntelligence },
    
    done = function(self) -- frome moveTo
        if not self.arrivedDebarquement and self.params.positionDebarquement ~= NIL and not meKnowledge:isDismounted() and meKnowledge:canDismount() then -- on a atteint la position de débarquement
            self.arrivedDebarquement = true
        else -- on a atteint la position d'installation
            self.arrived = true
        end
    end,
    
    create = function(self)
        self.arrivedDebarquement = false
        self.arrived = false
        if meKnowledge:isDismounted() then
            self.arrivedDebarquement = true
        end
    end,

    activate = function (self )
        local Activate = Activate
        if not self.arrivedDebarquement and self.params.positionDebarquement ~= NIL and not meKnowledge:isDismounted() and meKnowledge:canDismount() then
              Activate( skill.links.moveTo, 1, { entities = {self.params.positionDebarquement} })
        else
            if self.arrived then
                if not meKnowledge:isDismounted() and meKnowledge:canDismount() then
                    Activate( skill.links.dismount, 1 )
                else
                    Activate( skill.links.orienterCapteur, 1, { zone = self.params.zone } )
                end
            else
                if self.arrivedDebarquement then -- si on a atteint la position de débarquement alors on veut rester débarqué
                    Activate( skill.links.dismount, 1 )
                end
                Activate( skill.links.moveTo, 1, { entities = {self.params.position}, infiltrationMode = true } )
            end
        end
    end,
}

node "AcquireIntelligence"
{
    select = function( self )
        self.params.area:getIntelligence()
    end,
}
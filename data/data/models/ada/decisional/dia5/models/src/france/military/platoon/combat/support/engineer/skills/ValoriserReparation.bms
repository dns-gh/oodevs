rootnode
{
    connections = { skill.nodes.ImproveElement };

    done = function( self, params, additionnalParams )
        Feedback( self.feedbacks.elementImproved, { element = additionalParams.element } )
        self.targets[ params.entity ] = nil
        if not next( self.targets ) then
            Feedback( self.feedbacks.done )
        end
    end,

    failed = function( self, params, additionalParams )
        Feedback( self.feedbacks.elementFailed, { element = additionalParams.element, reason = additionalParams.reason } )
    end,
    
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            if entity:canBeImproved() then
                self.targets[ entity ] = true
            else
                Feedback( self.feedbacks.elementNotImprovable, { element = entity } )
            end
        end
    end,

    activate = function( self )
        local Activate = Activate
        for entity in pairs( self.targets ) do
            Activate( skill.nodes.ImproveElement, entity:improvePriority(), { entity = entity } )
        end
    end
}

node "ImproveElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe, skill.links.dismount, skill.nodes.Improve },

    feedbacks = { "cancelled" },

    done = function( self, params, additionalParams )  -- feedbackfrom moveAndTakePosition
        self.arrived = true
    end,
    
    create = function( self )
        self.arrived = false
    end,

    activate = function( self )
        local Activate = Activate

        if self.params.entity:isImproved() then
            Feedback( self.feedbacks.done )
            return
        end 

        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        if self.arrived then
            if not self.params.entity:improvingDotation() then
                Feedback( self.feedbacks.failed, { element = self.params.entity, reason = eRC_ConstructionObjetImpossible } )
            elseif not self.params.entity:canImproveIt() then
                Feedback( self.feedbacks.failed, { element = self.params.entity, reason = eRC_PasDotationConstructionObjet } )
            else
                Activate( skill.links.dismount, 1 )
                Activate( skill.nodes.Improve, 1, { entity = self.params.entity } )
            end
        end

        -- Moving toward improvement positions, same as build
        for _, position in pairs ( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition, position:buildEfficiency( self.params.entity ), { entity = position, pathType = eTypeItiDeminage } )
        end
        self.arrived = false
    end
}

node "Improve"
{
    feedbacks = { "done" };

    acquire = { [ skill.resources.buildCapacity ] = 1 };

    select = function( self )
        self.params.entity:improveIt()
    end
}
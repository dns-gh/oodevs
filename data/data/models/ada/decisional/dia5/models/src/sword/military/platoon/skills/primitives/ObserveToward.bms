-- ****************************************************************************
-- Observe toward observable entities
-- self.params.entity: the observable elements
-- self.params.area: the observing elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.ObserveTowardElement, skill.links.indirectFire, skill.links.dismount, skill.nodes.CR_ReceiveFireOrder },

    done = function( self, params, additionnalParams )
        if additionnalParams.state == "hasFire" then
            self.hasFire = true
            self.order = nil
        elseif additionnalParams.state == "no ammo" or
               additionnalParams.state == "forbidden ammo" or
               additionnalParams.state == "out of range" or
               additionnalParams.state == "impossible to fire" or
               additionnalParams.state == "no Launcher" or
               additionnalParams.state == "target not illuminated" then
            self.order = nil
        end
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, try to observe it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.ObserveTowardElement, entity:observationPriority(),
                { entity = entity, positions = self.params.positions } )
        end
        
        if not self.order then -- sert pour appliquer les feux
            self.order = integration.query.getFirstFireOrder()
        end
        if self.order then
            if not meKnowledge:isDismounted() and meKnowledge:canDismount() then
                Activate( skill.links.dismount, 1 )
            end
            
            if meKnowledge:isDismounted() then
                integration.sendfireAvailable(true)
                Activate( skill.nodes.CR_ReceiveFireOrder, 1 )
                Activate( skill.links.indirectFire, 1, self.order )
            end
        end
    end
}
-- ****************************************************************************
-- Straight movement toward the observing element
-- ****************************************************************************
node "ObserveTowardElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe },

    -- --------------------------------------------------------------------------------
    -- Move toward the observing elements using the skill MoveAndTakePosition
    -- --------------------------------------------------------------------------------
    activate = function( self )
        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Moving toward mounting positions
        for _, position in pairs ( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
                position:observationEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

node "CR_ReceiveFireOrder"
{ 
    create = function( self )
        meKnowledge:RC( eRC_ReceptionOrdreDeFeu )
    end
}

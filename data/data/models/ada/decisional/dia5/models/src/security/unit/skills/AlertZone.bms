-- **************************************************************************** 
-- Alert a zone.
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveTo };

    -- -------------------------------------------------------------------------------- 
    -- If all objectives has been reached, begin the node node once 
    -- again.
    -- --------------------------------------------------------------------------------
    done = function( self, params )
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.subZones then
            DEC_ModulationVitesseMax( 1.0 )
            meKnowledge:RC( eRC_ZoneAlerted )
            Feedback( self.feedbacks.done, { reason = "alerted", zone = self.params.zone } )
        else
            if not self.isArrivedOnZone then
                meKnowledge:RC( eRC_ArrivedOnAlertZone )
                self.isArrivedOnZone = true
            end
            DEC_ModulationVitesseMax( 0.5 )
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Node begins, get positions in zone
    -- --------------------------------------------------------------------------------
    create = function( self )
        local subLocalisations = DEC_Geometry_RecursiveSplitLocalisationSurface( self.params.zone.source, 1000000 ).first
        self.subZones = {}
--        local debugPoints = {}
        for _, subLocalisation in pairs( subLocalisations ) do
            local pos = DEC_Geometrie_CalculerBarycentreLocalisation( subLocalisation )
            --debugPoints[ #debugPoints + 1 ] = pos
            local positionKnowledge = CreateKnowledge( sword.military.world.Point, pos )
            self.subZones[ #self.subZones + 1 ] = { positionKnowledge = positionKnowledge, localisation = subLocalisation }
        end
        --DEC_DebugAffichePoints( debugPoints )
        if #self.subZones == 0 then
            Feedback( self.feedbacks.done, { reason = "alerted", zone = self.params.zone } )
        end
        self.nextTargetIndex = 1
        self.isArrivedOnZone = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- Select next element in objectives and move toward it. 
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        if meKnowledge.mustStopAndGotoGarage == true then
            meKnowledge.mustStopAndGotoGarage = nil
            Feedback( self.feedbacks.done, { reason = "stopped", zone = self.params.zone } )
        end

        local subZone = self.subZones[ self.nextTargetIndex ]
        DEC_Agent_Alert( subZone.localisation )
        Activate( skill.links.moveTo, 1, { element = subZone.positionKnowledge } )
    end
}

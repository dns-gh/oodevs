-- **************************************************************************** 
-- Intercept
-- ****************************************************************************
rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Control },
    
    -- Le pion est arrivé à sa destination
    done = function( self, params, additionalParams )
        self.arrived = true
    end,

    create = function ( self )
        self.arrived = false
        if self.params.destroyingPositions and self.params.destroyingPositions ~= NIL then
            self.positionsToIntercept = self.params.destroyingPositions
        else
            self.positionsToIntercept = queries_positions.getPositionsToIntercept[ "execute" ]( { objectives = { self.params.interceptionObjective }, dynamic = true } )
        end
    end,
    
    activate = function ( self )
      local Activate = Activate
      if self.arrived then
        Activate( skill.nodes.Control, 1, { entity  = self.params.interceptionObjective } )
      end

      Activate( skill.links.moveToward, 1, { entities = self.positionsToIntercept } )
      self.arrived = false
    end,
}

-- **************************************************************************** 
-- Simple action of controling an element
-- **************************************************************************** 
node "Control"
{
    select = function( self )
        self.params.entity:controlIt() 
    end
}
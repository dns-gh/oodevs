-- **********************************************************************************************
-- skill CoordinationManager: manage the distance inter or intra echelon of units
-- self.params.enititesFromEchelon: units from echelon will be synchronized 
-- self.params.progressionInAOR: progression of all units (less value shows that unit is late)
-- self.params.distance: distance to not go over (for inter or intra echelon)
-- **********************************************************************************************
rootnode {

    connections = { skill.nodes.SlowDown },

    done = function( self ) end,

    activate = function( self )
        local Activate = Activate
        local current
        self.last = math.huge
        -- self.last: the less value in advancement of all units (latest entity)
        for _, entity in pairs( self.params.enititesFromEchelon ) do
            if entity:isOperational() then
                current = self.params.progressionInAOR[ entity ]
                if current < self.last then
                    self.last = current
                end
            end
        end

        -- automate sends a wait activation to all units who are gone through the distance to last unit
        for _, entity in pairs( self.params.enititesFromEchelon ) do
            if entity:isOperational() then
                current = self.params.progressionInAOR[ entity ]
                if current - self.last  > self.params.distance then
                    Activate( skill.nodes.SlowDown, 1, { entity = entity } )
                end
            end
        end
    end
}

-- ****************************************************************************************** 
-- node SlowDown: unit must slow down when node created or continue its moving when node destroyed
-- self.params.entity: unit to slow down or continue moving
-- ******************************************************************************************

node "SlowDown"
{
    select = function( self )
        meKnowledge:slowDownSyncronisation( self.params.entity )
    end,
    
    deselect = function( self )
        meKnowledge:continueSyncronisation( self.params.entity )
    end,
}

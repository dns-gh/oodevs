rootnode
{
    connections = { skill.links.moveToward, skill.nodes.Report, skill.nodes.WaitTransport },
    
    done = function( self )
        self.arrived = true
    end,
    
    transported = function( self )
        if self.delay then -- il faut retarder le feedback.done d'un tick pour que la mission transporter fonctionne
            Feedback( self.feedbacks.done )
        else
            self.delay = true
        end
    end,
    
    create = function( self )
        self.arrived = false
    end,
    
    activate = function( self )
        local Activate = Activate
        local emptyTable = emptyTable
        if self.arrived then
            Activate( skill.nodes.Report, 1, { RC = eRC_EnAttenteTransporteurs } )
        end
        Activate( skill.nodes.WaitTransport, 1, emptyTable )
        Activate( skill.links.moveToward, 1, { entities = { self.params.position } } )
        self.arrived = false
    end,
}

node "Report"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}

node "WaitTransport"
{
    feedbacks = { "transported" },
    
    activate = function( self )
        if meKnowledge:isLoaded() then
            Feedback( self.feedbacks.transported )
        end
    end,
}
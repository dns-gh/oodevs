-- **************************************************************************** 
-- ControlCrowd.
-- $$$ MIA TODO à nettoyer.
-- ****************************************************************************
local emptyTable = emptyTable
rootnode
{
    feedbacks = { "failed" },

    connections = { skill.links.control, skill.links.moveToward,
                    skill.nodes.Reports },

    done = function( self ) end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
      self.prevDomination = self.params.crowd:getDomination()
      self.rTempsDebut = DEC_TempsSim()
      self.delaiDepasse = false
      self.bDerniereChance = false
      self.isSelfProtecting = false
    end,

    -- --------------------------------------------------------------------------------
    -- $$$ MIA TODO Pas de francais
    -- Essaie de dominer la foule pour la controler. Si la domination echoue, l'agent
    -- décide de se sauvegarder.
    -- Le feedback done est renvoyé lorsqu'il est impossible de dominaer la foule
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        self.delai = skill.modifiers.delai * 60 -- minutes

        -- on checke au bout de 15 minutes
        if self.delaiDepasse then
            local domination = self.params.crowd:getDomination()
            --la domination doit avoir diminuée au moins de 20%
            if domination < ( self.prevDomination - 0.2 ) or domination == 0 then
                self.prevDomination = domination
                self.delaiDepasse = false
                self.rTempsDebut = DEC_TempsSim()
            elseif not self.bDerniereChance then
                self.bDerniereChance = true
                self.prevDomination = domination
                self.delaiDepasse = false
                self.rTempsDebut = DEC_TempsSim()
                Activate( skill.nodes.Reports, 1, { report = eRC_SituationDifficilementTenableFaceAPopulation } )
            end
         end
        if self.delaiDepasse then
            -- on se selfprotect
            if not self.isSelfProtecting then
                Activate( skill.nodes.Reports, 1, { report = eRC_DecrochageFaceAPopulation } )
                self.positionSurete = integration.getSafetyPositionFromCrowd( 
                        self.params.crowd, skill.modifiers.distanceEsquivePopulation )
                if self.positionSurete then 
                DEC_Trace("on bouge vers la pos de sureté")
                    StartActivate( skill.links.moveToward, 1, { entities  = { self.positionSurete } } )
                    self.isSelfProtecting = true
                end
            end
            DEC_Trace("on renvoi failed")
            Feedback( self.feedbacks.failed, { positionSurete = self.positionSurete } )
        else  -- move to crowd and try to control it
            Activate( skill.links.control, 1, { objective  = self.params.crowd, dontMove = self.params.dontMove } )
        end

        if self.params.crowd:isDominated() then-- main effect is reached, crowd in controled
            Activate( skill.nodes.Reports, 1, { report = eRC_PopulationTemporairementControlee } )
            Feedback( self.feedbacks.done )
        end

        if self.delai <=  DEC_TempsSim() - self.rTempsDebut then
            self.delaiDepasse = true
        end
    end
}

-- **************************************************************************** 
-- $$$ MIA TODO à nettoyer.Mettre les CRs dans l'intégration si possible
-- $$$ MIA TODO Pas de francais!
-- ****************************************************************************
node "Reports"
{
    create = function( self )
        meKnowledge:RC( self.params.report )
    end
}

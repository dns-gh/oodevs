-- ****************************************************************************
-- Neutralize elements.
-- self.params.entities: the neutralizable elements
-- self.params.positions: the neutralizing elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.NeutralizeElement };

    -- --------------------------------------------------------------------------------
    -- Main effect is reached, all the targets are neutralized
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams )
        if additionalParams.reason == "neutralized" then
            self.targets[ additionalParams.element ] = nil
            if not next( self.targets ) then
                Feedback( self.feedbacks.done ) -- the job is done, all targets are neutralized
            end
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Store targets in a table for feedbacks informations
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.targets = {}
        for _, entity in pairs( self.params.entities ) do
            self.targets[ entity ] = true
        end
    end,
    -- --------------------------------------------------------------------------------
    -- Try to neutralize each element
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        local positions
        if self.params.positions == NIL then
            positions = sword.military.queries.tactical.getPositionsToDestroy[ "execute" ]( { elementsToDestroy = self.params.entities, dynamic = true } )
        else
            positions = self.params.positions
        end

        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.NeutralizeElement, entity:neutralizationPriority(),
                { entity = entity, positions = positions } )
        end
    end
}
-- ****************************************************************************
-- NeutralyzeElement using MoveAndTakePosition skills
-- self.params.entity: the neutralizable element
-- self.params.positions: the neutralizing elements
-- ****************************************************************************
node "NeutralizeElement"
{
    connections =
    {
        skill.links.moveAndTakePosition,
        skill.nodes.Neutralize,
        skill.links.observe
    },

    -- --------------------------------------------------------------------------------
    -- Try to reach a neutrlaizing position and to neutralize the element.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- when the entity is not operationnal send a feedback containing the entity
        if not self.params.entity:isOperational() then
            Feedback( self.feedbacks.done, { reason = "neutralized", element = self.params.entity } )
            return
        end

        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Neutralize the element if conditions are OK (ROE etc.)
        if self.params.entity:canNeutralizeIt() then
            Activate( skill.nodes.Neutralize, 1, { entity = self.params.entity } )
        end

        -- Moving toward neutralizing positions
        for _, position in pairs( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
            position:neutralizationEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

-- ****************************************************************************
-- Neutralyze the element
-- ****************************************************************************
node "Neutralize"
{
    acquire = { [ skill.resources.engage ] = 1 },

    select = function( self )
        self.params.entity:neutralizeIt()
    end
}

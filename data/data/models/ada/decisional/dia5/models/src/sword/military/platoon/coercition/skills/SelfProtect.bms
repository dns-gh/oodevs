-- **************************************************************************** 
-- SelfProtect.
-- self.params.entities: the safeguardable elements
-- self.params.positions: the safeguardable elements
-- ****************************************************************************
rootnode
{
    connections = 
    {
        skill.links.takeCover, 
        skill.links.dismount,
        skill.links.respond,
        skill.nodes.CoverAttitude,
        skill.nodes.SafetyAttitude
    },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    movementDone = function( self, params, additionalParams )
        self.needToTakeCover = false
    end,


    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        myself.speedModulation = myself.speedModulation or {}
        self.detected = false
        self.needToTakeCover = false
    end,

    -- -------------------------------------------------------------------------------- 
    -- TakeCover from observant enemies
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- No entities to safeguard from issued. Get neaby enemies by default
        if self.params.entities == NIL then
            self.entitiesToSafeguardFrom = sword.military.queries.enemies.getNearbyEnemies[ "execute" ]()
        else
            self.entitiesToSafeguardFrom = self.params.entities
        end

        -- Manage respond on entities
        Activate( skill.links.respond, 1,{ entities = self.entitiesToSafeguardFrom } )

        -- Self protection is disabled when needed
        if myself.desactiveSelfProtection then
            return
        end

        -- AMBIANCE VITESSE (zone sûre) OU SURETE (ennemi probable)
        if not next( self.entitiesToSafeguardFrom ) then -- PAS D'UNITE FACE AUXQUELLES SE PROTEGER
            -- no entities to safeguard from but enemy is likely (fragOrder or LCA crossed)
            if meKnowledge.safetyAttitude then
                Activate( skill.nodes.SafetyAttitude, skill.modifiers.importance )
                Activate( skill.links.dismount, 1 )
            else -- POSTURE VITESSE
                myself.speedModulation.switchOnCoverMode = 1
            end
            self.detected = false
            return -- evaluation of other conditions is useless
        end

        -- Take cover once ME is not opérationnal but not if unit is surrendered.
        if not meKnowledge:isOperational() and not meKnowledge:isSurrendered() then
            Activate( skill.links.takeCover, skill.modifiers.importance, { entities = self.entitiesToSafeguardFrom } )
            return -- evaluation of other conditions is useless
        end

        -- Enemi présent mais ordre de conduite Ambiance vitesse: passer à POSTURE VITESSE
        if meKnowledge.safetyAttitude == false then
            myself.speedModulation.switchOnCoverMode = 1
            return
        end

        -- Select only observant units
        for _, platoon in pairs( self.entitiesToSafeguardFrom ) do
            if platoon:hasDetectedMe() then
                self.detected = true
                break
            end
        end

        -- If detected by elements to safeguard from and agent is not surrendered, active cover posture and dismount 
        if self.detected and not meKnowledge:isSurrendered() then
            Activate( skill.nodes.CoverAttitude, skill.modifiers.importance )
            Activate( skill.links.dismount, 1 )

            -- if the force ratio is bad or if agent is no longer operationnal, get
            -- the positions to get cover and concealment.
            if meKnowledge:hasBadForceRatio() then
                self.needToTakeCover = true
            end
        end

        -- Coover from entities
        if self.needToTakeCover then
            Activate( skill.links.takeCover, skill.modifiers.importance, { entities = self.entitiesToSafeguardFrom } )
        end
    end
}


-- ****************************************************************************
-- Activate particular posture to protect oneself.
-- ****************************************************************************
node "CoverAttitude"
{
    select = function( self )
        meKnowledge:adoptCoverAttitude()
    end
}

-- **************************************************************************** 
-- SafetyAttitude
-- ****************************************************************************
node "SafetyAttitude"
{
    select = function( self )
        meKnowledge:adoptSafetyAttitude()
    end
}
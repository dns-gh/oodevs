rootnode
{
    connections = { skill.links.moveAlong, skill.nodes.CR },
  
    done = function( self, additionnalParams )
        for _, pion in pairs( self.pionsFriends ) do
            meKnowledge:sendEndOfMission( pion, meKnowledge, false )
        end
        Feedback( self.feedbacks.done )
    end,
    
    create = function( self )
        self.initPos = CreateKnowledge( sword.military.world.Point, DEC_Geometrie_CopiePoint(meKnowledge:getPosition()))
        self.itinerary = fusionList( self.params.ficelleDeVol, { self.initPos } ) -- add initial position on itinerary
        self.pionsFriends = sword.military.queries.miscellaneous.getFriends[ "execute" ]()
        self.fragOrderReceived = false
         for _, pion in pairs( self.pionsFriends ) do
            meKnowledge:sendEndOfMission( pion, meKnowledge, true )
        end
    end,
    
    activate = function( self ) 
        if not meKnowledge.source:GetbMiseEnOeuvre_() then
            Activate( skill.nodes.CR, 1, { RC = eRC_DroneDoitEtreMisEnOeuvre } )
            return
        end
        if meKnowledge.source:GetbEnExploitation_() then
            Activate( skill.nodes.CR, 1, { RC = eRC_DroneEnExploitation } )
            return
        end
        if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_RejoindrePointLancement" ) then
          self.fragOrderReceived = true
        end
        
        if self.fragOrderReceived then
            Activate( skill.links.moveAlong, 1, { entities = { self.initPos } } )
        else
            Activate( skill.links.moveAlong, 1, { entities = self.itinerary } )
        end
    end,
}
-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}

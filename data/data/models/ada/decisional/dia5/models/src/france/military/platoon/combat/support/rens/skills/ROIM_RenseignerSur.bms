rootnode
{
    connections = { skill.links.moveAndTakePosition, skill.links.moveAlong, skill.nodes.CR },
  
    done = function( self, additionnalParams )
        for _, pion in pairs( self.pionsFriends ) do
            meKnowledge:sendEndOfMission( pion, meKnowledge, false )
        end
        Feedback( self.feedbacks.done )
        meKnowledge.source:SetbMiseEnOeuvre_ ( false )
    end,
    
    create = function( self )
        self.initPos = CreateKnowledge( sword.military.world.Point, DEC_Geometrie_CopiePoint( meKnowledge:getPosition() ) )
        self.destination = nil
        self.unitPC = meKnowledge:getUnitPC()
        self.listPoint = fusionList( self.params.ficelleDeVol, { self.initPos } )
        self.itinerary = integration.creerItineraireAPartirListePoint( self.listPoint )
        self.pionsFriends = sword.military.queries.miscellaneous.getFriends[ "execute" ]()
        self.fragOrderReceived = false
         for _, pion in pairs( self.pionsFriends ) do
            meKnowledge:sendEndOfMission( pion, meKnowledge, true )
        end
    end,
    
    activate = function( self ) 
        if not meKnowledge.source:GetbMiseEnOeuvre_() then
            Activate( skill.nodes.CR, 1, { RC = eRC_DroneDoitEtreMisEnOeuvre } )
            return
        end
        if meKnowledge.source:GetbEnExploitation_() then
            Activate( skill.nodes.CR, 1, { RC = eRC_DroneEnExploitation } )
            return
        end
        if integration.query.getFirstFragOrderFromType( "Rep_OrderConduite_RejoindrePointLancement" ) then
          self.fragOrderReceived = true
        end
        
        if self.fragOrderReceived then
            if self.unitPC ~= nil then  
                self.pcPos = self.unitPC:getMyPosition()
            end

            if self.pcPos ~= nil then
                self.destination = self.pcPos
            else
                self.destination = self.initPos
            end

            Activate( skill.links.moveAndTakePosition, 1, { entity = self.initPos } )
        else
            Activate( skill.links.moveAndTakePosition, 1, { entity = self.itinerary } )
        end
    end,
    
    destroy = function( self )
        meKnowledge.source:SetbEnExploitation_ ( false )
    end,
    
}

-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}

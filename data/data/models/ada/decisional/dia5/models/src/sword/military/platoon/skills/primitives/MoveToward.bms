-- ****************************************************************************
-- Move toward reachable entities
-- self.params.entity: the reachable elements
-- self.params.area: the reaching elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.MoveTowardElement },
    feedbacks = { "failed" },

    -- --------------------------------------------------------------------------------
    -- Main effect is reached: send feedback with the position occupied, when
    -- objectives are reached
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams )
        Feedback( self.feedbacks.done, additionalParams )
    end,

    notReached = function( self, params, additionalParams )
        Feedback( self.feedbacks.failed, { reason = additionalParams.reason, element = additionalParams.element } )
    end,
    
    create = function( self )
       if meKnowledge:isAgentNBC() then
         self.pathType = eTypeItiNBC
       else
         self.pathType = self.params.pathType
       end
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, move toward it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        for _, entity in pairs( self.params.entities ) do
            Activate( skill.nodes.MoveTowardElement, entity:reachPriority(),{ entity = entity, 
                positions = self.params.positions, pathType = self.pathType } )
        end
    end
}

-- ****************************************************************************
-- Simple movement straight toward the objective
-- ****************************************************************************
node "MoveTowardElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe };

    feedbacks = { "notReached" },

    -- --------------------------------------------------------------------------------
    -- Main effect is done: reach the reachable element (objective)
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams )
        Feedback( self.feedbacks.done, additionalParams )
    end,

    elementFailed = function( self, params, additionalParams )
        Feedback( self.feedbacks.notReached, { reason = additionalParams.reason, element = additionalParams.element } )
    end,

    -- --------------------------------------------------------------------------------
    -- Move toward the objective using the skill MoveAndTakePosition
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        for _, position in pairs ( self.params.positions ) do
            Activate( skill.links.moveAndTakePosition,
                position:reachEfficiency( self.params.entity ), 
                        { entity = position, pathType = self.params.pathType } )
        end
    end
}

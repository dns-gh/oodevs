-- ****************************************************************************
-- Stay close to reachable entities
-- self.params.entities: the reachable elements
-- self.params.positions: the reaching elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.StayCloseToElement, skill.nodes.CR },

    create = function( self )
        self.entities = copyTable( self.params.entities )
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, stay close to it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local positions = {}
        if self.params.positions == NIL then
            positions = sword.military.queries.tactical.getPositionsToFollow[ "execute" ]( 
              { elementsToFollow = self.params.entities, distanceMin = self.params.distanceMin, dynamic = true } )
        else
            positions = self.params.positions
        end
        
        if #positions == 0 then
            Activate( skill.nodes.CR, 1, { RC = eRC_NoPositionsToReachTargets } ) 
        end
        for _, entity in pairs( self.entities ) do
            Activate( skill.nodes.StayCloseToElement, entity:reachPriority(),
                                                    { entity = entity, positions = positions } )
        end
    end
}


-- ****************************************************************************
-- Straight movement toward the objective
-- ****************************************************************************
node "StayCloseToElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe },

    -- --------------------------------------------------------------------------------
    -- Move toward closest positionable elements using the skill MoveAndTakePosition
    -- --------------------------------------------------------------------------------
    activate = function( self )

        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Moving toward close positions
        for _, position in pairs ( self.params.positions ) do
                Activate( skill.links.moveAndTakePosition,
                    position:reachEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

-- **************************************************************************** 
-- CR 
-- ****************************************************************************
node "CR"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end
}
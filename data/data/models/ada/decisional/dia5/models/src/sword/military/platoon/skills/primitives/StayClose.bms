-- ****************************************************************************
-- Stay close to reachable entities
-- self.params.entities: the reachable elements
-- self.params.positions: the reaching elements
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.StayCloseToElement },

    done = function( self ) end,

    failed = function( self, additionnalParams )
        removeFromList(additionnalParams.entity, self.entities)
        if not next(self.entities) then
            DEC_RC( eRC_NoUnitsInParameter )
            Feedback( self.feedbacks.done )
        end
    end,
    
    create = function( self )
        self.entities = copyTable( self.params.entities )
    end,

    -- --------------------------------------------------------------------------------
    -- For each objective of the skill, stay close to it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        for _, entity in pairs( self.entities ) do
            Activate( skill.nodes.StayCloseToElement, entity:reachPriority(),
                { entity = entity, positions = self.params.positions } )
        end
    end
}
-- ****************************************************************************
-- Straight movement toward the objective
-- ****************************************************************************
node "StayCloseToElement"
{
    connections = { skill.links.moveAndTakePosition, skill.links.observe },
    feedbacks = { "failed" },

    -- --------------------------------------------------------------------------------
    -- Move toward closest positionable elements using the skill MoveAndTakePosition
    -- --------------------------------------------------------------------------------
    activate = function( self )
        if self.params.entity:operationalLevel() == 0 then
               DEC_RC( eRC_FollowingUnitIsDead, DEC_GetSzName(self.params.entity.source) )
               Feedback( self.feedbacks.failed, {entity = self.params.entity } )
        end

        -- Main observation effort on current neutralizable element
        Activate( skill.links.observe, 1, { entity = self.params.entity } )

        -- Moving toward close positions
        for _, position in pairs ( self.params.positions ) do
                Activate( skill.links.moveAndTakePosition,
                    position:reachEfficiency( self.params.entity ), { entity = position } )
        end
    end
}

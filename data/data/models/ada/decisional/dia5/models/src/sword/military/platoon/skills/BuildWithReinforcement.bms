-------------------------------------------------------------------------------
-- Skill BuildWithReinforcement
-- @author MGD
-- @created 2010-12-07
--
-- This file is part of a MASA library or program.
-- Refer to the included end-user license agreement for restrictions.
--
-- Copyright (c) 2010 Mathématiques Appliquées SA (MASA)
-------------------------------------------------------------------------------
rootnode
{
    connections = { skill.links.build, skill.links.improve, skill.nodes.RC },

    done = function( self ) end,

    elementFailed = function( self, params, additionalParams )
        self.report = additionalParams.reason
        if additionalParams.reason == eRC_BUNonTraficable then
            self.nextTargetIndex = self.nextTargetIndex + 1
            if self.nextTargetIndex > #self.params.entities then
                self.alltry = true
            end
        elseif additionalParams.reason == eRC_PasDotationConstructionObjet then
            integration.setNeedReinforcement( meKnowledge, additionalParams.action, additionalParams.element, true )
        else
            integration.setNeedReinforcement( meKnowledge, additionalParams.action, additionalParams.element, false )
        end
    end,
    
    elementNotActivated = function( self, params, additionalParams )
        self.objectsToActivate[#self.objectsToActivate + 1] = additionalParams.element
        meKnowledge:RC( eRC_ObstacleEnAttenteActivation, additionalParams.element.source )
        self.nextTargetIndex = self.nextTargetIndex + 1
        myself.obstacleToActivate = true
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
    end, 

    elementBuilt = function( self, params, additionalParams )
        if self.params.withImprovement then
            self.toImprove = additionalParams.element
        else
            self:nextElement()
        end
    end,
    
    nextElement = function( self, params, additionalParams )
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.entities then
            self.alltry = true
        end
        meKnowledge:sendStopNeededReinforcement( integration.GetSuperiorKnowledge( meKnowledge ), meKnowledge)
    end,

    elementImproved = function( self, params, additionalParams )
        self.toImprove = nil
        self:nextElement()
    end,

    elementCancelled = function( self )
        self.toImprove = nil
        self:nextElement()
    end,

    elementNotImprovable = function( self )
        self.toImprove = nil
        self:nextElement()
    end,

    create = function( self )
        self.nextTargetIndex = 1
        self.report = nil
        self.toImprove = nil
        self.alltry = #self.params.entities == 0
        self.objectsToActivate = {}
        myself.obstacleToActivate = false
    end,

    activate = function( self )
        local Activate = Activate
        if self.params.entities == NIL or self.params.entities == nil then
            Feedback( self.feedbacks.done ) -- no obstacles to build
            return
        end

        -- CR on physical capability --> need reinforcement or recompletion or need activate obstacle
        if self.report then
            Activate( skill.nodes.RC, 1, { RC = self.report } )
        end

        if self.alltry then
            for _, objective in pairs( self.objectsToActivate ) do -- Obstacles should be activated to consider action over 
                if not objective:isActifManeuverObstacle() then
                    return
                end
            end
            self.objectsToActivate = nil
            myself.obstacleToActivate = false
            Feedback( self.feedbacks.done )
            return
        end
        if self.toImprove then
            Activate( skill.links.improve, 1, { entities  = { self.toImprove }, 
                                          positions = self.positions } )
        else
            Activate( skill.links.build, 1, { entities  = {self.params.entities[self.nextTargetIndex]}, 
                                          positions = self.positions } )
        end

        self.alltry = false
        self.report = nil
    end,
}

node "RC"
{
    create = function( self )
        meKnowledge:RC( self.params.RC )
    end,
}
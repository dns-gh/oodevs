rootnode
{
    connections = { skill.links.moveToward, skill.nodes.JammingActivation },

    done = function( self, params, additionnalParams )
        if additionnalParams.reason == "posted" then
            self.isPosted = true
        end
        if additionnalParams.element == self.params.meetingPoint then
            Feedback( self.feedbacks.done )
        end
    end,
    
    create = function( self )
        self.isPosted = false
        self.timeOut = false
    end,
    
    timeOutJamming = function( self , params, additionnalParams )
        self.timeOut = true
    end,
        
    activate = function( self )
       if self.timeOut then
           Activate( skill.links.moveToward, 1, { entities = { self.params.meetingPoint } } )
       else
          if self.isPosted then
             Activate( skill.nodes.JammingActivation, 1, { position = self.params.objective } )
          end
       
          Activate( skill.links.moveToward, 1, { entities = { self.params.objective } } )
       end
    end,
}


node "JammingActivation"
{
    feedbacks = { "timeOutJamming" },

    create = function( self )
        meKnowledge:RC( eRC_ActivationBrouillage )
    end,
    
    select = function( self )
          meKnowledge:buildObjectOnPosition( eTypeObjectZoneBrouillage, self.params.position )
          if waitInMin( self, 15 ) then
              Feedback( self.feedbacks.timeOutJamming )
        end
    end,
}
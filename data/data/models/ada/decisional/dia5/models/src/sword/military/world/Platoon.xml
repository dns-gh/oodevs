<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://www.masagroup.net/directia/schemas/bm" name="sword.military.world.Platoon" source-version="1.0.0" extends="sword.military.world.LocalizedElement">
    <description>Une Platoon interarme en milieu urbain.</description>
    <realizes>directia.core.model.RoleBody</realizes>
    <realizes>sword.military.knowledge.decisional.Approachable</realizes>
    <realizes>sword.military.knowledge.decisional.Destroyable</realizes>
    <realizes>sword.military.knowledge.decisional.Identifiable</realizes>
    <realizes>sword.military.knowledge.decisional.Neutralizable</realizes>
    <realizes>sword.military.knowledge.decisional.Safeguardable</realizes>
    <realizes>sword.military.knowledge.decisional.Fleeable</realizes>
    <realizes>sword.military.knowledge.decisional.Illuminatable</realizes>
    <realizes>sword.military.knowledge.IndirectFireable</realizes>
    <realizes>sword.military.knowledge.Motile</realizes>
    <realizes>sword.military.knowledge.Askable</realizes>
    <realizes>sword.military.knowledge.Attackable</realizes>
    <realizes>sword.military.knowledge.decisional.Transportable</realizes>
    <methods>
        <method name="getTraficabilityLevelFor">
            <argument>
                <type>
                    <class name="sword.military.world.PlatoonAlly"/>
                </type>
            </argument>
            <return name="traficability">
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="computeMovementCapability">
            <description>__INTEGRATION</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="computeRelation">
            <description>__INTEGRATION</description>
            <argument name="objective">
                <description>L'unité avec laquelle on veut calculer sa relation de diplomatie</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Observable"/>
                </type>
            </argument>
            <return>
                <description>Retourne la valeur de la relation entre 0 et 100</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="dischargeItIn" abstract="false">
            <description>Action de déchargement d'un élément transporté, dans un conteneur.&#xD;
            </description>
            <argument name="object">
                <type>
                    <class name="sword.military.knowledge.decisional.Loading"/>
                </type>
            </argument>
        </method>
        <method name="getProximity">
            <description>__INTEGRATION</description>
            <argument name="objective">
                <description>L'élément objectif</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Reachable"/>
                </type>
            </argument>
        </method>
        <method name="computeEstimatePerceptionCapability">
            <description>__INTEGRATION</description>
            <argument name="objective">
                <description>L'élément à percevoir dont on veut calculer le niveau de perception</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Observable"/>
                </type>
            </argument>
            <argument name="position">
                <description>L'élément position à partir duquel on veut observer l'élément</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Observable"/>
                </type>
            </argument>
            <return>
                <description>Retourne la valeur de la perception d'un élément par l'unité entre 0 et 100</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="getPerception">
            <description>__INTEGRATION</description>
            <return>
                <description>Retourne la valeur de la perception de l'element par l'agent entre 0 et 100.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="communicate">
            <description>__INTEGRATION : pour communiquer avec une unité.
        Ici une implémentation par défaut est proposée.
      </description>
        </method>
        <method name="destructionPriority">
            <description>__INTEGRATION</description>
            <return>
                <description>La valeur de la priorité.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="getDestructionState">
            <description>__INTEGRATION</description>
            <return>
                <description>La valeur du niveau de destruction</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="getOperationalCapacity">
            <description>Retourne le niveau operationnel de l'unité. </description>
            <return>
                <description>Retourne une valeur entre 0 et 100.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="canNeutralizeIt">
            <description>Retourne vrai si les conditions sont réunies pour neutraliser la connaissance.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="neutralizeIt">
            <description>Action de neutralisation</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="neutralizationPriority">
            <description>__INTEGRATION</description>
            <return>
                <description>La valeur de la priorité.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="firePermitted">
            <description>Retourne vrai si l'autorisation est donnée de tirer sur l'unité. </description>
            <return>
                <description>__INTEGRATION. Retourne vrai si l'autorisation est donnée de tirer sur l'unité, faux sinon.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isSafety">
            <description>__INTEGRATION</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="identifyIt">
            <description>__INTEGRATION</description>
        </method>
        <method name="identificationLevel">
            <description>__INTEGRATION</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="identificationPriority">
            <description>__INTEGRATION</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="fleePriority" abstract="false">
            <description>La priorité de la sauvegarde vis-à-vis de l'élément.</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="respondToIt" abstract="false">
            <description>Action de tir de riposte</description>
        </method>
        <method name="operationalLevel" abstract="false">
            <description>Le niveau opérationel de la connaissance</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="observeIt" abstract="false">
            <description>Action d'observation de l'élément.
            
            Cette action permet à l'agent d'observer l'élément. Pour un individu, il peut s'agir d'une orientation simple des senseurs, sans se soucier 
            de l'efficacité du senseur pour l'indentification de l'élément. Pour une entité de plus haut niveau (équipe ou groupe) il s'agit de 
            l'effort d'observation vers l'élément (direction principale d'observation vers l'élément).
            </description>
        </method>
        <method name="getIdentificationState">
            <description>__INTEGRATION</description>
            <return>
                <description>Retourne la valeur du niveau d'identification courant de l'unité entre 0 et 100.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="safetyPriority">
            <description>La priorité de la sauvegarde vis-à-vis de l'élément.</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="canIdentifyIt">
            <description>Retourne vrai si l'élément peut être identifié.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="threatLevel">
            <description>Représente le niveau de menace d'une connaissance.

          Par exemple, une unité est considérée comme menaçante si elle engagée l'agent.
          </description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="selfProtectFromIt">
            <description>Action de protection envers l'élément.

            Cette action permet à un agent de se protéger d'un élément de connaissance en adoptant une posture particulière.
          </description>
        </method>
        <method name="computeAggressiveness">
            <description>Retourne le niveau d'agressivité d'une unité</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="fleeFromIt">
            <description>Action spécifique de la fuite pour une unité.</description>
        </method>
        <method name="isOnRangeFor" abstract="false">
            <description>return if the target is on range</description>
            <argument name="munition">
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="illuminationPriority">
            <description>Retourne la priorité d'illumination d'un élément de connaissance</description>
            <return>
                <description>La valeur de la priorité.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="canIlluminateIt">
            <description>Retourne vrai si les conditions sont réunies pour illuminer la connaissance</description>
            <return>
                <description>L'état des conditions</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="illuminateIt">
            <description>Action physique d'illumination.</description>
        </method>
        <method name="illuminationLevel">
            <description>Retourne le niveau d'illumination de la connaissance.</description>
            <return>
                <description>La valeur du niveau de'illumination</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="applyFireOnIt">
            <description>execute fire order</description>
            <argument name="munition">
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <argument name="interventionType">
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="getPosition">
            <description>Fonction d'intégration retournant un MT_Vector2D</description>
        </method>
        <method name="getPositions">
            <description>Fonction d'intégration retournant une liste de MT_Vector2D (ici la même que getPosition)</description>
        </method>
        <method name="getMyPosition">
            <description>Fonction d'intégration retournant un Point qui a pour coordonnées ma position.</description>
            <return>
                <type>
                    <class name="sword.military.knowledge.decisional.Reachable"/>
                </type>
            </return>
        </method>
        <method name="getEstimateAttrition">
            <description>Retourne le niveau d'attrition d'une entité sur l'agent. </description>
            <argument name="position">
                <description>La position à partir de laquelle l'agent peut me faire de l'attrition.</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Positionable"/>
                </type>
            </argument>
            <return>
                <description>Retourne une valeur entre 0 et 100.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="approachPriority">
            <description>
                Renvoie la priorité du déplacement vers cet élément.

                Cette priorité est calculée en fonction de la distance séparant l'agent et l'élément à approcher. Cette
                priorité peut également dépendre de la nature même de l'élément.
            </description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="canApproachIt">
            <description>Renvoie vrai si les conditions d'approche vers l'élément sont réunies.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="computePerceptionCapabilityFor">
            <description>__INTEGRATION</description>
            <argument name="entity">
                <description>L'unité observant</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Observable"/>
                </type>
            </argument>
            <argument name="position">
                <description>L'élément position à partir duquel on veut observer l'élément</description>
                <type>
                    <class name="sword.military.knowledge.decisional.Positionable"/>
                </type>
            </argument>
            <return>
                <description>Retourne la valeur de la perception d'un élément par l'unité entre 0 et 100</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="destroyIt" abstract="false">
            <description>Action physique de destruction.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="destroyItForASA" abstract="false">
            <description>Action physique de destruction.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canDestroyIt" abstract="false">
            <description>Retourne vrai si les conditions sont réunies pour détruire la connaissance</description>
            <return>
                <description>L'état des conditions</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canRespond" abstract="false">
            <description>Renvoie vraie si les conditions de riposte sont réunies.
            Comme pour les conditions d'engagement (initiative du tir), les conditions de riposte dépendent du système d'armes mais 
            pour le reste, elles diffèrent sur plusieurs points : l'efficacité du tir pour la destruction n'est pas forcément 
            recherchée (tir de neutralisation) et l'autorisation du supérieur n'est pas nécéssaire (appréciation d'un tir de 
            sauvegarde face à une entité qui peut mettre la vie de l'agent en danger).
            </description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="moveToIt">
            <description>Action de se déplacer vers l'élément.

                Cette action permet à l'agent de se déplacer de façon simple vers l'élément.
          </description>
            <argument name="pathType">
                <description>Le paramètrage du calcul de l'itinéraire</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="destroyMoveToIt" abstract="false"/>
        <method name="dangerosityLevel" abstract="false">
            <description>Retourne le niveau de dangerosité de la connaissance
        </description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="destructionLevel" abstract="false">
            <description>Retourne le niveau de destruction de la connaissance.</description>
            <return>
                <description>La valeur du niveau de destruction</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="isValid">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="hasDetectedMe" abstract="false">
            <description>Renvoie vrai si l'agent m'a repéré.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="fireNotForbbiden">
            <description>Retourne vrai s'il le tir n'est pas interdit. </description>
            <return>
                <description>Retourne vrai si l'autorisation n'est tir n'est pas donné, faux sinon.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canLoadIt" abstract="false">
            <description>Renvoie vrai si les conditions de chargement de l'élément sont réunies.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canUnloadIt" abstract="false">
            <description>Renvoie vrai si les conditions de déchargement sont réunies (distance par défaut mais la priorité peut dépendre de la mission etc.).</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="loadIt" abstract="false">
            <description>Action de charger l'élément.

            Cette action permet à l'agent de charger l'élément. Il peut s'agir d'un objet ou d'un idividu etc.
            </description>
        </method>
        <method name="loadLevel" abstract="false">
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="loadPriority" abstract="false">
            <description>Renvoie la priorité de chargement de l'élément.
            Cette priorité dépend de la distance séparant l'agent et l'élément à charger ou d'une autre piorité définie par l'utilisateur
            (si l'élément à charger est un paramètre de mission par exemple).
            </description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="unloadPriority" abstract="false">
            <description>Renvoie la priorité pour le déchargement de l'élément.</description>
            <return>
                <type>
                    <simple name="numeric"/>
                </type>
            </return>
        </method>
        <method name="unloadIt" abstract="false">
            <description>Action de déchargement de l'élément.

            Cette action permet à l'agent de décharger l'élément.
            </description>
        </method>
        <method name="getLoadlevel">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="interrogateIt" abstract="false">
            <description>Interroger la cible.</description>
            <return name="isInterrogated">
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="attackIt" abstract="false">
            <description>Action physique de l'attentat.</description>
            <argument name="suicide">
                <description>Si l'attentat est un attentat suicide.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </argument>
            <argument name="dotation">
                <description>Munition utilisée pouu commettre l'attentat.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <description>Retourne vrai quand l'attentat est effectué.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="takeAsHostage">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="takeAsPrisoner">
            <description>Marque l'unité comme étant prisonnière.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="takeAsRefugee">
            <description>Marque l'unité comme étant prisonnière.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isCivilian">
            <description>retourne vrai si le pion civil, parmi les types :&#xD;
&quot;Pion Civilian&quot;&#xD;
&quot;Pion REFUGIE&quot; &#xD;
&quot;Pion Organization&quot; &#xD;
&quot;Pion Notable&quot;&#xD;
&quot;Pion Journalist&quot; </description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="killOfficersWithin">
            <description>Action physique de l'éxécution d'officiers.</description>
        </method>
        <method name="addToTransport" abstract="false">
            <description>Ajout de l'unite dans la file pour le transport.</description>
        </method>
        <method name="readyForBeingTransported" abstract="false">
            <description>Retourne vrai si l'unite est prête à se faire transporter. L'implémentation de cette méthode retourne vrai si l'agent a reçu la mission se faire transporter (et que ce dernier est proche du point de RDV pour le transport).</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canTransportIt" abstract="false">
            <description>Retourne vrai si il est physiquement possible de transporter l'element.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="shareKnowledge">
            <description>Transmet les informations connues a l'automate</description>
            <argument name="delay">
                <description>Temps mis pour transmettre l'information.</description>
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isInAttackRange" abstract="false">
            <argument name="suicide">
                <type>
                    <simple name="boolean"/>
                </type>
            </argument>
            <argument name="dotation">
                <type>
                    <simple name="numeric"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="dropIt">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isTransported">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isMoving" abstract="false">
            <description>Returns 'true' if this element is moving, 'false' otherwise.</description>
        </method>
        <method name="canBeFollowed" abstract="false">
            <description>Retourne "vrai" si cet élément peut être suivi par l'agent, "faux" sinon. Cette implémentation retourne "vrai" si cet élément est opérationnel, ie: un élément</description>
        </method>
        <method name="getName" abstract="false">
            <description>Retourne le nom de l'élément motile.</description>
            <return>
                <type>
                    <simple name="string"/>
                </type>
            </return>
        </method>
    </methods>
    <predicates>
        <predicate name="isDestroyed">
            <description>Retourne vrai si la connaissance est détruite.</description>
        </predicate>
        <predicate name="isOperational">
            <description>Retourne vrai si la connaissance est opérationnelle.</description>
        </predicate>
        <predicate name="isDefinitelyIlluminated">
            <description>Retourne vrai si la connaissance est illuminée définitevement, par une munition traçante par exemple.</description>
        </predicate>
        <predicate name="isThreatening">
            <description>Renvoie vrai si la connaissance est considérée comme étant menaçante.
            Par exemple, une unité est considérée comme menaçante si son niveau de menace est positif.
            </description>
        </predicate>
        <predicate name="isDangerous" abstract="false">
            <description>Détermine si un élément de connaissance est considéré comme dangereux par l'agent.</description>
        </predicate>
        <predicate name="isIdentified" abstract="false">
            <description>Renvoie vrai si l'élément est considéré comme étant identifié.</description>
        </predicate>
        <predicate name="isThreateningOrHostile" abstract="false">
            <description>Renvoie vrai si la connaissance est considérée comme menaçante ou hostile.</description>
        </predicate>
        <predicate name="isLoaded" abstract="false">
            <description>Renvoie vrai si l'élément est chargé.</description>
        </predicate>
        <predicate name="isInCrowd" abstract="false">
            <description>Renvoie vrai si le pion est dans une foule</description>
        </predicate>
    </predicates>
    <attributes>
        <attribute name="tasks">
            <type>
                <list>
                    <class name="common.Task"/>
                </list>
            </type>
        </attribute>
    </attributes>
</class>
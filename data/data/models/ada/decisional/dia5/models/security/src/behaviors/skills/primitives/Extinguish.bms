-- **************************************************************************** 
-- To extinguish a given set of fires
-- @params self.params.fires, a list of entities designated as fires.
-- @returns "done" when all fires are extinguished.
--
-- /!\ The extinguish order is defined by the order of the elements in the parameters list.
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.extinguish },
    feedbacks   = { "extinguished", "notExtinguished" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    extinguishActionCompleted = function( self, params ) -- from extinguish skill
        Feedback( self.feedbacks.extinguished, { fire = params.fire } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    impossibleToExtinguish = function( self, params ) -- called within this skill
        Feedback( self.feedbacks.notExtinguished, { fire = params.fire } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
        self.position = {}
    end,

    -- --------------------------------------------------------------------------------
    -- Move to position to extinguish cuurent fire
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.fires
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.fire = self.params.fires[ self.nextTargetIndex ]
                self.position = ontology.queries.GetPositionsOutsideObject[ "execute" ]( { object = self.fire } )
                if self.position[ 1 ]:isReached() or self.arrived then
                    if self.fire:canBeExtinguished() then
                        Activate( skill.links.extinguish, 1, { fire = self.fire } )
                    elseif not self.fire:isExtinguished() then -- agent cannot extinguish and fire burns...
                        self:impossibleToExtinguish( { fire = self.fire } )
                    end
                else
                    Activate( skill.links.reach, 1, { destination = self.position[ 1 ] } )
                end
            else
                Feedback( self.feedbacks.done )
            end
        else
            Feedback( self.feedbacks.failed ) -- if no fires issued
        end
    end
}
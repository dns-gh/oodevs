-- **************************************************************************** 
-- To confine a given set of populated areas
-- @params self.params.populatedAreas, a list of entities designated as populated areas.
-- @returns "done" when all populated areas are confined.
--
-- /!\ The confinement order is defined by the order of the elements in the parameters list.
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.confine },
    feedbacks   = { "confined", "notConfined" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    confineActionCompleted = function( self, params ) -- from confine skill
        Feedback( self.feedbacks.confined, { populatedArea = params.populatedArea } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    impossibleToConfine = function( self, params ) -- called within this skill
        Feedback( self.feedbacks.notConfined, { populatedArea = params.populatedArea } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
    end,

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.populatedAreas
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.populatedArea = self.params.populatedAreas[ self.nextTargetIndex ]
                if self.arrived then
                    if self.populatedArea:canBeConfined() then
                        Activate( skill.links.confine, 1, { populatedArea = self.populatedArea } )
                    else
                        self:impossibleToConfine( { populatedArea = self.populatedArea } )
                    end
                else
                    Activate( skill.links.reach, 1, { destination = self.populatedArea } )
                end
            else
                Feedback( self.feedbacks.done )
            end
        else
            Feedback( self.feedbacks.failed )
        end
    end
}
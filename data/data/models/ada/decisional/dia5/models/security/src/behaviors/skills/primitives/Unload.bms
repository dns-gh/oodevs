-- **************************************************************************** 
-- To load all entities on agent Unit
-- @params transportableEntities, a list of entities designated as 'Transportable' object.
-- @returns "done" when all entities have been loaded
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.unload },
    feedbacks   = { "unloaded", "notUnloaded" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    unloadActionCompleted = function( self, params ) -- called be skill.links.unload
        Feedback( self.feedbacks.unloaded, params )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
    end,

    impossibleToUnload = function( self, params )
        meKnowledge:sendReport( eRC_ElementCannotBeUnloaded )
        Feedback( self.feedbacks.notUnloaded, { transportableEntity = params.transportableEntity } )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
    end,

    -- --------------------------------------------------------------------------------
    -- Behavior execution
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.loadedEntities
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.transportableEntity = self.params.loadedEntities[ self.nextTargetIndex ]
                if self.arrived then
                    if self.transportableEntity:canBeUnloaded() then
                        Activate( skill.links.unload, 1, { transportableEntity = self.transportableEntity } )
                    else
                        self:impossibleToUnload( { transportableEntity = self.transportableEntity } )
                    end
                else
                    Activate( skill.links.reach, 1, { destination = self.params.destination } )
                end
            else
                Feedback( self.feedbacks.done, { sender = "unload" } )
            end
         else
            Feedback( self.feedbacks.failed, { sender = "unload" } )
         end
    end
}
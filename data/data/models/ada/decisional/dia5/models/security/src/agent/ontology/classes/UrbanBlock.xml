<?xml version="1.0" encoding="UTF-8"?>
<class xmlns="http://www.masagroup.net/directia/schemas/bm" name="agent.ontology.classes.UrbanBlock" source-version="1.0.0" extends="agent.ontology.classes.TerrainElement">
    <description>Represents a terrain area comprising a set of buildings and roads, that can accommodate populations, units and crowds.&#xD;
An agent can go inside an urban block.&#xD;
A urban block can be evacuated, alerted or confined. These states have an impact on the hosted population behavior.&#xD;
</description>
    <realizes>agent.world.PopulatedArea</realizes>
    <realizes>agent.world.ContaminationArea</realizes>
    <realizes>agent.world.Work</realizes>
    <realizes>agent.world.ResourceProducer</realizes>
    <methods>
        <method name="getPosition">
            <return name="simPosition">
                <type>
                    <any/>
                </type>
            </return>
        </method>
        <method name="getPositions">
            <return>
                <type>
                    <any/>
                </type>
            </return>
        </method>
        <method name="confineIt" abstract="false">
            <description>To confine the population located into the populated area.&#xD;
&#xD;
This action can take time (depending on the current status of the population, e.g. if the population is alerted, the confinement is done more quickly).</description>
            <return name="confinement">
                <description>True if the confinement is completed or if the populated area does not contain population to confine, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="undoConfineIt" abstract="false">
            <description>To lift the confinement of a population into the populated area.</description>
            <return name="undoConfinement">
                <description>True if the confinement is lifted or if the populated area does not contain confined population, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isConfined" abstract="false">
            <description>Returns true if a population is confined into the populated area.</description>
            <return name="confinement">
                <description>True if a population is confined into the populated area, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="evacuateIt" abstract="false">
            <description>To evacuate the population located into the populated area.&#xD;
&#xD;
&#xD;
This action can take time (depending on the current status of the population, e.g. if the population is alerted, the evacuation is done more quickly).</description>
            <return name="evacuation">
                <description>True if the evacuation is completed or if the populated area does not contain population to evacuate, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isEvacuated" abstract="false">
            <description>Returns true if a population is evacuated from the populated area.</description>
            <return name="evacuation">
                <description>True if a population is evacuated from the populated area, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="undoEvacuateIt" abstract="false">
            <description>To lift the confinement of a population into the populated area.</description>
            <return name="undoEvacuation">
                <description>True if the confinement is lifted or if the populated area does not contain confined population, false otherwise.</description>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isAlerted" abstract="false">
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="alertIt" abstract="false">
            <description>To alert the populations contained in the populated area. </description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="undoAlertIt" abstract="false">
            <description>To revert the effect of &quot;alert&quot; on the populations contained in the populated area. </description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="decontaminateIt" abstract="false">
            <description>To decontaminate the area</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isBuilt" abstract="false">
            <description>Returns true if this element is entierly built.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="createIt" abstract="false">
            <description>To create and build this element.</description>
            <return name="work">
                <description>The created work.</description>
                <type>
                    <class name="agent.world.Work"/>
                </type>
            </return>
        </method>
        <method name="removeIt" abstract="false">
            <description>To remove instantaneously an existing work without any physical capability considerations.&#xD;
&#xD;
This implementation returns false. A urban block cannot be removed instantaneously.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="deconstructIt" abstract="false">
            <description>To deconstruct (and then remove) this element.&#xD;
Returns 'true' when element is deconstructed.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="isDeconstructed" abstract="false">
            <description>Returns 'true' if this element has been deconstructed (by deconstruction action or a &quot;magic&quot; destruction action),'false' otherwise.&#xD;
&#xD;
This implementation returns 'true' if the urban block has a construction level equal to 0; 'false' otherwise. This specific object does not disapears when it is being deconstructed.</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canBeDeconstructed" abstract="false">
            <description>Returns 'true' if agent is able to deconstruct this element.&#xD;
&#xD;
This implementation returns 'false' (temporary implementation).</description>
            <argument name="instantaneously">
                <description>Define if this element has to be deconstructed instantaneously (&quot;magic&quot; action) or not. </description>
                <type>
                    <simple name="boolean"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="getDestinationForWork" abstract="false">
            <description>Returns the nearest reachable destination for this element.&#xD;
&#xD;
This implementation returns the nearest positions outside the urban block.</description>
            <return>
                <type>
                    <class name="agent.world.Destination"/>
                </type>
            </return>
        </method>
        <method name="canBeCreated" abstract="false">
            <description>Returns 'True' if agent has the physical capability to create and build this element.&#xD;
&#xD;
This implementation return 'true' is the agent has the physical capacity to build the urban block. It returns 'false' otherwise.</description>
            <argument name="instantaneously">
                <description>Define if this element has to be built instantaneously (&quot;magic&quot; action) or not. </description>
                <type>
                    <simple name="boolean"/>
                </type>
            </argument>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="buildIt" abstract="false">
            <description>To create and build this element.</description>
            <return name="work">
                <description>The created work.</description>
                <type>
                    <class name="agent.world.Work"/>
                </type>
            </return>
        </method>
        <method name="canBeAlerted" abstract="false">
            <description>Returns 'true' if this element can be alerted.&#xD;
&#xD;
This implementation returns 'true' if this element is not already alerted. It returns 'false' otherwise (urban block is &quot;not alerted&quot;).</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canBeConfined" abstract="false">
            <description>Returns 'true' if this element can be confined. &#xD;
&#xD;
This implementation returns 'true' if this element is not already confined. It returns 'false' otherwise (urban block is &quot;not confined&quot;).</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="canBeEvacuated" abstract="false">
            <description>Returns 'true' if this element can be evacuated.&#xD;
&#xD;
This implementation returns 'true' if this element is not already evacuated. It returns 'false' otherwise (urban block is &quot;not evacuated&quot;).</description>
            <return>
                <type>
                    <simple name="boolean"/>
                </type>
            </return>
        </method>
        <method name="createLinkWith" abstract="false">
            <description>To create a link between this element and a resource node in order to make this element getting some resource.</description>
            <argument name="resourceNode">
                <description>The resource node to get resource from.</description>
                <type>
                    <class name="agent.world.ResourceNode"/>
                </type>
            </argument>
        </method>
    </methods>
</class>
-- **************************************************************************** 
-- To deconstruct a specified set of objects, according to a specified order. 
-- @params: self.params.Work, a masalife list of Work objects
-- @returns: "done" when all objects are deconstructed
--
-- /!\ order is determined by elements' insertion in the table
-- /!\ a deconstructed work disapears
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.deconstruct },
    feedbacks   = { "deconstructed", "deconstructionRunning", "notDeconstructed" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    deconstructionActionRunning = function( self, params ) -- from deconstruct action skill
        Feedback( self.feedbacks.deconstructionRunning, { work = params.work } ) -- return the object that is currently being deconstructed
    end,

    deconstructActionCompleted = function( self, params ) -- from deconstruct action skill
        Feedback( self.feedbacks.deconstructed, { work = params.work } )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
    end,

    impossibleToDeconstruct = function( self, params ) -- called within this skill
        meKnowledge:sendReport( eRC_ObjetNonSupprimable )
        Feedback( self.feedbacks.notDeconstructed, { work = params.work } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
        self.position = {}
    end,

    -- --------------------------------------------------------------------------------
    -- Movemenent toward a position and try to deconstruct each of the given works
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate
        local paramsSize = #self.params.works
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.work = self.params.works[ self.nextTargetIndex ]
                if self.arrived then
                    if self.work:canBeDeconstructed( self.params.instantaneously ) then
                        Activate( skill.links.deconstruct, 1, { work = self.work, instantaneously = self.params.instantaneously } )
                    elseif not self.params.waitForReinforcement then
                        self:impossibleToDeconstruct( { work = self.work } )
                    else
                        meKnowledge:sendReport( eRC_AttenteRenforcement )
                    end
                else
                    self.position = ontology.queries.GetPositionsForWork[ "execute" ]( { work = self.work } )
                    Activate( skill.links.reach, 1, { destination = self.position[ 1 ], urgency = false } )
                end
            else
                Feedback( self.feedbacks.done )
            end
         else 
            Feedback( self.feedbacks.failed )
         end
    end
}
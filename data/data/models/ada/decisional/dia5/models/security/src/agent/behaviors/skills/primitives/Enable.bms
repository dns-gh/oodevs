-- ****************************************************************************
-- To enable a specified set of System objects
-- @params: self.params.systems, a masalife list of System objects
-- @returns: "done" when there is no more systems to enable OR if the list of systems is empty.
--
-- /!\ order is determined by elements' insertion in the table
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.enable },
    feedbacks   = { "enabled", "notEnabled" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    enableActionCompleted = function( self, params ) -- from action
        Feedback( self.feedbacks.enabled, { system = params.system } )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
    end,

    impossibleToEnabled = function( self, params ) -- called within this skill
        Feedback( self.feedbacks.notEnabled, { system = params.system } )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
    end,

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.systems
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.system = self.params.systems[ self.nextTargetIndex ]
                if self.arrived then
                    if self.system:canBeEnabled() then
                        Activate( skill.links.enable, 1, { system = self.system } )
                    else
                        self:impossibleToEnabled( { system = self.system } )
                    end
                else
                    Activate( skill.links.reach, 1, { destination = self.system } )
                end
            else
                Feedback( self.feedbacks.done )
            end
        else
            Feedback( self.feedbacks.failed )
        end
    end
}
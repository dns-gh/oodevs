-- **************************************************************************** 
-- To create a specified set of objects, according to a specified order. 
-- @params: self.params.Work, a masalife list of Work objects
-- @returns: "done" when all objects are created
--
-- /!\ order is determined by elements' insertion in the table
-- ****************************************************************************
rootnode
{
    connections = { skill.links.reach, skill.nodes.Create },
    feedbacks   = { "created" },

    -- -------------------------------------------------------------------------------- 
    -- Once first element is reached, get the next one by incrementing iterator.
    -- --------------------------------------------------------------------------------
    done = function( self ) -- from skill Reach
        self.arrived = true
    end,
    created = function( self, params, additionalParams ) -- from node Alert
        Feedback( self.feedbacks.created, params, additionalParams )
        self.createdWorks[ self.nextTargetIndex ] = additionalParams.work
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.works then
            Feedback( self.feedbacks.done, self.createdWorks )
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.createdWorks = {}
        self.nextTargetIndex = 1
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move toward the current element.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        if self.arrived then -- build the object
            Activate( skill.nodes.Create, 1, { work = self.params.works[ self.nextTargetIndex ] } )
        end -- try to reach populated area
        Activate( skill.links.reach, 1, { destination = self.params.works[ self.nextTargetIndex ] } )
        self.arrived = false
    end
}

-- ****************************************************************************
-- Action of creating an object
-- ****************************************************************************
node "Create"
{
    feedbacks = { "created" },

    select = function( self )
        if not self.params.work:isCreated() then
            self.createdWork = meKnowledge:create( self.params.work )
        else
            Feedback( self.feedbacks.created, { work = self.createdWork } )
        end
    end
}
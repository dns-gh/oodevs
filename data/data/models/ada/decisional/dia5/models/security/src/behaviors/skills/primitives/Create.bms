-- **************************************************************************** 
-- To create a specified set of objects, according to a specified order. 
-- @params: self.params.Work, a masalife list of Work objects
-- @returns: "done" when all objects are created
--
-- /!\ order is determined by elements' insertion in the table
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.create, skill.links.dismount },
    feedbacks   = { "created", "creating" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    createActionRunning = function( self, params, additionalParams ) -- from create action skill
        Feedback( self.feedbacks.creating, { work = additionalParams.work } ) -- return the object created
    end,

    creationActionCompleted = function( self, params, additionalParams ) -- from create action skill
        Feedback( self.feedbacks.created, { work = additionalParams.work } ) -- return the object created
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
        self.dismounted = false
    end,

    dismountActionCompleted = function( self ) -- from dismount action skill
        self.dismounted = true
    end,

    impossibleToCreate = function( self, params ) -- called within this skill
        Feedback( self.feedbacks.notCreated, { work = params.work } )
        self.arrived = false
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.dismounted = false
        self.nextTargetIndex = 1
        self.position = {}
    end,

    -- --------------------------------------------------------------------------------
    -- Move and create current work
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.works
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.work = self.params.works[ self.nextTargetIndex ]
                if self.arrived then
                    if meKnowledge:canDismount() and not self.dismounted then
                         Activate( skill.links.dismount, 1 )
                         return -- until agent is dismounted
                    end
                    if self.work:canBeCreated() then
                        Activate( skill.links.create, 1, { work = self.work } )
                    elseif not self.params.waitForReinforcement then
                        self:impossibleToCreate( { work = self.work } )
                    else
                        meKnowledge:sendReport( eRC_AttenteRenforcement )
                    end
                else
                    self.position = ontology.queries.GetPositionsForWork[ "execute" ]( { work = self.work } ) -- returns a table with only one position
                    Activate( skill.links.reach, 1, { destination =  self.position[ 1 ], urgency = false } )
                end
            else
                Feedback( self.feedbacks.done )
            end
         else 
            Feedback( self.feedbacks.failed )
         end
    end
}
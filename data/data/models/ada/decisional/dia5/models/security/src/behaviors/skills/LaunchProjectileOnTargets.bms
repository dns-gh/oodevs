-- **************************************************************************** 
-- To launch projectile on successive targets
-- @params: self.params.targets, the set of targets to launch projectile on.
-- @returns: "done" when all target have been visited
-- ****************************************************************************
rootnode
{
    connections = { skill.links.launchProjectile },
    feedbacks   = { "done" },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    done = function( self, params, additionalParams ) -- call by 'Launchprojectile' skill
        self.nextTargetIndex = self.nextTargetIndex + 1
        if self.nextTargetIndex > #self.params.targets then
            Feedback( self.feedbacks.done )
        end
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.nextTargetIndex = 1
    end,
 
    -- -------------------------------------------------------------------------------- 
    -- Create the planned object, then operate it.
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        -- no targets to launch projectile on
        if not next( self.params.targets ) then
            Feedback( self.feedbacks.failed )
            return -- no use to check end of the skill
        end

        -- Launch projectile on current target
        Activate( skill.links.launchProjectile, 1, { target = self.params.targets[ self.nextTargetIndex ], 
                                                     position = self.params.position, 
                                                     quantity = self.params.quantity, 
                                                     dotationType = self.params.dotationType } )
    end
}
-- **************************************************************************** 
-- To order to follow a set of specified agents
-- @params: self.params.subordinates, the subordinate unit to be ordered to move
-- @params: self.missionMoveToName: the move to mission name
-- @params: self.params.waypoints: the route to move along.
-- ****************************************************************************
rootnode
{
    connections = { skill.nodes.issueMoveToOrder },
    feedbacks = { "orderIssued", "orderNotIssued" },

    -- -------------------------------------------------------------------------------- 
    -- Feedbacks and slots
    -- --------------------------------------------------------------------------------
    orderActionCompleted = function( self, params ) -- call by orderToFollow action skill
        Feedback( self.feedbacks.orderIssued, { subordinate = params.subordinate }  )
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    impossibleToIssueOrder = function( self, params ) -- call in this skill
        meKnowledge:sendMessage( "The subodinate cannot perform the issued mission" )
        Feedback( self.feedbacks.orderNotIssued, { subordinate = params.subordinate } )
        self.nextTargetIndex = self.nextTargetIndex + 1
    end,

    -- -------------------------------------------------------------------------------- 
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.nextTargetIndex = 1
        self.missionMoveToName = "agent.behaviors.tasks.MoveTo"
    end,

    -- -------------------------------------------------------------------------------- 
    -- Move to each element and ask to follow me
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate -- lua optim

        local paramsSize = #self.params.subordinates
        if paramsSize > 0 then 
            if self.nextTargetIndex <= paramsSize then
                self.currentSubordinate = self.params.subordinates[ self.nextTargetIndex ]
                if self.currentSubordinate:canPerformTask( self.missionMoveToName ) then
                    Activate( skill.nodes.issueMoveToOrder, 1, { subordinate = self.currentSubordinate, 
                                                                 missionName = self.missionMoveToName, 
                                                                 waypoints   = self.params.waypoints } )
                else
                    self:impossibleToIssueOrder( { subordinate = self.currentSubordinate } )
                end
            else -- each order has been sent
                Feedback( self.feedbacks.done )
            end
         else 
            Feedback( self.feedbacks.failed )
         end
    end
}

-- **************************************************************************** 
-- To make subordinate move toward an objective
-- @params: self.params.subordinate, a masalife subordinate object
-- @returns: orderActionCompleted when the order has been sent to the subordinate.
-- ****************************************************************************
node "issueMoveToOrder"
{
    feedbacks = { "orderActionCompleted" },

    select = function( self )
        if meKnowledge:issueMoveToOrder( self.params.missionName, 
                                         self.params.subordinate, 
                                         self.params.waypoints ) then
            Feedback( self.feedbacks.orderActionCompleted )
        end
    end,

}
-- ****************************************************************************
-- To disable a specified set of System objects
-- @params: self.params.systems, a masalife list of System objects
-- @returns: "done" when there is no more systems to disable OR if the list of systems is empty.
--
-- /!\ order is determined by elements' insertion in the table
-- ****************************************************************************
rootnode 
{
    connections = { skill.links.reach, skill.links.disable },
    feedbacks   = { "disabled" },

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    done = function( self, params ) -- from reach skill
        self.arrived = true
    end,

    disableActionCompleted = function( self, params ) -- from disable skill
        Feedback( self.feedbacks.disabled, { system = params.system } )
        self.nextTargetIndex = self.nextTargetIndex + 1
        self.arrived = false
        if self.nextTargetIndex > #self.params.systems then
            Feedback( self.feedbacks.done )
        end
    end,

    -- --------------------------------------------------------------------------------
    -- Init
    -- --------------------------------------------------------------------------------
    create = function( self )
        self.arrived = false
        self.nextTargetIndex = 1
    end,

    -- --------------------------------------------------------------------------------
    -- Feedbacks
    -- --------------------------------------------------------------------------------
    activate = function( self )
        local Activate = Activate

        local paramsSize = #self.params.systems
        if self.nextTargetIndex <= paramsSize then
            if paramsSize > 0 then
                self.system = self.params.systems[ self.nextTargetIndex ]
                if self.arrived then
                    Activate( skill.links.disable, 1, { system = self.system } )
                else
                    Activate( skill.links.reach, 1, { destination = self.system } )
                end
            else
                meKnowledge:sendReport( eRC_NoKeyPositionsFoundInArea )
                Feedback( self.feedbacks.failed )
            end
        end
    end
}
// *****************************************************************************
// globals
// *****************************************************************************
signatures
{   
    // RC
    V                                A::DEC_RC     ( I /*E_TypeRC*/, * /*Paramètres dépendant du type de RC*/ );
    V                                A::DEC_Message( I /*E_TypeRC*/, * /*Paramètres dépendant du type de RC*/ );
    V                                A::DEC_Warning( I /*E_TypeRC*/, * /*Paramètres dépendant du type de RC*/ );
                                               
    // Accesseurs                     
    S /*T_ListePions*/               A::DEC_Automate_PionsAvecPC         ();
    S /*T_ListePions*/               A::DEC_Automate_PionsSansPC         ();
    A /*T_Pion*/                     A::DEC_Automate_PionPC              ();
    S /*T_ListeAutomates*/           A::DEC_Automate_AutomatesSubordonnes();
    
    B                                A::DEC_AutomateSuperieur_EstEmbraye ();
        
    
    S /*T_ListePions*/               A::DEC_Automate_PionsDeAutomateAvecPC( A /*T_Automate*/ );
    S /*T_ListePions*/               A::DEC_Automate_PionsDeAutomateSansPC( A /*T_Automate*/ );
    A /*T_Pion*/                     A::DEC_Automate_PionPCDeAutomate     ( A /*T_Automate*/ );    
                                                                           
    // Missions
    A /*T_Mission_Pion*/             A::DEC_MRT_CreerMissionPion          ( A /*T_Pion*/, I /*T_Mission_Pion_XXX*/ );
    V                                A::DEC_MRT_Valide                    ();
    V                                A::DEC_MRT_AffecteFuseaux            ( S /*T_ListePions*/ );
    A /*T_Mission_Pion*/             A::DEC_CDT_CreerMissionPion          ( A /*T_Pion*/, I /*T_Mission_Pion_XXX*/ );
    V                                A::DEC_CDT_DonnerMissionPion         ( A /*T_Mission_Pion*/ );    
    A /*T_Mission_Automate*/         A::DEC_CreerMissionAutomate          ( A /*T_Automate*/, I /*T_Mission_Automate_XXX*/ );
    V                                A::DEC_DonnerMissionAutomate         ( A /*T_Mission_Automate*/ );
    V                                A::DEC_AssignerFuseauAMissionAutomate( U /*T_Fuseau*/, A /*T_Mission_Automate_XXX*/ );
    V                                A::DEC_AssignerDirectionAMissionAutomate( U /*T_Direction*/, A /*T_Mission_Automate_XXX*/ );
    S /*T_ListeFuseaux*/             A::DEC_DecouperFuseau                ( R /*nbr*/ );
                                            
    // Limas / Missions
    B                                A::DEC_NouvelleMission               ();
    V                                A::DEC_FinMission                    ();
    U /*T_Lima*/                     A::DEC_GetLima                       ( I /*E_TypeLima*/ ); // Retourn un T_Lima, ou 0 si pas de lima du type demandé    
    U /*T_Fuseau*/                   A::DEC_Fuseau                        (); // Retourne le fuseau courant
    V                                A::DEC_SetMissionLimaFlag            ( U /*T_Lima*/, B /*bFlag*/ );
    B                                A::DEC_GetMissionLimaFlag            ( U /*T_Lima*/ );
    V                                A::DEC_SetMissionLimaFlagHoraire     ( U /*T_Lima*/, B /*bFlag*/ );
    U /*T_Lima*/                     A::DEC_ProchaineLimaHoraireNonFlagee ();    
    // Objets
    B                                A::DEC_ActiverObjet( U /*connaissance objet*/ );    

    // Connaissance                  
    V                                A::DEC_Connaissances_PartageConnaissancesAvec                 ( A /*T_Automate*/, R /*delai en minutes*/ );    
    V                                A::DEC_Connaissances_PartageConnaissancesDansZoneAvec         ( A /*T_Automate*/, U /*centre du cercle de la zone*/, R /*rayon du cercle de la zone*/ );    
    S /*T_ListeConnaissancesObjet*/  A::DEC_Connaissances_ObjetsDansCercle                         ( U /*T_Point centre du cercle*/, R /*rayon*/, * /*E_TypeObjects*/ );    
    S /*T_ListeConnaissancesObjet*/  A::DEC_Connaissances_ObjetsDansZone                           ( U /*T_Localisation zone*/, * /*E_TypeObjects*/ );    
    S /*T_ListeConnaissancesObjet*/  A::DEC_Connaissances_ObjetsDansFuseau                         ( * /*E_TypeObjects*/ );            
    S /*T_ListeConnaissancesAgent*/  A::DEC_Connaissances_UnitesEnnemiesVivantesPercuesParPion     ( A /*T_Pion*/ );    
    S /*T_ListeConnaissancesAgent*/  A::DEC_Connaissances_UnitesAmiesDansZone                      ( U /*T_Localisation*/ );            
    S /*T_ListeLocalisations*/       A::DEC_Connaissances_TrierZonesSelonPresenceEnnemisDebarques  ( S /*T_ListeLocalisations*/ ); // Retourne liste moins ouvert -> plus ouvert
    S /*T_ListeLocalisations*/       A::DEC_Connaissances_TrierZonesSelonPresenceEnnemisEmbarques  ( S /*T_ListeLocalisations*/ ); // Retourne liste moins ouvert -> plus ouvert
    I /*E_NiveauPerception*/         A::DEC_ConnaissanceAgent_NiveauPerceptionMax                ( U /*T_ConnaissanceAgent*/ ); // Retourne le niveau de perception MAX d'une connaissance (le plus haut niveau ayant été associé à cette connaissance depuis sa création)    
    R                                A::DEC_ConnaissanceAgent_EtatOps                            ( U /*T_ConnaissanceAgent*/ ); // Retourne une valeur entre 0 et 1
    B                                A::DEC_ConnaissanceAgent_EstDetruitTactique                 ( U /*T_ConnaissanceAgent*/ );
    U /*T_Point*/                    A::DEC_ConnaissanceAgent_Position                           ( U /*T_ConnaissanceAgent*/ );
    B                                A::DEC_ConnaissanceAgent_EstEnVol                           ( U /*T_ConnaissanceAgent*/ );
    B                                A::DEC_ConnaissanceAgent_EstPrisonnier                      ( U /*T_ConnaissanceAgent*/ );    
    B                                A::DEC_ConnaissanceAgent_EstMort                            ( U /*T_ConnaissanceAgent*/ );    
    B                                A::DEC_ConnaissanceAgent_EstValide                          ( U /*T_ConnaissanceAgent*/ );        
    I /*E_ValiditeRequete*/          A::DEC_ConnaissanceAgent_Verrouiller                        ( U /*T_ConnaissanceAgent*/ );
    V                                A::DEC_ConnaissanceAgent_Deverrouiller                      ( U /*T_ConnaissanceAgent*/ );        
    R                                A::DEC_ConnaissanceAgent_DangerositeSurPion                 ( U /*T_ConnaissanceAgent*/ , A /*T_Pion*/ ); // Retourne la dangerosité, entre 1 et 2
    R                                A::DEC_ConnaissanceAgent_DangerositeSurConnaissance         ( U /*T_ConnaissanceAgent*/ , U /*T_ConnaissanceAgent*/ ); // Retourne la dangerosité, entre 1 et 2        
    B                                A::DEC_ConnaissanceObjet_EstValide                          ( U /*T_ConnaissanceObjet*/  );
    U /*T_Localisation*/             A::DEC_ConnaissanceObjet_Localisation                       ( U /*T_ConnaissanceObjet*/ );    
    B                                A::DEC_ConnaissanceObjet_EstReconnu                         ( U /*T_ConnaissanceObjet*/ );        
    I /*E_Tristate*/                 A::DEC_ConnaissanceObjet_EstContourne                       ( U /*T_ConnaissanceObjet*/ );
    B                                A::DEC_ConnaissanceObjet_EstObstacleDeManoeuvreActif        ( U /*T_ConnaissanceObjet*/ );
    B                                A::DEC_ConnaissanceObjet_EstObstacleDeManoeuvre             ( U /*T_ConnaissanceObjet*/ );
    X /*E_TypeObject*/               A::DEC_ConnaissanceObjet_Type                               ( U /*T_ConnaissanceObjet*/ );
    R                                A::DEC_ConnaissanceObjet_LargeurSiteFranchissement          ( U /*T_ConnaissanceObjet*/ );
                                     
    // Geometrie                     
    S /*T_ListeLocalisations*/       A::DEC_Geometrie_DecoupeFuseauEnTroncons                  ( R /*profondeur des segments en m*/ );
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPositionObstacle                 ( U /*vCircleCenter*/, X /*Object type*/, R /*rayon*/ );
    S /*T_ListeLocalisations*/       A::DEC_Geometrie_DecoupeLocalisation                      ( U /*T_Localisation*/, R /*nbr part*/, I /*E_LocalisationFunctionsReturnCode*/ );
    U /*T_Point*/                    A::DEC_Geometrie_CalculerBarycentreLocalisationDansFuseau ( U /*T_Localisation*/, I /*E_LocalisationFunctionsReturnCode*/ );
    B                                A::DEC_Geometrie_EstPointDansFuseau                       ( U /*T_Point*/ );
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPointArrivee                     ();
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPointArriveePourPion             ( A /*T_Pion*/ );
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPointDepart                      ();           
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPositionParRapportALimaDansFuseau( U /*T_Lima*/, R /*dist avant lima*/, U /*fuseau*/ );
    U /*T_ListePoints*/              A::DEC_Geometrie_CalculerPositionsParRapportALima         ( U /*T_Lima*/, R /*dist avant lima*/, R /*nb points*/ );
    U /*T_ListePoints*/              A::DEC_Geometrie_PositionsParRapportALocalisation         ( S /*T_ListePions*/, U /*T_Localisation*/, U /*dirdanger*/, R /*Dist max*/ ); // Retourne T_ListePoints à EFFACER !!!
    U /*T_CalculLignesAvantArriere*/ A::DEC_Geometrie_StartCalculLignesAvantEtArriere          ( S /*T_ListePions*/ );
    U /*T_CalculLignesAvantArriere*/ A::DEC_Geometrie_StartCalculAutomateLignesAvantEtArriere  ( S /*T_ListeAutomates*/ );
    V                                A::DEC_Geometrie_StopCalculLignesAvantEtArriere           ( U /*T_CalculLignesAvantArriere*/ );  
    R                                A::DEC_Geometrie_CalculerDistanceLigneAvant               ( U /*T_CalculLignesAvantArriere*/, A /*T_Pion*/ );
    R                                A::DEC_Geometrie_CalculerAutomateDistanceLigneAvant       ( U /*T_CalculLignesAvantArriere*/, A /*T_Automate*/ );
    R                                A::DEC_Geometrie_CalculerDistanceLigneArriere             ( U /*T_CalculLignesAvantArriere*/, A /*T_Pion*/ );
    R                                A::DEC_Geometrie_CalculerAutomateDistanceLigneArriere     ( U /*T_CalculLignesAvantArriere*/, A /*T_Automate*/ );
    U /*T_Point */                   A::DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( U /*T_Localisation localisation*/ );
    U /*T_Point*/                    A::DEC_Geometrie_CalculerPointProcheLocalisationNonClippeeDansFuseau   ( U /*T_Localisation localisation*/ );
    A                                A::DEC_Geometrie_PionDevant                               ( S /*T_ListePions*/, U /*T_Direction*/ );
    A                                A::DEC_Geometrie_PionDerriere                             ( S /*T_ListePions*/, U /*T_Direction*/ );
    R /* entre 0 et 1*/              A::DEC_Geometrie_CalculerRetard                           ( U /*T_Fuseau*/,  S /*T_ListeAutomates*/, U /*T_Lima*/ ); 
    R /* entre 0 et 1*/              A::DEC_Geometrie_CalculerRetardSurObjectifs               ( U /*T_Fuseau*/,  S /*T_ListeAutomates*/, S /*list of T_Objectif*/ ); 

    // Gestion des pions
    B                                A::DEC_Pion_ChangeAutomate( A /*T_Pion*/, A /*T_Automate*/ );

    B                                A::DEC_Automate_EstEmbraye                                       ();
    B                                A::DEC_Automate_PionEstContamine                                 ( A /*T_Pion*/ );
    B                                A::DEC_Automate_PionEstNeutralise                                ( A /*T_Pion*/ );
    U /*T_Point*/                    A::DEC_Automate_PionPosition                                     ( A /*T_Pion*/ );
    B                                A::DEC_Automate_PionRelevePion                                   ( A /*T_Pion*/, A /*T_Pion*/ );
    B                                A::DEC_Automate_PionPeutReleverPion                              ( A /*T_Pion*/, A /*T_Pion*/ );
    B                                A::DEC_Automate_EstPointDansFuseauPion                           ( U /*T_Position*/, A /*T_Pion*/ );
    U /*T_Point*/                    A::DEC_Automate_CalculerPositionParRapportALimaPourPion          ( U /*T_Lima*/, R /*dist avant lima*/, B /*retour*/, A /*T_Pion*/);
    B                                A::DEC_Automate_CalculerPointProcheLocalisationDansFuseauPourPion( U /*T_Localisation localisation*/, U /*T_Point result*/, A /*T_Pion*/ );    
    R /* temps en minutes */         A::DEC_Automate_PionTempsPourParcourirDistanceEnLigneDroite      ( A /*T_Pion*/, R /*distance en m*/ );    
    
    // Objets
    B                                A::DEC_Automate_PionPeutConstruireObjet             ( A /*T_Pion*/, X /*E_TypeObject*/ );
    B                                A::DEC_Automate_PionPeutConstruireContournementObjet( A /*T_Pion*/, U /*T_ConnaissanceObjet*/ );
    B                                A::DEC_Automate_PionPeutDetruireObjet               ( A /*T_Pion*/, U /*T_ConnaissanceObjet*/ );   
    
    V                                A::DEC_CreerObjetSansDelais   ( X /*Objet type*/, U/*localisation*/, * );
    V                                A::DEC_DetruireObjetSansDelais( U /*T_ConnaissanceObjet*/ );

    // Logistique
    A /*T_Automate*/                 A::DEC_Automate_TC2              (); // ATTENTION : La valeur de retour peut être nulle     
    V                                A::DEC_DemandeDeRavitaillement   ();
    
    // Connaissance Populations
    R                                    A::DEC_ConnaissancePopulation_Domination ( U /*T_ConnaissancePopulation*/, I /*E_ValiditeRequete&*/ );
    B                                    A::DEC_ConnaissancePopulation_EstDansZone( U /*T_ConnaissancePopulation*/, U /*T_Localisation*/ );
    S /*T_ListeConnaissancesPopulation*/ A::DEC_Connaissances_Populations         ();

    // Renseignement eni
    R                                  A::DEC_Rens_PourcentageEnnemisDebarquesDansFuseau  ( U /*T_Fuseau*/ );
    R                                  A::DEC_Rens_PourcentageEnnemisEmbarquesDansFuseau  ( U /*T_Fuseau*/ );
    R                                  A::DEC_Rens_PourcentageEnnemisDebarquesDansZone    ( U /*T_Localisation*/ );
    R                                  A::DEC_Rens_PourcentageEnnemisEmbarquesDansZone    ( U /*T_Localisation*/ );
    S /*T_ListeLocalisations*/         A::DEC_Rens_TrierZonesSelonPresenceEnnemisDebarques( S /*T_ListeLocalisations*/ ); // Retourne liste moins ouvert -> plus ouvert 
    S /*T_ListeFuseaux*/               A::DEC_Rens_TrierFuseauxSelonPresenceEnnemisDebarques( S /*T_ListeFuseaux*/ ); // Retourne liste moins ouvert -> plus ouvert 
    S /*T_ListeFuseaux*/               A::DEC_Rens_TrierFuseauxSelonPresenceEnnemisEmbarques( S /*T_ListeFuseaux*/ ); // Retourne liste moins ouvert -> plus ouvert
    B                                  A::DEC_Rens_AmiSurFlanc                            ( U /*T_Fuseau*/ );
    U /*T_Direction*/                  A::DEC_Rens_CalculerDirectionCouverture            ( U /*T_Point*/, U /*T_Fuseau*/ );



    // Debug
    V                                A::DEC_DebugAffichePoint ( U /*T_Point*/ );
    V                                A::DEC_DebugAffichePoints( U /*T_ListePoints*/ );
    V                                A::DEC_Debug( X );
    V                                A::DEC_Trace( X );    
    V                                A::DEC_DecisionalState   ( X, X );

    // Migration Representations
    S                                A::DEC_GetCategory( X );
    V                                A::DEC_RemoveFromCategory( X, A );
    V                                A::DEC_DeleteRepresentation( A );

    A                                A::DEC_GetMission( A );
    V                                A::DEC_SetMission( A, A );
    A                                A::DEC_GetAutomate( A );
    X                                A::DEC_GetSzName( A );
    U /*T_Direction */               A::DEC_GetDirectionEnnemi( A );
    V                                A::DEC_Copie_DirectionDanger( U /*T_Direction*/, A );
}





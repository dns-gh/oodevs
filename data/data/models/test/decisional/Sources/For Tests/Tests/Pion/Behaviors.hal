use_priority        =   no;
max_instances       =   10;
max_activations     =   10;

actuators = deplacement, ordre, toto;

/*behavior BEH_Cock( T_ConnaissanceAgent prout )
{
    DEC_ConnaissanceAgent_EstValide( prout );
}*/



behavior Crash( float prout, T_Point bite, E_TypeLima prout2 )
{
        //TEsT CRASH 
        T_Direction dir;
        DEC_Geometrie_ConvertirPointEnLocalisation( dir );

}

default Default()
{    
//    DEC_RC( eRC_SurLima,eTypeLima_LD ); 
    if( DEC_Agent_EstInstalle() )
        DEC_Debug( "Installe" );

    if( DEC_Agent_EstDesinstalle() )
        DEC_Debug( "Desinstalle" );

   
/*
    T_PerceptionRadar cock  = DEC_Perception_ActiverRadarSurLocalisation( eRadarType_Radar, DEC_Geometrie_ConvertirPointEnLocalisation( DEC_Agent_Position() ) );
    T_PerceptionRadar cock2 = DEC_Perception_ActiverRadarSurLocalisation( eRadarType_Radar, DEC_Geometrie_ConvertirPointEnLocalisation( DEC_Agent_Position() ) );
    
    DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_Radar, cock2 );   
    DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_Radar, cock2 );
    DEC_Perception_DesactiverRadarSurLocalisation( eRadarType_Radar, cock );
*/    
    

    //behavior Crash( 5, 0, eTypeLima_LCA );
    DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau();

    if( DEC_Agent_EstMort() )
        DEC_Debug( "OMG, I'M DEAD !!" );    
    if( DEC_Agent_EtatOps() == 0 )
        DEC_Debug( "Shit, I'm broken !!" );
        
    T_ListeConnaissancesPopulation popus = DEC_Connaissances_CollisionsPopulations();
    if( DIA_Size( popus ) > 0 )
    {
        DEC_Debug( "Collision avec " + FloatToString( DIA_Size( popus ) ) + " populations" );
        DEC_Debug( "Points d'esquive à 500m... cherchez les croix" );

        T_ListePoints points = DEC_Geometrie_CreerListePoints();
        E_ValiditeRequete   nValidite;
        with( p in popus )
        {
            T_Point point = DEC_Geometrie_CalculerPositionSureteAvecPopulation( p, 500, nValidite );
            DEC_ListePoints_PushBack( points, point );
        }
        DEC_DebugAffichePoints( points );
    }
             

    E_ValiditeRequete   nValidite;
    
    T_ListeConnaissancesPopulation pop2 = DEC_Connaissances_Populations();
    if( DIA_Size( pop2 ) > 0 )
    {
        with( p in pop2 )
        {
            if( DEC_ConnaissancePopulation_EstPercueParUnite( p, nValidite ) )
                DEC_Debug( "-- Population percue" );
        }
    }
   
    persistent T_Action              popuFire;
    persistent E_EtatActionTirDirect nTirDirectState;
    
    if( popuFire != 0 )
    {
        DEC_StopAction( popuFire );
        popuFire = 0;
    }
    with( x in popus )
    {
        DEC_ConnaissancePopulation_Reconnaitre( x, nValidite );
        float dangerosite = DEC_ConnaissancePopulation_Dangerosite( x, nValidite );
        DEC_Debug( "Dangerosite : " + FloatToString( dangerosite ) );
        
        if( popuFire == 0 )
            popuFire = DEC_StartTirSurPopulation( nTirDirectState, x );
    }        
    
    popus = DEC_Connaissances_PopulationsPrenantAPartie();
    if( DIA_Size( popus ) > 0 )
        DEC_Debug( "Pris à partie par " + FloatToString( DIA_Size( popus ) ) + " populations" );
    

    //DEC_Agent_ChangeEtatOperationnel( eEtatOp_DetruitTotalement ); 

    persistent float i = 0;
        
    if( i == 10 )
        DEC_Agent_ChangeDisponibiliteAuTirIndirect( eDisponibiliteAuTir_PretAuTir );
    else if( i == 20 )
        DEC_Agent_ChangeDisponibiliteAuTirIndirect( eDisponibiliteAuTir_Indisponible );
    else if( i > 20 )
    {
        i = 0;
        DEC_Agent_ChangeDisponibiliteAuTirIndirect( eDisponibiliteAuTir_None );        
    }
    i++;
    
    
    persistent float j = 10; 
    if( j == 10 )
        DEC_Agent_ActiverRalentissementParPopulation();
    else if( j == 20 ) 
    {
        DEC_Agent_DesactiverRalentissementParPopulation();
        j = 0;
    }
    j++;
        

    if( DEC_NouvelleMission() )
        DEC_Debug( "DEC_NouvelleMission" );

    T_Lima lima = DEC_GetLima( eTypeLima_LC );
    if( lima != 0 )
        DEC_Debug( "Lima flag : " + BoolToString( DEC_GetMissionLimaFlag( lima ) ) );

    if( DEC_NecessiteEvacuationBlesses( myself ) )
        DEC_Debug( "-== Necessite Evacuation Blesses ==-" );
        
//    DEC_RC( eRC_PreparationMission );
//    DEC_Message( eRC_PreparationMission, 654 );

    /*
    selection carreux;
    for( float i = 0 ; i < 1000; ++i )
    	DIA_PushBack( carreux, myself );
    */
    
    /*
    DEC_Debug( "DEC_Agent_PeutConstruireObjet " + BoolToString( DEC_Agent_PeutConstruireObjet( eTypeObjectBouchonMines ) ) );
    DEC_Debug( "DEC_Agent_PeutDetruireObjet "   + BoolToString( DEC_Agent_PeutDetruireObjet( eTypeObjectBouchonMines ) ) );
    DEC_Debug( "DEC_Agent_PeutValoriserObjet "  + BoolToString( DEC_Agent_PeutValoriserObjet( eTypeObjectBouchonMines ) ) );
    DEC_Debug( "DEC_Agent_PeutActiverObjet "    + BoolToString( DEC_Agent_PeutActiverObjet( eTypeObjectBouchonMines ) ) );    
    */
               
                  
//    T_ListeConnaissancesAgent perceivedAgents = DEC_Connaissances_AgentsPercus();
//    DEC_Debug( FloatToString( DIA_Size( perceivedAgents ) ) );

    /*
    persistent T_ListePoints points = DEC_Geometrie_CreerListePoints();
    DEC_ListePoints_PushBack( points, DEC_Geometrie_PositionAleatoireDansCercle( DEC_Agent_Position(), 800 ) );
    DEC_DebugAffichePoints( points );
    */

    // DEC_Warning( eRC_Trace, "cock" );
    // DEC_RC( eRC_Trace, "cock" );
    
    // DEC_RC( eRC_ReussiteRenforcement, myself, myself.automate_ );
    

    // DEC_Debug( FloatToString( DIA_Size( DEC_Renforts() ) ) + " Renforts" );
//    DEC_Agent_ChangeEtatRapportDeForce   ( eEtatRapportDeForce_Neutre );
    //DEC_Agent_ChangeEtatROE              ( eEtatROE_TirSurRiposte );
    //DEC_Agent_ChangeEtatCombatDeRencontre( eEtatCombatDeRencontre_Esquive );
    
//  DEC_Copie_Point( DEC_Agent_Position(), DEC_Agent_Direction() );
//  DEC_Copie_Point( DEC_Agent_Direction(), DEC_Agent_Direction() );

//    T_ListeConnaissancesObjet test = DEC_Connaissances_Objets( eTypeObjectBouchonMines );
//    DEC_Debug( FloatToString( DIA_Size( test ) ) );

    //DEC_Debug( BoolToString( DEC_Agent_EstMilice() ) );

    
    //DEC_Geometrie_PositionAleatoireSurCercle   ( DEC_Agent_Position(), 800 );
    //DEC_Geometrie_PositionAleatoireDansCercle  ( DEC_Agent_Position(), 800 );
    
    //DEC_DemandeDeRavitaillement();
    
    /*T_ListeConnaissancesAgent fusse = DEC_Connaissances_AgentsPotentiellementDangereux();
    with( x in fusse )
    {
        E_ValiditeRequete   nValidite;
        E_NiveauPerception nPerceptionLevel = DEC_ConnaissanceAgent_NiveauPerceptionMax( x, nValidite );
        DEC_Debug( "Pot dangereux : " + EnumToString( nPerceptionLevel, E_NiveauPerception ) );
    }    */

/*    T_ListeConnaissancesObjet fusse2 = DEC_Connaissances_CollisionsObjets();
    DEC_Debug( "Collisions avec " + FloatToString( DIA_Size( fusse2 ) ) + " objets" );    
    */    
    // DEC_Debug( BoolToString( DEC_Agent_PeutConstruireObjet( eTypeObjectBouchonMines ) ) );
    
    
    
    behavior BEH_GererOrdreConduite();
}

behavior BEH_GererOrdreConduite()
{
    when updated:
    {
        if( DIA_ModuleBegins() )
            DEC_Debug( "Niveau installation " + EnumToString( DEC_Agent_NiveauInstallation(), E_EtatNiveauInstallation ) );
        
    	selection ordres_recus = DIA_GetCategory( "ordres_recus" );
    	with ( x in ordres_recus)
    	{
            E_EtatROEPopulation eRoePopu = DEC_Agent_RoePopulation();
            DEC_Debug( "ROE Population was ==> " + EnumToString( eRoePopu, E_EtatROEPopulation ) );

    		Rep_OrdreConduite ordre = x;
			switch ( ordre.__type_ )
			{
                case Rep_OrderConduite_MettreTenueNBC:
                {
                    DEC_Agent_MettreTenueProtectionNBC();
                    break;
                }
                case Rep_OrderConduite_EnleverTenueNBC:
                {
                    DEC_Agent_EnleverTenueProtectionNBC();
                    break;
                }
                case Rep_OrderConduite_PasserEnSilenceRadio:
                {
                    DEC_Agent_PasserEnSilenceRadio();
                    break;
                }
                case Rep_OrderConduite_ArreterSilenceRadio:
                {
                    DEC_Agent_ArreterSilenceRadio();
                    break;
                }
                case Rep_OrderConduite_ChangerReglesEngagementPopulation:
                {
                    Rep_OrderConduite_ChangerReglesEngagementPopulation ordreROE = ordre;
                    DEC_Agent_ChangeEtatROEPopulation( ordreROE.orderConduiteChangerReglesEngagementPopulation_ );
            		// on a finit de traiter l'ordre, on le supprime
            		DIA_RemoveFromCategory( "ordres_recus", ordre );
            		DIA_DeleteRepresentation( ordre );
                    break;
                }
            }
        }
    }
    on spontaneous end:
    {
    }  
}

behavior BEH_Defaut( id nDummy )
{         
}

behavior BEH_MoveTo( T_Mission_Pion_Test_MoveTo mission )
{

    when updated:
    {

//        TEsT CRASH 
//        T_Direction dir;
//        DEC_Geometrie_ConvertirPointEnLocalisation( dir );
    
        
    
    /*
        persistent T_PerceptionPoint perception  = 0;
        persistent T_PerceptionPoint perception2 = 0;
        persistent bool         bPerceptionFinished  = false;
        persistent bool         bPerception2Finished = false;
    
        if ( DIA_ModuleBegins() )
        {
       
            perception2 = DEC_Perception_ActiverReconnaissancePoint( DEC_ListePoints_GetAt( mission.itineraire_, 0 ), 1000, bPerception2Finished, 0.68 );
            perception  = DEC_Perception_ActiverReconnaissancePoint( mission.pointDirLocked_, 1000, bPerceptionFinished );
            DEC_Debug( "Debut perception sur " + DEC_PointToString( mission.pointDirLocked_ ) );
            DEC_Debug( "Debut perception sur " + DEC_PointToString( DEC_ListePoints_GetAt( mission.itineraire_, 0 ) ) );
        }
        
        if ( bPerceptionFinished == true && perception != 0 )
        {
            DEC_Perception_DesactiverReconnaissancePoint( perception );
            DEC_Debug( "Fin perception sur " + DEC_PointToString( mission.pointDirLocked_ ) );
            perception = 0;
        }
        
        if ( bPerception2Finished == true && perception2 != 0 )
        {
            DEC_Perception_DesactiverReconnaissancePoint( perception2 );
            DEC_Debug( "Fin perception sur " + DEC_PointToString( DEC_ListePoints_GetAt( mission.itineraire_, 0 ) ) );
            perception2 = 0;
        }
   */
        persistent T_Itineraire            itineraire = 0;
        persistent T_Action                actionMove;
        persistent E_EtatActionDeplacement nEtatDeplacement;
               
        if( itineraire == 0 )
        {
            DEC_Debug( "itineraire == 0" );
        
            itineraire = DEC_CreerItineraireListe( mission.itineraire_, mission.typeItineraire_ );
            //itineraire = DEC_CreerItineraireListe( mission.itineraire_, eTypeItiDeminage );
            //itineraire = DEC_CreerItineraireListe( mission.itineraire_, ePathSurete, ePathIgnoreAll, ePathInfoEvitement );
            //itineraire = DEC_CreerItineraire( DEC_Agent_Position(), nTypePath, nTypePathIgnore, nTypePathInfo );
        }
                       
        E_EtatCalculItineraire nEtatChemin = DEC_Itineraire_Etat( itineraire );
        switch( nEtatChemin )
        {
            case eItineraire_Impossible:
            case eItineraire_Annule:
            {       
                DEC_Debug( "Fin calcul chemin : " + EnumToString( nEtatChemin, E_EtatCalculItineraire ) );
                halt;
            }       
            case eItineraire_CalculEnCours:
            {       
                DEC_Debug( "Calcul chemin en cours" );
                break;
            }       
            case eItineraire_Invalide:
            {       
                DEC_Debug( "Calcul chemin invalide XXXXXXXXXX NE DEVRAIT PAS ARRIVER" );
                break;
            }        
            
            case eItineraire_Valide:
            case eItineraire_Partiel:
            {
                if( actionMove == 0 )
                {
                    if ( mission.verrouillageVision_ == E_Verrouillage_Direction )
                    {
                        DEC_Debug( "Vision verrouillee sur direction" );
                        DEC_Perception_VisionVerrouilleeSurDirection( mission.visionDirection_ );
                    }
                    else if ( mission.verrouillageVision_ == E_Verrouillage_Point )
                    {
                        DEC_Debug( "Vision verrouillee sur position" );
                        DEC_Perception_VisionVerrouilleeSurPoint( mission.visionPoint_ );
                    }
                    else
                    {
                        DEC_Debug( "Vision non verrouillee" );
                        DEC_Perception_VisionNormale();
                    }
                    
                    /*T_ListePoints echantillon = DEC_Geometrie_DecouperItineraire( itineraire, 7 );
                    if( echantillon != 0 )
                        DEC_DebugAffichePoints( echantillon );*/                           

                    actionMove = DEC_StartDeplacement( nEtatDeplacement, itineraire );
                } 
                DEC_Debug( "Deplacement etat : " + EnumToString( nEtatDeplacement, E_EtatActionDeplacement ) );                   

                T_Point vExtr1 = DEC_Itineraire_ExtrapolerPosition( 10, true );
                T_Point vExtr2 = DEC_Itineraire_ExtrapolerPosition( 10, false );

                DEC_Debug( "Points extrapolation : " + DEC_PointToString( vExtr1 ) + " " + DEC_PointToString( vExtr2 ) );
                
                   
                T_ConnaissanceObjet objet;
                float               rDist;
                E_ValiditeRequete   nValidite;
                if( DEC_Itineraire_ProchainObjet( objet, rDist, eTypeObjectPontFlottantContinu, eTypeObjectNuageNBC, eTypeObjectBouchonMines ) )
                    DEC_Debug( "PROCHAIN OBJET SUR L'ITINERAIRE : " + FloatToString( rDist ) + " mètres"  + " Type : " + EnumToString( DEC_ConnaissanceObjet_Type( objet, nValidite ), E_TypeObject ) );
                else
                    DEC_Debug( "PAS D'OBJET SUR L'ITINERAIRE" );                
                
                
                break;
            }
        }
        /*        
        persistent float rBMS = 0;
        rBMS = rBMS + 1;
        if( rBMS == 50 )
        {
            //T_Itineraire chiotte;
            //DEC_Itineraire_Etat( chiotte );   
        
            if( actionMove != 0 )
                DEC_PauseAction( actionMove );
        }
        else if( rBMS == 100 )
        {
            if( actionMove != 0 )
                DEC_ReprendAction( actionMove );
            rBMS = 0;
        } */
            
    }

    on spontaneous end:
    {
        DEC_Debug( "BEH_MoveTo on spontaneous end" );
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        DEC_DetruireItineraire( itineraire );
    }    
}

behavior BEH_MoveTo2( T_Mission_Pion_Test_MoveTo mission )
{
    when updated:
    {
        persistent T_Itineraire         itineraire = DEC_CreerItineraire( mission.visionPoint_, eTypeItiRepli );
        persistent T_Action             actionMove;
        persistent E_EtatActionDeplacement    nEtatDeplacement;
       
        
        E_EtatCalculItineraire nEtatChemin = DEC_Itineraire_Etat( itineraire );
        switch( nEtatChemin )
        {
            case eItineraire_Impossible:
            case eItineraire_Annule:
            {       
                DEC_Debug( "Fin calcul chemin : " + EnumToString( nEtatChemin, E_EtatCalculItineraire ) );
                halt;
            }       
            case eItineraire_CalculEnCours:
            {       
                DEC_Debug( "Calcul chemin en cours" );
                break;
            }       
            case eItineraire_Invalide:
            {       
                DEC_Debug( "Calcul chemin invalide XXXXXXXXXX NE DEVRAIT PAS ARRIVER" );
                break;
            }        
            
            case eItineraire_Valide:
            case eItineraire_Partiel:
            {
                if( actionMove == 0 )
                    actionMove = DEC_StartDeplacement( nEtatDeplacement, itineraire );
                DEC_Debug( "Deplacement etat : " + EnumToString( nEtatDeplacement, E_EtatActionDeplacement ) );                   
                break;
            }
        }
        
        persistent float rBMS = 49;
        rBMS = rBMS + 1;
        if( rBMS == 50 )
        {
            if( actionMove != 0 )
                DEC_PauseAction( actionMove );
        }
        else if( rBMS == 100 )
        {
            if( actionMove != 0 )
                DEC_ReprendAction( actionMove );
            rBMS = 0;
        }   
        
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        DEC_DetruireItineraire( itineraire );
    }    
}

behavior MIS_Pion_Test_MoveTo( T_Mission_Pion_Test_MoveTo mission, id nDummy )
{
    when updated:
    {
        DEC_Agent_SInstaller();

        
        DEC_Geometrie_PositionsEgales( myself.DEC_Agent_Position(), DEC_ListePoints_GetAt( mission.itineraire_, DEC_ListePoints_Size( mission.itineraire_ ) -1 ) );
        
        DEC_Agent_Position();
        
        // Affichage connaissance        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesPrenantAPartie() ) ) + " prenant a partie" );
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesDangereuses() ) ) + " unites ennemies dangereuse" );
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesPercues() ) ) + " unites ennemies vivantes percues" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansFuseau() ) ) + " unites ennemies vivantes percues dans fuseau" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesDansFuseau() ) ) + " unites ennemies vivantes dans fuseau" );
        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesDetecteesDansFuseau() ) ) + " unites detectees dans fuseau" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_RefugiesAProximite( 2000 ) ) ) + " refugies à moins de 2000 metres" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesRenduesAProximite( 2000 ) ) ) + " unites rendues à moins de 2000 metres" );
        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesPercuesParPion( DEC_Pion_PionPC() ) ) ) + " unites ennemies vivantes percues par PC" );                   
        
        DEC_Debug( "Rapfor Local: " + FloatToString( DEC_RapportDeForceLocal() ) );
           
        //T_Point cock = DEC_ListePoints_GetAt( mission.itineraire_, 0 );
        //DEC_Debug( DEC_PointToString( cock ) );
                  
        //DEC_Perception_Furtivite( 0 );
        persistent T_Action                       currentAction;
        persistent E_EtatActionEmbarquerDebarquer nDebarquementReturn;
        
        behavior BEH_MoveTo( mission );
        //behavior BEH_MoveTo2( mission );
        
        //DEC_ModulationVitesse( 0.1 );

        if( DIA_ModuleBegins() )
        {
            if( mission.visionPoint_ != 0 )
            {
                T_Dotation dotDeMerde = DEC_Tir_MunitionPourTirIndirect( eObus_Explosif, mission.visionPoint_ ); 
                
                DEC_Debug( "Valeur dotDeMerde : " + FloatToString( DEC_ValeurDotation( dotDeMerde ) ) );
                        
                DEC_Debug( "Tir indirect max explosif : " + FloatToString( DEC_Tir_PorteeMaxTirIndirect( dotDeMerde ) ) );
                DEC_Debug( "Tir indirect min explosif : " + FloatToString( DEC_Tir_PorteeMinTirIndirect( dotDeMerde ) ) );
                
                DEC_Debug( "Tir indirect max explosif sans tester dotations : " + FloatToString( DEC_Tir_PorteeMaxTirIndirect_SansTesterEtatMunitions( dotDeMerde ) ) );
                DEC_Debug( "Tir indirect min explosif sans tester dotations : " + FloatToString( DEC_Tir_PorteeMinTirIndirect_SansTesterEtatMunitions( dotDeMerde ) ) );
            }
                
            DEC_Connaissances_ObjetAmiLePlusProche( eTypeObjectCampRefugies );
    
        
            T_Lima lima = DEC_GetLima( eTypeLima_LC );
            if( lima != 0 )
            {
                DEC_Automate_SetMissionLimaFlag( lima, true );
                DEC_SetMissionLimaFlag( lima, true );
            }
                
            DEC_InterdireEvacuationAutomatiqueBlesses( myself );
            DEC_Agent_ActiverInvulnerabilitePopulation();
                    
            T_ListePoints echantillon = DEC_Geometrie_DecouperListePoints( mission.itineraire_, 7 );
            if( echantillon != 0 )
                DEC_DebugAffichePoints( echantillon );            
        
            T_Point point = DEC_Geometrie_CalculerEntreeFuseauLaPlusProche();            
            //DEC_DebugAffichePoint( point );
            DEC_RC( eRC_RAS );
                       
            if ( mission.debarque_ )
            {
                DEC_Debug( "DEC_StartDebarquement" );
                currentAction = DEC_StartDebarquement( nDebarquementReturn );
            }
            else
            {
                DEC_Debug( "DEC_StartEmbarquement" );
                //currentAction = DEC_StartAttenteTransporteurs( nDebarquementReturn );
                currentAction = DEC_StartEmbarquement( nDebarquementReturn );
            }
       }
                
        if( mission.debarque_ )
            DEC_Debug( "Etat Debarquement : " + EnumToString( nDebarquementReturn, E_EtatActionEmbarquerDebarquer ) );
        else
            DEC_Debug( "Etat Embarquement : " + EnumToString( nDebarquementReturn, E_EtatActionEmbarquerDebarquer ) );                
            
            
    }
    on spontaneous end:
    {
        //DEC_Perception_Furtivite( 1 );
        DEC_Debug( "MIS_Pion_Test_MoveTo : on spontaneous end" );
        if( currentAction != 0 )
          DEC_StopAction( currentAction );
        
        DEC_AutoriserEvacuationAutomatiqueBlesses( myself );
        DEC_Agent_DesactiverInvulnerabilitePopulation();
    }
}

behavior MIS_Pion_Test_CreateObject( T_Mission_Pion_Test_CreateObject mission, id nDummy )
{
    when updated:
    {
        persistent bool                           bState;
        
        if( DIA_ModuleBegins() )
        {
            DEC_Connaissances_ObjetsDansCercle( DEC_Agent_Position(), 2000, eTypeObjectBouchonMines );
            DEC_Connaissances_ObjetsDansZone( mission.forme_, eTypeObjectBouchonMines );
            DEC_Connaissances_ObjetsDansFuseau( eTypeObjectBouchonMines );
        
            
            E_LocalisationFunctionsReturnCode returnCode;
            T_Point			ptRetour = DEC_Geometrie_CalculerBarycentreLocalisationDansFuseau( mission.forme_, returnCode );
            DEC_Debug( "taaaaaaaaaaaaaah " + EnumToString( returnCode, E_LocalisationFunctionsReturnCode ) );
            if( ptRetour == 0 )
                DEC_Debug( "ptRetour == 0" );
            else
                DEC_Debug( "ptRetour != 0" );
        }
        
        persistent T_PerceptionTirIndirect perception;
        
        if ( DIA_ModuleBegins() )
        {
            perception = DEC_Perception_ActiverPerceptionTirsIndirect( mission.forme_ );
            
            //perception = DEC_Perception_ActiverDetectionObjetLocalisation( mission.forme_, DEC_Agent_Position(), bState, 20 );
            
            DEC_Debug( "Aire forme: " + FloatToString( DEC_Geometrie_AireLocalisation( mission.forme_ ) ) );
            
            DEC_ChangeValeurDotations( eDotation_Munition, mission.param1_ / 100, eMunitionClasse_Obus );
            DEC_ChangeValeurDotations( eDotation_Ration, mission.param1_ / 100 );
            
            // DEC_DebugAffichePoint( DEC_Geometrie_CalculeBarycentreLocalisation( mission.forme_ ) );
            
            T_Point fusse;
            if( DEC_Geometrie_CalculerPointProcheLocalisationDansFuseau( mission.forme_, fusse ) )
                DEC_DebugAffichePoint( fusse );
        }

        persistent T_Action                       currentAction;
        persistent E_EtatActionObjet              nState;
		persistent T_ConnaissanceObjet            repObjet = 0;

        if( DIA_ModuleBegins() )
        {
            //T_Localisation prout = DEC_Geometrie_CreerLocalisationCercle( DEC_Agent_Position(), 800 );
            //currentAction = DEC_StartCreerObjet( nState, repObjet, mission.type_, mission.forme_, mission.param1_, mission.param2_, false );
            
            //currentAction =  DEC_StartControlerZone( mission.forme_, 12000, true );
            
            DEC_CreerObjetSansDelais( mission.type_, mission.forme_, mission.param1_, mission.param2_, false );
        }
        
        DEC_Debug( "Etat : " + EnumToString( nState, E_EtatActionObjet ) );
        if( repObjet != 0 )
        {
            if( currentAction != 0 )
              DEC_StopAction( currentAction );
            currentAction = DEC_StartReprendreTravauxObjet( nState, repObjet );
            DEC_Debug( "MIS_Pion_Test_CreateObject : connaissance retournée" );
        }
        else
            DEC_Debug( "MIS_Pion_Test_CreateObject : pas de connaissance retournée" );
            
            
        // Connaissance
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesDetecteesDansZone              ( mission.forme_ ) ) ) + " unites detectees dans zone" ); 
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesDansZone       ( mission.forme_ ) ) ) + " unites ennemies vivantes dans zone" );
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesPercuesDansZone( mission.forme_ ) ) ) + " unites ennemies vivantes percues dans zone" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesAmiesDansZone                  ( mission.forme_ ) ) ) + " unites amies dans zone" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesVivantesDansCercle( DEC_Geometrie_CalculerBarycentreLocalisation( mission.forme_ ), 2000 ) ) ) + " unites ennemies vivantes dans cercle" );        
        DEC_Debug( FloatToString( DIA_Size( DEC_Connaissances_UnitesEnnemiesDangereusesDansZoneDePion( DEC_Pion_PionPC(), mission.forme_ ) ) ) + " unites ennemies dangereuses pour PC dans zone" );       
        DEC_Debug( BoolToString( DEC_Connaissances_PresenceEnnemieDansCercle( DEC_Geometrie_CalculerBarycentreLocalisation( mission.forme_ ), 2000 ) ) + " unites ennemies dans cercle" );        
                
        // connaissance popu / securisation
        E_ValiditeRequete              nFusse;
        T_ListeConnaissancesPopulation popus = DEC_Connaissances_Populations();
     
        with( x in popus )
        {
            T_Point pPt = DEC_ConnaissancePopulation_PointPlusProche( x, nFusse );
            DEC_Debug( "Pt plus proche : " + DEC_PointToString( pPt ) );
            if( DEC_ConnaissancePopulation_EstDansZone( x, mission.forme_ ) )
                DEC_ConnaissancePopulation_Securiser( x, nFusse );
        }
        
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_CreateObject : on spontaneous end" );
        if( currentAction != 0 )
          DEC_StopAction( currentAction );
          
        DEC_Perception_DesactiverPerceptionTirsIndirect( perception );
        perception = 0;

    }
}

behavior MIS_Pion_Test_DestroyObject( T_Mission_Pion_Test_DestroyObject mission, id nDummy )
{
    when updated:
    {
        persistent T_Action                       currentAction;
        persistent E_EtatActionObjet              nState;

        if( DIA_ModuleBegins() )
        {
            currentAction = DEC_StartDetruireObjet( nState, mission.objet_ );
            //DEC_DetruireObjetSansDelais( mission.objet_ );
        }
        
        DEC_Debug( "Etat : " + EnumToString( nState, E_EtatActionObjet ) );
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_DestroyObject : on spontaneous end" );
        if( currentAction != 0 )
          DEC_StopAction( currentAction );
    }    
}


behavior MIS_Pion_Test_CreateBypass( T_Mission_Pion_Test_CreateBypass mission, id nDummy )
{
    when updated:
    {
        persistent T_Action                       currentAction;
        persistent E_EtatActionObjet              nState;

        if( DIA_ModuleBegins() )
        {
            //currentAction = DEC_StartCreerContournementObjet( nState, mission.objet_ );
            //currentAction = DEC_StartValoriserObjet( nState, mission.objet_ );
            //currentAction = DEC_StartValoriserObjet( nState, mission.objet_ );
            //nState  = DEC_ActiverObjet( mission.objet_ );
            //DEC_Debug( "MIS_Pion_Test_CreateBypass PeutOccuperObjet : " + BoolToString( DEC_ConnaissanceObjet_PeutOccuperObjet( mission.objet_ ) ) );
            //currentAction = DEC_StartOccuperObjet( mission.objet_ );
            currentAction = DEC_StartAnimerObjet( mission.objet_ );
            
            E_ValiditeRequete nFusse;
            
            DEC_ConnaisssanceObjet_ChangeDensitePopulationSortante( mission.objet_, nFusse, 1.5 );
            
            
            DEC_ConnaissanceObjet_Reconnaitre( mission.objet_, nFusse );
            
            if( DEC_ConnaissanceObjet_EstPrepare( mission.objet_, nFusse ) )
                DEC_Debug( "Objet prepare" );
            else
                DEC_Debug( "Objet non prepare" );
                
            if( DEC_ConnaissanceObjet_EstContourne( mission.objet_, nFusse ) )
                DEC_Debug( "Objet contourné" );
            else
                DEC_Debug( "Objet non contourné" );
                
            
            
        }
        
        //DEC_Debug( "Etat : " + EnumToString( nState, E_EtatActionObjet ) );
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_CreateBypass : on spontaneous end" );
        if( currentAction != 0 )
            DEC_StopAction( currentAction );
    }    
}
 
//-----------------------------------------------------------------------------
// CHANGE POSTURE 
//-----------------------------------------------------------------------------
behavior MIS_Pion_Test_ChangePosture( T_Mission_Pion_Test_ChangePosture mission, id nDummy )
{
    persistent bool eActionFinished = true;
    
    if( DIA_ModuleBegins() )
    {
	    DEC_PostureForTest( mission.posture_ );
    }

    if( eActionFinished )
    {
        DEC_Debug( "Fin Changement posture" );
	    halt;
    }
}

//-----------------------------------------------------------------------------
// REINFORCEMENT
//-----------------------------------------------------------------------------
action ACT_1( id nDummy ) using deplacement
{
    when selected:
    {
        if( DIA_ModuleBegins() )
            DEC_Debug( "ACT_1 DIA_ModuleBegins" );
        DEC_Debug( "ACT_1 when selected" );
    }
    on focus loss:
    {
        DEC_Debug( "ACT_1 on focus loss" );
    }
    on spontaneous end:
    {
        DEC_Debug( "ACT_1 on spontaneous end" );
    }
}

action ACT_2( id nDummy ) using deplacement
{
    when selected:
    {
        if( DIA_ModuleBegins() )
            DEC_Debug( "ACT_2 DIA_ModuleBegins" );
        DEC_Debug( "ACT_2 when selected" );        
    }
    on focus loss:
    {
        DEC_Debug( "ACT_2 on focus loss" );        
    }
    on spontaneous end:
    {
        DEC_Debug( "ACT_2 on spontaneous end" );        
    }
}

behavior MIS_Pion_Test_Reinforce( T_Mission_Pion_Test_Reinforce mission, id nDummy )
{
    when updated:
    {
       
       /* if( DIA_ModuleBegins() )
        {
            T_ListeConnaissancesAgent knowledges = DEC_Connaissances_UnitesEnnemiesVivantesPercuesParPion( mission.unite_ );
            with( x in knowledges )
            {
                DEC_Debug( BoolToString( DEC_ConnaissanceAgent_EstValide( x ) ) );
            }
        }*/
        
        if( mission.unite_.mission_ == 0 )
            DEC_Debug( "Unite a renforcer n'a pas de mission" );
        else
            DEC_Debug( "Unite a renforcer a une mission" );
                
        
        if( DIA_ModuleBegins() )
            DEC_Debug( "MIS_Pion_Test_Reinforce DIA_ModuleBegins" );
        DEC_Debug( "MIS_Pion_Test_Reinforce when updated" );    
        
        DEC_ReleverPion( mission.unite_ );
                
        
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_Reinforce on spontaneous end" );        
    }
    
    

    /*DEC_Debug( "MIS_Pion_Test_Reinforcement" );
    if( mission.renforce_ )
    {
        if( DEC_Renforce( mission.unite_ ) )
            DEC_Debug( "Renforcement réussi" );
        else
            DEC_Debug( "Renforcement KO" );
    }
    else
        DEC_AnnuleRenforcement();
    */        
}

action ACT_TirDirect( T_ConnaissanceAgent target, bool bOnlyTransporteurs )
{
    when selected:
    {
        persistent E_EtatActionTirDirect    nTirDirectState;
        persistent T_Action                 currentAction;
        
        if( DIA_ModuleBegins() )
        { 
            if( bOnlyTransporteurs ) 
                currentAction = DEC_StartTirDirect( nTirDirectState, target, 1.0, eTirDirectNormal/*, eMunitionClasse_Obus*/ );
            else
                currentAction = DEC_StartTirDirect( nTirDirectState, target, 1.0, eTirDirectNormal/*, eMunitionClasse_Obus*/ ); 
            return;
        }
/*        if( currentAction != 0 )
        {
            DEC_StopAction( currentAction );
            currentAction = 0;
        }*/
            
        
        E_ValiditeRequete nValidite;
        float rDanger = DEC_ConnaissanceAgent_Dangerosite( target, nValidite );
        if( nValidite == eRequeteValide )
        {
            DEC_Trace( "Dangerosité : " + FloatToString( rDanger ) );
            DEC_Debug( "Dangerosité : " + FloatToString( rDanger ) );
        }
        else
        {
            DEC_Trace( "Connaissance non valide " );
            DEC_Debug( "Connaissance non valide " );
        }

        DEC_Debug( "Etat tir direct : " + EnumToString( nTirDirectState, E_EtatActionTirDirect ) );
        float rPorteeMoiSurLui = DEC_Tir_PorteeMaxPourTirerSurUnite( target, nValidite );
        DEC_Debug( "Portee max myself=>eni : " + FloatToString( rPorteeMoiSurLui ) );
        rPorteeMoiSurLui = DEC_Tir_PorteeMinPourTirerSurUnite( target, nValidite );
        DEC_Debug( "Portee min myself=>eni : " + FloatToString( rPorteeMoiSurLui ) );
        float rPorteeMoiSurLuiDebarque = DEC_Tir_PorteeMaxPourTirerDebarqueSurUnite( target, nValidite );
        DEC_Debug( "Portee max myself=>eni debarque: " + FloatToString( rPorteeMoiSurLuiDebarque ) );
        float rPorteeLuiSurMoi = DEC_Tir_PorteeMaxPourEtreTireParUnite( target, nValidite );
        DEC_Debug( "Portee max eni=>myself: " + FloatToString( rPorteeLuiSurMoi ) );

        rPorteeMoiSurLui = DEC_Tir_PorteeMaxPourTirerSurUnite( target, nValidite, 0.5 );
        DEC_Debug( "Portee max myself=>eni (PH 0.5): " + FloatToString( rPorteeMoiSurLui ) );
        rPorteeMoiSurLui = DEC_Tir_PorteeMinPourTirerSurUnite( target, nValidite );
        DEC_Debug( "Portee min myself=>eni (PH 0.5): " + FloatToString( rPorteeMoiSurLui ) );                
        rPorteeMoiSurLuiDebarque = DEC_Tir_PorteeMaxPourTirerDebarqueSurUnite( target, nValidite, 0.5 );
        DEC_Debug( "Portee max myself=>eni debarque (PH 0.5): " + FloatToString( rPorteeMoiSurLuiDebarque ) );
        rPorteeLuiSurMoi = DEC_Tir_PorteeMaxPourEtreTireParUnite( target, nValidite, 0.5 );
        DEC_Debug( "Portee max eni=>myself (PH 0.5): " + FloatToString( rPorteeLuiSurMoi ) );

        rPorteeMoiSurLui = DEC_Tir_PorteeMaxPourTirerSurUnite( target, nValidite, 0.1 );
        DEC_Debug( "Portee max myself=>eni (PH 0.1): " + FloatToString( rPorteeMoiSurLui ) );        
        rPorteeMoiSurLui = DEC_Tir_PorteeMinPourTirerSurUnite( target, nValidite, 0.1 );
        DEC_Debug( "Portee min myself=>eni (PH 0.1): " + FloatToString( rPorteeMoiSurLui ) );                
        rPorteeMoiSurLuiDebarque = DEC_Tir_PorteeMaxPourTirerDebarqueSurUnite( target, nValidite, 0.1 );
        DEC_Debug( "Portee max myself=>eni debarque (PH 0.1): " + FloatToString( rPorteeMoiSurLuiDebarque ) );
        rPorteeLuiSurMoi = DEC_Tir_PorteeMaxPourEtreTireParUnite( target, nValidite, 0.1 );
        DEC_Debug( "Portee max eni=>myself (PH 0.1): " + FloatToString( rPorteeLuiSurMoi ) );
        
        rPorteeMoiSurLui = DEC_Tir_PorteeMaxPourTirerSurUnite( target, nValidite, 0 );
        DEC_Debug( "Portee max myself=>eni (PH 0): " + FloatToString( rPorteeMoiSurLui ) );        
        rPorteeMoiSurLui = DEC_Tir_PorteeMinPourTirerSurUnite( target, nValidite, 0 );
        DEC_Debug( "Portee min myself=>eni (PH 0): " + FloatToString( rPorteeMoiSurLui ) );                
        rPorteeMoiSurLuiDebarque = DEC_Tir_PorteeMaxPourTirerDebarqueSurUnite( target, nValidite, 0 );
        DEC_Debug( "Portee max myself=>eni debarque (PH 0): " + FloatToString( rPorteeMoiSurLuiDebarque ) );
        rPorteeLuiSurMoi = DEC_Tir_PorteeMaxPourEtreTireParUnite ( target, nValidite, 0 );
        DEC_Debug( "Portee max eni=>myself (PH 0): " + FloatToString( rPorteeLuiSurMoi ) );        

        float rEtatOpsMoi= DEC_Agent_EtatOps();
        DEC_Debug( "Etat OPS: " + FloatToString( rEtatOpsMoi ) );
        DEC_Trace( "Etat OPS: " + FloatToString( rEtatOpsMoi ) );
    
        float rEtatOpsEni = DEC_ConnaissanceAgent_EtatOps( target, nValidite );
        DEC_Debug( "Etat OPS ENI: " + FloatToString( rEtatOpsEni ) );
        DEC_Trace( "Etat OPS ENI: " + FloatToString( rEtatOpsEni ) );
        
        DEC_Debug( "ENI Mort: " + BoolToString( DEC_ConnaissanceAgent_EstMort( target, nValidite ) ) );
        DEC_Trace( "ENI Mort: " + BoolToString( DEC_ConnaissanceAgent_EstMort( target, nValidite ) ) );
    
        float rRapForLocal = DEC_RapportDeForceLocal();
        DEC_Debug( "Rapfor Local: " + FloatToString( rRapForLocal ) );
        DEC_Trace( "Rapfor Local: " + FloatToString( rRapForLocal ) );        
        
        T_Point position = DEC_ConnaissanceAgent_Position( target, nValidite );
        if( nValidite == eRequeteValide )
        {
            bool bEstVisible = DEC_Perception_PointEstVisible(  position );
            if( nValidite == eRequeteValide && bEstVisible )
                DEC_Debug( "Point visible" );
            else
                DEC_Debug( "Point non visible" );
        }

        if( DEC_ConnaissanceAgent_PercoitUnite( target, nValidite ) )
            DEC_Debug( "Percu par target" );
        else
            DEC_Debug( "Non Percu par target" );        
    }
    on focus loss:
    {
        DEC_Debug( "ACT_TirDirect on focus loss" );
    }
    on spontaneous end:
    {
        DEC_Debug( "ACT_TirDirect on spontaneous end" );
        if( currentAction != 0 )
            DEC_StopAction( currentAction );
    }       
}

action ACT_TirIndirect( T_Mission_Pion_Test_Fire mission )
{
    when selected:
    {
        persistent E_EtatActionTirIndirect nEtatTirIndirect;
        persistent T_Action                currentAction;
        
        if( DIA_ModuleBegins() )
        {
            //if( DIA_Size( mission.targets_ ) > 0 )
            //    currentAction = DEC_StartTirIndirectSurConnaissance( nEtatTirIndirect, mission.munitions_, mission.nbIt_, DEC_UserTypeList_GetAt( mission.targets_, 0 ) );
            //else
                currentAction = DEC_StartTirIndirectSurPosition( nEtatTirIndirect, mission.munitions_, mission.nbIt_, mission.point_ );
        }
        DEC_Debug( "Etat tir indirect : " + EnumToString( nEtatTirIndirect, E_EtatActionTirIndirect ) );
    }
    
    on focus loss:
    {
        DEC_Debug( "ACT_TirIndirect on focus loss" );
    }
    on spontaneous end:
    {
        DEC_Debug( "ACT_TirIndirect on spontaneous end" );
        if( currentAction != 0 )
          DEC_StopAction( currentAction );
    }     
    
}

behavior BEH_MoveToTmp( T_Point point )
{
    when updated:
    {
        persistent T_Itineraire           itineraire = 0;
        persistent T_Action                actionMove;
        persistent E_EtatActionDeplacement nEtatDeplacement;
        
        if( itineraire == 0 )
            itineraire = DEC_CreerItineraire( point, eTypeItiAttaque );     
        
        E_EtatCalculItineraire nEtatChemin = DEC_Itineraire_Etat( itineraire );
        switch( nEtatChemin )
        {
            case eItineraire_Impossible:
            case eItineraire_Annule:
            {       
                DEC_Debug( "Fin calcul chemin : " + EnumToString( nEtatChemin, E_EtatCalculItineraire ) );
                halt;
            }       
            case eItineraire_CalculEnCours:
            {       
                DEC_Debug( "Calcul chemin en cours" );
                break;
            }       
            case eItineraire_Invalide:
            {       
                DEC_Debug( "Calcul chemin invalide XXXXXXXXXX NE DEVRAIT PAS ARRIVER" );
                break;
            }        
            
            case eItineraire_Valide:
            case eItineraire_Partiel:
            {
                if( actionMove == 0 )
                    actionMove = DEC_StartDeplacement( nEtatDeplacement, itineraire );
                DEC_Debug( "Deplacement etat : " + EnumToString( nEtatDeplacement, E_EtatActionDeplacement ) );                   
                break;
            }
        }  
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        DEC_DetruireItineraire( itineraire );
    }    
}

behavior BEH_Esquive( T_ConnaissanceAgent ennemi )
{
    when updated:
    {
        persistent T_Point ptSurete = 0;
        E_ValiditeRequete nValidite;    
        
        if( DIA_ModuleBegins() )
        {
            float rDistanceEsquive = DEC_Tir_PorteeMaxPourEtreTireParUnite( ennemi, nValidite, 0 );
            DEC_Debug( "Portee eni=>myself (PH 0): " + FloatToString( rDistanceEsquive ) );        
            
            ptSurete = DEC_Geometrie_CalculerPositionSurete( ennemi, rDistanceEsquive, nValidite );
        }
        
        behavior BEH_MoveToTmp( ptSurete );
        
        DEC_Debug( "Dangerosité ENI: " + FloatToString( DEC_ConnaissanceAgent_Dangerosite( ennemi, nValidite  ) ) );
        DEC_Debug( "Rapfor Local: " + FloatToString( DEC_RapportDeForceLocal() ) );
        DEC_Debug( "Distance sureté : " + FloatToString( DEC_Tir_PorteeMaxPourEtreTireParUnite( ennemi, nValidite, 0 ) ) );
    }
    
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_Fire : on spontaneous end" );
    }          
}


behavior BEH_DirectFire( T_ListeConnaissancesAgent targets )
{
    when updated:
    {
        if( DIA_Size( targets ) >  0 )
          action ACT_TirDirect( DEC_UserTypeList_GetAt( targets, 0 ), false );
           
/*            if( DIA_Size( targets ) == 2 )
            {
                T_ConnaissanceAgent target = DEC_UserTypeList_GetAt( targets, 0 );
                action ACT_TirDirect( target, mission, false );
                
                target = DEC_UserTypeList_GetAt( targets, 1 );
                action ACT_TirDirect( target, mission, true );
            }
            else
            {
                with( target in targets )
                {
                    // T_ConnaissanceAgent targetTest = target;
                    action ACT_TirDirect( target, mission, false );
                }
     //       }
     */    
    }
    
    on spontaneous end:
    {
    }
    
}


behavior MIS_Pion_Test_Fire( T_Mission_Pion_Test_Fire mission, id nDummy )
{
    when updated:
    {
        if( DIA_ModuleBegins() )        
        {
            DEC_Debug( "MIS_Pion_Test_Fire" );
            //DEC_Geometrie_CalculerBarycentreListeConnaissancesAgents( mission.targets_ );
        }
            
        if( mission.tirIndirect_ )
        {
            action ACT_TirIndirect( mission );
        }
        else
        {
//            behavior BEH_Esquive( DEC_UserTypeList_GetAt( mission.targets, 0 ) );
            behavior BEH_DirectFire( mission.targets_ );
            
            with( target in mission.targets_ )
            {
                T_ConnaissanceAgent tmp = target;
                E_ValiditeRequete nValidite;
                
                DEC_Tir_LancerFumigeneSurConnaissance( tmp );
            }
        }
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_Test_Fire : on spontaneous end" );
    }       
}



behavior MIS_Pion_PrendreEnComptePrisonniers( T_Mission_Pion_PrendreEnComptePrisonniers mission, id nDummy )
{
    when updated:
    {
        persistent T_Point ptCamp;
    
        if( DIA_ModuleBegins() )
        {
            E_ValiditeRequete nValidite;
            ptCamp = DEC_Geometrie_CalculerBarycentreLocalisation( DEC_ConnaissanceObjet_Localisation( mission.campPrisonniers_, nValidite ) );           
            with( prisonnier in mission.unitesRendues_ )
            {
                DEC_Debug( "DEC_Prisonniers_EstEmbarque before: " + BoolToString( DEC_Prisonniers_EstEmbarque( prisonnier, nValidite ) ) );
                DEC_Prisonniers_CapturerEtEmbarquer( prisonnier, nValidite );
                DEC_Debug( "DEC_Prisonniers_EstEmbarque after: " + BoolToString( DEC_Prisonniers_EstEmbarque( prisonnier, nValidite ) ) );
            }
        }
        
        behavior BEH_MoveToTmp( ptCamp );
        if( DEC_Geometrie_PositionsEgales( DEC_Agent_Position(), ptCamp ) )
        {
            E_ValiditeRequete nValidite;
            with( prisonnier in mission.unitesRendues_ )
            {                            
                DEC_Debug( "DEC_Prisonniers_EstDebarqueDansCamp before: " + BoolToString( DEC_Prisonniers_EstDebarqueDansCamp( prisonnier, mission.campPrisonniers_, nValidite ) ) );
                DEC_Prisonniers_DebarquerDansCamp( prisonnier, mission.campPrisonniers_, nValidite );
                DEC_Debug( "DEC_Prisonniers_EstDebarqueDansCamp after: " + BoolToString( DEC_Prisonniers_EstDebarqueDansCamp( prisonnier, mission.campPrisonniers_, nValidite ) ) );
            }
        }
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_PrendreEnComptePrisonniers : on spontaneous end" );
        E_ValiditeRequete nValidite;
        with( prisonnier in mission.unitesRendues_ )
        {
            DEC_Debug( "DEC_Prisonniers_EstDebarqueDansCamp before: " + BoolToString( DEC_Prisonniers_EstDebarqueDansCamp( prisonnier, mission.campPrisonniers_, nValidite ) ) );
            DEC_Prisonniers_Debarquer( prisonnier, nValidite );
            DEC_Debug( "DEC_Prisonniers_EstDebarqueDansCamp after: " + BoolToString( DEC_Prisonniers_EstDebarqueDansCamp( prisonnier, mission.campPrisonniers_, nValidite ) ) );
        }            
    }
}

    
behavior MIS_Pion_OrienterRefugies( T_Mission_Pion_OrienterRefugies mission, id nDummy )
{
    when updated:
    {
        persistent T_Point ptCamp;
    
        if( DIA_ModuleBegins() )
        {
            E_ValiditeRequete nValidite;
            ptCamp = DEC_Geometrie_CalculerBarycentreLocalisation( DEC_ConnaissanceObjet_Localisation( mission.campRefugies_, nValidite ) );
            with( refugie in mission.refugies_ )
            {
                DEC_Debug( "DEC_Refugies_EstEmbarque before: " + BoolToString( DEC_Refugies_EstEmbarque( refugie, nValidite ) ) );
                DEC_Refugies_OrienterEtEmbarquer( refugie, nValidite );
                DEC_Debug( "DEC_Refugies_EstEmbarque after: " + BoolToString( DEC_Refugies_EstEmbarque( refugie, nValidite ) ) );
            }            
        }
        
        behavior BEH_MoveToTmp( ptCamp );
        if( DEC_Geometrie_PositionsEgales( DEC_Agent_Position(), ptCamp ) )
        {
            E_ValiditeRequete nValidite;
            with( refugie in mission.refugies_ )
            {
                DEC_Debug( "DEC_Refugies_EstDebarqueDansCamp before: " + BoolToString( DEC_Refugies_EstDebarqueDansCamp( refugie, mission.campRefugies_, nValidite ) ) );
                DEC_Refugies_DebarquerDansCamp( refugie, mission.campRefugies_, nValidite );
                DEC_Debug( "DEC_Refugies_EstDebarqueDansCamp after: " + BoolToString( DEC_Refugies_EstDebarqueDansCamp( refugie, mission.campRefugies_, nValidite ) ) );
            }
        }
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_PrendreEnComptePrisonniers : on spontaneous end" );
        E_ValiditeRequete nValidite;
        with( refugie in mission.refugies_ )
        {
            DEC_Debug( "DEC_Refugies_EstDebarqueDansCamp before: " + BoolToString( DEC_Refugies_EstDebarqueDansCamp( refugie, mission.campRefugies_, nValidite ) ) );        
            DEC_Refugies_Debarquer( refugie, nValidite );
            DEC_Debug( "DEC_Refugies_EstDebarqueDansCamp after: " + BoolToString( DEC_Refugies_EstDebarqueDansCamp( refugie, mission.campRefugies_, nValidite ) ) );            
        }
    }
}


// TEST

behavior TestOnSpontaneousEndNotCalled()
{
    when updated:
    {
        persistent float cock = gTest;
        
        behavior Crash( 3, 0, eTypeLima_LO );
        if( DIA_ModuleBegins() )
            DEC_Debug( "TestOnSpontaneousEndNotCalled::begin " + FloatToString( gTest ) );
        DEC_Debug( "TestOnSpontaneousEndNotCalled::updated " + FloatToString( gTest ) );
    }
    on spontaneous end:
    {
        DEC_Debug( "TestOnSpontaneousEndNotCalled::on spontaneous end " + FloatToString( gTest ) );
    }            
}
/*
behavior TestOnSpontaneousEndNotCalled2( float bite )
{
    when updated:
    {
        persistent float cock = gTest;
        if( DIA_ModuleBegins() )
            DEC_Debug( "TestOnSpontaneousEndNotCalled::begin " + FloatToString( gTest ) );
        DEC_Debug( "TestOnSpontaneousEndNotCalled::updated " + FloatToString( gTest ) );
    }
    on spontaneous end:
    {
        DEC_Debug( "TestOnSpontaneousEndNotCalled::on spontaneous end " + FloatToString( gTest ) );
    }            
}*/




action TestOnSpontaneousShouldNotBeCalled( float bite ) using toto
{
    when selected:
    {        
        persistent float cock = gTest;
        if( DIA_ModuleBegins() )
            DEC_Debug( "TestOnSpontaneousEndNotCalled::begin " + FloatToString( gTest ) );
        DEC_Debug( "TestOnSpontaneousEndNotCalled::updated " + FloatToString( gTest ) );
    }
   
    on focus loss:
    {
        DEC_Debug( "TestOnSpontaneousEndNotCalled::on focus loss " + FloatToString( gTest ) + "/" + FloatToString( bite ) );
    }            
    
    on spontaneous end:
    {
        DEC_Debug( "TestOnSpontaneousEndNotCalled::on spontaneous end " + FloatToString( gTest ) + "/" + FloatToString( bite ) );
    }                
}


behavior MIS_Pion_LOG_TrierBlesses( T_Mission_Pion_LOG_TrierBlesses mission, id nDummy )
{
    when updated:
    {
        if( DIA_ModuleBegins() )
        {
            DEC_Debug( "MIS_Pion_LOG_TrierBlesses::begin" );
            gTest ++;
        }
        
        DEC_Debug( "MIS_Pion_LOG_TrierBlesses::updated" );            
        
        action TestOnSpontaneousShouldNotBeCalled( 1 );  
        action TestOnSpontaneousShouldNotBeCalled( 2 );  
                
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Pion_LOG_TrierBlesses::on spontaneous end" );
    }         
}





behavior MIS_Pion_CanaliserPopulations( T_Mission_Pion_CanaliserPopulations mission, id nDummy )
{
    when updated:
    {
        if( DIA_ModuleBegins() )        
            DEC_Debug( "MIS_Pion_CanaliserPopulation" );
        DEC_Agent_CanaliserPopulation( mission.zone_ );
    }
    on spontaneous end:
    {
        DEC_Debug( "MIS_Canaliser : on spontaneous end" );
    }
}



behavior MIS_Pion_Test_All( T_Mission_Pion_Test_All mission, id nDummy )
{
}
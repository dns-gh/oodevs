use_priority        =   no;
max_instances       =   10;
max_activations     =   10;

actuators = deplacement, ordre;

default Default()
{    
    behavior BEH_GererOrdreConduite(); 
    
    persistent float rDomination = 0;
    
    rDomination = rDomination + 0.01;
    if( rDomination > 1 )
        rDomination = 0;
    
    DEC_Population_ChangeEtatDomination( rDomination );
}

behavior BEH_Defaut( id nDummy )
{   
    when updated:
    {              
        persistent T_Action actionFire;
        
        if( actionFire != 0 )
        {
            DEC_StopAction( actionFire );
            actionFire = 0;
        }
    }
    
    on spontaneous end:
    {
        if( actionFire != 0 )
            DEC_StopAction( actionFire );    
    }        
}

behavior MIS_Population_FaireMouvement( T_Mission_Population_FaireMouvement mission, id nDummy )
{
    when updated:
    {
        persistent T_Action                actionMove;
        persistent T_Action                actionFire;
        persistent E_EtatActionDeplacement nEtatDeplacement;
        //persistent float  rDummy = 0;
        
        if( DIA_ModuleBegins() )
        {
            DEC_Debug( "MIS_Population_FaireMouvement - DIA_ModuleBegins" );
            actionMove = DEC__StartDeplacement( mission.destination_ );
            actionFire = DEC__StartTirSurPions( 1 );
        }
        
/*        if( rDummy == 53 )
            DEC_PauseAction( actionMove );
        else if( rDummy == 90 )
            DEC_ReprendAction( actionMove );
        ++ rDummy;*/
    }

    on spontaneous end:
    {
        if( actionMove != 0 )
            DEC_StopAction( actionMove );    
        if( actionFire != 0 )
            DEC_StopAction( actionFire );
    }    
}


behavior MIS_Population_CommettreExactions( T_Mission_Population_CommettreExactions mission, id nDummy )
{
    when updated:
    {
        //persistent T_Action                actionMove;
        //persistent E_EtatActionDeplacement nEtatDeplacement;
        //persistent T_Point                 ptDest;
        
        if( DIA_ModuleBegins() )
        {
          T_ListePopulationConnaissancesObjet objets = DEC_Connaissances_ObjetsDansZone( mission.zone_, eTypeObjectInstallation );
          with( x in objets )
          {
            if( DEC_ConnaissanceObjet_EstValide( x ) )
            {
                E_ValiditeRequete nFusse;
                DEC_Debug( "Exaction en cours !" );
                float rDistance = DEC_ConnaissanceObjet_Distance( x );
                DEC_Debug( "Distance objet = " + FloatToString( rDistance ) );
                T_Point closestPoint = DEC_ConnaissanceObjet_PointPlusProche( x );
                DEC_DebugAffichePoint( closestPoint );
                DEC_ConnaissanceObjet_Degrader( x, 0.03 );
            }
          }
          
        }        
    }

    on spontaneous end:
    {
        //if( actionMove != 0 )
            //DEC_StopAction( actionMove );    
    } 
}


behavior BEH_GererOrdreConduite()
{
    when updated:
    {
        if( DIA_ModuleBegins() )
            DEC_Debug( "init ordres popu" );
        
    	selection ordres_recus = DEC_GetCategory( "ordres_recus" );
    	with ( x in ordres_recus)
    	{
    		Rep_OrdreConduite ordre = x;
			switch ( ordre.__type_ )
			{
                case Rep_OrderConduite_Population_ChangerAttitude:
                {
                    Rep_OrderConduite_Population_ChangerAttitude ordreAtt = ordre;
                    DEC_Debug( "changement attitude" );
                    DEC_Population_ChangerAttitude( ordreAtt.orderConduitePopulationChangerAttitude_ );
            		// on a finit de traiter l'ordre, on le supprime
            		DEC_RemoveFromCategory( "ordres_recus", ordre );
            		DEC_DeleteRepresentation( ordre );
                    break;
                }
            }
        }
    }
    on spontaneous end:
    {
    }  
}

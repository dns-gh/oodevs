use_priority        =   no;
max_instances       =   10;
max_activations     =   10;

behavior BEH_Defaut( id nDummy )
{
    T_Lima limaHoraire = DEC_ProchaineLimaHoraireNonFlagee();
    DEC_Debug( "Retard: " + FloatToString( DEC_Geometrie_CalculerRetard ( DEC_Fuseau(), DEC_Automate_AutomatesSubordonnes(), limaHoraire ) ) );
}

behavior MIS_Automate_MRT_ADA_MoveTo( T_Mission_Automate_ADA_MoveTo mission, id nDummy )
{
    DEC_MRT_Valide();
    
}

behavior MIS_Automate_CDT_ADA_MoveTo( T_Mission_Automate_ADA_MoveTo mission, id nDummy )
{
    persistent T_CalculLignesAvantArriere linesComputer;
    if( DIA_ModuleBegins() )
    {       
        T_ListeAutomates automates = DEC_Automate_AutomatesSubordonnes();
        DEC_Debug( "Automates subordonnes : " + FloatToString( DIA_Size( automates ) ) );
        
        T_ListeFuseaux fuseaux = DEC_DecouperFuseau( DIA_Size( DEC_Automate_AutomatesSubordonnes() ) );
        DEC_Debug( "Fuseaux non tries" );
        with( x in fuseaux )
            DEC_Debug( FloatToString( DEC_Geometrie_PourcentageTerrainCompartimente( x ) ) );
        fuseaux = DEC_Geometrie_TrierFuseauxSelonOuvertureTerrain( fuseaux );
        DEC_Debug( "Fuseaux tries selon ouverture terrain" );
        with( x in fuseaux )
            DEC_Debug( FloatToString( DEC_Geometrie_PourcentageTerrainCompartimente( x ) ) );
        fuseaux = DEC_Connaissances_TrierFuseauxSelonPresenceEnnemisDebarques( fuseaux );            
        DEC_Debug( "Fuseaux tries selon presence ennemis debarques" );
        with( x in fuseaux )
            DEC_Debug( FloatToString( DEC_Connaissances_PourcentageEnnemisDebarquesDansFuseau( x ) ) );        
                    
        DEC_Geometrie_ProchainObjectifDansFuseau( DEC_Fuseau(), DEC_Geometrie_CalculerBarycentreAutomates( DEC_Automate_AutomatesSubordonnes() ), mission.objectifs_ );
                    
	    fuseaux = DEC_Geometrie_TrierFuseauxSelonHoraire( fuseaux, DEC_Geometrie_CalculerBarycentreAutomates( DEC_Automate_AutomatesSubordonnes() ), DEC_ProchainElementHoraireNonFlage( mission.objectifs_ ) );    
	    DEC_Debug( "Fuseaux tries selon horaires limas" );
	            
   	    DEC_Geometrie_CalculerRetard( DEC_Fuseau(), DEC_Automate_AutomatesSubordonnes(), DEC_ProchainElementHoraireNonFlage( mission.objectifs_ ) );            
   	              
        float itFuseau = 0;
        with( x in DEC_Automate_AutomatesSubordonnes() )
        {
            T_Mission_Automate tmp = DEC_CreerMissionAutomate( x, T_Mission_Automate_LOG_SeDeployer );
           
            T_Fuseau fuseau = DEC_UserTypeList_GetAt( fuseaux, itFuseau );
            
            float nForestSurface, nEmptySurface, nUrbanSurface;

            float rClosedTerrainRatio = DEC_Geometrie_PourcentageTerrainCompartimente( fuseau );
            DEC_Debug( "Fuseau " + FloatToString( itFuseau ) + " - ClosedTerrainRatio: " + FloatToString( rClosedTerrainRatio ) );
/*            if( DEC_Geometrie_EstLocalisationDansFuseau( DEC_UserTypeList_GetAt( mission.objectifs_, 0 ), fuseau ) )
                DEC_Debug( "Objectif 1 dans fuseau" );
            else
                DEC_Debug( "Objectif 1 pas dans fuseau" );*/
                       
            /*DEC_Geometrie_CalculerDonneesTerrainPourFuseau( fuseau, nForestSurface, nEmptySurface, nUrbanSurface );             
            DEC_Debug( "Fuseau " + FloatToString( itFuseau ) + " - ForestSurface: " + FloatToString( nForestSurface / 1000000 ) 
                                                             + " km2- EmptySurface: " + FloatToString( nEmptySurface / 1000000 )
                                                             + " km2- UrbanSurface: " + FloatToString( nUrbanSurface / 1000000 )
                                                             + " km2");
                                                             */
            
            DEC_AssignerFuseauAMissionAutomate( fuseau, tmp );
            DEC_DonnerMissionAutomate( tmp );
            ++ itFuseau;
        }
        
        linesComputer = DEC_Geometrie_StartCalculLignesAvantEtArriere( DEC_Automate_AutomatesSubordonnes() );
    }
    
    float rProut  = DEC_Geometrie_CalculerDistanceLigneAvant  ( linesComputer, DEC_Automate_PionPC() );
    float rProut2 = DEC_Geometrie_CalculerDistanceLigneArriere( linesComputer, DEC_Automate_PionPC() );
    DEC_Debug( "Distance ligne avant : " + FloatToString( rProut ) + " - Distance ligne arrière : " + FloatToString( rProut2 ) );
    
}

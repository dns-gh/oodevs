<project name="proxy" default="all">
    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//install/masa/common/dev/common/poney"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>
    <import file="${extensions.dir}/generate.xml"/>
    <var name="repositories" value="${repositories},${sword.repository}"/>
    <property name="branch" value="trunk" />

    <target name="configure">
        <update name="golang"/>
        <update name="buildtools" version="1"/>
        <update name="sword" version="Defense/releases/internal/${branch}" package="SWORD_binaries_${platform}_${branch}"/>
    </target>

    <macrodef name="pretty_json">
        <attribute name="src"/>
        <attribute name="dst"/>
        <sequential>
            <echo file="@{dst}/plugins.ttml">{"_":0</echo>
            <generate input="@{src}" extension="json" target="@{dst}/.PHONY">
                <exec taskname="json" executable="python" failonerror="true" >
                    <arg value="-m"/>
                    <arg value="json.tool"/>
                    <arg value="@{file}"/>
                    <arg value="@{dst}/@{basename}.ttml"/>
                </exec>
                <echo taskname="json" message="@{basename}"/>
                <echo file="@{dst}/plugins.ttml" append="true">,"@{basename}":[[ template "@{basename}.ttml" . ]]</echo>
            </generate>
            <echo file="@{dst}/plugins.ttml" append="true">}</echo>
        </sequential>
    </macrodef>

    <target name="plugins">
        <xslt basedir="${out.dir}/plugins"
            includes="**/plugin.xml"
            destdir="${out.dir}/json"
            style="${src.dir}/plugin.xsl" >
            <regexpmapper from="(\w+)[\\\/]+plugin.xml$" to="\1.json" />
        </xslt>
        <pretty_json src="${out.dir}/json" dst="../www" />
    </target>

    <target name="build">
        <go module="node"/>
    </target>

    <macrodef name="get_version">
        <attribute name="file"/>
        <attribute name="output"/>
        <sequential>
            <exec taskname="version" executable="python" failonerror="true" outputproperty="@{output}.tmp">
                <arg value="${bin.dir}/buildtools/getversion.py"/>
                <arg value="@{file}"/>
            </exec>
            <propertyregex property="@{output}" input="${@{output}.tmp}"
                regexp=".*(\d+\.\d+\.\d+\.\d+).*"
                select="\1"/>
        </sequential>
    </macrodef>

    <target name="about">
        <sequential>
            <get_version file="${out.dir}/simulation_app.exe" output="version.simulation"/>
            <delete file="${root.dir}/www/about.ttml"/>
            <copy file="${root.dir}/www/about.ttml.in" tofile="${root.dir}/www/about.ttml"/>
            <replace file="${root.dir}/www/about.ttml">
                <replacefilter token="SIMULATION_VERSION" value="${version.simulation}"/>
            </replace>
        </sequential>
    </target>

    <target name="all" depends="configure,plugins,build" />
</project>

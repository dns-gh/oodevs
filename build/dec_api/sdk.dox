// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

/** @mainpage

    @section introduction Introduction

    This document describes the technical details required to use "DEC" functions behavior models. @n
    This includes an overview of the system, a presentation of the data model and an in-depth view of the decisional functions.

    The reader is expected to have basic knowledge of the SWORD applications and a global understanding of the elements involved into the training process (such as: what is an ORBAT? what is an effect-based aggregated simulation?...). @n
    Reading the user documentation provided with any SWORD installation is strongly encouraged.

    In order to fully understand this document, the reader must also have knowledge in software development and networking.

    @section definitions Definitions

    The following definitions are used throughout the document.

    <table border="1" style="border-collapse: collapse; border:1px solid gray;">
      <tr>
        <th>Definition</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>SWORD</td>
        <td>Simulation Wargaming for Operational Research on Doctrine : the system used to simulate the training environment</td>
      </tr>
    </table>

    @section return_values Return value Data types
    
    <table border="1" style="border-collapse: collapse; border:1px solid gray;">
      <tr>
        <th>Type</th>
        <th>Definition</th>
      </tr>
      <tr>
        <td>void</td>
        <td>No return value</td>
      </tr>
      <tr>
        <td>std::string</td>
        <td>A character string value</td>
      </tr>
      <tr>
        <td>bool</td>
        <td>Boolean value : true or false</td>
      </tr>
      <tr>
        <td>int</td>
        <td>Integer value. Notice tdat in lua int are automaticaly translated as double</td>
      </tr>
      <tr>
        <td>float</td>
        <td>Floating point value. Notice tdat in lua int are automaticaly translated as double</td>
      </tr>
      <tr>
        <td>double</td>
        <td>Double value. Notice tdat every number are managed as double in lua</td>
      </tr>
      <tr>
        <td>const MT_Vector2D * / boost::shared_ptr< MT_Vector2D ></td>
        <td>Pointer to a 2D vector position</td>
      </tr>
      <tr>
        <td>const TER_Localisation * / const TER_Localisation & / boost::shared_ptr< TER_Localisation ></td>
        <td>Pointer to location</td>
      </tr>
      <tr>
        <td>std::vector< DEC_Decision_ABC * ></td>
        <td>List of pointer to a brain</td>
      </tr>
      <tr>
        <td>boost::shared_ptr< MIL_Mission_ABC ></td>
        <td>Pointer to a pointer</td>
      </tr>
    </table>
    
    
*/

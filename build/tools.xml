<?xml version="1.0"?>
<project>

    <taskdef resource="cpptasks.tasks"/>
    <typedef resource="cpptasks.types"/>
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <macrodef name="update-all-modules">
        <attribute name="name"/>
        <attribute name="dir"/>
        <sequential>
            <copy todir="${include.dir}" verbose="true" preservelastmodified="true">
                <fileset dir="@{dir}">
                    <include name="@{name}/include/**"/>
                </fileset>
                <globmapper from="@{name}/include/*" to="*" handledirsep="true"/>
            </copy>
            <copy todir="${lib.dir}" verbose="true" preservelastmodified="true">
                <fileset dir="@{dir}">
                    <include name="@{name}/lib/**/*.lib"/>
                    <include name="@{name}/lib/**/*.pdb"/>
                </fileset>
                <globmapper from="@{name}/lib/*" to="*" handledirsep="true"/>
            </copy>
            <copy todir="${run.dir}" verbose="true" flatten="true" preservelastmodified="true">
                <fileset dir="@{dir}">
                    <include name="@{name}/dll/**/*.dll"/>
                </fileset>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="update-module">
        <attribute name="name"/>
        <attribute name="modules"/>
        <attribute name="dir"/>
        <sequential>
            <for list="@{modules}" param="module">
                <sequential>
                    <copy todir="${include.dir}" verbose="true" preservelastmodified="true">
                        <fileset dir="@{dir}">
                            <include name="@{name}/include/**/@{module}/**"/>
                        </fileset>
                        <globmapper from="@{name}/include/*" to="*" handledirsep="true"/>
                    </copy>
                    <copy todir="${lib.dir}" verbose="true" preservelastmodified="true">
                        <fileset dir="@{dir}">
                            <include name="@{name}/lib/**/*@{module}*.lib"/>
                            <include name="@{name}/lib/**/*@{module}*.pdb"/>
                        </fileset>
                        <globmapper from="@{name}/lib/*" to="*" handledirsep="true"/>
                    </copy>
                    <copy todir="${run.dir}" verbose="true" flatten="true" preservelastmodified="true">
                        <fileset dir="@{dir}">
                            <include name="@{name}/dll/**/*@{module}*.dll"/>
                        </fileset>
                    </copy>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="update-package">
        <attribute name="name"/>
        <attribute name="package"/>
        <attribute name="dir"/>
        <sequential>
            <unzip dest="${bin.dir}">
                <fileset dir="@{dir}" includes="@{name}/@{package}.zip"/>
            </unzip>
        </sequential>
    </macrodef>

    <macrodef name="update">
        <attribute name="name"/>
        <attribute name="modules" default=""/>
        <attribute name="package" default=""/>
        <attribute name="version" default="current"/>
        <sequential>
            <for list="${repositories}" param="repository">
                <sequential>
                    <if>
                        <equals arg1="@{package}" arg2=""/>
                        <then>
                            <if>
                                <equals arg1="@{modules}" arg2=""/>
                                <then>
                                    <update-all-modules name="@{name}/@{version}" dir="@{repository}"/>
                                </then>
                                <else>
                                    <update-module name="@{name}/@{version}" modules="@{modules}" dir="@{repository}"/>
                                </else>
                            </if>
                        </then>
                        <else>
                            <update-package name="@{name}/@{version}" package="@{package}" dir="@{repository}"/>
                        </else>
                    </if>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="detect-pch">
        <attribute name="name"/>
        <attribute name="property"/>
        <attribute name="path"/>
        <attribute name="pch"/>
        <sequential>
            <condition property="@{property}" value="@{path}/@{pch}.cpp">
                <not>
                    <equals arg1="@{pch}" arg2=""/>
                </not>
            </condition>
            <condition property="@{property}" value="@{path}/@{name}_pch.cpp">
                <available property="@{property}" file="@{path}/@{name}_pch.cpp"/>
            </condition>
        </sequential>
    </macrodef>

    <macrodef name="build">
        <attribute name="name"/>
        <attribute name="input"/>
        <attribute name="path"/>
        <attribute name="debug"/>
        <attribute name="optimize"/>
        <attribute name="suffix" default=""/>
        <attribute name="outtype"/>
        <attribute name="configuration"/>
        <attribute name="excludes" default=""/>
        <attribute name="pch" default=""/>
        <attribute name="pch-excludes" default=""/>
        <attribute name="outdir" default="${bin.dir}/@{configuration}/@{path}/@{name}"/>
        <attribute name="subsystem" default="other"/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <mkdir dir="@{outdir}"/>
            <cc objdir="@{input}">
                <compiler name="moc">
                    <fileset dir="@{input}" includes="**/*.h" excludes="@{excludes}"/>
                    <compilerarg value="-nw"/>
                </compiler>
            </cc>
            <detect-pch name="@{name}" property="@{name}.pch" path="@{input}" pch="@{pch}"/>
            <cc name="${compiler}" outfile="@{outdir}/@{name}@{suffix}" objdir="@{outdir}" subsystem="@{subsystem}"
                                   incremental="false" outtype="@{outtype}">
                <fileset dir="@{input}" includes="**/*.cpp,**/*.c" excludes="@{excludes},moc_*.cpp"/> <!-- moc_*.cpp excluded because of MSVC IDE compiling them in src directory -->
                <compilerarg value="/W4"/>
                <compiler name="${compiler}" optimize="@{optimize}" debug="@{debug}" exceptions="true" rtti="true">
                    <precompile prototype="${@{name}.pch}" if="@{name}.pch">
                        <except dir="@{input}" includes="@{pch-excludes}"/>
                    </precompile>
                    <defineset define="WIN32"/> <!-- for MT only -->
                    <includepath path="${libraries.dir}"/>
                    <includepath path="${include.dir}"/>
                    <includepath path="${include.dir}/qt"/>
                </compiler>
                <cc-elements/>
            </cc>
        </sequential>
    </macrodef>

    <macrodef name="build-lib">
        <attribute name="name"/>
        <attribute name="input" default="@{name}"/>
        <attribute name="outtype" default="static"/>
        <attribute name="suffix" default="_d"/>
        <attribute name="debug" default="true"/>
        <attribute name="excludes" default=""/>
        <attribute name="pch" default=""/>
        <attribute name="pch-excludes" default=""/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <build name="@{name}" input="${libraries.dir}/@{input}" path="libraries" debug="false" optimize="full"
                   outtype="@{outtype}" configuration="release" excludes="@{excludes}"
                   pch="@{pch}" pch-excludes="@{pch-excludes}">
                <compilerarg value='/Fd"${bin.dir}/release/libraries/@{name}/@{name}.pdb"'/>
                <cc-elements/>
            </build>
            <if>
                <equals arg1="@{debug}" arg2="true"/>
                <then>
                    <build name="@{name}" input="${libraries.dir}/@{input}" path="libraries" debug="true" optimize="none"
                           suffix="@{suffix}" outtype="@{outtype}" configuration="debug" excludes="@{excludes}"
                           pch="@{pch}" pch-excludes="@{pch-excludes}">
                        <compilerarg value='/Fd"${bin.dir}/debug/libraries/@{name}/@{name}@{suffix}.pdb"'/>
                        <cc-elements/>
                    </build>
                </then>
            </if>
            <copy todir="${lib.dir}/${platform}" verbose="true" flatten="true">
                <fileset dir="${bin.dir}" includes="**/@{name}/@{name}*.lib"/>
            </copy>
            <copy todir="${run.dir}" verbose="true" flatten="true">
                <fileset dir="${bin.dir}" includes="**/@{name}/@{name}*.dll"/>
            </copy>
        </sequential>
    </macrodef>

    <macrodef name="build-test">
        <attribute name="name"/>
        <attribute name="input" default="@{name}_test"/>
        <attribute name="libs" default=""/>
        <attribute name="excludes" default=""/>
        <attribute name="pch" default=""/>
        <attribute name="pch-excludes" default=""/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <build name="@{name}_test" input="${tests.dir}/@{input}" path="tests" debug="false" optimize="full"
                   outtype="executable" configuration="release" excludes="@{excludes}"
                   pch="@{pch}" pch-excludes="@{pch-excludes}">
                <libset dir="${lib.dir}/${platform}" libs="@{libs}"/>
                <cc-elements/>
            </build>
        </sequential>
    </macrodef>

    <macrodef name="run-test">
        <attribute name="name"/>
        <attribute name="input" default="@{name}_test"/>
        <sequential>
            <mkdir dir="${reports.dir}"/>
            <exec executable="${bin.dir}/release/tests/@{input}/@{input}" dir="${run.dir}" resolveExecutable="true" error="${reports.dir}/@{input}.xml" failonerror="true">
                <arg value="--log_level=warnings"/>
                <arg value="--report_format=XML"/>
                <arg value="--report_level=detailed"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="build-app">
        <attribute name="name"/>
        <attribute name="input" default="@{name}"/>
        <attribute name="libs" default=""/>
        <attribute name="subsystem" default="gui"/>
        <attribute name="excludes" default=""/>
        <attribute name="pch" default=""/>
        <attribute name="pch-excludes" default=""/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <build name="@{name}" input="${applications.dir}/@{input}" path="applications" debug="false" optimize="full"
                   outtype="executable" configuration="release" excludes="@{excludes}"
                   pch="@{pch}" pch-excludes="@{pch-excludes}" subsystem="@{subsystem}">
                <libset dir="${lib.dir}/${platform}" libs="@{libs}"/>
                <cc-elements/>
            </build>
        </sequential>
    </macrodef>

    <macrodef name="clean">
        <attribute name="name"/>
        <sequential>
            <delete includeEmptyDirs="true" failonerror="false" quiet="true">
                <fileset dir="${bin.dir}" includes="**/@{name}/**"/>
                <fileset dir="${applications.dir}/@{name}" includes="**/moc_*.cpp"/> <!-- because of MSVC IDE compiling them in src directory-->
                <fileset dir="${applications.dir}/@{name}" includes="history.xml,dependencies.xml"/>  <!-- for moc -->
            </delete>
        </sequential>
    </macrodef>

</project>

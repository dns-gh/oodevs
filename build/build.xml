<project name="gosword" default="all">

    <!-- ${test.timeout} is predefined in poney boost extension, we need to
         override it before loading poney.
    -->
    <property name="test.timeout" value="40m"/>

    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//file1/masa/common/dev/delivery/internal/poney/current"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>

    <var name="repositories" value="${repositories},${sword.repository}"/>
    <property name="sword_branch" value="trunk"/>
    <property name="test.port" value="35000"/>
    <property name="test.cpu" value="1"/>
    <property name="licensepath" value="${run.dir}/license.dat"/>
    <property name="version.version" value="1.0.0.0.${git.revision}.${git.hash}"/>

    <target name="clean">
        <delete dir="${out.dir}"/>
        <go_clean/>
    </target>

    <target name="update">
        <update name="buildtools"/>
        <update name="golang" version="1.2.1"/>
        <update name="golibs"/>
        <update name="models" package="decisional-dev" todir="${data.dir}/data/models"/>
        <update name="models" package="terrains-dev" todir="${data.dir}/data/terrains"/>
        <update name="protobuf" version="2.3.0"/>
        <update name="python" version="2.7.3-3"/>
        <update name="sword" package="protobuf" todir="${src.dir}/sword"/>
        <update name="sword" package="binaries_${platform}" todir="${run.dir}"/>
    </target>

    <target name="proto">
        <go_proto input="${src.dir}/sword"/>
        <go_proto input="${src.dir}/testproto/before"/>
        <go_proto input="${src.dir}/testproto/after"/>
    </target>

    <target name="configure" depends="update,proto"/>

    <target name="build">
        <go_fmt/>
        <go_build/>
    </target>

    <condition property="gocheck.filter" value="-f=${gocheck.f}" else="">
        <isset property="gocheck.f"/>
    </condition>
    <condition property="go.race" value="-race" else="">
        <equals arg1="${platform}" arg2="vc100_x64"/>
    </condition>
    <condition property="showlog" value="true" else="false">
        <isset property="show-log"/>
    </condition>
    <property name="application" value="${run.dir}/simulation_app.exe"/>
    <macrodef name="runtests">
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <go cmd="vet"/>
            <go cmd="test">
                <arg value="-i"/>
                <arg value="${go.race}"/>
            </go>
            <exec_goenv name="tests" executable="${bin.dir}/gotester">
                <env key="BKMASA_LICENSE_FILE" path="${licensepath}"/>
                <arg line="${gocheck.filter}"/>
                <arg value="-port=${test.port}"/>
                <arg value="-j=${test.cpu}"/>
                <arg value="${root.dir}"/>
                <arg value="--"/>
                <arg value="./src/..."/>
                <arg value="${go.race}"/>
                <arg value="-test.parallel=1"/>
                <arg value="-test.cpu=${test.cpu}"/>
                <arg value="-test.timeout=${test.timeout}"/>
                <arg value="-test.v"/>
                <arg value="-gocheck.v"/>
                <arg value="-show-log=${showlog}"/>
                <arg value="--application=${application}"/>
                <arg value="--run-dir=${run.dir}"/>
                <arg value="--root-dir=${data.dir}"/>
                <args/>
            </exec_goenv>
        </sequential>
    </macrodef>

    <target name="test">
        <runtests/>
    </target>

    <target name="package">
        <go_package/>
        <setversion version="${version.version}" product="Sword" file="${bin.dir}/csvclient.exe"/>
        <go_zip subdir="dll" output="${platform}">
            <fileset dir="${bin.dir}" includes="csvclient.exe"/>
        </go_zip>
    </target>

    <target name="all" depends="update,proto,build,test,package"/>

</project>

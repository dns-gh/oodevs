<?xml version="1.0"?>
<project name="csword" default="all">

    <import file="//install/masa/common/dev/common/poney/poney.xml"/>

    <!--
    ============================================================================
      tools
    ============================================================================
    -->
    <macrodef name="echo-files">
        <attribute name="files"/>
        <sequential>
            <for list="@{files}" param="file" delimiter=";">
                <sequential>
                    <echo>ERROR: @{file}</echo>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="compare-dirs">
        <attribute name="dir1"/>
        <attribute name="dir2"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <attribute name="property"/>
        <sequential>
            <fileset id="@{dir1}.id" dir="@{dir1}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir2}" ignorefiletimes="true"/> <!-- ne prend pas en compte les fichiers 'en trop' dans dir2 -->
            </fileset>
            <pathconvert property="@{property}.@{dir1}" refid="@{dir1}.id" setonempty="false"/>
            <fileset id="@{dir2}.id" dir="@{dir2}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir1}" ignorefiletimes="true"/>
            </fileset>
            <pathconvert property="@{property}.@{dir2}" refid="@{dir2}.id" setonempty="false"/>
            <if>
                <and>
                    <isset property="@{property}.@{dir1}"/>
                    <isset property="@{property}.@{dir2}"/>
                </and>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}};${@{property}.@{dir2}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir1}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir2}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir2}}"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <!--
    ============================================================================
      libraries
    ============================================================================
    -->
    <target name="libraries" description="build all libraries"
            depends="library.tools,library.MT_Tools,library.ENT,library.ASN,library.simulation_terrain,library.simulation_kernel,
                     library.clients_kernel,library.clients_gui"/>

    <target name="library.tools" description="build tools static library">
        <build-lib name="tools" pattern="lib${ant.project.name}_tools-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.MT_Tools" description="build MT_Tools static library">
        <build-lib name="MT_Tools" pattern="lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.ASN" description="build ASN static library">
        <build-lib name="ASN" pattern="lib${ant.project.name}_ASN-${platform}-mt@{suffix}" suffix="-gd" warnings="production">
            <includepath path="${include.dir}/asn"/>
        </build-lib>
    </target>

    <target name="library.ENT" description="build ENT static library">
        <build-lib name="ENT" depends="qt" pattern="lib${ant.project.name}_ENT-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.dispatcher" description="build dispatcher static library" depends="library.MT_Tools,library.tools,library.ASN">
        <build-lib name="dispatcher" pattern="lib${ant.project.name}_dispatcher-${platform}-mt@{suffix}" suffix="-gd">
            <includepath path="${include.dir}/ASN"/>
        </build-lib>
    </target>

    <target name="library.simulation_terrain" description="build simulation_terrain static library" depends="library.MT_Tools">
        <build-lib name="simulation_terrain" pattern="lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.simulation_kernel" description="build simulation_kernel static library" depends="library.tools,library.ASN,library.simulation_terrain">
        <build-lib name="simulation_kernel" pattern="lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix}" suffix="-gd">
            <includepath path="${include.dir}/ASN"/>
            <includepath path="${libraries.dir}/simulation_kernel"/> <!-- pour MIL.h -->
        </build-lib>
    </target>

    <target name="library.clients_kernel" description="build clients_kernel static library" depends="library.tools,library.ENT">
        <build-lib name="clients_kernel" depends="qt" pattern="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.clients_gui" description="build clients_gui static library" depends="library.clients_kernel">
        <build-lib name="clients_gui" excludes="**/font/*" depends="qt" pattern="lib${ant.project.name}_clients_gui-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.gaming" description="build gaming static library" depends="library.ASN,library.clients_gui">
        <build-lib name="gaming" depends="qt" pattern="lib${ant.project.name}_gaming-${platform}-mt@{suffix}" suffix="-gd">
            <includepath path="${include.dir}/ASN"/>
        </build-lib>
    </target>

    <target name="library.preparation" description="build gaming static library" depends="library.clients_gui">
        <build-lib name="preparation" depends="qt" pattern="lib${ant.project.name}_preparation-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <!--
    ============================================================================
     applications
    ============================================================================
    -->
    <target name="applications" description="build CSword executables"
            depends="applications.simulation,applications.clients"/>

    <target name="applications.simulation" description="build CSword Simulation executables"
            depends="application.dispatcher_app,application.simulation_app,application.simulation_tester,application.AGR" />

    <target name="applications.clients" description="build CSword Client executables"
            depends="application.gaming_app,application.preparation_app,application.adaptation_app" />

    <target name="application.dispatcher_app" description="build CSword Dispatcher executable" depends="library.dispatcher">
        <build-app name="dispatcher_app" subsystem="console" depends="mt,din,boost"
                   libs="masalloc,paranoia,xeumeuleu,tools,xeumeuleu,asn1per
                         lib${ant.project.name}_tools-${platform}-mt
                         lib${ant.project.name}_MT_Tools-${platform}-mt
                         lib${ant.project.name}_ASN-${platform}-mt
                         lib${ant.project.name}_dispatcher-${platform}-mt">
            <syslibset libs="dbghelp,psapi"/>
            <syslibset libs="iphlpapi"/> <!-- paranoia -->
            <includepath path="${include.dir}/ASN"/>
        </build-app>
    </target>

    <target name="application.simulation_app" description="build CSword Simulation executable" depends="library.dispatcher">
        <build-app name="simulation_app" subsystem="console" depends="mt,din,dia3,terrain,boost"
                   libs="HLA,libFedTime,masalloc,paranoia,tools,xeumeuleu,asn1per
                         lib${ant.project.name}_tools-${platform}-mt
                         lib${ant.project.name}_MT_Tools-${platform}-mt
                         lib${ant.project.name}_ASN-${platform}-mt
                         lib${ant.project.name}_simulation_terrain-${platform}-mt
                         lib${ant.project.name}_simulation_kernel-${platform}-mt
                         lib${ant.project.name}_dispatcher-${platform}-mt" >
            <syslibset libs="dbghelp,psapi"/>
            <syslibset libs="iphlpapi"/> <!-- paranoia -->
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <includepath path="${include.dir}/ASN"/>
            <defineset define="_WIN32_WINNT=0x0400"/> <!-- for 'IsDebuggerPresent()' -->
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
            <linkerarg value="/LARGEADDRESSAWARE"/>   <!-- Executable can access 3GiB instead of 2GiB -->
        </build-app>
    </target>

    <target name="application.simulation_tester" description="build CSword Simulation Tester executable" depends="library.ASN,library.MT_Tools">
        <!-- TMP
        <build-app name="simulation_tester" subsystem="console" depends="mt,din,terrain"
                   libs="MT_Tools,ASN,asn1per"
                   excludes="**/Actions/Missions/Pawn/*.cpp,**/Actions/Missions/Automat/*.cpp,**/Actions/Missions/Population/*.cpp">
            <includepath path="${applications.dir}/simulation_tester"/>
            <includepath path="${include.dir}/ASN"/>
        </build-app>-->
    </target>

    <target name="application.adaptation_app" description="build CSword Adaptation executable" depends="library.ENT,library.clients_gui">
        <build-app name="adaptation_app" depends="mt,qt,xeumeuleu,boost" excludes="**/XmlResources.cpp" 
                   libs="lib${ant.project.name}_ENT-${platform}-mt
                         lib${ant.project.name}_clients_gui-${platform}-mt
                         lib${ant.project.name}_clients_kernel-${platform}-mt" pch-excludes="qtundo.cpp">
            <syslibset libs="advapi32,user32"/>
        </build-app>
    </target>

    <target name="application.gaming_app" description="build CSword Gaming executable" depends="library.gaming">
        <build-app name="gaming_app" excludes="**/**_Gen.*,**/splashscreen.cpp" depends="mt,din,terrain,xeumeuleu,qt,boost"
                   libs="asn1per,svgl,zipstream,zlib
                         lib${ant.project.name}_tools-${platform}-mt
                         lib${ant.project.name}_ASN-${platform}-mt
                         lib${ant.project.name}_ENT-${platform}-mt
                         lib${ant.project.name}_gaming-${platform}-mt
                         lib${ant.project.name}_clients_gui-${platform}-mt
                         lib${ant.project.name}_clients_kernel-${platform}-mt">
            <includepath path="${include.dir}/ASN"/>
            <syslibset libs="gdi32,psapi,dbghelp"/>
        </build-app>
    </target>

    <target name="application.preparation_app" description="build CSword Gaming executable" depends="library.preparation">
        <build-app name="preparation_app" excludes="**/**_Gen.*,**/splashscreen.cpp" depends="mt,din,terrain,xeumeuleu,qt,boost"
                   libs="svgl,zipstream,zlib
                         lib${ant.project.name}_tools-${platform}-mt
                         lib${ant.project.name}_ENT-${platform}-mt
                         lib${ant.project.name}_preparation-${platform}-mt
                         lib${ant.project.name}_clients_gui-${platform}-mt
                         lib${ant.project.name}_clients_kernel-${platform}-mt">
            <syslibset libs="gdi32,psapi,dbghelp"/>
        </build-app>
    </target>

    <target name="application.AGR" description="build AGR executable">
        <build-app name="AGR" subsystem="console" excludes="**/*_Skeleton.*" depends="mt,boost">
            <syslibset libs="user32"/>
        </build-app>
    </target>

    <!--
    ============================================================================
      clean
    ============================================================================
    -->
    <target name="clean" description="clean intermediate build artifacts">
        <clean name="tools"/>
        <clean name="MT_Tools"/>
        <clean name="ASN"/>
        <clean name="ENT"/>
        <clean name="simulation_terrain"/>
        <clean name="simulation_kernel"/>
        <clean name="simulation_tester"/>
        <clean name="simulation_app"/>
        <clean name="clients_kernel"/>
        <clean name="clients_gui"/>
        <clean name="gaming"/>
        <clean name="gaming_app"/>
        <clean name="preparation"/>
        <clean name="preparation_app"/>
        <clean name="adaptation_app"/>
        <clean name="AGR"/>
    </target>

    <!--
    ============================================================================
      tests
    ============================================================================
    -->
    <target name="test" depends="generate-license,test-test-scripts,test-main-scripts,test-adaptation" description="run all tests"/>

    <target name="generate-license" description="generate license file in run directory">
        <exec executable="${bin.dir}/hostid_light.exe" failonerror="true" outputproperty="hostid"/>
        <exec executable="${bin.dir}/paranoia_light.exe" failonerror="true" inputstring="${hostid}" output="${run.dir}/scipio.license"> <!-- FIXME license name is still scipio -->
            <arg value="scipio"/>
        </exec>
    </target>

    <target name="test-main-scripts" description="run all tests">
        <exec executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=empty"/>
            <arg value="--test"/>
        </exec>
    </target>

    <target name="test-test-scripts" description="run all tests">
        <exec executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=test"/>
            <arg value="--test"/>
        </exec>
    </target>

    <target name="test-adaptation" description="load and save adaptation main data, check that output==input">
        <property name="adaptation_test.dir1" value="${data.dir}/data/models/main/physical/worldwide"/>
        <property name="adaptation_test.dir2" value="${run.dir}/adaptation_test/main"/>        
        <delete dir="${adaptation_test.dir2}"/>
        <exec executable="${out.dir}/release/applications/adaptation_app/adaptation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="-i"/>
            <arg value="${adaptation_test.dir1}/physical.xml"/>
            <arg value="-o"/>
            <arg value="${adaptation_test.dir2}/physical.xml"/>
        </exec>
        <compare-dirs dir1="${adaptation_test.dir1}" dir2="${adaptation_test.dir2}" 
                      excludes="**/Pathfind.xml"
                      includes="**/*.xml" property="adaptation_test.is-different"/>
        <if>
            <isset property="adaptation_test.is-different"/>
            <then>
                <echo>"ERROR: the following files differ :</echo>
                <echo-files files="${adaptation_test.is-different}"/>
                <fail message="saved data differs from loaded data."/>
            </then>
        </if>
    </target>

    <!--
    ============================================================================
      package
    ============================================================================
    -->
    
    <target name="package" description="package the distribution" >
        <zip destfile="${run.dir}/symbols.pak">
            <fileset dir="${libraries.dir}/clients_gui/svg" includes="**/*"/>
        </zip>
        <delete dir="${dist.dir}/old"/>
        <move file="${dist.dir}/current" tofile="${dist.dir}/old"/>
        <mkdir dir="${dist.dir}/current"/>
        <echoxml file="${dist.dir}/current/exercise.xml">
            <exercise>
                <profiles file="profiles.xml"/>
                <orbat file="orbat_empty.xml"/>
                <weather file="weather.xml"/>   
                <terrain name="main"/>
                <model dataset="" physical="worldwide"/>    
            </exercise>
        </echoxml>
        <zip destfile="${dist.dir}/current/csword.zip">
            <zipfileset prefix="applications" dir="${out.dir}/release/applications/adaptation_app/"  includes="*.exe"/>
            <zipfileset prefix="applications" dir="${out.dir}/release/applications/gaming_app"       includes="*.exe *.qm"/>
            <zipfileset prefix="applications" dir="${out.dir}/release/applications/preparation_app"  includes="*.exe"/>
            <zipfileset prefix="applications" dir="${out.dir}/release/applications/simulation_app"   includes="*.exe"/>
            <zipfileset prefix="applications" dir="${libraries.dir}/clients_gui"                     includes="*.qm"/>
            <zipfileset prefix="applications" dir="${libraries.dir}/clients_kernel"                  includes="*.qm"/>
            <zipfileset prefix="applications" dir="${libraries.dir}/gaming"                          includes="*.qm"/>
            <zipfileset prefix="applications" dir="${libraries.dir}/ENT"                             includes="*.qm"/>
            <zipfileset prefix="applications" dir="${applications.dir}/gaming_app"                   includes="*.qm"/>
            <zipfileset prefix="applications" dir="${applications.dir}/adaptation_app/translator"    includes="*.qm"/>    
            <zipfileset prefix="applications" dir="${run.dir}">
                <include name="symbols.pak"/>
                <include name="symbols.xml"/>
                <include name="preferences.xml"/>
                <include name="license.dat"/>
                <include name="TAO.dll"/>
                <include name="TAO_CosNaming.dll"/>
                <include name="TAO_IORTable.dll"/>
                <include name="TAO_PortableServer.dll"/>
                <include name="TAO_RTEvent.dll"/>
                <include name="TAO_RTSched.dll"/>
                <include name="TAO_Strategies.dll"/>
                <include name="TAO_Svc_Utils.dll"/>
                <include name="ace.dll"/>
                <include name="asn1per.dll"/>
                <include name="boost_thread-vc71-mt-1_32.dll"/>
                <include name="dbghelp.dll"/>
                <include name="libFedTime.dll"/>
                <include name="libRTI-NG.dll"/>
                <include name="librtiInternalIntercept.dll"/>
                <include name="msvcp71.dll"/>
                <include name="msvcr71.dll"/>
                <include name="qt-*.dll"/>
                <include name="userDdm.dll"/>
                <include name="xerces-c_2_7.dll"/>
                <include name="zlib1.dll"/>
            </zipfileset>                           
            <!-- Cf defaultexcludes : no need of "svn export" -->
            <zipfileset prefix="data/models"   dir="${data.dir}/data/models/main"/>
            <zipfileset prefix="data/terrains" dir="${data.dir}/data/terrains"/>
            <zipfileset prefix="exercises/empty" dir="${data.dir}/exercises/empty"/>
            
            <zipfileset prefix="exercises/empty" dir="${dist.dir}/current" includes="exercise.xml"/>
        </zip>        
        <delete file="${dist.dir}/current/exercise.xml"/>
    </target>
        
    <!--
    ============================================================================
      configure
    ============================================================================
    -->
    <target name="configure" description="initialize local project structure with libraries">
        <update name="terrain" modules="terrain,geometry,geocoord,graphics,pathfind"/>
        <update name="asn"/>
        <update name="MT" modules="MT_Tools,MT_Memory,MT_IO,MT_Archive,MT_Patterns,MT_Profiler,MT_Time,MT_Thread,MT_Logger,MT_XmlTools,MT_Qt"/>
        <update name="qt"/>
        <update name="DIN"/>
        <update name="boost"/>
        <update name="rti"/>
        <update name="DIA"/>
        <update name="hla"/>
        <update name="tools"/>
        <update name="paranoia"/>
        <update name="xerces-c"/>
        <update name="xeumeuleu"/>
        <update name="svgl"/>
        <update name="zipstream"/>
        <update name="zlib"/>
        <update name="terrain" package="generation_app"/>
        <update name="DIA" package="DIA_Tool_DebugGUI_${platform}"/>
    </target>

    <!--
    ============================================================================
      main
    ============================================================================
    -->
    <target name="build" depends="libraries,applications"/>

    <target name="all" depends="configure,build,test,package" description="build and package distribution"/>

</project>

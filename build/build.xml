<?xml version="1.0" encoding="UTF-8" ?>
<project name="csword" default="all">

    <!-- Generate 3 months evaluation license -->
    <property name="flex.name" value="evaluation"/>
    <property name="flex.hostid" value="ANY"/>
    <tstamp>
        <format property="flex.expiration" pattern="d-MMM-yyyy" offset="3" unit="month" locale="en,US"/>
    </tstamp>

    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//file1/masa/common/dev/delivery/internal/poney/5.3"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>

    <property name="version.project" value="5.3"/>
    <property name="version.major" value="5.3.3"/>
    <property name="version.version" value="${version.major}.${git.revision}.${git.hash}"/>
    <property name="unicode.extension" value=" ゑ"/>

    <propertyregex property="platform32" input="${platform}" regexp="(\w+)_x64" select="\1" defaultvalue="${platform}"/>

    <!-- generate random ports -->
    <math result="test.portnumber2">
        <op op="+" datatype="int">
            <num value="${test.portnumber}"/>
            <num value="1"/>
        </op>
    </math>

    <!--
    ============================================================================
    data
    ============================================================================
    -->
    <target name="deploy-application-data" description="deploy application data to run directory">
        <copy todir="${run.dir}">
            <fileset dir="${data.dir}/app-data"/>
        </copy>
        <copy todir="${run.dir}/resources/locales">
            <fileset dir="${run.dir}" includes="qt_*.qm"/>
        </copy>
        <copy todir="${run.dir}/resources/scripts">
            <fileset dir="${libraries.dir}/script_plugin" includes="**/*.lua"/>
        </copy>
        <generate input="${data.dir}/app-data/resources/locales" excludes="license_*" extension="ts" target="${run.dir}/@{basename}.qm">
            <lrelease>
                <arg line='-verbose -qm "@{target}" "@{file}"'/>
            </lrelease>
        </generate>
    </target>

    <macrodef name="adaptation-update-database">
        <attribute name="zipped-database"/>
        <attribute name="todir" default="${out.dir}/physical base with unicode"/>
        <sequential>
            <delete dir="@{todir}"/>
            <unzip src="@{zipped-database}" dest="@{todir}"/>
            <run-adaptation dir="@{todir}" todir="@{todir}"/>
            <zip basedir="@{todir}" zipfile="@{zipped-database}" encoding="UTF-8"/>
            <delete dir="@{todir}"/>
        </sequential>
    </macrodef>

    <target name="update-test-databases" description="update databases used in tests">
        <adaptation-update-database zipped-database="${data.dir}/tests/test_data_unicode/physical base with unicode.zip"/>
    </target>

    <!--
    ============================================================================
    license
    ============================================================================
    -->
    <target name="generate-license" description="generate license files in run directory">
        <flexlm name="sword" feature="sword" vendor="bkmasa"/>
        <flexlm name="sword-gaming" feature="sword-gaming" vendor="bkmasa"/>
        <flexlm name="sword-dispatcher" feature="sword-dispatcher" vendor="bkmasa"
            extension="VENDOR_STRING=16"/>
        <flexlm name="sword-authoring" feature="sword-authoring" vendor="bkmasa"/>
        <flexlm name="sword-preparation" feature="sword-preparation" vendor="bkmasa"/>
        <flexlm name="sword-workshop" feature="sword-workshop" vendor="bkmasa"/>
        <flexlm name="sword-terrain-generation" feature="sword-terrain-generation" vendor="bkmasa"/>
        <flexlm name="sword-runtime" feature="sword-runtime" vendor="bkmasa"/>
        <flexlm name="sword-replayer" feature="sword-replayer" vendor="bkmasa"/>
        <flexlm name="brain.tools" feature="brain.tools" vendor="bkmasa"/>
        <!-- Since the applications are not being installed on the build servers,
             Flex has no way to guess the license files should be picked from
             the run directory, and even if it happens it is apparently after
             resolving others from the Registry. "license.dat" is the default
             license path defined in license_gui & co, so try our chance with
             this one first.
        -->
        <concat destfile="${run.dir}/license.dat" overwrite="true">
            <fileset dir="${run.dir}" includes="*.lic"/>
        </concat>
    </target>

    <!--
    ============================================================================
    tests
    ============================================================================
    -->


    <macrodef name="exec-unicode">
        <attribute name="name"/>
        <attribute name="exe"/>
        <attribute name="cwd" default="${run.dir}"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <python taskname="@{name}" timeout="600000">
                <!-- TODO: Add timeout -->
                <arg value="checksim.py"/>
                <arg value="--append-unicode-suffix"/>
                <arg value="@{cwd}"/>
                <arg value="@{exe}"/>
                <args/>
            </python>
        </sequential>
    </macrodef>

    <macrodef name="create-unicode-context">
        <attribute name="root"/>
        <attribute name="exercise"/>
        <attribute name="exercise-path" default="@{root}/exercises/"/>
        <attribute name="session"/>
        <attribute name="terrain"/>
        <attribute name="physical"/>
        <attribute name="new-root-without-unicode"/>
        <attribute name="new-exercise-file"/>
        <attribute name="unicode-extension" default="${unicode.extension}"/>
        <attribute name="new-root" default="@{new-root-without-unicode}@{unicode-extension}"/>
        <attribute name="new-exercise" default="@{exercise}@{unicode-extension}"/>
        <attribute name="new-session" default="@{session}@{unicode-extension}"/>
        <attribute name="new-terrain" default="@{terrain}@{unicode-extension}"/>
        <attribute name="new-physical" default="@{physical}@{unicode-extension}"/>
        <sequential>
            <echo message="Creating unicode context" />
            <delete dir="@{new-root}"/>
            <mkdir dir="@{new-root}/data/models/ada/physical/@{new-physical}"/>
            <mkdir dir="@{new-root}/data/models/ada/decisional"/>
            <mkdir dir="@{new-root}/data/terrains/@{new-terrain}"/>
            <mkdir dir="@{new-root}/exercises/@{new-exercise}"/>
            <!-- Copy physical base -->
            <copy todir="@{new-root}/data/models/ada/physical/@{new-physical}">
                <fileset dir="@{root}/data/models/ada/physical/@{physical}"/>
            </copy>
            <!-- Copy decisional base -->
            <copy todir="@{new-root}/data/models/ada/decisional">
                <fileset dir="@{root}/data/models/ada/decisional"/>
            </copy>
            <!-- Copy terrain and rename it with unicode -->
            <copy todir="@{new-root}/data/terrains/@{new-terrain}">
                <fileset dir="@{root}/data/terrains/@{terrain}"/>
            </copy>
            <!-- Copy exercise and rename it with unicode -->
            <copy todir="@{new-root}/exercises/@{new-exercise}">
                <fileset dir="@{exercise-path}/@{exercise}"/>
            </copy>
            <!-- Rename session dir with unicode -->
            <move file="@{new-root}/exercises/@{new-exercise}/sessions/@{session}" tofile="@{new-root}/exercises/@{new-exercise}/sessions/@{new-session}"/>
            <!-- Replace exercise.xml with the one referencing the new terrain and the new physical base -->
            <delete file="@{new-root}/exercises/@{new-exercise}/exercise.xml"/>
            <copy file="@{new-exercise-file}" tofile="@{new-root}/exercises/@{new-exercise}/exercise.xml"/>
        </sequential>
    </macrodef>

    <macrodef name="delete-unicode-context">
        <attribute name="new-root-without-unicode"/>
        <attribute name="unicode-extension" default="${unicode.extension}"/>
        <attribute name="new-root" default="@{new-root-without-unicode}@{unicode-extension}"/>
        <sequential>
            <echo message="Deleting unicode context" />
            <delete dir="@{new-root}"/>
        </sequential>
    </macrodef>

    <macrodef name="sim-unicode-test">
        <attribute name="root"/>
        <attribute name="exercise"/>
        <attribute name="exercise-path" default="@{root}/exercises/"/>
        <attribute name="session"/>
        <attribute name="terrain"/>
        <attribute name="physical"/>
        <attribute name="new-exercise-file"/>
        <attribute name="new-root-without-unicode" default="${out.dir}/Data"/>
        <sequential>
            <!-- Create context -->
            <create-unicode-context root="@{root}" exercise-path="@{exercise-path}" exercise="@{exercise}" session="@{session}" terrain="@{terrain}" physical="@{physical}" new-root-without-unicode="@{new-root-without-unicode}" new-exercise-file="@{new-exercise-file}"/>
            <!-- Launch simulation -->
            <exec-unicode name="sim-unicode" exe="${out.dir}/release/simulation_app.exe">
                <arg value="root-dir=@{new-root-without-unicode}"/>
                <arg value="exercise=@{exercise}"/>
                <arg value="session=@{session}"/>
                <arg value="simulation-address=${test.portnumber}"/>
                <arg value="dispatcher-address=${test.portnumber2}"/>
                <arg value="test"/>
            </exec-unicode>
            <!-- Remove context -->
            <delete-unicode-context new-root-without-unicode="@{new-root-without-unicode}"/>
        </sequential>
    </macrodef>

    <target name="sim_unicode_test">
        <sim-unicode-test root="${data.dir}" exercise-path="${data.dir}/tests/test_data_unicode/" exercise="test_sim_unicode" session="default" terrain="land-of-stripes" physical="worldwide" new-exercise-file="${data.dir}/tests/test_data_unicode/test_sim_unicode exercise with unicode.xml"/>
    </target>

    <macrodef name="run-one-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <exec taskname="sim" executable="${out.dir}/release/simulation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="--root-dir=${data.dir}"/>
                <arg value="--exercise=@{exercise}"/>
                <arg value="--session=@{session}"/>
                <arg value="--simulation-address=${test.portnumber}"/>
                <arg value="--dispatcher-address=${test.portnumber2}"/>
                <arg value="--test"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="run-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
            </run-one-simulation>
        </sequential>
    </macrodef>

   <macrodef name="save-load-checkpoint">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <attribute name="checkpoint" default="tempcheckpoint"/>
        <sequential>
            <echo taskname="save-checkpoint" message='simulation_app --test --savecheckpoint=@{checkpoint} --exercise="@{exercise}" --session=@{session} --root-dir="${data.dir}"'/>
            <run-one-simulation exercise="@{exercise}">
                <arg value="--savecheckpoint=@{checkpoint}"/>
            </run-one-simulation>
            <echo taskname="load-checkpoint" message='simulation_app --test --checkpoint=@{checkpoint} --exercise="@{exercise}" --session=@{session} --root-dir="${data.dir}"'/>
            <run-one-simulation exercise="@{exercise}">
                <arg value="- -checkpoint=@{checkpoint}"/>
            </run-one-simulation>
            <delete dir="${data.dir}/exercises/@{exercise}/checkpoints/@{checkpoint}"/>
        </sequential>
    </macrodef>

    <target name="checkpoint_test" description="save and load a checkpoint">
        <save-load-checkpoint exercise="worldwide/CheckpointTests"/>
        <save-load-checkpoint exercise="tests/CheckpointTests"/>
    </target>

    <macrodef name="test-scripts">
        <attribute name="dataset"/>
        <attribute name="physical"/>
        <attribute name="exercise" default="scripts_test"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <delete dir="${data.dir}/exercises/@{exercise}"/>
            <copy todir="${data.dir}/exercises/@{exercise}" overwrite="true">
                <fileset dir="${data.dir}/tests/@{exercise}" includes="**/*.xml"/>
                <filterset>
                    <filter token="DATASET" value="@{dataset}"/>
                    <filter token="PHYSICAL" value="@{physical}"/>
                </filterset>
            </copy>
            <run-simulation exercise="@{exercise}" session="test-session"/>
            <delete dir="${data.dir}/exercises/@{exercise}"/>
        </sequential>
    </macrodef>

    <target name="scripts_test" description="run all script tests">
        <!-- This should be replaced by an equivalent test on ww-ML
        <test-scripts dataset="ada" physical="scipio"/>
        -->
        <test-scripts dataset="ada" physical="worldwide"/>
    </target>

    <macrodef name="run-adaptation">
        <attribute name="dir"/>
        <attribute name="todir"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="adn" executable="${out.dir}/release/adaptation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="-i"/>
                <arg value="@{dir}/physical.xml"/>
                <arg value="-o"/>
                <arg value="@{todir}/physical.xml"/>
                <elements/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation">
        <attribute name="dir"/>
        <attribute name="sheets" default="Mission sheets"/>
        <attribute name="todir" default="${out.dir}/test-adaptation"/>
        <attribute name="checksums" default="@{todir}.checksums"/>
        <attribute name="excludes" default="*/@{sheets}/*.html"/>
        <sequential>
            <echo>Testing models: @{dir}</echo>
            <!-- HTML files are not versioned, there is no easy way to test for
                 non-regressions, this is someone else job.
            -->
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="write"/>
                <arg value="@{dir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
            <delete dir="@{todir}"/>
            <run-adaptation dir="@{dir}" todir="@{todir}"/>
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="read"/>
                <arg value="@{dir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="read"/>
                <arg value="@{todir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation-unicode">
        <attribute name="zipped-database"/>
        <attribute name="todir" default="${out.dir}/physical base with unicode"/>
        <!--
            Java loses unicode when calling exec or echo, so no unicode char in the physical base path for now.
            Use exec unicode to do that.
        -->
        <sequential>
            <delete dir="@{todir}"/>
            <unzip src="@{zipped-database}" dest="@{todir}"/>
            <test-adaptation dir="@{todir}" sheets="Mission sheetsひらがな"/>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation-newbase">
        <attribute name="todir" default="${out.dir}/test-adaptation-newbase"/>
        <sequential>
            <delete dir="@{todir}"/>
            <exec executable="${out.dir}/release/adaptation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="-c"/>
                <arg value="@{todir}/physical.xml"/>
                <arg value="--silent"/>
            </exec>
            <test-adaptation dir="@{todir}"/>
        </sequential>
    </macrodef>  

    <macrodef name="test-adaptation-swap">
        <attribute name="dir"/>
        <attribute name="master"/>
        <attribute name="language"/>
        <attribute name="intermediate-dir" default="${out.dir}/test-adaptation-swap-intermediate"/>
        <attribute name="final-dir" default="${out.dir}/test-adaptation-swap"/>
        <attribute name="checksums" default="@{final-dir}.checksums"/>
        <!-- <attribute name="excludes" default="*/@{sheets}/*.html"/> -->
        <sequential>
            <echo>Testing swap: @{dir}</echo>
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="write"/>
                <arg value="@{dir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
            <delete dir="@{intermediate-dir}"/>
            <delete dir="@{final-dir}"/>
            <run-adaptation dir="@{dir}" todir="@{intermediate-dir}">
                <arg value="-s"/>
                <arg value="@{language}"/>
            </run-adaptation>
            <run-adaptation dir="@{intermediate-dir}" todir="@{final-dir}">
                <arg value="-s"/>
                <arg value="@{master}"/>
            </run-adaptation>
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="read"/>
                <arg value="@{dir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
            <python taskname="checksum">
                <arg value="checksum.py"/>
                <arg value="read"/>
                <arg value="@{final-dir}"/>
                <arg value="@{checksums}"/>
                <arg value="--exclude=@{excludes}"/>
            </python>
        </sequential>
    </macrodef>  

    <target name="adaptation_test" description="load, save then diff physical data">
        <test-adaptation-newbase/>
        <!-- This should be replaced by an equivalent test on ww-ML
        <test-adaptation dir="${data.dir}/data/models/ada/physical/scipio"/>
        -->
        <test-adaptation dir="${data.dir}/data/models/ada/physical/worldwide"/>
        <test-adaptation-unicode zipped-database="${data.dir}/tests/test_data_unicode/physical base with unicode.zip"/>
        <test-adaptation-swap dir="${data.dir}/data/models/ada/physical/test" master="en" language="fr"/>
    </target>

    <macrodef name="test-exercise">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <attribute name="simulation" default="simulation_app"/>
        <attribute name="schemas.dir" default="${run.dir}/resources/schemas/${version.major}/exercise"/>
        <attribute name="exercise.dir" default="${data.dir}/exercises/@{exercise}"/>
        <sequential>
            <schemavalidate nonamespacefile="@{schemas.dir}/exercise.xsd" file="@{exercise.dir}/exercise.xml"/>
            <schemavalidate nonamespacefile="@{schemas.dir}/orbat.xsd" file="@{exercise.dir}/orbat.xml"/>
            <schemavalidate nonamespacefile="@{schemas.dir}/profiles.xsd" file="@{exercise.dir}/profiles.xml"/>
            <schemavalidate nonamespacefile="@{schemas.dir}/weather.xsd" file="@{exercise.dir}/weather.xml"/>
            <schemavalidate nonamespacefile="@{schemas.dir}/session.xsd" file="@{exercise.dir}/sessions/@{session}/session.xml"/>
            <run-simulation exercise="@{exercise}" session="@{session}"/>
        </sequential>
    </macrodef>

    <target name="exercises_test" description="validate some significant exercises">
        <test-exercise exercise="worldwide/Egypt" session="fast"/>
        <!-- This should be replaced by an equivalent test on ww-ML
        <test-exercise exercise="scipio/Poseidon VA"/>
        -->
    </target>

    <macrodef name="test-data-migration">
        <attribute name="exercise"/>
        <attribute name="old-version"/>
        <attribute name="session" default="default"/>
        <attribute name="temporary-name" default="test-data-migration"/>
        <sequential>
            <echo>Testing automatic migration from version @{old-version} using exercise '@{exercise}'</echo>
            <!-- Copy physical database -->
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/data/models/ada/physical/@{temporary-name}">
                <fileset dir="${data.dir}/tests/test_data_migration/@{old-version}/physical"/>
            </copy>
            <!-- ADN -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <run-adaptation dir="${data.dir}/data/models/ada/physical/@{temporary-name}" todir="${out.dir}/@{temporary-name}"/>
            <!-- Copy exercise -->
            <delete dir="${data.dir}/exercises/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/exercises/@{temporary-name}">
                <fileset dir="${data.dir}/tests/test_data_migration/@{old-version}/exercises/@{exercise}"/>
                <filterset>
                    <filter token="DATASET" value="ada"/>
                    <filter token="PHYSICAL" value="@{temporary-name}"/>
                </filterset>
            </copy>
            <!-- SIM -->
            <run-simulation exercise="@{temporary-name}" session="@{session}"/>
            <!-- cleanup -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}"/>
            <delete dir="${data.dir}/exercises/@{temporary-name}"/>
        </sequential>
    </macrodef>

    <target name="data_migrations_test">
        <test-data-migration old-version="3.0" exercise="CabourgOld"/>
        <test-data-migration old-version="4.2.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.1" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.2" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.4embraer" exercise="Egypt"/>
        <test-data-migration old-version="4.3.0cae" exercise="Paris"/>
        <test-data-migration old-version="5.0.0" exercise="Egypt"/>
        <test-data-migration old-version="5.2.2" exercise="Egypt"/>
    </target>

    <macrodef name="check-gui">
        <attribute name="app"/>
        <attribute name="logfile" default=""/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <python taskname="@{app}">
                <arg value="checkgui.py"/>
                <arg value="--run_dir=${run.dir}"/>
                <arg value="--logfile=@{logfile}"/>
                <arg value="--"/>
                <arg value="${out.dir}/release/@{app}.exe"/>
                <elements/>
            </python>
        </sequential>
    </macrodef>

    <macrodef name="check-app">
        <attribute name="app"/>
        <attribute name="logfile" default=""/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <python taskname="@{app}">
                <arg value="checkapp.py"/>
                <arg value="--run-dir=${run.dir}"/>
                <arg value="--logfile=@{logfile}"/>
                <arg value="--"/>
                <arg value="${out.dir}/release/@{app}.exe"/>
                <elements/>
            </python>
        </sequential>
    </macrodef>

    <macrodef name="check-qt-names">
        <attribute name="app"/>
        <attribute name="outputfile"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="@{app}" executable="${out.dir}/release/@{app}.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="--debug-qt-names=@{outputfile}"/>
                <elements/>
            </exec>
            <python>
                <arg value="${root.dir}/build/checkqtnames.py"/>
                <arg value="@{outputfile}"/>
            </python>
            <delete file="@{outputfile}"/>
        </sequential>
    </macrodef>

    <target name="qt_name_test">
        <check-qt-names app="preparation_app" outputfile="${out.dir}/checkqtnames.txt"/>
        <check-qt-names app="adaptation_app" outputfile="${out.dir}/checkqtnames.txt">
            <arg value="-i"/>
            <arg value="${data.dir}/data/models/ada/physical/test/physical.xml"/>
        </check-qt-names>
    </target>

    <target name="app_test" description="check whether gui applications start properly">
        <check-gui app="adaptation_app"/>
        <check-gui app="preparation_app"/>
        <check-gui app="selftraining_app">
            <arg value="--launcher-port=${test.portnumber}"/>
            <arg value="--dispatcher-port=${test.portnumber2}"/>
            <arg value="--test"/>
        </check-gui>
        <check-gui app="gaming_app" logfile="${out.dir}/app_test_gaming/gaming.log">
            <arg value="--root-dir=${data.dir}"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--debug-dir=${out.dir}/app_test_gaming"/>
        </check-gui>
        <check-app app="dispatcher_app"
            logfile="${out.dir}/app_test_dispatcher/dispatcher.log">
            <arg value="--root-dir=${data.dir}"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-address=${test.portnumber}"/>
            <arg value="--debug-dir=${out.dir}/app_test_dispatcher"/>
            <arg value="--test"/>
        </check-app>
        <check-app app="launcher_app">
            <arg value="--test"/>
        </check-app>
        <check-app app="launcher_test_app">
            <arg value="--test"/>
        </check-app>
        <check-app app="replayer_app"
            logfile="${out.dir}/app_test_replayer/replayer.log">
            <arg value="--root-dir=${data.dir}"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-address=${test.portnumber}"/>
            <arg value="--debug-dir=${out.dir}/app_test_replayer"/>
            <arg value="--test"/>
        </check-app>
    </target>

    <!--
    ============================================================================
    documentation
    ============================================================================
    -->

    <target name="proto-api-documentation"
        description="generate SDK documentation">
        <mkdir dir="${out.dir}/sdk/doc/html"/>
        <python taskname="python">
            <arg value="${bin.dir}/asciidoc/asciidoc/asciidoc.py"/>
            <arg value="--out-file=${out.dir}/sdk/doc/html/index.html"/>
            <arg value="${libraries.dir}/protocol/doc/sdk.txt"/>
        </python>
        <python>
            <arg value="${bin.dir}/asciidoc/asciidoc/a2x.py"/>
            <arg value="--format=pdf"/>
            <arg value="--fop"/>
            <!-- Linting needs the DTD, DTD are usually resolved relatively to
                 the input file location, this is a pain to deal with, just
                 forget it, asciidoc should generate valid docbook anyway. -->
            <arg value="--no-xmllint"/>
            <arg value="--xsltproc-opts=-nonet"/>
            <arg value="--destination-dir=${out.dir}/sdk/doc"/>
            <arg value="${libraries.dir}/protocol/doc/sdk.txt"/>
        </python>
    </target>

    <target name="documentation" depends="proto-api-documentation"/>

    <!--
    ============================================================================
    package
    ============================================================================
    -->
    <target name="package" depends="
         package.debug
        ,package.ts
        ,package.binaries
        ,package.gaming_app
        ,package.sdk
        ,package.proto
        ,package.xsd"
        description="package the installers and packs"/>

    <!-- Package misc -->
    <target name="package.debug" description="create a zip with all PDB files">
        <safe-move file="${out.dir}/debug_${platform}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <mappedresources>
                    <fileset dir="${out.dir}/release" includes="**/*.pdb" excludes="lib*.pdb,*_test.pdb,client_sample_app.pdb"/>
                    <flattenmapper/>
                </mappedresources>
             </zip>
        </safe-move>
    </target>

    <target name="package.proto" description="package protobuf for other projects">
        <safe-move file="${out.dir}/protobuf.zip">
            <zip destfile="@{file}" duplicate="fail">
                <fileset dir="${src.dir}/libraries/protocol/proto"
                    includes="*.proto"/>
            </zip>
        </safe-move>
    </target>

    <macrodef name="check-depends">
        <attribute name="file"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <python taskname="depends">
                <env key="PATH" path="${env.PATH}:${bin.dir}/7z:${bin.dir}/depends"/>
                <arg value="${bin.dir}/buildtools/checkdepends.py"/>
                <arg value="@{file}"/>
                <elements/>
            </python>
        </sequential>
    </macrodef>

    <target name="package.binaries" description="create a zip with all binaries">
        <safe-move file="${out.dir}/binaries_${platform}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <mappedresources>
                    <fileset dir="${out.dir}/release" includes="**/*.exe" excludes="**/*_test.exe,**/client_sample_app.exe"/>
                    <flattenmapper/>
                </mappedresources>
                <fileset dir="${run.dir}">
                    <exclude name="Debug/**"/>
                    <exclude name="resources/integration tests/**"/>
                </fileset>
            </zip>
            <check-depends file="@{file}"/>
        </safe-move>
    </target>

    <target name="package.gaming_app" description="create a zip with a standalone gaming_app binary">
        <safe-move file="${out.dir}/gaming_${platform}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <fileset dir="${out.dir}/release" includes="gaming_app.exe"/>
                <fileset dir="${run.dir}"
                         includes="*.qm,
                                   *.qss,
                                   *.xml,
                                   BugTrap*.dll,
                                   gdal19.dll,
                                   geos.dll,
                                   geos_c.dll,
                                   icudt52.dll,
                                   icuuc52.dll,
                                   libeay32.dll,
                                   libexpat.dll,
                                   libiconv.dll,
                                   libpq.dll,
                                   libpng16.dll,
                                   mapnik.dll,
                                   phonon4.dll,
                                   proj.dll,
                                   Qt3Support4.dll,
                                   QtCore4.dll,
                                   QtGui4.dll,
                                   QtNetwork4.dll,
                                   QtOpenGL4.dll,
                                   QtSql4.dll,
                                   QtWebKit4.dll,
                                   QtXml4.dll,
                                   spatialite.dll,
                                   ssleay32.dll,
                                   Xalan-C_1_11.dll,
                                   XalanMessages_1_11.dll,
                                   xerces-c_3_1.dll,
                                   zlib1.dll,
                                   phonon_backend/*.dll,
                                   imageformats/*.dll,
                                   mapnik/fonts/*.ttf,
                                   mapnik/input/shape.input"/>
                <fileset dir="${run.dir}" includes="resources/**"/>
            </zip>
            <check-depends file="@{file}"/>
        </safe-move>
    </target>

    <target name="package.ts" description="create a zip with all ts files">
        <safe-move file="${out.dir}/ts.zip">
            <zip destfile="@{file}" duplicate="fail">
               <mappedresources>
                   <fileset dir="${src.dir}" includes="**/*.ts"/>
                   <flattenmapper/>
               </mappedresources>
               <mappedresources>
                   <fileset dir="${data.dir}/app-data/resources/locales" includes="**/*.ts" excludes="license_*"/>
                   <flattenmapper/>
               </mappedresources>
            </zip>
        </safe-move>
    </target>

    <target name="package.xsd" description="create a zip with all schema files">
        <safe-move file="${out.dir}/xsd.zip">
            <zip destfile="@{file}" duplicate="fail">
                <zipfileset dir="${data.dir}/app-data/resources/schemas/${version.major}"
                    excludes="xsl/**" prefix="schemas"/>
            </zip>
        </safe-move>
    </target>

    <target name="package.sdk" description="package sdk documentation">
        <local name="sdk.prefix"/>
        <property name="sdk.prefix" value="SWORD_API_${version.project}"/>
        <safe-move file="${out.dir}/sdk.zip">
            <zip destfile="@{file}" duplicate="fail">
                <zipfileset dir="${out.dir}/sdk/doc"
                    includes="sdk.pdf"
                    fullpath="${sdk.prefix}/SWORD_API_Reference_${version.project}.pdf"/>
                <zipfileset dir="${out.dir}/sdk/doc/html"
                    includes="**"
                    prefix="${sdk.prefix}/SWORD_API_Reference_${version.project}-html"/>
                <zipfileset dir="${src.dir}/libraries/protocol/proto"
                    includes="*.proto"
                    prefix="${sdk.prefix}/SWORD_API_Protocol"/>
            </zip>
        </safe-move>
    </target>

    <!--
    ============================================================================
    various project/source checks
    ============================================================================
    -->
    <target name="checkreports" description="check simulation reports">
        <python>
            <arg value="${root.dir}/build/checkreports.py"/>
            <arg value="check"/>
            <arg value="${root.dir}"/>
            <arg value="${root.dir}/data/data/models/reports.txt"/>
        </python>
    </target>

    <target name="checkdec" description="check models are in sync with DEC functions">
        <python>
            <arg value="${root.dir}/build/listdec.py"/>
            <arg value="check"/>
            <arg value="${data.dir}/data/models/decfunctions.txt"/>
            <arg value="${src.dir}/libraries/simulation_kernel"/>
        </python>
    </target>

    <target name="checkproto" description="check protobuf definitions">
        <python>
            <arg value="${bin.dir}/protolint/protolint.py"/>
            <arg value="style"/>
            <arg value="${src.dir}/libraries/protocol/proto"/>
        </python>
        <python>
            <arg value="${bin.dir}/protolint/protolint.py"/>
            <arg value="compare"/>
            <arg value="${bin.dir}/protolint/proto/proto-5.3.x"/>
            <arg value="${src.dir}/libraries/protocol/proto"/>
            <!-- New magic actions are fine -->
            <arg value="--exclude=SimToClient.Content.UnitMagicActionAck.UnitMagicAction.Type"/>
            <arg value="--exclude=ClientToSim.Content.UnitMagicAction.Type"/>
            <arg value="--exclude=ClientToSim.Content.MagicAction.Type"/>
            <!-- New logistic state introduced by manual mode -->
            <arg value="--exclude=*LogMaintenanceHandlingUpdate.EnumLogMaintenanceHandlingStatus"/>
            <arg value="--exclude=*EnumPrecipitationType"/>
        </python>
    </target>

    <target name="check" depends="checkreports,checkdec,checkproto"
        description="perform various static checks on codebase"/>

    <!--
    ============================================================================
    main
    ============================================================================
    -->
    <target name="update" description="update package dependencies">
        <update name="7z" version="9.30-1"/>
        <update name="asciidoc" version="8.6.8"/>
        <update name="boost" version="1.50.r653"/>
        <update name="bugtrap" version="1.3.3291.42976"/>
        <update name="buildtools" version="5.3"/>
        <update name="cmake" version="2.8.11.1-masa1"/>
        <update name="depends" version="2.2.6000"/>
        <update name="flexlm" version="11.8"/>
        <update name="gdal" version="1.9.1.r671"/>
        <update name="geometry" version="5.3"/>
        <update name="geos" version="3.3.7.r662"/>
        <update name="glew" version="1.9.0"/>
        <update name="hla" version="2.2" package="dll/${platform}" todir="${run.dir}/plugins/hla"/>
        <update name="hla" version="2.2" package="federation_app" todir="${bin.dir}"/>
        <update name="hla" version="2.2" package="include" todir="${include.dir}"/>
        <update name="hla" version="2.2" package="lib/${platform}" todir="${lib.dir}"/>
        <update name="iconv" version="1.14.r619"/>
        <update name="icu" version="4.52.1"/>
        <update name="libpng" version="1.6.6"/>
        <update name="mapnik" version="2.2.0.r683"/>
        <update name="masalife/brain" version="2013-2.0"/>
        <update name="models" version="5.3" package="decisional-dev" todir="${data.dir}/data/models"/>
        <update name="models" version="5.3" package="exercises-dev" todir="${data.dir}/exercises"/>
        <update name="models" version="5.3" package="propagations-dev" todir="${data.dir}/data/propagations"/>
        <update name="models" version="5.3" package="terrains-dev" todir="${data.dir}/data/terrains"/>
        <update name="mongoose" version="3.3.r351"/>
        <update name="openssl" version="1.0.0d"/>
        <update name="proj4" version="4.8.0"/>
        <update name="protobuf" version="2.3.0"/>
        <update name="python" version="2.7.3-3"/>
        <update name="qt" version="4.7.0.r660"/>
        <update name="spatialite" version="3.1.0.r669"/>
        <update name="sqlite" version="3.7.13.r229"/>
        <update name="steel" version="5.3"/>
        <update name="svgl" version="5.3"/>
        <update name="sword-proto" version="5.3" package="sword-protobuf" todir="${bin.dir}"/>
        <update name="sword-doc" version="5.3" package="doc" todir="${root.dir}/doc"/>
        <update name="sword/testdata" version="5.2" package="testdata" todir="${data.dir}/tests"/>
        <update name="terrain" version="5.3"/>
        <update name="tools" version="1.3"/>
        <update name="turtle" version="1.688"/>
        <update name="vcredist" version="1.1" package="vcredist"/>
        <update name="xalan-c" version="svn rev 990605 + patch"/>
        <update name="xerces-c" version="3.1.1"/>
        <update name="xeumeuleu" version="1.750"/>
        <update name="zlib" version="1.2.6.r167"/>
        <!-- timeline_ui dependencies -->
        <update name="cef" version="1.1364.1123" package="dll/${platform32}" todir="${run.dir}/cef"/>
        <update name="timeline" version="5.3"/>
        <update name="timeline_ui" version="5.3" package="dll/${platform32}" todir="${run.dir}/cef"/>
        <update name="timeline_ui" version="5.3" package="include"           todir="${include.dir}"/>
        <update name="timeline_ui" version="5.3" package="lib/${platform}"   todir="${lib.dir}"/>
    </target>

    <target name="configure" depends="update,deploy-application-data,generate-license" description="update packages and decisional"/>

    <target name="clean" description="clean intermediate build artifacts">
        <delete dir="${out.dir}"/>
    </target>

    <target name="cmake.msvc" description="generate visual studio project files">
        <cmake_msvc input="${root.dir}/build" version="${version.version}"/>
        <python taskname="fixmsvc">
            <arg value="${bin.dir}/buildtools/fixmsvc.py"/>
            <arg value="${out.dir}/msvc"/>
        </python>
        <exec taskname="snapdir" executable="${bin.dir}/snapdir" failonerror="true">
            <arg value="--input=${src.dir}"/>
            <arg value="--output=${out.dir}/msvc/.snapdir"/>
            <arg value="--save"/>
        </exec>
    </target>

    <target name="cmake.configure" description="generate cmake build files">
        <cmake_configure input="${root.dir}/build" configuration="release" version="${version.version}"/>
    </target>

    <target name="build" description="build everything">
        <cmake_build/>
    </target>

    <target name="unit_test" description="build and run unit tests">
        <cmake_test/>
    </target>

    <target name="test" depends="unit_test
        ,adaptation_test
        ,app_test
        ,checkpoint_test
        ,sim_unicode_test
        ,data_migrations_test
        ,exercises_test
        ,qt_name_test
        ,scripts_test
        " description="build and run all tests"/>

    <target name="all" depends="configure,check,cmake.configure,build,test,documentation,package"/>

    <target name="format">
        <update name="llvm" version="r192445"/>
        <apply executable="${bin.dir}/llvm/bin/clang-format" parallel="true" maxparallel="128">
            <arg value="-i"/>
            <srcfile/>
            <fileset dir="${src.dir}" includes="**/*.c,**/*.cpp,**/*.h,**/*.hpp,**/*.inl"/>
        </apply>
    </target>

</project>

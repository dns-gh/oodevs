<?xml version="1.0"?>
<project name="csword" default="all">

    <import file="//install/masa/common/dev/common/poney/poney.xml"/>

    <!--
    ============================================================================
      tools
    ============================================================================
    -->
    <macrodef name="echo-files">
        <attribute name="files"/>
        <sequential>
            <for list="@{files}" param="file" delimiter=";">
                <sequential>
                    <echo>@{file}</echo>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="compare-dirs">
        <attribute name="dir1"/>
        <attribute name="dir2"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <attribute name="property"/>
        <sequential>
            <fileset id="@{dir1}.id" dir="@{dir1}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir2}" ignorefiletimes="true"/> <!-- ne prend pas en compte les fichiers 'en trop' dans dir2 -->
            </fileset>
            <pathconvert property="@{property}.@{dir1}" refid="@{dir1}.id" setonempty="false"/>
            <fileset id="@{dir2}.id" dir="@{dir2}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir1}" ignorefiletimes="true"/>
            </fileset>
            <pathconvert property="@{property}.@{dir2}" refid="@{dir2}.id" setonempty="false"/>
            <if>
                <and>
                    <isset property="@{property}.@{dir1}"/>
                    <isset property="@{property}.@{dir2}"/>
                </and>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}};${@{property}.@{dir2}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir1}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir2}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir2}}"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <!--
    ============================================================================
      libraries
    ============================================================================
    -->
    <target name="libraries" description="build all libraries"
            depends="library.MT_Tools_Scipio,library.ENT,library.ASN,library.simulation_terrain,library.simulation_kernel,library.simulation_missions,
                     library.clients_kernel,library.clients_gui"/>

    <target name="library.MT_Tools_Scipio" description="build MT_Tools_Scipio static library">
        <build-lib name="MT_Tools_Scipio" input="MT_Tools" pch="MT_Tools_pch"/>
    </target>

    <target name="library.ASN" description="build ASN static library">
        <build-lib name="ASN" warnings="production">
            <includepath path="${include.dir}/asn"/>
        </build-lib>
    </target>

    <target name="library.ENT" description="build ENT static library">
        <build-lib name="ENT" depends="qt"/>
    </target>

    <target name="library.dispatcher" description="build dispatcher static library" depends="library.MT_Tools_Scipio,library.ASN">
        <build-lib name="dispatcher">
            <includepath path="${include.dir}/ASN"/>
        </build-lib>
    </target>

    <target name="library.simulation_terrain" description="build simulation_terrain static library" depends="library.MT_Tools_Scipio">
        <build-lib name="simulation_terrain"/>
    </target>

    <target name="library.simulation_kernel" description="build simulation_kernel static library" depends="library.ASN,library.simulation_terrain">
        <build-lib name="simulation_kernel">
            <includepath path="${include.dir}/ASN"/>
            <includepath path="${libraries.dir}/simulation_kernel"/> <!-- pour MIL.h -->
        </build-lib>
    </target>

    <target name="library.simulation_missions" description="build simulation_missions static library" depends="library.simulation_kernel">
        <build-lib name="simulation_missions" excludes="**/MIL_*">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <includepath path="${include.dir}/ASN"/>
        </build-lib>
    </target>

    <target name="library.clients_kernel" description="build clients_kernel static library" depends="library.ENT">
        <build-lib name="clients_kernel" depends="qt"/>
    </target>

    <target name="library.clients_gui" description="build clients_gui static library" depends="library.clients_kernel">
        <build-lib name="clients_gui" excludes="**/font/*" depends="qt"/>
    </target>

    <target name="library.gaming" description="build gaming static library" depends="library.ASN,library.clients_gui">
        <build-lib name="gaming" depends="qt">
            <includepath path="${include.dir}/ASN"/>
        </build-lib>
    </target>

    <target name="library.preparation" description="build gaming static library" depends="library.clients_gui">
        <build-lib name="preparation" depends="qt"/>
    </target>

    <!--
    ============================================================================
     applications
    ============================================================================
    -->
    <target name="applications" description="build CSword executables"
            depends="applications.simulation,applications.clients"/>

    <target name="applications.simulation" description="build CSword Simulation executables"
            depends="application.dispatcher_app,application.simulation_app,application.simulation_tester,application.AGR,application.ScriptCompiler" />

    <target name="applications.clients" description="build CSword Client executables"
            depends="application.gaming_app,application.preparation_app,application.adaptation_app" />

    <target name="application.dispatcher_app" description="build CSword Dispatcher executable" depends="library.dispatcher">
        <build-app name="dispatcher_app" subsystem="console" depends="mt,din,boost"
                   libs="masalloc,paranoia,xeumeuleu,tools,xeumeuleu
                         MT_Tools_Scipio,ASN,asn1per
                         dispatcher">
            <syslibset libs="dbghelp,psapi"/>
            <syslibset libs="iphlpapi"/> <!-- paranoia -->
            <includepath path="${include.dir}/ASN"/>
        </build-app>
    </target>

    <target name="application.simulation_app" description="build CSword Simulation executable" depends="library.simulation_missions,library.dispatcher">
        <build-app name="simulation_app" subsystem="console" depends="mt,din,dia3,terrain,boost"
                   libs="HLA,libFedTime,masalloc,paranoia,tools,xeumeuleu
                         MT_Tools_Scipio,ASN,asn1per,
                         simulation_terrain,simulation_kernel,simulation_missions,dispatcher">
            <syslibset libs="dbghelp,psapi"/>
            <syslibset libs="iphlpapi"/> <!-- paranoia -->
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <includepath path="${include.dir}/ASN"/>
            <defineset define="_WIN32_WINNT=0x0400"/> <!-- for 'IsDebuggerPresent()' -->
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
            <linkerarg value="/LARGEADDRESSAWARE"/>   <!-- Executable can access 3GiB instead of 2GiB -->
        </build-app>
    </target>

    <target name="application.simulation_tester" description="build CSword Simulation Tester executable" depends="library.ASN,library.MT_Tools_Scipio">
        <!-- TMP
        <build-app name="simulation_tester" subsystem="console" depends="mt,din,terrain"
                   libs="MT_Tools_SCIPIO,ASN,asn1per"
                   excludes="**/Actions/Missions/Pawn/*.cpp,**/Actions/Missions/Automat/*.cpp,**/Actions/Missions/Population/*.cpp">
            <includepath path="${applications.dir}/simulation_tester"/>
            <includepath path="${include.dir}/ASN"/>
        </build-app>-->
    </target>

    <target name="application.adaptation_app" description="build CSword Adaptation executable" depends="library.ENT,library.clients_gui">
        <build-app name="adaptation_app" depends="mt,qt,xeumeuleu,boost" excludes="**/XmlResources.cpp" libs="ENT,clients_gui,clients_kernel" pch-excludes="qtundo.cpp">
            <syslibset libs="advapi32,user32"/>
        </build-app>
    </target>

    <target name="application.gaming_app" description="build CSword Gaming executable" depends="library.gaming">
        <build-app name="gaming_app" excludes="**/**_Gen.*,**/splashscreen.cpp" depends="mt,din,terrain,xeumeuleu,qt,boost"
                   libs="ASN,ENT,gaming,clients_gui,clients_kernel,asn1per,svgl">
            <includepath path="${include.dir}/ASN"/>
            <syslibset libs="gdi32,psapi,dbghelp"/>
        </build-app>
    </target>

    <target name="application.preparation_app" description="build CSword Gaming executable" depends="library.preparation">
        <build-app name="preparation_app" excludes="**/**_Gen.*,**/splashscreen.cpp" depends="mt,din,terrain,xeumeuleu,qt,boost"
                   libs="ENT,preparation,clients_gui,clients_kernel,svgl">
            <syslibset libs="gdi32,psapi,dbghelp"/>
        </build-app>
    </target>

    <target name="application.AGR" description="build AGR executable">
        <build-app name="AGR" subsystem="console" excludes="**/*_Skeleton.*" depends="mt,boost">
            <syslibset libs="user32"/>
        </build-app>
    </target>

    <target name="application.ScriptCompiler" description="build CSword ScriptCompiler executable" depends="library.MT_Tools_Scipio">
        <build-app name="ScriptCompiler" subsystem="console" depends="mt,dia3" libs="MT_Tools_Scipio"/>
    </target>

    <!--
    ============================================================================
      clean
    ============================================================================
    -->
    <target name="clean" description="clean intermediate build artifacts">
        <clean name="MT_Tools_Scipio"/>
        <clean name="ASN"/>
        <clean name="ENT"/>
        <clean name="simulation_terrain"/>
        <clean name="simulation_kernel"/>
        <clean name="simulation_missions"/>
        <clean name="simulation_tester"/>
        <clean name="simulation_app"/>
        <clean name="clients_kernel"/>
        <clean name="clients_gui"/>
        <clean name="gaming"/>
        <clean name="gaming_app"/>
        <clean name="preparation"/>
        <clean name="preparation_app"/>
        <clean name="adaptation_app"/>
        <clean name="AGR"/>
        <clean name="ScriptCompiler"/>
    </target>

    <!--
    ============================================================================
      tests
    ============================================================================
    -->
    <target name="test" depends="generate-license,test-test-scripts,test-main-scripts,test-adaptation" description="run all tests"/>

    <target name="generate-license" description="generate license file in run directory">
        <exec executable="${bin.dir}/hostid_light.exe" failonerror="true" outputproperty="hostid"/>
        <exec executable="${bin.dir}/paranoia_light.exe" failonerror="true" inputstring="${hostid}" output="${run.dir}/scipio.license"> <!-- FIXME license name is still scipio -->
            <arg value="scipio"/>
        </exec>
    </target>

    <target name="test-main-scripts" description="run all tests">
        <exec executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="-conffile"/>
            <arg value="${data.dir}/main/scipio.xml"/>
            <arg value="-test"/>
            <arg value="-forceodbcomposition"/>
        </exec>
    </target>

    <target name="test-test-scripts" description="run all tests">
        <exec executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="-conffile"/>
            <arg value="${data.dir}/test/scipio.xml"/>
            <arg value="-test"/>
            <arg value="-forceodbcomposition"/>
        </exec>
    </target>

    <target name="test-adaptation" description="load and save adaptation main data, check that output==input">
        <property name="adaptation_test.dir1" value="${data.dir}/main"/>
        <property name="adaptation_test.dir2" value="${run.dir}/adaptation_test/main"/>
        <exec executable="${out.dir}/release/applications/adaptation_app/adaptation_app.exe" dir="${run.dir}" failonerror="true" resolveexecutable="true" vmlauncher="false">
            <arg value="-i"/>
            <arg value="${adaptation_test.dir1}/scipio.xml"/>
            <arg value="-o"/>
            <arg value="${adaptation_test.dir2}/scipio.xml"/>
        </exec>
        <compare-dirs dir1="${adaptation_test.dir1}" dir2="${adaptation_test.dir2}" 
                      excludes="**/Terrain/*.*,**/ODB/*.*,**/Meteo.xml,**/ODB.xml,**/PathfindRules.xml,**/Profiles.xml,**/ScipioLauncher.xml" 
                      includes="**/*.xml" property="adaptation_test.is-different"/>
        <if>
            <isset property="adaptation_test.is-different"/>
            <then>
                <echo>the following files differ :</echo>
                <echo-files files="${adaptation_test.is-different}"/>
                <fail message="saved data differs from loaded data."/>
            </then>
        </if>
    </target>

    <!--
    ============================================================================
      package
    ============================================================================
    -->
    <target name="package" description="package the distribution" >
        <mkdir dir="${dist.dir}"/>
        <zip destfile="${dist.dir}/csword.zip">
            <fileset dir="${out.dir}/release/applications/adaptation_app" includes="*.exe"/>
            <fileset dir="${out.dir}/release/applications/gaming_app" includes="*.exe"/>
            <fileset dir="${out.dir}/release/applications/preparation_app" includes="*.exe"/>
            <fileset dir="${out.dir}/release/applications/simulation_app" includes="*.exe"/>
        </zip>

        <!--<delete includeemptydirs="true" failonerror="false">
            <fileset dir="${dist.dir}/current" includes="**/*"/>
        </delete>
        <mkdir dir="${dist.dir}/current"/>          
        <exec executable="svn">
            <arg line="export --force ${data.dir}/main ${dist.dir}/current"/> 
        </exec>             
        <exec executable="svn">
            <arg line="export --force ${run.dir} ${dist.dir}/current"/> 
        </exec>                       
        <copy todir="${dist.dir}/current/">
            <fileset dir="${out.dir}/release/applications/adaptation_app" includes="*.exe"/>
            <fileset dir="${out.dir}/release/applications/gaming_app" includes="*.exe *.qm"/>            
            <fileset dir="${out.dir}/release/applications/preparation_app" includes="*.exe"/>            
            <fileset dir="${out.dir}/release/applications/simulation_app" includes="*.exe"/>            
            <fileset dir="${libraries.dir}/clients_gui" includes="*.qm"/>
            <fileset dir="${libraries.dir}/clients_kernel" includes="*.qm"/>
            <fileset dir="${libraries.dir}/gaming" includes="*.qm"/>
            <fileset dir="${libraries.dir}/ENT" includes="*.qm"/>
            <fileset dir="${applications.dir}/gaming_app" includes="*.qm"/>
            <fileset dir="${applications.dir}/adaptation_app/translator" includes="*.qm"/>                        
            <fileset dir="${run.dir}" includes="*.dll license.dat"/>
        </copy>                    -->
    </target>
    <!--
    ============================================================================
      configure
    ============================================================================
    -->
    <target name="configure" description="initialize local project structure with libraries">
        <update name="terrain" modules="terrain,geometry,geocoord,graphics,pathfind"/>
        <update name="asn"/>
        <update name="MT" modules="MT_Tools,MT_Memory,MT_IO,MT_Archive,MT_Patterns,MT_Profiler,MT_Time,MT_Thread,MT_Logger,MT_XmlTools,MT_Qt"/>
        <update name="qt"/>
        <update name="DIN"/>
        <update name="boost"/>
        <update name="rti"/>
        <update name="DIA"/>
        <update name="hla"/>
        <update name="tools"/>
        <update name="paranoia"/>
        <update name="xerces-c"/>
        <update name="xeumeuleu"/>
        <update name="svgl"/>
        <update name="terrain" package="generation_app"/>
        <update name="DIA" package="DIA_Tool_DebugGUI_${platform}"/>
    </target>

    <!--
    ============================================================================
      main
    ============================================================================
    -->
    <target name="build" depends="libraries,applications"/>

    <target name="all" depends="configure,build,test,package" description="build and package distribution"/>

</project>

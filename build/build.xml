<?xml version="1.0"?>
<project name="csword" default="all">

    <!-- Generate 3 months evaluation license -->
    <property name="flex.name" value="evaluation"/>
    <property name="flex.hostid" value="ANY"/>
    <tstamp>
        <format property="flex.expiration" pattern="d-MMM-yyyy" offset="3" unit="month" locale="en,US"/>
    </tstamp>

    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//install/masa/common/dev/common/poney"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>

    <property name="version.project.major" value="trunk"/>
    <property name="version.project" value="${version.project.major}"/>
    <property name="version.company" value="MASA Group"/>
    <property name="version.product" value="Sword"/>
    <property name="version.major" value="5.1.0"/>
    <property name="svn.revision" value="0"/>
    <property name="version.minor" value="${version.major}.${svn.revision}"/>
    <property name="version.version" value="0.0.0.${svn.revision}"/><!-- required for version extension -->
    <property name="masalife.version" value="2011-1.1.x/current"/>
    <property name="dia5.path" value="data/models/ada/decisional/dia5/models"/>
    <property name="models.dir" value="${data.dir}/${dia5.path}"/>

    <condition property="failonwarning">
        <not>
            <isset property="is-vc80"/>
        </not>
    </condition>

    <!-- local extensions -->
    <import file="protobuf.xml" />

    <!--
    ============================================================================
      libraries
    ============================================================================
    -->
    <target name="libraries" depends="tools,MT_Tools,ENT,protocol,simulation_terrain,simulation_kernel,
                                      clients_kernel,clients_gui,actions,actions,actions_gui,reports,
                                      gaming,preparation,library.plugins,3a,license_gui,geostore" description="build all libraries"/>

    <target name="tools" depends="MT_Tools" description="build tools static library">
        <build-lib name="tools" pattern="lib${ant.project.name}_tools-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="APP_VERSION" value="${version.minor}"/>
                <define name="APP_MAJOR_VERSION" value="${version.major}"/>
                <define name="APP_PROJECT_VERSION" value="${version.project}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="MT_Tools" description="build MT_Tools static library">
        <build-lib name="MT_Tools" pattern="lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="protocol" description="build protocol static library">
        <exec taskname="protolint" executable="python" failonerror="true" timeout="60000">
            <arg value="${libraries.dir}/protocol/protolint.py"/>
            <arg value="${libraries.dir}/protocol/proto"/>
            <arg value="style"/>
        </exec>
        <build-lib name="protocol" pattern="lib${ant.project.name}_protocol-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="ENT" description="build ENT static library">
        <build-lib name="ENT" depends="qt4" pattern="lib${ant.project.name}_ENT-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="dispatcher" depends="MT_Tools,tools,protocol,meteo" description="build dispatcher static library">
        <build-lib name="dispatcher" pattern="lib${ant.project.name}_dispatcher-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="MT_AUTO_LINK"/>
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="simulation_terrain" depends="MT_Tools" description="build simulation_terrain static library">
        <build-lib name="simulation_terrain" pattern="lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}"/>
    </target>

    <target name="simulation_kernel" depends="tools,protocol,simulation_terrain,meteo,resource_network,propagation" description="build simulation_kernel static library">
        <build-lib name="simulation_kernel" pattern="lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix}" suffix="-gd" excludes="**/DEC_Knowledge_ObjectAttributeProxy_ABC.h" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/> <!-- pour MIL.h -->
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="clients_kernel" depends="protocol,tools,ENT" description="build clients_kernel static library">
        <build-lib name="clients_kernel" depends="qt4" pattern="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="clients_gui" depends="clients_kernel" description="build clients_gui static library">
        <build-lib name="clients_gui" excludes="**/font/*" depends="qt4" pattern="lib${ant.project.name}_clients_gui-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="actions" depends="protocol,clients_kernel" description="build actions static library">
        <build-lib name="actions" depends="qt4" pattern="lib${ant.project.name}_actions-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="actions_gui" depends="clients_gui,actions" description="build actions_gui library">
        <build-lib name="actions_gui" depends="boost,qt4,xerces" pattern="lib${ant.project.name}_actions_gui-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="indicators" depends="clients_kernel" description="build indicators static library">
        <build-lib name="indicators" depends="boost,qt4,xerces" pattern="lib${ant.project.name}_indicators-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="reports" depends="protocol,clients_kernel" description="build reports static library">
        <build-lib name="reports" depends="qt4" pattern="lib${ant.project.name}_reports-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="gaming" depends="protocol,clients_gui,actions,actions_gui,indicators,reports,meteo,propagation" description="build gaming static library">
        <build-lib name="gaming" depends="qt4" pattern="lib${ant.project.name}_gaming-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="preparation" depends="clients_gui,actions_gui,indicators,propagation,geostore" description="build preparation static library">
        <build-lib name="preparation" depends="qt4" pattern="lib${ant.project.name}_preparation-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="frontend" depends="clients_gui" description="build frontend static library">
        <build-lib name="frontend" depends="qt4" pattern="lib${ant.project.name}_frontend-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="_WIN32_WINNT=0x0501"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="3a" depends="dispatcher" description="build 3a static library">
        <build-lib name="3a" pattern="lib${ant.project.name}_3a-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}"/>
    </target>

    <target name="license_gui" description="build license_gui static library">
        <build-lib name="license_gui" depends="qt4,flexlm" pattern="lib${ant.project.name}_license_gui-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <macrodef name="build-plugin">
        <attribute name="name"/>
        <attribute name="libs" default=""/>
        <attribute name="depends" default=""/>
        <attribute name="failonwarning" default="false"/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <build-lib name="@{name}_plugin_dll" outtype="shared" depends="@{depends}" pattern="@{name}_plugin-${platform}-mt@{suffix}" suffix="-gd" libs="@{libs}" failonwarning="@{failonwarning}">
                <syslibset libs="shell32,user32"/>
                <defineset define="QT3_SUPPORT"/>
                <linkerarg value="/FIXED:NO"/>
                <cc-elements/>
            </build-lib>
            <move todir="${run.dir}/plugins/@{name}" file="${run.dir}/@{name}_plugin-${platform}-mt.dll"/>
        </sequential>
    </macrodef>

    <target name="rpr" description="build rpr static library">
        <build-lib name="rpr" pattern="lib${ant.project.name}_rpr-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}"/>
    </target>

    <target name="hla_plugin" depends="dispatcher,rpr" description="build hla_plugin static library">
        <build-lib name="hla_plugin" pattern="lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="hla_plugin_dll" depends="hla_plugin" description="build hla_plugin dynamic library">
        <build-plugin name="hla" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="HLA,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="HLA_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="web_control_plugin" depends="protocol" description="build web_control_plugin static library">
        <build-lib name="web_control_plugin" pattern="lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}"/>
    </target>

    <target name="web_control_plugin_dll" depends="web_control_plugin" description="build web_control_plugin dynamic library">
        <build-lib name="web_control_plugin_dll" outtype="shared" depends="boost,protobuf,xerces" pattern="web_control_plugin"
            libs="mongoose@{suffix},
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="wsock32,shell32,user32"/>
            <defineset define="WEB_CONTROL_PLUGIN_DLL_EXPORTS"/>
            <linkerarg value="/FIXED:NO"/>
        </build-lib>
        <move todir="${run.dir}/plugins/web_control" file="${run.dir}/web_control_plugin.dll"/>
    </target>

    <target name="dis_plugin" depends="dispatcher,rpr" description="build dis_plugin static library">
        <build-lib name="dis_plugin" pattern="lib${ant.project.name}_dis_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}"/>
    </target>

    <target name="dis_plugin_dll" depends="dis_plugin,dispatcher,tic" description="build dis_plugin dynamic library">
        <build-plugin name="dis" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_dis_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="DIS_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="tic" depends="dispatcher" description="build tic static library">
        <build-lib name="tic" pattern="lib${ant.project.name}_tic-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="messenger_plugin" depends="dispatcher" description="build messenger_plugin static library">
        <build-lib name="messenger_plugin" pattern="lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="aar_plugin" depends="dispatcher" description="build aar_plugin static library">
        <build-lib name="aar_plugin" pattern="lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="rights_plugin" depends="dispatcher" description="build rights_plugin static library">
        <build-lib name="rights_plugin" pattern="lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="order_plugin" depends="dispatcher" description="build order_plugin static library">
        <build-lib name="order_plugin" pattern="lib${ant.project.name}_order_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="saver_plugin" depends="dispatcher" description="build saver_plugin static library">
        <build-lib name="saver_plugin" pattern="lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="replay_plugin" depends="dispatcher" description="build replay_plugin static library">
        <build-lib name="replay_plugin" pattern="lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="positions_plugin" depends="dispatcher" description="build positions saver dispatcher plugin static library">
        <build-lib name="positions_plugin" pattern="lib${ant.project.name}_positions_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="resource_network" description="build resource network static library">
        <build-lib name="resource_network" pattern="lib${ant.project.name}_resource_network-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}"/>
    </target>

    <target name="meteo" depends="protocol,clients_kernel" description="build meteo static library">
        <build-lib name="meteo" pattern="lib${ant.project.name}_meteo-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="propagation" description="build propagation static library">
        <build-lib name="propagation" pattern="lib${ant.project.name}_propagation-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="geostore" description="build geostore static library">
        <build-lib name="geostore" depends="qt4" pattern="lib${ant.project.name}_geostore-${platform}-mt@{suffix}" suffix="-gd"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="shield" depends="protocol" description="build shield static library">
        <build-lib name="shield" excludes="**/*.h" pattern="lib${ant.project.name}_shield-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="script_plugin" depends="dispatcher" description="build script_plugin static library">
        <build-lib name="script_plugin" pattern="lib${ant.project.name}_script_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="score_plugin" depends="dispatcher,3a,indicators" description="build score_plugin static library">
        <build-lib name="score_plugin" depends="boost,qt4" pattern="lib${ant.project.name}_score_plugin-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="logger_plugin" depends="dispatcher,reports" description="build logger_plugin static library">
        <build-lib name="logger_plugin" depends="qt4" pattern="lib${ant.project.name}_logger_plugin-${platform}-mt@{suffix}" suffix="-gd"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="logistic_plugin" depends="dispatcher,reports" description="build logistic_plugin static library">
        <build-lib name="logistic_plugin" depends="qt4" pattern="lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix}" suffix="-gd"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="logistic_plugin_dll" depends="logistic_plugin" description="build logistic_plugin dynamic library">
        <build-plugin name="logistic" depends="boost,qt4,terrain,xalan,xerces,protobuf,openssl"
            libs="Qt3Support4,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
                  failonwarning="${failonwarning}">
            <defineset define="LOGISTIC_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="client_proxy" depends="protocol,tools" description="build clients_kernel static library">
        <build-lib name="client_proxy" pattern="lib${ant.project.name}_client_proxy-${platform}-mt@{suffix}" suffix="-gd" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.plugins" depends="messenger_plugin,dis_plugin_dll,hla_plugin_dll,
                                            aar_plugin,rights_plugin,order_plugin,saver_plugin,replay_plugin,
                                            3a,
                                            script_plugin,score_plugin,
                                            web_control_plugin_dll,
                                            logger_plugin,positions_plugin,
                                            logistic_plugin,logistic_plugin_dll" description="build all dispatcher plugins"/>

    <!--
    ============================================================================
     modules
    ============================================================================
    -->
    <target name="modules" description="build Sword modules"
            depends="simulation_kernel,wrapper,module_tester_test,movement_module_test,
                     perception_module_test,fire_module_test,propagation_module_test"/>

    <target name="wrapper" description="build wrapper library">
        <build-lib name="wrapper" failonwarning="${failonwarning}"/>
    </target>

    <target name="module_tester_test">
        <build-test name="module_tester" depends="boost" libs="core@{suffix}" failonwarning="${failonwarning}"/>
    </target>

    <target name="movement_module" description="build movement module">
        <build-lib name="movement_module" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="movement_module_dll" depends="MT_Tools,wrapper,movement_module" description="build movement module dll">
        <build-lib name="movement_module_dll" outtype="shared" pattern="movement_module" depends="terrain,boost,xerces" failonwarning="${failonwarning}"
                   libs="movement_module@{suffix},wrapper@{suffix},lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"/>
    </target>

    <target name="movement_module_test" depends="movement_module_dll">
        <build-test name="movement_module" depends="boost,xerces,terrain" libs="movement_module@{suffix},core@{suffix}" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="perception_module" description="build perception module">
        <build-lib name="perception_module" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="perception_module_dll" depends="wrapper,perception_module" description="build perception module dll">
        <build-lib name="perception_module_dll" outtype="shared" pattern="perception_module" depends="boost,xerces"
                   libs="perception_module@{suffix},wrapper@{suffix}" failonwarning="${failonwarning}"/>
    </target>

    <target name="perception_module_test" depends="perception_module_dll">
        <build-test name="perception_module" depends="boost" libs="perception_module@{suffix},core@{suffix}" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="fire_module" description="build fire module">
        <build-lib name="fire_module" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="fire_module_dll"  depends="wrapper,fire_module" description="build fire module dll">
        <build-lib name="fire_module_dll" outtype="shared" pattern="fire_module" depends="boost,xerces"
                   libs="fire_module@{suffix},wrapper@{suffix}" failonwarning="${failonwarning}"/>
    </target>

    <target name="fire_module_test" depends="fire_module_dll">
        <build-test name="fire_module" depends="boost" libs="fire_module@{suffix},core@{suffix}" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="propagation_module" description="build propagation module">
        <build-lib name="propagation_module" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="propagation_module_dll" depends="wrapper,propagation_module" description="build propagation module dll">
        <build-lib name="propagation_module_dll" outtype="shared" pattern="propagation_module" depends="boost"
                   libs="propagation_module@{suffix},wrapper@{suffix}" failonwarning="${failonwarning}"/>
    </target>

    <target name="propagation_module_test" depends="propagation_module_dll">
        <build-test name="propagation_module" depends="boost" libs="propagation_module@{suffix},core@{suffix}" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <!--
    ============================================================================
     applications
    ============================================================================
    -->
    <target name="applications" description="build Sword executables"
            depends="applications.simulation,applications.clients,applications.frontends"/>

    <target name="applications.simulation" description="build Sword Simulation executables"
            depends="dispatcher_app,simulation_app,replayer_app"/>

    <target name="applications.clients" description="build Sword Client executables"
            depends="gaming_app,preparation_app,adaptation_app,
                     loadtester_app,
                     launcher_test_app,
                     shield_app"/>

    <target name="applications.frontends" description="build Sword Frontend executables"
            depends="selftraining_app,launcher_app,package_app"/>

    <target name="launcher_dll" depends="client_proxy,clients_gui,frontend,protocol,shield" description="build Sword launcher dll">
        <build-lib name="launcher_dll" outtype="shared" depends="boost,qt4,xerces,xalan,protobuf" pattern="launcher-${platform}-mt"
            libs="zipstream,zlib1,tools,
                  lib${ant.project.name}_clients_gui-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_client_proxy-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_frontend-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="shell32,user32"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset define="LAUNCHER_DLL_EXPORTS"/>
            <linkerarg value="/FIXED:NO"/>
        </build-lib>
    </target>

    <target name="dispatcher_dll" depends="dispatcher,actions,clients_kernel,ENT,library.plugins,shield" description="build Sword Dispatcher dll">
        <build-lib name="dispatcher_dll" outtype="shared" depends="boost,terrain,qt4,xerces,xalan,protobuf" pattern="dispatcher-${platform}-mt@{suffix}" suffix="-gd"
            libs="directia-${platform}-mt@{suffix}-4_6,
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_reports-${platform}-mt@{suffix},
                  lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_positions_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_logger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_script_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_order_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_3a-${platform}-mt@{suffix},
                  lib${ant.project.name}_score_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_indicators-${platform}-mt@{suffix},
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
            <linkerarg value="/FIXED:NO"/>
        </build-lib>
    </target>

    <target name="dispatcher_app" depends="dispatcher_dll" description="build Sword Dispatcher executable">
        <build-app name="dispatcher_app" depends="boost,terrain,flexlm,qt4,xerces,xalan"
            libs="dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,advapi32,shell32,gdi32"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-app>
    </target>

    <target name="simulation_app" depends="license_gui,simulation_kernel,dispatcher_dll" description="build Sword Simulation executable">
        <build-app name="simulation_app" depends="terrain,boost,xerces,xalan,flexlm,protobuf" pattern="simulation_app"
            libs="masalloc,directia-${platform}-mt-4_6,library-${platform}-mt,
                  gdal_i,gdal_ogr,log4cxx,geodata,analysis,
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_resource_network-${platform}-mt@{suffix},
                  lib${ant.project.name}_propagation-${platform}-mt@{suffix},
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix},
                  core"
            failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,shell32,iphlpapi,advapi32,gdi32"/>
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
            <defineset define="_WIN32_WINNT=0x0501"/> <!-- for 'IsDebuggerPresent()' -->
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
            <linkerarg value="/LARGEADDRESSAWARE"/>   <!-- Executable can access 3GiB instead of 2GiB -->
        </build-app>
    </target>

    <target name="replayer_app" depends="dispatcher_dll,dispatcher,3a,score_plugin,web_control_plugin" description="build Sword replayer executable">
        <build-app name="replayer_app" depends="terrain,boost,flexlm,qt4,xerces,xalan,protobuf" pattern="replayer_app"
            libs="tools,directia-${platform}-mt-4_6,
                  mongoose@{suffix},
                  dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt,
                  lib${ant.project.name}_3a-${platform}-mt,
                  lib${ant.project.name}_dispatcher-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_score_plugin-${platform}-mt,
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_indicators-${platform}-mt,
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,shell32,advapi32,gdi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="adaptation_app" depends="ENT,clients_gui,license_gui" description="build Sword Adaptation executable">
        <build-app name="adaptation_app" depends="qt4,xerces,xalan,boost,flexlm" excludes="**/XmlResources.cpp"
                   libs="svgl,zipstream,bugtrap,excel@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}" pch-excludes="qt4undo.cpp"
                    failonwarning="${failonwarning}">
            <syslibset libs="gdi32,advapi32,user32,htmlhelp,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="gaming_app" depends="gaming" description="build Sword Gaming executable">
        <build-app name="gaming_app" depends="terrain,xerces,xalan,qt4,boost,flexlm,protobuf"
                   libs="gdal_i,gdal_ogr,log4cxx,svgl,zipstream,zlib1,bugtrap,
                         lib${ant.project.name}_actions-${platform}-mt,
                         lib${ant.project.name}_actions_gui-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                         lib${ant.project.name}_reports-${platform}-mt,
                         lib${ant.project.name}_gaming-${platform}-mt,
                         lib${ant.project.name}_indicators-${platform}-mt,
                         lib${ant.project.name}_propagation-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}"
                    failonwarning="${failonwarning}">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="loadtester_app" depends="protocol,tools" description="build Sword load testing executable">
        <build-app name="loadtester_app" subsystem="console"
                   depends="boost,protobuf" failonwarning="${failonwarning}"
                   libs="lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="preparation_app" depends="preparation,frontend" description="build Sword Gaming executable">
        <build-app name="preparation_app" excludes="**/**_Gen.*" depends="terrain,xerces,xalan,qt4,boost,flexlm,protobuf"
                   libs="gdal_i,gdal_ogr,log4cxx,svgl,zipstream,zlib1,bugtrap,
                         geodata,geos_i,spatialite,proj_i,libiconv,terrainextractor-${platform}-mt,
                         lib${ant.project.name}_actions-${platform}-mt,
                         lib${ant.project.name}_actions_gui-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_indicators-${platform}-mt,
                         lib${ant.project.name}_preparation-${platform}-mt,
                         lib${ant.project.name}_meteo-${platform}-mt,
                         lib${ant.project.name}_propagation-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_frontend-${platform}-mt,
                         lib${ant.project.name}_geostore-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}"
                    failonwarning="${failonwarning}">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="selftraining_app" depends="frontend,launcher_dll" description="build Sword Self-training executable">
        <build-app name="selftraining_app" depends="qt4,boost,xerces,xalan,flexlm,protobuf"
                   libs="bugtrap,zipstream,zlib1,tools
                         launcher-${platform}-mt@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_frontend-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}"
                   failonwarning="${failonwarning}">
            <syslibset libs="gdi32,shell32,htmlhelp,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="shield_app" depends="MT_Tools,protocol,shield,tools" description="Build shield test application">
        <build-app name="shield_app" depends="qt4,boost,protobuf"
                   libs="lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_shield-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt"
                   failonwarning="${failonwarning}">
        </build-app>
    </target>

    <target name="launcher_app" depends="MT_Tools,launcher_dll" description="build Sword launcher service">
        <build-app name="launcher_app" depends="boost,xerces,xalan" subsystem="console"
                   libs="launcher-${platform}-mt@{suffix},tools
                      lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"
                   failonwarning="${failonwarning}">
            <syslibset libs="psapi,advapi32"/>
            <defineset define="_WIN32_WINNT=0x0501"/>
        </build-app>
    </target>

    <target name="package_app" description="build Sword Package deployment executable">
        <build-app name="package_app" depends="boost" subsystem="console" failonwarning="${failonwarning}">
            <syslibset libs="user32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="launcher_test_app" depends="protocol,frontend,shield" description="build application">
        <build-app name="launcher_test_app" subsystem="console" depends="qt4,boost,xerces,protobuf"
            libs="lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_frontend-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <!--
    ============================================================================
    samples
    ============================================================================
    -->
    <target name="client_sample_app" depends="protocol" description="build Sample client application">
        <build-app name="client_sample_app" depends="protobuf" root="${samples.dir}"
                   libs="lib${ant.project.name}_protocol-${platform}-mt@{suffix}" subsystem="console"
                   failonwarning="${failonwarning}">
            <syslibset libs="wsock32,ws2_32"/>
            <includepath path="${out.dir}/release/libraries/protocol"/>
        </build-app>
    </target>

    <!--
    ============================================================================
    data
    ============================================================================
    -->
    <target name="generate-symbols" description="generate symbols">
        <zip destfile="${run.dir}/resources/symbols.pak">
            <fileset dir="${libraries.dir}/clients_gui/svg"/>
        </zip>
    </target>

    <target name="generate-signatures" description="generate signatures">
        <exec executable="${bin.dir}/xml_signature_app.exe" dir="${run.dir}" failonerror="true" timeout="30000">
            <arg value="${data.dir}/data/models/ada/physical"/>
            <arg value="${data.dir}/data/terrains"/>
            <arg value="${data.dir}/exercises"/>
        </exec>
    </target>

    <target name="deploy-application-data" description="deploy applications data to run directory">
        <copy todir="${run.dir}">
            <fileset dir="${data.dir}/app-data"/>
        </copy>
        <copy todir="${run.dir}/resources/locales">
            <fileset dir="${run.dir}" includes="qt_*.qm"/>
        </copy>
        <copy todir="${run.dir}/resources/scripts">
            <fileset dir="${libraries.dir}/script_plugin" includes="**/*.lua"/>
        </copy>
    </target>

    <!--
    ============================================================================
    license
    ============================================================================
    -->
    <target name="generate-license" description="generate license files in run directory">
        <flexlm name="sword" feature="sword" vendor="bkmasa"/>
        <flexlm name="sword-gaming" feature="sword-gaming" vendor="bkmasa"/>
        <flexlm name="sword-dispatcher" feature="sword-dispatcher" vendor="bkmasa"/>
        <flexlm name="sword-authoring" feature="sword-authoring" vendor="bkmasa"/>
        <flexlm name="sword-preparation" feature="sword-preparation" vendor="bkmasa"/>
        <flexlm name="sword-workshop" feature="sword-workshop" vendor="bkmasa"/>
        <flexlm name="sword-terrain-generation" feature="sword-terrain-generation" vendor="bkmasa"/>
        <flexlm name="sword-runtime" feature="sword-runtime" vendor="bkmasa"/>
        <flexlm name="sword-replayer" feature="sword-replayer" vendor="bkmasa"/>
        <!-- Since the applications are not being installed on the build servers,
             Flex has no way to guess the license files should be picked from
             the run directory, and even if it happens it is apparently after
             resolving others from the Registry. "license.dat" is the default
             license path defined in license_gui & co, so try our chance with
             this one first.
        -->
        <concat destfile="${run.dir}/license.dat" overwrite="true">
            <fileset dir="${run.dir}" includes="*.lic"/>
        </concat>
    </target>

    <!--
    ============================================================================
    tests
    ============================================================================
    -->
    <target name="test" depends="generate-license,scripts_test,adaptation_test,tools_test,3a_test,plugins_test,hla_plugin_test,web_control_plugin_test,
                                 shield_test,clients_test,exercises_test,data_migrations_test,dispatcher_test,simulation_kernel_test,
                                 integration_decisionnal_test,checkpoint_test,protocol_test,positions_plugin_test,
                                 actions_test,launcher_test,propagation_test,client_proxy_test,
                                 app_test" description="run all tests"/>

    <target name="3a_test" depends="3a">
        <build-test name="3a" depends="xerces,terrain,boost,protobuf" libs="lib${ant.project.name}_3a-${platform}-mt@{suffix},lib${ant.project.name}_protocol-${platform}-mt" failonwarning="${failonwarning}"/>
    </target>

    <target name="tools_test" depends="tools">
        <build-test name="tools" depends="boost,xerces,xalan,qt4"
            libs="lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  tools,
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}"/>
    </target>

    <target name="plugins_test" depends="hla_plugin,tic,script_plugin,web_control_plugin_test,logistic_plugin">
        <build-test name="plugins" depends="xerces,terrain,boost,openssl,protobuf,qt4"
            libs="directia-${platform}-mt-4_6,gdal_i,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_script_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt,
                  lib${ant.project.name}_logistic_plugin-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="hla_plugin_test" depends="hla_plugin">
        <build-test name="hla_plugin" depends="boost,qt4,terrain,xerces,xalan,protobuf"
            libs="HLA,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="shell32,user32,wsock32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="web_control_plugin_test" depends="web_control_plugin">
        <build-test name="web_control_plugin" depends="boost,protobuf,xerces"
            libs="mongoose@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="shell32,user32,wsock32"/>
            <compilerarg value="-Zm200"/>
        </build-test>
    </target>

    <target name="shield_test" depends="shield">
        <build-test name="shield" depends="boost,protobuf" excludes="**/*.h"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                 lib${ant.project.name}_MT_Tools-${platform}-mt,
                 lib${ant.project.name}_shield-${platform}-mt,
                 lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}"/>
    </target>

    <target name="clients_test" depends="indicators,preparation">
        <build-test name="clients" depends="terrain,boost,qt4,xerces,xalan,protobuf"
            libs="gdal_i,gdal_ogr,svgl,zipstream,zlib1,geodata,geos_i,spatialite,proj_i,libiconv,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_indicators-${platform}-mt,
                  lib${ant.project.name}_clients_gui-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_preparation-${platform}-mt,
                  lib${ant.project.name}_propagation-${platform}-mt,
                  lib${ant.project.name}_meteo-${platform}-mt,
                  lib${ant.project.name}_geostore-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <syslibset libs="gdi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="actions_test" depends="actions">
        <build-test name="actions" depends="terrain,boost,qt4,xerces,xalan,protobuf"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_actions-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="client_proxy_test" depends="client_proxy,protocol,tools,MT_Tools">
        <build-test name="client_proxy" depends="boost,protobuf"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_client_proxy-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
        </build-test>
    </target>

    <target name="dispatcher_test" depends="dispatcher,messenger_plugin">
        <build-test name="dispatcher" depends="boost,qt4,xerces,xalan,terrain,protobuf"
            libs="lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="launcher_test" depends="launcher_dll,frontend">
        <build-test name="launcher" depends="boost,qt4,xerces,protobuf"
            libs="launcher-${platform}-mt@{suffix},tools,
                  lib${ant.project.name}_frontend-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
            <syslibset libs="shell32"/>
        </build-test>
    </target>

    <target name="propagation_test" depends="propagation">
        <build-test name="propagation" depends="boost" libs="gdal_i,lib${ant.project.name}_propagation-${platform}-mt" failonwarning="${failonwarning}"/>
    </target>

    <target name="positions_plugin_test" depends="protocol,positions_plugin">
        <build-test name="positions_plugin" depends="boost,protobuf"
            libs="lib${ant.project.name}_positions_plugin-${platform}-mt,lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}"/>
    </target>

    <macrodef name="run-one-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <math result="test.portnumber2">
                <op op="+" datatype="int">
                    <num value="${test.portnumber}"/>
                    <num value="1"/>
                </op>
            </math>
            <exec taskname="sim" executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="--root-dir=../../data"/>
                <arg value="--exercise=@{exercise}"/>
                <arg value="--session=@{session}"/>
                <arg value="--simulation-port=${test.portnumber}"/>
                <arg value="--dispatcher-port=${test.portnumber2}"/>
                <arg value="--test"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="run-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
                <arg value="--legacy"/>
            </run-one-simulation>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
            </run-one-simulation>
        </sequential>
    </macrodef>

    <target name="checkpoint_test" depends="simulation_app,modules" description="save and load a checkpoint">
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--savecheckpoint=tempcheckpoint"/>
            <arg value="--legacy"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--checkpoint=tempcheckpoint"/>
            <arg value="--deletecheckpoint"/>
            <arg value="--legacy"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--savecheckpoint=tempcheckpoint"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--checkpoint=tempcheckpoint"/>
            <arg value="--deletecheckpoint"/>
        </run-one-simulation>
        <run-one-simulation exercise="tests/CheckpointTests">
            <arg value="--savecheckpoint=tempcheckpoint"/>
        </run-one-simulation>
        <run-one-simulation exercise="tests/CheckpointTests">
            <arg value="--checkpoint=tempcheckpoint"/>
            <arg value="--deletecheckpoint"/>
        </run-one-simulation>
    </target>

    <macrodef name="test-scripts">
        <attribute name="dataset"/>
        <attribute name="physical"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <delete dir="${data.dir}/exercises/scripts_test"/>
            <copy todir="${data.dir}/exercises/scripts_test" overwrite="true">
                <fileset dir="${data.dir}/tests/scripts_test" includes="**/*.xml"/>
                <filterset>
                    <filter token="DATASET" value="@{dataset}"/>
                    <filter token="PHYSICAL" value="@{physical}"/>
                </filterset>
            </copy>
            <run-simulation exercise="scripts_test" session="test-session"/>
            <delete dir="${data.dir}/exercises/scripts_test"/>
        </sequential>
    </macrodef>

    <target name="scripts_test" description="run all script tests">
        <test-scripts dataset="ada" physical="scipio"/>
        <test-scripts dataset="ada" physical="worldwide"/>
    </target>

    <macrodef name="echo-files">
        <attribute name="files"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <for list="@{files}" param="file" delimiter=";">
                <sequential>
                    <echo>@{prefix}@{file}</echo>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="run-adaptation">
        <attribute name="input"/>
        <attribute name="output"/>
        <sequential>
            <exec taskname="adn" executable="${out.dir}/release/applications/adaptation_app/adaptation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="-i"/>
                <arg value="@{input}/physical.xml"/>
                <arg value="-o"/>
                <arg value="@{output}/physical.xml"/>
                <arg value="--silent"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation">
        <attribute name="input"/>
        <sequential>
            <echo>Testing models: @{input}</echo>
            <delete dir="${out.dir}/test-adaptation"/>
            <tempfile property="@{input}.temp" destdir="${out.dir}" deleteonexit="true"/>
            <exec taskname="checksum" executable="python" output="${@{input}.temp}" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="@{input}"/>
            </exec>
            <run-adaptation input="@{input}" output="${out.dir}/test-adaptation"/>
            <exec taskname="checksum" executable="python" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="@{input}"/>
                <arg value="--check"/>
                <arg value="${@{input}.temp}"/>
            </exec>
            <exec taskname="checksum" executable="python" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="${out.dir}/test-adaptation"/>
                <arg value="--check"/>
                <arg value="${@{input}.temp}"/>
            </exec>
            <delete dir="${out.dir}/test-adaptation"/>
        </sequential>
    </macrodef>

    <target name="adaptation_test" description="load and save adaptation main data then check that output is the same as input">
        <test-adaptation input="${data.dir}/data/models/ada/physical/scipio"/>
        <test-adaptation input="${data.dir}/data/models/ada/physical/worldwide"/>
    </target>

    <target name="simulation_kernel_test" depends="simulation_kernel" description="build Sword Simulation kernel test executable">
        <build-test name="simulation_kernel"
                    libs="core,masalloc,tools,directia-${platform}-mt-4_6,library-${platform}-mt,
                         gdal_i,gdal_ogr,log4cxx,geodata,analysis,
                         dispatcher-${platform}-mt@{suffix},
                         lib${ant.project.name}_tools-${platform}-mt@{suffix},
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                         lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                         lib${ant.project.name}_resource_network-${platform}-mt@{suffix},
                         lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                         lib${ant.project.name}_propagation-${platform}-mt@{suffix},
                         lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix}"
                    depends="xerces,xalan,terrain,boost,qt4,protobuf"
                    failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,shell32,iphlpapi,advapi32"/>
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
        </build-test>
    </target>

    <target name="integration_decisionnal_test" description="build Sword Integration DIA5 test executable">
        <build-test name="integration_decisionnal" depends="boost" libs="directia-${platform}-mt-4_6" dir="resources" failonwarning="${failonwarning}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-test>
    </target>

    <macrodef name="test-exercise">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/exercise.xsd" file="../data/exercises/@{exercise}/exercise.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/orbat.xsd" file="../data/exercises/@{exercise}/orbat.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/profiles.xsd" file="../data/exercises/@{exercise}/profiles.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/weather.xsd" file="../data/exercises/@{exercise}/weather.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/session.xsd" file="../data/exercises/@{exercise}/sessions/@{session}/session.xml" failonerror="true" warn="true"/>
            <run-simulation exercise="@{exercise}" session="@{session}"/>
        </sequential>
    </macrodef>

    <target name="exercises_test" description="validates some significant exercises">
        <test-exercise exercise="worldwide/Egypt"/>
        <test-exercise exercise="scipio/Poseidon VA"/>
    </target>

    <macrodef name="test-data-migration">
        <attribute name="exercise"/>
        <attribute name="old-version"/>
        <attribute name="session" default="default"/>
        <attribute name="temporary-name" default="test-data-migration"/>
        <sequential>
            <echo>Testing automatic migration from version @{old-version} using exercise '@{exercise}'</echo>
            <!-- Copy physical database -->
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/data/models/ada/physical/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/physical"/>
            </copy>
            <!-- ADN -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <run-adaptation input="${data.dir}/data/models/ada/physical/@{temporary-name}" output="${out.dir}/@{temporary-name}"/>
            <!-- Copy exercise -->
            <delete dir="${data.dir}/exercises/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/exercises/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/exercises/@{exercise}"/>
                <filterset>
                    <filter token="DATASET" value="ada"/>
                    <filter token="PHYSICAL" value="@{temporary-name}"/>
                </filterset>
            </copy>
            <!-- SIM -->
            <run-simulation exercise="@{temporary-name}" session="@{session}"/>
            <!-- cleanup -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}"/>
            <delete dir="${data.dir}/exercises/@{temporary-name}"/>
        </sequential>
    </macrodef>

    <target name="data_migrations_test">
        <test-data-migration old-version="3.0" exercise="CabourgOld"/>
        <test-data-migration old-version="4.2.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.1" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.2" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.4embraer" exercise="Egypt"/>
        <test-data-migration old-version="4.3.0cae" exercise="Paris"/>
        <test-data-migration old-version="5.0.0" exercise="Egypt"/>
    </target>

    <target name="protocol_test" description="build protocol test application" depends="protocol,tools">
        <build-test name="protocol" depends="boost,protobuf"
            libs="lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}"/>
    </target>

    <macrodef name="check-gui">
        <attribute name="app"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="@{app}" executable="python" failonerror="true">
                <arg value="check_start_gui.py"/>
                <arg value="--run_dir"/>
                <arg value="${run.dir}"/>
                <arg value="${out.dir}/release/applications/@{app}/@{app}.exe"/>
                <elements/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="check-app">
        <attribute name="app"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="@{app}" executable="${out.dir}/release/applications/@{app}/@{app}.exe"
                  dir="${run.dir}" failonerror="true">
                <elements/>
            </exec>
        </sequential>        
    </macrodef>

    <target name="app_test" description="check whether gui applications start properly">
        <check-gui app="adaptation_app"/>
        <check-gui app="preparation_app"/>
        <check-gui app="selftraining_app"/>
        <check-gui app="gaming_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
        </check-gui>
        <check-app app="dispatcher_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-port=${test.portnumber}"/>
            <arg value="--test"/>
        </check-app>
        <check-app app="launcher_app"/>
        <check-app app="launcher_test_app">
            <arg value="--test"/>
        </check-app>
        <check-app app="replayer_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-port=${test.portnumber}"/>
            <arg value="--test"/>
        </check-app>
    </target>

    <!--
    ============================================================================
    documentation
    ============================================================================
    -->

    <target name="proto-api-documentation"
        description="generate SDK documentation">
        <mkdir dir="${out.dir}/sdk/doc/html"/>
        <exec taskname="python" executable="python" failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/asciidoc.py" />
            <arg value="--out-file=${out.dir}/sdk/doc/html/index.html" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </exec>
        <exec executable="python" failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/a2x.py" />
            <arg value="--format=pdf" />
            <arg value="--fop" />
            <!-- Linting needs the DTD, DTD are usually resolved relatively to
                 the input file location, this is a pain to deal with, just
                 forget it, asciidoc should generate valid docbook anyway. -->
            <arg value="--no-xmllint" />
            <arg value="--xsltproc-opts=-nonet" />
            <arg value="--destination-dir=${out.dir}/sdk/doc" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </exec>
    </target>

    <target name="prepare-dec-api-files" description="Prepare resources to generate the documentation">
        <mkdir dir="${reports.dir}"/>
        <pathconvert targetos="unix" property="src.dir.unix">
            <path location="${src.dir}"/>
        </pathconvert>
        <pathconvert targetos="unix" property="out.dir.unix">
            <path location="${out.dir}"/>
        </pathconvert>
        <delete dir="${out.dir}/dec_api/definition"/>
        <mkdir dir="${out.dir}/dec_api"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value='find \"${src.dir.unix}/libraries/simulation_kernel\" -name \"*.cpp\" | xargs grep -e \"brain\\.Register(\" -e \"brain\\[.*=\" | grep -v \"\\.svn\" | grep -o \".*\.cpp\" | sort -u > ${out.dir.unix}/dec_api/dec_files.txt' />
        </exec>
        <exec executable="python" failonerror="true">
            <arg value="decfilter.py"/>
            <arg value="${out.dir}/dec_api/dec_files.txt"/>
            <arg value="${src.dir}/libraries/simulation_kernel/"/>
            <arg value="${out.dir}/dec_api/definition"/>
        </exec>
        <copy file="./dec_api/sdk.dox" toDir="${out.dir}/dec_api/definition"/>
    </target>

    <target name="dec-api-documentation" description="generate SWORD DEC API documentation">
        <doxygen-report name="sword" input="${out.dir}/dec_api/definition" outdir="${out.dir}/sdk/dec">
            <property name="PROJECT_NAME" value="SWORD - DEC API Reference"/>
            <property name="PROJECT_NUMBER" value="${version.project}"/>
            <property name="FILE_PATTERNS" value='"*.h *.dox"'/>
            <property name="EXCLUDE" value='"*.svn*"'/>
            <property name="EXCLUDE_PATTERNS" value='"*/.svn/*"'/>
            <!-- <property name="FILTER_PATTERNS" value="*.cpp=decfilter.py"/> -->
            <!-- <property name="FILTER_PATTERNS" value="*.h=decfilter.py"/>-->
            <property name="ABBREVIATE_BRIEF" value="YES"/>
            <property name="JAVADOC_AUTOBRIEF" value="YES"/>
            <property name="EXTRACT_ALL" value="YES"/>
            <property name="INLINE_SOURCES" value="YES"/>
            <property name="SOURCE_BROWSER" value="YES"/>
            <property name="DISABLE_INDEX" value="NO"/>
            <property name="GENERATE_TAGFILE" value="${reports.dir}/doxygen_tag.log"/>
            <property name="COLLABORATION_GRAPH" value="NO"/>
            <!--
            <property name="GENERATE_DEPRECATEDLIST" value="NO"/>
            <property name="GENERATE_TODOLIST" value="NO"/>
            <property name="GENERATE_BUGLIST" value="NO"/>
            -->
            <property name="INTERNAL_DOCS" value="YES"/>
            <property name="SHOW_USED_FILES" value="YES"/>
            <property name="HIDE_UNDOC_MEMBERS" value="YES"/>
            <property name="SHOW_FILES" value="NO"/>
            <property name="SHOW_NAMESPACES" value="NO"/>
            <property name="BRIEF_MEMBER_DESC" value="NO"/>
            <property name="ENUM_VALUES_PER_LINE" value="1"/>
            <property name="WARNINGS" value="YES"/>
            <property name="ALIASES" value='""rule=@par Rule:\n" "index=@par Index:\n" "default=@par Default value:\n""'/>
            <property name="WARN_LOGFILE" value="${reports.dir}/doxygen_dec.log"/>
            <property name="GENERATE_HTMLHELP" value="YES"/>
            <property name="CHM_FILE" value="${dist.dir}/SWORD-DEC_API_Reference_${version.project}.chm"/>
            <!--
            <property name="EXAMPLE_PATH" value="${data.dir}\app-data\resources\schemas\${version.major}"/>
            <property name="EXAMPLE_RECURSIVE" value="YES"/>
            <property name="EXAMPLE_PATTERN" value="*.h *.cpp *.xsd"/>
            -->
        </doxygen-report>
        <fail message="documentation contains errors, see ${reports.dir}/doxygen_dec.log">
            <condition>
                <length file="${reports.dir}/doxygen_dec.log" when="greater" length="0"/>
            </condition>
        </fail>
        <htmlhelp input="${out.dir}/sdk/dec" outdir="${dist.dir}"/>
    </target>

    <target name="documentation" depends="proto-api-documentation, prepare-dec-api-files, dec-api-documentation"/>

    <!--
    ============================================================================
    package
    ============================================================================
    -->
    <target name="package" depends="package.app,package.debug,package.ts,package.plugins,package.binaries,package.gaming_app,package.sdk" description="package the installers and packs"/>

    <!-- Package plugins -->
    <target name="package.plugins" depends="package.plugin.hla,package.plugin.dis" description="package plugin individual installers"/>

    <macrodef name="package-plugin">
        <attribute name="name"/>
        <sequential>
            <local name="output"/>
            <property name="output" value="${out.dir}/SWORD_plugin-@{name}_${platform}_${version.project.major}.exe"/>
            <nsis name="sword-plugin" script="sword-plugin.nsi" license="true" todir="${out.dir}">
                <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
                <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
                <arg value="/DPLUGIN=plugin-@{name}"/>
                <arg value="/DPLUGIN_VERSION=1.0"/>
                <arg value="/DOUTFILE=${output}"/>
            </nsis>
            <safe-move file="${output}"/>
        </sequential>
    </macrodef>

    <target name="package.plugin.hla" description="create hla plugin installer">
        <package-plugin name="hla"/>
    </target>

    <target name="package.plugin.dis" description="create dis plugin installer">
        <package-plugin name="dis"/>
    </target>

    <!-- Package misc -->
    <target name="package.debug" description="create a zip with all PDB files">
        <local name="output"/>
        <property name="output" value="${out.dir}/SWORD_debug_${platform}_${version.project}.zip"/>
        <zip destfile="${output}">
            <mappedresources>
                <fileset dir="${out.dir}/release" includes="**/*.pdb"/>
                <flattenmapper/>
            </mappedresources>
        </zip>
        <safe-move file="${output}"/>
    </target>

    <macrodef name="check-depends">
        <attribute name="file"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="depends" executable="python" failonerror="true">
                <env key="PATH" path="${env.PATH}:${bin.dir}/7z:${bin.dir}/depends"/>
                <arg value="${bin.dir}/buildtools/checkdepends.py"/>
                <arg value="@{file}"/>
                <elements/>
            </exec>
        </sequential>
    </macrodef>

    <target name="package.binaries" description="create a zip with all binaries">
        <local name="output"/>
        <property name="output" value="${out.dir}/SWORD_binaries_${platform}_${version.project}.zip"/>
        <zip destfile="${output}">
            <mappedresources>
                <fileset dir="${out.dir}/release/applications" includes="**/*.exe"/>
                <flattenmapper/>
            </mappedresources>
            <fileset dir="${run.dir}"/>
        </zip>
        <check-depends file="${output}"/>
        <safe-move file="${output}"/>
    </target>

    <target name="package.gaming_app" description="create a zip with a standalone gaming_app binary">
        <local name="output"/>
        <property name="output" value="${out.dir}/SWORD_gaming_${platform}_${version.project}.zip"/>
        <zip destfile="${output}">
            <fileset dir="${out.dir}/release/applications/gaming_app" includes="gaming_app.exe"/>
            <fileset dir="${run.dir}"
                     includes="*.qm,
                               *.qss,
                               *.xml,
                               BugTrap*.dll,
                               gdal19.dll,
                               geos.dll,
                               geos_c.dll,
                               libeay32.dll,
                               libexpat.dll,
                               libiconv-2.dll,
                               libpq.dll,
                               proj.dll,
                               Qt3Support4.dll,
                               QtCore4.dll,
                               QtGui4.dll,
                               QtNetwork4.dll,
                               QtOpenGL4.dll,
                               QtSql4.dll,
                               QtXml4.dll,
                               spatialite.dll,
                               ssleay32.dll,
                               Xalan-C_1_11.dll,
                               XalanMessages_1_11.dll,
                               xerces-c_3_1.dll,
                               zlib1.dll"/>
            <fileset dir="${run.dir}" includes="resources/**"/>
        </zip>
        <check-depends file="${output}"/>
        <safe-move file="${output}"/>
    </target>

    <target name="package.ts" description="create a zip with all ts files">
        <local name="output"/>
        <property name="output" value="${out.dir}/SWORD_ts_${version.project}.zip"/>
        <zip destfile="${output}">
           <mappedresources>
               <fileset dir="${src.dir}" includes="**/*.ts"/>
               <flattenmapper/>
           </mappedresources>
        </zip>
        <safe-move file="${output}"/>
    </target>

     <!-- Package Application -->
    <target name="package.app" description="package des applications runtime">
        <check-depends file="${out.dir}/terraintools_${platform}.zip"/>
        <local name="output"/>
        <property name="output" value="${out.dir}\SWORD_${platform}_${version.project.major}.exe"/>
        <nsis name="sword" script="sword.nsi" nsh="config.nsh" todir="${out.dir}">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DOUTFILE=${output}"/>
            <arg value="/X!include sword-defense.nsh"/>
        </nsis>
        <check-depends file="${output}">
            <arg value="*.exe"/>
            <arg value="*_module.dll"/>
        </check-depends>
        <safe-move file="${output}"/>
    </target>

    <!-- Package documentation/SDK -->
    <target name="package.sdk" description="package sdk documentation">
        <delete dir="${dist.dir}/sdk-${platform}" />
        <copy file="${out.dir}/sdk/doc/sdk.pdf"
            tofile="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}.pdf" />
        <copy todir="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}-html">
            <fileset dir="${out.dir}/sdk/doc/html" />
        </copy>
        <copy todir="${dist.dir}/sdk-${platform}/proto">
            <fileset dir="${src.dir}/libraries/protocol/proto" includes="*.proto"/>
        </copy>
    </target>

    <!--
    ============================================================================
    various project/source checks
    ============================================================================
    -->
    <target name="checkproject" description="check project configuration">
        <exec executable="python" failonerror="true">
            <arg value="${bin.dir}/buildtools/checkproject.py"/>
            <arg value="${root.dir}"/>
            <arg value="${root.dir}/build/vc100/sword.sln"/>
            <!-- These cannot really be fixed, either no project or vc80 -->
            <arg value="--exclude=module_tester"/>
            <!-- These should be fixed -->
            <arg value="--exclude=actions"/>
            <arg value="--exclude=hla_plugin"/>
        </exec>
    </target>

    <target name="checkreports" description="check simulation reports">
        <exec executable="python" failonerror="true">
            <arg value="${root.dir}/build/checkreports.py"/>
            <arg value="${root.dir}"/>
        </exec>
    </target>

    <!--
    ============================================================================
    main
    ============================================================================
    -->
    <target name="update" description="update package dependencies">
        <update name="7z"/>
        <update name="asciidoc" version="8.6.8"/>
        <update name="boost"/>
        <update name="bugtrap"/>
        <update name="buildtools"/>
        <update name="depends"/>
        <update name="excel"/>
        <update name="flexlm"/>
        <update name="gdal"/>
        <update name="geocoord"/>
        <update name="geometry"/>
        <update name="geos"/>
        <update name="hla" package="dll/${platform}" todir="${run.dir}/plugins/hla"/>
        <update name="hla" package="federation_app" todir="${bin.dir}"/>
        <update name="hla" package="include" todir="${include.dir}"/>
        <update name="hla" package="lib/${platform}" todir="${lib.dir}"/>
        <update name="iconv"/>
        <update name="log4cxx"/>
        <update name="masalife/brain" version="${masalife.version}" package="net.masagroup.life.brain.ide-win32.win32.x86.zip" todir="${out.dir}"/>
        <update name="masalife/brain" version="${masalife.version}"/>
        <update name="models" package="decisional-dev" todir="${data.dir}/data/models"/>
        <update name="models" package="exercises-dev" todir="${data.dir}/exercises"/>
        <update name="models" package="propagations-dev" todir="${data.dir}/data/propagations"/>
        <update name="models" package="terrains-dev" todir="${data.dir}/data/terrains"/>
        <update name="mongoose"/>
        <update name="openssl"/>
        <update name="proj4"/>
        <update name="protobuf" version="2.3.0"/>
        <update name="qt"/>
        <update name="spatialite"/>
        <update name="steel"/>
        <update name="svgl"/>
        <update name="terrain" modules="terrain,graphics,spatialcontainer,pathfind,analysis,vmap,geodata,gdal_ogr"/>
        <update name="terrain" package="terraintools_${platform}.zip"/>
        <update name="terrainextractor"/>
        <update name="tools"/>
        <update name="turtle"/>
        <update name="vcredist" package="vcredist"/>
        <update name="xalan-c"/>
        <update name="xerces-c"/>
        <update name="xeumeuleu"/>
        <update name="zlib"/>
    </target>

    <target name="configure" description="update packages and decisional" depends="update,deploy-application-data,generate-symbols"/>

    <target name="clean" description="clean intermediate build artifacts">
        <delete dir="${out.dir}"/>
    </target>

    <target name="build" depends="libraries,applications,modules"/>

    <target name="all" depends="configure,checkproject,checkreports,build,test,documentation,package" description="build and package distribution"/>

    <target name="cmake.update" depends="configure,generate-license">
        <update name="cmake"/>
    </target>

    <target name="cmake.msvc">
        <cmake_msvc input="${root.dir}/build"/>
    </target>

    <target name="cmake.configure">
        <cmake_configure input="${root.dir}/build" configuration="release"/>
    </target>

    <target name="cmake.build">
        <cmake_build target="all"/>
    </target>

    <target name="cmake.test">
        <cmake_test/>
    </target>

    <target name="cmake.all" depends="cmake.update,cmake.configure,cmake.build,cmake.test"/>

</project>

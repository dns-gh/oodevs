<?xml version="1.0"?>
<project name="csword" default="all">

    <!-- Generate 3 months evaluation license -->
    <property name="flex.name" value="evaluation"/>
    <property name="flex.hostid" value="ANY"/>
    <tstamp>
        <format property="flex.expiration" pattern="d-MMM-yyyy" offset="3" unit="month" locale="en,US"/>
    </tstamp>

    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//install/masa/common/dev/common/poney"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>

    <property name="version.project.major" value="trunk"/>
    <property name="version.project" value="${version.project.major}"/>
    <property name="version.company" value="MASA Group"/>
    <property name="version.product" value="Sword"/>
    <property name="version.major" value="5.1.0"/>
    <property name="svn.revision" value="0"/>
    <property name="version.minor" value="${version.major}.${svn.revision}"/>
    <property name="version.version" value="0.0.0.${svn.revision}"/><!-- required for version extension -->
    <property name="masalife.version" value="2011-1.1.x/sword"/>

    <condition property="failonwarning">
        <not>
            <isset property="is-vc80"/>
        </not>
    </condition>

    <!-- local extensions -->
    <import file="protobuf.xml" />

    <!--
    ============================================================================
      libraries
    ============================================================================
    -->
    <target name="libraries" depends="library.tools,library.MT_Tools,library.ENT,library.protocol,library.simulation_terrain,library.simulation_kernel,
                                      library.clients_kernel,library.clients_gui,library.actions,library.actions,library.actions_gui,library.reports,
                                      library.gaming,library.preparation,library.plugins,library.3a,library.mission_tester,library.license_gui,library.geostore" description="build all libraries"/>

    <target name="library.tools" depends="library.MT_Tools" description="build tools static library">
        <build-lib name="tools" pattern="lib${ant.project.name}_tools-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="APP_VERSION" value="${version.minor}"/>
                <define name="APP_MAJOR_VERSION" value="${version.major}"/>
                <define name="APP_PROJECT_VERSION" value="${version.project}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="library.MT_Tools" description="build MT_Tools static library">
        <build-lib name="MT_Tools" pattern="lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.protocol" description="build protocol static library">
        <exec taskname="protolint" executable="python" failonerror="true" timeout="60000">
            <arg value="${libraries.dir}/protocol/protolint.py"/>
            <arg value="${libraries.dir}/protocol/proto"/>
            <arg value="style"/>
        </exec>
        <build-lib name="protocol" pattern="lib${ant.project.name}_protocol-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.ENT" description="build ENT static library">
        <build-lib name="ENT" depends="qt4" pattern="lib${ant.project.name}_ENT-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.dispatcher" depends="library.MT_Tools,library.tools,library.protocol,library.meteo" description="build dispatcher static library">
        <build-lib name="dispatcher" pattern="lib${ant.project.name}_dispatcher-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="MT_AUTO_LINK"/>
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.simulation_terrain" depends="library.MT_Tools" description="build simulation_terrain static library">
        <build-lib name="simulation_terrain" pattern="lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.simulation_kernel" depends="library.tools,library.protocol,library.simulation_terrain,library.meteo,library.resource_network,library.flood" description="build simulation_kernel static library">
        <build-lib name="simulation_kernel" pattern="lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix}" suffix="-gd" excludes="**/DEC_Knowledge_ObjectAttributeProxy_ABC.h">
            <includepath path="${libraries.dir}/simulation_kernel"/> <!-- pour MIL.h -->
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="library.clients_kernel" depends="library.protocol,library.tools,library.ENT" description="build clients_kernel static library">
        <build-lib name="clients_kernel" depends="qt4" pattern="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.clients_gui" depends="library.clients_kernel" description="build clients_gui static library">
        <build-lib name="clients_gui" excludes="**/font/*" depends="qt4" pattern="lib${ant.project.name}_clients_gui-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.actions" depends="library.protocol,library.clients_kernel" description="build actions static library">
        <build-lib name="actions" depends="qt4" pattern="lib${ant.project.name}_actions-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.actions_gui" depends="library.clients_gui,library.actions" description="build actions_gui library">
        <build-lib name="actions_gui" depends="boost,qt4,xerces" pattern="lib${ant.project.name}_actions_gui-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.indicators" depends="library.clients_kernel" description="build indicators static library">
        <build-lib name="indicators" depends="boost,qt4,xerces" pattern="lib${ant.project.name}_indicators-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.reports" depends="library.protocol,library.clients_kernel" description="build reports static library">
        <build-lib name="reports" depends="qt4" pattern="lib${ant.project.name}_reports-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.gaming" depends="library.protocol,library.clients_gui,library.actions,library.actions_gui,library.indicators,library.reports,library.meteo,library.flood" description="build gaming static library">
        <build-lib name="gaming" depends="qt4" pattern="lib${ant.project.name}_gaming-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.preparation" depends="library.clients_gui,library.actions_gui,library.indicators,library.flood,library.geostore" description="build preparation static library">
        <build-lib name="preparation" depends="qt4" pattern="lib${ant.project.name}_preparation-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.frontend" depends="library.clients_gui" description="build frontend static library">
        <build-lib name="frontend" depends="qt4" pattern="lib${ant.project.name}_frontend-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="_WIN32_WINNT=0x0501"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-lib>
    </target>

    <target name="library.3a" depends="library.dispatcher" description="build 3a static library">
        <build-lib name="3a" pattern="lib${ant.project.name}_3a-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.license_gui" description="build license_gui static library">
        <build-lib name="license_gui" depends="qt4,flexlm" pattern="lib${ant.project.name}_license_gui-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.bml_plugin" depends="library.dispatcher" description="build BML dispatcher plugin static library">
        <build-lib name="bml_plugin" pattern="lib${ant.project.name}_bml_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <macrodef name="build-plugin">
        <attribute name="name"/>
        <attribute name="libs" default=""/>
        <attribute name="depends" default=""/>
        <attribute name="failonwarning" default="false"/>
        <element name="cc-elements" optional="true" implicit="true"/>
        <sequential>
            <build-lib name="@{name}_plugin_dll" outtype="shared" depends="@{depends}" pattern="@{name}_plugin-${platform}-mt@{suffix}" suffix="-gd" libs="@{libs}" failonwarning="@{failonwarning}">
                <syslibset libs="shell32,user32"/>
                <defineset define="QT3_SUPPORT"/>
                <linkerarg value="/FIXED:NO"/>
                <cc-elements/>
            </build-lib>
            <move todir="${run.dir}/plugins/@{name}" file="${run.dir}/@{name}_plugin-${platform}-mt.dll"/>
        </sequential>
    </macrodef>

    <target name="library.bml_plugin_dll" depends="library.bml_plugin" description="build bml_plugin dynamic library">
        <build-plugin name="bml" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_bml_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <defineset define="BML_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.edxlhave_plugin_dll" depends="library.dispatcher" description="build edxlhave_plugin_dll dynamic library">
        <build-plugin name="edxlhave" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <defineset define="EDXL_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.crossbow_plugin" depends="library.MT_Tools,library.tools,library.protocol" description="build crossbow dispatcher plugin static library">
        <build-lib name="crossbow_plugin" pattern="lib${ant.project.name}_crossbow_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.crossbow_plugin_dll" depends="library.crossbow_plugin" description="build crossbow_plugin dynamic library">
        <build-plugin name="crossbow" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="gdal_i,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_crossbow_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="CROSSBOW_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.rpr" description="build rpr static library">
        <build-lib name="rpr" pattern="lib${ant.project.name}_rpr-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.hla_plugin" depends="library.dispatcher,library.rpr" description="build hla_plugin static library">
        <build-lib name="hla_plugin" pattern="lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.hla_plugin_dll" depends="library.hla_plugin" description="build hla_plugin dynamic library">
        <build-plugin name="hla" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="HLA,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="HLA_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.web_control_plugin" depends="library.protocol" description="build web_control_plugin static library">
        <build-lib name="web_control_plugin" pattern="lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.web_control_plugin_dll" depends="library.web_control_plugin" description="build web_control_plugin dynamic library">
        <build-plugin name="web_control" depends="boost,protobuf,xerces"
            libs="mongoose@{suffix},
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix}">
            <syslibset libs="wsock32"/>
            <defineset define="WEB_CONTROL_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.vrforces_plugin" depends="library.protocol,library.rpr" description="build vrforces_plugin static library">
        <build-lib name="vrforces_plugin" pattern="lib${ant.project.name}_vrforces_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <includepath path="${include.dir}/vrforces"/>
            <includepath path="${include.dir}/vrlink"/>
            <includepath path="${include.dir}/mak"/>
            <defineset define="DtDISVERS=5"/>
            <defineset define="DtHLA=1"/>
            <defineset define="DtHLA_1516=1"/>
            <defineset define="RTI_USES_STD_FSTREAM=1"/>
            <defineset define="DtRPR=1"/>
            <defineset define="DT_USE_DLL=1"/>
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.vrforces_plugin_dll" depends="library.dispatcher,library.vrforces_plugin" description="build vrforces_plugin dynamic library" if="is-vc80">
        <build-plugin name="vrforces" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="libFedtime1516,
                  matrixRT,mtlRT,vlHLA1516RT,vlRT,vlutilRT,vrfcontrolHLA1516,
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_vrforces_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <defineset define="VRFORCES_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.dis_plugin" depends="library.dispatcher,library.rpr" description="build dis_plugin static library">
        <build-lib name="dis_plugin" pattern="lib${ant.project.name}_dis_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"></build-lib>
    </target>

    <target name="library.dis_plugin_dll" depends="library.dis_plugin,library.dispatcher,library.tic" description="build dis_plugin dynamic library">
        <build-plugin name="dis" depends="boost,qt4,terrain,xalan,xerces,protobuf"
            libs="lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_dis_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="DIS_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.tic" depends="library.dispatcher" description="build tic static library">
        <build-lib name="tic" pattern="lib${ant.project.name}_tic-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.messenger_plugin" depends="library.dispatcher" description="build messenger_plugin static library">
        <build-lib name="messenger_plugin" pattern="lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.aar_plugin" depends="library.dispatcher" description="build aar_plugin static library">
        <build-lib name="aar_plugin" pattern="lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.rights_plugin" depends="library.dispatcher" description="build rights_plugin static library">
        <build-lib name="rights_plugin" pattern="lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.order_plugin" depends="library.dispatcher" description="build order_plugin static library">
        <build-lib name="order_plugin" pattern="lib${ant.project.name}_order_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.saver_plugin" depends="library.dispatcher" description="build saver_plugin static library">
        <build-lib name="saver_plugin" pattern="lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.replay_plugin" depends="library.dispatcher" description="build replay_plugin static library">
        <build-lib name="replay_plugin" pattern="lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.positions_plugin" depends="library.dispatcher" description="build positions saver dispatcher plugin static library">
        <build-lib name="positions_plugin" pattern="lib${ant.project.name}_positions_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.resource_network" description="build resource network static library">
        <build-lib name="resource_network" pattern="lib${ant.project.name}_resource_network-${platform}-mt@{suffix}" suffix="-gd"/>
    </target>

    <target name="library.meteo" depends="library.protocol,library.clients_kernel" description="build meteo static library">
        <build-lib name="meteo" pattern="lib${ant.project.name}_meteo-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.flood" description="build flood static library">
        <build-lib name="flood" pattern="lib${ant.project.name}_flood-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.geostore" description="build geostore static library">
        <build-lib name="geostore" depends="qt4" pattern="lib${ant.project.name}_geostore-${platform}-mt@{suffix}" suffix="-gd"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.shield" depends="library.protocol" description="build shield static library">
        <build-lib name="shield" excludes="**/*.h" pattern="lib${ant.project.name}_shield-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.script_plugin" depends="library.dispatcher" description="build script_plugin static library">
        <build-lib name="script_plugin" pattern="lib${ant.project.name}_script_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
        <copy todir="${run.dir}/resources/scripts">
            <fileset dir="${libraries.dir}/script_plugin" includes="**/*.lua"/>
        </copy>
    </target>

    <target name="library.timeline_plugin" depends="library.dispatcher" description="build timeline_plugin static library">
        <build-lib name="timeline_plugin" pattern="lib${ant.project.name}_timeline_plugin-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.timeline_plugin_dll" depends="library.timeline_plugin" description="build timeline_plugin dynamic library">
        <build-plugin name="timeline" depends="boost,qt4,terrain,xalan,xerces,protobuf,openssl"
            libs="lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_timeline_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="TIMELINE_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.score_plugin" depends="library.dispatcher,library.3a,library.indicators" description="build score_plugin static library">
        <build-lib name="score_plugin" depends="boost,qt4" pattern="lib${ant.project.name}_score_plugin-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.logger_plugin" depends="library.dispatcher,library.reports" description="build logger_plugin static library">
        <build-lib name="logger_plugin" depends="qt4" pattern="lib${ant.project.name}_logger_plugin-${platform}-mt@{suffix}" suffix="-gd"
                   failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.logistic_plugin" depends="library.dispatcher,library.reports" description="build logistic_plugin static library">
        <build-lib name="logistic_plugin" depends="qt4" pattern="lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix}" suffix="-gd"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.logistic_plugin_dll" depends="library.logistic_plugin" description="build logistic_plugin dynamic library">
        <build-plugin name="logistic" depends="boost,qt4,terrain,xalan,xerces,protobuf,openssl"
            libs="Qt3Support4,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
                  failonwarning="${failonwarning}">
            <defineset define="LOGISTIC_PLUGIN_DLL_EXPORTS"/>
        </build-plugin>
    </target>

    <target name="library.client_proxy" depends="library.protocol,library.tools" description="build clients_kernel static library">
        <build-lib name="client_proxy" pattern="lib${ant.project.name}_client_proxy-${platform}-mt@{suffix}" suffix="-gd">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="library.plugins" depends="library.messenger_plugin,library.dis_plugin_dll,library.hla_plugin_dll,
                                            library.aar_plugin,library.rights_plugin,library.order_plugin,library.saver_plugin,library.replay_plugin,
                                            library.3a,
                                            library.bml_plugin,library.bml_plugin_dll,
                                            library.edxlhave_plugin_dll,
                                            library.script_plugin,library.score_plugin,
                                            library.crossbow_plugin_dll,library.timeline_plugin_dll,
                                            library.web_control_plugin_dll,
                                            library.logger_plugin,library.positions_plugin,
                                            library.logistic_plugin,library.logistic_plugin_dll" description="build all dispatcher plugins"/>

    <target name="library.mission_tester" depends="library.clients_kernel,library.actions,library.client_proxy" description="build mission tester lib">
        <build-lib name="mission_tester" pattern="lib${ant.project.name}_mission_tester-${platform}-mt@{suffix}" suffix="-gd" depends="qt4">
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <!--
    ============================================================================
     modules
    ============================================================================
    -->
    <target name="modules" description="build Sword modules"
            depends="library.simulation_kernel,library.wrapper,modules.module_tester_test,modules.movement_module_test,
                     modules.perception_module_test,modules.fire_module_test,modules.propagation_module_test"/>

    <target name="library.wrapper" description="build wrapper library">
        <build-lib name="wrapper" />
    </target>

    <target name="modules.module_tester_test">
        <build-test name="module_tester" depends="boost" libs="core@{suffix}"/>
    </target>

    <target name="modules.movement_module" description="build movement module">
        <build-lib name="movement_module">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="modules.movement_module_dll" depends="library.MT_Tools,library.wrapper,modules.movement_module" description="build movement module dll">
        <build-lib name="movement_module_dll" outtype="shared" pattern="movement_module" depends="terrain,boost,xerces"
                   libs="movement_module@{suffix},wrapper@{suffix},lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"/>
    </target>

    <target name="modules.movement_module_test" depends="modules.movement_module_dll">
        <build-test name="movement_module" depends="boost,xerces,terrain" libs="movement_module@{suffix},core@{suffix}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="modules.perception_module" description="build perception module">
        <build-lib name="perception_module">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="modules.perception_module_dll" depends="library.wrapper,modules.perception_module" description="build perception module dll">
        <build-lib name="perception_module_dll" outtype="shared" pattern="perception_module" depends="boost,xerces"
                   libs="perception_module@{suffix},wrapper@{suffix}"/>
    </target>

    <target name="modules.perception_module_test" depends="modules.perception_module_dll">
        <build-test name="perception_module" depends="boost" libs="perception_module@{suffix},core@{suffix}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="modules.fire_module" description="build fire module">
        <build-lib name="fire_module">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="modules.fire_module_dll"  depends="library.wrapper,modules.fire_module" description="build fire module dll">
        <build-lib name="fire_module_dll" outtype="shared" pattern="fire_module" depends="boost,xerces"
                   libs="fire_module@{suffix},wrapper@{suffix}"/>
    </target>

    <target name="modules.fire_module_test" depends="modules.fire_module_dll">
        <build-test name="fire_module" depends="boost" libs="fire_module@{suffix},core@{suffix}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <target name="modules.propagation_module" description="build propagation module">
        <build-lib name="propagation_module">
            <includepath path="${libraries.dir}/simulation_kernel"/>
        </build-lib>
    </target>

    <target name="modules.propagation_module_dll" depends="library.wrapper,modules.propagation_module" description="build propagation module dll">
        <build-lib name="propagation_module_dll" outtype="shared" pattern="propagation_module" depends="boost"
                   libs="propagation_module@{suffix},wrapper@{suffix}"/>
    </target>

    <target name="modules.propagation_module_test" depends="modules.propagation_module_dll">
        <build-test name="propagation_module" depends="boost" libs="propagation_module@{suffix},core@{suffix}">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <compilerarg value="-Zm500"/>
        </build-test>
    </target>

    <!--
    ============================================================================
     applications
    ============================================================================
    -->
    <target name="applications" description="build Sword executables"
            depends="applications.simulation,applications.clients,applications.frontends"/>

    <target name="applications.simulation" description="build Sword Simulation executables"
            depends="application.dispatcher_app,application.simulation_app,application.replayer_app"/>

    <target name="applications.clients" description="build Sword Client executables"
            depends="application.gaming_app,application.preparation_app,application.adaptation_app,
                     application.loadtester_app,application.wise_driver_dll,library.vrforces_plugin_dll,
                     application.mission_tester_app,application.edxlhave_app,
                     application.launcher_test_app,application.xml_signature_app,
                     application.shield_app"/>

    <target name="applications.frontends" description="build Sword Frontend executables"
            depends="application.selftraining_app,application.launcher_app,application.package_app"/>

    <target name="application.launcher_dll" depends="library.client_proxy,library.clients_gui,library.frontend,library.protocol,library.shield" description="build Sword launcher dll">
        <build-lib name="launcher_dll" outtype="shared" depends="boost,qt4,xerces,xalan,protobuf" pattern="launcher-${platform}-mt"
            libs="zipstream,zlib1,tools,
                  lib${ant.project.name}_clients_gui-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_client_proxy-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_frontend-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <syslibset libs="shell32,user32"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset define="LAUNCHER_DLL_EXPORTS"/>
            <linkerarg value="/FIXED:NO"/>
        </build-lib>
    </target>

    <target name="application.dispatcher_dll" depends="library.dispatcher,library.actions,library.clients_kernel,library.ENT,library.plugins,library.shield" description="build Sword Dispatcher dll">
        <build-lib name="dispatcher_dll" outtype="shared" depends="boost,terrain,qt4,xerces,xalan,protobuf" pattern="dispatcher-${platform}-mt@{suffix}" suffix="-gd"
            libs="directia-${platform}-mt@{suffix}-4_6,
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_reports-${platform}-mt@{suffix},
                  lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_positions_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_logger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_script_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_order_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_logistic_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_3a-${platform}-mt@{suffix},
                  lib${ant.project.name}_score_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_indicators-${platform}-mt@{suffix},
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
            <linkerarg value="/FIXED:NO"/>
        </build-lib>
    </target>

    <target name="application.dispatcher_app" depends="application.dispatcher_dll" description="build Sword Dispatcher executable">
        <build-app name="dispatcher_app" depends="boost,terrain,flexlm,qt4,xerces,xalan"
            libs="dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,advapi32,shell32,gdi32"/>
            <defineset define="QT3_SUPPORT"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-app>
    </target>

    <target name="application.simulation_app" depends="library.license_gui,library.simulation_kernel,application.dispatcher_dll" description="build Sword Simulation executable">
        <build-app name="simulation_app" depends="terrain,boost,xerces,xalan,flexlm,protobuf" pattern="simulation_app"
            libs="masalloc,directia-${platform}-mt-4_6,library-${platform}-mt,
                  gdal_i,gdal_ogr,log4cxx,geodata,analysis,
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_resource_network-${platform}-mt@{suffix},
                  lib${ant.project.name}_flood-${platform}-mt@{suffix},
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix},
                  core">
            <syslibset libs="dbghelp,psapi,shell32,iphlpapi,advapi32,gdi32"/>
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
            <defineset define="_WIN32_WINNT=0x0501"/> <!-- for 'IsDebuggerPresent()' -->
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
            <linkerarg value="/LARGEADDRESSAWARE"/>   <!-- Executable can access 3GiB instead of 2GiB -->
        </build-app>
    </target>

    <target name="application.replayer_app" depends="application.dispatcher_dll,library.dispatcher,library.3a,library.score_plugin,library.web_control_plugin" description="build Sword replayer executable">
        <build-app name="replayer_app" depends="terrain,boost,flexlm,qt4,xerces,xalan,protobuf" pattern="replayer_app"
            libs="tools,directia-${platform}-mt-4_6,
                  mongoose@{suffix},
                  dispatcher-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt,
                  lib${ant.project.name}_3a-${platform}-mt,
                  lib${ant.project.name}_dispatcher-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                  lib${ant.project.name}_aar_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_rights_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_replay_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_saver_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_score_plugin-${platform}-mt,
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_indicators-${platform}-mt,
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_license_gui-${platform}-mt@{suffix}">
            <syslibset libs="dbghelp,psapi,iphlpapi,user32,shell32,advapi32,gdi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.adaptation_app" depends="library.ENT,library.clients_gui" description="build Sword Adaptation executable">
        <build-app name="adaptation_app" depends="qt4,xerces,xalan,boost,flexlm" excludes="**/XmlResources.cpp"
                   libs="svgl,zipstream,bugtrap,excel@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}" pch-excludes="qt4undo.cpp">
            <syslibset libs="gdi32,advapi32,user32,htmlhelp,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.gaming_app" depends="library.gaming" description="build Sword Gaming executable">
        <build-app name="gaming_app" depends="terrain,xerces,xalan,qt4,boost,flexlm,protobuf"
                   libs="gdal_i,gdal_ogr,log4cxx,svgl,zipstream,zlib1,bugtrap,
                         lib${ant.project.name}_actions-${platform}-mt,
                         lib${ant.project.name}_actions_gui-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                         lib${ant.project.name}_reports-${platform}-mt,
                         lib${ant.project.name}_gaming-${platform}-mt,
                         lib${ant.project.name}_indicators-${platform}-mt,
                         lib${ant.project.name}_flood-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.loadtester_app" depends="library.protocol,library.tools" description="build Sword load testing executable">
        <build-app name="loadtester_app" subsystem="console"
                   depends="boost,protobuf" failonwarning="${failonwarning}"
                   libs="lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.preparation_app" depends="library.preparation,library.frontend" description="build Sword Gaming executable">
        <build-app name="preparation_app" excludes="**/**_Gen.*" depends="terrain,xerces,xalan,qt4,boost,flexlm,protobuf"
                   libs="gdal_i,gdal_ogr,log4cxx,svgl,zipstream,zlib1,bugtrap,
                         geodata,geos_i,spatialite,proj_i,libiconv,
                         lib${ant.project.name}_actions-${platform}-mt,
                         lib${ant.project.name}_actions_gui-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_indicators-${platform}-mt,
                         lib${ant.project.name}_preparation-${platform}-mt,
                         lib${ant.project.name}_meteo-${platform}-mt,
                         lib${ant.project.name}_flood-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_frontend-${platform}-mt,
                         lib${ant.project.name}_geostore-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}"
                    failonwarning="${failonwarning}">
            <syslibset libs="gdi32,psapi,dbghelp,htmlhelp,advapi32,shell32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.selftraining_app" depends="library.frontend,application.launcher_dll" description="build Sword Self-training executable">
        <build-app name="selftraining_app" depends="qt4,boost,xerces,xalan,flexlm,protobuf"
                   libs="bugtrap,zipstream,zlib1,tools
                         launcher-${platform}-mt@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_frontend-${platform}-mt,
                         lib${ant.project.name}_clients_gui-${platform}-mt,
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt,
                         lib${ant.project.name}_license_gui-${platform}-mt@{suffix}">
            <syslibset libs="gdi32,shell32,htmlhelp,advapi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.shield_app" depends="library.MT_Tools,library.protocol,library.shield,library.tools" description="Build shield test application">
        <build-app name="shield_app" depends="qt4,boost,protobuf"
                   libs="lib${ant.project.name}_MT_Tools-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt,
                         lib${ant.project.name}_shield-${platform}-mt,
                         lib${ant.project.name}_tools-${platform}-mt">
        </build-app>
    </target>

    <target name="application.launcher_app" depends="library.MT_Tools,application.launcher_dll" description="build Sword launcher service">
        <build-app name="launcher_app" depends="boost,xerces,xalan" subsystem="console"
                   libs="launcher-${platform}-mt@{suffix},tools
                      lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"
                   failonwarning="${failonwarning}">
            <syslibset libs="psapi,advapi32"/>
            <defineset define="_WIN32_WINNT=0x0501"/>
        </build-app>
    </target>

    <target name="application.package_app" description="build Sword Package deployment executable">
        <build-app name="package_app" depends="boost" subsystem="console">
            <syslibset libs="user32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.wise_driver_dll" depends="library.client_proxy" description="build Sword WISE driver dll" if="is-vc80">
        <build-lib name="wise_driver_dll" outtype="shared" depends="boost,protobuf" suffix="-gd" pattern="MASAGroup.Sword@{suffix}"
            libs="Common,DriverBase,
                  lib${ant.project.name}_client_proxy-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <includepath path="${include.dir}/wise"/>
            <defineset define="_USRDLL"/>
            <defineset define="DLLDRIVER_EXPORTS"/>
            <defineset define="QT3_SUPPORT"/>
        </build-lib>
    </target>

    <target name="application.mission_tester_app" depends="library.mission_tester" description="build Sword mission tester executable">
        <build-app name="mission_tester_app" depends="boost,protobuf,qt4,terrain,xalan,xerces"
            libs="lib${ant.project.name}_mission_tester-${platform}-mt@{suffix},
                  lib${ant.project.name}_actions-${platform}-mt@{suffix},
                  lib${ant.project.name}_client_proxy-${platform}-mt@{suffix},
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <syslibset libs="geocoord"/>
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.edxlhave_app" depends="library.protocol" description="build edxl_app (Emergency Data Exchange)">
        <build-app name="edxlhave_app" depends="xerces,boost,protobuf,openssl" libs="lib${ant.project.name}_protocol-${platform}-mt@{suffix}" subsystem="console" >
            <includepath path="${out.dir}/release/libraries/protocol"/>
        </build-app>
    </target>

    <target name="application.launcher_test_app" depends="library.protocol,library.frontend,library.shield" description="build application">
        <build-app name="launcher_test_app" subsystem="console" depends="qt4,boost,xerces,protobuf"
            libs="lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_frontend-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_shield-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <target name="application.xml_signature_app" description="build application">
        <build-app name="xml_signature_app" subsystem="console" depends="boost" libs="tools" failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-app>
    </target>

    <!--
    ============================================================================
    samples
    ============================================================================
    -->
    <target name="sample.client_sample_app" depends="library.protocol" description="build Sample client application">
        <build-app name="client_sample_app" depends="protobuf" root="${samples.dir}"
                   libs="lib${ant.project.name}_protocol-${platform}-mt@{suffix}" subsystem="console">
            <syslibset libs="wsock32"/>
            <includepath path="${out.dir}/release/libraries/protocol"/>
        </build-app>
    </target>

    <!--
    ============================================================================
    data
    ============================================================================
    -->
    <macrodef name="extract-knowledges">
        <attribute name="dir"/>
        <attribute name="tofile"/>
        <sequential>
            <concat destfile="@{tofile}" fixlastline="yes">
                <fileset dir="@{dir}" includes="**/*.xml"/>
                <filterchain>
                    <containsregex pattern='.*name="(.*)" source.*knowledge-class="(.*)">' replace='integration.taskKnowledge["\1"] = "\2"'/>
                </filterchain>
            </concat>
        </sequential>
    </macrodef>

    <target name = "generate-database-common" depends="generate-decisional-files">
        <bmc src="${models.dir}/common/src" core="${models.dir}/directia.core/directia.core.bml" luac="false"/>
    </target>

    <target name="generate-database-crowd" depends="generate-database-common" description= "compile behavior model database for crowd">
        <bmc src="${models.dir}/crowd/src" core="${models.dir}/directia.core/directia.core.bml" depends="${models.dir}/common/src" luac="false"/>
    </target>

    <target name="generate-database-security" depends="generate-database-common"  description=" compile behavior model database for security">
        <bmc src="${models.dir}/security/src" core="${models.dir}/directia.core/directia.core.bml" depends="${models.dir}/common/src" luac="false"/>
        <bmc src="${models.dir}/security_test/src" core="${models.dir}/directia.core/directia.core.bml" depends="${models.dir}/common/src;${models.dir}/security/src" luac="false"/>
    </target>

    <target name ="generate-database-military">
        <bmc src="${models.dir}/military/src" core="${models.dir}/directia.core/directia.core.bml" luac="false"/>
    </target>

    <target name="generate-database-france" depends="generate-database-military,generate-database-crowd" description="compile behavior model database france">
        <bmc src="${models.dir}/france/src/" core="${models.dir}/directia.core/directia.core.bml" depends="${models.dir}/common/src;${models.dir}/crowd/src;${models.dir}/military/src" luac="false"/>
        <extract-knowledges dir="${models.dir}" tofile="${run.dir}/resources/integration/TaskKnowledge.lua"/>
    </target>

    <target name="generate-database-worldwide" depends="generate-database-military" description="compile behavior model database worldwide">
        <bmc src="${models.dir}/worldwide/src" core="${models.dir}/directia.core/directia.core.bml" depends="${models.dir}/military/src" luac="false"/>
        <extract-knowledges dir="${models.dir}" tofile="${run.dir}/resources/integration/TaskKnowledge.lua"/>
    </target>

    <target name="generate-database" depends="deploy-application-data,generate-database-france,generate-database-worldwide,generate-database-security" description="compile all behavior models"/>

    <target name="generate-symbols" description="generate symbols">
        <zip destfile="${run.dir}/resources/symbols.pak">
            <fileset dir="${libraries.dir}/clients_gui/svg"/>
        </zip>
    </target>

    <target name="generate-signatures" depends="application.xml_signature_app" description="generate signatures">
        <exec executable="${out.dir}/release/applications/xml_signature_app/xml_signature_app.exe" dir="${run.dir}" failonerror="true" timeout="30000">
            <arg value="${data.dir}/data/models/ada/physical"/>
            <arg value="${data.dir}/data/terrains"/>
            <arg value="${data.dir}/exercises"/>
        </exec>
    </target>

    <target name="generate-decisional-files">
        <echoxml file="${data.dir}/data/models/ada/decisional/decisional.xml">
            <decisional model-version="${version.project.major}">
                <RepertoiresSources>
                    <RepertoireSources namespace="none" directory="bms/sources"/>
                    <RepertoireSources namespace="net.masagroup" directory="dia5"/>
                </RepertoiresSources>
            </decisional>
        </echoxml>
        <echoxml file="${data.dir}/data/models/training/decisional/decisional.xml">
            <decisional model-version="${version.project.major}">
                <RepertoiresSources>
                    <RepertoireSources namespace="none" directory="bms/sources"/>
                    <RepertoireSources namespace="net.masagroup" directory="dia5"/>
                </RepertoiresSources>
            </decisional>
        </echoxml>
    </target>

    <target name="deploy-application-data" description="deploy applications data to run directory">
        <copy todir="${run.dir}">
            <fileset dir="${data.dir}/app-data"/>
        </copy>
    </target>

    <!--
    ============================================================================
    license
    ============================================================================
    -->
    <target name="generate-license" description="generate license files in run directory">
        <flexlm name="sword" feature="sword" vendor="bkmasa"/>
        <flexlm name="sword-gaming" feature="sword-gaming" vendor="bkmasa"/>
        <flexlm name="sword-dispatcher" feature="sword-dispatcher" vendor="bkmasa"/>
        <flexlm name="sword-authoring" feature="sword-authoring" vendor="bkmasa"/>
        <flexlm name="sword-preparation" feature="sword-preparation" vendor="bkmasa"/>
        <flexlm name="sword-workshop" feature="sword-workshop" vendor="bkmasa"/>
        <flexlm name="sword-terrain-generation" feature="sword-terrain-generation" vendor="bkmasa"/>
        <flexlm name="sword-runtime" feature="sword-runtime" vendor="bkmasa"/>
        <flexlm name="sword-replayer" feature="sword-replayer" vendor="bkmasa"/>
    </target>

    <!--
    ============================================================================
    tests
    ============================================================================
    -->
    <target name="test" depends="generate-license,scripts_test,adaptation_test,tools_test,3a_test,plugins_test,hla_plugin_test,web_control_plugin_test,
                                 shield_test,clients_test,exercises_test,data_migrations_test,dispatcher_test,application.simulation_kernel_test,
                                 application.integration_decisionnal_test,checkpoint_test,protocol_test,positions_plugin_test,
                                 actions_test,launcher_test,reports_test,flood_test,client_proxy_test" description="run all tests"/>

    <target name="3a_test" depends="library.3a">
        <build-test name="3a" depends="xerces,terrain,boost,protobuf" libs="lib${ant.project.name}_3a-${platform}-mt@{suffix},lib${ant.project.name}_protocol-${platform}-mt" failonwarning="${failonwarning}"/>
    </target>

    <target name="tools_test" depends="library.tools">
        <build-test name="tools" depends="boost,xerces,xalan,qt4"
            libs="lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  tools,
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}"/>
    </target>

    <target name="plugins_test" depends="library.hla_plugin,library.tic,library.script_plugin,library.bml_plugin,library.crossbow_plugin,library.timeline_plugin,web_control_plugin_test,library.logistic_plugin">
        <build-test name="plugins" depends="xerces,terrain,boost,openssl,protobuf,qt4"
            libs="directia-${platform}-mt-4_6,gdal_i,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_tic-${platform}-mt@{suffix},
                  lib${ant.project.name}_bml_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_script_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_timeline_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_crossbow_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt,
                  lib${ant.project.name}_logistic_plugin-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="hla_plugin_test" depends="library.hla_plugin" if="is-vc80">
        <build-test name="hla_plugin" depends="boost,qt4,terrain,xerces,xalan,protobuf"
            libs="HLA,
                  lib${ant.project.name}_clients_kernel-${platform}-mt@{suffix},
                  lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_rpr-${platform}-mt@{suffix},
                  lib${ant.project.name}_hla_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix}">
            <syslibset libs="shell32,user32,wsock32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="web_control_plugin_test" depends="library.web_control_plugin">
        <build-test name="web_control_plugin" depends="boost,protobuf,xerces"
            libs="mongoose@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                  lib${ant.project.name}_web_control_plugin-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}">
            <syslibset libs="shell32,user32,wsock32"/>
            <compilerarg value="-Zm200"/>
        </build-test>
    </target>

    <target name="shield_test" depends="library.shield">
        <build-test name="shield" depends="boost,protobuf" excludes="**/*.h"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                 lib${ant.project.name}_MT_Tools-${platform}-mt,
                 lib${ant.project.name}_shield-${platform}-mt,
                 lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}"/>
    </target>

    <target name="clients_test" depends="library.indicators,library.preparation">
        <build-test name="clients" depends="terrain,boost,qt4,xerces,xalan,protobuf"
            libs="gdal_i,gdal_ogr,svgl,zipstream,zlib1,geodata,geos_i,spatialite,proj_i,libiconv,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_indicators-${platform}-mt,
                  lib${ant.project.name}_clients_gui-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_preparation-${platform}-mt,
                  lib${ant.project.name}_flood-${platform}-mt,
                  lib${ant.project.name}_meteo-${platform}-mt,
                  lib${ant.project.name}_geostore-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <syslibset libs="gdi32"/>
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="actions_test" depends="library.actions">
        <build-test name="actions" depends="terrain,boost,qt4,xerces,xalan,protobuf"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_actions-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="client_proxy_test" depends="library.client_proxy,library.protocol,library.tools,library.MT_Tools">
        <build-test name="client_proxy" depends="boost,protobuf"
            libs="lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_client_proxy-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
        </build-test>
    </target>

    <target name="dispatcher_test" depends="library.dispatcher,library.messenger_plugin">
        <build-test name="dispatcher" depends="boost,qt4,xerces,xalan,terrain,protobuf"
            libs="lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_messenger_plugin-${platform}-mt@{suffix},
                  lib${ant.project.name}_ENT-${platform}-mt@{suffix},
                  lib${ant.project.name}_dispatcher-${platform}-mt,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
        </build-test>
    </target>

    <target name="launcher_test" depends="application.launcher_dll,library.frontend">
        <build-test name="launcher" depends="boost,qt4,xerces,protobuf"
            libs="launcher-${platform}-mt@{suffix},tools,
                  lib${ant.project.name}_frontend-${platform}-mt,
                  lib${ant.project.name}_clients_kernel-${platform}-mt,
                  lib${ant.project.name}_MT_Tools-${platform}-mt,
                  lib${ant.project.name}_ENT-${platform}-mt,
                  lib${ant.project.name}_tools-${platform}-mt,
                  lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}">
            <defineset define="QT3_SUPPORT"/>
            <syslibset libs="shell32"/>
        </build-test>
    </target>

    <target name="flood_test" depends="library.flood">
        <build-test name="flood" depends="boost" libs="lib${ant.project.name}_flood-${platform}-mt" failonwarning="${failonwarning}"/>
    </target>

    <target name="positions_plugin_test" depends="library.protocol,library.positions_plugin">
        <build-test name="positions_plugin" depends="boost,protobuf"
            libs="lib${ant.project.name}_positions_plugin-${platform}-mt,lib${ant.project.name}_protocol-${platform}-mt"
            failonwarning="${failonwarning}"/>
    </target>

    <macrodef name="run-one-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <math result="test.portnumber2">
                <op op="+" datatype="int">
                    <num value="${test.portnumber}"/>
                    <num value="1"/>
                </op>
            </math>
            <exec executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="--root-dir=../../data"/>
                <arg value="--exercise=@{exercise}"/>
                <arg value="--session=@{session}"/>
                <arg value="--simulation-port=${test.portnumber}"/>
                <arg value="--dispatcher-port=${test.portnumber2}"/>
                <arg value="--test"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="run-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
                <arg value="--legacy"/>
            </run-one-simulation>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
            </run-one-simulation>
        </sequential>
    </macrodef>

    <target name="checkpoint_test" depends="application.simulation_app,modules" description="save and load a checkpoint">
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--savecheckpoint=tempcheckpoint"/>
            <arg value="--legacy"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--checkpoint=tempcheckpoint"/>
            <arg value="--deletecheckpoint"/>
            <arg value="--legacy"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--savecheckpoint=tempcheckpoint"/>
        </run-one-simulation>
        <run-one-simulation exercise="scipio/CheckpointTests">
            <arg value="--checkpoint=tempcheckpoint"/>
            <arg value="--deletecheckpoint"/>
        </run-one-simulation>
    </target>

    <macrodef name="test-scripts">
        <attribute name="dataset"/>
        <attribute name="physical"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <delete dir="${data.dir}/exercises/scripts_test"/>
            <copy todir="${data.dir}/exercises/scripts_test" overwrite="true">
                <fileset dir="${data.dir}/tests/scripts_test" includes="**/*.xml"/>
                <filterset>
                    <filter token="DATASET" value="@{dataset}"/>
                    <filter token="PHYSICAL" value="@{physical}"/>
                </filterset>
            </copy>
            <run-simulation exercise="scripts_test" session="test-session"/>
            <delete dir="${data.dir}/exercises/scripts_test"/>
        </sequential>
    </macrodef>

    <target name="scripts_test" description="run all script tests">
        <test-scripts dataset="ada" physical="scipio"/>
        <test-scripts dataset="ada" physical="worldwide"/>
    </target>

    <macrodef name="echo-files">
        <attribute name="files"/>
        <attribute name="prefix" default=""/>
        <sequential>
            <for list="@{files}" param="file" delimiter=";">
                <sequential>
                    <echo>@{prefix}@{file}</echo>
                </sequential>
            </for>
        </sequential>
    </macrodef>

    <macrodef name="compare-dirs">
        <attribute name="dir1"/>
        <attribute name="dir2"/>
        <attribute name="excludes" default=""/>
        <attribute name="includes" default=""/>
        <attribute name="property"/>
        <sequential>
            <fileset id="@{dir1}.id" dir="@{dir1}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir2}" ignorefiletimes="true"/>
            </fileset>
            <pathconvert property="@{property}.@{dir1}" refid="@{dir1}.id" setonempty="false"/>
            <fileset id="@{dir2}.id" dir="@{dir2}" excludes="@{excludes}" includes="@{includes}">
                <different targetdir="@{dir1}" ignorefiletimes="true"/>
            </fileset>
            <pathconvert property="@{property}.@{dir2}" refid="@{dir2}.id" setonempty="false"/>
            <if>
                <and>
                    <isset property="@{property}.@{dir1}"/>
                    <isset property="@{property}.@{dir2}"/>
                </and>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}};${@{property}.@{dir2}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir1}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir1}}"/>
                </then>
            </if>
            <if>
                <isset property="@{property}.@{dir2}"/>
                <then>
                    <property name="@{property}" value="${@{property}.@{dir2}}"/>
                </then>
            </if>
        </sequential>
    </macrodef>

    <macrodef name="run-adaptation">
        <attribute name="input"/>
        <attribute name="output"/>
        <sequential>
            <exec executable="${out.dir}/release/applications/adaptation_app/adaptation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="-i"/>
                <arg value="@{input}/physical.xml"/>
                <arg value="-o"/>
                <arg value="@{output}/physical.xml"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation">
        <attribute name="input"/>
        <sequential>
            <echo>Testing models: @{input}</echo>
            <delete dir="${out.dir}/test-adaptation"/>
            <run-adaptation input="@{input}" output="${out.dir}/test-adaptation"/>
            <compare-dirs dir1="@{input}" dir2="${out.dir}/test-adaptation"
                excludes="**/Pathfind.xml,**/dis.xml,**/HumanProtections.xml,**/Fire.xml,**/MedicalTreatment.xml,**/NBCAgents.xml,**/templates.xml,**/ObjectNames.xml,**/mapping.xml,**/DrawingTemplates.xml,**/FOM.xml,**/Extensions.xml,**/scores.xml,**/symbols.xml,**/Filters,**/Filters/**"
                includes="**/*.xml" property="adaptation_test.is-different"/>
            <if>
                <isset property="adaptation_test.is-different"/>
                <then>
                    <echo>ERROR: the following files differ :</echo>
                    <echo-files files="${adaptation_test.is-different}" prefix="ERROR: "/>
                    <echo>ERROR: did you forget to run 'ant generate-signatures' ?</echo>
                    <fail message="saved data differ from loaded data."/>
                </then>
            </if>
            <delete dir="${out.dir}/test-adaptation"/>
        </sequential>
    </macrodef>

    <target name="adaptation_test" description="load and save adaptation main data then check that output is the same as input">
        <test-adaptation input="${data.dir}/data/models/ada/physical/scipio"/>
        <test-adaptation input="${data.dir}/data/models/ada/physical/worldwide"/>
    </target>

    <target name="application.simulation_kernel_test" depends="library.simulation_kernel" description="build Sword Simulation kernel test executable">
        <build-test name="simulation_kernel"
                   libs="core,masalloc,tools,directia-${platform}-mt-4_6,library-${platform}-mt,
                         gdal_i,gdal_ogr,log4cxx,geodata,analysis,
                         dispatcher-${platform}-mt@{suffix},
                         lib${ant.project.name}_tools-${platform}-mt@{suffix},
                         lib${ant.project.name}_clients_kernel-${platform}-mt,
                         lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                         lib${ant.project.name}_ENT-${platform}-mt,
                         lib${ant.project.name}_protocol-${platform}-mt@{suffix},
                         lib${ant.project.name}_simulation_terrain-${platform}-mt@{suffix},
                         lib${ant.project.name}_resource_network-${platform}-mt@{suffix},
                         lib${ant.project.name}_meteo-${platform}-mt@{suffix},
                         lib${ant.project.name}_flood-${platform}-mt@{suffix},
                         lib${ant.project.name}_simulation_kernel-${platform}-mt@{suffix}"
            depends="xerces,xalan,terrain,boost,qt4,protobuf">
            <syslibset libs="dbghelp,psapi,shell32,iphlpapi,advapi32"/>
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <linkerarg value="/STACK:15000000"/>      <!-- Because of boost serialization -->
        </build-test>
    </target>

    <target name="application.integration_decisionnal_test" description="build Sword Integration DIA5 test executable">
        <build-test name="integration_decisionnal" depends="boost" libs="directia-${platform}-mt-4_6" dir="resources">
            <includepath path="${libraries.dir}/simulation_kernel"/>
            <defineset>
                <define name="PLATFORM" value="${platform}"/>
            </defineset>
        </build-test>
    </target>

    <macrodef name="test-exercise">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/exercise.xsd" file="../data/exercises/@{exercise}/exercise.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/orbat.xsd" file="../data/exercises/@{exercise}/orbat.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/profiles.xsd" file="../data/exercises/@{exercise}/profiles.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/weather.xsd" file="../data/exercises/@{exercise}/weather.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/session.xsd" file="../data/exercises/@{exercise}/sessions/@{session}/session.xml" failonerror="true" warn="true"/>
            <run-simulation exercise="@{exercise}" session="@{session}"/>
        </sequential>
    </macrodef>

    <target name="exercises_test" description="validates some significant exercises">
        <test-exercise exercise="worldwide/Egypt"/>
        <test-exercise exercise="scipio/Poseidon VA"/>
    </target>

    <macrodef name="test-data-migration">
        <attribute name="exercise"/>
        <attribute name="old-version"/>
        <attribute name="session" default="default"/>
        <attribute name="temporary-name" default="test-data-migration"/>
        <sequential>
            <echo>Testing automatic migration from version @{old-version} using exercise '@{exercise}'</echo>
            <!-- Copy physical database -->
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/data/models/ada/physical/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/physical"/>
            </copy>
            <!-- ADN -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <run-adaptation input="${data.dir}/data/models/ada/physical/@{temporary-name}" output="${out.dir}/@{temporary-name}"/>
            <!-- Copy exercise -->
            <delete dir="${data.dir}/exercises/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/exercises/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/exercises/@{exercise}"/>
                <filterset>
                    <filter token="DATASET" value="ada"/>
                    <filter token="PHYSICAL" value="@{temporary-name}"/>
                </filterset>
            </copy>
            <!-- SIM -->
            <run-simulation exercise="@{temporary-name}" session="@{session}"/>
            <!-- cleanup -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}"/>
            <delete dir="${data.dir}/exercises/@{temporary-name}"/>
        </sequential>
    </macrodef>

    <target name="data_migrations_test">
        <test-data-migration old-version="3.0" exercise="CabourgOld"/>
        <test-data-migration old-version="4.2.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.1" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.2" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.4embraer" exercise="Egypt"/>
        <test-data-migration old-version="4.3.0cae" exercise="Paris"/>
        <test-data-migration old-version="5.0.0" exercise="Egypt"/>
    </target>

    <target name="protocol_test" description="build protocol test application" depends="library.protocol,library.tools">
        <build-test name="protocol" depends="boost,protobuf"
            libs="lib${ant.project.name}_MT_Tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_tools-${platform}-mt@{suffix},
                  lib${ant.project.name}_protocol-${platform}-mt@{suffix}"
            failonwarning="${failonwarning}"/>
    </target>

    <macrodef name="count">
        <attribute name="property"/>
        <attribute name="string"/>
        <attribute name="file"/>
        <sequential>
            <resourcecount property="@{property}">
                <tokens>
                    <concat>
                      <filterchain>
                          <tokenfilter>
                              <containsstring contains="@{string}"/>
                          </tokenfilter>
                      </filterchain>
                      <fileset file="@{file}"/>
                    </concat>
                </tokens>
            </resourcecount>
        </sequential>
    </macrodef>

    <target name="reports_test" description="check that ada/physical/scipio/Reports.xml and ada/physical/worldwide/Reports.xml contain the same amount of reports">
        <count property="reports_test.worldwide" string="report id=" file="${data.dir}/data/models/Ada/physical/worldwide/Reports.xml"/>
        <count property="reports_test.scipio" string="report id=" file="${data.dir}/data/models/Ada/physical/scipio/Reports.xml"/>
        <fail message="File 'reports.xml' from physical databases doesn't contain the same amount of entries - France:${reports_test.scipio} vs Worldwide:${reports_test.worldwide}">
            <condition>
                <not>
                    <equals arg1="${reports_test.worldwide}" arg2="${reports_test.scipio}"/>
                </not>
            </condition>
        </fail>
    </target>

    <!--
    ============================================================================
    documentation
    ============================================================================
    -->

    <target name="proto-api-documentation"
        description="generate SDK documentation">
        <mkdir dir="${out.dir}/sdk/doc/html"/>
        <exec taskname="python" executable="python" failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/asciidoc.py" />
            <arg value="--out-file=${out.dir}/sdk/doc/html/index.html" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </exec>
        <exec executable="python" failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/a2x.py" />
            <arg value="--format=pdf" />
            <arg value="--fop" />
            <!-- Linting needs the DTD, DTD are usually resolved relatively to
                 the input file location, this is a pain to deal with, just
                 forget it, asciidoc should generate valid docbook anyway. -->
            <arg value="--no-xmllint" />
            <arg value="--xsltproc-opts=-nonet" />
            <arg value="--destination-dir=${out.dir}/sdk/doc" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </exec>
    </target>

    <target name="prepare-dec-api-files" description="Prepare resources to generate the documentation">
        <mkdir dir="${reports.dir}"/>
        <pathconvert targetos="unix" property="src.dir.unix">
            <path location="${src.dir}"/>
        </pathconvert>
        <pathconvert targetos="unix" property="out.dir.unix">
            <path location="${out.dir}"/>
        </pathconvert>
        <delete dir="${out.dir}/dec_api/definition"/>
        <mkdir dir="${out.dir}/dec_api"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value='find \"${src.dir.unix}/libraries/simulation_kernel\" -name \"*.cpp\" | xargs grep -e \"brain\\.Register(\" -e \"brain\\[.*=\" | grep -v \"\\.svn\" | grep -o \".*\.cpp\" | sort -u > ${out.dir.unix}/dec_api/dec_files.txt' />
        </exec>
        <exec executable="python">
            <arg value="decfilter.py"/>
            <arg value="${out.dir}/dec_api/dec_files.txt"/>
            <arg value="${src.dir}/libraries/simulation_kernel/"/>
            <arg value="${out.dir}/dec_api/definition"/>
        </exec>
        <copy file="./dec_api/sdk.dox" toDir="${out.dir}/dec_api/definition"/>
    </target>

    <target name="dec-api-documentation" description="generate SWORD DEC API documentation">
        <doxygen-report name="sword" input="${out.dir}/dec_api/definition" outdir="${out.dir}/sdk/dec">
            <property name="PROJECT_NAME" value="SWORD - DEC API Reference"/>
            <property name="PROJECT_NUMBER" value="${version.project}"/>
            <property name="FILE_PATTERNS" value='"*.h *.dox"'/>
            <property name="EXCLUDE" value='"*.svn*"'/>
            <property name="EXCLUDE_PATTERNS" value='"*/.svn/*"'/>
            <!-- <property name="FILTER_PATTERNS" value="*.cpp=decfilter.py"/> -->
            <!-- <property name="FILTER_PATTERNS" value="*.h=decfilter.py"/>-->
            <property name="ABBREVIATE_BRIEF" value="YES"/>
            <property name="JAVADOC_AUTOBRIEF" value="YES"/>
            <property name="EXTRACT_ALL" value="YES"/>
            <property name="INLINE_SOURCES" value="YES"/>
            <property name="SOURCE_BROWSER" value="YES"/>
            <property name="DISABLE_INDEX" value="NO"/>
            <property name="GENERATE_TAGFILE" value="${reports.dir}/doxygen_tag.log"/>
            <property name="COLLABORATION_GRAPH" value="NO"/>
            <!--
            <property name="GENERATE_DEPRECATEDLIST" value="NO"/>
            <property name="GENERATE_TODOLIST" value="NO"/>
            <property name="GENERATE_BUGLIST" value="NO"/>
            -->
            <property name="INTERNAL_DOCS" value="YES"/>
            <property name="SHOW_USED_FILES" value="YES"/>
            <property name="HIDE_UNDOC_MEMBERS" value="YES"/>
            <property name="SHOW_FILES" value="NO"/>
            <property name="SHOW_NAMESPACES" value="NO"/>
            <property name="BRIEF_MEMBER_DESC" value="NO"/>
            <property name="ENUM_VALUES_PER_LINE" value="1"/>
            <property name="WARNINGS" value="YES"/>
            <property name="ALIASES" value='""rule=@par Rule:\n" "index=@par Index:\n" "default=@par Default value:\n""'/>
            <property name="WARN_LOGFILE" value="${reports.dir}/doxygen_dec.log"/>
            <property name="GENERATE_HTMLHELP" value="YES"/>
            <property name="CHM_FILE" value="${dist.dir}/SWORD-DEC_API_Reference_${version.project}.chm"/>
            <!--
            <property name="EXAMPLE_PATH" value="${data.dir}\app-data\resources\schemas\${version.major}"/>
            <property name="EXAMPLE_RECURSIVE" value="YES"/>
            <property name="EXAMPLE_PATTERN" value="*.h *.cpp *.xsd"/>
            -->
        </doxygen-report>
        <fail message="documentation contains errors, see ${reports.dir}/doxygen_dec.log">
            <condition>
                <length file="${reports.dir}/doxygen_dec.log" when="greater" length="0"/>
            </condition>
        </fail>
        <htmlhelp input="${out.dir}/sdk/dec" outdir="${dist.dir}"/>
    </target>

    <target name="documentation" depends="proto-api-documentation, prepare-dec-api-files, dec-api-documentation"/>

    <!--
    ============================================================================
    package
    ============================================================================
    -->
    <target name="package" depends="package.app,package.debug,package.otpacks,package.wise-driver,package.ts,package.plugins,package.binaries,package.sdk" description="package the installers and packs"/>

    <!-- Package plugins -->
    <target name="package.plugins" depends="package.plugin.vrforces,package.plugin.hla,package.plugin.bml,package.plugin.dis,package.plugin.timeline,package.plugin.crossbow,package.plugin.edxlhave" description="package plugin individual installers"/>

    <target name="package.plugin.vrforces" description="create vrforces plugin installer" if="is-vc80">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-vrforces"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.hla" description="create hla plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-hla"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.bml" description="create bml plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-bml"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.dis" description="create dis plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-dis"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.timeline" description="create timeline plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-timeline"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.crossbow" description="create crossbow plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/DPLUGIN=plugin-crossbow"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <target name="package.plugin.edxlhave" description="create edxl plugin installer">
        <nsis name="sword-plugin" script="sword-plugin.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.minor}"/>
            <arg value="/DPLUGIN=plugin-edxlhave"/>
            <arg value="/DPLUGIN_VERSION=1.0"/>
        </nsis>
    </target>

    <!-- Package misc -->
    <target name="package.patch" description="create a patch installer">
        <nsis name="sword-patch" script="patchs/sword-patch.nsi" license="true">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/X!include sword-defense.nsh"/>
        </nsis>
    </target>

    <target name="package.debug" description="create a zip with all PDB files">
        <zip destfile="${dist.dir}/SWORD_debug_${platform}_${version.project}.zip">
            <mappedresources>
                <fileset dir="${out.dir}/release" includes="**/*.pdb"/>
                <flattenmapper/>
            </mappedresources>
        </zip>
    </target>

    <target name="package.binaries" description="create a zip with all binaries">
        <zip destfile="${dist.dir}/SWORD_binaries_${platform}_${version.project}.zip">
            <mappedresources>
                <fileset dir="${out.dir}/release/applications" includes="**/*.exe"/>
                <flattenmapper/>
            </mappedresources>
            <fileset dir="${run.dir}"/>
        </zip>
    </target>

    <target name="package.ts" description="create a zip with all ts files">
        <zip destfile="${dist.dir}/SWORD_ts_${version.project}.zip">
           <mappedresources>
               <fileset dir="${src.dir}" includes="**/*.ts"/>
               <flattenmapper/>
           </mappedresources>
        </zip>
    </target>

    <target name="package.wise-driver" depends="application.wise_driver_dll" description="package the wise driver installer" if="is-vc80">
        <nsis name="sword-wise_driver" script="sword-wise_driver.nsi">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
        </nsis>
    </target>

    <!-- Package Application -->
    <target name="package.app" description="package des applications runtime">
        <nsis name="sword" script="sword.nsi" nsh="config.nsh">
            <arg value="/DAPP_VERSION_MAJOR=${version.project.major}"/>
            <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
            <arg value="/X!include sword-defense.nsh"/>
        </nsis>
    </target>

    <!-- Package documentation/SDK -->
    <target name="package.sdk" description="package sdk documentation">
        <delete dir="${dist.dir}/sdk-${platform}" />
        <copy file="${out.dir}/sdk/doc/sdk.pdf"
            tofile="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}.pdf" />
        <copy todir="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}-html">
            <fileset dir="${out.dir}/sdk/doc/html" />
        </copy>
        <copy todir="${dist.dir}/sdk-${platform}/proto">
            <fileset dir="${src.dir}/libraries/protocol/proto">
                <include name="*.proto" />
            </fileset>
        </copy>
    </target>

    <!-- Package packs -->
    <macrodef name="pack">
        <attribute name="name"/>
        <attribute name="file" default="SWORD_@{name}_${version.project}.otpak"/>
        <attribute name="description"/>
        <element name="elements" implicit="yes"/>
        <sequential>
            <echoxml file="${out.dir}/content.xml">
                <content>
                    <name>@{name}</name>
                    <description>@{description}</description>
                    <version>${version.project.major}</version>
                </content>
            </echoxml>
            <zip destfile="${out.dir}/@{file}" filesonly="true">
                <elements/>
                <fileset dir="${out.dir}" includes="content.xml"/>
            </zip>
            <delete file="${out.dir}/content.xml"/>
            <concurrent seconds="60">
                <move file="${out.dir}/@{file}" todir="${dist.dir}" overwrite="false"/>
            </concurrent>
        </sequential>
    </macrodef>

    <target name="package.otpacks" depends="package.otpack.defense.worldwide,package.otpack.defense.worldwide.QA,
                                            package.otpack.defense.scipio,package.otpack.trainingML,package.otpack.decisional3,
                                            package.otpack.decisional45,package.otpack.decisionalww"
                                   description="package the exercise otpacks"/>

    <target name="package.otpack.defense.worldwide" description="package du defense-worldwide otpack">
        <pack name="defense-worldwide" description="defense-worldwide exercises package">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/physical/worldwide/**"/>
                <include name="data/terrains/Angers_x9_en/**"/>
                <include name="data/terrains/Sw_terrain2/**"/>
                <include name="data/terrains/afghan_kabuldist/**"/>
                <include name="data/terrains/Nord egypt/**"/>
                <include name="data/terrains/Paris_Est/**"/>
                <include name="data/terrains/Portoshima/**"/>
                <include name="data/propagations/Portoshima Plume 2/**"/>
            </zipfileset>
            <zipfileset dir="${data.dir}/exercises/worldwide" prefix="exercises">
                <include name="Egypt/**"/>
                <include name="Logistic_example/**"/>
                <include name="9_cases/**"/>
                <include name="Musoria Border Defense/**"/>
                <include name="Tuto_sw/**"/>
                <include name="Portoshima/**"/>
                <include name="LOSSC Scenario 1/**"/>
                <include name="LOSSC Scenario 2/**"/>
                <include name="LOSSC Scenario 3/**"/>
                <include name="tutorials/01 - Generalities/**"/>
                <include name="tutorials/02 - Gaming/**"/>
                <include name="tutorials/03 - Missions/**"/>
                <include name="tutorials/04 - Armor units/**"/>
                <include name="tutorials/05 - Infantry/**"/>
                <include name="tutorials/06 - Engineering/**"/>
                <include name="tutorials/07 - Artillery/**"/>
                <include name="tutorials/08 - Logistic/**"/>
                <include name="tutorials/09 - Air units/**"/>
                <include name="tutorials/10 - NBC/**"/>
                <include name="tutorials/11 - Preparation/**"/>
                <include name="tutorials/12 - AAR/**"/>
                <include name="tutorials/13 - Advanced features/**"/>
            </zipfileset>
        </pack>
    </target>
    <target name="package.otpack.defense.worldwide.QA" description="package du defense-worldwide otpack">
        <pack name="defense-worldwide-QA" description="defense-worldwide exercises package for QA">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/physical/worldwide/**"/>
                <include name="data/models/ada/physical/worldwide-ML/**"/>
                <include name="data/terrains/Nord egypt/**"/>
                <include name="data/terrains/Paris_Est/**"/>
                <include name="data/terrains/Angers_x9_en/**"/>
                <include name="data/terrains/Sw_terrain2/**"/>
                <include name="data/terrains/TerrainTest/**"/>
                <include name="data/models/ada/decisional/bms/**"/>
                <include name="data/models/ada/decisional/dia5/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/security_test/**"/>
                <include name="data/models/ada/decisional/decisional.xml"/>
            </zipfileset>
            <zipfileset dir="${data.dir}/exercises/worldwide" prefix="exercises">
                <include name="Egypt/**"/>
                <include name="Paris/**"/>
                <include name="9_cases/**"/>
                <include name="tests/Pathfind/**"/>
                <include name="tests/TestPlanExercise/**"/>
                <include name="tests/TestPlanExercise-ML/**"/>
            </zipfileset>
        </pack>
    </target>
    <target name="package.otpack.defense.scipio" description="package scipio otpack">
        <pack name="defense-scipio" description="defense-scipio referentiel sim">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/physical/scipio/**"/>
            </zipfileset>
        </pack>
    </target>

    <target name="package.otpack.trainingML" description="package de training MasaLife">
        <pack name="trainingML" description="package de training MasaLife">
            <zipfileset dir="${data.dir}">
                <include name="data/models/training/physical/worldwide/**"/>
                <include name="data/models/training/decisional/**"/>
                <include name="data/terrains/PortoV3Lite - worldwide/**"/>
                <include name="data/terrains/Nord egypt/**"/>
                <include name="data/terrains/Paris_Est/**"/>
            </zipfileset>
            <zipfileset dir="${data.dir}/exercises/worldwide" prefix="exercises">
                <include name="Training/**"/>
                <include name="Training Porto/**"/>
                <include name="MLTraining/**"/>
            </zipfileset>
        </pack>
    </target>

    <target name="package.otpack.decisional3" description="decisional package DIA3">
        <pack name="decisional3" description="decisional package DIA3">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/decisional/Sources/**"/>
                <include name="data/models/ada/decisional/decisional.xml"/>
            </zipfileset>
        </pack>
    </target>

    <target name="package.otpack.decisional45" description="decisional package DIA45">
        <pack name="decisional45" description="decisional package DIA4_5">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/decisional/bms/**"/>
                <include name="data/models/ada/decisional/dia5/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/security_test/**"/>
                <include name="data/models/ada/decisional/decisional.xml"/>
            </zipfileset>
        </pack>
    </target>

    <target name="package.otpack.decisionalww" description="decisional package Worldwide">
        <pack name="decisionalww" description="decisional package Worldwide">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/decisional/bms/**"/>
                <include name="data/models/ada/decisional/dia5/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/france/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/security_test/**"/>
                <include name="data/models/ada/decisional/decisional.xml"/>
            </zipfileset>
        </pack>
    </target>
    <target name="package.otpack.decisionalww_fullML" description="decisional package Worldwide Full ML">
        <pack name="decisionalww" description="decisional package Worldwide (full ML)">
            <zipfileset dir="${data.dir}">
                <include name="data/models/ada/physical/worldwide ML/**"/>
                <include name="data/models/ada/decisional/dia5/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/france/**"/>
                <exclude name="data/models/ada/decisional/dia5/models/security_test/**"/>
                <include name="data/models/ada/decisional/decisional.xml"/>
            </zipfileset>
        </pack>
    </target>

    <!--
    ============================================================================
    main
    ============================================================================
    -->
    <target name="configure" description="initialize local project structure with libraries">
        <update name="geometry"/>
        <update name="geocoord"/>
        <update name="terrain" modules="terrain,graphics,spatialcontainer,pathfind,analysis,vmap,geodata,gdal_ogr"/>
        <update name="terrain" package="terraintools_${platform}.zip"/>
        <update name="qt"/>
        <update name="boost"/>
        <update name="masalife/brain" version="${masalife.version}"/>
        <update name="masalife/brain" version="${masalife.version}" package="bmc" todir="${bin.dir}"/>
        <update name="masalife/brain" version="${masalife.version}" package="directia.core.bml" todir="${models.dir}/directia.core" />
        <update name="masalife/brain" version="${masalife.version}" package="net.masagroup.life.brain.ide-win32.win32.x86.zip" todir="${out.dir}"/>
        <update name="hla" package="include" todir="${include.dir}"/>
        <update name="hla" package="lib/${platform}" todir="${lib.dir}"/>
        <update name="hla" package="dll/${platform}" todir="${run.dir}/plugins/hla"/>
        <update name="hla" package="federation_app" todir="${bin.dir}"/>
        <update name="tools"/>
        <update name="log4cxx"/>
        <update name="flexlm"/>
        <update name="xerces-c"/>
        <update name="xeumeuleu"/>
        <update name="xalan-c"/>
        <update name="svgl"/>
        <update name="zlib"/>
        <update name="bugtrap"/>
        <update name="mongoose"/>
        <update name="gdal"/>
        <update name="turtle"/>
        <update name="protobuf" version="2.3.0"/>
        <update name="vcredist" package="vcredist"/>
        <update name="openssl"/>
        <update name="excel"/>
        <update name="mak" version="4.0.2" package="include" todir="${include.dir}"/>
        <update name="mak" version="4.0.2" package="lib/${platform}" todir="${lib.dir}"/>
        <update name="mak" version="4.0.2" package="dll/${platform}" todir="${run.dir}/plugins/vrforces"/>
        <update name="wise"/>
        <update name="spatialite"/>
        <update name="steel"/>
        <update name="geos"/>
        <update name="iconv"/>
        <update name="proj4"/>
        <update name="asciidoc" version="8.6.8"/>
        <antcall target="generate-database"/>
        <antcall target="generate-symbols"/>
    </target>

    <target name="clean" description="clean intermediate build artifacts">
        <delete dir="${out.dir}"/>
    </target>

    <target name="build" depends="libraries,applications,modules"/>

    <target name="all" depends="configure,build,test,documentation,package" description="build and package distribution"/>

</project>

<?xml version="1.0"?>
<project name="csword" default="all">

    <!-- Generate 3 months evaluation license -->
    <property name="flex.name" value="evaluation"/>
    <property name="flex.hostid" value="ANY"/>
    <tstamp>
        <format property="flex.expiration" pattern="d-MMM-yyyy" offset="3" unit="month" locale="en,US"/>
    </tstamp>

    <property environment="env"/>
    <property name="env.PONEY_HOME" value="//file1/masa/common/dev/common/poney"/>
    <import file="${env.PONEY_HOME}/poney.xml"/>

    <property name="version.project" value="trunk"/>
    <property name="version.major" value="5.2.0"/>
    <property name="svn.revision" value="0"/>    
    <property name="version.version" value="${version.major}.${svn.revision}"/>

    <!-- local extensions -->
    <import file="protobuf.xml" />

    <!-- generate random ports -->
    <math result="test.portnumber2">
        <op op="+" datatype="int">
            <num value="${test.portnumber}"/>
            <num value="1"/>
        </op>
    </math>

    <!--
    ============================================================================
    data
    ============================================================================
    -->
    <target name="deploy-application-data" description="deploy applications data to run directory">
        <copy todir="${run.dir}">
            <fileset dir="${data.dir}/app-data"/>
        </copy>
        <copy todir="${run.dir}/resources/locales">
            <fileset dir="${run.dir}" includes="qt_*.qm"/>
        </copy>
        <copy todir="${run.dir}/resources/scripts">
            <fileset dir="${libraries.dir}/script_plugin" includes="**/*.lua"/>
        </copy>
        <generate input="${data.dir}/app-data/resources/locales" excludes="license_*" extension="ts" target="${run.dir}/@{basename}.qm">
            <lrelease>
                <arg line='-verbose -qm "@{target}" "@{file}"'/>
            </lrelease>
        </generate>
    </target>

    <!--
    ============================================================================
    license
    ============================================================================
    -->
    <target name="generate-license" description="generate license files in run directory">
        <flexlm name="sword" feature="sword" vendor="bkmasa"/>
        <flexlm name="sword-gaming" feature="sword-gaming" vendor="bkmasa"/>
        <flexlm name="sword-dispatcher" feature="sword-dispatcher" vendor="bkmasa"
            extension="VENDOR_STRING=2"/>
        <flexlm name="sword-authoring" feature="sword-authoring" vendor="bkmasa"/>
        <flexlm name="sword-preparation" feature="sword-preparation" vendor="bkmasa"/>
        <flexlm name="sword-workshop" feature="sword-workshop" vendor="bkmasa"/>
        <flexlm name="sword-terrain-generation" feature="sword-terrain-generation" vendor="bkmasa"/>
        <flexlm name="sword-runtime" feature="sword-runtime" vendor="bkmasa"/>
        <flexlm name="sword-replayer" feature="sword-replayer" vendor="bkmasa"/>
        <flexlm name="brain.tools" feature="brain.tools" vendor="bkmasa"/>
        <!-- Since the applications are not being installed on the build servers,
             Flex has no way to guess the license files should be picked from
             the run directory, and even if it happens it is apparently after
             resolving others from the Registry. "license.dat" is the default
             license path defined in license_gui & co, so try our chance with
             this one first.
        -->
        <concat destfile="${run.dir}/license.dat" overwrite="true">
            <fileset dir="${run.dir}" includes="*.lic"/>
        </concat>
    </target>

    <!--
    ============================================================================
    tests
    ============================================================================
    -->
    <macrodef name="run-one-simulation">
        <attribute name="exercise"/>
        <attribute name="legacy" default="false"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <exec taskname="sim" executable="${out.dir}/release/applications/simulation_app/simulation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="--legacy=@{legacy}"/>
                <arg value="--root-dir=${data.dir}"/>
                <arg value="--exercise=@{exercise}"/>
                <arg value="--session=@{session}"/>
                <arg value="--simulation-address=${test.portnumber}"/>
                <arg value="--dispatcher-address=${test.portnumber2}"/>
                <arg value="--test"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="run-simulation">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <element name="args" implicit="true" optional="true"/>
        <sequential>
            <run-one-simulation exercise="@{exercise}" session="@{session}" legacy="true">
                <args/>
            </run-one-simulation>
            <run-one-simulation exercise="@{exercise}" session="@{session}">
                <args/>
            </run-one-simulation>
        </sequential>
    </macrodef>

   <macrodef name="save-load-checkpoint">
        <attribute name="exercise"/>
        <attribute name="legacy" default="false"/>
        <attribute name="session" default="default"/>
        <attribute name="checkpoint" default="tempcheckpoint"/>
        <sequential>
            <echo taskname="save-checkpoint" message='simulation_app --test --savecheckpoint=@{checkpoint} --legacy=@{legacy} --exercise="@{exercise}" --session=@{session} --root-dir="${data.dir}"'/>
            <run-one-simulation exercise="@{exercise}" legacy="@{legacy}">
                <arg value="--savecheckpoint=@{checkpoint}"/>
            </run-one-simulation>
            <echo taskname="load-checkpoint" message='simulation_app --test --checkpoint=@{checkpoint} --legacy=@{legacy} --exercise="@{exercise}" --session=@{session} --root-dir="${data.dir}"'/>
            <run-one-simulation exercise="scipio/CheckpointTests" legacy="@{legacy}">
                <arg value="--checkpoint=@{checkpoint}"/>
            </run-one-simulation>
            <delete dir="${data.dir}/exercises/@{exercise}/checkpoints/@{checkpoint}"/>
        </sequential>
    </macrodef>

    <target name="checkpoint_test" description="save and load a checkpoint">
        <save-load-checkpoint exercise="scipio/CheckpointTests" legacy="true"/>
        <save-load-checkpoint exercise="scipio/CheckpointTests"/>
        <save-load-checkpoint exercise="tests/CheckpointTests"/>
    </target>

    <macrodef name="test-scripts">
        <attribute name="dataset"/>
        <attribute name="physical"/>
        <attribute name="exercise" default="scripts_test"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <delete dir="${data.dir}/exercises/@{exercise}"/>
            <copy todir="${data.dir}/exercises/@{exercise}" overwrite="true">
                <fileset dir="${data.dir}/tests/@{exercise}" includes="**/*.xml"/>
                <filterset>
                    <filter token="DATASET" value="@{dataset}"/>
                    <filter token="PHYSICAL" value="@{physical}"/>
                </filterset>
            </copy>
            <run-simulation exercise="@{exercise}" session="test-session"/>
            <delete dir="${data.dir}/exercises/@{exercise}"/>
        </sequential>
    </macrodef>

    <target name="scripts_test" description="run all script tests">
        <test-scripts dataset="ada" physical="scipio"/>
        <test-scripts dataset="ada" physical="worldwide"/>
    </target>

    <macrodef name="run-adaptation">
        <attribute name="input"/>
        <attribute name="output"/>
        <sequential>
            <exec taskname="adn" executable="${out.dir}/release/applications/adaptation_app/adaptation_app.exe" dir="${run.dir}" failonerror="true" timeout="600000">
                <arg value="-i"/>
                <arg value="@{input}/physical.xml"/>
                <arg value="-o"/>
                <arg value="@{output}/physical.xml"/>
                <arg value="--silent"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="test-adaptation">
        <attribute name="input"/>
        <sequential>
            <echo>Testing models: @{input}</echo>
            <!-- HTML files are not versioned, there is no easy way to test for 
                 non-regressions, this is someone else job.
            -->
            <local name="excluded"/>
            <property name="excluded" value="*/Mission sheets/*.html"/>
            <delete dir="${out.dir}/test-adaptation"/>
            <tempfile property="@{input}.temp" destdir="${out.dir}" deleteonexit="true"/>
            <python taskname="checksum" output="${@{input}.temp}" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="--exclude=${excluded}"/>
                <arg value="@{input}"/>
            </python>
            <run-adaptation input="@{input}" output="${out.dir}/test-adaptation"/>
            <python taskname="checksum" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="--exclude=${excluded}"/>
                <arg value="@{input}"/>
                <arg value="--check"/>
                <arg value="${@{input}.temp}"/>
            </python>
            <python taskname="checksum" failonerror="true">
                <arg value="checksum.py"/>
                <arg value="--exclude=${excluded}"/>
                <arg value="${out.dir}/test-adaptation"/>
                <arg value="--check"/>
                <arg value="${@{input}.temp}"/>
            </python>
            <delete dir="${out.dir}/test-adaptation"/>
        </sequential>
    </macrodef>

    <target name="adaptation_test" description="load and save adaptation main data then check that output is the same as input">
        <test-adaptation input="${data.dir}/data/models/ada/physical/scipio"/>
        <test-adaptation input="${data.dir}/data/models/ada/physical/worldwide"/>
    </target>

    <macrodef name="test-exercise">
        <attribute name="exercise"/>
        <attribute name="session" default="default"/>
        <attribute name="simulation" default="simulation_app"/>
        <sequential>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/exercise.xsd" file="../data/exercises/@{exercise}/exercise.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/orbat.xsd" file="../data/exercises/@{exercise}/orbat.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/profiles.xsd" file="../data/exercises/@{exercise}/profiles.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/weather.xsd" file="../data/exercises/@{exercise}/weather.xml" failonerror="true" warn="true"/>
            <schemavalidate nonamespacefile="${run.dir}/resources/schemas/${version.major}/exercise/session.xsd" file="../data/exercises/@{exercise}/sessions/@{session}/session.xml" failonerror="true" warn="true"/>
            <run-simulation exercise="@{exercise}" session="@{session}"/>
        </sequential>
    </macrodef>

    <target name="exercises_test" description="validates some significant exercises">
        <test-exercise exercise="worldwide/Egypt"/>
        <test-exercise exercise="scipio/Poseidon VA"/>
    </target>

    <macrodef name="test-data-migration">
        <attribute name="exercise"/>
        <attribute name="old-version"/>
        <attribute name="session" default="default"/>
        <attribute name="temporary-name" default="test-data-migration"/>
        <sequential>
            <echo>Testing automatic migration from version @{old-version} using exercise '@{exercise}'</echo>
            <!-- Copy physical database -->
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/data/models/ada/physical/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/physical"/>
            </copy>
            <!-- ADN -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <run-adaptation input="${data.dir}/data/models/ada/physical/@{temporary-name}" output="${out.dir}/@{temporary-name}"/>
            <!-- Copy exercise -->
            <delete dir="${data.dir}/exercises/@{temporary-name}" failonerror="false"/>
            <copy todir="${data.dir}/exercises/@{temporary-name}">
                <fileset dir="../data/tests/test_data_migration/@{old-version}/exercises/@{exercise}"/>
                <filterset>
                    <filter token="DATASET" value="ada"/>
                    <filter token="PHYSICAL" value="@{temporary-name}"/>
                </filterset>
            </copy>
            <!-- SIM -->
            <run-simulation exercise="@{temporary-name}" session="@{session}"/>
            <!-- cleanup -->
            <delete dir="${out.dir}/@{temporary-name}"/>
            <delete dir="${data.dir}/data/models/ada/physical/@{temporary-name}"/>
            <delete dir="${data.dir}/exercises/@{temporary-name}"/>
        </sequential>
    </macrodef>

    <target name="data_migrations_test">
        <test-data-migration old-version="3.0" exercise="CabourgOld"/>
        <test-data-migration old-version="4.2.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.1" exercise="Cabourg"/>
        <test-data-migration old-version="4.2.2" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.0" exercise="Cabourg"/>
        <test-data-migration old-version="4.3.4embraer" exercise="Egypt"/>
        <test-data-migration old-version="4.3.0cae" exercise="Paris"/>
        <test-data-migration old-version="5.0.0" exercise="Egypt"/>
    </target>

    <macrodef name="check-gui">
        <attribute name="app"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <python taskname="@{app}" failonerror="true">
                <arg value="checkgui.py"/>
                <arg value="--run_dir"/>
                <arg value="${run.dir}"/>
                <arg value="${out.dir}/release/applications/@{app}/@{app}.exe"/>
                <elements/>
            </python>
        </sequential>
    </macrodef>

    <macrodef name="check-app">
        <attribute name="app"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <exec taskname="@{app}" executable="${out.dir}/release/applications/@{app}/@{app}.exe"
                  dir="${run.dir}" failonerror="true">
                <elements/>
            </exec>
        </sequential>
    </macrodef>

    <target name="app_test" description="check whether gui applications start properly">
        <check-gui app="adaptation_app"/>
        <check-gui app="preparation_app"/>
        <check-gui app="selftraining_app">
            <arg value="--launcher-port=${test.portnumber}"/>
            <arg value="--dispatcher-port=${test.portnumber2}"/>
            <arg value="--test"/>
        </check-gui>
        <check-gui app="gaming_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
        </check-gui>
        <check-app app="dispatcher_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-address=${test.portnumber}"/>
            <arg value="--test"/>
        </check-app>
        <check-app app="launcher_app">
            <arg value="--test"/>
        </check-app>
        <check-app app="launcher_test_app">
            <arg value="--test"/>
        </check-app>
        <check-app app="replayer_app">
            <arg value="--root-dir=../../data"/>
            <arg value="--exercise=worldwide/Egypt"/>
            <arg value="--session=default"/>
            <arg value="--dispatcher-address=${test.portnumber}"/>
            <arg value="--test"/>
        </check-app>
    </target>

    <!--
    ============================================================================
    documentation
    ============================================================================
    -->

    <target name="proto-api-documentation"
        description="generate SDK documentation">
        <mkdir dir="${out.dir}/sdk/doc/html"/>
        <python taskname="python" failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/asciidoc.py" />
            <arg value="--out-file=${out.dir}/sdk/doc/html/index.html" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </python>
        <python failonerror="true">
            <arg value="${bin.dir}/asciidoc/asciidoc/a2x.py" />
            <arg value="--format=pdf" />
            <arg value="--fop" />
            <!-- Linting needs the DTD, DTD are usually resolved relatively to
                 the input file location, this is a pain to deal with, just
                 forget it, asciidoc should generate valid docbook anyway. -->
            <arg value="--no-xmllint" />
            <arg value="--xsltproc-opts=-nonet" />
            <arg value="--destination-dir=${out.dir}/sdk/doc" />
            <arg value="${libraries.dir}/protocol/doc/sdk.txt" />
        </python>
    </target>

    <target name="prepare-dec-api-files" description="Prepare resources to generate the documentation">
        <mkdir dir="${reports.dir}"/>
        <pathconvert targetos="unix" property="src.dir.unix">
            <path location="${src.dir}"/>
        </pathconvert>
        <pathconvert targetos="unix" property="out.dir.unix">
            <path location="${out.dir}"/>
        </pathconvert>
        <delete dir="${out.dir}/dec_api/definition"/>
        <mkdir dir="${out.dir}/dec_api"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value='find \"${src.dir.unix}/libraries/simulation_kernel\" -name \"*.cpp\" | xargs grep -e \"brain\\.Register(\" -e \"brain\\[.*=\" | grep -v \"\\.svn\" | grep -o \".*\.cpp\" | sort -u > ${out.dir.unix}/dec_api/dec_files.txt' />
        </exec>
        <python failonerror="true">
            <arg value="decfilter.py"/>
            <arg value="${out.dir}/dec_api/dec_files.txt"/>
            <arg value="${src.dir}/libraries/simulation_kernel/"/>
            <arg value="${out.dir}/dec_api/definition"/>
        </python>
        <copy file="./dec_api/sdk.dox" toDir="${out.dir}/dec_api/definition"/>
    </target>

    <target name="dec-api-documentation" description="generate SWORD DEC API documentation">
        <doxygen-report name="sword" input="${out.dir}/dec_api/definition" outdir="${out.dir}/sdk/dec">
            <property name="PROJECT_NAME" value="SWORD - DEC API Reference"/>
            <property name="PROJECT_NUMBER" value="${version.project}"/>
            <property name="FILE_PATTERNS" value='"*.h *.dox"'/>
            <property name="EXCLUDE" value='"*.svn*"'/>
            <property name="EXCLUDE_PATTERNS" value='"*/.svn/*"'/>
            <!-- <property name="FILTER_PATTERNS" value="*.cpp=decfilter.py"/> -->
            <!-- <property name="FILTER_PATTERNS" value="*.h=decfilter.py"/>-->
            <property name="ABBREVIATE_BRIEF" value="YES"/>
            <property name="JAVADOC_AUTOBRIEF" value="YES"/>
            <property name="EXTRACT_ALL" value="YES"/>
            <property name="INLINE_SOURCES" value="YES"/>
            <property name="SOURCE_BROWSER" value="YES"/>
            <property name="DISABLE_INDEX" value="NO"/>
            <property name="GENERATE_TAGFILE" value="${reports.dir}/doxygen_tag.log"/>
            <property name="COLLABORATION_GRAPH" value="NO"/>
            <!--
            <property name="GENERATE_DEPRECATEDLIST" value="NO"/>
            <property name="GENERATE_TODOLIST" value="NO"/>
            <property name="GENERATE_BUGLIST" value="NO"/>
            -->
            <property name="INTERNAL_DOCS" value="YES"/>
            <property name="SHOW_USED_FILES" value="YES"/>
            <property name="HIDE_UNDOC_MEMBERS" value="YES"/>
            <property name="SHOW_FILES" value="NO"/>
            <property name="SHOW_NAMESPACES" value="NO"/>
            <property name="BRIEF_MEMBER_DESC" value="NO"/>
            <property name="ENUM_VALUES_PER_LINE" value="1"/>
            <property name="WARNINGS" value="YES"/>
            <property name="ALIASES" value='""rule=@par Rule:\n" "index=@par Index:\n" "default=@par Default value:\n""'/>
            <property name="WARN_LOGFILE" value="${reports.dir}/doxygen_dec.log"/>
            <property name="GENERATE_HTMLHELP" value="YES"/>
            <property name="CHM_FILE" value="${dist.dir}/SWORD-DEC_API_Reference_${version.project}.chm"/>
            <!--
            <property name="EXAMPLE_PATH" value="${data.dir}\app-data\resources\schemas\${version.major}"/>
            <property name="EXAMPLE_RECURSIVE" value="YES"/>
            <property name="EXAMPLE_PATTERN" value="*.h *.cpp *.xsd"/>
            -->
        </doxygen-report>
        <fail message="documentation contains errors, see ${reports.dir}/doxygen_dec.log">
            <condition>
                <length file="${reports.dir}/doxygen_dec.log" when="greater" length="0"/>
            </condition>
        </fail>
        <htmlhelp input="${out.dir}/sdk/dec" outdir="${dist.dir}"/>
    </target>

    <target name="documentation" depends="proto-api-documentation, prepare-dec-api-files, dec-api-documentation"/>

    <!--
    ============================================================================
    package
    ============================================================================
    -->
    <target name="package" depends="package.app,package.debug,package.ts,package.plugins,package.binaries,package.gaming_app,package.sdk,package.proto" description="package the installers and packs"/>

    <!-- Package plugins -->
    <target name="package.plugins" depends="package.plugin.hla,package.plugin.dis,package.plugin.timeline" description="package plugin individual installers"/>

    <macrodef name="package-plugin">
        <attribute name="name"/>
        <sequential>
            <safe-move file="${out.dir}/SWORD_plugin-@{name}_${platform}_${version.project}.exe">
                <nsis name="sword-plugin" script="sword-plugin.nsi" license="true" todir="${out.dir}">
                    <arg value="/DAPP_VERSION_MAJOR=${version.project}"/>
                    <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
                    <arg value="/DPLUGIN=plugin-@{name}"/>
                    <arg value="/DPLUGIN_VERSION=1.0"/>
                    <arg value="/DOUTFILE=@{file}"/>
                </nsis>
            </safe-move>
        </sequential>
    </macrodef>

    <target name="package.plugin.hla" description="create hla plugin installer">
        <package-plugin name="hla"/>
    </target>

    <target name="package.plugin.dis" description="create dis plugin installer">
        <package-plugin name="dis"/>
    </target>

    <target name="package.plugin.timeline" description="create timeline plugin installer">
        <package-plugin name="timeline"/>
    </target>

    <!-- Package misc -->
    <target name="package.debug" description="create a zip with all PDB files">
        <safe-move file="${out.dir}/SWORD_debug_${platform}_${version.project}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <mappedresources>
                    <fileset dir="${out.dir}/release/applications" includes="**/*.pdb"/>
                    <flattenmapper/>
                </mappedresources>
                <mappedresources>
                    <fileset dir="${out.dir}/release/libraries" includes="**/*_dll/*.pdb"/>
                    <flattenmapper/>
                </mappedresources>
             </zip>
        </safe-move>
    </target>

    <target name="package.proto" description="package protobuf for other projects">
        <safe-move file="${out.dir}/protobuf-dev.zip">
            <zip destfile="@{file}" duplicate="fail">
                <fileset dir="${src.dir}/libraries/protocol/proto" includes="*.proto"/>
            </zip>
        </safe-move>
    </target>

    <macrodef name="check-depends">
        <attribute name="file"/>
        <element name="elements" optional="true" implicit="true"/>
        <sequential>
            <python taskname="depends" failonerror="true">
                <env key="PATH" path="${env.PATH}:${bin.dir}/7z:${bin.dir}/depends"/>
                <arg value="${bin.dir}/buildtools/checkdepends.py"/>
                <arg value="@{file}"/>
                <elements/>
            </python>
        </sequential>
    </macrodef>

    <target name="package.binaries" description="create a zip with all binaries">
        <safe-move file="${out.dir}/SWORD_binaries_${platform}_${version.project}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <mappedresources>
                    <fileset dir="${out.dir}/release/applications" includes="**/*.exe"/>
                    <flattenmapper/>
                </mappedresources>
                <fileset dir="${run.dir}" excludes="Debug/**"/>
            </zip>
            <check-depends file="@{file}"/>
        </safe-move>
    </target>

    <target name="package.gaming_app" description="create a zip with a standalone gaming_app binary">
        <safe-move file="${out.dir}/SWORD_gaming_${platform}_${version.project}.zip">
            <zip destfile="@{file}" duplicate="fail">
                <fileset dir="${out.dir}/release/applications/gaming_app" includes="gaming_app.exe"/>
                <fileset dir="${run.dir}"
                         includes="*.qm,
                                   *.qss,
                                   *.xml,
                                   BugTrap*.dll,
                                   gdal19.dll,
                                   geos.dll,
                                   geos_c.dll,
                                   libeay32.dll,
                                   libexpat.dll,
                                   libiconv-2.dll,
                                   libpq.dll,
                                   phonon4.dll,
                                   proj.dll,
                                   Qt3Support4.dll,
                                   QtCore4.dll,
                                   QtGui4.dll,
                                   QtNetwork4.dll,
                                   QtOpenGL4.dll,
                                   QtSql4.dll,
                                   QtWebKit4.dll,
                                   QtXml4.dll,
                                   spatialite.dll,
                                   ssleay32.dll,
                                   Xalan-C_1_11.dll,
                                   XalanMessages_1_11.dll,
                                   xerces-c_3_1.dll,
                                   zlib1.dll"/>
                <fileset dir="${run.dir}" includes="resources/**"/>
            </zip>
            <check-depends file="@{file}"/>
        </safe-move>
    </target>

    <target name="package.ts" description="create a zip with all ts files">
        <safe-move file="${out.dir}/SWORD_ts_${version.project}.zip">
            <zip destfile="@{file}" duplicate="fail">
               <mappedresources>
                   <fileset dir="${src.dir}" includes="**/*.ts"/>
                   <flattenmapper/>
               </mappedresources>
               <mappedresources>
                   <fileset dir="${data.dir}/app-data/resources/locales" includes="**/*.ts" excludes="license_*"/>
                   <flattenmapper/>
               </mappedresources>
            </zip>
        </safe-move>
    </target>

     <!-- Package Application -->
    <target name="package.app" description="package des applications runtime">
        <check-depends file="${out.dir}/terraintools_${platform}.zip"/>
        <safe-move file="${out.dir}/SWORD_${platform}_${version.project}.exe">
            <nsis name="sword" script="sword.nsi" nsh="config.nsh" todir="${out.dir}">
                <arg value="/DAPP_VERSION_MAJOR=${version.project}"/>
                <arg value="/DAPP_VERSION_MINOR=${version.version}"/>
                <arg value="/DOUTFILE=@{file}"/>
                <arg value="/X!include sword.nsh"/>
            </nsis>
            <check-depends file="@{file}">
                <arg value="*.exe"/>
                <arg value="*_module.dll"/>
            </check-depends>
        </safe-move>
    </target>

    <!-- Package documentation/SDK -->
    <target name="package.sdk" description="package sdk documentation">
        <delete dir="${dist.dir}/sdk-${platform}" />
        <copy file="${out.dir}/sdk/doc/sdk.pdf"
            tofile="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}.pdf" />
        <copy todir="${dist.dir}/sdk-${platform}/SWORD_API_Reference_${version.project}-html">
            <fileset dir="${out.dir}/sdk/doc/html" />
        </copy>
        <copy todir="${dist.dir}/sdk-${platform}/proto">
            <fileset dir="${src.dir}/libraries/protocol/proto" includes="*.proto"/>
        </copy>
    </target>

    <!--
    ============================================================================
    various project/source checks
    ============================================================================
    -->
    <target name="checkproject" description="check project configuration">
        <python failonerror="true">
            <arg value="${bin.dir}/buildtools/checkproject.py"/>
            <arg value="${root.dir}"/>
            <arg value="${root.dir}/build/vc100/sword.sln"/>
            <arg value="--exclude=module_tester"/>
            <arg value="--toolchain=cmake"/>
            <arg value="--optional-target=*cmake.msvc"/>
        </python>
    </target>

    <target name="checkreports" description="check simulation reports">
        <python failonerror="true">
            <arg value="${root.dir}/build/checkreports.py"/>
            <arg value="check"/>
            <arg value="${root.dir}"/>
            <arg value="${root.dir}/data/data/models/reports.txt"/>
        </python>
    </target>

    <target name="checkdec" description="check models knows about our DEC functions">
        <python failonerror="true">
            <arg value="${root.dir}/build/listdec.py"/>
            <arg value="check"/>
            <arg value="${data.dir}/data/models/decfunctions.txt"/>
            <arg value="${src.dir}/libraries/simulation_kernel"/>
        </python>
    </target>

    <target name="checkproto" description="check protobuf definitions">
        <python failonerror="true">
            <arg value="${bin.dir}/protolint/protolint.py"/>
            <arg value="style"/>
            <arg value="${src.dir}/libraries/protocol/proto"/>
        </python>
        <python failonerror="true">
            <arg value="${bin.dir}/protolint/protolint.py"/>
            <arg value="compare"/>
            <!-- The RulesOfEngagement enumeration was changed since 5.1.x,
                 a none=0 was removed and all other values shifted. We think
                 this change is acceptable since this feature was unlikely to
                 be used by clients and this is only a notification, not a
                 parameter.
            -->
            <arg value="--exclude=SimToClient.Content.UnitAttributes.RulesOfEngagement.Value"/>
            <arg value="--exclude=SimToClient.Content.AutomatAttributes.RulesOfEngagement.Value"/>
            <arg value="${bin.dir}/protolint/proto/proto-5.1.x"/>
            <arg value="${src.dir}/libraries/protocol/proto"/>
        </python>
    </target>

    <target name="check" depends="checkproject,checkreports,checkdec,checkproto"
        description="perform various static checks on codebase"/>
    <!--
    ============================================================================
    main
    ============================================================================
    -->
    <target name="update" description="update package dependencies">
        <update name="7z"/>
        <update name="asciidoc" version="8.6.8"/>
        <update name="boost"/>
        <update name="bugtrap"/>
        <update name="buildtools"/>
        <update name="cmake"/>
        <update name="depends"/>
        <update name="excel"/>
        <update name="flexlm"/>
        <update name="gdal"/>
        <update name="geocoord"/>
        <update name="geometry"/>
        <update name="geos"/>
        <update name="glew"/>
        <update name="hla" package="dll/${platform}" todir="${run.dir}/plugins/hla"/>
        <update name="hla" package="federation_app" todir="${bin.dir}"/>
        <update name="hla" package="include" todir="${include.dir}"/>
        <update name="hla" package="lib/${platform}" todir="${lib.dir}"/>
        <update name="iconv"/>
        <update name="log4cxx"/>
        <update name="masalife/ide" package="net.masagroup.life.brain.ide-win32.win32.x86.zip" todir="${out.dir}"/>
        <update name="masalife/brain"/>
        <update name="models" package="decisional-dev" todir="${data.dir}/data/models"/>
        <update name="models" package="exercises-dev" todir="${data.dir}/exercises"/>
        <update name="models" package="propagations-dev" todir="${data.dir}/data/propagations"/>
        <update name="models" package="terrains-dev" todir="${data.dir}/data/terrains"/>
        <update name="mongoose"/>
        <update name="openssl"/>
        <update name="proj4"/>
        <update name="protobuf"/>
        <update name="python"/>
        <update name="qt"/>
        <update name="spatialite"/>
        <update name="sqlite"/>
        <update name="steel"/>
        <update name="svgl"/>
        <update name="sword-proto" package="sword-protobuf" todir="${bin.dir}"/>
        <update name="sword/testdata" package="testdata" todir="${data.dir}/tests"/>
        <update name="terrain"/>
        <update name="terrain" package="terraintools_${platform}.zip"/>
        <update name="tools"/>
        <update name="turtle"/>
        <update name="vcredist" package="vcredist"/>
        <update name="xalan-c"/>
        <update name="xerces-c"/>
        <update name="xeumeuleu"/>
        <update name="zlib"/>
    </target>

    <target name="configure" depends="update,deploy-application-data,generate-license" description="update packages and decisional"/>

    <target name="clean" description="clean intermediate build artifacts">
        <delete dir="${out.dir}"/>
    </target>

    <target name="cmake.msvc" description="generate visual studio project files">
        <cmake_msvc input="${root.dir}/build"
            version="${version.version}"/>
        <python taskname="fixmsvc" failonerror="true">
            <arg value="fixmsvc.py"/>
            <arg value="${out.dir}/msvc"/>
        </python>
    </target>

    <target name="cmake.configure" description="generate cmake build files">
        <cmake_configure input="${root.dir}/build"
            configuration="release"
            version="${version.version}"/>
    </target>

    <target name="build" description="build everything">
        <cmake_build/>
    </target>

    <target name="unit_test" description="build and run unit tests">
        <cmake_test/>
    </target>

    <target name="test" depends="unit_test
        ,adaptation_test
        ,app_test
        ,checkpoint_test
        ,data_migrations_test
        ,exercises_test
        ,scripts_test
        " description="build and run all tests"/>

    <target name="all" depends="configure,check,cmake.configure,build,test,documentation,package"/>

</project>

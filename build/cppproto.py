# Simple wrapper around protoc to avoid updating generated files when
# the are unchanged.
import os, sys, subprocess, tempfile, shutil

class Ui:
    def write(self, s):
        sys.stdout.write(s)

    def error(self, s):
        sys.stderr.write(s)

def protoc(protopath, outdir):
    protocexe = os.path.join(os.path.dirname(__file__),
            '../bin/protoc')
    protocexe = os.path.abspath(protocexe)
    # protoc behaviour is a bit complicated wrt input paths:
    #   $ protoc foo/bar/blaz.proto  --cpp_out=out
    # generates:
    #   out/foo/bar/blaz.h
    # Here, we switch the cwd directory to the .proto directory
    # to have a better control on the outputs.
    cwd = os.path.dirname(os.path.abspath(protopath))
    cmd = [
        protocexe,
        '--cpp_out=%s' % os.path.relpath(outdir, cwd),
        os.path.basename(protopath),
        ]
    subprocess.check_call(cmd, cwd=cwd)

def copyifchanged(ui, src, dst):
    changed = True
    if os.path.exists(dst):
        # Be stupid, these are .cpp files, not huge binary assets
        srcdata = file(src, 'rb').read()
        dstdata = file(dst, 'rb').read()
        changed = srcdata != dstdata
    srcname = os.path.basename(src)
    if changed:
        ui.write('updating %s\n' % srcname)
        dstdir = os.path.dirname(dst)
        if not os.path.exists(dstdir):
            os.makedirs(dstdir)
        shutil.copyfile(src, dst)
    else:
        ui.write('skipping unchanged %s\n' % srcname)

def usage(ui):
    w = ui.write
    w('cppproto.py PROTOFILE BUILDDIR OUTDIR\n')
    s = """\

cppproto calls protoc on PROTOFILE and output in a temporary subdirectory of
BUILDDIR, then copy the generated files into OUTDIR if new or changed.
"""
    w(s)

if __name__ == '__main__':
    ui = Ui()
    args = sys.argv[1:]
    if len(args) != 3:
        ui.error('cppproto: 3 arguments expected\n\n')
        usage(ui)
        sys.exit(1)

    protopath, builddir, outdir = args
    if not os.path.exists(builddir):
        os.makedirs(builddir)

    # Generate the .h/.cpp in a temporary directory
    tmpdir = tempfile.mkdtemp(prefix='proto-', dir=builddir)
    try:
        protoc(protopath, tmpdir)

        # All files in tmpdir were generated by protoc, copy them
        # to the output dir if they are not there already or if they
        # changed. Preserve path components.
        if not os.path.exists(outdir):
            os.makedirs(outdir)
        absroot = os.path.abspath(tmpdir)
        for root, dirs, files in os.walk(tmpdir):
            for f in files:
                abssrc = os.path.abspath(os.path.join(root, f))
                relsrc = abssrc[len(absroot) + 1:]
                absdst = os.path.abspath(os.path.join(outdir, relsrc))
                copyifchanged(ui, abssrc, absdst)
    finally:
        shutil.rmtree(tmpdir)


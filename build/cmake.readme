How to use cmake:

There are five targets under ant

* ant cmake.update
    This command updates the repository with its required dependencies.

* ant cmake.configure
    This command configures out/${platform}/build for use with command-line.
    Note that this command only creates a release configuration

* ant cmake.build
    This command builds the sword repository. It uses a command-line Ninja
    makefile. Be patient the first time you run it as they are 3764 files to
    compile at the time of writing this readme. However, incremental builds
    should be faster than with visual.

* ant cmake.msvc
    This command configures out/${platform}/msvc for use with Visual Studio.
    This directory contains various projects and one sword solution.
    Note that all those files are automatically generated, so if you modify
    them, keep in mind that all your modifications may disappear if you
    configure it again.

* ant cmake.test
    Run all sword tests and prints out results or errors in case of failures

All generated makefiles or msvc solutions are put into out/${platform} which
means they are platform dependent. So there is no single visual studio solution
which contains both 32 and 64-bit configurations.

Caveats of current solution :

* Qt translations give different results from current configuration
* Qt translations force recompilation of all linked source files
* A command-line popup appears with Qt applications
* You need to close visual studio, run ant cmake.msvc when adding a file
* Library/Binary names, while consistent may not be exactly the same as current
  configuration
* Most version defines are not present

Most of those deficiencies will be fixed as time permits

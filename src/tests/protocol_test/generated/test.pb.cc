// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace {

const ::google::protobuf::Descriptor* MsgPion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPion_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimpleTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositeStringTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeStringTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompositeIntegerTest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompositeIntegerTest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZeroField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZeroField_reflection_ = NULL;
const ::google::protobuf::Descriptor* Composite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Composite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Extendable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Extendable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_test_2eproto() {
  protobuf_AddDesc_test_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "test.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPion_descriptor_ = file->message_type(0);
  static const int MsgPion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, email_),
  };
  MsgPion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPion_descriptor_,
      MsgPion::default_instance_,
      MsgPion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPion, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPion));
  EmptyMessage_descriptor_ = file->message_type(1);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  SimpleTest_descriptor_ = file->message_type(2);
  static const int SimpleTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTest, name_),
  };
  SimpleTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleTest_descriptor_,
      SimpleTest::default_instance_,
      SimpleTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleTest));
  CompositeStringTest_descriptor_ = file->message_type(3);
  static const int CompositeStringTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeStringTest, test_),
  };
  CompositeStringTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeStringTest_descriptor_,
      CompositeStringTest::default_instance_,
      CompositeStringTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeStringTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeStringTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeStringTest));
  CompositeIntegerTest_descriptor_ = file->message_type(4);
  static const int CompositeIntegerTest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeIntegerTest, test_),
  };
  CompositeIntegerTest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompositeIntegerTest_descriptor_,
      CompositeIntegerTest::default_instance_,
      CompositeIntegerTest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeIntegerTest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompositeIntegerTest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompositeIntegerTest));
  ZeroField_descriptor_ = file->message_type(5);
  static const int ZeroField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroField, value_),
  };
  ZeroField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZeroField_descriptor_,
      ZeroField::default_instance_,
      ZeroField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZeroField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZeroField));
  Composite_descriptor_ = file->message_type(6);
  static const int Composite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Composite, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Composite, simple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Composite, zero_),
  };
  Composite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Composite_descriptor_,
      Composite::default_instance_,
      Composite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Composite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Composite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Composite));
  Extendable_descriptor_ = file->message_type(7);
  static const int Extendable_offsets_[1] = {
  };
  Extendable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Extendable_descriptor_,
      Extendable::default_instance_,
      Extendable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extendable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extendable, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Extendable, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Extendable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_test_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPion_descriptor_, &MsgPion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleTest_descriptor_, &SimpleTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeStringTest_descriptor_, &CompositeStringTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompositeIntegerTest_descriptor_, &CompositeIntegerTest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZeroField_descriptor_, &ZeroField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Composite_descriptor_, &Composite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Extendable_descriptor_, &Extendable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_test_2eproto() {
  delete MsgPion::default_instance_;
  delete MsgPion_reflection_;
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete SimpleTest::default_instance_;
  delete SimpleTest_reflection_;
  delete CompositeStringTest::default_instance_;
  delete CompositeStringTest_reflection_;
  delete CompositeIntegerTest::default_instance_;
  delete CompositeIntegerTest_reflection_;
  delete ZeroField::default_instance_;
  delete ZeroField_reflection_;
  delete Composite::default_instance_;
  delete Composite_reflection_;
  delete Extendable::default_instance_;
  delete Extendable_reflection_;
}

void protobuf_AddDesc_test_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntest.proto\"8\n\007MsgPion\022\014\n\004name\030\001 \002(\t\022\n\n"
    "\002id\030\002 \002(\005\022\r\n\005email\030\003 \001(\t*\004\010\005\020\006\"\016\n\014EmptyM"
    "essage\"\032\n\nSimpleTest\022\014\n\004name\030\002 \002(\t\"0\n\023Co"
    "mpositeStringTest\022\031\n\004test\030\001 \003(\0132\013.Simple"
    "Test\"$\n\024CompositeIntegerTest\022\014\n\004test\030\001 \003"
    "(\005\"\035\n\tZeroField\022\020\n\005value\030\001 \001(\005:\0010\"S\n\tCom"
    "posite\022\017\n\007context\030\001 \002(\005\022\033\n\006simple\030\002 \001(\0132"
    "\013.SimpleTest\022\030\n\004zero\030\003 \001(\0132\n.ZeroField\"\026"
    "\n\nExtendable*\010\010\001\020\200\200\200\200\002:(\n\006simple\022\013.Exten"
    "dable\030\001 \001(\0132\013.SimpleTest:%\n\004zero\022\013.Exten"
    "dable\030\002 \001(\0132\n.ZeroFieldB\002H\001", 427);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  MsgPion::default_instance_ = new MsgPion();
  EmptyMessage::default_instance_ = new EmptyMessage();
  SimpleTest::default_instance_ = new SimpleTest();
  CompositeStringTest::default_instance_ = new CompositeStringTest();
  CompositeIntegerTest::default_instance_ = new CompositeIntegerTest();
  ZeroField::default_instance_ = new ZeroField();
  Composite::default_instance_ = new Composite();
  Extendable::default_instance_ = new Extendable();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Extendable::default_instance(),
    1, 11, false, false,
    &::SimpleTest::default_instance());
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    &::Extendable::default_instance(),
    2, 11, false, false,
    &::ZeroField::default_instance());
  MsgPion::default_instance_->InitAsDefaultInstance();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  SimpleTest::default_instance_->InitAsDefaultInstance();
  CompositeStringTest::default_instance_->InitAsDefaultInstance();
  CompositeIntegerTest::default_instance_->InitAsDefaultInstance();
  ZeroField::default_instance_->InitAsDefaultInstance();
  Composite::default_instance_->InitAsDefaultInstance();
  Extendable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_test_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_test_2eproto {
  StaticDescriptorInitializer_test_2eproto() {
    protobuf_AddDesc_test_2eproto();
  }
} static_descriptor_initializer_test_2eproto_;


// ===================================================================

const ::std::string MsgPion::_default_name_;
const ::std::string MsgPion::_default_email_;
#ifndef _MSC_VER
const int MsgPion::kNameFieldNumber;
const int MsgPion::kIdFieldNumber;
const int MsgPion::kEmailFieldNumber;
#endif  // !_MSC_VER

MsgPion::MsgPion() {
  SharedCtor();
}

void MsgPion::InitAsDefaultInstance() {
}

MsgPion::MsgPion(const MsgPion& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPion::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  id_ = 0;
  email_ = const_cast< ::std::string*>(&_default_email_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPion::~MsgPion() {
  SharedDtor();
}

void MsgPion::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (email_ != &_default_email_) {
    delete email_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPion_descriptor_;
}

const MsgPion& MsgPion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

MsgPion* MsgPion::default_instance_ = NULL;

MsgPion* MsgPion::New() const {
  return new MsgPion;
}

void MsgPion::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    id_ = 0;
    if (_has_bit(2)) {
      if (email_ != &_default_email_) {
        email_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &id_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }
      
      // optional string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_email:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_email()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->email().data(), this->email().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((40u <= tag && tag < 48u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }
  
  // optional string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }
  
  // Extension range [5, 6)
  _extensions_.SerializeWithCachedSizes(
      5, 6, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }
  
  // optional string email = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }
  
  // Extension range [5, 6)
  target = _extensions_.SerializeWithCachedSizesToArray(
      5, 6, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPion::MergeFrom(const MsgPion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_id(from.id());
    }
    if (from._has_bit(2)) {
      set_email(from.email());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPion::CopyFrom(const MsgPion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void MsgPion::Swap(MsgPion* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(email_, other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata MsgPion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPion_descriptor_;
  metadata.reflection = MsgPion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EmptyMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {
  
  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SimpleTest::_default_name_;
#ifndef _MSC_VER
const int SimpleTest::kNameFieldNumber;
#endif  // !_MSC_VER

SimpleTest::SimpleTest() {
  SharedCtor();
}

void SimpleTest::InitAsDefaultInstance() {
}

SimpleTest::SimpleTest(const SimpleTest& from) {
  SharedCtor();
  MergeFrom(from);
}

void SimpleTest::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleTest::~SimpleTest() {
  SharedDtor();
}

void SimpleTest::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SimpleTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleTest_descriptor_;
}

const SimpleTest& SimpleTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

SimpleTest* SimpleTest::default_instance_ = NULL;

SimpleTest* SimpleTest::New() const {
  return new SimpleTest;
}

void SimpleTest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SimpleTest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleTest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SimpleTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleTest::MergeFrom(const SimpleTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleTest::CopyFrom(const SimpleTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleTest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SimpleTest::Swap(SimpleTest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleTest_descriptor_;
  metadata.reflection = SimpleTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositeStringTest::kTestFieldNumber;
#endif  // !_MSC_VER

CompositeStringTest::CompositeStringTest() {
  SharedCtor();
}

void CompositeStringTest::InitAsDefaultInstance() {
}

CompositeStringTest::CompositeStringTest(const CompositeStringTest& from) {
  SharedCtor();
  MergeFrom(from);
}

void CompositeStringTest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeStringTest::~CompositeStringTest() {
  SharedDtor();
}

void CompositeStringTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CompositeStringTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeStringTest_descriptor_;
}

const CompositeStringTest& CompositeStringTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

CompositeStringTest* CompositeStringTest::default_instance_ = NULL;

CompositeStringTest* CompositeStringTest::New() const {
  return new CompositeStringTest;
}

void CompositeStringTest::Clear() {
  test_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeStringTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SimpleTest test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_test:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_test()));
        if (input->ExpectTag(10)) goto parse_test;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositeStringTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CompositeStringTest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .SimpleTest test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->test(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompositeStringTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SimpleTest test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->test(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompositeStringTest::ByteSize() const {
  int total_size = 0;
  
  // repeated .SimpleTest test = 1;
  total_size += 1 * this->test_size();
  for (int i = 0; i < this->test_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->test(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CompositeStringTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeStringTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeStringTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeStringTest::MergeFrom(const CompositeStringTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_.MergeFrom(from.test_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeStringTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeStringTest::CopyFrom(const CompositeStringTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeStringTest::IsInitialized() const {
  
  for (int i = 0; i < test_size(); i++) {
    if (!this->test(i).IsInitialized()) return false;
  }
  return true;
}

void CompositeStringTest::Swap(CompositeStringTest* other) {
  if (other != this) {
    test_.Swap(&other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeStringTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeStringTest_descriptor_;
  metadata.reflection = CompositeStringTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompositeIntegerTest::kTestFieldNumber;
#endif  // !_MSC_VER

CompositeIntegerTest::CompositeIntegerTest() {
  SharedCtor();
}

void CompositeIntegerTest::InitAsDefaultInstance() {
}

CompositeIntegerTest::CompositeIntegerTest(const CompositeIntegerTest& from) {
  SharedCtor();
  MergeFrom(from);
}

void CompositeIntegerTest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompositeIntegerTest::~CompositeIntegerTest() {
  SharedDtor();
}

void CompositeIntegerTest::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CompositeIntegerTest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompositeIntegerTest_descriptor_;
}

const CompositeIntegerTest& CompositeIntegerTest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

CompositeIntegerTest* CompositeIntegerTest::default_instance_ = NULL;

CompositeIntegerTest* CompositeIntegerTest::New() const {
  return new CompositeIntegerTest;
}

void CompositeIntegerTest::Clear() {
  test_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompositeIntegerTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 test = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_test:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_test(value);
        if (input->ExpectTag(8)) goto parse_test;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompositeIntegerTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CompositeIntegerTest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated int32 test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->test(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompositeIntegerTest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 test = 1;
  for (int i = 0; i < this->test_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->test(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompositeIntegerTest::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 test = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->test_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->test(i));
    }
    total_size += 1 * this->test_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CompositeIntegerTest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompositeIntegerTest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompositeIntegerTest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompositeIntegerTest::MergeFrom(const CompositeIntegerTest& from) {
  GOOGLE_CHECK_NE(&from, this);
  test_.MergeFrom(from.test_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompositeIntegerTest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeIntegerTest::CopyFrom(const CompositeIntegerTest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeIntegerTest::IsInitialized() const {
  
  return true;
}

void CompositeIntegerTest::Swap(CompositeIntegerTest* other) {
  if (other != this) {
    test_.Swap(&other->test_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompositeIntegerTest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompositeIntegerTest_descriptor_;
  metadata.reflection = CompositeIntegerTest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZeroField::kValueFieldNumber;
#endif  // !_MSC_VER

ZeroField::ZeroField() {
  SharedCtor();
}

void ZeroField::InitAsDefaultInstance() {
}

ZeroField::ZeroField(const ZeroField& from) {
  SharedCtor();
  MergeFrom(from);
}

void ZeroField::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZeroField::~ZeroField() {
  SharedDtor();
}

void ZeroField::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ZeroField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZeroField_descriptor_;
}

const ZeroField& ZeroField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

ZeroField* ZeroField::default_instance_ = NULL;

ZeroField* ZeroField::New() const {
  return new ZeroField;
}

void ZeroField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZeroField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 value = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZeroField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ZeroField::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 value = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZeroField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 value = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZeroField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 value = 1 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ZeroField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZeroField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZeroField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZeroField::MergeFrom(const ZeroField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZeroField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZeroField::CopyFrom(const ZeroField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZeroField::IsInitialized() const {
  
  return true;
}

void ZeroField::Swap(ZeroField* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZeroField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZeroField_descriptor_;
  metadata.reflection = ZeroField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Composite::kContextFieldNumber;
const int Composite::kSimpleFieldNumber;
const int Composite::kZeroFieldNumber;
#endif  // !_MSC_VER

Composite::Composite() {
  SharedCtor();
}

void Composite::InitAsDefaultInstance() {
  simple_ = const_cast< ::SimpleTest*>(&::SimpleTest::default_instance());
  zero_ = const_cast< ::ZeroField*>(&::ZeroField::default_instance());
}

Composite::Composite(const Composite& from) {
  SharedCtor();
  MergeFrom(from);
}

void Composite::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  simple_ = NULL;
  zero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Composite::~Composite() {
  SharedDtor();
}

void Composite::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
    delete zero_;
  }
}

const ::google::protobuf::Descriptor* Composite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Composite_descriptor_;
}

const Composite& Composite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

Composite* Composite::default_instance_ = NULL;

Composite* Composite::New() const {
  return new Composite;
}

void Composite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (simple_ != NULL) simple_->::SimpleTest::Clear();
    }
    if (_has_bit(2)) {
      if (zero_ != NULL) zero_->::ZeroField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Composite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }
      
      // optional .SimpleTest simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_simple:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_simple()));
        if (input->ExpectTag(26)) goto parse_zero;
        break;
      }
      
      // optional .ZeroField zero = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_zero:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_zero()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Composite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Composite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 context = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // optional .SimpleTest simple = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->simple(), output);
  }
  
  // optional .ZeroField zero = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->zero(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Composite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 context = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // optional .SimpleTest simple = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }
  
  // optional .ZeroField zero = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zero(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Composite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // optional .SimpleTest simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }
    
    // optional .ZeroField zero = 3;
    if (has_zero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zero());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Composite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Composite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Composite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Composite::MergeFrom(const Composite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_simple()->::SimpleTest::MergeFrom(from.simple());
    }
    if (from._has_bit(2)) {
      mutable_zero()->::ZeroField::MergeFrom(from.zero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Composite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Composite::CopyFrom(const Composite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Composite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_simple()) {
    if (!this->simple().IsInitialized()) return false;
  }
  return true;
}

void Composite::Swap(Composite* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(simple_, other->simple_);
    std::swap(zero_, other->zero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Composite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Composite_descriptor_;
  metadata.reflection = Composite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Extendable::Extendable() {
  SharedCtor();
}

void Extendable::InitAsDefaultInstance() {
}

Extendable::Extendable(const Extendable& from) {
  SharedCtor();
  MergeFrom(from);
}

void Extendable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Extendable::~Extendable() {
  SharedDtor();
}

void Extendable::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Extendable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Extendable_descriptor_;
}

const Extendable& Extendable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_test_2eproto();  return *default_instance_;
}

Extendable* Extendable::default_instance_ = NULL;

Extendable* Extendable::New() const {
  return new Extendable;
}

void Extendable::Clear() {
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Extendable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    if ((8u <= tag)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Extendable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Extendable::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // Extension range [1, 536870912)
  _extensions_.SerializeWithCachedSizes(
      1, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Extendable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // Extension range [1, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Extendable::ByteSize() const {
  int total_size = 0;
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Extendable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Extendable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Extendable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Extendable::MergeFrom(const Extendable& from) {
  GOOGLE_CHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Extendable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extendable::CopyFrom(const Extendable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extendable::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Extendable::Swap(Extendable* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Extendable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Extendable_descriptor_;
  metadata.reflection = Extendable_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::Extendable,
    ::google::protobuf::internal::MessageTypeTraits< ::SimpleTest >, 11, false >
  simple(kSimpleFieldNumber, ::SimpleTest::default_instance());
::google::protobuf::internal::ExtensionIdentifier< ::Extendable,
    ::google::protobuf::internal::MessageTypeTraits< ::ZeroField >, 11, false >
  zero(kZeroFieldNumber, ::ZeroField::default_instance());

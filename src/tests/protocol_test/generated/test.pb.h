// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_test_2eproto__INCLUDED
#define PROTOBUF_test_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_test_2eproto();
void protobuf_AssignDesc_test_2eproto();
void protobuf_ShutdownFile_test_2eproto();

class toto;
class MsgPion;
class Test;
class Facette;
class ObjectInstance;
class Point;
class Polygon;
class Location;
class LocationList;
class EmptyMessage;
class SimpleTest;
class CompositeStringTest;
class CompositeIntegerTest;
class ZeroField;
class Composite;
class Extendable;

// ===================================================================

class toto : public ::google::protobuf::Message {
 public:
  toto();
  virtual ~toto();
  
  toto(const toto& from);
  
  inline toto& operator=(const toto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const toto& default_instance();
  void Swap(toto* other);
  
  // implements Message ----------------------------------------------
  
  toto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const toto& from);
  void MergeFrom(const toto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static toto* default_instance_;
};
// -------------------------------------------------------------------

class MsgPion : public ::google::protobuf::Message {
 public:
  MsgPion();
  virtual ~MsgPion();
  
  MsgPion(const MsgPion& from);
  
  inline MsgPion& operator=(const MsgPion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPion& default_instance();
  void Swap(MsgPion* other);
  
  // implements Message ----------------------------------------------
  
  MsgPion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPion& from);
  void MergeFrom(const MsgPion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(MsgPion)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 id_;
  ::std::string* email_;
  static const ::std::string _default_email_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgPion* default_instance_;
};
// -------------------------------------------------------------------

class Test : public ::google::protobuf::Message {
 public:
  Test();
  virtual ~Test();
  
  Test(const Test& from);
  
  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Test& default_instance();
  void Swap(Test* other);
  
  // implements Message ----------------------------------------------
  
  Test* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Test* default_instance_;
};
// -------------------------------------------------------------------

class Facette : public ::google::protobuf::Message {
 public:
  Facette();
  virtual ~Facette();
  
  Facette(const Facette& from);
  
  inline Facette& operator=(const Facette& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Facette& default_instance();
  void Swap(Facette* other);
  
  // implements Message ----------------------------------------------
  
  Facette* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Facette& from);
  void MergeFrom(const Facette& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Facette* default_instance_;
};
// -------------------------------------------------------------------

class ObjectInstance : public ::google::protobuf::Message {
 public:
  ObjectInstance();
  virtual ~ObjectInstance();
  
  ObjectInstance(const ObjectInstance& from);
  
  inline ObjectInstance& operator=(const ObjectInstance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectInstance& default_instance();
  void Swap(ObjectInstance* other);
  
  // implements Message ----------------------------------------------
  
  ObjectInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObjectInstance& from);
  void MergeFrom(const ObjectInstance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  
  // required string longdesc = 3;
  inline bool has_longdesc() const;
  inline void clear_longdesc();
  static const int kLongdescFieldNumber = 3;
  inline const ::std::string& longdesc() const;
  inline void set_longdesc(const ::std::string& value);
  inline void set_longdesc(const char* value);
  inline void set_longdesc(const char* value, size_t size);
  inline ::std::string* mutable_longdesc();
  
  // repeated .Facette facette = 4;
  inline int facette_size() const;
  inline void clear_facette();
  static const int kFacetteFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::Facette >& facette() const;
  inline ::google::protobuf::RepeatedPtrField< ::Facette >* mutable_facette();
  inline const ::Facette& facette(int index) const;
  inline ::Facette* mutable_facette(int index);
  inline ::Facette* add_facette();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 id_;
  ::std::string* desc_;
  static const ::std::string _default_desc_;
  ::std::string* longdesc_;
  static const ::std::string _default_longdesc_;
  ::google::protobuf::RepeatedPtrField< ::Facette > facette_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ObjectInstance* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();
  
  Point(const Point& from);
  
  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();
  void Swap(Point* other);
  
  // implements Message ----------------------------------------------
  
  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  double x_;
  double y_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message {
 public:
  Polygon();
  virtual ~Polygon();
  
  Polygon(const Polygon& from);
  
  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();
  void Swap(Polygon* other);
  
  // implements Message ----------------------------------------------
  
  Polygon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Point points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::Point >& points() const;
  inline ::google::protobuf::RepeatedPtrField< ::Point >* mutable_points();
  inline const ::Point& points(int index) const;
  inline ::Point* mutable_points(int index);
  inline ::Point* add_points();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Point > points_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Polygon* default_instance_;
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message {
 public:
  Location();
  virtual ~Location();
  
  Location(const Location& from);
  
  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();
  void Swap(Location* other);
  
  // implements Message ----------------------------------------------
  
  Location* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Point point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::Point& point() const;
  inline ::Point* mutable_point();
  
  // optional .Polygon polygon = 2;
  inline bool has_polygon() const;
  inline void clear_polygon();
  static const int kPolygonFieldNumber = 2;
  inline const ::Polygon& polygon() const;
  inline ::Polygon* mutable_polygon();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Point* point_;
  ::Polygon* polygon_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Location* default_instance_;
};
// -------------------------------------------------------------------

class LocationList : public ::google::protobuf::Message {
 public:
  LocationList();
  virtual ~LocationList();
  
  LocationList(const LocationList& from);
  
  inline LocationList& operator=(const LocationList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationList& default_instance();
  void Swap(LocationList* other);
  
  // implements Message ----------------------------------------------
  
  LocationList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LocationList& from);
  void MergeFrom(const LocationList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Location locations = 1;
  inline int locations_size() const;
  inline void clear_locations();
  static const int kLocationsFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::Location >& locations() const;
  inline ::google::protobuf::RepeatedPtrField< ::Location >* mutable_locations();
  inline const ::Location& locations(int index) const;
  inline ::Location* mutable_locations(int index);
  inline ::Location* add_locations();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Location > locations_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LocationList* default_instance_;
};
// -------------------------------------------------------------------

class EmptyMessage : public ::google::protobuf::Message {
 public:
  EmptyMessage();
  virtual ~EmptyMessage();
  
  EmptyMessage(const EmptyMessage& from);
  
  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMessage& default_instance();
  void Swap(EmptyMessage* other);
  
  // implements Message ----------------------------------------------
  
  EmptyMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static EmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class SimpleTest : public ::google::protobuf::Message {
 public:
  SimpleTest();
  virtual ~SimpleTest();
  
  SimpleTest(const SimpleTest& from);
  
  inline SimpleTest& operator=(const SimpleTest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleTest& default_instance();
  void Swap(SimpleTest* other);
  
  // implements Message ----------------------------------------------
  
  SimpleTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleTest& from);
  void MergeFrom(const SimpleTest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SimpleTest* default_instance_;
};
// -------------------------------------------------------------------

class CompositeStringTest : public ::google::protobuf::Message {
 public:
  CompositeStringTest();
  virtual ~CompositeStringTest();
  
  CompositeStringTest(const CompositeStringTest& from);
  
  inline CompositeStringTest& operator=(const CompositeStringTest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeStringTest& default_instance();
  void Swap(CompositeStringTest* other);
  
  // implements Message ----------------------------------------------
  
  CompositeStringTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeStringTest& from);
  void MergeFrom(const CompositeStringTest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .SimpleTest test = 1;
  inline int test_size() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::SimpleTest >& test() const;
  inline ::google::protobuf::RepeatedPtrField< ::SimpleTest >* mutable_test();
  inline const ::SimpleTest& test(int index) const;
  inline ::SimpleTest* mutable_test(int index);
  inline ::SimpleTest* add_test();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::SimpleTest > test_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompositeStringTest* default_instance_;
};
// -------------------------------------------------------------------

class CompositeIntegerTest : public ::google::protobuf::Message {
 public:
  CompositeIntegerTest();
  virtual ~CompositeIntegerTest();
  
  CompositeIntegerTest(const CompositeIntegerTest& from);
  
  inline CompositeIntegerTest& operator=(const CompositeIntegerTest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompositeIntegerTest& default_instance();
  void Swap(CompositeIntegerTest* other);
  
  // implements Message ----------------------------------------------
  
  CompositeIntegerTest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompositeIntegerTest& from);
  void MergeFrom(const CompositeIntegerTest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated int32 test = 1;
  inline int test_size() const;
  inline void clear_test();
  static const int kTestFieldNumber = 1;
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >& test() const
      ;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >* mutable_test();
  inline ::google::protobuf::int32 test(int index) const;
  inline void set_test(int index, ::google::protobuf::int32 value);
  inline void add_test(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > test_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompositeIntegerTest* default_instance_;
};
// -------------------------------------------------------------------

class ZeroField : public ::google::protobuf::Message {
 public:
  ZeroField();
  virtual ~ZeroField();
  
  ZeroField(const ZeroField& from);
  
  inline ZeroField& operator=(const ZeroField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZeroField& default_instance();
  void Swap(ZeroField* other);
  
  // implements Message ----------------------------------------------
  
  ZeroField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZeroField& from);
  void MergeFrom(const ZeroField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 value = 1 [default = 0];
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZeroField* default_instance_;
};
// -------------------------------------------------------------------

class Composite : public ::google::protobuf::Message {
 public:
  Composite();
  virtual ~Composite();
  
  Composite(const Composite& from);
  
  inline Composite& operator=(const Composite& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Composite& default_instance();
  void Swap(Composite* other);
  
  // implements Message ----------------------------------------------
  
  Composite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Composite& from);
  void MergeFrom(const Composite& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::int32 context() const;
  inline void set_context(::google::protobuf::int32 value);
  
  // optional .SimpleTest simple = 2;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 2;
  inline const ::SimpleTest& simple() const;
  inline ::SimpleTest* mutable_simple();
  
  // optional .ZeroField zero = 3;
  inline bool has_zero() const;
  inline void clear_zero();
  static const int kZeroFieldNumber = 3;
  inline const ::ZeroField& zero() const;
  inline ::ZeroField* mutable_zero();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 context_;
  ::SimpleTest* simple_;
  ::ZeroField* zero_;
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Composite* default_instance_;
};
// -------------------------------------------------------------------

class Extendable : public ::google::protobuf::Message {
 public:
  Extendable();
  virtual ~Extendable();
  
  Extendable(const Extendable& from);
  
  inline Extendable& operator=(const Extendable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Extendable& default_instance();
  void Swap(Extendable* other);
  
  // implements Message ----------------------------------------------
  
  Extendable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Extendable& from);
  void MergeFrom(const Extendable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Extendable)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_test_2eproto();
  friend void protobuf_AssignDesc_test_2eproto();
  friend void protobuf_ShutdownFile_test_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Extendable* default_instance_;
};
// ===================================================================


// ===================================================================

static const int kSimpleFieldNumber = 1;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Extendable,
    ::google::protobuf::internal::MessageTypeTraits< ::SimpleTest >, 11, false >
  simple;
static const int kZeroFieldNumber = 2;
extern ::google::protobuf::internal::ExtensionIdentifier< ::Extendable,
    ::google::protobuf::internal::MessageTypeTraits< ::ZeroField >, 11, false >
  zero;

// ===================================================================

// toto

// required int32 id = 1;
inline bool toto::has_id() const {
  return _has_bit(0);
}
inline void toto::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 toto::id() const {
  return id_;
}
inline void toto::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// optional string name = 2;
inline bool toto::has_name() const {
  return _has_bit(1);
}
inline void toto::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& toto::name() const {
  return *name_;
}
inline void toto::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void toto::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void toto::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* toto::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// MsgPion

// required string name = 1;
inline bool MsgPion::has_name() const {
  return _has_bit(0);
}
inline void MsgPion::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgPion::name() const {
  return *name_;
}
inline void MsgPion::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgPion::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgPion::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPion::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required int32 id = 2;
inline bool MsgPion::has_id() const {
  return _has_bit(1);
}
inline void MsgPion::clear_id() {
  id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MsgPion::id() const {
  return id_;
}
inline void MsgPion::set_id(::google::protobuf::int32 value) {
  _set_bit(1);
  id_ = value;
}

// optional string email = 3;
inline bool MsgPion::has_email() const {
  return _has_bit(2);
}
inline void MsgPion::clear_email() {
  if (email_ != &_default_email_) {
    email_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MsgPion::email() const {
  return *email_;
}
inline void MsgPion::set_email(const ::std::string& value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void MsgPion::set_email(const char* value) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void MsgPion::set_email(const char* value, size_t size) {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPion::mutable_email() {
  _set_bit(2);
  if (email_ == &_default_email_) {
    email_ = new ::std::string;
  }
  return email_;
}

// -------------------------------------------------------------------

// Test

// required string name = 1;
inline bool Test::has_name() const {
  return _has_bit(0);
}
inline void Test::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Test::name() const {
  return *name_;
}
inline void Test::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Test::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Test::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Test::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// Facette

// required int32 id = 1;
inline bool Facette::has_id() const {
  return _has_bit(0);
}
inline void Facette::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Facette::id() const {
  return id_;
}
inline void Facette::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string name = 2;
inline bool Facette::has_name() const {
  return _has_bit(1);
}
inline void Facette::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Facette::name() const {
  return *name_;
}
inline void Facette::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Facette::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Facette::set_name(const char* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Facette::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// ObjectInstance

// required int32 id = 1;
inline bool ObjectInstance::has_id() const {
  return _has_bit(0);
}
inline void ObjectInstance::clear_id() {
  id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ObjectInstance::id() const {
  return id_;
}
inline void ObjectInstance::set_id(::google::protobuf::int32 value) {
  _set_bit(0);
  id_ = value;
}

// required string desc = 2;
inline bool ObjectInstance::has_desc() const {
  return _has_bit(1);
}
inline void ObjectInstance::clear_desc() {
  if (desc_ != &_default_desc_) {
    desc_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ObjectInstance::desc() const {
  return *desc_;
}
inline void ObjectInstance::set_desc(const ::std::string& value) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ObjectInstance::set_desc(const char* value) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ObjectInstance::set_desc(const char* value, size_t size) {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectInstance::mutable_desc() {
  _set_bit(1);
  if (desc_ == &_default_desc_) {
    desc_ = new ::std::string;
  }
  return desc_;
}

// required string longdesc = 3;
inline bool ObjectInstance::has_longdesc() const {
  return _has_bit(2);
}
inline void ObjectInstance::clear_longdesc() {
  if (longdesc_ != &_default_longdesc_) {
    longdesc_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ObjectInstance::longdesc() const {
  return *longdesc_;
}
inline void ObjectInstance::set_longdesc(const ::std::string& value) {
  _set_bit(2);
  if (longdesc_ == &_default_longdesc_) {
    longdesc_ = new ::std::string;
  }
  longdesc_->assign(value);
}
inline void ObjectInstance::set_longdesc(const char* value) {
  _set_bit(2);
  if (longdesc_ == &_default_longdesc_) {
    longdesc_ = new ::std::string;
  }
  longdesc_->assign(value);
}
inline void ObjectInstance::set_longdesc(const char* value, size_t size) {
  _set_bit(2);
  if (longdesc_ == &_default_longdesc_) {
    longdesc_ = new ::std::string;
  }
  longdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ObjectInstance::mutable_longdesc() {
  _set_bit(2);
  if (longdesc_ == &_default_longdesc_) {
    longdesc_ = new ::std::string;
  }
  return longdesc_;
}

// repeated .Facette facette = 4;
inline int ObjectInstance::facette_size() const {
  return facette_.size();
}
inline void ObjectInstance::clear_facette() {
  facette_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Facette >&
ObjectInstance::facette() const {
  return facette_;
}
inline ::google::protobuf::RepeatedPtrField< ::Facette >*
ObjectInstance::mutable_facette() {
  return &facette_;
}
inline const ::Facette& ObjectInstance::facette(int index) const {
  return facette_.Get(index);
}
inline ::Facette* ObjectInstance::mutable_facette(int index) {
  return facette_.Mutable(index);
}
inline ::Facette* ObjectInstance::add_facette() {
  return facette_.Add();
}

// -------------------------------------------------------------------

// Point

// optional double x = 1;
inline bool Point::has_x() const {
  return _has_bit(0);
}
inline void Point::clear_x() {
  x_ = 0;
  _clear_bit(0);
}
inline double Point::x() const {
  return x_;
}
inline void Point::set_x(double value) {
  _set_bit(0);
  x_ = value;
}

// optional double y = 2;
inline bool Point::has_y() const {
  return _has_bit(1);
}
inline void Point::clear_y() {
  y_ = 0;
  _clear_bit(1);
}
inline double Point::y() const {
  return y_;
}
inline void Point::set_y(double value) {
  _set_bit(1);
  y_ = value;
}

// -------------------------------------------------------------------

// Polygon

// repeated .Point points = 1;
inline int Polygon::points_size() const {
  return points_.size();
}
inline void Polygon::clear_points() {
  points_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Point >&
Polygon::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::Point >*
Polygon::mutable_points() {
  return &points_;
}
inline const ::Point& Polygon::points(int index) const {
  return points_.Get(index);
}
inline ::Point* Polygon::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::Point* Polygon::add_points() {
  return points_.Add();
}

// -------------------------------------------------------------------

// Location

// optional .Point point = 1;
inline bool Location::has_point() const {
  return _has_bit(0);
}
inline void Location::clear_point() {
  if (point_ != NULL) point_->::Point::Clear();
  _clear_bit(0);
}
inline const ::Point& Location::point() const {
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
inline ::Point* Location::mutable_point() {
  _set_bit(0);
  if (point_ == NULL) point_ = new ::Point;
  return point_;
}

// optional .Polygon polygon = 2;
inline bool Location::has_polygon() const {
  return _has_bit(1);
}
inline void Location::clear_polygon() {
  if (polygon_ != NULL) polygon_->::Polygon::Clear();
  _clear_bit(1);
}
inline const ::Polygon& Location::polygon() const {
  return polygon_ != NULL ? *polygon_ : *default_instance_->polygon_;
}
inline ::Polygon* Location::mutable_polygon() {
  _set_bit(1);
  if (polygon_ == NULL) polygon_ = new ::Polygon;
  return polygon_;
}

// -------------------------------------------------------------------

// LocationList

// repeated .Location locations = 1;
inline int LocationList::locations_size() const {
  return locations_.size();
}
inline void LocationList::clear_locations() {
  locations_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Location >&
LocationList::locations() const {
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::Location >*
LocationList::mutable_locations() {
  return &locations_;
}
inline const ::Location& LocationList::locations(int index) const {
  return locations_.Get(index);
}
inline ::Location* LocationList::mutable_locations(int index) {
  return locations_.Mutable(index);
}
inline ::Location* LocationList::add_locations() {
  return locations_.Add();
}

// -------------------------------------------------------------------

// EmptyMessage

// -------------------------------------------------------------------

// SimpleTest

// required string name = 2;
inline bool SimpleTest::has_name() const {
  return _has_bit(0);
}
inline void SimpleTest::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& SimpleTest::name() const {
  return *name_;
}
inline void SimpleTest::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SimpleTest::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SimpleTest::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleTest::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// CompositeStringTest

// repeated .SimpleTest test = 1;
inline int CompositeStringTest::test_size() const {
  return test_.size();
}
inline void CompositeStringTest::clear_test() {
  test_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::SimpleTest >&
CompositeStringTest::test() const {
  return test_;
}
inline ::google::protobuf::RepeatedPtrField< ::SimpleTest >*
CompositeStringTest::mutable_test() {
  return &test_;
}
inline const ::SimpleTest& CompositeStringTest::test(int index) const {
  return test_.Get(index);
}
inline ::SimpleTest* CompositeStringTest::mutable_test(int index) {
  return test_.Mutable(index);
}
inline ::SimpleTest* CompositeStringTest::add_test() {
  return test_.Add();
}

// -------------------------------------------------------------------

// CompositeIntegerTest

// repeated int32 test = 1;
inline int CompositeIntegerTest::test_size() const {
  return test_.size();
}
inline void CompositeIntegerTest::clear_test() {
  test_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CompositeIntegerTest::test() const {
  return test_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CompositeIntegerTest::mutable_test() {
  return &test_;
}
inline ::google::protobuf::int32 CompositeIntegerTest::test(int index) const {
  return test_.Get(index);
}
inline void CompositeIntegerTest::set_test(int index, ::google::protobuf::int32 value) {
  test_.Set(index, value);
}
inline void CompositeIntegerTest::add_test(::google::protobuf::int32 value) {
  test_.Add(value);
}

// -------------------------------------------------------------------

// ZeroField

// optional int32 value = 1 [default = 0];
inline bool ZeroField::has_value() const {
  return _has_bit(0);
}
inline void ZeroField::clear_value() {
  value_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 ZeroField::value() const {
  return value_;
}
inline void ZeroField::set_value(::google::protobuf::int32 value) {
  _set_bit(0);
  value_ = value;
}

// -------------------------------------------------------------------

// Composite

// required int32 context = 1;
inline bool Composite::has_context() const {
  return _has_bit(0);
}
inline void Composite::clear_context() {
  context_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Composite::context() const {
  return context_;
}
inline void Composite::set_context(::google::protobuf::int32 value) {
  _set_bit(0);
  context_ = value;
}

// optional .SimpleTest simple = 2;
inline bool Composite::has_simple() const {
  return _has_bit(1);
}
inline void Composite::clear_simple() {
  if (simple_ != NULL) simple_->::SimpleTest::Clear();
  _clear_bit(1);
}
inline const ::SimpleTest& Composite::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::SimpleTest* Composite::mutable_simple() {
  _set_bit(1);
  if (simple_ == NULL) simple_ = new ::SimpleTest;
  return simple_;
}

// optional .ZeroField zero = 3;
inline bool Composite::has_zero() const {
  return _has_bit(2);
}
inline void Composite::clear_zero() {
  if (zero_ != NULL) zero_->::ZeroField::Clear();
  _clear_bit(2);
}
inline const ::ZeroField& Composite::zero() const {
  return zero_ != NULL ? *zero_ : *default_instance_->zero_;
}
inline ::ZeroField* Composite::mutable_zero() {
  _set_bit(2);
  if (zero_ == NULL) zero_ = new ::ZeroField;
  return zero_;
}

// -------------------------------------------------------------------

// Extendable


#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_test_2eproto__INCLUDED

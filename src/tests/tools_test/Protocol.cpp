/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 02-Nov-2009.
 */
#include "Protocol.h"

/**************************************************************/
/*                                                            */
/*  SimpleTest                                                */
/*                                                            */
/**************************************************************/

ASN1C_SimpleTest::ASN1C_SimpleTest (
   ASN1MessageBuffer& msgBuf, ASN1T_SimpleTest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_SimpleTest (ASN1CTXT* ctxt_p, ASN1T_SimpleTest* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_SimpleTest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_SimpleTest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_SimpleTest (ASN1CTXT* ctxt_p, ASN1T_SimpleTest* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_SimpleTest::Decode ()
{
   return asn1PD_SimpleTest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfSimpleTest                                          */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfSimpleTest::ASN1C__SeqOfSimpleTest (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfSimpleTest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfSimpleTest (ASN1CTXT* ctxt_p, ASN1T__SeqOfSimpleTest* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_SimpleTest (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfSimpleTest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfSimpleTest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfSimpleTest (ASN1CTXT* ctxt_p, ASN1T__SeqOfSimpleTest* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_SimpleTest);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_SimpleTest (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfSimpleTest::Decode ()
{
   return asn1PD__SeqOfSimpleTest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CompositeStringTest                                       */
/*                                                            */
/**************************************************************/

ASN1C_CompositeStringTest::ASN1C_CompositeStringTest (
   ASN1MessageBuffer& msgBuf, ASN1T_CompositeStringTest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CompositeStringTest (ASN1CTXT* ctxt_p, ASN1T_CompositeStringTest* pvalue)
{
   int stat = ASN_OK;

   /* encode test */

   stat = asn1PE__SeqOfSimpleTest (ctxt_p, &pvalue->test);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_CompositeStringTest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CompositeStringTest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CompositeStringTest (ASN1CTXT* ctxt_p, ASN1T_CompositeStringTest* pvalue)
{
   int stat = ASN_OK;

   /* decode test */

   stat = asn1PD__SeqOfSimpleTest (ctxt_p, &pvalue->test);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_CompositeStringTest::Decode ()
{
   return asn1PD_CompositeStringTest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CompositeIntegerTest_test                                 */
/*                                                            */
/**************************************************************/

ASN1C_CompositeIntegerTest_test::ASN1C_CompositeIntegerTest_test (
   ASN1MessageBuffer& msgBuf, ASN1T_CompositeIntegerTest_test& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CompositeIntegerTest_test (ASN1CTXT* ctxt_p, ASN1T_CompositeIntegerTest_test* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_CompositeIntegerTest_test::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CompositeIntegerTest_test (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CompositeIntegerTest_test (ASN1CTXT* ctxt_p, ASN1T_CompositeIntegerTest_test* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1INT);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_CompositeIntegerTest_test::Decode ()
{
   return asn1PD_CompositeIntegerTest_test (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CompositeIntegerTest                                      */
/*                                                            */
/**************************************************************/

ASN1C_CompositeIntegerTest::ASN1C_CompositeIntegerTest (
   ASN1MessageBuffer& msgBuf, ASN1T_CompositeIntegerTest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CompositeIntegerTest (ASN1CTXT* ctxt_p, ASN1T_CompositeIntegerTest* pvalue)
{
   int stat = ASN_OK;

   /* encode test */

   stat = asn1PE_CompositeIntegerTest_test (ctxt_p, &pvalue->test);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_CompositeIntegerTest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CompositeIntegerTest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CompositeIntegerTest (ASN1CTXT* ctxt_p, ASN1T_CompositeIntegerTest* pvalue)
{
   int stat = ASN_OK;

   /* decode test */

   stat = asn1PD_CompositeIntegerTest_test (ctxt_p, &pvalue->test);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_CompositeIntegerTest::Decode ()
{
   return asn1PD_CompositeIntegerTest (mpContext->GetPtr(), &msgData);
}


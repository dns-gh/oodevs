/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 04-Oct-2006.
 */
#include "ScipioFire.h"

/**************************************************************/
/*                                                            */
/*  FireDamagePionHuman                                       */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagePionHuman::ASN1C_FireDamagePionHuman (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagePionHuman& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagePionHuman (ASN1CTXT* ctxt_p, ASN1T_FireDamagePionHuman* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireDamagePionHuman: start\n");

   /* encode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_non_blesses */

   PU_PUSHNAME (ctxt_p, "nb_non_blesses");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_non_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_1 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_1");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_2 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_2");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_3 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_3");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_extreme */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_extreme");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_extreme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_FireDamagePionHuman: end\n");
   return (stat);
}

int ASN1C_FireDamagePionHuman::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagePionHuman (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagePionHuman (ASN1CTXT* ctxt_p, ASN1T_FireDamagePionHuman* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireDamagePionHuman: start\n");

   /* decode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_non_blesses */

   PU_PUSHNAME (ctxt_p, "nb_non_blesses");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_non_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_1 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_1");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_2 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_2");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_3 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_3");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_extreme */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_extreme");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_extreme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_FireDamagePionHuman: end\n");

   return (stat);
}

int ASN1C_FireDamagePionHuman::Decode ()
{
   return asn1PD_FireDamagePionHuman (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireDamagePionEquipment                                   */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagePionEquipment::ASN1C_FireDamagePionEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagePionEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagePionEquipment (ASN1CTXT* ctxt_p, ASN1T_FireDamagePionEquipment* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireDamagePionEquipment: start\n");

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_FireDamagePionEquipment: end\n");
   return (stat);
}

int ASN1C_FireDamagePionEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagePionEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagePionEquipment (ASN1CTXT* ctxt_p, ASN1T_FireDamagePionEquipment* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireDamagePionEquipment: start\n");

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_FireDamagePionEquipment: end\n");

   return (stat);
}

int ASN1C_FireDamagePionEquipment::Decode ()
{
   return asn1PD_FireDamagePionEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfFireDamagePionHuman                                 */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfFireDamagePionHuman::ASN1C__SeqOfFireDamagePionHuman (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfFireDamagePionHuman& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfFireDamagePionHuman (ASN1CTXT* ctxt_p, ASN1T__SeqOfFireDamagePionHuman* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfFireDamagePionHuman: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_FireDamagePionHuman (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfFireDamagePionHuman: end\n");
   return (stat);
}

int ASN1C__SeqOfFireDamagePionHuman::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfFireDamagePionHuman (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfFireDamagePionHuman (ASN1CTXT* ctxt_p, ASN1T__SeqOfFireDamagePionHuman* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfFireDamagePionHuman: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_FireDamagePionHuman);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_FireDamagePionHuman (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfFireDamagePionHuman: end\n");

   return (stat);
}

int ASN1C__SeqOfFireDamagePionHuman::Decode ()
{
   return asn1PD__SeqOfFireDamagePionHuman (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfFireDamagePionEquipment                             */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfFireDamagePionEquipment::ASN1C__SeqOfFireDamagePionEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfFireDamagePionEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfFireDamagePionEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfFireDamagePionEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfFireDamagePionEquipment: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_FireDamagePionEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfFireDamagePionEquipment: end\n");
   return (stat);
}

int ASN1C__SeqOfFireDamagePionEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfFireDamagePionEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfFireDamagePionEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfFireDamagePionEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfFireDamagePionEquipment: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_FireDamagePionEquipment);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_FireDamagePionEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfFireDamagePionEquipment: end\n");

   return (stat);
}

int ASN1C__SeqOfFireDamagePionEquipment::Decode ()
{
   return asn1PD__SeqOfFireDamagePionEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireDamagesPion                                           */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagesPion::ASN1C_FireDamagesPion (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagesPion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagesPion (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireDamagesPion: start\n");

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Agent (ctxt_p, pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode humains */

   PU_PUSHNAME (ctxt_p, "humains");

   stat = asn1PE__SeqOfFireDamagePionHuman (ctxt_p, &pvalue->humains);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode equipements */

   PU_PUSHNAME (ctxt_p, "equipements");

   stat = asn1PE__SeqOfFireDamagePionEquipment (ctxt_p, &pvalue->equipements);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_FireDamagesPion: end\n");
   return (stat);
}

int ASN1C_FireDamagesPion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagesPion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagesPion (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireDamagesPion: start\n");

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Agent (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode humains */

   PU_PUSHNAME (ctxt_p, "humains");

   stat = asn1PD__SeqOfFireDamagePionHuman (ctxt_p, &pvalue->humains);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode equipements */

   PU_PUSHNAME (ctxt_p, "equipements");

   stat = asn1PD__SeqOfFireDamagePionEquipment (ctxt_p, &pvalue->equipements);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_FireDamagesPion: end\n");

   return (stat);
}

int ASN1C_FireDamagesPion::Decode ()
{
   return asn1PD_FireDamagesPion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireDamagesPopulation                                     */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagesPopulation::ASN1C_FireDamagesPopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagesPopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagesPopulation (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireDamagesPopulation: start\n");

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Population (ctxt_p, pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_FireDamagesPopulation: end\n");
   return (stat);
}

int ASN1C_FireDamagesPopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagesPopulation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagesPopulation (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPopulation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireDamagesPopulation: start\n");

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Population (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_FireDamagesPopulation: end\n");

   return (stat);
}

int ASN1C_FireDamagesPopulation::Decode ()
{
   return asn1PD_FireDamagesPopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireDamagesPions                                          */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagesPions::ASN1C_FireDamagesPions (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagesPions& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagesPions (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPions* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_FireDamagesPions: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_FireDamagesPion (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_FireDamagesPions: end\n");
   return (stat);
}

int ASN1C_FireDamagesPions::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagesPions (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagesPions (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPions* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_FireDamagesPions: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_FireDamagesPion);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_FireDamagesPion (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_FireDamagesPions: end\n");

   return (stat);
}

int ASN1C_FireDamagesPions::Decode ()
{
   return asn1PD_FireDamagesPions (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireDamagesPopulations                                    */
/*                                                            */
/**************************************************************/

ASN1C_FireDamagesPopulations::ASN1C_FireDamagesPopulations (
   ASN1MessageBuffer& msgBuf, ASN1T_FireDamagesPopulations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireDamagesPopulations (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPopulations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_FireDamagesPopulations: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_FireDamagesPopulation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_FireDamagesPopulations: end\n");
   return (stat);
}

int ASN1C_FireDamagesPopulations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireDamagesPopulations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireDamagesPopulations (ASN1CTXT* ctxt_p, ASN1T_FireDamagesPopulations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_FireDamagesPopulations: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_FireDamagesPopulation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_FireDamagesPopulation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_FireDamagesPopulations: end\n");

   return (stat);
}

int ASN1C_FireDamagesPopulations::Decode ()
{
   return asn1PD_FireDamagesPopulations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartPionFire_cible                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartPionFire_cible::ASN1C_MsgStartPionFire_cible (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartPionFire_cible& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartPionFire_cible (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire_cible* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartPionFire_cible: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* pion */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.pion");

         stat = asn1PE_Agent (ctxt_p, pvalue->u.pion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* population */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.population");

         stat = asn1PE_Population (ctxt_p, pvalue->u.population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* position */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.position");

         stat = asn1PE_CoordUTM (ctxt_p, *pvalue->u.position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgStartPionFire_cible: end\n");
   return (stat);
}

int ASN1C_MsgStartPionFire_cible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartPionFire_cible (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartPionFire_cible (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire_cible* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgStartPionFire_cible: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* pion */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.pion");

         stat = asn1PD_Agent (ctxt_p, &pvalue->u.pion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* population */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.population");

         stat = asn1PD_Population (ctxt_p, &pvalue->u.population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* position */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.position");

         pvalue->u.position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CoordUTM);
         if (pvalue->u.position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CoordUTM (ctxt_p, pvalue->u.position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgStartPionFire_cible: end\n");

   return (stat);
}

int ASN1C_MsgStartPionFire_cible::Decode ()
{
   return asn1PD_MsgStartPionFire_cible (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartPionFire_type                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartPionFire_type::ASN1C_MsgStartPionFire_type (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartPionFire_type& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartPionFire_type (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire_type value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgStartPionFire_type: start\n");

   switch (value) {
      case MsgStartPionFire_type::direct: ui = 0; break;
      case MsgStartPionFire_type::indirect: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgStartPionFire_type: end\n");
   return (stat);
}

int ASN1C_MsgStartPionFire_type::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartPionFire_type (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartPionFire_type (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire_type* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgStartPionFire_type: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgStartPionFire_type::direct; break;
      case 1: *pvalue = MsgStartPionFire_type::indirect; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgStartPionFire_type: end\n");

   return (stat);
}

int ASN1C_MsgStartPionFire_type::Decode ()
{
   return asn1PD_MsgStartPionFire_type (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartPionFire                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartPionFire::ASN1C_MsgStartPionFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartPionFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartPionFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartPionFire: start\n");

   PU_NEWFIELD (ctxt_p, "munitionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.munitionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_TirPion (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tireur */

   PU_PUSHNAME (ctxt_p, "tireur");

   stat = asn1PE_Agent (ctxt_p, pvalue->tireur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_MsgStartPionFire_cible (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_MsgStartPionFire_type (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode munition */

   if (pvalue->m.munitionPresent) {
      PU_PUSHNAME (ctxt_p, "munition");

      stat = asn1PE_TypeDotation (ctxt_p, pvalue->munition);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgStartPionFire: end\n");
   return (stat);
}

int ASN1C_MsgStartPionFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartPionFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartPionFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPionFire* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgStartPionFire: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "munitionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.munitionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_TirPion (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tireur */

   PU_PUSHNAME (ctxt_p, "tireur");

   stat = asn1PD_Agent (ctxt_p, &pvalue->tireur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_MsgStartPionFire_cible (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_MsgStartPionFire_type (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode munition */

   if (pvalue->m.munitionPresent) {
      PU_PUSHNAME (ctxt_p, "munition");

      stat = asn1PD_TypeDotation (ctxt_p, &pvalue->munition);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgStartPionFire: end\n");

   return (stat);
}

int ASN1C_MsgStartPionFire::Decode ()
{
   return asn1PD_MsgStartPionFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopPionFire                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopPionFire::ASN1C_MsgStopPionFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopPionFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopPionFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPionFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopPionFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_TirPion (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PE_FireDamagesPopulations (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStopPionFire: end\n");
   return (stat);
}

int ASN1C_MsgStopPionFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopPionFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopPionFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPionFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopPionFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_TirPion (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PD_FireDamagesPopulations (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStopPionFire: end\n");

   return (stat);
}

int ASN1C_MsgStopPionFire::Decode ()
{
   return asn1PD_MsgStopPionFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartPopulationFire                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartPopulationFire::ASN1C_MsgStartPopulationFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartPopulationFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartPopulationFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_TirPopulation (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_src */

   PU_PUSHNAME (ctxt_p, "oid_src");

   stat = asn1PE_Population (ctxt_p, pvalue->oid_src);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStartPopulationFire: end\n");
   return (stat);
}

int ASN1C_MsgStartPopulationFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartPopulationFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStartPopulationFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_TirPopulation (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_src */

   PU_PUSHNAME (ctxt_p, "oid_src");

   stat = asn1PD_Population (ctxt_p, &pvalue->oid_src);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStartPopulationFire: end\n");

   return (stat);
}

int ASN1C_MsgStartPopulationFire::Decode ()
{
   return asn1PD_MsgStartPopulationFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopPopulationFire                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopPopulationFire::ASN1C_MsgStopPopulationFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopPopulationFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopPopulationFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_TirPopulation (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStopPopulationFire: end\n");
   return (stat);
}

int ASN1C_MsgStopPopulationFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopPopulationFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopPopulationFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_TirPopulation (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStopPopulationFire: end\n");

   return (stat);
}

int ASN1C_MsgStopPopulationFire::Decode ()
{
   return asn1PD_MsgStopPopulationFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExplosion                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgExplosion::ASN1C_MsgExplosion (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExplosion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExplosion (ASN1CTXT* ctxt_p, ASN1T_MsgExplosion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExplosion: start\n");

   /* encode oid_objet */

   PU_PUSHNAME (ctxt_p, "oid_objet");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PE_FireDamagesPopulations (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExplosion: end\n");
   return (stat);
}

int ASN1C_MsgExplosion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExplosion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExplosion (ASN1CTXT* ctxt_p, ASN1T_MsgExplosion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExplosion: start\n");

   /* decode oid_objet */

   PU_PUSHNAME (ctxt_p, "oid_objet");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_FireDamagesPions (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PD_FireDamagesPopulations (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExplosion: end\n");

   return (stat);
}

int ASN1C_MsgExplosion::Decode ()
{
   return asn1PD_MsgExplosion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumFireEffectType                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumFireEffectType::ASN1C_EnumFireEffectType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumFireEffectType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumFireEffectType (ASN1CTXT* ctxt_p, ASN1T_EnumFireEffectType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumFireEffectType: start\n");

   switch (value) {
      case EnumFireEffectType::fumigene: ui = 0; break;
      case EnumFireEffectType::eclairant: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumFireEffectType: end\n");
   return (stat);
}

int ASN1C_EnumFireEffectType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumFireEffectType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumFireEffectType (ASN1CTXT* ctxt_p, ASN1T_EnumFireEffectType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumFireEffectType: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumFireEffectType::fumigene; break;
      case 1: *pvalue = EnumFireEffectType::eclairant; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumFireEffectType: end\n");

   return (stat);
}

int ASN1C_EnumFireEffectType::Decode ()
{
   return asn1PD_EnumFireEffectType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartFireEffect                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartFireEffect::ASN1C_MsgStartFireEffect (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartFireEffect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStartFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartFireEffect: start\n");

   /* encode oid_effet */

   PU_PUSHNAME (ctxt_p, "oid_effet");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_effet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode localisation */

   PU_PUSHNAME (ctxt_p, "localisation");

   stat = asn1PE_Localisation (ctxt_p, &pvalue->localisation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumFireEffectType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStartFireEffect: end\n");
   return (stat);
}

int ASN1C_MsgStartFireEffect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartFireEffect (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStartFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStartFireEffect: start\n");

   /* decode oid_effet */

   PU_PUSHNAME (ctxt_p, "oid_effet");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_effet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode localisation */

   PU_PUSHNAME (ctxt_p, "localisation");

   stat = asn1PD_Localisation (ctxt_p, &pvalue->localisation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumFireEffectType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStartFireEffect: end\n");

   return (stat);
}

int ASN1C_MsgStartFireEffect::Decode ()
{
   return asn1PD_MsgStartFireEffect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopFireEffect                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopFireEffect::ASN1C_MsgStopFireEffect (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopFireEffect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStopFireEffect value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopFireEffect: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgStopFireEffect: end\n");
   return (stat);
}

int ASN1C_MsgStopFireEffect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopFireEffect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStopFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopFireEffect: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgStopFireEffect: end\n");

   return (stat);
}

int ASN1C_MsgStopFireEffect::Decode ()
{
   return asn1PD_MsgStopFireEffect (mpContext->GetPtr(), &msgData);
}


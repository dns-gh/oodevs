/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 22-Jan-2007.
 */
#include "ScipioAuth.h"

/**************************************************************/
/*                                                            */
/*  Profile                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Profile::ASN1C_Profile (
   ASN1MessageBuffer& msgBuf, ASN1T_Profile& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Profile (ASN1CTXT* ctxt_p, ASN1T_Profile* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Profile: start\n");

   PU_NEWFIELD (ctxt_p, "passwordPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.passwordPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_formationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_only_formationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_formationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_write_formationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_automatesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_only_automatesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_automatesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_write_automatesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_campsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_only_campsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_campsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_write_campsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_populationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_only_populationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_populationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.read_write_populationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode password */

   if (pvalue->m.passwordPresent) {
      PU_PUSHNAME (ctxt_p, "password");

      stat = pe_VisibleString (ctxt_p, pvalue->password, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_only_formations */

   if (pvalue->m.read_only_formationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_formations");

      stat = asn1PE_ListFormation (ctxt_p, &pvalue->read_only_formations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_write_formations */

   if (pvalue->m.read_write_formationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_formations");

      stat = asn1PE_ListFormation (ctxt_p, &pvalue->read_write_formations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_only_automates */

   if (pvalue->m.read_only_automatesPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_automates");

      stat = asn1PE_ListAutomate (ctxt_p, &pvalue->read_only_automates);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_write_automates */

   if (pvalue->m.read_write_automatesPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_automates");

      stat = asn1PE_ListAutomate (ctxt_p, &pvalue->read_write_automates);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_only_camps */

   if (pvalue->m.read_only_campsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_camps");

      stat = asn1PE_ListCamp (ctxt_p, &pvalue->read_only_camps);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_write_camps */

   if (pvalue->m.read_write_campsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_camps");

      stat = asn1PE_ListCamp (ctxt_p, &pvalue->read_write_camps);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_only_populations */

   if (pvalue->m.read_only_populationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_populations");

      stat = asn1PE_ListPopulation (ctxt_p, &pvalue->read_only_populations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode read_write_populations */

   if (pvalue->m.read_write_populationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_populations");

      stat = asn1PE_ListPopulation (ctxt_p, &pvalue->read_write_populations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode superviseur */

   PU_PUSHNAME (ctxt_p, "superviseur");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->superviseur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Profile: end\n");
   return (stat);
}

int ASN1C_Profile::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Profile (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Profile (ASN1CTXT* ctxt_p, ASN1T_Profile* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_Profile: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "passwordPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.passwordPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_formationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_only_formationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_formationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_write_formationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_automatesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_only_automatesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_automatesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_write_automatesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_campsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_only_campsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_campsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_write_campsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_only_populationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_only_populationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "read_write_populationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.read_write_populationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode password */

   if (pvalue->m.passwordPresent) {
      PU_PUSHNAME (ctxt_p, "password");

      stat = pd_VisibleString (ctxt_p, &pvalue->password, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_only_formations */

   if (pvalue->m.read_only_formationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_formations");

      stat = asn1PD_ListFormation (ctxt_p, &pvalue->read_only_formations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_write_formations */

   if (pvalue->m.read_write_formationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_formations");

      stat = asn1PD_ListFormation (ctxt_p, &pvalue->read_write_formations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_only_automates */

   if (pvalue->m.read_only_automatesPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_automates");

      stat = asn1PD_ListAutomate (ctxt_p, &pvalue->read_only_automates);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_write_automates */

   if (pvalue->m.read_write_automatesPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_automates");

      stat = asn1PD_ListAutomate (ctxt_p, &pvalue->read_write_automates);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_only_camps */

   if (pvalue->m.read_only_campsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_camps");

      stat = asn1PD_ListCamp (ctxt_p, &pvalue->read_only_camps);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_write_camps */

   if (pvalue->m.read_write_campsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_camps");

      stat = asn1PD_ListCamp (ctxt_p, &pvalue->read_write_camps);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_only_populations */

   if (pvalue->m.read_only_populationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_only_populations");

      stat = asn1PD_ListPopulation (ctxt_p, &pvalue->read_only_populations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode read_write_populations */

   if (pvalue->m.read_write_populationsPresent) {
      PU_PUSHNAME (ctxt_p, "read_write_populations");

      stat = asn1PD_ListPopulation (ctxt_p, &pvalue->read_write_populations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode superviseur */

   PU_PUSHNAME (ctxt_p, "superviseur");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->superviseur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Profile: end\n");

   return (stat);
}

int ASN1C_Profile::Decode ()
{
   return asn1PD_Profile (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAuthLogin                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgAuthLogin::ASN1C_MsgAuthLogin (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAuthLogin& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAuthLogin (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLogin* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAuthLogin: start\n");

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode password */

   PU_PUSHNAME (ctxt_p, "password");

   stat = pe_VisibleString (ctxt_p, pvalue->password, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAuthLogin: end\n");
   return (stat);
}

int ASN1C_MsgAuthLogin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAuthLogin (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAuthLogin (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLogin* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAuthLogin: start\n");

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode password */

   PU_PUSHNAME (ctxt_p, "password");

   stat = pd_VisibleString (ctxt_p, &pvalue->password, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAuthLogin: end\n");

   return (stat);
}

int ASN1C_MsgAuthLogin::Decode ()
{
   return asn1PD_MsgAuthLogin (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAuthLoginAck_etat                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgAuthLoginAck_etat::ASN1C_MsgAuthLoginAck_etat (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAuthLoginAck_etat& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAuthLoginAck_etat (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLoginAck_etat value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgAuthLoginAck_etat: start\n");

   switch (value) {
      case MsgAuthLoginAck_etat::success: ui = 0; break;
      case MsgAuthLoginAck_etat::invalid_login: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgAuthLoginAck_etat: end\n");
   return (stat);
}

int ASN1C_MsgAuthLoginAck_etat::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAuthLoginAck_etat (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgAuthLoginAck_etat (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLoginAck_etat* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgAuthLoginAck_etat: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgAuthLoginAck_etat::success; break;
      case 1: *pvalue = MsgAuthLoginAck_etat::invalid_login; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgAuthLoginAck_etat: end\n");

   return (stat);
}

int ASN1C_MsgAuthLoginAck_etat::Decode ()
{
   return asn1PD_MsgAuthLoginAck_etat (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAuthLoginAck                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgAuthLoginAck::ASN1C_MsgAuthLoginAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAuthLoginAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAuthLoginAck (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLoginAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAuthLoginAck: start\n");

   PU_NEWFIELD (ctxt_p, "profilePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.profilePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode etat */

   PU_PUSHNAME (ctxt_p, "etat");

   stat = asn1PE_MsgAuthLoginAck_etat (ctxt_p, pvalue->etat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode profile */

   if (pvalue->m.profilePresent) {
      PU_PUSHNAME (ctxt_p, "profile");

      stat = asn1PE_Profile (ctxt_p, &pvalue->profile);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgAuthLoginAck: end\n");
   return (stat);
}

int ASN1C_MsgAuthLoginAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAuthLoginAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAuthLoginAck (ASN1CTXT* ctxt_p, ASN1T_MsgAuthLoginAck* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgAuthLoginAck: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "profilePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.profilePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode etat */

   PU_PUSHNAME (ctxt_p, "etat");

   stat = asn1PD_MsgAuthLoginAck_etat (ctxt_p, &pvalue->etat);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode profile */

   if (pvalue->m.profilePresent) {
      PU_PUSHNAME (ctxt_p, "profile");

      stat = asn1PD_Profile (ctxt_p, &pvalue->profile);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgAuthLoginAck: end\n");

   return (stat);
}

int ASN1C_MsgAuthLoginAck::Decode ()
{
   return asn1PD_MsgAuthLoginAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileCreation                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileCreation::ASN1C_MsgProfileCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileCreation (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileCreation: start\n");

   stat = asn1PE_Profile (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileCreation: end\n");
   return (stat);
}

int ASN1C_MsgProfileCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileCreation (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileCreation: start\n");

   stat = asn1PD_Profile (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgProfileCreation: end\n");

   return (stat);
}

int ASN1C_MsgProfileCreation::Decode ()
{
   return asn1PD_MsgProfileCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileCreationRequest                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileCreationRequest::ASN1C_MsgProfileCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileCreationRequest: start\n");

   stat = asn1PE_Profile (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileCreationRequest: end\n");
   return (stat);
}

int ASN1C_MsgProfileCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileCreationRequest: start\n");

   stat = asn1PD_Profile (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgProfileCreationRequest: end\n");

   return (stat);
}

int ASN1C_MsgProfileCreationRequest::Decode ()
{
   return asn1PD_MsgProfileCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileCreationRequestAck_error_code                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileCreationRequestAck_error_code::ASN1C_MsgProfileCreationRequestAck_error_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileCreationRequestAck_error_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileCreationRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequestAck_error_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgProfileCreationRequestAck_error_code: start\n");

   switch (value) {
      case MsgProfileCreationRequestAck_error_code::success: ui = 0; break;
      case MsgProfileCreationRequestAck_error_code::invalid_login: ui = 1; break;
      case MsgProfileCreationRequestAck_error_code::invalid_password: ui = 2; break;
      case MsgProfileCreationRequestAck_error_code::duplicate_login: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileCreationRequestAck_error_code: end\n");
   return (stat);
}

int ASN1C_MsgProfileCreationRequestAck_error_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileCreationRequestAck_error_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileCreationRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequestAck_error_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgProfileCreationRequestAck_error_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgProfileCreationRequestAck_error_code::success; break;
      case 1: *pvalue = MsgProfileCreationRequestAck_error_code::invalid_login; break;
      case 2: *pvalue = MsgProfileCreationRequestAck_error_code::invalid_password; break;
      case 3: *pvalue = MsgProfileCreationRequestAck_error_code::duplicate_login; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgProfileCreationRequestAck_error_code: end\n");

   return (stat);
}

int ASN1C_MsgProfileCreationRequestAck_error_code::Decode ()
{
   return asn1PD_MsgProfileCreationRequestAck_error_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileCreationRequestAck                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileCreationRequestAck::ASN1C_MsgProfileCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileCreationRequestAck: start\n");

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_MsgProfileCreationRequestAck_error_code (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgProfileCreationRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgProfileCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileCreationRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileCreationRequestAck: start\n");

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_MsgProfileCreationRequestAck_error_code (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgProfileCreationRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgProfileCreationRequestAck::Decode ()
{
   return asn1PD_MsgProfileCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileUpdate                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileUpdate::ASN1C_MsgProfileUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileUpdate: start\n");

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode profile */

   PU_PUSHNAME (ctxt_p, "profile");

   stat = asn1PE_Profile (ctxt_p, &pvalue->profile);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgProfileUpdate: end\n");
   return (stat);
}

int ASN1C_MsgProfileUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileUpdate: start\n");

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode profile */

   PU_PUSHNAME (ctxt_p, "profile");

   stat = asn1PD_Profile (ctxt_p, &pvalue->profile);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgProfileUpdate: end\n");

   return (stat);
}

int ASN1C_MsgProfileUpdate::Decode ()
{
   return asn1PD_MsgProfileUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileUpdateRequest                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileUpdateRequest::ASN1C_MsgProfileUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileUpdateRequest: start\n");

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode profile */

   PU_PUSHNAME (ctxt_p, "profile");

   stat = asn1PE_Profile (ctxt_p, &pvalue->profile);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgProfileUpdateRequest: end\n");
   return (stat);
}

int ASN1C_MsgProfileUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileUpdateRequest: start\n");

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode profile */

   PU_PUSHNAME (ctxt_p, "profile");

   stat = asn1PD_Profile (ctxt_p, &pvalue->profile);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgProfileUpdateRequest: end\n");

   return (stat);
}

int ASN1C_MsgProfileUpdateRequest::Decode ()
{
   return asn1PD_MsgProfileUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileUpdateRequestAck_error_code                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileUpdateRequestAck_error_code::ASN1C_MsgProfileUpdateRequestAck_error_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileUpdateRequestAck_error_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileUpdateRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequestAck_error_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgProfileUpdateRequestAck_error_code: start\n");

   switch (value) {
      case MsgProfileUpdateRequestAck_error_code::success: ui = 0; break;
      case MsgProfileUpdateRequestAck_error_code::invalid_profile: ui = 1; break;
      case MsgProfileUpdateRequestAck_error_code::invalid_login: ui = 2; break;
      case MsgProfileUpdateRequestAck_error_code::invalid_password: ui = 3; break;
      case MsgProfileUpdateRequestAck_error_code::duplicate_login: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileUpdateRequestAck_error_code: end\n");
   return (stat);
}

int ASN1C_MsgProfileUpdateRequestAck_error_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileUpdateRequestAck_error_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileUpdateRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequestAck_error_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgProfileUpdateRequestAck_error_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgProfileUpdateRequestAck_error_code::success; break;
      case 1: *pvalue = MsgProfileUpdateRequestAck_error_code::invalid_profile; break;
      case 2: *pvalue = MsgProfileUpdateRequestAck_error_code::invalid_login; break;
      case 3: *pvalue = MsgProfileUpdateRequestAck_error_code::invalid_password; break;
      case 4: *pvalue = MsgProfileUpdateRequestAck_error_code::duplicate_login; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgProfileUpdateRequestAck_error_code: end\n");

   return (stat);
}

int ASN1C_MsgProfileUpdateRequestAck_error_code::Decode ()
{
   return asn1PD_MsgProfileUpdateRequestAck_error_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileUpdateRequestAck                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileUpdateRequestAck::ASN1C_MsgProfileUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileUpdateRequestAck: start\n");

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_MsgProfileUpdateRequestAck_error_code (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgProfileUpdateRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgProfileUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileUpdateRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileUpdateRequestAck: start\n");

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_MsgProfileUpdateRequestAck_error_code (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgProfileUpdateRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgProfileUpdateRequestAck::Decode ()
{
   return asn1PD_MsgProfileUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileDestruction                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileDestruction::ASN1C_MsgProfileDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestruction value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileDestruction: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileDestruction: end\n");
   return (stat);
}

int ASN1C_MsgProfileDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileDestruction: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgProfileDestruction: end\n");

   return (stat);
}

int ASN1C_MsgProfileDestruction::Decode ()
{
   return asn1PD_MsgProfileDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileDestructionRequest                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileDestructionRequest::ASN1C_MsgProfileDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequest value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileDestructionRequest: start\n");

   stat = pe_VisibleString (ctxt_p, value, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileDestructionRequest: end\n");
   return (stat);
}

int ASN1C_MsgProfileDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileDestructionRequest: start\n");

   stat = pd_VisibleString (ctxt_p, pvalue, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgProfileDestructionRequest: end\n");

   return (stat);
}

int ASN1C_MsgProfileDestructionRequest::Decode ()
{
   return asn1PD_MsgProfileDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileDestructionRequestAck_error_code                */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileDestructionRequestAck_error_code::ASN1C_MsgProfileDestructionRequestAck_error_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileDestructionRequestAck_error_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileDestructionRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequestAck_error_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgProfileDestructionRequestAck_error_code: start\n");

   switch (value) {
      case MsgProfileDestructionRequestAck_error_code::success: ui = 0; break;
      case MsgProfileDestructionRequestAck_error_code::invalid_profile: ui = 1; break;
      case MsgProfileDestructionRequestAck_error_code::failure: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgProfileDestructionRequestAck_error_code: end\n");
   return (stat);
}

int ASN1C_MsgProfileDestructionRequestAck_error_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileDestructionRequestAck_error_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileDestructionRequestAck_error_code (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequestAck_error_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgProfileDestructionRequestAck_error_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgProfileDestructionRequestAck_error_code::success; break;
      case 1: *pvalue = MsgProfileDestructionRequestAck_error_code::invalid_profile; break;
      case 2: *pvalue = MsgProfileDestructionRequestAck_error_code::failure; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgProfileDestructionRequestAck_error_code: end\n");

   return (stat);
}

int ASN1C_MsgProfileDestructionRequestAck_error_code::Decode ()
{
   return asn1PD_MsgProfileDestructionRequestAck_error_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgProfileDestructionRequestAck                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgProfileDestructionRequestAck::ASN1C_MsgProfileDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgProfileDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgProfileDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgProfileDestructionRequestAck: start\n");

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_MsgProfileDestructionRequestAck_error_code (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pe_VisibleString (ctxt_p, pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgProfileDestructionRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgProfileDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgProfileDestructionRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgProfileDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgProfileDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgProfileDestructionRequestAck: start\n");

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_MsgProfileDestructionRequestAck_error_code (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode login */

   PU_PUSHNAME (ctxt_p, "login");

   stat = pd_VisibleString (ctxt_p, &pvalue->login, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgProfileDestructionRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgProfileDestructionRequestAck::Decode ()
{
   return asn1PD_MsgProfileDestructionRequestAck (mpContext->GetPtr(), &msgData);
}


/* This file was generated by ASN1C V5.31 on 30-Jan-2007 */

#include "Exercises.h"

void asn1Print_ExercisesIncludes (ASN1ConstCharPtr name, ASN1T_ExercisesIncludes* pvalue)
{
}

void ASN1C_ExercisesIncludes::Print (ASN1ConstCharPtr name)

{
   asn1Print_ExercisesIncludes (name, &msgData);
}

void asn1Print_ExercisesExports (ASN1ConstCharPtr name)
{
}

void ASN1C_ExercisesExports::Print (ASN1ConstCharPtr name)

{
   asn1Print_ExercisesExports (name);
}

void asn1Print_Exercise (ASN1ConstCharPtr name, ASN1T_Exercise* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.name", name);
   rtPrintCharStr (namebuf, pvalue->name);

   sprintf (namebuf, "%s.terrain", name);
   rtPrintCharStr (namebuf, pvalue->terrain);

   sprintf (namebuf, "%s.dataset", name);
   rtPrintCharStr (namebuf, pvalue->dataset);

   sprintf (namebuf, "%s.physical", name);
   rtPrintCharStr (namebuf, pvalue->physical);

}

void ASN1C_Exercise::Print (ASN1ConstCharPtr name)

{
   asn1Print_Exercise (name, &msgData);
}

void asn1Print_ExerciseList (ASN1ConstCharPtr name, ASN1T_ExerciseList* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_Exercise (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ExerciseList::Print (ASN1ConstCharPtr name)

{
   asn1Print_ExerciseList (name, &msgData);
}

void asn1Print_MsgExerciseCreation (ASN1ConstCharPtr name, ASN1T_MsgExerciseCreation* pvalue)
{
   asn1Print_Exercise (name, pvalue);
}

void ASN1C_MsgExerciseCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseCreation (name, &msgData);
}

void asn1Print_MsgExerciseUpdate (ASN1ConstCharPtr name, ASN1T_MsgExerciseUpdate* pvalue)
{
   asn1Print_Exercise (name, pvalue);
}

void ASN1C_MsgExerciseUpdate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseUpdate (name, &msgData);
}

void asn1Print_MsgExerciseDestruction (ASN1ConstCharPtr name, ASN1T_MsgExerciseDestruction* pvalue)
{
   rtPrintCharStr (name, *pvalue);
}

void ASN1C_MsgExerciseDestruction::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseDestruction (name, &msgData);
}

void asn1Print_MsgExerciseCreationRequest (ASN1ConstCharPtr name, ASN1T_MsgExerciseCreationRequest* pvalue)
{
   asn1Print_Exercise (name, pvalue);
}

void ASN1C_MsgExerciseCreationRequest::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseCreationRequest (name, &msgData);
}

void asn1Print_MsgExerciseCreationRequestAck_return_code (ASN1ConstCharPtr name, ASN1T_MsgExerciseCreationRequestAck_return_code* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("success\n"); break;
      case 1: printf ("forbidden\n"); break;
      case 2: printf ("invalid_name\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgExerciseCreationRequestAck_return_code::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseCreationRequestAck_return_code (name, &msgData);
}

void asn1Print_MsgExerciseCreationRequestAck (ASN1ConstCharPtr name, ASN1T_MsgExerciseCreationRequestAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.return_code", name);
   asn1Print_MsgExerciseCreationRequestAck_return_code (namebuf, &pvalue->return_code);

   sprintf (namebuf, "%s.name", name);
   rtPrintCharStr (namebuf, pvalue->name);

}

void ASN1C_MsgExerciseCreationRequestAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseCreationRequestAck (name, &msgData);
}

void asn1Print_MsgExerciseUpdateRequest (ASN1ConstCharPtr name, ASN1T_MsgExerciseUpdateRequest* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.exercise", name);
   asn1Print_Exercise (namebuf, &pvalue->exercise);

   sprintf (namebuf, "%s.name", name);
   rtPrintCharStr (namebuf, pvalue->name);

}

void ASN1C_MsgExerciseUpdateRequest::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseUpdateRequest (name, &msgData);
}

void asn1Print_MsgExerciseUpdateRequestAck_return_code (ASN1ConstCharPtr name, ASN1T_MsgExerciseUpdateRequestAck_return_code* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("success\n"); break;
      case 1: printf ("forbidden\n"); break;
      case 2: printf ("not_found\n"); break;
      case 3: printf ("invalid_name\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgExerciseUpdateRequestAck_return_code::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseUpdateRequestAck_return_code (name, &msgData);
}

void asn1Print_MsgExerciseUpdateRequestAck (ASN1ConstCharPtr name, ASN1T_MsgExerciseUpdateRequestAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.return_code", name);
   asn1Print_MsgExerciseUpdateRequestAck_return_code (namebuf, &pvalue->return_code);

   sprintf (namebuf, "%s.name", name);
   rtPrintCharStr (namebuf, pvalue->name);

}

void ASN1C_MsgExerciseUpdateRequestAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseUpdateRequestAck (name, &msgData);
}

void asn1Print_MsgExerciseDestructionRequest (ASN1ConstCharPtr name, ASN1T_MsgExerciseDestructionRequest* pvalue)
{
   rtPrintCharStr (name, *pvalue);
}

void ASN1C_MsgExerciseDestructionRequest::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseDestructionRequest (name, &msgData);
}

void asn1Print_MsgExerciseDestructionRequestAck_return_code (ASN1ConstCharPtr name, ASN1T_MsgExerciseDestructionRequestAck_return_code* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("success\n"); break;
      case 1: printf ("forbidden\n"); break;
      case 2: printf ("not_found\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_MsgExerciseDestructionRequestAck_return_code::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseDestructionRequestAck_return_code (name, &msgData);
}

void asn1Print_MsgExerciseDestructionRequestAck (ASN1ConstCharPtr name, ASN1T_MsgExerciseDestructionRequestAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.return_code", name);
   asn1Print_MsgExerciseDestructionRequestAck_return_code (namebuf, &pvalue->return_code);

   sprintf (namebuf, "%s.name", name);
   rtPrintCharStr (namebuf, pvalue->name);

}

void ASN1C_MsgExerciseDestructionRequestAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgExerciseDestructionRequestAck (name, &msgData);
}


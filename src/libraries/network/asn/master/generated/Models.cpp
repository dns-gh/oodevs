/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 25-Jan-2007.
 */
#include "Models.h"

/**************************************************************/
/*                                                            */
/*  ModelsIncludes                                            */
/*                                                            */
/**************************************************************/

ASN1C_ModelsIncludes::ASN1C_ModelsIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ModelsIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ModelsIncludes (ASN1CTXT* ctxt_p, ASN1T_ModelsIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ModelsIncludes: start\n");

   /* encode datasetsExports */

   PU_PUSHNAME (ctxt_p, "datasetsExports");

   stat = asn1PE_DatasetsExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_ModelsIncludes: end\n");
   return (stat);
}

int ASN1C_ModelsIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ModelsIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ModelsIncludes (ASN1CTXT* ctxt_p, ASN1T_ModelsIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ModelsIncludes: start\n");

   /* decode datasetsExports */

   PU_PUSHNAME (ctxt_p, "datasetsExports");

   stat = asn1PD_DatasetsExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_ModelsIncludes: end\n");

   return (stat);
}

int ASN1C_ModelsIncludes::Decode ()
{
   return asn1PD_ModelsIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ModelsExports                                             */
/*                                                            */
/**************************************************************/

ASN1C_ModelsExports::ASN1C_ModelsExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ModelsExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ModelsExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_ModelsExports: end\n");
   return (stat);
}

int ASN1C_ModelsExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ModelsExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ModelsExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ModelsExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_ModelsExports: end\n");

   return (stat);
}

int ASN1C_ModelsExports::Decode ()
{
   return asn1PD_ModelsExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Model                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Model::ASN1C_Model (
   ASN1MessageBuffer& msgBuf, ASN1T_Model& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Model (ASN1CTXT* ctxt_p, ASN1T_Model* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Model: start\n");

   /* encode dataset */

   PU_PUSHNAME (ctxt_p, "dataset");

   stat = asn1PE_Dataset (ctxt_p, &pvalue->dataset);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode physical */

   PU_PUSHNAME (ctxt_p, "physical");

   stat = pe_VisibleString (ctxt_p, pvalue->physical, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Model: end\n");
   return (stat);
}

int ASN1C_Model::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Model (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Model (ASN1CTXT* ctxt_p, ASN1T_Model* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Model: start\n");

   /* decode dataset */

   PU_PUSHNAME (ctxt_p, "dataset");

   stat = asn1PD_Dataset (ctxt_p, &pvalue->dataset);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode physical */

   PU_PUSHNAME (ctxt_p, "physical");

   stat = pd_VisibleString (ctxt_p, &pvalue->physical, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Model: end\n");

   return (stat);
}

int ASN1C_Model::Decode ()
{
   return asn1PD_Model (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ModelList                                                 */
/*                                                            */
/**************************************************************/

ASN1C_ModelList::ASN1C_ModelList (
   ASN1MessageBuffer& msgBuf, ASN1T_ModelList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ModelList (ASN1CTXT* ctxt_p, ASN1T_ModelList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ModelList: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Model (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ModelList: end\n");
   return (stat);
}

int ASN1C_ModelList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ModelList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ModelList (ASN1CTXT* ctxt_p, ASN1T_ModelList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ModelList: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Model);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Model (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ModelList: end\n");

   return (stat);
}

int ASN1C_ModelList::Decode ()
{
   return asn1PD_ModelList (mpContext->GetPtr(), &msgData);
}


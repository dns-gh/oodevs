/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 25-Jan-2007.
 */
#include "Games.h"

/**************************************************************/
/*                                                            */
/*  GamesIncludes                                             */
/*                                                            */
/**************************************************************/

ASN1C_GamesIncludes::ASN1C_GamesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_GamesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_GamesIncludes (ASN1CTXT* ctxt_p, ASN1T_GamesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_GamesIncludes: start\n");


   rtdiag ("asn1PE_GamesIncludes: end\n");
   return (stat);
}

int ASN1C_GamesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_GamesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_GamesIncludes (ASN1CTXT* ctxt_p, ASN1T_GamesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_GamesIncludes: start\n");

   /* decode  */

   PU_PUSHNAME (ctxt_p, "");


   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_GamesIncludes: end\n");

   return (stat);
}

int ASN1C_GamesIncludes::Decode ()
{
   return asn1PD_GamesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  GamesExports                                              */
/*                                                            */
/**************************************************************/

ASN1C_GamesExports::ASN1C_GamesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_GamesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_GamesExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_GamesExports: end\n");
   return (stat);
}

int ASN1C_GamesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_GamesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_GamesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_GamesExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_GamesExports: end\n");

   return (stat);
}

int ASN1C_GamesExports::Decode ()
{
   return asn1PD_GamesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Game_status                                               */
/*                                                            */
/**************************************************************/

ASN1C_Game_status::ASN1C_Game_status (
   ASN1MessageBuffer& msgBuf, ASN1T_Game_status& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Game_status (ASN1CTXT* ctxt_p, ASN1T_Game_status value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_Game_status: start\n");

   switch (value) {
      case Game_status::running: ui = 0; break;
      case Game_status::paused: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_Game_status: end\n");
   return (stat);
}

int ASN1C_Game_status::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Game_status (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Game_status (ASN1CTXT* ctxt_p, ASN1T_Game_status* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_Game_status: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = Game_status::running; break;
      case 1: *pvalue = Game_status::paused; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_Game_status: end\n");

   return (stat);
}

int ASN1C_Game_status::Decode ()
{
   return asn1PD_Game_status (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Game                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Game::ASN1C_Game (
   ASN1MessageBuffer& msgBuf, ASN1T_Game& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Game (ASN1CTXT* ctxt_p, ASN1T_Game* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Game: start\n");

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode host */

   PU_PUSHNAME (ctxt_p, "host");

   stat = pe_VisibleString (ctxt_p, pvalue->host, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode exercise_name */

   PU_PUSHNAME (ctxt_p, "exercise_name");

   stat = pe_VisibleString (ctxt_p, pvalue->exercise_name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode start_date */

   PU_PUSHNAME (ctxt_p, "start_date");

   stat = pe_VisibleString (ctxt_p, pvalue->start_date, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PE_Game_status (ctxt_p, pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Game: end\n");
   return (stat);
}

int ASN1C_Game::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Game (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Game (ASN1CTXT* ctxt_p, ASN1T_Game* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Game: start\n");

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode host */

   PU_PUSHNAME (ctxt_p, "host");

   stat = pd_VisibleString (ctxt_p, &pvalue->host, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode exercise_name */

   PU_PUSHNAME (ctxt_p, "exercise_name");

   stat = pd_VisibleString (ctxt_p, &pvalue->exercise_name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode start_date */

   PU_PUSHNAME (ctxt_p, "start_date");

   stat = pd_VisibleString (ctxt_p, &pvalue->start_date, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PD_Game_status (ctxt_p, &pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Game: end\n");

   return (stat);
}

int ASN1C_Game::Decode ()
{
   return asn1PD_Game (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  GameList                                                  */
/*                                                            */
/**************************************************************/

ASN1C_GameList::ASN1C_GameList (
   ASN1MessageBuffer& msgBuf, ASN1T_GameList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_GameList (ASN1CTXT* ctxt_p, ASN1T_GameList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_GameList: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Game (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_GameList: end\n");
   return (stat);
}

int ASN1C_GameList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_GameList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_GameList (ASN1CTXT* ctxt_p, ASN1T_GameList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_GameList: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Game);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Game (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_GameList: end\n");

   return (stat);
}

int ASN1C_GameList::Decode ()
{
   return asn1PD_GameList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameListRequest                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameListRequest::ASN1C_MsgGameListRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameListRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameListRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameListRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameListRequest: start\n");

   /* encode exercise_name */

   PU_PUSHNAME (ctxt_p, "exercise_name");

   stat = pe_VisibleString (ctxt_p, pvalue->exercise_name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgGameListRequest: end\n");
   return (stat);
}

int ASN1C_MsgGameListRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameListRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameListRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameListRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgGameListRequest: start\n");

   /* decode exercise_name */

   PU_PUSHNAME (ctxt_p, "exercise_name");

   stat = pd_VisibleString (ctxt_p, &pvalue->exercise_name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgGameListRequest: end\n");

   return (stat);
}

int ASN1C_MsgGameListRequest::Decode ()
{
   return asn1PD_MsgGameListRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameListResponse_return_code                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameListResponse_return_code::ASN1C_MsgGameListResponse_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameListResponse_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameListResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameListResponse_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgGameListResponse_return_code: start\n");

   switch (value) {
      case MsgGameListResponse_return_code::ok: ui = 0; break;
      case MsgGameListResponse_return_code::forbidden: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgGameListResponse_return_code: end\n");
   return (stat);
}

int ASN1C_MsgGameListResponse_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameListResponse_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameListResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameListResponse_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgGameListResponse_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgGameListResponse_return_code::ok; break;
      case 1: *pvalue = MsgGameListResponse_return_code::forbidden; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgGameListResponse_return_code: end\n");

   return (stat);
}

int ASN1C_MsgGameListResponse_return_code::Decode ()
{
   return asn1PD_MsgGameListResponse_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameListResponse                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameListResponse::ASN1C_MsgGameListResponse (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameListResponse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameListResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameListResponse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameListResponse: start\n");

   PU_NEWFIELD (ctxt_p, "gamesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.gamesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgGameListResponse_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode games */

   if (pvalue->m.gamesPresent) {
      PU_PUSHNAME (ctxt_p, "games");

      stat = asn1PE_GameList (ctxt_p, &pvalue->games);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgGameListResponse: end\n");
   return (stat);
}

int ASN1C_MsgGameListResponse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameListResponse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameListResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameListResponse* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgGameListResponse: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "gamesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.gamesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgGameListResponse_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode games */

   if (pvalue->m.gamesPresent) {
      PU_PUSHNAME (ctxt_p, "games");

      stat = asn1PD_GameList (ctxt_p, &pvalue->games);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgGameListResponse: end\n");

   return (stat);
}

int ASN1C_MsgGameListResponse::Decode ()
{
   return asn1PD_MsgGameListResponse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStartRequest                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStartRequest::ASN1C_MsgGameStartRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStartRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStartRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameStartRequest: start\n");

   PU_NEWFIELD (ctxt_p, "namePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode name */

   if (pvalue->m.namePresent) {
      PU_PUSHNAME (ctxt_p, "name");

      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode exercise */

   PU_PUSHNAME (ctxt_p, "exercise");

   stat = pe_VisibleString (ctxt_p, pvalue->exercise, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgGameStartRequest: end\n");
   return (stat);
}

int ASN1C_MsgGameStartRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStartRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStartRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartRequest* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgGameStartRequest: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "namePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.namePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode name */

   if (pvalue->m.namePresent) {
      PU_PUSHNAME (ctxt_p, "name");

      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode exercise */

   PU_PUSHNAME (ctxt_p, "exercise");

   stat = pd_VisibleString (ctxt_p, &pvalue->exercise, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgGameStartRequest: end\n");

   return (stat);
}

int ASN1C_MsgGameStartRequest::Decode ()
{
   return asn1PD_MsgGameStartRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStartResponse_return_code                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStartResponse_return_code::ASN1C_MsgGameStartResponse_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStartResponse_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStartResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartResponse_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgGameStartResponse_return_code: start\n");

   switch (value) {
      case MsgGameStartResponse_return_code::ok: ui = 0; break;
      case MsgGameStartResponse_return_code::forbidden: ui = 1; break;
      case MsgGameStartResponse_return_code::exercise_not_found: ui = 2; break;
      case MsgGameStartResponse_return_code::game_name_exists: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgGameStartResponse_return_code: end\n");
   return (stat);
}

int ASN1C_MsgGameStartResponse_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStartResponse_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStartResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartResponse_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgGameStartResponse_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgGameStartResponse_return_code::ok; break;
      case 1: *pvalue = MsgGameStartResponse_return_code::forbidden; break;
      case 2: *pvalue = MsgGameStartResponse_return_code::exercise_not_found; break;
      case 3: *pvalue = MsgGameStartResponse_return_code::game_name_exists; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgGameStartResponse_return_code: end\n");

   return (stat);
}

int ASN1C_MsgGameStartResponse_return_code::Decode ()
{
   return asn1PD_MsgGameStartResponse_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStartResponse                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStartResponse::ASN1C_MsgGameStartResponse (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStartResponse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStartResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartResponse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameStartResponse: start\n");

   PU_NEWFIELD (ctxt_p, "gamePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.gamePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgGameStartResponse_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode game */

   if (pvalue->m.gamePresent) {
      PU_PUSHNAME (ctxt_p, "game");

      stat = asn1PE_Game (ctxt_p, &pvalue->game);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgGameStartResponse: end\n");
   return (stat);
}

int ASN1C_MsgGameStartResponse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStartResponse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStartResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameStartResponse* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgGameStartResponse: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "gamePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.gamePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgGameStartResponse_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode game */

   if (pvalue->m.gamePresent) {
      PU_PUSHNAME (ctxt_p, "game");

      stat = asn1PD_Game (ctxt_p, &pvalue->game);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgGameStartResponse: end\n");

   return (stat);
}

int ASN1C_MsgGameStartResponse::Decode ()
{
   return asn1PD_MsgGameStartResponse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStopRequest                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStopRequest::ASN1C_MsgGameStopRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStopRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStopRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameStopRequest: start\n");

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgGameStopRequest: end\n");
   return (stat);
}

int ASN1C_MsgGameStopRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStopRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStopRequest (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgGameStopRequest: start\n");

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgGameStopRequest: end\n");

   return (stat);
}

int ASN1C_MsgGameStopRequest::Decode ()
{
   return asn1PD_MsgGameStopRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStopResponse_return_code                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStopResponse_return_code::ASN1C_MsgGameStopResponse_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStopResponse_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStopResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopResponse_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgGameStopResponse_return_code: start\n");

   switch (value) {
      case MsgGameStopResponse_return_code::ok: ui = 0; break;
      case MsgGameStopResponse_return_code::forbidden: ui = 1; break;
      case MsgGameStopResponse_return_code::game_not_found: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgGameStopResponse_return_code: end\n");
   return (stat);
}

int ASN1C_MsgGameStopResponse_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStopResponse_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStopResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopResponse_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgGameStopResponse_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgGameStopResponse_return_code::ok; break;
      case 1: *pvalue = MsgGameStopResponse_return_code::forbidden; break;
      case 2: *pvalue = MsgGameStopResponse_return_code::game_not_found; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgGameStopResponse_return_code: end\n");

   return (stat);
}

int ASN1C_MsgGameStopResponse_return_code::Decode ()
{
   return asn1PD_MsgGameStopResponse_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgGameStopResponse                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgGameStopResponse::ASN1C_MsgGameStopResponse (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgGameStopResponse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgGameStopResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopResponse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgGameStopResponse: start\n");

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgGameStopResponse_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgGameStopResponse: end\n");
   return (stat);
}

int ASN1C_MsgGameStopResponse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgGameStopResponse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgGameStopResponse (ASN1CTXT* ctxt_p, ASN1T_MsgGameStopResponse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgGameStopResponse: start\n");

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgGameStopResponse_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgGameStopResponse: end\n");

   return (stat);
}

int ASN1C_MsgGameStopResponse::Decode ()
{
   return asn1PD_MsgGameStopResponse (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 25-Jan-2007.
 */
#include "Exercises.h"

/**************************************************************/
/*                                                            */
/*  ExercisesIncludes                                         */
/*                                                            */
/**************************************************************/

ASN1C_ExercisesIncludes::ASN1C_ExercisesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ExercisesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ExercisesIncludes (ASN1CTXT* ctxt_p, ASN1T_ExercisesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ExercisesIncludes: start\n");

   /* encode modelsExports */

   PU_PUSHNAME (ctxt_p, "modelsExports");

   stat = asn1PE_ModelsExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_ExercisesIncludes: end\n");
   return (stat);
}

int ASN1C_ExercisesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExercisesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ExercisesIncludes (ASN1CTXT* ctxt_p, ASN1T_ExercisesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ExercisesIncludes: start\n");

   /* decode modelsExports */

   PU_PUSHNAME (ctxt_p, "modelsExports");

   stat = asn1PD_ModelsExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_ExercisesIncludes: end\n");

   return (stat);
}

int ASN1C_ExercisesIncludes::Decode ()
{
   return asn1PD_ExercisesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ExercisesExports                                          */
/*                                                            */
/**************************************************************/

ASN1C_ExercisesExports::ASN1C_ExercisesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ExercisesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ExercisesExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_ExercisesExports: end\n");
   return (stat);
}

int ASN1C_ExercisesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExercisesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ExercisesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ExercisesExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_ExercisesExports: end\n");

   return (stat);
}

int ASN1C_ExercisesExports::Decode ()
{
   return asn1PD_ExercisesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Exercise                                                  */
/*                                                            */
/**************************************************************/

ASN1C_Exercise::ASN1C_Exercise (
   ASN1MessageBuffer& msgBuf, ASN1T_Exercise& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Exercise (ASN1CTXT* ctxt_p, ASN1T_Exercise* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_Exercise: start\n");

   /* encode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = pe_VisibleString (ctxt_p, pvalue->terrain, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode model */

   PU_PUSHNAME (ctxt_p, "model");

   stat = asn1PE_Model (ctxt_p, &pvalue->model);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_Exercise: end\n");
   return (stat);
}

int ASN1C_Exercise::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Exercise (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Exercise (ASN1CTXT* ctxt_p, ASN1T_Exercise* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_Exercise: start\n");

   /* decode name */

   PU_PUSHNAME (ctxt_p, "name");

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode terrain */

   PU_PUSHNAME (ctxt_p, "terrain");

   stat = pd_VisibleString (ctxt_p, &pvalue->terrain, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode model */

   PU_PUSHNAME (ctxt_p, "model");

   stat = asn1PD_Model (ctxt_p, &pvalue->model);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_Exercise: end\n");

   return (stat);
}

int ASN1C_Exercise::Decode ()
{
   return asn1PD_Exercise (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ExerciseList                                              */
/*                                                            */
/**************************************************************/

ASN1C_ExerciseList::ASN1C_ExerciseList (
   ASN1MessageBuffer& msgBuf, ASN1T_ExerciseList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ExerciseList (ASN1CTXT* ctxt_p, ASN1T_ExerciseList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_ExerciseList: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_Exercise (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_ExerciseList: end\n");
   return (stat);
}

int ASN1C_ExerciseList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ExerciseList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ExerciseList (ASN1CTXT* ctxt_p, ASN1T_ExerciseList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_ExerciseList: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Exercise);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_Exercise (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_ExerciseList: end\n");

   return (stat);
}

int ASN1C_ExerciseList::Decode ()
{
   return asn1PD_ExerciseList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseListRequest                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseListRequest::ASN1C_MsgExerciseListRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseListRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseListRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseListRequest: start\n");

   /* encode filter */

   PU_PUSHNAME (ctxt_p, "filter");

   stat = pe_VisibleString (ctxt_p, pvalue->filter, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExerciseListRequest: end\n");
   return (stat);
}

int ASN1C_MsgExerciseListRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseListRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseListRequest (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExerciseListRequest: start\n");

   /* decode filter */

   PU_PUSHNAME (ctxt_p, "filter");

   stat = pd_VisibleString (ctxt_p, &pvalue->filter, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExerciseListRequest: end\n");

   return (stat);
}

int ASN1C_MsgExerciseListRequest::Decode ()
{
   return asn1PD_MsgExerciseListRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseListResponse_return_code                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseListResponse_return_code::ASN1C_MsgExerciseListResponse_return_code (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseListResponse_return_code& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseListResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListResponse_return_code value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgExerciseListResponse_return_code: start\n");

   switch (value) {
      case MsgExerciseListResponse_return_code::ok: ui = 0; break;
      case MsgExerciseListResponse_return_code::forbidden: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgExerciseListResponse_return_code: end\n");
   return (stat);
}

int ASN1C_MsgExerciseListResponse_return_code::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseListResponse_return_code (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseListResponse_return_code (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListResponse_return_code* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgExerciseListResponse_return_code: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgExerciseListResponse_return_code::ok; break;
      case 1: *pvalue = MsgExerciseListResponse_return_code::forbidden; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgExerciseListResponse_return_code: end\n");

   return (stat);
}

int ASN1C_MsgExerciseListResponse_return_code::Decode ()
{
   return asn1PD_MsgExerciseListResponse_return_code (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExerciseListResponse                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgExerciseListResponse::ASN1C_MsgExerciseListResponse (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExerciseListResponse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExerciseListResponse (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListResponse* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExerciseListResponse: start\n");

   PU_NEWFIELD (ctxt_p, "exercisesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.exercisesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PE_MsgExerciseListResponse_return_code (ctxt_p, pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode exercises */

   if (pvalue->m.exercisesPresent) {
      PU_PUSHNAME (ctxt_p, "exercises");

      stat = asn1PE_ExerciseList (ctxt_p, &pvalue->exercises);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgExerciseListResponse: end\n");
   return (stat);
}

int ASN1C_MsgExerciseListResponse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExerciseListResponse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExerciseListResponse (ASN1CTXT* ctxt_p, ASN1T_MsgExerciseListResponse* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgExerciseListResponse: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "exercisesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.exercisesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode return_code */

   PU_PUSHNAME (ctxt_p, "return_code");

   stat = asn1PD_MsgExerciseListResponse_return_code (ctxt_p, &pvalue->return_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode exercises */

   if (pvalue->m.exercisesPresent) {
      PU_PUSHNAME (ctxt_p, "exercises");

      stat = asn1PD_ExerciseList (ctxt_p, &pvalue->exercises);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgExerciseListResponse: end\n");

   return (stat);
}

int ASN1C_MsgExerciseListResponse::Decode ()
{
   return asn1PD_MsgExerciseListResponse (mpContext->GetPtr(), &msgData);
}


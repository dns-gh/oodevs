// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package MsgsSimToClient;

import "Common.proto";

enum EnumLogSupplyHandlingStatus {
  convoi_en_attente_camions                  = 0;
  convoi_constitution                        = 1;
  convoi_deplacement_vers_point_chargement   = 2;
  convoi_chargement                          = 3;
  convoi_deplacement_vers_point_dechargement = 4;
  convoi_dechargement                        = 5;
  convoi_deplacement_retour                  = 6;
  termine                                    = 7;
}

message OrderAck {
    enum ErrorCode {
        no_error                                = 0;
        error_invalid_unit                      = 1;
        error_invalid_limit                     = 2;
        error_invalid_lima                      = 3;
        error_invalid_mission                   = 4;
        error_invalid_mission_parameters        = 5;
        error_unit_cannot_receive_order         = 6;
        error_invalid_order_conduite            = 7;
        error_invalid_order_mission             = 8;
        error_invalid_order_initial             = 9;
        error_invalid_order_conduite_parameters = 10;
        error_unit_surrendered                  = 11;
        error_invalid_lima_function             = 12;
    }
}

message MsgUnitOrderAck {
   required Common.UnitId      tasker     = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgAutomatOrderAck {
   required Common.AutomatId   tasker     = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgCrowdOrderAck {
   required Common.CrowdId tasker          = 1;
   required OrderAck.ErrorCode  error_code = 2;
}

message MsgFragOrderAck {
   required Common.Tasker      tasker     = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgSetAutomatModeAck {
    enum ErrorCode {
        no_error           = 0;
        error_invalid_unit = 1;
        error_not_allowed  = 2;
    }
   required Common.AutomatId automate   = 1;
   required ErrorCode        error_code = 2;
}

message UnitActionAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_unit      = 1;
        error_automate_embraye  = 2;
        error_invalid_attribute = 3;
        error_unit_surrendered  = 4;
    }
}
message MsgUnitCreationRequestAck  {
    required UnitActionAck.ErrorCode error = 1;
}

message MsgMagicActionAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_attribute = 1;
    }
   required ErrorCode error_code = 1;
}

message MsgUnitMagicActionAck {
   required Common.UnitId           unit       = 1;
   required UnitActionAck.ErrorCode error_code = 2;
}

message MsgObjectMagicActionAck {
    enum ErrorCode {
        no_error                          = 0;
        error_invalid_object              = 1;
        error_invalid_id                  = 2;
        error_invalid_camp                = 3;
        error_invalid_localisation        = 4;
        error_missing_specific_attributes = 5;
        error_invalid_specific_attributes = 6;
    }
    required ErrorCode error_code = 1;
}

message MsgCrowdMagicActionAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_unit      = 1;
        error_invalid_attribute = 2;
    }
    required Common.CrowdId crowd     = 1;
    required ErrorCode           error_code     = 2;
}

message MsgChangeDiplomacyAck {
    required Common.PartyId       party1     = 1;
    required Common.PartyId       party2     = 2;
    required Common.EnumDiplomacy diplomatie = 3;
    enum EnumChangeDiplomacyErrorCode {
        no_error_diplomacy           = 0;
        error_invalid_camp_diplomacy = 1;
    }
    required EnumChangeDiplomacyErrorCode error_code = 4;
}

message HierarchyModificationAck {
    enum ErrorCode {
        no_error_hierarchy                    = 0;
        error_invalid_pion                    = 1;
        error_invalid_automate                = 2;
        error_invalid_formation               = 3;
        error_invalid_automate_tc2            = 4;
        error_invalid_automate_maintenance    = 5;
        error_invalid_automate_sante          = 6;
        error_invalid_automate_supply         = 7;
        error_unit_surrendered_hierarchy      = 8;
        error_invalid_party_hierarchy         = 9;
        error_invalid_knowledge_group         = 10;
        error_parties_mismatched              = 11;
    }
}

message MsgAutomatChangeKnowledgeGroupAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgChangeLogisticLinksAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgAutomatChangeSuperiorAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgUnitChangeSuperiorAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}

message MsgLogSupplyPushFlowAck  {
    enum EnumLogSupplyPushFlow {
        no_error_pushflow               = 0;
        error_invalid_donneur_pushflow  = 1;
        error_invalid_receveur_pushflow = 2;
    }
    optional EnumLogSupplyPushFlow ack = 1;
}

message MsgLogSupplyPullFlowAck  {
    enum EnumLogSupplyPullFlow {
        no_error_pullflow               = 0;
        error_invalid_provider_pullflow = 1;
        error_invalid_receiver_pullflow = 2;
    }
    optional EnumLogSupplyPullFlow ack = 1;
}

message MsgLogSupplyChangeQuotasAck {
    enum LogSupplyChangeQuotas {
        no_error_quotas               = 0;
        error_invalid_donneur_quotas  = 1;
        error_invalid_receveur_quotas = 2;
    }
    optional LogSupplyChangeQuotas ack = 1;
}

message MsgActionCreateFireOrderAck {
    enum EnumActionCreateFireOrderErrorCode {
        no_error                    = 0;
        error_invalid_reporter      = 1;
        error_invalid_target        = 2;
        error_invalid_munition      = 3;
        error_invalid_iteration     = 4;
        error_target_no_illuminated = 5;
    }
    required EnumActionCreateFireOrderErrorCode  error_code = 2;
}

message MsgControlInformation {
   required int32                      current_tick         = 1;
   required Common.MsgDateTime         initial_date_time    = 2;
   required Common.MsgDateTime         date_time            = 3;
   required int32                      tick_duration        = 4;
   required int32                      time_factor          = 5;
   required int32                      checkpoint_frequency = 6;
   required Common.EnumSimulationState status               = 7;
   required bool                       send_vision_cones    = 8;
   required bool                       profiling_enabled    = 9;
   optional Common.MsgDateTime         checkpoint_real_time = 10;
}

message MsgControlProfilingInformation {
   required float  perception = 1;
   required float  decision   = 2;
   required float  action     = 3;
   required float  main_loop  = 4;
}

message MsgControlBeginTick {
   required int32              current_tick = 1;
   required Common.MsgDateTime date_time    = 2;
}

message MsgControlEndTick {
   required int32 current_tick    = 1;
   required int32 tick_duration   = 2;
   required int32 long_pathfinds  = 3;
   required int32 short_pathfinds = 4;
   required int32 memory          = 5;
   required int32 virtual_memory  = 6;
}

message ControlAck {
    enum ErrorCode {
       no_error                  = 0;
       error_already_started     = 1;
       error_not_started         = 2;
       error_not_paused          = 3;
       error_already_paused      = 4;
       error_invalid_time_factor = 5;
       error_invalid_date_time   = 6;
    }
}

message MsgControlDatetimeChangeAck {
    required ControlAck.ErrorCode error_code = 1;
}

message MsgControlChangeTimeFactorAck {
   required int32                time_factor = 1;
   required ControlAck.ErrorCode error_code  = 2;
}

message MsgControlStopAck {
   required ControlAck.ErrorCode error_code = 1;
}

message MsgControlPauseAck {
   required ControlAck.ErrorCode error_code = 1;
}

message MsgControlResumeAck {
   required ControlAck.ErrorCode error_code = 1;
}

message MsgPartyCreation {
   required Common.PartyId       party          = 1;
   required string               name           = 2;
   required Common.EnumDiplomacy type           = 3;
   optional Common.Extension     extension      = 4;
   optional Common.RgbColor      color          = 5;
}

message MsgFormationCreation {
    required Common.FormationId       formation             = 1;
    required Common.PartyId           party                 = 2;
    optional Common.FormationId       parent                = 3;
    required Common.EnumNatureLevel   level                 = 4;
    required string                   name                  = 5;
    required string                   app6symbol            = 6;
    required Common.EnumLogisticLevel logistic_level        = 7;
    optional Common.RgbColor          color                 = 8;
    optional Common.ParentEntity      logistic_base_organic = 9;
}

message MsgFormationUpdate {
    required Common.FormationId       formation = 1;
    optional Common.Extension         extension = 2;
}

message MsgFormationDestruction {
   required Common.FormationId formation = 1;
}

message MsgAutomatCreation {
    required Common.AutomatId              automat         = 1;
    required Common.AutomatType            type            = 2;
    required string                        nom             = 3;
    required Common.ParentEntity           parent          = 4;
    required Common.PartyId                party           = 5;
    optional Common.KnowledgeGroupId       knowledge_group = 6;
    required string                        app6symbol      = 7;
    required Common.EnumLogisticLevel      logistic_level  = 8;
    optional Common.RgbColor               color           = 9;
}

message RulesOfEngagement {
    enum Value {
       none_roe        = 0;
       tir_libre       = 1;
       tir_sur_riposte = 2;
       tir_interdit    = 3;
    }
}

message ForceRatio {
    enum Value {
        none_force_ratio = 0;
        neutre           = 1;
        favorable        = 2;
        defavorable      = 3;
    }
}

message MsgAutomatAttributes {
   required Common.AutomatId                   automat               = 1;
   optional Common.EnumAutomatMode             etat_automate         = 2;
   optional ForceRatio.Value                   rapport_de_force      = 3;
   optional Common.EnumMeetingEngagementStatus combat_de_rencontre   = 4;
   optional Common.EnumOperationalStatus       etat_operationnel     = 5;
   optional RulesOfEngagement.Value            roe                   = 6;
   optional Common.AutomatId                   tc2_organic           = 7;
   optional Common.ParentEntity                logistic_base_organic = 8;
   optional Common.Extension                   extension             = 9;
}

message MsgAutomatDestruction {
   required Common.AutomatId automat = 1;
}

message MsgUnitCreation {
   required Common.UnitId           unit        = 1;
   required Common.UnitType         type        = 2;
   required string                  nom         = 3;
   required Common.AutomatId        automat     = 4;
   required bool                    pc          = 5;
   optional Common.RgbColor         color       = 6;
   optional Common.HumanRepartition repartition = 7;
}

message BorrowedEquipments {
    message BorrowedEquipment {
        required Common.UnitId        owner  = 1;
        required Common.EquipmentType type   = 2;
        required int32                nombre = 3;
    }
    repeated BorrowedEquipment elem = 1;
}

message LentEquipments {
    message LentEquipment {
        required Common.UnitId        borrower = 1;
        required Common.EquipmentType type     = 2;
        required int32               nombre    = 3;
    }
    repeated LentEquipment elem = 1;
}

message ResourceDotations {
    message ResourceDotation {
        required Common.ResourceType type               = 1;
        required int32              quantite_disponible = 2;
    }
    repeated ResourceDotation elem = 1;
}

message EquipmentDotations {
    message EquipmentDotation {
        required Common.EquipmentType type                       = 1;
        required int32                nb_disponibles             = 2;
        required int32                nb_indisponibles           = 3;
        required int32                nb_reparables              = 4;
        required int32                nb_dans_chaine_maintenance = 5;
        required int32                nb_prisonniers             = 6;
    }
    repeated EquipmentDotation elem = 1;
}

message HumanDotations {
    message HumanDotation {
        required Common.EnumHumanRank rang                         = 1;
        required int32                nb_total                     = 2;
        required int32                nb_operationnels             = 3;
        required int32                nb_morts                     = 4;
        required int32                nb_blesses                   = 5;
        required int32                nb_blesses_mentaux           = 6;
        required int32                nb_contamines_nbc            = 7;
        required int32                nb_dans_chaine_sante         = 8;
        required int32                nb_utilises_pour_maintenance = 9;
        required int32                nb_blesses_non_evacues       = 10;
    }
    repeated HumanDotation elem = 1;
}

message ContaminationState {
   optional int32 percentage = 1;
   optional float quantity   = 2;
}

message NBCAgents {
    repeated Common.NBCAgentType elem = 1;
}

message Communication {
    optional bool                     jammed          = 1;
    optional Common.KnowledgeGroupId  knowledge_group = 2;
}

message MsgUnitAttributes {
    enum Posture {
        mouvement           = 0;
        mouvement_discret   = 1;
        arret               = 2;
        poste_reflexe       = 3;
        poste               = 4;
        poste_amenage       = 5;
        poste_prepare_genie = 6;
    }
    enum FireAvailability {
        none_fire_available = 0;
        pret_au_tir         = 1;
        indisponible        = 2;
        engaged             = 3;
    }
    enum CrowdRoe {
        none                                      = 0;
        emploi_force_interdit                     = 1;
        maintien_a_distance_par_moyens_non_letaux = 2;
        dispersion_par_moyens_de_defense_actifs   = 3;
        armes_letales_autorisees                  = 4;
    }
    message Satisfaction {
        optional float safety                = 1;
        optional float lodging               = 2;
        optional float access_to_health_care = 3;
    }
    required Common.UnitId                      unit                          = 1;
    optional HumanDotations                     dotation_eff_personnel        = 2;
    optional EquipmentDotations                 dotation_eff_materiel         = 3;
    optional ResourceDotations                  dotation_eff_ressource        = 4;
    optional LentEquipments                     equipements_pretes            = 5;
    optional BorrowedEquipments                 equipements_empruntes         = 6;
    optional Common.MsgCoordLatLong             position                      = 7;
    optional Common.MsgHeading                  direction                     = 8;
    optional int32                              hauteur                       = 9;
    optional int32                              altitude                      = 10;
    optional int32                              vitesse                       = 11;
    optional int32                              etat_operationnel_brut        = 12;
    optional Common.UnitIdList                  reinforcements                = 13;
    optional Common.UnitId                      reinforced_unit               = 14;
    optional bool                               mort                          = 15;
    optional bool                               neutralise                    = 16;
    optional bool                               mode_furtif_actif             = 17;
    optional bool                               embarque                      = 18;
    optional bool                               transporteurs_disponibles     = 19;
    optional Posture                            posture_old                   = 20;
    optional Posture                            posture_new                   = 21;
    optional int32                              posture_pourcentage           = 22;
    optional int32                              etat_installation             = 23;
    optional bool                               en_tenue_de_protection_nbc    = 24;
    optional NBCAgents                          contamine_par_agents_nbc      = 25;
    optional ContaminationState                 etat_contamination            = 26;
    optional Communication                      communications                = 27;
    optional bool                               radio_emitter_disabled        = 28;
    optional bool                               radio_receiver_disabled       = 29;
    optional bool                               radar_actif                   = 30;
    optional Common.UnitIdList                  transported_units             = 31;
    optional Common.UnitId                      transporting_unit             = 32;
    optional ForceRatio.Value                   rapport_de_force              = 33;
    optional Common.EnumMeetingEngagementStatus combat_de_rencontre           = 34;
    optional Common.EnumOperationalStatus       etat_operationnel             = 35;
    optional FireAvailability                   disponibilite_au_tir_indirect = 36;
    optional RulesOfEngagement.Value            roe                           = 37;
    optional CrowdRoe                           roe_crowd                     = 38;
    optional Common.EnumUnitTiredness           fatigue                       = 39;
    optional Common.EnumUnitMorale              moral                         = 40;
    optional Common.EnumUnitExperience          experience                    = 41;
    optional Common.UnitId                      surrendered_unit              = 42;
    optional bool                               prisonnier                    = 43;
    optional bool                               refugie_pris_en_compte        = 44;
    optional Satisfaction                       satisfaction                  = 45;
    optional string                             critical_intelligence         = 46; //implemented in PIV3 
    optional Common.PartyAdhesions              adhesions                     = 47;
    optional Common.Extension                   extension                     = 48;
}

message MsgUnitPathFind {
   required Common.UnitId  unit       = 1;
   required Common.MsgPath itineraire = 2;
}

message MsgUnitDestruction  {
    required Common.UnitId unit = 1;
}

message MsgUnitEnvironmentType {
    required Common.UnitId unit   = 1;
    required int32         area   = 2;
    required int32         left   = 3;
    required int32         right  = 4;
    required int32         linear = 5;
}

message MsgUnitKnowledgeCreation {
    required Common.UnitKnowledgeId  knowledge       = 1;
    required Common.KnowledgeGroupId knowledge_group = 2;
    required Common.UnitId           unit            = 3;
    required Common.UnitType         type            = 4;
}

enum EnumUnitIdentificationLevel {
    identifiee = 0;
    reconnue   = 1;
    detectee   = 2;
    signale    = 3;
}

message AutomatPerception {
    required Common.AutomatId            automat              = 1;
    required EnumUnitIdentificationLevel identification_level = 2;
}

message SeqOfAutomatPerception {
    repeated AutomatPerception elem = 1;
}
message MsgUnitKnowledgeUpdate {
    required Common.UnitKnowledgeId      knowledge                  = 1;
    required Common.KnowledgeGroupId     knowledge_group            = 2;
    optional int32                       pertinence                 = 3;
    optional EnumUnitIdentificationLevel identification_level       = 4;
    optional EnumUnitIdentificationLevel max_identification_level   = 5;
    optional int32                       etat_op                    = 6;
    optional bool                        mort                       = 7;
    optional Common.MsgCoordLatLong      position                   = 8;
    optional Common.MsgHeading           direction                  = 9;
    optional int32                       speed                      = 10;
    optional Common.PartyId              party                      = 11;
    optional bool                        nature_pc                  = 12;
    optional SeqOfAutomatPerception      perception_par_compagnie   = 13;
    optional Common.UnitId               surrendered_unit           = 14;
    optional bool                        prisonnier                 = 15;
    optional bool                        refugie_pris_en_compte     = 16;
}

message MsgUnitKnowledgeDestruction {
   required Common.UnitKnowledgeId  knowledge       = 1;
   required Common.KnowledgeGroupId knowledge_group = 2;
}

message UnitFireTarget {
    optional Common.UnitId          unit       = 1;
    optional Common.CrowdId    crowd = 2;
    optional Common.MsgCoordLatLong position   = 3;
}
message MsgStartUnitFire {
    required Common.FireId                fire        = 1;
    required Common.UnitId                firing_unit = 2;
    required UnitFireTarget               target      = 3;
    required Common.UnitFireType          type        = 4;
    optional Common.ResourceType          ammunition  = 5;
}

message UnitHumanFireDamage {
   required Common.EnumHumanRank rank           = 1;
   required int32                alive_nbr      = 2;
   required int32                dead_nbr       = 3;
   required int32                wounded_u1_nbr = 4;
   required int32                wounded_u2_nbr = 5;
   required int32                wounded_u3_nbr = 6;
   required int32                wounded_ue_nbr = 7;
}

message SeqOfUnitHumanFireDamage {
   repeated UnitHumanFireDamage elem = 1;
}

message MsgUnitEquipmentFireDamage {
   required Common.EquipmentType equipement_type = 1;
   required uint32               available_nbr   = 2;
   required uint32               unavailable_nbr = 3;
   required uint32               repairable_nbr  = 4;
}

message SeqOfUnitEquipmentFireDamage {
   repeated MsgUnitEquipmentFireDamage elem = 1;
}

message MsgUnitFireDamages {
    required Common.UnitId                target     = 1;
    required SeqOfUnitHumanFireDamage     humans     = 2;
    required SeqOfUnitEquipmentFireDamage equipments = 3;
}

message MsgUnitsFireDamages {
   repeated MsgUnitFireDamages elem = 1;
}

message MsgCrowdFireDamages {
   required Common.CrowdId  target   = 1;
   required int32           dead_nbr = 2;
}

message MsgCrowdsFireDamages {
   repeated MsgCrowdFireDamages elem = 1;
}

message MsgStopUnitFire {
   required Common.FireId        fire           = 1;
   optional MsgUnitsFireDamages  units_damages  = 2;
   optional MsgCrowdsFireDamages crowds_damages = 3;
}

message MsgStartCrowdFire {
   required Common.FireId  fire         = 1;
   required Common.CrowdId firing_crowd = 2;
}

message MsgStopCrowdFire {
   required Common.FireId       fire          = 1;
   required MsgUnitsFireDamages units_damages = 2;
}

message MsgExplosion {
   required Common.ObjectId      object             = 1;
   optional MsgUnitsFireDamages  units_damages      = 2;
   optional MsgCrowdsFireDamages crowds_damages     = 3;
}

message MsgStartFireEffect {
    required Common.FireEffectId       fire_effect  = 1;
    required Common.MsgLocation        location     = 2;
    required Common.EnumFireEffectType type         = 3;
}

message MsgStopFireEffect  {
    required Common.FireEffectId fire_effect = 1;
}

enum EnumReportType {
  information            = 0;
  operational            = 1;
  exceptional_event      = 2;
  warning                = 3;
}

message MsgReport {
    required Common.ReportId             report     = 1;
    required Common.Tasker               source     = 2;
    required Common.ReportType           type       = 3;
    required Common.ReportCategory       category   = 4;
    required Common.MsgDateTime          time       = 5;
    optional Common.MsgMissionParameters parameters = 6;
}

message MsgInvalidateReport {
    required Common.ReportId report = 1;
    required Common.Tasker   source = 2;
}

message MsgDecisionalState {
   required Common.Tasker source = 1;
   required string        key    = 2;
   required string        value  = 3;
}

message MsgDebugPoints {
   required Common.Tasker              source      = 1;
   required Common.MsgCoordLatLongList coordinates = 2;
}

message SeqOfHeading {
   repeated Common.MsgHeading elem = 1;
}

message MsgVisionCone {
   required Common.MsgCoordLatLong origin     = 1;
   required int32                  height     = 2;
   required string                 sensor     = 3;
   required SeqOfHeading           directions = 4;
}

message SeqOfVisionCone {
   repeated MsgVisionCone elem = 1;
}

message MsgUnitVisionCones {
   required Common.UnitId   unit       = 1;
   required SeqOfVisionCone cones      = 2;
   required float           elongation = 3;
}

message MsgUnitDetection {
   required Common.UnitId             observer           = 1;
   required Common.UnitId             detected_unit      = 2;
   required Common.EnumUnitVisibility current_visibility = 3;
   required Common.EnumUnitVisibility max_visibility     = 4;
}

message MsgObjectDetection {
   required Common.UnitId             observer        = 1;
   required Common.ObjectId           detected_object = 2;
   required Common.EnumUnitVisibility visibility      = 3;
}

message MsgCrowdConcentrationDetection {
   required Common.UnitId               observer               = 1;
   required Common.CrowdId              detected_crowd         = 2;
   required Common.CrowdConcentrationId detected_concentration = 3;
   required Common.EnumUnitVisibility   visibility             = 4;
}

message MsgCrowdFlowDetection {
   required Common.UnitId      observer            = 1;
   required Common.CrowdId     detected_crowd      = 2;
   required Common.CrowdFlowId detected_flow       = 3;
   required Common.MsgPath     visible_flow        = 4;
}

message MsgObjectCreation {
   required Common.ObjectId            object     = 1;
   required Common.ObjectType          type       = 2;
   required string                     name       = 3;
   required Common.PartyId             party      = 4;
   required Common.MsgLocation         location   = 5;
   required Common.ObjectAttributes    attributes = 6;
}

message MsgObjectDestruction  {
    required Common.ObjectId object = 1;
}

message MsgObjectUpdate {
   required Common.ObjectId            object     = 1;
   optional Common.MsgLocation         location   = 2;
   required Common.ObjectAttributes    attributes = 3;
}

message MsgObjectKnowledgeCreation {
   required Common.ObjectKnowledgeId   knowledge       = 1;
   required Common.PartyId             party           = 2;
   required Common.ObjectId            object          = 3;
   required Common.ObjectType          type            = 4;
   required Common.ObjectAttributes    attributes      = 5;
   optional Common.KnowledgeGroupId    knowledge_group = 6;
}

message MsgObjectKnowledgeUpdate {
   required Common.ObjectKnowledgeId   knowledge           = 1;
   required Common.PartyId             party               = 2;
   optional Common.ObjectId            object              = 3;
   optional int32                      relevance           = 4;
   optional Common.MsgLocation         location            = 5;
   optional Common.ObjectAttributes    attributes          = 6;
   optional bool                       perceived           = 7;
   optional Common.AutomatIdList       perceiving_automats = 8;
   optional Common.KnowledgeGroupId    knowledge_group     = 9;
}

message MsgObjectKnowledgeDestruction {
   required Common.ObjectKnowledgeId knowledge = 1;
   required Common.PartyId           party     = 2;
}

message MsgUrbanKnowledgeCreation {
    required Common.UrbanObjectKnowledgeId knowledge   = 1;
    required Common.PartyId                party       = 2;
    required Common.ObjectId               object      = 3;
}

message MsgUrbanKnowledgeUpdate {
    required Common.UrbanObjectKnowledgeId knowledge            = 1;
    required Common.PartyId                party                = 2;
    required Common.ObjectId               object               = 3; 
    optional int32                         progress             = 4;
    optional int32                         maxProgress          = 5;
    optional bool                          perceived            = 6;
    optional Common.AutomatIdList          automat_perceptions  = 7;
}

message MsgLogMedicalHandlingCreation {
   required Common.MedicalRequestId request          = 1;
   required Common.UnitId           unit             = 2;
   required int32                   tick_creation    = 3;
   required Common.EnumHumanRank    rang             = 4;
   required Common.EnumHumanWound   blessure         = 5;
   optional bool                    blesse_mental    = 6;
   optional bool                    contamine_nbc    = 7;
}

message MsgLogMedicalHandlingUpdate {
    required Common.MedicalRequestId             request                = 1;
    required Common.UnitId                       unit                   = 2;
    optional Common.UnitId                       provider               = 3;
    optional Common.EnumHumanWound               blessure               = 4;
    optional bool                                blesse_mental          = 5;
    optional bool                                contamine_nbc          = 6;
    optional Common.EnumLogMedicalHandlingStatus etat                   = 7;
    optional bool                                diagnostique_effectue  = 8;
}

message MsgLogMedicalHandlingDestruction {
   required Common.MedicalRequestId request = 1;
   required Common.UnitId           unit    = 2;
}

message MsgLogMedicalEquipmentAvailability{
   required Common.EquipmentType equipment_type = 1;
   required int32                nbr_total       = 2;
   required int32                nbr_disponibles = 3;
   required int32                nbr_au_travail  = 4;
   optional int32                nbr_pretes      = 5;
   optional int32                nbr_au_repos    = 6;
}

message SeqOfLogMedicalEquipmentAvailability {
   repeated MsgLogMedicalEquipmentAvailability elem = 1;
}

message MsgLogMedicalState {
    required Common.UnitId                        unit                                = 1;
    optional bool                                 chaine_activee                      = 2;
    optional Common.MsgLogMedicalPriorities       priorites                           = 3;
    optional Common.AutomatIdList                 tactical_priorities                 = 4;
    optional SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve    = 5;
    optional SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
    optional SeqOfLogMedicalEquipmentAvailability disponibilites_medecins             = 7;
}

message MsgLogMaintenanceHandlingCreation {
   required Common.MaintenanceRequestId request       = 1;
   required Common.UnitId               unit          = 2;
   required int32                       tick_creation = 3;
   required Common.EquipmentType        equipement    = 4;
   required Common.BreakdownType        breakdown     = 5;
}

message MsgLogMaintenanceHandlingUpdate {
   required Common.MaintenanceRequestId             request                 = 1;
   required Common.UnitId                           unit                    = 2;
   required Common.UnitId                           provider                = 3;
   optional Common.EnumLogMaintenanceHandlingStatus etat                    = 4;
   optional bool                                    diagnostique_effectue   = 5;
}

message MsgLogMaintenanceHandlingDestruction {
   required Common.MaintenanceRequestId request = 1;
   required Common.UnitId               unit    = 2;
}

message MsgLogMaintenanceEquipmentAvailability {
   required Common.EquipmentType equipment_type = 1;
   required int32 nbr_total       = 2;
   required int32 nbr_disponibles = 3; 
   required int32 nbr_au_travail  = 4;
   optional int32 nbr_pretes      = 5;
   optional int32 nbr_au_repos    = 6; 
}

message SeqOfLogMaintenanceEquipmentAvailability {
   repeated MsgLogMaintenanceEquipmentAvailability elem = 1;
}

message MsgLogMaintenanceState {
   required Common.UnitId                            unit                       = 1;
   optional bool                                     chaine_activee             = 2;
   optional Common.EnumLogMaintenanceRegimeTravail   regime_travail             = 3;
   optional Common.MsgLogMaintenancePriorities       priorites                  = 4;
   optional Common.AutomatIdList                     priorites_tactiques        = 5;
   optional SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
   optional SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
}

message MsgLogSupplyHandlingCreation {
   optional Common.SupplyRequestId request       = 1;
   optional Common.AutomatId       consumer      = 2;
   optional int32                  tick_creation = 3;
   optional SeqOfDotationQuery     dotations     = 4;
}

message MsgDotationQuery {
   optional Common.ResourceType resource            = 1;
   optional int32               quantite_demandee   = 2;
   optional int32               quantite_accordee   = 3;
   optional int32               quantite_en_transit = 4;
}

message SeqOfDotationQuery {
   repeated MsgDotationQuery elem = 1;
}
 
message MsgLogSupplyHandlingUpdate {
   optional Common.SupplyRequestId      request         = 1;
   optional Common.AutomatId            consumer        = 2;
   optional Common.ParentEntity            supplier        = 3;
   optional Common.ParentEntity            convoy_provider = 4;
   optional Common.UnitId               convoying_unit  = 5;
   optional EnumLogSupplyHandlingStatus etat            = 6;
   optional SeqOfDotationQuery          dotations       = 7;
}

message MsgLogSupplyHandlingDestruction {
   required Common.SupplyRequestId request  = 1;
   required Common.AutomatId       consumer = 2;
}

message MsgLogSupplyEquimentAvailability {
   optional Common.EquipmentType equipment       = 1;
   optional int32                nbr_total       = 2;
   optional int32                nbr_disponibles = 3;
   optional int32                nbr_au_travail  = 4;
   optional int32                nbr_pretes      = 5;
   optional int32                nbr_au_repos    = 6;
}

message SeqOfLogSupplyEquimentAvailability {
   repeated MsgLogSupplyEquimentAvailability elem = 1;
}

message MsgLogSupplyState {
    optional Common.UnitId                       unit                                 = 1;
    optional bool                                chaine_activee                       = 2;
    optional Common.SeqOfDotationStock           stocks                               = 3;
    optional SeqOfLogSupplyEquimentAvailability  disponibilites_transporteurs_convois = 4;
}

message MsgLogSupplyQuotas {
    required Common.ParentEntity       supplied = 1;
    required Common.SeqOfDotationQuota quotas  = 2;
}

message MsgCrowdCreation {
   required Common.CrowdId          crowd       = 1;
   required Common.CrowdType        type        = 2;
   optional string                  nom         = 3;
   required Common.PartyId          party       = 4;
   required Common.HumanRepartition repartition = 5;
}

message MsgCrowdUpdate {
   required Common.CrowdId        crowd                 = 1;
   optional int32                 domination            = 2;
   optional Common.PartyAdhesions adhesions             = 3;
   optional string                critical_intelligence = 4;
   optional float                 armed_individuals     = 5;
   optional int32                 healthy               = 6;
   optional int32                 wounded               = 7;
   optional int32                 contaminated          = 8;
   optional int32                 dead                  = 9;
   optional Common.Extension      extension             = 10;
}

message MsgCrowdDestruction {
   required Common.CrowdId crowd = 1;
}

message MsgCrowdConcentrationCreation {
   required Common.CrowdConcentrationId concentration = 1;
   required Common.CrowdId              crowd         = 2;
   required Common.MsgCoordLatLong      position      = 3;
}

message MsgCrowdConcentrationDestruction {
   required Common.CrowdConcentrationId concentration = 1;
   required Common.CrowdId              crowd         = 2;
}

message MsgCrowdConcentrationUpdate {
   required Common.CrowdConcentrationId concentration = 1;
   required Common.CrowdId              crowd         = 2;
   optional int32                       healthy       = 3;
   optional int32                       wounded       = 4;
   optional int32                       contaminated  = 5;
   optional int32                       dead          = 6;
   optional Common.EnumCrowdAttitude    attitude      = 7;
}

message MsgCrowdFlowCreation {
   required Common.CrowdFlowId  flow  = 1;
   required Common.CrowdId      crowd = 2;
}

message MsgCrowdFlowDestruction {
   required Common.CrowdFlowId  flow  = 1;
   required Common.CrowdId      crowd = 2;
}

message MsgCrowdFlowUpdate {
   required Common.CrowdFlowId       flow         = 1;
   required Common.CrowdId           crowd        = 2;
   optional Common.MsgPath           parts        = 3;
   optional Common.MsgHeading        direction    = 4;
   optional int32                    speed        = 5;
   optional int32                    healthy      = 6;
   optional int32                    wounded      = 7;
   optional int32                    contaminated = 8;
   optional int32                    dead         = 9;
   optional Common.EnumCrowdAttitude attitude     = 10;
}

message MsgCrowdKnowledgeCreation {
   required Common.CrowdKnowledgeId  knowledge       = 1;
   required Common.KnowledgeGroupId  knowledge_group = 2;
   optional Common.CrowdId           crowd           = 3;
   optional Common.PartyId           party           = 4;
}

message MsgCrowdKnowledgeUpdate {
   required Common.CrowdKnowledgeId  knowledge             = 1;
   required Common.KnowledgeGroupId  knowledge_group       = 2;
   optional int32                    etat_domination       = 3;
   optional string                   critical_intelligence = 4;
}

message MsgCrowdKnowledgeDestruction {
   required Common.CrowdKnowledgeId  knowledge       = 1;
   required Common.KnowledgeGroupId  knowledge_group = 2;
}

message MsgCrowdConcentrationKnowledgeCreation {
    required Common.CrowdConcentrationKnowledgeId  knowledge       = 1;
    required Common.CrowdKnowledgeId               crowd           = 2;
    required Common.KnowledgeGroupId               knowledge_group = 3;
    required Common.CrowdConcentrationId           concentration   = 4;
    optional Common.MsgCoordLatLong                position        = 5;
}

message MsgCrowdConcentrationKnowledgeUpdate {
    required Common.CrowdConcentrationKnowledgeId  knowledge          = 1;
    required Common.CrowdKnowledgeId               crowd              = 2;
    required Common.KnowledgeGroupId               knowledge_group    = 3;
    optional Common.CrowdConcentrationId           concentration      = 4;
    optional int32                                 nb_humains_vivants = 5;
    optional int32                                 nb_humains_morts   = 6;
    optional Common.EnumCrowdAttitude              attitude           = 7;
    optional int32                                 pertinence         = 8;
    optional bool                                  est_percu          = 9;
}

message MsgCrowdConcentrationKnowledgeDestruction {
    required Common.CrowdConcentrationKnowledgeId  knowledge       = 1;
    required Common.CrowdKnowledgeId               crowd           = 2;
    required Common.KnowledgeGroupId               knowledge_group = 3;
}

message MsgCrowdFlowKnowledgeCreation {
    required Common.CrowdFlowKnowledgeId   knowledge  = 1;
    required Common.CrowdKnowledgeId       crowd      = 2;
    required Common.KnowledgeGroupId       knowledge_group = 3;
    required Common.CrowdFlowId            flow            = 4;
}

message MsgFlowPart {
   required Common.MsgPath  forme      = 1;
   required int32           pertinence = 2;
}

message SeqOfFlowPart {
   repeated MsgFlowPart elem = 1;
}

message MsgCrowdFlowKnowledgeUpdate {
    required Common.CrowdFlowKnowledgeId   knowledge           = 1;
    required Common.CrowdKnowledgeId       crowd               = 2;
    required Common.KnowledgeGroupId       knowledge_group     = 3;
    optional Common.CrowdFlowId            flow                = 4;
    optional SeqOfFlowPart                 portions_flux       = 5;
    optional Common.MsgHeading             direction           = 6;
    optional int32                         vitesse             = 7;
    optional int32                         nb_humains_vivants  = 8;
    optional int32                         nb_humains_morts    = 9;
    optional Common.EnumCrowdAttitude      attitude            = 10;
    optional bool                          est_percu           = 11;
}

message MsgCrowdFlowKnowledgeDestruction {
    required Common.CrowdFlowKnowledgeId   knowledge       = 1;
    required Common.CrowdKnowledgeId       crowd           = 2;
    required Common.KnowledgeGroupId       knowledge_group = 3;
}

// Folk
message MsgFolkCreation_profiles {
   repeated string elem = 1;
}
message MsgFolkCreation_activities {
   repeated string elem = 1;
}
message MsgFolkCreation {
   required MsgFolkCreation_profiles    profiles       = 1;
   required MsgFolkCreation_activities  activities     = 2;
   optional int32                       container_size = 3;
   optional int32                       edge_number    = 4;
}
message MsgFolkGraphEdgeUpdate {
   required int32 folk             = 1;
   required int32 shape_id         = 2;
   repeated int32 crowd_occupation = 3;
}
message MsgFolkGraphUpdate {
   repeated MsgFolkGraphEdgeUpdate elem = 1;
}

// Checkpoints
message MsgControlCheckPointSetFrequencyAck {}
message MsgControlCheckPointSaveNowAck      {}
message MsgControlCheckPointSaveBegin       {}
message MsgControlCheckPointSaveBeginAck    {}
message MsgControlCheckPointSaveEnd {
    optional string name = 1;
}
message MsgControlCheckPointListAck      {}
message MsgControlCheckPointList {
    repeated string checkpoint = 1;
}
message MsgControlCheckPointDeleteAck    {}

// Current State / Initialization
message MsgControlSendCurrentStateBegin {}
message MsgControlSendCurrentStateEnd   {}

message UrbanAttributes {
    message Architecture
    {
        required float  height              = 1;
        required int32  floor_number        = 2;
        required string roof_shape          = 3;
        required string material            = 4;
        required float  occupation          = 5;
        required float  trafficability      = 6;
        required bool   parking_available   = 7 [default = false];
    }
    message Structure
    {
        required uint32 state = 1;
    }
    message Infrastructures {
        message Infrastructure {
          required string type      = 1;
          required bool   active    = 2;
          required float  threshold = 3;
        }
        repeated Common.ResourceNetwork resource_network = 1;
        optional Infrastructure infrastructure = 2;
    }

    optional Architecture          architecture    = 1;
    optional Structure             structure       = 2;    
    optional Common.RgbaColor      color           = 3;
    optional Infrastructures       infrastructures = 4;
    repeated Common.UrbanUsage     usages          = 5;
}

message MsgUrbanCreation {
   required Common.ObjectId    object       = 1;
   required string             name         = 2;
   required Common.MsgLocation location     = 3;
   optional UrbanAttributes    attributes   = 4;
   optional Common.ObjectId    parent       = 5;
}

message MsgUrbanDetection {
    required Common.UnitId             observer     = 1;
    required Common.ObjectId           object       = 2;
    required Common.EnumUnitVisibility visibility   = 3;
}

message MsgUrbanUpdate {
   required Common.ObjectId      object       = 1;
   optional Common.MsgLocation   location     = 2;
   optional UrbanAttributes      attributes   = 3;
}

// Knowledge groups
message MsgKnowledgeGroupCreation {
   required Common.KnowledgeGroupId knowledge_group = 1;
   required Common.PartyId          party           = 2;
   optional Common.KnowledgeGroupId parent          = 3;
   required string                  type            = 4;
   optional bool                    jam             = 5;
   required string                  name            = 6 [default = ""];                    
}

message MsgKnowledgeGroupUpdate {
   required Common.KnowledgeGroupId knowledge_group = 1;
   optional Common.PartyId          party           = 2;
   optional Common.KnowledgeGroupId parent          = 3;
   optional bool                    enabled         = 4;
   optional string                  type            = 5;
}

message KnowledgeGroupAck {
    enum ErrorCode {
       no_error                     = 0;
       error_invalid_unit           = 1;
       error_invalid_superior       = 2;
       error_invalid_camp           = 3;
       error_invalid_knowledgegroup = 4;
       error_invalid_type           = 5;    
    }
}

message MsgKnowledgeGroupMagicActionAck {
    required Common.KnowledgeGroupId     knowledge_group = 1;
    required KnowledgeGroupAck.ErrorCode error_code      = 2;
}

message MsgKnowledgeGroupCreationAck {
    required Common.KnowledgeGroupId     knowledge_group = 1;
    required KnowledgeGroupAck.ErrorCode error_code      = 2;
}

message MsgKnowledgeGroupDestruction {
    required Common.KnowledgeGroupId knowledge_group = 1;
    required Common.PartyId          party           = 2;
}

// Weather
message MsgControlGlobalWeatherAck {}
message MsgControlLocalWeatherAck {}

message MsgControlGlobalWeather {
    required Common.WeatherId            weather    = 1;
    required Common.MsgWeatherAttributes attributes = 2;
}

message MsgControlLocalWeatherCreation {
   required Common.WeatherId            weather                 = 1;
   optional Common.MsgCoordLatLong      top_left_coordinate     = 2;
   optional Common.MsgCoordLatLong      bottom_right_coordinate = 3;
   optional Common.MsgWeatherAttributes attributes              = 4;

}

message MsgControlLocalWeatherDestruction {
   required Common.WeatherId weather = 1;
}

// Populations
message MsgPopulationCreation {
    required Common.PopulationId   id        = 1;
    required Common.PartyId        party     = 2;
    required Common.PopulationType type      = 3;
    required string                name      = 4;
    repeated Common.ObjectId       objects   = 5;
}

message MsgPopulationUpdate {
    message MotivationSatisfaction {
        required string motivation = 1; // motivationType = "home", "office", ...
        required float  percentage  = 2;
    }
    message ResourceSatisfaction {
        required Common.ResourceType resource = 1;
        required float               value    = 2;
    }
    message Satisfaction {
        repeated ResourceSatisfaction   resources   = 1;
        repeated MotivationSatisfaction motivations = 2;
        optional float                  lodging     = 3;
        optional float                  health      = 4;
        optional float                  safety      = 5;
    }
    message BlockOccupation {
         message UsageOccupation {
             required string usage  = 1;
             required int32  number = 2;
         }
         required Common.ObjectId object  = 1;
         repeated UsageOccupation persons = 2;
     }

    required Common.PopulationId   id           = 1;
    optional int32                 healthy      = 2;
    optional int32                 wounded      = 3;
    optional int32                 dead         = 4;
    optional Common.PartyAdhesions adhesions    = 5;
    optional Satisfaction          satisfaction = 6;
    optional string                motivation   = 7; 
    repeated BlockOccupation       occupations  = 8;
    optional Common.Extension      extension    = 9;
}

// Message container
message MsgSimToClient {
    message Content {
        optional MsgUnitOrderAck                                unit_order_ack                                 = 1;
        optional MsgAutomatOrderAck                             automat_order_ack                              = 2;
        optional MsgCrowdOrderAck                               crowd_order_ack                                = 3;
        optional MsgFragOrderAck                                frag_order_ack                                 = 4;
        optional MsgSetAutomatModeAck                           set_automat_mode_ack                           = 5;
        optional MsgUnitCreationRequestAck                      unit_creation_request_ack                      = 6;
        optional MsgMagicActionAck                              magic_action_ack                               = 7;
        optional MsgUnitMagicActionAck                          unit_magic_action_ack                          = 8;
        optional MsgObjectMagicActionAck                        object_magic_action_ack                        = 9;
        optional MsgCrowdMagicActionAck                         crowd_magic_action_ack                         = 10;
        optional MsgChangeDiplomacyAck                          change_diplomacy_ack                           = 11;
        optional MsgAutomatChangeKnowledgeGroupAck              automat_change_knowledge_group_ack             = 12;
        optional MsgChangeLogisticLinksAck                      automat_change_logistic_links_ack              = 13;
        optional MsgAutomatChangeSuperiorAck                    automat_change_superior_ack                    = 14;
        optional MsgUnitChangeSuperiorAck                       unit_change_superior_ack                       = 15;
        optional MsgLogSupplyPushFlowAck                        log_supply_push_flow_ack                       = 16;
        optional MsgLogSupplyChangeQuotasAck                    log_supply_change_quotas_ack                   = 17;
        optional MsgControlInformation                          control_information                            = 18;
        optional MsgControlProfilingInformation                 control_profiling_information                  = 19;
        optional MsgControlBeginTick                            control_begin_tick                             = 20;
        optional MsgControlEndTick                              control_end_tick                               = 21;
        optional MsgControlStopAck                              control_stop_ack                               = 22;
        optional MsgControlPauseAck                             control_pause_ack                              = 23;
        optional MsgControlResumeAck                            control_resume_ack                             = 24;
        optional MsgControlChangeTimeFactorAck                  control_change_time_factor_ack                 = 25;
        optional MsgControlDatetimeChangeAck                    control_date_time_change_ack                   = 26;
        optional MsgControlCheckPointSaveEnd                    control_checkpoint_save_end                    = 27;
        optional MsgFormationCreation                           formation_creation                             = 28;
        optional MsgPartyCreation                               party_creation                                 = 29;
        optional MsgAutomatCreation                             automat_creation                               = 30;
        optional MsgAutomatAttributes                           automat_attributes                             = 31;
        optional MsgUnitCreation                                unit_creation                                  = 32;
        optional MsgUnitAttributes                              unit_attributes                                = 33;
        optional MsgUnitPathFind                                unit_pathfind                                  = 34;
        optional MsgUnitDestruction                             unit_destruction                               = 35;
        optional MsgUnitEnvironmentType                         unit_environment_type                          = 36;
        optional Common.MsgChangeDiplomacy                      change_diplomacy                               = 37;
        optional Common.MsgUnitChangeSuperior                   unit_change_superior                           = 38;
        optional Common.MsgChangeLogisticLinks                  automat_change_logistic_links                  = 39;
        optional Common.MsgAutomatChangeKnowledgeGroup          automat_change_knowledge_group                 = 40;
        optional Common.MsgAutomatChangeSuperior                automat_change_superior                        = 41;
        optional MsgUnitKnowledgeCreation                       unit_knowledge_creation                        = 42;
        optional MsgUnitKnowledgeUpdate                         unit_knowledge_update                          = 43;
        optional MsgUnitKnowledgeDestruction                    unit_knowledge_destruction                     = 44;
        optional MsgStartUnitFire                               start_unit_fire                                = 45;
        optional MsgStopUnitFire                                stop_unit_fire                                 = 46;
        optional MsgStartCrowdFire                              start_crowd_fire                               = 47;
        optional MsgStopCrowdFire                               stop_crowd_fire                                = 48;
        optional MsgExplosion                                   explosion                                      = 49;
        optional MsgStartFireEffect                             start_fire_effect                              = 50;
        optional MsgStopFireEffect                              stop_fire_effect                               = 51;
        optional MsgReport                                      report                                         = 52;
        optional MsgInvalidateReport                            invalidate_report                              = 53;
        optional MsgDecisionalState                             decisional_state                               = 55;
        optional MsgDebugPoints                                 debug_points                                   = 56;
        optional MsgUnitVisionCones                             unit_vision_cones                              = 57;
        optional MsgUnitDetection                               unit_detection                                 = 58;
        optional MsgObjectDetection                             object_detection                               = 59;
        optional MsgCrowdConcentrationDetection                 crowd_concentration_detection                  = 60;
        optional MsgCrowdFlowDetection                          crowd_flow_detection                           = 61;
        optional Common.MsgUnitOrder                            unit_order                                     = 62;
        optional Common.MsgAutomatOrder                         automat_order                                  = 63;
        optional Common.MsgCrowdOrder                           crowd_order                                    = 64;
        optional MsgObjectCreation                              object_creation                                = 65;
        optional MsgObjectDestruction                           object_destruction                             = 66;
        optional MsgObjectUpdate                                object_update                                  = 67;
        optional MsgObjectKnowledgeCreation                     object_knowledge_creation                      = 68;
        optional MsgObjectKnowledgeUpdate                       object_knowledge_update                        = 69;
        optional MsgObjectKnowledgeDestruction                  object_knowledge_destruction                   = 70;
        optional MsgLogMedicalHandlingCreation                  log_medical_handling_creation                  = 71;
        optional MsgLogMedicalHandlingUpdate                    log_medical_handling_update                    = 72;
        optional MsgLogMedicalHandlingDestruction               log_medical_handling_destruction               = 73;
        optional MsgLogMedicalState                             log_medical_state                              = 74;
        optional MsgLogMaintenanceHandlingCreation              log_maintenance_handling_creation              = 75;
        optional MsgLogMaintenanceHandlingUpdate                log_maintenance_handling_update                = 76;
        optional MsgLogMaintenanceHandlingDestruction           log_maintenance_handling_destruction           = 77;
        optional MsgLogMaintenanceState                         log_maintenance_state                          = 78;
        optional MsgLogSupplyHandlingCreation                   log_supply_handling_creation                   = 79;
        optional MsgLogSupplyHandlingUpdate                     log_supply_handling_update                     = 80;
        optional MsgLogSupplyHandlingDestruction                log_supply_handling_destruction                = 81;
        optional MsgLogSupplyState                              log_supply_state                               = 82;
        optional MsgLogSupplyQuotas                             log_supply_quotas                              = 83;
        optional MsgCrowdCreation                               crowd_creation                                 = 84;
        optional MsgCrowdUpdate                                 crowd_update                                   = 85;
        optional MsgCrowdConcentrationCreation                  crowd_concentration_creation                   = 86;
        optional MsgCrowdConcentrationDestruction               crowd_concentration_destruction                = 87;
        optional MsgCrowdConcentrationUpdate                    crowd_concentration_update                     = 88;
        optional MsgCrowdFlowCreation                           crowd_flow_creation                            = 89;
        optional MsgCrowdFlowDestruction                        crowd_flow_destruction                         = 90;
        optional MsgCrowdFlowUpdate                             crowd_flow_update                              = 91;
        optional MsgCrowdKnowledgeCreation                      crowd_knowledge_creation                       = 92;
        optional MsgCrowdKnowledgeUpdate                        crowd_knowledge_update                         = 93;
        optional MsgCrowdKnowledgeDestruction                   crowd_knowledge_destruction                    = 94;
        optional MsgCrowdConcentrationKnowledgeCreation         crowd_concentration_knowledge_creation         = 95;
        optional MsgCrowdConcentrationKnowledgeDestruction      crowd_concentration_knowledge_destruction      = 96;
        optional MsgCrowdConcentrationKnowledgeUpdate           crowd_concentration_knowledge_update           = 97;
        optional MsgCrowdFlowKnowledgeCreation                  crowd_flow_knowledge_creation                  = 98;
        optional MsgCrowdFlowKnowledgeDestruction               crowd_flow_knowledge_destruction               = 99;
        optional MsgCrowdFlowKnowledgeUpdate                    crowd_flow_knowledge_update                    = 100;
        optional MsgFolkCreation                                folk_creation                                  = 101;
        optional MsgFolkGraphUpdate                             folk_graph_update                              = 102;
        optional MsgControlGlobalWeatherAck                     control_global_weather_ack                     = 103;
        optional MsgControlLocalWeatherAck                      control_local_weather_ack                      = 104;
        optional MsgControlCheckPointSaveBegin                  control_checkpoint_save_begin                  = 105;
        optional MsgControlCheckPointSetFrequencyAck            control_checkpoint_set_frequency_ack           = 106;
        optional MsgControlCheckPointSaveNowAck                 control_checkpoint_save_now_ack                = 107;
        optional MsgControlSendCurrentStateBegin                control_send_current_state_begin               = 108;
        optional MsgControlSendCurrentStateEnd                  control_send_current_state_end                 = 109;
        optional MsgUrbanCreation                               urban_creation                                 = 110;
        optional MsgUrbanUpdate                                 urban_update                                   = 111;
        optional MsgUrbanKnowledgeCreation                      urban_knowledge_creation                       = 112;
        optional MsgUrbanKnowledgeUpdate                        urban_knowledge_update                         = 113;
        optional Common.StockResource                           stock_resource                                 = 115;
        optional MsgUrbanDetection                              urban_detection                                = 116;
        optional MsgKnowledgeGroupMagicActionAck                knowledge_group_magic_action_ack               = 117;
        optional MsgKnowledgeGroupCreation                      knowledge_group_creation                       = 118;
        optional MsgKnowledgeGroupUpdate                        knowledge_group_update                         = 119;
        optional MsgKnowledgeGroupCreationAck                   knowledge_group_creation_ack                   = 120;
        optional MsgKnowledgeGroupDestruction                   knowledge_group_destruction                    = 122;
        optional MsgActionCreateFireOrderAck                    action_create_fire_order_ack                   = 123;
        optional MsgControlGlobalWeather                        control_global_weather                         = 124;
        optional MsgControlLocalWeatherCreation                 control_local_weather_creation                 = 125;
        optional MsgControlLocalWeatherDestruction              control_local_weather_destruction              = 126;
        optional MsgControlCheckPointListAck                    control_checkpoint_list_ack                    = 127;
        optional MsgControlCheckPointList                       control_checkpoint_list                        = 128;
        optional MsgControlCheckPointDeleteAck                  control_checkpoint_delete_ack                  = 129;
        optional MsgLogSupplyPullFlowAck                        log_supply_pull_flow_ack                       = 130;
        optional MsgFormationDestruction                        formation_destruction                          = 131;
        optional MsgAutomatDestruction                          automat_destruction                            = 132;
        optional MsgCrowdDestruction                            crowd_destruction                              = 133;
        optional MsgPopulationCreation                          population_creation                            = 134;
        optional MsgPopulationUpdate                            population_update                              = 135;
        optional MsgFormationUpdate                             formation_update                               = 136;
    }
    optional int32   context = 1;
    required Content message = 2;
}

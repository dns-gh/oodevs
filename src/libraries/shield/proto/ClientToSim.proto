// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package MsgsClientToSim;

import "Common.proto"; 

message MsgControlDatetimeChange {
   required Common.MsgDateTime date_time = 1;
}

message MsgControlCheckPointSaveNow {
   optional string name = 1;
}

message MsgFragOrder {
   required Common.Tasker               tasker     = 1;
   required Common.FragOrderType        frag_order = 2;
   optional Common.MsgMissionParameters parameters = 3;
}

message MsgSetAutomatMode {
   required Common.AutomatId       automate = 1;
   required Common.EnumAutomatMode mode     = 2;
}

message MsgUnitCreationRequest {
   required Common.UnitType        type     = 1;
   required Common.AutomatId       superior = 2;
   required Common.MsgCoordLatLong position = 3;
}

// Magic Action
message MsgUnitMagicAction {
   enum Type {
        move_to                      = 0;
        surrender_to                 = 1;
        cancel_surrender             = 2;
        recover_transporters         = 3;
        destroy_component            = 4;
        recover_all                  = 5;
        recover_troops               = 6;
        recover_equipments           = 7;
        recover_resources            = 8;
        destroy_all                  = 9;
        change_human_factors         = 10;
        partial_recovery             = 11;
        unit_creation                = 12;
        create_fire_order            = 13;
        crowd_total_destruction      = 14;
        crowd_kill                   = 15;
        crowd_resurrect              = 16;
        crowd_change_attitude        = 17;
        change_knowledge_group       = 18;
        change_logistic_links        = 19;
        unit_change_superior         = 20;
        change_automat_superior      = 21;
        change_formation_superior    = 22;
        knowledge_group_update       = 23;
        log_supply_push_flow         = 24;
        log_supply_change_quotas     = 25;
        automat_creation             = 26;
        formation_creation           = 27;
        crowd_creation               = 28;
        log_supply_pull_flow         = 29;
        create_wound                 = 30;
    }
   required Common.Tasker               tasker     = 1;
   required Type                        type       = 2;
   required Common.MsgMissionParameters parameters = 3;
}

message MsgKnowledgeMagicAction {
   enum Type {
        enable                 = 0;
        update_party           = 1;
        update_party_parent    = 2;
        update_type            = 3;
    }
   required Common.KnowledgeGroupId     knowledge_group = 1;
   required Type                        type            = 2;
   required Common.MsgMissionParameters parameters      = 3;
}

message MsgObjectMagicAction {
   enum Type {
        create  = 0;
        update  = 1;
        destroy = 2;
        request = 3;
   }
   
   enum Attribute {
        construction       = 0;
        obstacle           = 1;
        mine               = 2;
        activity_time      = 3;
        bypass             = 4;
        logistic           = 5;
        nbc                = 6;
        crossing_site      = 7;
        supply_route       = 8;
        toxic_cloud        = 9;
        fire               = 10;
        medical_treatment  = 11;
        interaction_height = 12;
        stock              = 13;
        nbc_agent          = 14;
        effect_delay       = 15;
   }
   
   required Common.ObjectId             object     = 1;
   required Type                        type       = 2;
   required Common.MsgMissionParameters parameters = 3;
}

message MsgMagicAction {
   enum Type {
        global_weather                      = 0;
        local_weather                       = 1;
        change_diplomacy                    = 2;
        create_knowledge_group              = 3;
        change_resource_network_properties  = 4;
        create_fire_order_on_location       = 5;
    }
   required Type                        type       = 1;
   required Common.MsgMissionParameters parameters = 2;
}

message MsgControlCheckPointSetFrequency {
   required int32 frequency = 1;
}

message MsgControlCheckPointDeleteRequest {
   required string checkpoint = 1;
}

message MsgControlCheckPointListRequest {}


message MsgControlEnableVisionCones {
   required bool vision_cones = 1;
}

message MsgChangePopulationMagicAction {
  required Common.PopulationId   tasker     = 1;
  repeated Common.PartyAdhesion  adhesions  = 2;
  optional int32                 healthy    = 3;
  optional int32                 wounded    = 4;
  optional int32                 dead       = 5;
  optional string                motivation = 6;
}

message MsgUrbanMagicAction {
    message Infrastructure {
        optional bool  active    = 1;
        optional float threshold = 2;
    }
  required Common.UrbanObjectId   id               = 1;
  repeated Common.UrbanUsage      usages           = 2;
  optional Infrastructure         infrastructure   = 3;
  optional uint32                 structural_state = 4;
}

message MsgClientToSim {
    message Content {
       optional Common.MsgControlStop                  control_stop                         = 1;
       optional Common.MsgControlPause                 control_pause                        = 2;
       optional Common.MsgControlResume                control_resume                       = 3;
       optional Common.MsgControlChangeTimeFactor      control_change_time_factor           = 4;
       optional MsgControlDatetimeChange               control_date_time_change             = 5;
       optional MsgControlCheckPointSaveNow            control_checkpoint_save_now          = 6;
       optional MsgControlCheckPointSetFrequency       control_checkpoint_set_frequency     = 7;
       optional MsgControlEnableVisionCones            control_toggle_vision_cones          = 8;
       optional Common.MsgUnitOrder                    unit_order                           = 9;
       optional Common.MsgAutomatOrder                 automat_order                        = 10;
       optional Common.MsgCrowdOrder                   crowd_order                          = 11;
       optional MsgFragOrder                           frag_order                           = 12;
       optional MsgSetAutomatMode                      set_automat_mode                     = 13;
       optional MsgUnitCreationRequest                 unit_creation_request                = 14;
       optional MsgUnitMagicAction                     unit_magic_action                    = 15;
       optional MsgObjectMagicAction                   object_magic_action                  = 16;
       optional MsgKnowledgeMagicAction                knowledge_magic_action               = 17;
       optional MsgMagicAction                         magic_action                         = 18;
       optional MsgControlCheckPointListRequest        control_checkpoint_list_request      = 19;
       optional MsgControlCheckPointDeleteRequest      control_checkpoint_delete_request    = 20;
       optional MsgChangePopulationMagicAction         change_population_magic_action       = 21;
       optional MsgUrbanMagicAction                    urban_magic_action                   = 22;
    }
    optional int32   context = 1;
    required Content message = 2;
}

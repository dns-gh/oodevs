// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

// 21/11/2012 - revision 4.9.1 : FT 45373

package MsgsLauncherToAdmin;

import "Version.proto";
import "Common.proto"; // FT 45373

//base types

message RoleType { required uint32 id = 1; }

message UnitId           { required uint32              id = 1; }
message AutomatId        { required uint32              id = 1; }
message AutomatIdList    { repeated AutomatId         elem = 1; }
message FormationId      { required uint32              id = 1; }
message FormationIdList  { repeated FormationId       elem = 1; }
message PartyId          { required uint32              id = 1; }
message PartyIdList      { repeated PartyId           elem = 1; }
message CrowdId          { required uint32              id = 1; }
message CrowdIdList      { repeated CrowdId           elem = 1; }
message PopulationId     { required uint32              id = 1; }
message PopulationIdList { repeated uint32              id = 1; }

//user profile
message Profile {
    required string           login                  = 1;
    optional string           password               = 2;
    optional FormationIdList  read_only_formations   = 3;
    optional FormationIdList  read_write_formations  = 4;
    optional AutomatIdList    read_only_automata     = 5;
    optional AutomatIdList    read_write_automata    = 6;
    optional PartyIdList      read_only_parties      = 7;
    optional PartyIdList      read_write_parties     = 8;
    optional CrowdIdList      read_only_crowds       = 9;
    optional CrowdIdList      read_write_crowds      = 10;
    optional PopulationIdList write_populations      = 11;
    required bool             supervisor             = 12;
    optional RoleType         role                   = 13;
}

message Extension {
    message Entry {
        required string name  = 1;
        required string value = 2;
    }
    repeated Entry entries = 1;
}

// response to connection request
message MsgConnectionResponse {
    enum ErrorCode {
        success                       = 0; //!< connection successful
        incompatible_protocol_version = 1; //!< connection failed because of incompatible protocol version
    }
    required ErrorCode                error_code     = 1 [ default = success ]; //!< operation return code
    required Version.ProtocolVersion  server_version = 2;                       //!< server protocol version
}

// response to exercise list request, returns available exercises
message MsgExerciseListResponse {
    repeated string exercise = 1; //!< list of exercise names (with subdirectories if any)
}

// response to session list request
message MsgSessionListResponse {
    enum ErrorCode {
        success                 = 0; //!< connected profiles successfully listed
        invalid_exercise_name   = 1; //!< the specified exercise name could not be found
    }
    required ErrorCode error_code = 1 [ default = success ]; //!< operation return code
    required string    exercise   = 2;                       //!< exercise from which sessions are listed
    repeated string    session    = 3;                       //!< list of session names
}

// response to start session request
message MsgSessionStartResponse {
    enum Type {
        simulation = 0; //!< started a simulation. Started an embedded dispatcher if specified in session.
        dispatch   = 1; //!< started a dispatcher.
        replay     = 2; //!< started a replayer.
    }
    enum ErrorCode {
        success                 = 0; //!< session successfully started
        invalid_exercise_name   = 1; //!< the specified exercise name could not be found
        invalid_checkpoint      = 2; //!< the specified checkpoint could not be found
        session_already_running = 3; //!< an exercise is already started using the specified session
    }
    required ErrorCode error_code = 1 [ default = success ];    //!< operation return code
    required string    exercise   = 2;                          //!< started exercise
    required string    session    = 3;                          //!< started session
    optional string    checkpoint = 4;                          //!< checkpoint started, if any
    required Type      type       = 5;                          //!< type of exercise session started
}

// response to stop session request
message MsgSessionStopResponse {
    enum ErrorCode {
        success               = 0; //!< session successfully stopped
        invalid_exercise_name = 1; //!< the specified exercise name could not be found
        invalid_session_name  = 2; //!< the specified session name could not be found
        session_not_running   = 3; //!< the specified session is not running
    }
    required ErrorCode error_code = 1 [ default = success ];   //!< operation return code
    required string    exercise   = 2;                         //!< stopped exercise
    required string    session    = 3;                         //!< stopped session
}

// response to profile list request
message MsgProfileListResponse {
    enum ErrorCode {
        success               = 0; //!< profiles successfully listed
        invalid_exercise_name = 1; //!< the specified exercise name could not be found
    }
    required ErrorCode         error_code = 1 [ default = success ]; //!< operation return code
    required string            exercise   = 2;                       //!< exercise to list profile for
    repeated Profile           profile    = 3;                       //!< list available profiles for specified exercise
}

// response to connect profile list request
message MsgConnectedProfileListResponse {
    enum ErrorCode {
        success               = 0; //!< connected profiles successfully listed
        invalid_exercise_name = 1; //!< the specified exercise name could not be found
        invalid_session_name  = 2; //!< the specified session name could not be found
        session_not_running   = 3; //!< the specified session is not running
    }
    required ErrorCode         error_code = 1 [ default = success ];   //!< operation return code
    required string            exercise   = 2;                         //!< exercise to list connected profile for
    required string            session    = 3;                         //!< session to list connected profile for
    repeated Profile           profile    = 4;                         //!< list of connected profiles for specified exercise
}

// pushed session status
message MsgSessionStatus{
    enum Status {
        starting    = 0;
        running     = 1;
        paused      = 2;
        not_running = 3;
        breakdown   = 4;
    }
    required string     exercise              = 1;
    required string     session               = 2;
    required Status     status                = 3;
    optional string     breakdown_information = 4;
}

// response to session parameter change request
message MsgSessionParameterChangeResponse {
    enum ErrorCode {
        success               = 0; //!< connected profiles successfully listed
        invalid_exercise_name = 1; //!< the specified exercise name could not be found
        invalid_session_name  = 2; //!< the specified session name could not be found
        session_not_running   = 3; //!< the specified session is not running
    }
    required ErrorCode error_code           = 1 [ default = success ];   //!< operation return code
    required string    exercise             = 2;                         //!< exercise to change parameter for
    required string    session              = 3;                         //!< session to change parameter for
    optional uint32    checkpoint_frequency = 4;                         //!< if changed, the new checkpoint frequency
    optional uint32    acceleration_factor  = 5;                         //!< if changed, the new acceleration factor
}

// response to session command execution request
message MsgSessionCommandExecutionResponse {
    enum ErrorCode {
        success                 = 0; //!< connected profiles successfully listed
        invalid_exercise_name   = 1; //!< the specified exercise name could not be found
        invalid_session_name    = 2; //!< the specified session name could not be found
        session_not_running     = 3; //!< the specified session is not running
        invalid_checkpoint      = 4; //!< the specified checkpoint to be created is not valid (already exists...)
        session_already_paused  = 5; //!< trying to pause an already paused session
        session_already_running = 6; //!< trying to resume an already running session
		invalid_time_change		= 7; //!< erreur lors du recalage temporel // [11/04/2013 FT310107]
    }
    enum Status {
        running   = 0;
        paused    = 1;
    }
    required ErrorCode  error_code       = 1 [ default = success ];   //!< operation return code
    required string     exercise         = 2;                         //!< exercise the command was sent to
    required string     session          = 3;                         //!< session the command was sent to
    optional string     saved_checkpoint = 4;                         //!< if set, contains the name of the saved checkpoint
    required Status     status           = 5;
}

// reponse to checkpoint list request
message MsgCheckpointListResponse {
	message CheckPoint {
		enum Type {
			automatic   = 0;
			manual		= 1;
		}
		required string  			name		= 1;
		required Type    			type		= 2;
		optional Common.MsgDateTime date_time	= 3; // [06/08/2013 FT45400]
	}
    enum ErrorCode {
        success                 = 0; //!< checkpoints successfully listed
        invalid_exercise_name   = 1; //!< the specified exercise name could not be found
        invalid_session_name    = 2; //!< the kspecified session name could not be found
    }
    required ErrorCode 	error_code = 1 [ default = success ];   //!< operation return code
    required string    	exercise   = 2;                         //!< exercise for which checkpoints are listed
    required string    	session    = 3 [ default = "default" ]; //!< session for which checkpoints are listed
    repeated CheckPoint	checkpoint = 4;                         //!< list of checkpoints for specified session
}

// delete checkpoint for a given exercise/session
message MsgCheckpointDeleteResponse {
    enum ErrorCode {
        success                 = 0; //!< checkpoints successfully listed
        invalid_exercise_name   = 1; //!< the specified exercise name could not be found
        invalid_session_name    = 2; //!< the specified session name could not be found
    }
    required ErrorCode error_code = 1 [ default = success ];   //!< operation return code
    required string    exercise   = 2;                         //!< exercise for which checkpoints are to be deleted
    required string    session    = 3;                         //!< session for which checkpoints are to be deleted
    repeated string    checkpoint = 4;                         //!< list of deleted checkpoints for specified session
}

// notification from specified exercise/session
message MsgSessionNotification {
    message UnitUpdate {
       required UnitId    unit       = 1;
       optional Extension extensions = 2;
    }
    message FormationUpdate { 
       required FormationId formation  = 1;
       optional Extension   extensions = 2;
    }
    message ProfileCreation { 
        required Profile profile = 1;
    }
    message ProfileUpdate { 
        required Profile    profile = 1;
    }
    message ExportCreation { 
        required string    export_directory = 1;
    }
    
    message LogHistoryRequestForPlay {
        required string profile = 1;
        required Common.MsgDateTime date_time = 2;
    }
    
    message LogHistoryRequestForReplayAck {
    }

    message EntityCreation {					// [17/05/2013 FT 45387]
        required string long_name = 1;			// [17/05/2013 FT 45387]
        required Common.Tasker id = 2;			// [17/05/2013 FT 45387]
        required Common.Tasker superior = 3;	// [17/05/2013 FT 45387]
    }

    message Notification {
        optional UnitUpdate                     unit_update          = 1;
        optional FormationUpdate                formation_update     = 2;
        optional ProfileCreation                profile_creation     = 3;
        optional ProfileUpdate                  profile_update       = 4;
        optional ExportCreation                 export_creation      = 5;
        optional LogHistoryRequestForPlay          log_history_request_for_play       = 6; // FT 45373
        optional LogHistoryRequestForReplayAck     log_history_request_for_replay_ack = 7; // FT 45373
        optional EntityCreation                 entity_creation = 8;		// [17/05/2013 FT 45387]
    }
    required string         exercise = 1; 
    required string         session  = 2; 
    required Notification   notification  = 3; 
}

message MsgControlInformation {
   required int32                      current_tick                   = 1;
   required int32                      tick_duration                  = 2;
   required int32                      time_factor                    = 3;
   required int32                      pathfind_request_number        = 4;
   optional int32                      last_checkpoint_build_duration = 5;
   required Common.MsgDateTime         date_time                      = 6; // [11/04/2013 FT310126]
}

message MsgClientConnectionNotification {
    message ClientConnection {
       required string login     = 1;
       required bool   connected = 2;
    }
    required string           exercise   = 1;
    required string           session    = 2;
    repeated ClientConnection connection = 3;
}


message MsgLauncherToAdmin {
    message Content {
        optional MsgConnectionResponse                   connection_response                = 1;
        optional MsgExerciseListResponse                 exercise_list_response             = 2;
        optional MsgSessionListResponse                  session_list_response              = 3;
        optional MsgSessionStartResponse                 session_start_response             = 4;
        optional MsgSessionStopResponse                  session_stop_response              = 5;
        optional MsgProfileListResponse                  profile_list_response              = 6;
        optional MsgConnectedProfileListResponse         connected_profile_list_response    = 7;
        optional MsgSessionStatus                        session_status                     = 9;
        optional MsgSessionParameterChangeResponse       session_parameter_change_response  = 10;
        optional MsgSessionCommandExecutionResponse      session_command_execution_response = 11;
        optional MsgCheckpointListResponse               checkpoint_list_response           = 12;
        optional MsgCheckpointDeleteResponse             checkpoint_delete_response         = 13;
        optional MsgSessionNotification                  session_notification               = 14; 
        optional MsgControlInformation                   control_information                = 15;
        optional MsgClientConnectionNotification         connected_clients_update           = 16;
    }
    optional int32   context = 1;
    required Content message = 2;
}


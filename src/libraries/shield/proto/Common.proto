// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package Common;

// Entity Id types
message AutomatId                          { required uint32              id = 1; }
message AutomatIdList                      { repeated AutomatId         elem = 1; }
message FormationId                        { required uint32              id = 1; }
message FormationIdList                    { repeated FormationId       elem = 1; }
message KnowledgeGroupId                   { required uint32              id = 1; }
message ObjectId                           { required uint32              id = 1; }
message ObjectKnowledgeId                  { required uint32              id = 1; }
message ObjectKnowledgeIdList              { repeated ObjectKnowledgeId elem = 1; }
message PartyId                            { required uint32              id = 1; }
message PartyIdList                        { repeated PartyId           elem = 1; }
message CrowdId                            { required uint32              id = 1; }
message CrowdIdList                        { repeated CrowdId           elem = 1; }
message CrowdKnowledgeId                   { required uint32              id = 1; }
message CrowdConcentrationId               { required uint32              id = 1; }
message CrowdConcentrationKnowledgeId      { required uint32              id = 1; }
message CrowdFlowId                        { required uint32              id = 1; }
message CrowdFlowKnowledgeId               { required uint32              id = 1; }
message UnitId                             { required uint32              id = 1; }
message UnitIdList                         { repeated UnitId            elem = 1; }
message UnitKnowledgeId                    { required uint32              id = 1; }
message UnitKnowledgeIdList                { repeated UnitKnowledgeId   elem = 1; }
message UrbanObjectKnowledgeId             { required uint32              id = 1; }
message ClientObjectId                     { required uint32              id = 1; }
message PopulationId                       { required uint32              id = 1; }
message PopulationIdList                   { repeated uint32              id = 1; }

message Tasker {
    optional AutomatId    automat    = 1;
    optional FormationId  formation  = 2;
    optional CrowdId      crowd      = 3;
    optional UnitId       unit       = 4;
    optional PartyId      party      = 5;
    optional PopulationId population = 6;
}

message ParentEntity {
    optional AutomatId    automat    = 1;
    optional FormationId  formation  = 2;
}

// messenger entities
message DrawingId             { required uint32  id = 1; }
message TacticalLineId        { required uint32  id = 1; }
message MarkerId              { required uint32  id = 1; }

// reports
message FireId                { required uint32 id = 1; }
message FireEffectId          { required uint32 id = 1; }
message ReportId              { required uint32 id = 1; }
message WeatherId             { required uint32 id = 1; }

// logistics requests
message MaintenanceRequestId  { required uint32 id = 1; }
message MedicalRequestId      { required uint32 id = 1; }
message SupplyRequestId       { required uint32 id = 1; }
message FuneralRequestId      { required uint32 id = 1; }

// Static types & categories
message AutomatType           { required uint32 id = 1; }
message BreakdownType         { required uint32 id = 1; }
message EquipmentType         { required uint32 id = 1; }
message FragOrderType         { required uint32 id = 1; }
message MissionType           { required uint32 id = 1; }
message NBCAgentType          { required uint32 id = 1; }
message ObjectType            { required string id = 1; } // should be an integer
message CrowdType             { required uint32 id = 1; }
message ReportType            { required uint32 id = 1; }
message ResourceType          { required uint32 id = 1; }
message UnitType              { required uint32 id = 1; }
message ReportCategory        { required uint32 id = 1; }
message NationalityType       { required uint32 id = 1; }
message ResourceNetworkType   { required string name = 1; }
message PopulationType        { required uint32 id = 1; }

// Helpers
message MsgHeading {
   required int32 heading = 1;
}

message MsgDateTime {
   required string data = 1;
}

// Enumerations
///////////// begin <not used by protocol> /////////////
enum EnumDotationFamily {
   munition                                         = 0;
   carburant                                        = 1;
   explosif                                         = 2;
   mine                                             = 3;
   barbele                                          = 4;
   piece                                            = 5;
   ration                                           = 6;
   agent_extincteur                                 = 7;
   energie                                          = 8;
   funeraire                                        = 9;
}

enum EnumAmmunitionFamily {
   obus                                             = 0;
   missile_sol                                      = 1;
   missile_air                                      = 2;
   mitraille                                        = 3;
}
///////////// end <not used by protocol> /////////////

///////////// begin <only used by SimToClient> /////////////

enum EnumPrecipitationType {
   pas_de_precipitation                             = 0;
   tempete_sable                                    = 1;
   brouillard                                       = 2;
   crachin                                          = 3;
   pluie                                            = 4;
   neige                                            = 5;
}

enum EnumFireEffectType {
   smoke          = 0;
   light          = 1;
   explosion      = 2;
   neutralization = 3;
}

enum UnitFireType {
   direct                                           = 0;
   indirect                                         = 1;
}

message MsgDotationStock {
   required ResourceType ressource_id        = 1;
   required int32        quantite_disponible = 2;
}

message SeqOfDotationStock {
   repeated MsgDotationStock elem = 1;
}

message MsgDotationQuota {
   required ResourceType ressource_id        = 1;
   required int32        quota_disponible    = 2;
}

message SeqOfDotationQuota {
   repeated MsgDotationQuota            elem                = 1;
}

enum EnumLightingType {
   jour_sans_nuage                                 = 0;
   jour_peu_nuageux                                = 1;
   jour_moyennement_nuageux                        = 2;
   jour_assez_nuageux                              = 3;
   jour_tres_nuageux                               = 4;
   nuit_pleine_lune                                = 5;
   nuit_trois_quart_de_lune                        = 6;
   nuit_demi_lune                                  = 7;
   nuit_quart_de_lune                              = 8;
   nuit_nouvelle_lune                              = 9;
   eclairant                                       = 10;
   global_weather                                  = 11;
}

message MsgAutomatChangeKnowledgeGroup {
   required AutomatId        automat         = 1;
   required PartyId          party           = 2;
   required KnowledgeGroupId knowledge_group = 3;
}

message MsgChangeLogisticLinks {
   required ParentEntity requester     = 1;
   repeated ParentEntity superior      = 2;
}

message MsgAutomatChangeSuperior_oid_superior {
   optional FormationId  formation = 1;
   optional AutomatId    automat   = 2;
}

message MsgAutomatChangeSuperior {
   required AutomatId                               automat  = 1;
   required MsgAutomatChangeSuperior_oid_superior   superior = 2;
}

message MsgUnitChangeSuperior {
   required UnitId    unit   = 1;
   required AutomatId parent = 2;
}

///////////// end <only used by SimToClient> /////////////

enum EnumLogMaintenanceHandlingStatus {
   deplacement_vers_chaine                          = 0;
   attente_disponibilite_remorqueur                 = 1;
   remorqueur_deplacement_aller                     = 2;
   remorqueur_chargement                            = 3;
   remorqueur_deplacement_retour                    = 4;
   remorqueur_dechargement                          = 5;
   diagnostique_maintenance                         = 6;
   attente_prise_en_charge_par_niveau_superieur     = 7;
   attente_disponibilite_pieces                     = 8;
   attente_disponibilite_reparateur                 = 9;
   reparation                                       = 10;
   retour_pion                                      = 11;
   termine_maintenance                              = 12;
}

enum EnumLogMedicalHandlingStatus {
   attente_disponibilite_ambulance_releve           = 0;
   ambulance_releve_deplacement_aller               = 1;
   ambulance_releve_chargement                      = 2;
   attente_chargement_complet_ambulance_releve      = 3;
   ambulance_releve_deplacement_retour              = 4;
   ambulance_releve_dechargement                    = 5;
   attente_disponibilite_medecin_pour_diagnostique  = 6;
   diagnostique                                     = 7;
   recherche_secteur_tri                            = 8;
   attente_disponibilite_medecin_pour_tri           = 9;
   tri                                              = 10;
   recherche_secteur_soin                           = 11;
   attente_disponibilite_medecin_pour_soin          = 12;
   soin                                             = 13;
   hospitalisation                                  = 14;
   attente_disponibilite_ambulance_ramassage        = 15;
   ambulance_ramassage_chargement                   = 16;
   attente_chargement_complet_ambulance_ramassage   = 17;
   ambulance_ramassage_deplacement_aller            = 18;
   ambulance_ramassage_dechargement                 = 19;
   termine                                          = 20;
}

enum EnumUnitVisibility {
   invisible                                        = 0;
   detected                                         = 1;
   recognized                                       = 2;
   identified                                       = 3;
   recorded                                         = 4;
}

enum EnumSimulationState {
   running                                          = 0;
   paused                                           = 1;
   stopped                                          = 2;
   loading                                          = 3;
}

enum EnumDispatcherState {
    available                                       = 0;
    unavailable                                     = 1;
}
        

enum EnumMeetingEngagementStatus {
   none_meeting                                     = 0;
   etat_esquive                                     = 1;
   etat_fixe                                        = 2;
   etat_poursuite_mission                           = 3;
}

enum EnumOperationalStatus {
   detruit_totalement                               = 0;
   detruit_tactiquement                             = 1;
   operationnel                                     = 2;
}

enum EnumAutomatMode {
   embraye                                          = 0;
   debraye                                          = 1;
}

enum EnumCrowdAttitude{
   calme                                            = 0;
   agitee                                           = 1;
   excitee                                          = 2;
   agressive                                        = 3;
}

enum EnumUnitTiredness {
   normal                                           = 0;
   fatigue                                          = 1;
   epuise                                           = 2;
}

enum EnumUnitMorale {
   fanatique                                        = 0;
   bon                                              = 1;
   moyen                                            = 2;
   mauvais                                          = 3;
}

enum EnumUnitExperience {
   veteran                                          = 0;
   experimente                                      = 1;
   conscrit                                         = 2;
}

enum EnumUnitStress {
   calm                                             = 0;
   worried                                          = 1;
   stressed                                         = 2;
}

enum EnumHumanRank {
   officier                                         = 0;
   sous_officier                                    = 1;
   mdr                                              = 2;
}

enum EnumDiplomacy {
   unknown_diplo                                    = 0;
   friend_diplo                                     = 1;
   enemy_diplo                                      = 2;
   neutral_diplo                                    = 3;
}

enum EnumHumanWound {
   non_blesse             = 0;
   mort                   = 1;
   blesse_urgence_1       = 2;
   blesse_urgence_2       = 3;
   blesse_urgence_3       = 4;
   blesse_urgence_extreme = 5;
}

enum EnumLogMaintenanceRegimeTravail {
   regime_1 = 0;
   regime_2 = 1;
   regime_3 = 2;
   regime_4 = 3;
}

enum EnumNatureLevel {
   none_naturelevel = 0;
   b                = 1;
   o                = 2;
   c                = 3;
   oo               = 4;
   ooo              = 5;
   i                = 6;
   ii               = 7;
   iii              = 8;
   x                = 9;
   xx               = 10;
   xxx              = 11;
   xxxx             = 12;
   xxxxx            = 13;
}

enum EnumLogisticLevel {
   none          = 0;
   logistic_base = 1;
}

enum EnumBurningCellPhase {
	pre_ignition = 0;
	combustion = 1;
	decline = 2;
	extinguished = 3;
}

// Control messages
message MsgControlStop   {}
message MsgControlPause  {}
message MsgControlResume {}
message MsgControlChangeTimeFactor {
   required int32 time_factor = 1;
}

message MsgExercise  {
   required string  name     = 1; 
   optional bool    running  = 2; 
   optional uint32  port     = 3;
}

message MsgNetworkAddress  {
   required string  ip      = 1; 
   required int32   port    = 2 [default = 8080]; 
}

// Color
message RgbColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;	
}

message RgbaColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
    required float alpha = 4;	
}
    
// Geometry
message MsgCoordLatLong {
    required double latitude  = 1;
    required double longitude = 2;
}

message MsgCoordLatLongList {
    repeated MsgCoordLatLong elem = 2;
}

message MsgLocation {
   enum Geometry {
        circle  = 0;
        ellipse = 1;
        line    = 2;
        rectangle = 3;
        polygon = 4;
        point   = 5;
        sector  = 6;
        none    = 7;
    }
   required Geometry            type        = 1;
   optional MsgCoordLatLongList coordinates = 2;
}

message MsgLine         { required MsgLocation location = 1; }
message MsgLocationList { repeated MsgLocation     elem = 1; }
message MsgPath         { required MsgLocation location = 1; }
message MsgPathList     { repeated MsgPath      elem = 1; }
message MsgPoint        { required MsgLocation location = 1; }
message MsgPointList    { repeated MsgPoint     elem = 1; }
message MsgPolygon      { required MsgLocation location = 1; }
message MsgPolygonList  { repeated MsgPolygon   elem = 1; }

// Order parameters
message MsgLogMedicalPriorities {
   repeated EnumHumanWound elem = 1;
}

message ObstacleType
{
    enum DemolitionTargetType {
       preliminary = 0;
       reserved    = 1;
    }
}

message MsgPlannedWork {
   required string                            type                  = 1;
   required MsgLocation                       position              = 2;
   optional ObstacleType.DemolitionTargetType type_obstacle         = 3;
   optional float                             densite               = 4;
   optional AutomatId                         tc2                   = 5;
   optional int32                             activity_time         = 6;    //in seconds
   optional int32                             activation_time       = 7;    //in seconds
   required string                            name                  = 8;
}

message MsgPlannedWorkList {
   repeated MsgPlannedWork   elem = 1;
}

message MsgLogMaintenancePriorities {
   repeated EquipmentType elem = 1;
}

message SupplyFlowResource
{
    required ResourceType resourceType = 1;
    required uint32       quantity     = 2;
}

message SupplyFlowTransporter
{
    required EquipmentType equipmentType = 1;
    required uint32        quantity      = 2;
}

message SupplyFlowRecipient
{
    required AutomatId          receiver  = 1;
    repeated SupplyFlowResource resources = 2;
    optional MsgPointList       path      = 3;
}

message PushFlowParameters
{
    repeated SupplyFlowRecipient   recipients   = 1;
    repeated SupplyFlowTransporter transporters = 2;
    optional MsgPointList          wayBackPath  = 3;
}

message PullFlowParameters
{
    required ParentEntity          supplier     = 1;
    repeated SupplyFlowResource    resources    = 2;
    repeated SupplyFlowTransporter transporters = 3;
    optional MsgPointList          wayOutPath   = 4;
    optional MsgPointList          wayBackPath  = 5;
}

message MsgMissionObjective {
   required MsgLocation localisation = 1;
   required MsgDateTime horaire      = 2;
}

message MsgMissionObjectiveList {
   repeated MsgMissionObjective elem = 1;
}

message MsgLimaOrder {
    enum Function {
        ligne_debouche               = 0;
        ligne_changement_attitude    = 1;
        ligne_coordination           = 2;
        ligne_interdire              = 3;
        ligne_objectif               = 4;
        ligne_coup_arret             = 5;
        ligne_recueil                = 6;
        ligne_debut_mission          = 7;
        ligne_fin_mission            = 8;
        ligne_identification_accueil = 9;
    }
    required MsgLine     lima      = 1;
    required MsgDateTime horaire   = 2;
    repeated Function    fonctions = 3;
}

message MsgLimasOrder {
   repeated MsgLimaOrder elem = 1;
}

message MsgChangeDiplomacy {
   required PartyId       party1     = 1;
   required PartyId       party2     = 2;
   required EnumDiplomacy diplomatie = 3;
}

message MsgAtlasNature {
   enum AtlasNature
   {
        blinde           = 1;
        ass              = 2;
        pc               = 4;
        log              = 8;
        mortier          = 16;
        lance_roquette   = 32;
        vehicule         = 64;
        personnel_a_pied = 128;
        helicoptere      = 256;
        asa              = 1024;
   }
   required int32 nature = 1;
}

message Extension {
    message Entry {
        required string name  = 1;
        required string value = 2;
    }
    repeated Entry entries = 1;
}

message ResourceNetworkElement
{
    required ObjectId            object   = 1;
    required ResourceNetworkType resource = 2;
}

message MsgMissionParameter {
    message Value {
        //parameters used for missions and magic actions:
        optional bool                        booleanValue                = 1;
        optional int32                       intValue                    = 2;
        optional MsgHeading                  heading                     = 3;
        optional int32                       enumeration                 = 4;
        optional MsgDateTime                 dateTime                    = 5;
        optional MsgPoint                    point                       = 6;
        optional MsgPolygon                  area                        = 7;
        optional MsgPath                     path                        = 8;
        optional MsgLine                     limit                       = 9;
        optional MsgLimasOrder               phaseLine                   = 10;
        optional AutomatId                   automat                     = 11;
        optional UnitId                      agent                       = 12;
        optional UnitKnowledgeId             agentKnowledge              = 13;
        optional CrowdKnowledgeId            crowdKnowledge              = 14;
        optional ObjectKnowledgeId           objectKnowledge             = 15;
        optional UrbanObjectKnowledgeId      urbanKnowledge              = 16;
        optional MsgPlannedWork              plannedWork                 = 17;
        optional MsgAtlasNature              atlasNature                 = 18;
        optional ResourceType                resourceType                = 19;
        optional MsgLogMaintenancePriorities logMaintenancePriorities    = 20;
        optional MsgLogMedicalPriorities     logMedicalPriorities        = 21;
        optional ResourceNetworkElement      resourceNetwork             = 22;
        
        //parameters used for magic actions only:
        optional float                       aReal                       = 23;
        optional MsgPathList                 pathList                    = 24;
        optional MsgPointList                pointList                   = 25;
        optional MsgPolygonList              polygonList                 = 26;
        optional MsgLocation                 location                    = 27;
        optional MsgLocationList             locationList                = 28;
        optional UnitIdList                  unitList                    = 29;
        optional AutomatIdList               automatList                 = 30;
        optional UnitKnowledgeIdList         unitKnowledgeList           = 31;
        optional ObjectKnowledgeIdList       objectKnowledgeList         = 32;
        optional EquipmentType               equipmentType               = 33;
        optional FireId                      tirIndirect                 = 34;
        optional string                      aCharStr                    = 35;
        optional MsgMissionObjective         missionObjective            = 36;
        optional MsgMissionObjectiveList     missionObjectiveList        = 37;
        optional ObjectId                    object                      = 38;
        optional PartyId                     party                       = 39;
        optional FormationId                 formation                   = 40;
        optional uint32                      identifier                  = 41;
        optional int32                       quantity                    = 42;
        optional KnowledgeGroupId            knowledgeGroup              = 43;
        optional Extension                   extensionList               = 44;
        optional PushFlowParameters          push_flow_parameters        = 45;
        optional PullFlowParameters          pull_flow_parameters        = 46;
        repeated Value                       list                        = 47;
        //
        optional int32                       external_identifier         = 48;
    }
    optional bool  null_value           = 1;
    repeated Value value                = 2;
}

message MsgMissionParameters {
   repeated MsgMissionParameter elem = 1;
}

message MsgUnitOrder {
    required UnitId               tasker          = 1;
    required MissionType          type            = 2;
    optional MsgMissionParameters parameters      = 3;
    optional string               label           = 4;
    optional MsgLocation          symbolLocation  = 5;
    optional MsgDateTime          start_time     = 6;
}

message MsgAutomatOrder {
    required AutomatId            tasker          = 1;
    required MissionType          type            = 2;
    optional MsgMissionParameters parameters      = 3;
    optional string               label           = 4;
    optional MsgLocation          symbolLocation  = 5;
    optional MsgDateTime          start_time     = 6;
}

message MsgCrowdOrder {
    required CrowdId              tasker          = 1;
    required MissionType          type            = 2;
    optional MsgMissionParameters parameters      = 3;
    optional string               label           = 4;
    optional MsgLocation          symbolLocation  = 5;
    optional MsgDateTime          start_time     = 6;
}

// Messenger common types

message ClientObjectProperty {
    message Value {
        optional string string_value            = 1;
        optional int32 integer_value            = 2;
        optional uint32 unsigned_integer_value  = 3;
        optional float float_value              = 4;
        optional bool bool_value                = 5;
    }
    required string name = 1;
    required Value value = 2;
}

message Diffusion {
   optional AutomatId        automat         = 1;
   optional FormationId      formation       = 2;
   repeated PartyId          party           = 3;
   optional KnowledgeGroupId knowledge_group = 4;
}

message MsgShape {
   required string              external_identifier  = 1;
   required MsgLocation         location             = 2;
   required RgbColor            color                = 3;
   optional Diffusion           diffusion            = 4;
   optional string              text                 = 5;
   optional string              font                 = 6;
   optional uint32              font_size            = 7;
}

message MsgChatTarget {
   required string                      profile             = 1;
}

message MsgTextMessage {
    required MsgChatTarget source  = 1;
    required MsgChatTarget target  = 2;
    required string        message = 3;
}

// Urban attributes

message UrbanUsage {
    required string role  = 1;
    required uint32 percentage = 2;
}
    
// Object attributes

message ResourceNetwork
{
    message Link
    {
        required ObjectId object  = 1;
        required int32  capacity  = 2;
        required uint32 flow      = 3;
    }
    required ResourceNetworkType resource        = 1;
    repeated Link                link            = 2;
    required bool                enabled         = 3;
    optional uint32              max_stock       = 4;
    optional uint32              stock           = 5;
    optional uint32              production      = 6;
    optional uint32              consumption     = 7;
    optional bool                critical        = 8;
    optional uint32              initial_stock   = 9;
    optional uint32              max_production  = 10;
    optional uint32              max_consumption = 11;
    optional float               functional_state = 12;
}

message ObjectAttributeResourceNetwork {
   repeated ResourceNetwork network = 1;
}

message ObjectAttributeConstruction {
   optional ResourceType resource       = 1;
   optional int32        dotation_nbr   = 2;
   optional float        density        = 3;
   optional int32        percentage     = 4;
}

message ObjectAttributeValorisation {
   optional ResourceType resource       = 1;
   optional int32        dotation_nbr   = 2;
   optional float        density        = 3;
   optional int32        percentage     = 4;
}

message ObjectAttributeLogistic {
   required ParentEntity logistic_superior = 1;
}

message ObjectAttributeLodging {
   optional int32 capacity = 1;
}

message ObjectAttributeInteractionHeight {
   required float height = 1;
}

message ObjectAttributeObstacle {
   required ObstacleType.DemolitionTargetType type            = 1;
   optional bool                              activated       = 2;
}

message ObjectAttributeActivityTime {
   optional int32                       activity_time       = 1;        // 600 s (message sent at 12:00)
   optional int32                       activation_time     = 2;        // 3600s
   optional MsgDateTime                 start_activity      = 3;
   optional MsgDateTime                 end_activity        = 4;
}

message ObjectAttributeBypass {
   required int32                       percentage          = 1;
}

message ObjectAttributeEffectDelay {
   required int32                       value               = 1;
}

message ObjectAttributeNBC {
   required int32                danger_level        = 1;
   repeated NBCAgentType         nbc_agents          = 2;
}

message StockResource {
   required ResourceType         resource = 1;
   required int32                current  = 2;
   optional int32                maximum  = 3;
}

message ObjectAttributeStock {
   repeated StockResource               resources           = 1;
}

message ObjectAttributeCrossingSite {
   required int32                       width                   = 1;
   required int32                       depth                   = 2;
   required int32                       flow_rate               = 3;
   required bool                        banks_require_fitting   = 4;
}

message ObjectAttributeSupplyRoute {
   required bool                        equipped            = 1;
   required int32                       max_weight          = 2;
   required int32                       width               = 3;
   required int32                       length              = 4;
   required int32                       flow_rate           = 5;
}

message MsgLocatedQuantity{
   required Common.MsgCoordLatLong      coordinate          = 1;
   required float                       quantity            = 2;
}

message MsgLocatedQuantityList {
   repeated MsgLocatedQuantity          elem                = 1;
}

message ObjectAttributeToxicCloud {
   required MsgLocatedQuantityList      quantities          = 1;
}

message ObjectAttributeFire {
   required string class_name = 1;
   required int32 max_combustion_energy = 2;
}

message ObjectAttributeBurn {
   required int32 current_heat = 1;
   required int32 combustion_energy = 2;
}

message ObjectAttributeBurnSurface {
	message BurningCell {
		message PreIgnition {
			required int32 ignition_energy = 1;
			required int32 ignition_threshold = 2;
		}
		message Combustion {
		   required int32 current_heat = 1;
		   required int32 combustion_energy = 2;
		   required int32 max_combustion_energy = 3;
		}
		message Decline {
		   required int32 current_heat = 1;
		}		
		required int32 origin_x = 1;
		required int32 origin_y = 2;
		required EnumBurningCellPhase phase = 3;
		optional PreIgnition pre_ignition = 4;
		optional Combustion combustion = 5;
		optional Decline decline = 6;
	}
	required int32 cell_size = 1;
	repeated BurningCell burning_cells = 2;
}

message ObjectAttributeTrafficability {
    required float value = 1;
}

message ObjectAttributeUnderground {
    required string network_name = 1;
    required bool   available    = 2;
}

message MedicalTreatmentBedCapacity {
    required int32 type_id = 1;  // Cf. Data/MedicalTreatment.xml
    optional uint32 baseline_count = 2;
    optional uint32 available_count = 3;
    optional uint32 emergency_count = 4;
}

message ObjectAttributeNBCType {
   required NBCAgentType agent = 1;
   required int32        concentration = 2;
   required int32        source_life_duration = 3;
}

message ObjectAttributes {
   optional ObjectAttributeConstruction      construction        = 1;
   optional ObjectAttributeObstacle          obstacle            = 2;
   optional ObjectAttributeValorisation      valorisation        = 3;
   optional ObjectAttributeActivityTime      activity_time       = 4;
   optional ObjectAttributeBypass            bypass              = 5;
   optional ObjectAttributeLogistic          logistic            = 6;
   optional ObjectAttributeNBC               nbc                 = 7;
   optional ObjectAttributeCrossingSite      crossing_site       = 8;
   optional ObjectAttributeSupplyRoute       supply_route        = 9;
   optional ObjectAttributeToxicCloud        toxic_cloud         = 10;
   optional ObjectAttributeFire              fire                = 11;
   optional ObjectAttributeInteractionHeight interaction_height  = 13;
   optional ObjectAttributeStock             stock               = 14;
   optional ObjectAttributeNBCType           nbc_agent           = 15;   
   optional ObjectAttributeEffectDelay       effect_delay        = 16;
   optional ObjectAttributeResourceNetwork   resource_networks   = 17;
   optional ObjectAttributeBurn              burn                = 18;
   optional ObjectAttributeBurnSurface       burn_surface        = 19;
   optional ObjectAttributeLodging           lodging             = 20;
   optional ObjectAttributeTrafficability    trafficability      = 21;
   optional ObjectAttributeUnderground       underground         = 22;
}

message MsgMarker {
    required string                             name                 = 1;
    required string                             description          = 2;
    optional MarkerId                           parent               = 3;
    optional string                             optional_information = 4;
}

// weather
message MsgWeatherAttributes {
   required int32                 temperature     = 1;
   required int32                 wind_speed      = 2;
   required MsgHeading            wind_direction  = 3;
   required int32                 cloud_floor     = 4;
   required int32                 cloud_ceiling   = 5;
   required int32                 cloud_density   = 6;
   required EnumPrecipitationType precipitation   = 7;
   required EnumLightingType      lighting        = 8;
}

//adhesions
message PartyAdhesion {
    required PartyId party = 1;
    required float value = 2;
}

message PartyAdhesions {
    repeated PartyAdhesion adhesion = 1;
}

// Human repartition
message HumanRepartition {
    required float     male      = 1;
    required float     female    = 2;
    required float     children  = 3;
}

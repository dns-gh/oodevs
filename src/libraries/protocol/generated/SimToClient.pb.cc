// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimToClient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsSimToClient {

namespace {

const ::google::protobuf::Descriptor* OrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitOrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitOrderAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatOrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatOrderAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationOrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationOrderAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFragOrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFragOrderAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSetAutomatModeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSetAutomatModeAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgSetAutomatModeAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnitActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitActionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitActionAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitCreationRequestAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitCreationRequestAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMagicActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMagicActionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgMagicActionAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitMagicActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitMagicActionAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectMagicActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectMagicActionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgObjectMagicActionAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationMagicActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationMagicActionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgPopulationMagicActionAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeDiplomacyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeDiplomacyAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* HierarchyModificationAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchyModificationAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* HierarchyModificationAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeKnowledgeGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeKnowledgeGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeLogisticLinksAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeLogisticLinksAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeSuperiorAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeSuperiorAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitChangeSuperiorAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitChangeSuperiorAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyPushFlowAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyPushFlowAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyChangeQuotasAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyChangeQuotasAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgActionCreateFireOrderAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgActionCreateFireOrderAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgControlInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlProfilingInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlProfilingInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlBeginTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlBeginTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlEndTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlEndTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* ControlAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ControlAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgControlDatetimeChangeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlDatetimeChangeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlChangeTimeFactorAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlChangeTimeFactorAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlStopAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlStopAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlPauseAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlPauseAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlResumeAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlResumeAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTeamCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTeamCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatCreation_oid_parent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatCreation_oid_parent_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RulesOfEngagement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RulesOfEngagement_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RulesOfEngagement_Value_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ForceRatio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceRatio_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ForceRatio_Value_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* BorrowedEquipments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BorrowedEquipments_reflection_ = NULL;
const ::google::protobuf::Descriptor* BorrowedEquipments_BorrowedEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BorrowedEquipments_BorrowedEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* LentEquipments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LentEquipments_reflection_ = NULL;
const ::google::protobuf::Descriptor* LentEquipments_LentEquipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LentEquipments_LentEquipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceDotations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDotations_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceDotations_ResourceDotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDotations_ResourceDotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentDotations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentDotations_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentDotations_EquipmentDotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentDotations_EquipmentDotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanDotations_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanDotations_reflection_ = NULL;
const ::google::protobuf::Descriptor* HumanDotations_HumanDotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HumanDotations_HumanDotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContaminationState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContaminationState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Communication_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Communication_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitAttributes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_Posture_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_FireAvailability_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_PopulationRoe_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitPathFind_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitPathFind_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitEnvironmentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitEnvironmentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutomatPerception_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomatPerception_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfAutomatPerception_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfAutomatPerception_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartUnitFire_target_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartUnitFire_target_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartUnitFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartUnitFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitHumanFireDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitHumanFireDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfUnitHumanFireDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfUnitHumanFireDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitEquipmentFireDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitEquipmentFireDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfUnitEquipmentFireDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfUnitEquipmentFireDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitFireDamages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitFireDamages_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitsFireDamages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitsFireDamages_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFireDamages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFireDamages_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationsFireDamages_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationsFireDamages_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStopUnitFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStopUnitFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartPopulationFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartPopulationFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStopPopulationFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStopPopulationFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExplosion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExplosion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStartFireEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStartFireEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgStopFireEffect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgStopFireEffect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgInvalidateReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgInvalidateReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTrace_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDecisionalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDecisionalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDebugPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDebugPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfHeading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfHeading_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgVisionCone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgVisionCone_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfVisionCone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfVisionCone_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitVisionCones_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitVisionCones_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitDetection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectDetection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationDetection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowDetection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgObjectKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgObjectKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalHandlingCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalHandlingCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalHandlingUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalHandlingUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalHandlingDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalHandlingDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalEquipmentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalEquipmentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfLogMedicalEquipmentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfLogMedicalEquipmentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenanceHandlingCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenanceHandlingUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenanceHandlingDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenanceEquipmentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenanceEquipmentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfLogMaintenanceEquipmentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfLogMaintenanceEquipmentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenanceState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenanceState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyHandlingCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyHandlingCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDotationQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDotationQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfDotationQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfDotationQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyHandlingUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyHandlingUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyHandlingDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyHandlingDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyEquimentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyEquimentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfLogSupplyEquimentAvailability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfLogSupplyEquimentAvailability_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyState_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogSupplyQuotas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogSupplyQuotas_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationConcentrationKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowKnowledgeCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFlowPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFlowPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfFlowPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfFlowPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowKnowledgeDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPopulationFlowKnowledgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFolkCreation_profiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFolkCreation_profiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFolkCreation_activities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFolkCreation_activities_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFolkCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFolkCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFolkGraphEdgeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFolkGraphEdgeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFolkGraphUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFolkGraphUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlGlobalMeteoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlGlobalMeteoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlLocalMeteoAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlLocalMeteoAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlCheckPointSetFrequencyAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlCheckPointSetFrequencyAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlCheckPointSaveNowAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlCheckPointSaveNowAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlCheckPointSaveBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlCheckPointSaveBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlCheckPointSaveBeginAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlCheckPointSaveBeginAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlCheckPointSaveEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlCheckPointSaveEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlSendCurrentStateBegin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlSendCurrentStateBegin_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlSendCurrentStateEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlSendCurrentStateEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanAttributeVegetation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanAttributeVegetation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanAttributeSoil_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanAttributeSoil_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanAttributeArchitecture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanAttributeArchitecture_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgColorRGBA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgColorRGBA_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicActionCreateUrban_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicActionCreateUrban_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicActionUpdateUrban_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicActionUpdateUrban_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicActionDestroyUrban_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicActionDestroyUrban_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanMagicAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanMagicAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanMagicActionAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanMagicActionAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgUrbanMagicActionAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanDetection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanDetection_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUrbanDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUrbanDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* KnowledgeGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KnowledgeGroupAck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KnowledgeGroupAck_ErrorCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupCreationAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupCreationAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupUpdateAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupUpdateAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgKnowledgeGroupDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgKnowledgeGroupDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlGlobalMeteo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlGlobalMeteo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlLocalMeteoCreation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlLocalMeteoCreation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlLocalMeteoDestruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlLocalMeteoDestruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSimToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSimToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSimToClient_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSimToClient_Content_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumLogSupplyHandlingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumUnitIdentificationLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumReportType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SimToClient_2eproto() {
  protobuf_AddDesc_SimToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SimToClient.proto");
  GOOGLE_CHECK(file != NULL);
  OrderAck_descriptor_ = file->message_type(0);
  static const int OrderAck_offsets_[1] = {
  };
  OrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderAck_descriptor_,
      OrderAck::default_instance_,
      OrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderAck));
  OrderAck_ErrorCode_descriptor_ = OrderAck_descriptor_->enum_type(0);
  MsgUnitOrderAck_descriptor_ = file->message_type(1);
  static const int MsgUnitOrderAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrderAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrderAck, error_code_),
  };
  MsgUnitOrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitOrderAck_descriptor_,
      MsgUnitOrderAck::default_instance_,
      MsgUnitOrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitOrderAck));
  MsgAutomatOrderAck_descriptor_ = file->message_type(2);
  static const int MsgAutomatOrderAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrderAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrderAck, error_code_),
  };
  MsgAutomatOrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatOrderAck_descriptor_,
      MsgAutomatOrderAck::default_instance_,
      MsgAutomatOrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatOrderAck));
  MsgPopulationOrderAck_descriptor_ = file->message_type(3);
  static const int MsgPopulationOrderAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationOrderAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationOrderAck, error_code_),
  };
  MsgPopulationOrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationOrderAck_descriptor_,
      MsgPopulationOrderAck::default_instance_,
      MsgPopulationOrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationOrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationOrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationOrderAck));
  MsgFragOrderAck_descriptor_ = file->message_type(4);
  static const int MsgFragOrderAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFragOrderAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFragOrderAck, error_code_),
  };
  MsgFragOrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFragOrderAck_descriptor_,
      MsgFragOrderAck::default_instance_,
      MsgFragOrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFragOrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFragOrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFragOrderAck));
  MsgSetAutomatModeAck_descriptor_ = file->message_type(5);
  static const int MsgSetAutomatModeAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetAutomatModeAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetAutomatModeAck, error_code_),
  };
  MsgSetAutomatModeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSetAutomatModeAck_descriptor_,
      MsgSetAutomatModeAck::default_instance_,
      MsgSetAutomatModeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetAutomatModeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSetAutomatModeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSetAutomatModeAck));
  MsgSetAutomatModeAck_ErrorCode_descriptor_ = MsgSetAutomatModeAck_descriptor_->enum_type(0);
  UnitActionAck_descriptor_ = file->message_type(6);
  static const int UnitActionAck_offsets_[1] = {
  };
  UnitActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitActionAck_descriptor_,
      UnitActionAck::default_instance_,
      UnitActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitActionAck));
  UnitActionAck_ErrorCode_descriptor_ = UnitActionAck_descriptor_->enum_type(0);
  MsgUnitCreationRequestAck_descriptor_ = file->message_type(7);
  static const int MsgUnitCreationRequestAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreationRequestAck, error_),
  };
  MsgUnitCreationRequestAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitCreationRequestAck_descriptor_,
      MsgUnitCreationRequestAck::default_instance_,
      MsgUnitCreationRequestAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreationRequestAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreationRequestAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitCreationRequestAck));
  MsgMagicActionAck_descriptor_ = file->message_type(8);
  static const int MsgMagicActionAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicActionAck, error_code_),
  };
  MsgMagicActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMagicActionAck_descriptor_,
      MsgMagicActionAck::default_instance_,
      MsgMagicActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMagicActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMagicActionAck));
  MsgMagicActionAck_ErrorCode_descriptor_ = MsgMagicActionAck_descriptor_->enum_type(0);
  MsgUnitMagicActionAck_descriptor_ = file->message_type(9);
  static const int MsgUnitMagicActionAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitMagicActionAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitMagicActionAck, error_code_),
  };
  MsgUnitMagicActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitMagicActionAck_descriptor_,
      MsgUnitMagicActionAck::default_instance_,
      MsgUnitMagicActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitMagicActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitMagicActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitMagicActionAck));
  MsgObjectMagicActionAck_descriptor_ = file->message_type(10);
  static const int MsgObjectMagicActionAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectMagicActionAck, error_code_),
  };
  MsgObjectMagicActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectMagicActionAck_descriptor_,
      MsgObjectMagicActionAck::default_instance_,
      MsgObjectMagicActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectMagicActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectMagicActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectMagicActionAck));
  MsgObjectMagicActionAck_ErrorCode_descriptor_ = MsgObjectMagicActionAck_descriptor_->enum_type(0);
  MsgPopulationMagicActionAck_descriptor_ = file->message_type(11);
  static const int MsgPopulationMagicActionAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationMagicActionAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationMagicActionAck, error_code_),
  };
  MsgPopulationMagicActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationMagicActionAck_descriptor_,
      MsgPopulationMagicActionAck::default_instance_,
      MsgPopulationMagicActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationMagicActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationMagicActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationMagicActionAck));
  MsgPopulationMagicActionAck_ErrorCode_descriptor_ = MsgPopulationMagicActionAck_descriptor_->enum_type(0);
  MsgChangeDiplomacyAck_descriptor_ = file->message_type(12);
  static const int MsgChangeDiplomacyAck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, oid_camp1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, oid_camp2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, diplomatie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, error_code_),
  };
  MsgChangeDiplomacyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeDiplomacyAck_descriptor_,
      MsgChangeDiplomacyAck::default_instance_,
      MsgChangeDiplomacyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeDiplomacyAck));
  MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_descriptor_ = MsgChangeDiplomacyAck_descriptor_->enum_type(0);
  HierarchyModificationAck_descriptor_ = file->message_type(13);
  static const int HierarchyModificationAck_offsets_[1] = {
  };
  HierarchyModificationAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HierarchyModificationAck_descriptor_,
      HierarchyModificationAck::default_instance_,
      HierarchyModificationAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyModificationAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyModificationAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HierarchyModificationAck));
  HierarchyModificationAck_ErrorCode_descriptor_ = HierarchyModificationAck_descriptor_->enum_type(0);
  MsgAutomatChangeKnowledgeGroupAck_descriptor_ = file->message_type(14);
  static const int MsgAutomatChangeKnowledgeGroupAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroupAck, error_code_),
  };
  MsgAutomatChangeKnowledgeGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeKnowledgeGroupAck_descriptor_,
      MsgAutomatChangeKnowledgeGroupAck::default_instance_,
      MsgAutomatChangeKnowledgeGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeKnowledgeGroupAck));
  MsgAutomatChangeLogisticLinksAck_descriptor_ = file->message_type(15);
  static const int MsgAutomatChangeLogisticLinksAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinksAck, error_code_),
  };
  MsgAutomatChangeLogisticLinksAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeLogisticLinksAck_descriptor_,
      MsgAutomatChangeLogisticLinksAck::default_instance_,
      MsgAutomatChangeLogisticLinksAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinksAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinksAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeLogisticLinksAck));
  MsgAutomatChangeSuperiorAck_descriptor_ = file->message_type(16);
  static const int MsgAutomatChangeSuperiorAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperiorAck, error_code_),
  };
  MsgAutomatChangeSuperiorAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeSuperiorAck_descriptor_,
      MsgAutomatChangeSuperiorAck::default_instance_,
      MsgAutomatChangeSuperiorAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperiorAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperiorAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeSuperiorAck));
  MsgUnitChangeSuperiorAck_descriptor_ = file->message_type(17);
  static const int MsgUnitChangeSuperiorAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperiorAck, error_code_),
  };
  MsgUnitChangeSuperiorAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitChangeSuperiorAck_descriptor_,
      MsgUnitChangeSuperiorAck::default_instance_,
      MsgUnitChangeSuperiorAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperiorAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperiorAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitChangeSuperiorAck));
  MsgLogSupplyPushFlowAck_descriptor_ = file->message_type(18);
  static const int MsgLogSupplyPushFlowAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyPushFlowAck, ack_),
  };
  MsgLogSupplyPushFlowAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyPushFlowAck_descriptor_,
      MsgLogSupplyPushFlowAck::default_instance_,
      MsgLogSupplyPushFlowAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyPushFlowAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyPushFlowAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyPushFlowAck));
  MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_descriptor_ = MsgLogSupplyPushFlowAck_descriptor_->enum_type(0);
  MsgLogSupplyChangeQuotasAck_descriptor_ = file->message_type(19);
  static const int MsgLogSupplyChangeQuotasAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyChangeQuotasAck, ack_),
  };
  MsgLogSupplyChangeQuotasAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyChangeQuotasAck_descriptor_,
      MsgLogSupplyChangeQuotasAck::default_instance_,
      MsgLogSupplyChangeQuotasAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyChangeQuotasAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyChangeQuotasAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyChangeQuotasAck));
  MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_descriptor_ = MsgLogSupplyChangeQuotasAck_descriptor_->enum_type(0);
  MsgActionCreateFireOrderAck_descriptor_ = file->message_type(20);
  static const int MsgActionCreateFireOrderAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionCreateFireOrderAck, error_code_),
  };
  MsgActionCreateFireOrderAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgActionCreateFireOrderAck_descriptor_,
      MsgActionCreateFireOrderAck::default_instance_,
      MsgActionCreateFireOrderAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionCreateFireOrderAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgActionCreateFireOrderAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgActionCreateFireOrderAck));
  MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_descriptor_ = MsgActionCreateFireOrderAck_descriptor_->enum_type(0);
  MsgControlInformation_descriptor_ = file->message_type(21);
  static const int MsgControlInformation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, current_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, initial_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, tick_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, time_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, checkpoint_frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, send_vision_cones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, profiling_enabled_),
  };
  MsgControlInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlInformation_descriptor_,
      MsgControlInformation::default_instance_,
      MsgControlInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlInformation));
  MsgControlProfilingInformation_descriptor_ = file->message_type(22);
  static const int MsgControlProfilingInformation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, perception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, decision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, main_loop_),
  };
  MsgControlProfilingInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlProfilingInformation_descriptor_,
      MsgControlProfilingInformation::default_instance_,
      MsgControlProfilingInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlProfilingInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlProfilingInformation));
  MsgControlBeginTick_descriptor_ = file->message_type(23);
  static const int MsgControlBeginTick_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlBeginTick, current_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlBeginTick, date_time_),
  };
  MsgControlBeginTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlBeginTick_descriptor_,
      MsgControlBeginTick::default_instance_,
      MsgControlBeginTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlBeginTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlBeginTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlBeginTick));
  MsgControlEndTick_descriptor_ = file->message_type(24);
  static const int MsgControlEndTick_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, current_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, tick_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, long_pathfinds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, short_pathfinds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, virtual_memory_),
  };
  MsgControlEndTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlEndTick_descriptor_,
      MsgControlEndTick::default_instance_,
      MsgControlEndTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlEndTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlEndTick));
  ControlAck_descriptor_ = file->message_type(25);
  static const int ControlAck_offsets_[1] = {
  };
  ControlAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ControlAck_descriptor_,
      ControlAck::default_instance_,
      ControlAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ControlAck));
  ControlAck_ErrorCode_descriptor_ = ControlAck_descriptor_->enum_type(0);
  MsgControlDatetimeChangeAck_descriptor_ = file->message_type(26);
  static const int MsgControlDatetimeChangeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlDatetimeChangeAck, error_code_),
  };
  MsgControlDatetimeChangeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlDatetimeChangeAck_descriptor_,
      MsgControlDatetimeChangeAck::default_instance_,
      MsgControlDatetimeChangeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlDatetimeChangeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlDatetimeChangeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlDatetimeChangeAck));
  MsgControlChangeTimeFactorAck_descriptor_ = file->message_type(27);
  static const int MsgControlChangeTimeFactorAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactorAck, time_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactorAck, error_code_),
  };
  MsgControlChangeTimeFactorAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlChangeTimeFactorAck_descriptor_,
      MsgControlChangeTimeFactorAck::default_instance_,
      MsgControlChangeTimeFactorAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactorAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactorAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlChangeTimeFactorAck));
  MsgControlStopAck_descriptor_ = file->message_type(28);
  static const int MsgControlStopAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlStopAck, error_code_),
  };
  MsgControlStopAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlStopAck_descriptor_,
      MsgControlStopAck::default_instance_,
      MsgControlStopAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlStopAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlStopAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlStopAck));
  MsgControlPauseAck_descriptor_ = file->message_type(29);
  static const int MsgControlPauseAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlPauseAck, error_code_),
  };
  MsgControlPauseAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlPauseAck_descriptor_,
      MsgControlPauseAck::default_instance_,
      MsgControlPauseAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlPauseAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlPauseAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlPauseAck));
  MsgControlResumeAck_descriptor_ = file->message_type(30);
  static const int MsgControlResumeAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlResumeAck, error_code_),
  };
  MsgControlResumeAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlResumeAck_descriptor_,
      MsgControlResumeAck::default_instance_,
      MsgControlResumeAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlResumeAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlResumeAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlResumeAck));
  MsgTeamCreation_descriptor_ = file->message_type(31);
  static const int MsgTeamCreation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreation, nom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreation, type_),
  };
  MsgTeamCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTeamCreation_descriptor_,
      MsgTeamCreation::default_instance_,
      MsgTeamCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTeamCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTeamCreation));
  MsgAutomatCreation_oid_parent_descriptor_ = file->message_type(32);
  static const int MsgAutomatCreation_oid_parent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation_oid_parent, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation_oid_parent, automate_),
  };
  MsgAutomatCreation_oid_parent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatCreation_oid_parent_descriptor_,
      MsgAutomatCreation_oid_parent::default_instance_,
      MsgAutomatCreation_oid_parent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation_oid_parent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation_oid_parent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatCreation_oid_parent));
  MsgAutomatCreation_descriptor_ = file->message_type(33);
  static const int MsgAutomatCreation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, type_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, nom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, oid_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, oid_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, oid_groupe_connaissance_),
  };
  MsgAutomatCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatCreation_descriptor_,
      MsgAutomatCreation::default_instance_,
      MsgAutomatCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatCreation));
  RulesOfEngagement_descriptor_ = file->message_type(34);
  static const int RulesOfEngagement_offsets_[1] = {
  };
  RulesOfEngagement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RulesOfEngagement_descriptor_,
      RulesOfEngagement::default_instance_,
      RulesOfEngagement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesOfEngagement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RulesOfEngagement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RulesOfEngagement));
  RulesOfEngagement_Value_descriptor_ = RulesOfEngagement_descriptor_->enum_type(0);
  ForceRatio_descriptor_ = file->message_type(35);
  static const int ForceRatio_offsets_[1] = {
  };
  ForceRatio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceRatio_descriptor_,
      ForceRatio::default_instance_,
      ForceRatio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceRatio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceRatio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceRatio));
  ForceRatio_Value_descriptor_ = ForceRatio_descriptor_->enum_type(0);
  MsgAutomatAttributes_descriptor_ = file->message_type(36);
  static const int MsgAutomatAttributes_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, etat_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, rapport_de_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, combat_de_rencontre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, etat_operationnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, roe_),
  };
  MsgAutomatAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatAttributes_descriptor_,
      MsgAutomatAttributes::default_instance_,
      MsgAutomatAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatAttributes));
  MsgUnitCreation_descriptor_ = file->message_type(37);
  static const int MsgUnitCreation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, type_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, nom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, oid_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, pc_),
  };
  MsgUnitCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitCreation_descriptor_,
      MsgUnitCreation::default_instance_,
      MsgUnitCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitCreation));
  BorrowedEquipments_descriptor_ = file->message_type(38);
  static const int BorrowedEquipments_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments, elem_),
  };
  BorrowedEquipments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BorrowedEquipments_descriptor_,
      BorrowedEquipments::default_instance_,
      BorrowedEquipments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BorrowedEquipments));
  BorrowedEquipments_BorrowedEquipment_descriptor_ = BorrowedEquipments_descriptor_->nested_type(0);
  static const int BorrowedEquipments_BorrowedEquipment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments_BorrowedEquipment, oid_pion_preteur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments_BorrowedEquipment, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments_BorrowedEquipment, nombre_),
  };
  BorrowedEquipments_BorrowedEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BorrowedEquipments_BorrowedEquipment_descriptor_,
      BorrowedEquipments_BorrowedEquipment::default_instance_,
      BorrowedEquipments_BorrowedEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments_BorrowedEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BorrowedEquipments_BorrowedEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BorrowedEquipments_BorrowedEquipment));
  LentEquipments_descriptor_ = file->message_type(39);
  static const int LentEquipments_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments, elem_),
  };
  LentEquipments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LentEquipments_descriptor_,
      LentEquipments::default_instance_,
      LentEquipments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LentEquipments));
  LentEquipments_LentEquipment_descriptor_ = LentEquipments_descriptor_->nested_type(0);
  static const int LentEquipments_LentEquipment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments_LentEquipment, oid_pion_emprunteur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments_LentEquipment, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments_LentEquipment, nombre_),
  };
  LentEquipments_LentEquipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LentEquipments_LentEquipment_descriptor_,
      LentEquipments_LentEquipment::default_instance_,
      LentEquipments_LentEquipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments_LentEquipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LentEquipments_LentEquipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LentEquipments_LentEquipment));
  ResourceDotations_descriptor_ = file->message_type(40);
  static const int ResourceDotations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations, elem_),
  };
  ResourceDotations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceDotations_descriptor_,
      ResourceDotations::default_instance_,
      ResourceDotations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceDotations));
  ResourceDotations_ResourceDotation_descriptor_ = ResourceDotations_descriptor_->nested_type(0);
  static const int ResourceDotations_ResourceDotation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations_ResourceDotation, ressource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations_ResourceDotation, quantite_disponible_),
  };
  ResourceDotations_ResourceDotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceDotations_ResourceDotation_descriptor_,
      ResourceDotations_ResourceDotation::default_instance_,
      ResourceDotations_ResourceDotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations_ResourceDotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDotations_ResourceDotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceDotations_ResourceDotation));
  EquipmentDotations_descriptor_ = file->message_type(41);
  static const int EquipmentDotations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations, elem_),
  };
  EquipmentDotations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentDotations_descriptor_,
      EquipmentDotations::default_instance_,
      EquipmentDotations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentDotations));
  EquipmentDotations_EquipmentDotation_descriptor_ = EquipmentDotations_descriptor_->nested_type(0);
  static const int EquipmentDotations_EquipmentDotation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, nb_disponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, nb_indisponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, nb_reparables_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, nb_dans_chaine_maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, nb_prisonniers_),
  };
  EquipmentDotations_EquipmentDotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentDotations_EquipmentDotation_descriptor_,
      EquipmentDotations_EquipmentDotation::default_instance_,
      EquipmentDotations_EquipmentDotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentDotations_EquipmentDotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentDotations_EquipmentDotation));
  HumanDotations_descriptor_ = file->message_type(42);
  static const int HumanDotations_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations, elem_),
  };
  HumanDotations_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanDotations_descriptor_,
      HumanDotations::default_instance_,
      HumanDotations_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanDotations));
  HumanDotations_HumanDotation_descriptor_ = HumanDotations_descriptor_->nested_type(0);
  static const int HumanDotations_HumanDotation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, rang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_operationnels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_morts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_blesses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_blesses_mentaux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_contamines_nbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_dans_chaine_sante_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, nb_utilises_pour_maintenance_),
  };
  HumanDotations_HumanDotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HumanDotations_HumanDotation_descriptor_,
      HumanDotations_HumanDotation::default_instance_,
      HumanDotations_HumanDotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HumanDotations_HumanDotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HumanDotations_HumanDotation));
  ContaminationState_descriptor_ = file->message_type(43);
  static const int ContaminationState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContaminationState, percentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContaminationState, quantity_),
  };
  ContaminationState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContaminationState_descriptor_,
      ContaminationState::default_instance_,
      ContaminationState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContaminationState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContaminationState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContaminationState));
  Communication_descriptor_ = file->message_type(44);
  static const int Communication_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Communication, jammed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Communication, knowledge_group_),
  };
  Communication_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Communication_descriptor_,
      Communication::default_instance_,
      Communication_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Communication, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Communication, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Communication));
  MsgUnitAttributes_descriptor_ = file->message_type(45);
  static const int MsgUnitAttributes_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, dotation_eff_personnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, dotation_eff_materiel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, dotation_eff_ressource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, equipements_pretes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, equipements_empruntes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, hauteur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, vitesse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, etat_operationnel_brut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, pions_renforcant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, pion_renforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, mort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, neutralise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, mode_furtif_actif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, embarque_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, transporteurs_disponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, posture_old_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, posture_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, posture_pourcentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, etat_installation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, en_tenue_de_protection_nbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, contamine_par_agents_nbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, etat_contamination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, communications_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, silence_radio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, radar_actif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, pions_transportes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, pion_transporteur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, rapport_de_force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, combat_de_rencontre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, etat_operationnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, disponibilite_au_tir_indirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, roe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, roe_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, fatigue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, moral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, rendu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, prisonnier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, refugie_pris_en_compte_),
  };
  MsgUnitAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitAttributes_descriptor_,
      MsgUnitAttributes::default_instance_,
      MsgUnitAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitAttributes));
  MsgUnitAttributes_Posture_descriptor_ = MsgUnitAttributes_descriptor_->enum_type(0);
  MsgUnitAttributes_FireAvailability_descriptor_ = MsgUnitAttributes_descriptor_->enum_type(1);
  MsgUnitAttributes_PopulationRoe_descriptor_ = MsgUnitAttributes_descriptor_->enum_type(2);
  MsgUnitPathFind_descriptor_ = file->message_type(46);
  static const int MsgUnitPathFind_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitPathFind, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitPathFind, itineraire_),
  };
  MsgUnitPathFind_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitPathFind_descriptor_,
      MsgUnitPathFind::default_instance_,
      MsgUnitPathFind_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitPathFind, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitPathFind, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitPathFind));
  MsgUnitDestruction_descriptor_ = file->message_type(47);
  static const int MsgUnitDestruction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDestruction, oid_),
  };
  MsgUnitDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitDestruction_descriptor_,
      MsgUnitDestruction::default_instance_,
      MsgUnitDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitDestruction));
  MsgUnitEnvironmentType_descriptor_ = file->message_type(48);
  static const int MsgUnitEnvironmentType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, linear_),
  };
  MsgUnitEnvironmentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitEnvironmentType_descriptor_,
      MsgUnitEnvironmentType::default_instance_,
      MsgUnitEnvironmentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEnvironmentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitEnvironmentType));
  MsgUnitKnowledgeCreation_descriptor_ = file->message_type(49);
  static const int MsgUnitKnowledgeCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, oid_unite_reelle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, type_unite_),
  };
  MsgUnitKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitKnowledgeCreation_descriptor_,
      MsgUnitKnowledgeCreation::default_instance_,
      MsgUnitKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitKnowledgeCreation));
  AutomatPerception_descriptor_ = file->message_type(50);
  static const int AutomatPerception_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatPerception, oid_compagnie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatPerception, identification_level_),
  };
  AutomatPerception_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomatPerception_descriptor_,
      AutomatPerception::default_instance_,
      AutomatPerception_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatPerception, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatPerception, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomatPerception));
  SeqOfAutomatPerception_descriptor_ = file->message_type(51);
  static const int SeqOfAutomatPerception_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfAutomatPerception, elem_),
  };
  SeqOfAutomatPerception_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfAutomatPerception_descriptor_,
      SeqOfAutomatPerception::default_instance_,
      SeqOfAutomatPerception_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfAutomatPerception, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfAutomatPerception, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfAutomatPerception));
  MsgUnitKnowledgeUpdate_descriptor_ = file->message_type(52);
  static const int MsgUnitKnowledgeUpdate_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, pertinence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, identification_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, max_identification_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, etat_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, mort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, nature_pc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, perception_par_compagnie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, rendu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, prisonnier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, refugie_pris_en_compte_),
  };
  MsgUnitKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitKnowledgeUpdate_descriptor_,
      MsgUnitKnowledgeUpdate::default_instance_,
      MsgUnitKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitKnowledgeUpdate));
  MsgUnitKnowledgeDestruction_descriptor_ = file->message_type(53);
  static const int MsgUnitKnowledgeDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeDestruction, oid_groupe_possesseur_),
  };
  MsgUnitKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitKnowledgeDestruction_descriptor_,
      MsgUnitKnowledgeDestruction::default_instance_,
      MsgUnitKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitKnowledgeDestruction));
  MsgStartUnitFire_target_descriptor_ = file->message_type(54);
  static const int MsgStartUnitFire_target_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire_target, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire_target, population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire_target, position_),
  };
  MsgStartUnitFire_target_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartUnitFire_target_descriptor_,
      MsgStartUnitFire_target::default_instance_,
      MsgStartUnitFire_target_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire_target, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire_target, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartUnitFire_target));
  MsgStartUnitFire_descriptor_ = file->message_type(55);
  static const int MsgStartUnitFire_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, fire_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, firer_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, ammunition_),
  };
  MsgStartUnitFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartUnitFire_descriptor_,
      MsgStartUnitFire::default_instance_,
      MsgStartUnitFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartUnitFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartUnitFire));
  UnitHumanFireDamage_descriptor_ = file->message_type(56);
  static const int UnitHumanFireDamage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, alive_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, dead_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, wounded_u1_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, wounded_u2_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, wounded_u3_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, wounded_ue_nbr_),
  };
  UnitHumanFireDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitHumanFireDamage_descriptor_,
      UnitHumanFireDamage::default_instance_,
      UnitHumanFireDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitHumanFireDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitHumanFireDamage));
  SeqOfUnitHumanFireDamage_descriptor_ = file->message_type(57);
  static const int SeqOfUnitHumanFireDamage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitHumanFireDamage, elem_),
  };
  SeqOfUnitHumanFireDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfUnitHumanFireDamage_descriptor_,
      SeqOfUnitHumanFireDamage::default_instance_,
      SeqOfUnitHumanFireDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitHumanFireDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitHumanFireDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfUnitHumanFireDamage));
  MsgUnitEquipmentFireDamage_descriptor_ = file->message_type(58);
  static const int MsgUnitEquipmentFireDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, equipement_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, available_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, unavailable_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, repairable_nbr_),
  };
  MsgUnitEquipmentFireDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitEquipmentFireDamage_descriptor_,
      MsgUnitEquipmentFireDamage::default_instance_,
      MsgUnitEquipmentFireDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitEquipmentFireDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitEquipmentFireDamage));
  SeqOfUnitEquipmentFireDamage_descriptor_ = file->message_type(59);
  static const int SeqOfUnitEquipmentFireDamage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitEquipmentFireDamage, elem_),
  };
  SeqOfUnitEquipmentFireDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfUnitEquipmentFireDamage_descriptor_,
      SeqOfUnitEquipmentFireDamage::default_instance_,
      SeqOfUnitEquipmentFireDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitEquipmentFireDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfUnitEquipmentFireDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfUnitEquipmentFireDamage));
  MsgUnitFireDamages_descriptor_ = file->message_type(60);
  static const int MsgUnitFireDamages_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitFireDamages, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitFireDamages, humans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitFireDamages, equipments_),
  };
  MsgUnitFireDamages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitFireDamages_descriptor_,
      MsgUnitFireDamages::default_instance_,
      MsgUnitFireDamages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitFireDamages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitFireDamages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitFireDamages));
  MsgUnitsFireDamages_descriptor_ = file->message_type(61);
  static const int MsgUnitsFireDamages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitsFireDamages, elem_),
  };
  MsgUnitsFireDamages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitsFireDamages_descriptor_,
      MsgUnitsFireDamages::default_instance_,
      MsgUnitsFireDamages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitsFireDamages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitsFireDamages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitsFireDamages));
  MsgPopulationFireDamages_descriptor_ = file->message_type(62);
  static const int MsgPopulationFireDamages_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFireDamages, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFireDamages, dead_nbr_),
  };
  MsgPopulationFireDamages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFireDamages_descriptor_,
      MsgPopulationFireDamages::default_instance_,
      MsgPopulationFireDamages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFireDamages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFireDamages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFireDamages));
  MsgPopulationsFireDamages_descriptor_ = file->message_type(63);
  static const int MsgPopulationsFireDamages_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationsFireDamages, elem_),
  };
  MsgPopulationsFireDamages_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationsFireDamages_descriptor_,
      MsgPopulationsFireDamages::default_instance_,
      MsgPopulationsFireDamages_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationsFireDamages, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationsFireDamages, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationsFireDamages));
  MsgStopUnitFire_descriptor_ = file->message_type(64);
  static const int MsgStopUnitFire_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopUnitFire, fire_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopUnitFire, units_damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopUnitFire, populations_damages_),
  };
  MsgStopUnitFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStopUnitFire_descriptor_,
      MsgStopUnitFire::default_instance_,
      MsgStopUnitFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopUnitFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopUnitFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStopUnitFire));
  MsgStartPopulationFire_descriptor_ = file->message_type(65);
  static const int MsgStartPopulationFire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartPopulationFire, fire_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartPopulationFire, firer_oid_),
  };
  MsgStartPopulationFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartPopulationFire_descriptor_,
      MsgStartPopulationFire::default_instance_,
      MsgStartPopulationFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartPopulationFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartPopulationFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartPopulationFire));
  MsgStopPopulationFire_descriptor_ = file->message_type(66);
  static const int MsgStopPopulationFire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopPopulationFire, fire_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopPopulationFire, units_damages_),
  };
  MsgStopPopulationFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStopPopulationFire_descriptor_,
      MsgStopPopulationFire::default_instance_,
      MsgStopPopulationFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopPopulationFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopPopulationFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStopPopulationFire));
  MsgExplosion_descriptor_ = file->message_type(67);
  static const int MsgExplosion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExplosion, object_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExplosion, units_damages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExplosion, populations_damages_),
  };
  MsgExplosion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExplosion_descriptor_,
      MsgExplosion::default_instance_,
      MsgExplosion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExplosion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExplosion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExplosion));
  MsgStartFireEffect_descriptor_ = file->message_type(68);
  static const int MsgStartFireEffect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartFireEffect, effect_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartFireEffect, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartFireEffect, type_),
  };
  MsgStartFireEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStartFireEffect_descriptor_,
      MsgStartFireEffect::default_instance_,
      MsgStartFireEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartFireEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStartFireEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStartFireEffect));
  MsgStopFireEffect_descriptor_ = file->message_type(69);
  static const int MsgStopFireEffect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopFireEffect, oid_),
  };
  MsgStopFireEffect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgStopFireEffect_descriptor_,
      MsgStopFireEffect::default_instance_,
      MsgStopFireEffect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopFireEffect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgStopFireEffect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgStopFireEffect));
  MsgReport_descriptor_ = file->message_type(70);
  static const int MsgReport_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, cr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, cr_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, parametres_),
  };
  MsgReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReport_descriptor_,
      MsgReport::default_instance_,
      MsgReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReport));
  MsgInvalidateReport_descriptor_ = file->message_type(71);
  static const int MsgInvalidateReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInvalidateReport, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInvalidateReport, cr_oid_),
  };
  MsgInvalidateReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgInvalidateReport_descriptor_,
      MsgInvalidateReport::default_instance_,
      MsgInvalidateReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInvalidateReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgInvalidateReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgInvalidateReport));
  MsgTrace_descriptor_ = file->message_type(72);
  static const int MsgTrace_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTrace, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTrace, message_),
  };
  MsgTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTrace_descriptor_,
      MsgTrace::default_instance_,
      MsgTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTrace));
  MsgDecisionalState_descriptor_ = file->message_type(73);
  static const int MsgDecisionalState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecisionalState, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecisionalState, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecisionalState, value_),
  };
  MsgDecisionalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDecisionalState_descriptor_,
      MsgDecisionalState::default_instance_,
      MsgDecisionalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecisionalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDecisionalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDecisionalState));
  MsgDebugPoints_descriptor_ = file->message_type(74);
  static const int MsgDebugPoints_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugPoints, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugPoints, coordinates_),
  };
  MsgDebugPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDebugPoints_descriptor_,
      MsgDebugPoints::default_instance_,
      MsgDebugPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDebugPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDebugPoints));
  SeqOfHeading_descriptor_ = file->message_type(75);
  static const int SeqOfHeading_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfHeading, elem_),
  };
  SeqOfHeading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfHeading_descriptor_,
      SeqOfHeading::default_instance_,
      SeqOfHeading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfHeading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfHeading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfHeading));
  MsgVisionCone_descriptor_ = file->message_type(76);
  static const int MsgVisionCone_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, directions_),
  };
  MsgVisionCone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgVisionCone_descriptor_,
      MsgVisionCone::default_instance_,
      MsgVisionCone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgVisionCone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgVisionCone));
  SeqOfVisionCone_descriptor_ = file->message_type(77);
  static const int SeqOfVisionCone_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfVisionCone, elem_),
  };
  SeqOfVisionCone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfVisionCone_descriptor_,
      SeqOfVisionCone::default_instance_,
      SeqOfVisionCone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfVisionCone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfVisionCone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfVisionCone));
  MsgUnitVisionCones_descriptor_ = file->message_type(78);
  static const int MsgUnitVisionCones_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitVisionCones, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitVisionCones, cones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitVisionCones, elongation_),
  };
  MsgUnitVisionCones_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitVisionCones_descriptor_,
      MsgUnitVisionCones::default_instance_,
      MsgUnitVisionCones_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitVisionCones, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitVisionCones, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitVisionCones));
  MsgUnitDetection_descriptor_ = file->message_type(79);
  static const int MsgUnitDetection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, detected_unit_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, current_visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, max_visibility_),
  };
  MsgUnitDetection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitDetection_descriptor_,
      MsgUnitDetection::default_instance_,
      MsgUnitDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitDetection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitDetection));
  MsgObjectDetection_descriptor_ = file->message_type(80);
  static const int MsgObjectDetection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDetection, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDetection, object_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDetection, visibility_),
  };
  MsgObjectDetection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectDetection_descriptor_,
      MsgObjectDetection::default_instance_,
      MsgObjectDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDetection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDetection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectDetection));
  MsgPopulationConcentrationDetection_descriptor_ = file->message_type(81);
  static const int MsgPopulationConcentrationDetection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, population_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, concentration_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, visibility_),
  };
  MsgPopulationConcentrationDetection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationDetection_descriptor_,
      MsgPopulationConcentrationDetection::default_instance_,
      MsgPopulationConcentrationDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDetection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationDetection));
  MsgPopulationFlowDetection_descriptor_ = file->message_type(82);
  static const int MsgPopulationFlowDetection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, population_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, flow_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, visible_flow_),
  };
  MsgPopulationFlowDetection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowDetection_descriptor_,
      MsgPopulationFlowDetection::default_instance_,
      MsgPopulationFlowDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDetection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowDetection));
  MsgObjectCreation_descriptor_ = file->message_type(83);
  static const int MsgObjectCreation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, attributes_),
  };
  MsgObjectCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectCreation_descriptor_,
      MsgObjectCreation::default_instance_,
      MsgObjectCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectCreation));
  MsgObjectDestruction_descriptor_ = file->message_type(84);
  static const int MsgObjectDestruction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDestruction, oid_),
  };
  MsgObjectDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectDestruction_descriptor_,
      MsgObjectDestruction::default_instance_,
      MsgObjectDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectDestruction));
  MsgObjectUpdate_descriptor_ = file->message_type(85);
  static const int MsgObjectUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectUpdate, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectUpdate, attributes_),
  };
  MsgObjectUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectUpdate_descriptor_,
      MsgObjectUpdate::default_instance_,
      MsgObjectUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectUpdate));
  MsgObjectKnowledgeCreation_descriptor_ = file->message_type(86);
  static const int MsgObjectKnowledgeCreation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, real_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, group_),
  };
  MsgObjectKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectKnowledgeCreation_descriptor_,
      MsgObjectKnowledgeCreation::default_instance_,
      MsgObjectKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectKnowledgeCreation));
  MsgObjectKnowledgeUpdate_descriptor_ = file->message_type(87);
  static const int MsgObjectKnowledgeUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, real_object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, relevance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, perceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, automat_perception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, group_),
  };
  MsgObjectKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectKnowledgeUpdate_descriptor_,
      MsgObjectKnowledgeUpdate::default_instance_,
      MsgObjectKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectKnowledgeUpdate));
  MsgObjectKnowledgeDestruction_descriptor_ = file->message_type(88);
  static const int MsgObjectKnowledgeDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeDestruction, team_),
  };
  MsgObjectKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgObjectKnowledgeDestruction_descriptor_,
      MsgObjectKnowledgeDestruction::default_instance_,
      MsgObjectKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgObjectKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgObjectKnowledgeDestruction));
  MsgUrbanKnowledgeCreation_descriptor_ = file->message_type(89);
  static const int MsgUrbanKnowledgeCreation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeCreation, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeCreation, real_urban_),
  };
  MsgUrbanKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanKnowledgeCreation_descriptor_,
      MsgUrbanKnowledgeCreation::default_instance_,
      MsgUrbanKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanKnowledgeCreation));
  MsgUrbanKnowledgeUpdate_descriptor_ = file->message_type(90);
  static const int MsgUrbanKnowledgeUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, real_urban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, relevance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, identification_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, perceived_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, automat_perception_),
  };
  MsgUrbanKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanKnowledgeUpdate_descriptor_,
      MsgUrbanKnowledgeUpdate::default_instance_,
      MsgUrbanKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanKnowledgeUpdate));
  MsgUrbanKnowledgeDestruction_descriptor_ = file->message_type(91);
  static const int MsgUrbanKnowledgeDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeDestruction, team_),
  };
  MsgUrbanKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanKnowledgeDestruction_descriptor_,
      MsgUrbanKnowledgeDestruction::default_instance_,
      MsgUrbanKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanKnowledgeDestruction));
  MsgLogMedicalHandlingCreation_descriptor_ = file->message_type(92);
  static const int MsgLogMedicalHandlingCreation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, tick_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, rang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, blessure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, blesse_mental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, contamine_nbc_),
  };
  MsgLogMedicalHandlingCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalHandlingCreation_descriptor_,
      MsgLogMedicalHandlingCreation::default_instance_,
      MsgLogMedicalHandlingCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalHandlingCreation));
  MsgLogMedicalHandlingUpdate_descriptor_ = file->message_type(93);
  static const int MsgLogMedicalHandlingUpdate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, oid_pion_log_traitant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, blessure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, blesse_mental_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, contamine_nbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, etat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, diagnostique_effectue_),
  };
  MsgLogMedicalHandlingUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalHandlingUpdate_descriptor_,
      MsgLogMedicalHandlingUpdate::default_instance_,
      MsgLogMedicalHandlingUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalHandlingUpdate));
  MsgLogMedicalHandlingDestruction_descriptor_ = file->message_type(94);
  static const int MsgLogMedicalHandlingDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingDestruction, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingDestruction, oid_pion_),
  };
  MsgLogMedicalHandlingDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalHandlingDestruction_descriptor_,
      MsgLogMedicalHandlingDestruction::default_instance_,
      MsgLogMedicalHandlingDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalHandlingDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalHandlingDestruction));
  MsgLogMedicalEquipmentAvailability_descriptor_ = file->message_type(95);
  static const int MsgLogMedicalEquipmentAvailability_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, nbr_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, nbr_disponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, nbr_au_travail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, nbr_pretes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, nbr_au_repos_),
  };
  MsgLogMedicalEquipmentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalEquipmentAvailability_descriptor_,
      MsgLogMedicalEquipmentAvailability::default_instance_,
      MsgLogMedicalEquipmentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalEquipmentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalEquipmentAvailability));
  SeqOfLogMedicalEquipmentAvailability_descriptor_ = file->message_type(96);
  static const int SeqOfLogMedicalEquipmentAvailability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMedicalEquipmentAvailability, elem_),
  };
  SeqOfLogMedicalEquipmentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfLogMedicalEquipmentAvailability_descriptor_,
      SeqOfLogMedicalEquipmentAvailability::default_instance_,
      SeqOfLogMedicalEquipmentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMedicalEquipmentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMedicalEquipmentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfLogMedicalEquipmentAvailability));
  MsgLogMedicalState_descriptor_ = file->message_type(97);
  static const int MsgLogMedicalState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, chaine_activee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, priorites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, priorites_tactiques_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, disponibilites_ambulances_releve_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, disponibilites_ambulances_ramassage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, disponibilites_medecins_),
  };
  MsgLogMedicalState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalState_descriptor_,
      MsgLogMedicalState::default_instance_,
      MsgLogMedicalState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalState));
  MsgLogMaintenanceHandlingCreation_descriptor_ = file->message_type(98);
  static const int MsgLogMaintenanceHandlingCreation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, tick_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, type_panne_),
  };
  MsgLogMaintenanceHandlingCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenanceHandlingCreation_descriptor_,
      MsgLogMaintenanceHandlingCreation::default_instance_,
      MsgLogMaintenanceHandlingCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenanceHandlingCreation));
  MsgLogMaintenanceHandlingUpdate_descriptor_ = file->message_type(99);
  static const int MsgLogMaintenanceHandlingUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, oid_pion_log_traitant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, etat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, diagnostique_effectue_),
  };
  MsgLogMaintenanceHandlingUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenanceHandlingUpdate_descriptor_,
      MsgLogMaintenanceHandlingUpdate::default_instance_,
      MsgLogMaintenanceHandlingUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenanceHandlingUpdate));
  MsgLogMaintenanceHandlingDestruction_descriptor_ = file->message_type(100);
  static const int MsgLogMaintenanceHandlingDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingDestruction, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingDestruction, oid_pion_),
  };
  MsgLogMaintenanceHandlingDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenanceHandlingDestruction_descriptor_,
      MsgLogMaintenanceHandlingDestruction::default_instance_,
      MsgLogMaintenanceHandlingDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceHandlingDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenanceHandlingDestruction));
  MsgLogMaintenanceEquipmentAvailability_descriptor_ = file->message_type(101);
  static const int MsgLogMaintenanceEquipmentAvailability_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, nbr_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, nbr_disponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, nbr_au_travail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, nbr_pretes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, nbr_au_repos_),
  };
  MsgLogMaintenanceEquipmentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenanceEquipmentAvailability_descriptor_,
      MsgLogMaintenanceEquipmentAvailability::default_instance_,
      MsgLogMaintenanceEquipmentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceEquipmentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenanceEquipmentAvailability));
  SeqOfLogMaintenanceEquipmentAvailability_descriptor_ = file->message_type(102);
  static const int SeqOfLogMaintenanceEquipmentAvailability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMaintenanceEquipmentAvailability, elem_),
  };
  SeqOfLogMaintenanceEquipmentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfLogMaintenanceEquipmentAvailability_descriptor_,
      SeqOfLogMaintenanceEquipmentAvailability::default_instance_,
      SeqOfLogMaintenanceEquipmentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMaintenanceEquipmentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogMaintenanceEquipmentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfLogMaintenanceEquipmentAvailability));
  MsgLogMaintenanceState_descriptor_ = file->message_type(103);
  static const int MsgLogMaintenanceState_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, chaine_activee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, regime_travail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, priorites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, priorites_tactiques_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, disponibilites_remorqueurs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, disponibilites_reparateurs_),
  };
  MsgLogMaintenanceState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenanceState_descriptor_,
      MsgLogMaintenanceState::default_instance_,
      MsgLogMaintenanceState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenanceState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenanceState));
  MsgLogSupplyHandlingCreation_descriptor_ = file->message_type(104);
  static const int MsgLogSupplyHandlingCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, oid_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, tick_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, dotations_),
  };
  MsgLogSupplyHandlingCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyHandlingCreation_descriptor_,
      MsgLogSupplyHandlingCreation::default_instance_,
      MsgLogSupplyHandlingCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyHandlingCreation));
  MsgDotationQuery_descriptor_ = file->message_type(105);
  static const int MsgDotationQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, ressource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, quantite_demandee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, quantite_accordee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, quantite_en_transit_),
  };
  MsgDotationQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDotationQuery_descriptor_,
      MsgDotationQuery::default_instance_,
      MsgDotationQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDotationQuery));
  SeqOfDotationQuery_descriptor_ = file->message_type(106);
  static const int SeqOfDotationQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuery, elem_),
  };
  SeqOfDotationQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfDotationQuery_descriptor_,
      SeqOfDotationQuery::default_instance_,
      SeqOfDotationQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfDotationQuery));
  MsgLogSupplyHandlingUpdate_descriptor_ = file->message_type(107);
  static const int MsgLogSupplyHandlingUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, oid_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, oid_automate_log_traitant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, oid_automate_log_fournissant_moyens_convoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, oid_pion_convoyant_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, etat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, dotations_),
  };
  MsgLogSupplyHandlingUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyHandlingUpdate_descriptor_,
      MsgLogSupplyHandlingUpdate::default_instance_,
      MsgLogSupplyHandlingUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyHandlingUpdate));
  MsgLogSupplyHandlingDestruction_descriptor_ = file->message_type(108);
  static const int MsgLogSupplyHandlingDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingDestruction, oid_consigne_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingDestruction, oid_automate_),
  };
  MsgLogSupplyHandlingDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyHandlingDestruction_descriptor_,
      MsgLogSupplyHandlingDestruction::default_instance_,
      MsgLogSupplyHandlingDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyHandlingDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyHandlingDestruction));
  MsgLogSupplyEquimentAvailability_descriptor_ = file->message_type(109);
  static const int MsgLogSupplyEquimentAvailability_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, type_equipement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, nbr_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, nbr_disponibles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, nbr_au_travail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, nbr_pretes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, nbr_au_repos_),
  };
  MsgLogSupplyEquimentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyEquimentAvailability_descriptor_,
      MsgLogSupplyEquimentAvailability::default_instance_,
      MsgLogSupplyEquimentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyEquimentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyEquimentAvailability));
  SeqOfLogSupplyEquimentAvailability_descriptor_ = file->message_type(110);
  static const int SeqOfLogSupplyEquimentAvailability_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogSupplyEquimentAvailability, elem_),
  };
  SeqOfLogSupplyEquimentAvailability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfLogSupplyEquimentAvailability_descriptor_,
      SeqOfLogSupplyEquimentAvailability::default_instance_,
      SeqOfLogSupplyEquimentAvailability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogSupplyEquimentAvailability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfLogSupplyEquimentAvailability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfLogSupplyEquimentAvailability));
  MsgLogSupplyState_descriptor_ = file->message_type(111);
  static const int MsgLogSupplyState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, oid_pion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, chaine_activee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, stocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, disponibilites_transporteurs_convois_),
  };
  MsgLogSupplyState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyState_descriptor_,
      MsgLogSupplyState::default_instance_,
      MsgLogSupplyState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyState));
  MsgLogSupplyQuotas_descriptor_ = file->message_type(112);
  static const int MsgLogSupplyQuotas_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyQuotas, oid_automate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyQuotas, quotas_),
  };
  MsgLogSupplyQuotas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogSupplyQuotas_descriptor_,
      MsgLogSupplyQuotas::default_instance_,
      MsgLogSupplyQuotas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyQuotas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogSupplyQuotas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogSupplyQuotas));
  MsgPopulationCreation_descriptor_ = file->message_type(113);
  static const int MsgPopulationCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, type_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, nom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, oid_camp_),
  };
  MsgPopulationCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationCreation_descriptor_,
      MsgPopulationCreation::default_instance_,
      MsgPopulationCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationCreation));
  MsgPopulationUpdate_descriptor_ = file->message_type(114);
  static const int MsgPopulationUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationUpdate, etat_domination_),
  };
  MsgPopulationUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationUpdate_descriptor_,
      MsgPopulationUpdate::default_instance_,
      MsgPopulationUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationUpdate));
  MsgPopulationConcentrationCreation_descriptor_ = file->message_type(115);
  static const int MsgPopulationConcentrationCreation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationCreation, oid_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationCreation, position_),
  };
  MsgPopulationConcentrationCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationCreation_descriptor_,
      MsgPopulationConcentrationCreation::default_instance_,
      MsgPopulationConcentrationCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationCreation));
  MsgPopulationConcentrationDestruction_descriptor_ = file->message_type(116);
  static const int MsgPopulationConcentrationDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDestruction, oid_population_),
  };
  MsgPopulationConcentrationDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationDestruction_descriptor_,
      MsgPopulationConcentrationDestruction::default_instance_,
      MsgPopulationConcentrationDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationDestruction));
  MsgPopulationConcentrationUpdate_descriptor_ = file->message_type(117);
  static const int MsgPopulationConcentrationUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, oid_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, nb_humains_vivants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, nb_humains_morts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, attitude_),
  };
  MsgPopulationConcentrationUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationUpdate_descriptor_,
      MsgPopulationConcentrationUpdate::default_instance_,
      MsgPopulationConcentrationUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationUpdate));
  MsgPopulationFlowCreation_descriptor_ = file->message_type(118);
  static const int MsgPopulationFlowCreation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowCreation, oid_population_),
  };
  MsgPopulationFlowCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowCreation_descriptor_,
      MsgPopulationFlowCreation::default_instance_,
      MsgPopulationFlowCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowCreation));
  MsgPopulationFlowDestruction_descriptor_ = file->message_type(119);
  static const int MsgPopulationFlowDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDestruction, oid_population_),
  };
  MsgPopulationFlowDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowDestruction_descriptor_,
      MsgPopulationFlowDestruction::default_instance_,
      MsgPopulationFlowDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowDestruction));
  MsgPopulationFlowUpdate_descriptor_ = file->message_type(120);
  static const int MsgPopulationFlowUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, oid_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, itineraire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, flux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, vitesse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, nb_humains_vivants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, nb_humains_morts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, attitude_),
  };
  MsgPopulationFlowUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowUpdate_descriptor_,
      MsgPopulationFlowUpdate::default_instance_,
      MsgPopulationFlowUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowUpdate));
  MsgPopulationKnowledgeCreation_descriptor_ = file->message_type(121);
  static const int MsgPopulationKnowledgeCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, oid_connaissance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, oid_population_reelle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, camp_),
  };
  MsgPopulationKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationKnowledgeCreation_descriptor_,
      MsgPopulationKnowledgeCreation::default_instance_,
      MsgPopulationKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationKnowledgeCreation));
  MsgPopulationKnowledgeUpdate_descriptor_ = file->message_type(122);
  static const int MsgPopulationKnowledgeUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeUpdate, oid_connaissance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeUpdate, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeUpdate, etat_domination_),
  };
  MsgPopulationKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationKnowledgeUpdate_descriptor_,
      MsgPopulationKnowledgeUpdate::default_instance_,
      MsgPopulationKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationKnowledgeUpdate));
  MsgPopulationKnowledgeDestruction_descriptor_ = file->message_type(123);
  static const int MsgPopulationKnowledgeDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeDestruction, oid_connaissance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeDestruction, oid_groupe_possesseur_),
  };
  MsgPopulationKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationKnowledgeDestruction_descriptor_,
      MsgPopulationKnowledgeDestruction::default_instance_,
      MsgPopulationKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationKnowledgeDestruction));
  MsgPopulationConcentrationKnowledgeCreation_descriptor_ = file->message_type(124);
  static const int MsgPopulationConcentrationKnowledgeCreation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, oid_connaissance_concentration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, oid_concentration_reelle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, position_),
  };
  MsgPopulationConcentrationKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationKnowledgeCreation_descriptor_,
      MsgPopulationConcentrationKnowledgeCreation::default_instance_,
      MsgPopulationConcentrationKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationKnowledgeCreation));
  MsgPopulationConcentrationKnowledgeDestruction_descriptor_ = file->message_type(125);
  static const int MsgPopulationConcentrationKnowledgeDestruction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeDestruction, oid_connaissance_concentration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeDestruction, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeDestruction, oid_groupe_possesseur_),
  };
  MsgPopulationConcentrationKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationKnowledgeDestruction_descriptor_,
      MsgPopulationConcentrationKnowledgeDestruction::default_instance_,
      MsgPopulationConcentrationKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationKnowledgeDestruction));
  MsgPopulationConcentrationKnowledgeUpdate_descriptor_ = file->message_type(126);
  static const int MsgPopulationConcentrationKnowledgeUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, oid_connaissance_concentration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, oid_concentration_reelle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, nb_humains_vivants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, nb_humains_morts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, attitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, pertinence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, est_percu_),
  };
  MsgPopulationConcentrationKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationConcentrationKnowledgeUpdate_descriptor_,
      MsgPopulationConcentrationKnowledgeUpdate::default_instance_,
      MsgPopulationConcentrationKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationConcentrationKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationConcentrationKnowledgeUpdate));
  MsgPopulationFlowKnowledgeCreation_descriptor_ = file->message_type(127);
  static const int MsgPopulationFlowKnowledgeCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, oid_connaissance_flux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, oid_flux_reel_),
  };
  MsgPopulationFlowKnowledgeCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowKnowledgeCreation_descriptor_,
      MsgPopulationFlowKnowledgeCreation::default_instance_,
      MsgPopulationFlowKnowledgeCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowKnowledgeCreation));
  MsgFlowPart_descriptor_ = file->message_type(128);
  static const int MsgFlowPart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowPart, forme_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowPart, pertinence_),
  };
  MsgFlowPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFlowPart_descriptor_,
      MsgFlowPart::default_instance_,
      MsgFlowPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFlowPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFlowPart));
  SeqOfFlowPart_descriptor_ = file->message_type(129);
  static const int SeqOfFlowPart_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfFlowPart, elem_),
  };
  SeqOfFlowPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfFlowPart_descriptor_,
      SeqOfFlowPart::default_instance_,
      SeqOfFlowPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfFlowPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfFlowPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfFlowPart));
  MsgPopulationFlowKnowledgeDestruction_descriptor_ = file->message_type(130);
  static const int MsgPopulationFlowKnowledgeDestruction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeDestruction, oid_connaissance_flux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeDestruction, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeDestruction, oid_groupe_possesseur_),
  };
  MsgPopulationFlowKnowledgeDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowKnowledgeDestruction_descriptor_,
      MsgPopulationFlowKnowledgeDestruction::default_instance_,
      MsgPopulationFlowKnowledgeDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowKnowledgeDestruction));
  MsgPopulationFlowKnowledgeUpdate_descriptor_ = file->message_type(131);
  static const int MsgPopulationFlowKnowledgeUpdate_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, oid_connaissance_flux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, oid_connaissance_population_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, oid_groupe_possesseur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, oid_flux_reel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, portions_flux_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, vitesse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, nb_humains_vivants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, nb_humains_morts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, attitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, est_percu_),
  };
  MsgPopulationFlowKnowledgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPopulationFlowKnowledgeUpdate_descriptor_,
      MsgPopulationFlowKnowledgeUpdate::default_instance_,
      MsgPopulationFlowKnowledgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPopulationFlowKnowledgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPopulationFlowKnowledgeUpdate));
  MsgFolkCreation_profiles_descriptor_ = file->message_type(132);
  static const int MsgFolkCreation_profiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_profiles, elem_),
  };
  MsgFolkCreation_profiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFolkCreation_profiles_descriptor_,
      MsgFolkCreation_profiles::default_instance_,
      MsgFolkCreation_profiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_profiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_profiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFolkCreation_profiles));
  MsgFolkCreation_activities_descriptor_ = file->message_type(133);
  static const int MsgFolkCreation_activities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_activities, elem_),
  };
  MsgFolkCreation_activities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFolkCreation_activities_descriptor_,
      MsgFolkCreation_activities::default_instance_,
      MsgFolkCreation_activities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_activities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation_activities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFolkCreation_activities));
  MsgFolkCreation_descriptor_ = file->message_type(134);
  static const int MsgFolkCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, profiles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, activities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, container_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, edge_number_),
  };
  MsgFolkCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFolkCreation_descriptor_,
      MsgFolkCreation::default_instance_,
      MsgFolkCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFolkCreation));
  MsgFolkGraphEdgeUpdate_descriptor_ = file->message_type(135);
  static const int MsgFolkGraphEdgeUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphEdgeUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphEdgeUpdate, shp_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphEdgeUpdate, population_occupation_),
  };
  MsgFolkGraphEdgeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFolkGraphEdgeUpdate_descriptor_,
      MsgFolkGraphEdgeUpdate::default_instance_,
      MsgFolkGraphEdgeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphEdgeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphEdgeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFolkGraphEdgeUpdate));
  MsgFolkGraphUpdate_descriptor_ = file->message_type(136);
  static const int MsgFolkGraphUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphUpdate, elem_),
  };
  MsgFolkGraphUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFolkGraphUpdate_descriptor_,
      MsgFolkGraphUpdate::default_instance_,
      MsgFolkGraphUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFolkGraphUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFolkGraphUpdate));
  MsgControlGlobalMeteoAck_descriptor_ = file->message_type(137);
  static const int MsgControlGlobalMeteoAck_offsets_[1] = {
  };
  MsgControlGlobalMeteoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlGlobalMeteoAck_descriptor_,
      MsgControlGlobalMeteoAck::default_instance_,
      MsgControlGlobalMeteoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlGlobalMeteoAck));
  MsgControlLocalMeteoAck_descriptor_ = file->message_type(138);
  static const int MsgControlLocalMeteoAck_offsets_[1] = {
  };
  MsgControlLocalMeteoAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlLocalMeteoAck_descriptor_,
      MsgControlLocalMeteoAck::default_instance_,
      MsgControlLocalMeteoAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlLocalMeteoAck));
  MsgControlCheckPointSetFrequencyAck_descriptor_ = file->message_type(139);
  static const int MsgControlCheckPointSetFrequencyAck_offsets_[1] = {
  };
  MsgControlCheckPointSetFrequencyAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlCheckPointSetFrequencyAck_descriptor_,
      MsgControlCheckPointSetFrequencyAck::default_instance_,
      MsgControlCheckPointSetFrequencyAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSetFrequencyAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSetFrequencyAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlCheckPointSetFrequencyAck));
  MsgControlCheckPointSaveNowAck_descriptor_ = file->message_type(140);
  static const int MsgControlCheckPointSaveNowAck_offsets_[1] = {
  };
  MsgControlCheckPointSaveNowAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlCheckPointSaveNowAck_descriptor_,
      MsgControlCheckPointSaveNowAck::default_instance_,
      MsgControlCheckPointSaveNowAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveNowAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveNowAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlCheckPointSaveNowAck));
  MsgControlCheckPointSaveBegin_descriptor_ = file->message_type(141);
  static const int MsgControlCheckPointSaveBegin_offsets_[1] = {
  };
  MsgControlCheckPointSaveBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlCheckPointSaveBegin_descriptor_,
      MsgControlCheckPointSaveBegin::default_instance_,
      MsgControlCheckPointSaveBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlCheckPointSaveBegin));
  MsgControlCheckPointSaveBeginAck_descriptor_ = file->message_type(142);
  static const int MsgControlCheckPointSaveBeginAck_offsets_[1] = {
  };
  MsgControlCheckPointSaveBeginAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlCheckPointSaveBeginAck_descriptor_,
      MsgControlCheckPointSaveBeginAck::default_instance_,
      MsgControlCheckPointSaveBeginAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveBeginAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveBeginAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlCheckPointSaveBeginAck));
  MsgControlCheckPointSaveEnd_descriptor_ = file->message_type(143);
  static const int MsgControlCheckPointSaveEnd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveEnd, name_),
  };
  MsgControlCheckPointSaveEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlCheckPointSaveEnd_descriptor_,
      MsgControlCheckPointSaveEnd::default_instance_,
      MsgControlCheckPointSaveEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlCheckPointSaveEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlCheckPointSaveEnd));
  MsgControlSendCurrentStateBegin_descriptor_ = file->message_type(144);
  static const int MsgControlSendCurrentStateBegin_offsets_[1] = {
  };
  MsgControlSendCurrentStateBegin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlSendCurrentStateBegin_descriptor_,
      MsgControlSendCurrentStateBegin::default_instance_,
      MsgControlSendCurrentStateBegin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSendCurrentStateBegin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSendCurrentStateBegin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlSendCurrentStateBegin));
  MsgControlSendCurrentStateEnd_descriptor_ = file->message_type(145);
  static const int MsgControlSendCurrentStateEnd_offsets_[1] = {
  };
  MsgControlSendCurrentStateEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlSendCurrentStateEnd_descriptor_,
      MsgControlSendCurrentStateEnd::default_instance_,
      MsgControlSendCurrentStateEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSendCurrentStateEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSendCurrentStateEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlSendCurrentStateEnd));
  MsgUrbanAttributeVegetation_descriptor_ = file->message_type(146);
  static const int MsgUrbanAttributeVegetation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeVegetation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeVegetation, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeVegetation, density_),
  };
  MsgUrbanAttributeVegetation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanAttributeVegetation_descriptor_,
      MsgUrbanAttributeVegetation::default_instance_,
      MsgUrbanAttributeVegetation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeVegetation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeVegetation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanAttributeVegetation));
  MsgUrbanAttributeSoil_descriptor_ = file->message_type(147);
  static const int MsgUrbanAttributeSoil_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, trafficability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, compound_clearing_),
  };
  MsgUrbanAttributeSoil_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanAttributeSoil_descriptor_,
      MsgUrbanAttributeSoil::default_instance_,
      MsgUrbanAttributeSoil_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeSoil, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanAttributeSoil));
  MsgUrbanAttributeArchitecture_descriptor_ = file->message_type(148);
  static const int MsgUrbanAttributeArchitecture_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, floor_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, basement_level_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, roof_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, inner_cluttering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, facade_opacity_),
  };
  MsgUrbanAttributeArchitecture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanAttributeArchitecture_descriptor_,
      MsgUrbanAttributeArchitecture::default_instance_,
      MsgUrbanAttributeArchitecture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributeArchitecture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanAttributeArchitecture));
  MsgColorRGBA_descriptor_ = file->message_type(149);
  static const int MsgColorRGBA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, alpha_),
  };
  MsgColorRGBA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgColorRGBA_descriptor_,
      MsgColorRGBA::default_instance_,
      MsgColorRGBA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgColorRGBA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgColorRGBA));
  MagicActionCreateUrban_descriptor_ = file->message_type(150);
  static const int MagicActionCreateUrban_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionCreateUrban, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionCreateUrban, location_),
  };
  MagicActionCreateUrban_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicActionCreateUrban_descriptor_,
      MagicActionCreateUrban::default_instance_,
      MagicActionCreateUrban_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionCreateUrban, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionCreateUrban, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicActionCreateUrban));
  MagicActionUpdateUrban_descriptor_ = file->message_type(151);
  static const int MagicActionUpdateUrban_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionUpdateUrban, oid_),
  };
  MagicActionUpdateUrban_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicActionUpdateUrban_descriptor_,
      MagicActionUpdateUrban::default_instance_,
      MagicActionUpdateUrban_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionUpdateUrban, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionUpdateUrban, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicActionUpdateUrban));
  MagicActionDestroyUrban_descriptor_ = file->message_type(152);
  static const int MagicActionDestroyUrban_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionDestroyUrban, oid_),
  };
  MagicActionDestroyUrban_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicActionDestroyUrban_descriptor_,
      MagicActionDestroyUrban::default_instance_,
      MagicActionDestroyUrban_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionDestroyUrban, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicActionDestroyUrban, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicActionDestroyUrban));
  MsgUrbanMagicAction_descriptor_ = file->message_type(153);
  static const int MsgUrbanMagicAction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicAction, create_urban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicAction, update_urban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicAction, destroy_urban_),
  };
  MsgUrbanMagicAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanMagicAction_descriptor_,
      MsgUrbanMagicAction::default_instance_,
      MsgUrbanMagicAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanMagicAction));
  MsgUrbanMagicActionAck_descriptor_ = file->message_type(154);
  static const int MsgUrbanMagicActionAck_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicActionAck, error_code_),
  };
  MsgUrbanMagicActionAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanMagicActionAck_descriptor_,
      MsgUrbanMagicActionAck::default_instance_,
      MsgUrbanMagicActionAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicActionAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanMagicActionAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanMagicActionAck));
  MsgUrbanMagicActionAck_ErrorCode_descriptor_ = MsgUrbanMagicActionAck_descriptor_->enum_type(0);
  MsgUrbanAttributes_descriptor_ = file->message_type(155);
  static const int MsgUrbanAttributes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, vegetation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, soil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, architecture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, color_),
  };
  MsgUrbanAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanAttributes_descriptor_,
      MsgUrbanAttributes::default_instance_,
      MsgUrbanAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanAttributes));
  MsgUrbanCreation_descriptor_ = file->message_type(156);
  static const int MsgUrbanCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, attributes_),
  };
  MsgUrbanCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanCreation_descriptor_,
      MsgUrbanCreation::default_instance_,
      MsgUrbanCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanCreation));
  MsgUrbanDetection_descriptor_ = file->message_type(157);
  static const int MsgUrbanDetection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDetection, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDetection, urban_oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDetection, visibility_),
  };
  MsgUrbanDetection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanDetection_descriptor_,
      MsgUrbanDetection::default_instance_,
      MsgUrbanDetection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDetection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDetection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanDetection));
  MsgUrbanUpdate_descriptor_ = file->message_type(158);
  static const int MsgUrbanUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanUpdate, location_),
  };
  MsgUrbanUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanUpdate_descriptor_,
      MsgUrbanUpdate::default_instance_,
      MsgUrbanUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanUpdate));
  MsgUrbanDestruction_descriptor_ = file->message_type(159);
  static const int MsgUrbanDestruction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDestruction, oid_),
  };
  MsgUrbanDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUrbanDestruction_descriptor_,
      MsgUrbanDestruction::default_instance_,
      MsgUrbanDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUrbanDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUrbanDestruction));
  MsgKnowledgeGroupCreation_descriptor_ = file->message_type(160);
  static const int MsgKnowledgeGroupCreation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, oid_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, oid_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, jam_),
  };
  MsgKnowledgeGroupCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupCreation_descriptor_,
      MsgKnowledgeGroupCreation::default_instance_,
      MsgKnowledgeGroupCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupCreation));
  MsgKnowledgeGroupUpdate_descriptor_ = file->message_type(161);
  static const int MsgKnowledgeGroupUpdate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, oid_camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, oid_parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, type_),
  };
  MsgKnowledgeGroupUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupUpdate_descriptor_,
      MsgKnowledgeGroupUpdate::default_instance_,
      MsgKnowledgeGroupUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupUpdate));
  KnowledgeGroupAck_descriptor_ = file->message_type(162);
  static const int KnowledgeGroupAck_offsets_[1] = {
  };
  KnowledgeGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KnowledgeGroupAck_descriptor_,
      KnowledgeGroupAck::default_instance_,
      KnowledgeGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KnowledgeGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KnowledgeGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KnowledgeGroupAck));
  KnowledgeGroupAck_ErrorCode_descriptor_ = KnowledgeGroupAck_descriptor_->enum_type(0);
  MsgKnowledgeGroupAck_descriptor_ = file->message_type(163);
  static const int MsgKnowledgeGroupAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupAck, error_code_),
  };
  MsgKnowledgeGroupAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupAck_descriptor_,
      MsgKnowledgeGroupAck::default_instance_,
      MsgKnowledgeGroupAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupAck));
  MsgKnowledgeGroupCreationAck_descriptor_ = file->message_type(164);
  static const int MsgKnowledgeGroupCreationAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreationAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreationAck, error_code_),
  };
  MsgKnowledgeGroupCreationAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupCreationAck_descriptor_,
      MsgKnowledgeGroupCreationAck::default_instance_,
      MsgKnowledgeGroupCreationAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreationAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupCreationAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupCreationAck));
  MsgKnowledgeGroupUpdateAck_descriptor_ = file->message_type(165);
  static const int MsgKnowledgeGroupUpdateAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdateAck, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdateAck, error_code_),
  };
  MsgKnowledgeGroupUpdateAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupUpdateAck_descriptor_,
      MsgKnowledgeGroupUpdateAck::default_instance_,
      MsgKnowledgeGroupUpdateAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdateAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupUpdateAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupUpdateAck));
  MsgKnowledgeGroupDestruction_descriptor_ = file->message_type(166);
  static const int MsgKnowledgeGroupDestruction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupDestruction, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupDestruction, oid_camp_),
  };
  MsgKnowledgeGroupDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgKnowledgeGroupDestruction_descriptor_,
      MsgKnowledgeGroupDestruction::default_instance_,
      MsgKnowledgeGroupDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgKnowledgeGroupDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgKnowledgeGroupDestruction));
  MsgControlGlobalMeteo_descriptor_ = file->message_type(167);
  static const int MsgControlGlobalMeteo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteo, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteo, oid_),
  };
  MsgControlGlobalMeteo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlGlobalMeteo_descriptor_,
      MsgControlGlobalMeteo::default_instance_,
      MsgControlGlobalMeteo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlGlobalMeteo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlGlobalMeteo));
  MsgControlLocalMeteoCreation_descriptor_ = file->message_type(168);
  static const int MsgControlLocalMeteoCreation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, oid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, top_left_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, bottom_right_coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, attributes_),
  };
  MsgControlLocalMeteoCreation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlLocalMeteoCreation_descriptor_,
      MsgControlLocalMeteoCreation::default_instance_,
      MsgControlLocalMeteoCreation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoCreation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlLocalMeteoCreation));
  MsgControlLocalMeteoDestruction_descriptor_ = file->message_type(169);
  static const int MsgControlLocalMeteoDestruction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoDestruction, oid_),
  };
  MsgControlLocalMeteoDestruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlLocalMeteoDestruction_descriptor_,
      MsgControlLocalMeteoDestruction::default_instance_,
      MsgControlLocalMeteoDestruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoDestruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlLocalMeteoDestruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlLocalMeteoDestruction));
  MsgSimToClient_descriptor_ = file->message_type(170);
  static const int MsgSimToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient, message_),
  };
  MsgSimToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSimToClient_descriptor_,
      MsgSimToClient::default_instance_,
      MsgSimToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSimToClient));
  MsgSimToClient_Content_descriptor_ = MsgSimToClient_descriptor_->nested_type(0);
  static const int MsgSimToClient_Content_offsets_[125] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_order_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_order_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_order_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, frag_order_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, set_automat_mode_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_creation_request_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, magic_action_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_magic_action_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_magic_action_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_magic_action_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, change_diplomacy_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_knowledge_group_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_logistic_links_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_superior_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_change_superior_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_push_flow_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_change_quotas_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_profiling_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_begin_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_end_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_stop_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_pause_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_resume_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_change_time_factor_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_date_time_change_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_checkpoint_save_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, formation_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, side_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_pathfind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_environment_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, change_diplomacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_change_superior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_logistic_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_knowledge_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_change_superior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, start_unit_fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, stop_unit_fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, start_population_fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, stop_population_fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, explosion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, start_fire_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, stop_fire_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, invalidate_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, decisional_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, debug_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_vision_cones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, unit_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, automat_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, object_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_medical_handling_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_medical_handling_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_medical_handling_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_medical_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_maintenance_handling_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_maintenance_handling_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_maintenance_handling_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_maintenance_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_handling_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_handling_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_handling_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, log_supply_quotas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_concentration_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, population_flow_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, folk_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, folk_graph_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_global_meteo_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_local_meteo_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_checkpoint_save_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_checkpoint_set_frequency_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_checkpoint_save_now_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_send_current_state_begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_send_current_state_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, urban_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, urban_knowledge_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, urban_knowledge_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, urban_knowledge_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, stock_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, urban_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_creation_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_update_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, knowledge_group_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, action_create_fire_order_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_global_meteo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_local_meteo_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, control_local_meteo_destruction_),
  };
  MsgSimToClient_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSimToClient_Content_descriptor_,
      MsgSimToClient_Content::default_instance_,
      MsgSimToClient_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSimToClient_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSimToClient_Content));
  EnumLogSupplyHandlingStatus_descriptor_ = file->enum_type(0);
  EnumUnitIdentificationLevel_descriptor_ = file->enum_type(1);
  EnumReportType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SimToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderAck_descriptor_, &OrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitOrderAck_descriptor_, &MsgUnitOrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatOrderAck_descriptor_, &MsgAutomatOrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationOrderAck_descriptor_, &MsgPopulationOrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFragOrderAck_descriptor_, &MsgFragOrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSetAutomatModeAck_descriptor_, &MsgSetAutomatModeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitActionAck_descriptor_, &UnitActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitCreationRequestAck_descriptor_, &MsgUnitCreationRequestAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMagicActionAck_descriptor_, &MsgMagicActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitMagicActionAck_descriptor_, &MsgUnitMagicActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectMagicActionAck_descriptor_, &MsgObjectMagicActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationMagicActionAck_descriptor_, &MsgPopulationMagicActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeDiplomacyAck_descriptor_, &MsgChangeDiplomacyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HierarchyModificationAck_descriptor_, &HierarchyModificationAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeKnowledgeGroupAck_descriptor_, &MsgAutomatChangeKnowledgeGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeLogisticLinksAck_descriptor_, &MsgAutomatChangeLogisticLinksAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeSuperiorAck_descriptor_, &MsgAutomatChangeSuperiorAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitChangeSuperiorAck_descriptor_, &MsgUnitChangeSuperiorAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyPushFlowAck_descriptor_, &MsgLogSupplyPushFlowAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyChangeQuotasAck_descriptor_, &MsgLogSupplyChangeQuotasAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgActionCreateFireOrderAck_descriptor_, &MsgActionCreateFireOrderAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlInformation_descriptor_, &MsgControlInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlProfilingInformation_descriptor_, &MsgControlProfilingInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlBeginTick_descriptor_, &MsgControlBeginTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlEndTick_descriptor_, &MsgControlEndTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ControlAck_descriptor_, &ControlAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlDatetimeChangeAck_descriptor_, &MsgControlDatetimeChangeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlChangeTimeFactorAck_descriptor_, &MsgControlChangeTimeFactorAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlStopAck_descriptor_, &MsgControlStopAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlPauseAck_descriptor_, &MsgControlPauseAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlResumeAck_descriptor_, &MsgControlResumeAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTeamCreation_descriptor_, &MsgTeamCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatCreation_oid_parent_descriptor_, &MsgAutomatCreation_oid_parent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatCreation_descriptor_, &MsgAutomatCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RulesOfEngagement_descriptor_, &RulesOfEngagement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceRatio_descriptor_, &ForceRatio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatAttributes_descriptor_, &MsgAutomatAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitCreation_descriptor_, &MsgUnitCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BorrowedEquipments_descriptor_, &BorrowedEquipments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BorrowedEquipments_BorrowedEquipment_descriptor_, &BorrowedEquipments_BorrowedEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LentEquipments_descriptor_, &LentEquipments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LentEquipments_LentEquipment_descriptor_, &LentEquipments_LentEquipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceDotations_descriptor_, &ResourceDotations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceDotations_ResourceDotation_descriptor_, &ResourceDotations_ResourceDotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentDotations_descriptor_, &EquipmentDotations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentDotations_EquipmentDotation_descriptor_, &EquipmentDotations_EquipmentDotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanDotations_descriptor_, &HumanDotations::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HumanDotations_HumanDotation_descriptor_, &HumanDotations_HumanDotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContaminationState_descriptor_, &ContaminationState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Communication_descriptor_, &Communication::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitAttributes_descriptor_, &MsgUnitAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitPathFind_descriptor_, &MsgUnitPathFind::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitDestruction_descriptor_, &MsgUnitDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitEnvironmentType_descriptor_, &MsgUnitEnvironmentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitKnowledgeCreation_descriptor_, &MsgUnitKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomatPerception_descriptor_, &AutomatPerception::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfAutomatPerception_descriptor_, &SeqOfAutomatPerception::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitKnowledgeUpdate_descriptor_, &MsgUnitKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitKnowledgeDestruction_descriptor_, &MsgUnitKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartUnitFire_target_descriptor_, &MsgStartUnitFire_target::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartUnitFire_descriptor_, &MsgStartUnitFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitHumanFireDamage_descriptor_, &UnitHumanFireDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfUnitHumanFireDamage_descriptor_, &SeqOfUnitHumanFireDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitEquipmentFireDamage_descriptor_, &MsgUnitEquipmentFireDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfUnitEquipmentFireDamage_descriptor_, &SeqOfUnitEquipmentFireDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitFireDamages_descriptor_, &MsgUnitFireDamages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitsFireDamages_descriptor_, &MsgUnitsFireDamages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFireDamages_descriptor_, &MsgPopulationFireDamages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationsFireDamages_descriptor_, &MsgPopulationsFireDamages::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStopUnitFire_descriptor_, &MsgStopUnitFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartPopulationFire_descriptor_, &MsgStartPopulationFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStopPopulationFire_descriptor_, &MsgStopPopulationFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExplosion_descriptor_, &MsgExplosion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStartFireEffect_descriptor_, &MsgStartFireEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgStopFireEffect_descriptor_, &MsgStopFireEffect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReport_descriptor_, &MsgReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgInvalidateReport_descriptor_, &MsgInvalidateReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTrace_descriptor_, &MsgTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDecisionalState_descriptor_, &MsgDecisionalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDebugPoints_descriptor_, &MsgDebugPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfHeading_descriptor_, &SeqOfHeading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgVisionCone_descriptor_, &MsgVisionCone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfVisionCone_descriptor_, &SeqOfVisionCone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitVisionCones_descriptor_, &MsgUnitVisionCones::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitDetection_descriptor_, &MsgUnitDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectDetection_descriptor_, &MsgObjectDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationDetection_descriptor_, &MsgPopulationConcentrationDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowDetection_descriptor_, &MsgPopulationFlowDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectCreation_descriptor_, &MsgObjectCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectDestruction_descriptor_, &MsgObjectDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectUpdate_descriptor_, &MsgObjectUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectKnowledgeCreation_descriptor_, &MsgObjectKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectKnowledgeUpdate_descriptor_, &MsgObjectKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgObjectKnowledgeDestruction_descriptor_, &MsgObjectKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanKnowledgeCreation_descriptor_, &MsgUrbanKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanKnowledgeUpdate_descriptor_, &MsgUrbanKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanKnowledgeDestruction_descriptor_, &MsgUrbanKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalHandlingCreation_descriptor_, &MsgLogMedicalHandlingCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalHandlingUpdate_descriptor_, &MsgLogMedicalHandlingUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalHandlingDestruction_descriptor_, &MsgLogMedicalHandlingDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalEquipmentAvailability_descriptor_, &MsgLogMedicalEquipmentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfLogMedicalEquipmentAvailability_descriptor_, &SeqOfLogMedicalEquipmentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalState_descriptor_, &MsgLogMedicalState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenanceHandlingCreation_descriptor_, &MsgLogMaintenanceHandlingCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenanceHandlingUpdate_descriptor_, &MsgLogMaintenanceHandlingUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenanceHandlingDestruction_descriptor_, &MsgLogMaintenanceHandlingDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenanceEquipmentAvailability_descriptor_, &MsgLogMaintenanceEquipmentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfLogMaintenanceEquipmentAvailability_descriptor_, &SeqOfLogMaintenanceEquipmentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenanceState_descriptor_, &MsgLogMaintenanceState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyHandlingCreation_descriptor_, &MsgLogSupplyHandlingCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDotationQuery_descriptor_, &MsgDotationQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfDotationQuery_descriptor_, &SeqOfDotationQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyHandlingUpdate_descriptor_, &MsgLogSupplyHandlingUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyHandlingDestruction_descriptor_, &MsgLogSupplyHandlingDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyEquimentAvailability_descriptor_, &MsgLogSupplyEquimentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfLogSupplyEquimentAvailability_descriptor_, &SeqOfLogSupplyEquimentAvailability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyState_descriptor_, &MsgLogSupplyState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogSupplyQuotas_descriptor_, &MsgLogSupplyQuotas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationCreation_descriptor_, &MsgPopulationCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationUpdate_descriptor_, &MsgPopulationUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationCreation_descriptor_, &MsgPopulationConcentrationCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationDestruction_descriptor_, &MsgPopulationConcentrationDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationUpdate_descriptor_, &MsgPopulationConcentrationUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowCreation_descriptor_, &MsgPopulationFlowCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowDestruction_descriptor_, &MsgPopulationFlowDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowUpdate_descriptor_, &MsgPopulationFlowUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationKnowledgeCreation_descriptor_, &MsgPopulationKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationKnowledgeUpdate_descriptor_, &MsgPopulationKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationKnowledgeDestruction_descriptor_, &MsgPopulationKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationKnowledgeCreation_descriptor_, &MsgPopulationConcentrationKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationKnowledgeDestruction_descriptor_, &MsgPopulationConcentrationKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationConcentrationKnowledgeUpdate_descriptor_, &MsgPopulationConcentrationKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowKnowledgeCreation_descriptor_, &MsgPopulationFlowKnowledgeCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFlowPart_descriptor_, &MsgFlowPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfFlowPart_descriptor_, &SeqOfFlowPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowKnowledgeDestruction_descriptor_, &MsgPopulationFlowKnowledgeDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPopulationFlowKnowledgeUpdate_descriptor_, &MsgPopulationFlowKnowledgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFolkCreation_profiles_descriptor_, &MsgFolkCreation_profiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFolkCreation_activities_descriptor_, &MsgFolkCreation_activities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFolkCreation_descriptor_, &MsgFolkCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFolkGraphEdgeUpdate_descriptor_, &MsgFolkGraphEdgeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFolkGraphUpdate_descriptor_, &MsgFolkGraphUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlGlobalMeteoAck_descriptor_, &MsgControlGlobalMeteoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlLocalMeteoAck_descriptor_, &MsgControlLocalMeteoAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlCheckPointSetFrequencyAck_descriptor_, &MsgControlCheckPointSetFrequencyAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlCheckPointSaveNowAck_descriptor_, &MsgControlCheckPointSaveNowAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlCheckPointSaveBegin_descriptor_, &MsgControlCheckPointSaveBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlCheckPointSaveBeginAck_descriptor_, &MsgControlCheckPointSaveBeginAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlCheckPointSaveEnd_descriptor_, &MsgControlCheckPointSaveEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlSendCurrentStateBegin_descriptor_, &MsgControlSendCurrentStateBegin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlSendCurrentStateEnd_descriptor_, &MsgControlSendCurrentStateEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanAttributeVegetation_descriptor_, &MsgUrbanAttributeVegetation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanAttributeSoil_descriptor_, &MsgUrbanAttributeSoil::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanAttributeArchitecture_descriptor_, &MsgUrbanAttributeArchitecture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgColorRGBA_descriptor_, &MsgColorRGBA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicActionCreateUrban_descriptor_, &MagicActionCreateUrban::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicActionUpdateUrban_descriptor_, &MagicActionUpdateUrban::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicActionDestroyUrban_descriptor_, &MagicActionDestroyUrban::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanMagicAction_descriptor_, &MsgUrbanMagicAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanMagicActionAck_descriptor_, &MsgUrbanMagicActionAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanAttributes_descriptor_, &MsgUrbanAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanCreation_descriptor_, &MsgUrbanCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanDetection_descriptor_, &MsgUrbanDetection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanUpdate_descriptor_, &MsgUrbanUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUrbanDestruction_descriptor_, &MsgUrbanDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupCreation_descriptor_, &MsgKnowledgeGroupCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupUpdate_descriptor_, &MsgKnowledgeGroupUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KnowledgeGroupAck_descriptor_, &KnowledgeGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupAck_descriptor_, &MsgKnowledgeGroupAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupCreationAck_descriptor_, &MsgKnowledgeGroupCreationAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupUpdateAck_descriptor_, &MsgKnowledgeGroupUpdateAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgKnowledgeGroupDestruction_descriptor_, &MsgKnowledgeGroupDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlGlobalMeteo_descriptor_, &MsgControlGlobalMeteo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlLocalMeteoCreation_descriptor_, &MsgControlLocalMeteoCreation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlLocalMeteoDestruction_descriptor_, &MsgControlLocalMeteoDestruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSimToClient_descriptor_, &MsgSimToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSimToClient_Content_descriptor_, &MsgSimToClient_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SimToClient_2eproto() {
  delete OrderAck::default_instance_;
  delete OrderAck_reflection_;
  delete MsgUnitOrderAck::default_instance_;
  delete MsgUnitOrderAck_reflection_;
  delete MsgAutomatOrderAck::default_instance_;
  delete MsgAutomatOrderAck_reflection_;
  delete MsgPopulationOrderAck::default_instance_;
  delete MsgPopulationOrderAck_reflection_;
  delete MsgFragOrderAck::default_instance_;
  delete MsgFragOrderAck_reflection_;
  delete MsgSetAutomatModeAck::default_instance_;
  delete MsgSetAutomatModeAck_reflection_;
  delete UnitActionAck::default_instance_;
  delete UnitActionAck_reflection_;
  delete MsgUnitCreationRequestAck::default_instance_;
  delete MsgUnitCreationRequestAck_reflection_;
  delete MsgMagicActionAck::default_instance_;
  delete MsgMagicActionAck_reflection_;
  delete MsgUnitMagicActionAck::default_instance_;
  delete MsgUnitMagicActionAck_reflection_;
  delete MsgObjectMagicActionAck::default_instance_;
  delete MsgObjectMagicActionAck_reflection_;
  delete MsgPopulationMagicActionAck::default_instance_;
  delete MsgPopulationMagicActionAck_reflection_;
  delete MsgChangeDiplomacyAck::default_instance_;
  delete MsgChangeDiplomacyAck_reflection_;
  delete HierarchyModificationAck::default_instance_;
  delete HierarchyModificationAck_reflection_;
  delete MsgAutomatChangeKnowledgeGroupAck::default_instance_;
  delete MsgAutomatChangeKnowledgeGroupAck_reflection_;
  delete MsgAutomatChangeLogisticLinksAck::default_instance_;
  delete MsgAutomatChangeLogisticLinksAck_reflection_;
  delete MsgAutomatChangeSuperiorAck::default_instance_;
  delete MsgAutomatChangeSuperiorAck_reflection_;
  delete MsgUnitChangeSuperiorAck::default_instance_;
  delete MsgUnitChangeSuperiorAck_reflection_;
  delete MsgLogSupplyPushFlowAck::default_instance_;
  delete MsgLogSupplyPushFlowAck_reflection_;
  delete MsgLogSupplyChangeQuotasAck::default_instance_;
  delete MsgLogSupplyChangeQuotasAck_reflection_;
  delete MsgActionCreateFireOrderAck::default_instance_;
  delete MsgActionCreateFireOrderAck_reflection_;
  delete MsgControlInformation::default_instance_;
  delete MsgControlInformation_reflection_;
  delete MsgControlProfilingInformation::default_instance_;
  delete MsgControlProfilingInformation_reflection_;
  delete MsgControlBeginTick::default_instance_;
  delete MsgControlBeginTick_reflection_;
  delete MsgControlEndTick::default_instance_;
  delete MsgControlEndTick_reflection_;
  delete ControlAck::default_instance_;
  delete ControlAck_reflection_;
  delete MsgControlDatetimeChangeAck::default_instance_;
  delete MsgControlDatetimeChangeAck_reflection_;
  delete MsgControlChangeTimeFactorAck::default_instance_;
  delete MsgControlChangeTimeFactorAck_reflection_;
  delete MsgControlStopAck::default_instance_;
  delete MsgControlStopAck_reflection_;
  delete MsgControlPauseAck::default_instance_;
  delete MsgControlPauseAck_reflection_;
  delete MsgControlResumeAck::default_instance_;
  delete MsgControlResumeAck_reflection_;
  delete MsgTeamCreation::default_instance_;
  delete MsgTeamCreation_reflection_;
  delete MsgAutomatCreation_oid_parent::default_instance_;
  delete MsgAutomatCreation_oid_parent_reflection_;
  delete MsgAutomatCreation::default_instance_;
  delete MsgAutomatCreation_reflection_;
  delete RulesOfEngagement::default_instance_;
  delete RulesOfEngagement_reflection_;
  delete ForceRatio::default_instance_;
  delete ForceRatio_reflection_;
  delete MsgAutomatAttributes::default_instance_;
  delete MsgAutomatAttributes_reflection_;
  delete MsgUnitCreation::default_instance_;
  delete MsgUnitCreation_reflection_;
  delete BorrowedEquipments::default_instance_;
  delete BorrowedEquipments_reflection_;
  delete BorrowedEquipments_BorrowedEquipment::default_instance_;
  delete BorrowedEquipments_BorrowedEquipment_reflection_;
  delete LentEquipments::default_instance_;
  delete LentEquipments_reflection_;
  delete LentEquipments_LentEquipment::default_instance_;
  delete LentEquipments_LentEquipment_reflection_;
  delete ResourceDotations::default_instance_;
  delete ResourceDotations_reflection_;
  delete ResourceDotations_ResourceDotation::default_instance_;
  delete ResourceDotations_ResourceDotation_reflection_;
  delete EquipmentDotations::default_instance_;
  delete EquipmentDotations_reflection_;
  delete EquipmentDotations_EquipmentDotation::default_instance_;
  delete EquipmentDotations_EquipmentDotation_reflection_;
  delete HumanDotations::default_instance_;
  delete HumanDotations_reflection_;
  delete HumanDotations_HumanDotation::default_instance_;
  delete HumanDotations_HumanDotation_reflection_;
  delete ContaminationState::default_instance_;
  delete ContaminationState_reflection_;
  delete Communication::default_instance_;
  delete Communication_reflection_;
  delete MsgUnitAttributes::default_instance_;
  delete MsgUnitAttributes_reflection_;
  delete MsgUnitPathFind::default_instance_;
  delete MsgUnitPathFind_reflection_;
  delete MsgUnitDestruction::default_instance_;
  delete MsgUnitDestruction_reflection_;
  delete MsgUnitEnvironmentType::default_instance_;
  delete MsgUnitEnvironmentType_reflection_;
  delete MsgUnitKnowledgeCreation::default_instance_;
  delete MsgUnitKnowledgeCreation_reflection_;
  delete AutomatPerception::default_instance_;
  delete AutomatPerception_reflection_;
  delete SeqOfAutomatPerception::default_instance_;
  delete SeqOfAutomatPerception_reflection_;
  delete MsgUnitKnowledgeUpdate::default_instance_;
  delete MsgUnitKnowledgeUpdate_reflection_;
  delete MsgUnitKnowledgeDestruction::default_instance_;
  delete MsgUnitKnowledgeDestruction_reflection_;
  delete MsgStartUnitFire_target::default_instance_;
  delete MsgStartUnitFire_target_reflection_;
  delete MsgStartUnitFire::default_instance_;
  delete MsgStartUnitFire_reflection_;
  delete UnitHumanFireDamage::default_instance_;
  delete UnitHumanFireDamage_reflection_;
  delete SeqOfUnitHumanFireDamage::default_instance_;
  delete SeqOfUnitHumanFireDamage_reflection_;
  delete MsgUnitEquipmentFireDamage::default_instance_;
  delete MsgUnitEquipmentFireDamage_reflection_;
  delete SeqOfUnitEquipmentFireDamage::default_instance_;
  delete SeqOfUnitEquipmentFireDamage_reflection_;
  delete MsgUnitFireDamages::default_instance_;
  delete MsgUnitFireDamages_reflection_;
  delete MsgUnitsFireDamages::default_instance_;
  delete MsgUnitsFireDamages_reflection_;
  delete MsgPopulationFireDamages::default_instance_;
  delete MsgPopulationFireDamages_reflection_;
  delete MsgPopulationsFireDamages::default_instance_;
  delete MsgPopulationsFireDamages_reflection_;
  delete MsgStopUnitFire::default_instance_;
  delete MsgStopUnitFire_reflection_;
  delete MsgStartPopulationFire::default_instance_;
  delete MsgStartPopulationFire_reflection_;
  delete MsgStopPopulationFire::default_instance_;
  delete MsgStopPopulationFire_reflection_;
  delete MsgExplosion::default_instance_;
  delete MsgExplosion_reflection_;
  delete MsgStartFireEffect::default_instance_;
  delete MsgStartFireEffect_reflection_;
  delete MsgStopFireEffect::default_instance_;
  delete MsgStopFireEffect_reflection_;
  delete MsgReport::default_instance_;
  delete MsgReport_reflection_;
  delete MsgInvalidateReport::default_instance_;
  delete MsgInvalidateReport_reflection_;
  delete MsgTrace::default_instance_;
  delete MsgTrace_reflection_;
  delete MsgDecisionalState::default_instance_;
  delete MsgDecisionalState_reflection_;
  delete MsgDebugPoints::default_instance_;
  delete MsgDebugPoints_reflection_;
  delete SeqOfHeading::default_instance_;
  delete SeqOfHeading_reflection_;
  delete MsgVisionCone::default_instance_;
  delete MsgVisionCone_reflection_;
  delete SeqOfVisionCone::default_instance_;
  delete SeqOfVisionCone_reflection_;
  delete MsgUnitVisionCones::default_instance_;
  delete MsgUnitVisionCones_reflection_;
  delete MsgUnitDetection::default_instance_;
  delete MsgUnitDetection_reflection_;
  delete MsgObjectDetection::default_instance_;
  delete MsgObjectDetection_reflection_;
  delete MsgPopulationConcentrationDetection::default_instance_;
  delete MsgPopulationConcentrationDetection_reflection_;
  delete MsgPopulationFlowDetection::default_instance_;
  delete MsgPopulationFlowDetection_reflection_;
  delete MsgObjectCreation::default_instance_;
  delete MsgObjectCreation_reflection_;
  delete MsgObjectDestruction::default_instance_;
  delete MsgObjectDestruction_reflection_;
  delete MsgObjectUpdate::default_instance_;
  delete MsgObjectUpdate_reflection_;
  delete MsgObjectKnowledgeCreation::default_instance_;
  delete MsgObjectKnowledgeCreation_reflection_;
  delete MsgObjectKnowledgeUpdate::default_instance_;
  delete MsgObjectKnowledgeUpdate_reflection_;
  delete MsgObjectKnowledgeDestruction::default_instance_;
  delete MsgObjectKnowledgeDestruction_reflection_;
  delete MsgUrbanKnowledgeCreation::default_instance_;
  delete MsgUrbanKnowledgeCreation_reflection_;
  delete MsgUrbanKnowledgeUpdate::default_instance_;
  delete MsgUrbanKnowledgeUpdate_reflection_;
  delete MsgUrbanKnowledgeDestruction::default_instance_;
  delete MsgUrbanKnowledgeDestruction_reflection_;
  delete MsgLogMedicalHandlingCreation::default_instance_;
  delete MsgLogMedicalHandlingCreation_reflection_;
  delete MsgLogMedicalHandlingUpdate::default_instance_;
  delete MsgLogMedicalHandlingUpdate_reflection_;
  delete MsgLogMedicalHandlingDestruction::default_instance_;
  delete MsgLogMedicalHandlingDestruction_reflection_;
  delete MsgLogMedicalEquipmentAvailability::default_instance_;
  delete MsgLogMedicalEquipmentAvailability_reflection_;
  delete SeqOfLogMedicalEquipmentAvailability::default_instance_;
  delete SeqOfLogMedicalEquipmentAvailability_reflection_;
  delete MsgLogMedicalState::default_instance_;
  delete MsgLogMedicalState_reflection_;
  delete MsgLogMaintenanceHandlingCreation::default_instance_;
  delete MsgLogMaintenanceHandlingCreation_reflection_;
  delete MsgLogMaintenanceHandlingUpdate::default_instance_;
  delete MsgLogMaintenanceHandlingUpdate_reflection_;
  delete MsgLogMaintenanceHandlingDestruction::default_instance_;
  delete MsgLogMaintenanceHandlingDestruction_reflection_;
  delete MsgLogMaintenanceEquipmentAvailability::default_instance_;
  delete MsgLogMaintenanceEquipmentAvailability_reflection_;
  delete SeqOfLogMaintenanceEquipmentAvailability::default_instance_;
  delete SeqOfLogMaintenanceEquipmentAvailability_reflection_;
  delete MsgLogMaintenanceState::default_instance_;
  delete MsgLogMaintenanceState_reflection_;
  delete MsgLogSupplyHandlingCreation::default_instance_;
  delete MsgLogSupplyHandlingCreation_reflection_;
  delete MsgDotationQuery::default_instance_;
  delete MsgDotationQuery_reflection_;
  delete SeqOfDotationQuery::default_instance_;
  delete SeqOfDotationQuery_reflection_;
  delete MsgLogSupplyHandlingUpdate::default_instance_;
  delete MsgLogSupplyHandlingUpdate_reflection_;
  delete MsgLogSupplyHandlingDestruction::default_instance_;
  delete MsgLogSupplyHandlingDestruction_reflection_;
  delete MsgLogSupplyEquimentAvailability::default_instance_;
  delete MsgLogSupplyEquimentAvailability_reflection_;
  delete SeqOfLogSupplyEquimentAvailability::default_instance_;
  delete SeqOfLogSupplyEquimentAvailability_reflection_;
  delete MsgLogSupplyState::default_instance_;
  delete MsgLogSupplyState_reflection_;
  delete MsgLogSupplyQuotas::default_instance_;
  delete MsgLogSupplyQuotas_reflection_;
  delete MsgPopulationCreation::default_instance_;
  delete MsgPopulationCreation_reflection_;
  delete MsgPopulationUpdate::default_instance_;
  delete MsgPopulationUpdate_reflection_;
  delete MsgPopulationConcentrationCreation::default_instance_;
  delete MsgPopulationConcentrationCreation_reflection_;
  delete MsgPopulationConcentrationDestruction::default_instance_;
  delete MsgPopulationConcentrationDestruction_reflection_;
  delete MsgPopulationConcentrationUpdate::default_instance_;
  delete MsgPopulationConcentrationUpdate_reflection_;
  delete MsgPopulationFlowCreation::default_instance_;
  delete MsgPopulationFlowCreation_reflection_;
  delete MsgPopulationFlowDestruction::default_instance_;
  delete MsgPopulationFlowDestruction_reflection_;
  delete MsgPopulationFlowUpdate::default_instance_;
  delete MsgPopulationFlowUpdate_reflection_;
  delete MsgPopulationKnowledgeCreation::default_instance_;
  delete MsgPopulationKnowledgeCreation_reflection_;
  delete MsgPopulationKnowledgeUpdate::default_instance_;
  delete MsgPopulationKnowledgeUpdate_reflection_;
  delete MsgPopulationKnowledgeDestruction::default_instance_;
  delete MsgPopulationKnowledgeDestruction_reflection_;
  delete MsgPopulationConcentrationKnowledgeCreation::default_instance_;
  delete MsgPopulationConcentrationKnowledgeCreation_reflection_;
  delete MsgPopulationConcentrationKnowledgeDestruction::default_instance_;
  delete MsgPopulationConcentrationKnowledgeDestruction_reflection_;
  delete MsgPopulationConcentrationKnowledgeUpdate::default_instance_;
  delete MsgPopulationConcentrationKnowledgeUpdate_reflection_;
  delete MsgPopulationFlowKnowledgeCreation::default_instance_;
  delete MsgPopulationFlowKnowledgeCreation_reflection_;
  delete MsgFlowPart::default_instance_;
  delete MsgFlowPart_reflection_;
  delete SeqOfFlowPart::default_instance_;
  delete SeqOfFlowPart_reflection_;
  delete MsgPopulationFlowKnowledgeDestruction::default_instance_;
  delete MsgPopulationFlowKnowledgeDestruction_reflection_;
  delete MsgPopulationFlowKnowledgeUpdate::default_instance_;
  delete MsgPopulationFlowKnowledgeUpdate_reflection_;
  delete MsgFolkCreation_profiles::default_instance_;
  delete MsgFolkCreation_profiles_reflection_;
  delete MsgFolkCreation_activities::default_instance_;
  delete MsgFolkCreation_activities_reflection_;
  delete MsgFolkCreation::default_instance_;
  delete MsgFolkCreation_reflection_;
  delete MsgFolkGraphEdgeUpdate::default_instance_;
  delete MsgFolkGraphEdgeUpdate_reflection_;
  delete MsgFolkGraphUpdate::default_instance_;
  delete MsgFolkGraphUpdate_reflection_;
  delete MsgControlGlobalMeteoAck::default_instance_;
  delete MsgControlGlobalMeteoAck_reflection_;
  delete MsgControlLocalMeteoAck::default_instance_;
  delete MsgControlLocalMeteoAck_reflection_;
  delete MsgControlCheckPointSetFrequencyAck::default_instance_;
  delete MsgControlCheckPointSetFrequencyAck_reflection_;
  delete MsgControlCheckPointSaveNowAck::default_instance_;
  delete MsgControlCheckPointSaveNowAck_reflection_;
  delete MsgControlCheckPointSaveBegin::default_instance_;
  delete MsgControlCheckPointSaveBegin_reflection_;
  delete MsgControlCheckPointSaveBeginAck::default_instance_;
  delete MsgControlCheckPointSaveBeginAck_reflection_;
  delete MsgControlCheckPointSaveEnd::default_instance_;
  delete MsgControlCheckPointSaveEnd_reflection_;
  delete MsgControlSendCurrentStateBegin::default_instance_;
  delete MsgControlSendCurrentStateBegin_reflection_;
  delete MsgControlSendCurrentStateEnd::default_instance_;
  delete MsgControlSendCurrentStateEnd_reflection_;
  delete MsgUrbanAttributeVegetation::default_instance_;
  delete MsgUrbanAttributeVegetation_reflection_;
  delete MsgUrbanAttributeSoil::default_instance_;
  delete MsgUrbanAttributeSoil_reflection_;
  delete MsgUrbanAttributeArchitecture::default_instance_;
  delete MsgUrbanAttributeArchitecture_reflection_;
  delete MsgColorRGBA::default_instance_;
  delete MsgColorRGBA_reflection_;
  delete MagicActionCreateUrban::default_instance_;
  delete MagicActionCreateUrban_reflection_;
  delete MagicActionUpdateUrban::default_instance_;
  delete MagicActionUpdateUrban_reflection_;
  delete MagicActionDestroyUrban::default_instance_;
  delete MagicActionDestroyUrban_reflection_;
  delete MsgUrbanMagicAction::default_instance_;
  delete MsgUrbanMagicAction_reflection_;
  delete MsgUrbanMagicActionAck::default_instance_;
  delete MsgUrbanMagicActionAck_reflection_;
  delete MsgUrbanAttributes::default_instance_;
  delete MsgUrbanAttributes_reflection_;
  delete MsgUrbanCreation::default_instance_;
  delete MsgUrbanCreation_reflection_;
  delete MsgUrbanDetection::default_instance_;
  delete MsgUrbanDetection_reflection_;
  delete MsgUrbanUpdate::default_instance_;
  delete MsgUrbanUpdate_reflection_;
  delete MsgUrbanDestruction::default_instance_;
  delete MsgUrbanDestruction_reflection_;
  delete MsgKnowledgeGroupCreation::default_instance_;
  delete MsgKnowledgeGroupCreation_reflection_;
  delete MsgKnowledgeGroupUpdate::default_instance_;
  delete MsgKnowledgeGroupUpdate_reflection_;
  delete KnowledgeGroupAck::default_instance_;
  delete KnowledgeGroupAck_reflection_;
  delete MsgKnowledgeGroupAck::default_instance_;
  delete MsgKnowledgeGroupAck_reflection_;
  delete MsgKnowledgeGroupCreationAck::default_instance_;
  delete MsgKnowledgeGroupCreationAck_reflection_;
  delete MsgKnowledgeGroupUpdateAck::default_instance_;
  delete MsgKnowledgeGroupUpdateAck_reflection_;
  delete MsgKnowledgeGroupDestruction::default_instance_;
  delete MsgKnowledgeGroupDestruction_reflection_;
  delete MsgControlGlobalMeteo::default_instance_;
  delete MsgControlGlobalMeteo_reflection_;
  delete MsgControlLocalMeteoCreation::default_instance_;
  delete MsgControlLocalMeteoCreation_reflection_;
  delete MsgControlLocalMeteoDestruction::default_instance_;
  delete MsgControlLocalMeteoDestruction_reflection_;
  delete MsgSimToClient::default_instance_;
  delete MsgSimToClient_reflection_;
  delete MsgSimToClient_Content::default_instance_;
  delete MsgSimToClient_Content_reflection_;
}

void protobuf_AddDesc_SimToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Common::protobuf_AddDesc_Common_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SimToClient.proto\022\017MsgsSimToClient\032\014Co"
    "mmon.proto\"\243\003\n\010OrderAck\"\226\003\n\tErrorCode\022\014\n"
    "\010no_error\020\000\022\026\n\022error_invalid_unit\020\001\022\027\n\023e"
    "rror_invalid_limit\020\002\022\026\n\022error_invalid_li"
    "ma\020\003\022\031\n\025error_invalid_mission\020\004\022$\n error"
    "_invalid_mission_parameters\020\005\022#\n\037error_u"
    "nit_cannot_receive_order\020\006\022 \n\034error_inva"
    "lid_order_conduite\020\007\022\037\n\033error_invalid_or"
    "der_mission\020\010\022\037\n\033error_invalid_order_ini"
    "tial\020\t\022+\n\'error_invalid_order_conduite_p"
    "arameters\020\n\022\032\n\026error_unit_surrendered\020\013\022"
    "\037\n\033error_invalid_lima_function\020\014\"W\n\017MsgU"
    "nitOrderAck\022\013\n\003oid\030\001 \002(\r\0227\n\nerror_code\030\002"
    " \002(\0162#.MsgsSimToClient.OrderAck.ErrorCod"
    "e\"Z\n\022MsgAutomatOrderAck\022\013\n\003oid\030\001 \002(\r\0227\n\n"
    "error_code\030\002 \002(\0162#.MsgsSimToClient.Order"
    "Ack.ErrorCode\"]\n\025MsgPopulationOrderAck\022\013"
    "\n\003oid\030\001 \002(\r\0227\n\nerror_code\030\002 \002(\0162#.MsgsSi"
    "mToClient.OrderAck.ErrorCode\"W\n\017MsgFragO"
    "rderAck\022\013\n\003oid\030\001 \002(\r\0227\n\nerror_code\030\002 \002(\016"
    "2#.MsgsSimToClient.OrderAck.ErrorCode\"\262\001"
    "\n\024MsgSetAutomatModeAck\022\013\n\003oid\030\001 \002(\r\022C\n\ne"
    "rror_code\030\002 \002(\0162/.MsgsSimToClient.MsgSet"
    "AutomatModeAck.ErrorCode\"H\n\tErrorCode\022\014\n"
    "\010no_error\020\000\022\026\n\022error_invalid_unit\020\001\022\025\n\021e"
    "rror_not_allowed\020\002\"\230\001\n\rUnitActionAck\"\206\001\n"
    "\tErrorCode\022\014\n\010no_error\020\000\022\026\n\022error_invali"
    "d_unit\020\001\022\032\n\026error_automate_embraye\020\002\022\033\n\027"
    "error_invalid_attribute\020\003\022\032\n\026error_unit_"
    "surrendered\020\004\"T\n\031MsgUnitCreationRequestA"
    "ck\0227\n\005error\030\001 \002(\0162(.MsgsSimToClient.Unit"
    "ActionAck.ErrorCode\"\215\001\n\021MsgMagicActionAc"
    "k\022@\n\nerror_code\030\001 \002(\0162,.MsgsSimToClient."
    "MsgMagicActionAck.ErrorCode\"6\n\tErrorCode"
    "\022\014\n\010no_error\020\000\022\033\n\027error_invalid_attribut"
    "e\020\001\"b\n\025MsgUnitMagicActionAck\022\013\n\003oid\030\001 \002("
    "\r\022<\n\nerror_code\030\002 \002(\0162(.MsgsSimToClient."
    "UnitActionAck.ErrorCode\"\263\002\n\027MsgObjectMag"
    "icActionAck\022F\n\nerror_code\030\001 \002(\01622.MsgsSi"
    "mToClient.MsgObjectMagicActionAck.ErrorC"
    "ode\"\317\001\n\tErrorCode\022\014\n\010no_error\020\000\022\030\n\024error"
    "_invalid_object\020\001\022\024\n\020error_invalid_id\020\002\022"
    "\026\n\022error_invalid_camp\020\003\022\036\n\032error_invalid"
    "_localisation\020\004\022%\n!error_missing_specifi"
    "c_attributes\020\005\022%\n!error_invalid_specific"
    "_attributes\020\006\"\306\001\n\033MsgPopulationMagicActi"
    "onAck\022\013\n\003oid\030\001 \002(\r\022J\n\nerror_code\030\002 \002(\01626"
    ".MsgsSimToClient.MsgPopulationMagicActio"
    "nAck.ErrorCode\"N\n\tErrorCode\022\014\n\010no_error\020"
    "\000\022\026\n\022error_invalid_unit\020\001\022\033\n\027error_inval"
    "id_attribute\020\002\"\233\002\n\025MsgChangeDiplomacyAck"
    "\022\021\n\toid_camp1\030\001 \002(\005\022\021\n\toid_camp2\030\002 \002(\005\022)"
    "\n\ndiplomatie\030\003 \002(\0162\025.Common.EnumDiplomac"
    "y\022W\n\nerror_code\030\004 \002(\0162C.MsgsSimToClient."
    "MsgChangeDiplomacyAck.EnumChangeDiplomac"
    "yErrorCode\"X\n\034EnumChangeDiplomacyErrorCo"
    "de\022\026\n\022no_error_diplomacy\020\000\022 \n\034error_inva"
    "lid_camp_diplomacy\020\001\"\264\003\n\030HierarchyModifi"
    "cationAck\"\227\003\n\tErrorCode\022\026\n\022no_error_hier"
    "archy\020\000\022\026\n\022error_invalid_pion\020\001\022\032\n\026error"
    "_invalid_automate\020\002\022\033\n\027error_invalid_for"
    "mation\020\003\022\036\n\032error_invalid_automate_tc2\020\004"
    "\022&\n\"error_invalid_automate_maintenance\020\005"
    "\022 \n\034error_invalid_automate_sante\020\006\022)\n%er"
    "ror_invalid_automate_ravitaillement\020\007\022$\n"
    " error_unit_surrendered_hierarchy\020\010\022 \n\034e"
    "rror_invalid_camp_hierarchy\020\t\022%\n!error_i"
    "nvalid_groupe_connaissance\020\n\022\035\n\031error_ca"
    "mps_incompatibles\020\013\"l\n!MsgAutomatChangeK"
    "nowledgeGroupAck\022G\n\nerror_code\030\001 \002(\01623.M"
    "sgsSimToClient.HierarchyModificationAck."
    "ErrorCode\"k\n MsgAutomatChangeLogisticLin"
    "ksAck\022G\n\nerror_code\030\001 \002(\01623.MsgsSimToCli"
    "ent.HierarchyModificationAck.ErrorCode\"f"
    "\n\033MsgAutomatChangeSuperiorAck\022G\n\nerror_c"
    "ode\030\001 \002(\01623.MsgsSimToClient.HierarchyMod"
    "ificationAck.ErrorCode\"c\n\030MsgUnitChangeS"
    "uperiorAck\022G\n\nerror_code\030\001 \002(\01623.MsgsSim"
    "ToClient.HierarchyModificationAck.ErrorC"
    "ode\"\337\001\n\027MsgLogSupplyPushFlowAck\022K\n\003ack\030\001"
    " \001(\0162>.MsgsSimToClient.MsgLogSupplyPushF"
    "lowAck.EnumLogSupplyPushFlow\"w\n\025EnumLogS"
    "upplyPushFlow\022\025\n\021no_error_pushflow\020\000\022\"\n\036"
    "error_invalid_donneur_pushflow\020\001\022#\n\037erro"
    "r_invalid_receveur_pushflow\020\002\"\341\001\n\033MsgLog"
    "SupplyChangeQuotasAck\022O\n\003ack\030\001 \001(\0162B.Msg"
    "sSimToClient.MsgLogSupplyChangeQuotasAck"
    ".LogSupplyChangeQuotas\"q\n\025LogSupplyChang"
    "eQuotas\022\023\n\017no_error_quotas\020\000\022 \n\034error_in"
    "valid_donneur_quotas\020\001\022!\n\035error_invalid_"
    "receveur_quotas\020\002\"\252\002\n\033MsgActionCreateFir"
    "eOrderAck\022c\n\nerror_code\030\002 \002(\0162O.MsgsSimT"
    "oClient.MsgActionCreateFireOrderAck.Enum"
    "ActionCreateFireOrderErrorCode\"\245\001\n\"EnumA"
    "ctionCreateFireOrderErrorCode\022\014\n\010no_erro"
    "r\020\000\022\032\n\026error_invalid_reporter\020\001\022\030\n\024error"
    "_invalid_target\020\002\022\032\n\026error_invalid_munit"
    "ion\020\003\022\037\n\033error_target_no_illuminated\020\004\"\262"
    "\002\n\025MsgControlInformation\022\024\n\014current_tick"
    "\030\001 \002(\005\022.\n\021initial_date_time\030\002 \002(\0132\023.Comm"
    "on.MsgDateTime\022&\n\tdate_time\030\003 \002(\0132\023.Comm"
    "on.MsgDateTime\022\025\n\rtick_duration\030\004 \002(\005\022\023\n"
    "\013time_factor\030\005 \002(\005\022\034\n\024checkpoint_frequen"
    "cy\030\006 \002(\005\022+\n\006status\030\007 \002(\0162\033.Common.EnumSi"
    "mulationState\022\031\n\021send_vision_cones\030\010 \002(\010"
    "\022\031\n\021profiling_enabled\030\t \002(\010\"i\n\036MsgContro"
    "lProfilingInformation\022\022\n\nperception\030\001 \002("
    "\002\022\020\n\010decision\030\002 \002(\002\022\016\n\006action\030\003 \002(\002\022\021\n\tm"
    "ain_loop\030\004 \002(\002\"S\n\023MsgControlBeginTick\022\024\n"
    "\014current_tick\030\001 \002(\005\022&\n\tdate_time\030\002 \002(\0132\023"
    ".Common.MsgDateTime\"\231\001\n\021MsgControlEndTic"
    "k\022\024\n\014current_tick\030\001 \002(\005\022\025\n\rtick_duration"
    "\030\002 \002(\005\022\026\n\016long_pathfinds\030\003 \002(\005\022\027\n\017short_"
    "pathfinds\030\004 \002(\005\022\016\n\006memory\030\005 \002(\005\022\026\n\016virtu"
    "al_memory\030\006 \002(\005\"\306\001\n\nControlAck\"\267\001\n\tError"
    "Code\022\014\n\010no_error\020\000\022\031\n\025error_already_star"
    "ted\020\001\022\025\n\021error_not_started\020\002\022\024\n\020error_no"
    "t_paused\020\003\022\030\n\024error_already_paused\020\004\022\035\n\031"
    "error_invalid_time_factor\020\005\022\033\n\027error_inv"
    "alid_date_time\020\006\"X\n\033MsgControlDatetimeCh"
    "angeAck\0229\n\nerror_code\030\001 \002(\0162%.MsgsSimToC"
    "lient.ControlAck.ErrorCode\"o\n\035MsgControl"
    "ChangeTimeFactorAck\022\023\n\013time_factor\030\001 \002(\005"
    "\0229\n\nerror_code\030\002 \002(\0162%.MsgsSimToClient.C"
    "ontrolAck.ErrorCode\"N\n\021MsgControlStopAck"
    "\0229\n\nerror_code\030\001 \002(\0162%.MsgsSimToClient.C"
    "ontrolAck.ErrorCode\"O\n\022MsgControlPauseAc"
    "k\0229\n\nerror_code\030\001 \002(\0162%.MsgsSimToClient."
    "ControlAck.ErrorCode\"P\n\023MsgControlResume"
    "Ack\0229\n\nerror_code\030\001 \002(\0162%.MsgsSimToClien"
    "t.ControlAck.ErrorCode\"P\n\017MsgTeamCreatio"
    "n\022\013\n\003oid\030\001 \002(\r\022\013\n\003nom\030\002 \002(\t\022#\n\004type\030\003 \002("
    "\0162\025.Common.EnumDiplomacy\"n\n\035MsgAutomatCr"
    "eation_oid_parent\022\'\n\tformation\030\001 \001(\0132\024.C"
    "ommon.MsgFormation\022$\n\010automate\030\002 \001(\0132\022.C"
    "ommon.MsgAutomat\"\274\001\n\022MsgAutomatCreation\022"
    "\013\n\003oid\030\001 \001(\r\022\025\n\rtype_automate\030\002 \001(\r\022\013\n\003n"
    "om\030\003 \001(\t\022B\n\noid_parent\030\004 \001(\0132..MsgsSimTo"
    "Client.MsgAutomatCreation_oid_parent\022\020\n\010"
    "oid_camp\030\005 \001(\r\022\037\n\027oid_groupe_connaissanc"
    "e\030\006 \001(\r\"`\n\021RulesOfEngagement\"K\n\005Value\022\014\n"
    "\010none_roe\020\000\022\r\n\ttir_libre\020\001\022\023\n\017tir_sur_ri"
    "poste\020\002\022\020\n\014tir_interdit\020\003\"W\n\nForceRatio\""
    "I\n\005Value\022\024\n\020none_force_ratio\020\000\022\n\n\006neutre"
    "\020\001\022\r\n\tfavorable\020\002\022\017\n\013defavorable\020\003\"\303\002\n\024M"
    "sgAutomatAttributes\022\013\n\003oid\030\001 \002(\r\022.\n\retat"
    "_automate\030\002 \001(\0162\027.Common.EnumAutomatMode"
    "\022;\n\020rapport_de_force\030\003 \001(\0162!.MsgsSimToCl"
    "ient.ForceRatio.Value\022@\n\023combat_de_renco"
    "ntre\030\004 \001(\0162#.Common.EnumMeetingEngagemen"
    "tStatus\0228\n\021etat_operationnel\030\005 \001(\0162\035.Com"
    "mon.EnumOperationalStatus\0225\n\003roe\030\006 \001(\0162("
    ".MsgsSimToClient.RulesOfEngagement.Value"
    "\"`\n\017MsgUnitCreation\022\013\n\003oid\030\001 \002(\r\022\021\n\ttype"
    "_pion\030\002 \002(\r\022\013\n\003nom\030\003 \002(\t\022\024\n\014oid_automate"
    "\030\004 \002(\r\022\n\n\002pc\030\005 \002(\010\"\261\001\n\022BorrowedEquipment"
    "s\022C\n\004elem\030\001 \003(\01325.MsgsSimToClient.Borrow"
    "edEquipments.BorrowedEquipment\032V\n\021Borrow"
    "edEquipment\022\030\n\020oid_pion_preteur\030\001 \002(\r\022\027\n"
    "\017type_equipement\030\002 \002(\r\022\016\n\006nombre\030\003 \002(\005\"\244"
    "\001\n\016LentEquipments\022;\n\004elem\030\001 \003(\0132-.MsgsSi"
    "mToClient.LentEquipments.LentEquipment\032U"
    "\n\rLentEquipment\022\033\n\023oid_pion_emprunteur\030\001"
    " \002(\r\022\027\n\017type_equipement\030\002 \002(\r\022\016\n\006nombre\030"
    "\003 \002(\005\"\235\001\n\021ResourceDotations\022A\n\004elem\030\001 \003("
    "\01323.MsgsSimToClient.ResourceDotations.Re"
    "sourceDotation\032E\n\020ResourceDotation\022\024\n\014re"
    "ssource_id\030\001 \002(\r\022\033\n\023quantite_disponible\030"
    "\002 \002(\005\"\215\002\n\022EquipmentDotations\022C\n\004elem\030\001 \003"
    "(\01325.MsgsSimToClient.EquipmentDotations."
    "EquipmentDotation\032\261\001\n\021EquipmentDotation\022"
    "\027\n\017type_equipement\030\001 \002(\r\022\026\n\016nb_disponibl"
    "es\030\002 \002(\005\022\030\n\020nb_indisponibles\030\003 \002(\005\022\025\n\rnb"
    "_reparables\030\004 \002(\005\022\"\n\032nb_dans_chaine_main"
    "tenance\030\005 \002(\005\022\026\n\016nb_prisonniers\030\006 \002(\005\"\321\002"
    "\n\016HumanDotations\022;\n\004elem\030\001 \003(\0132-.MsgsSim"
    "ToClient.HumanDotations.HumanDotation\032\201\002"
    "\n\rHumanDotation\022#\n\004rang\030\001 \002(\0162\025.Common.E"
    "numHumanRank\022\020\n\010nb_total\030\002 \002(\005\022\030\n\020nb_ope"
    "rationnels\030\003 \002(\005\022\020\n\010nb_morts\030\004 \002(\005\022\022\n\nnb"
    "_blesses\030\005 \002(\005\022\032\n\022nb_blesses_mentaux\030\006 \002"
    "(\005\022\031\n\021nb_contamines_nbc\030\007 \002(\005\022\034\n\024nb_dans"
    "_chaine_sante\030\010 \002(\005\022$\n\034nb_utilises_pour_"
    "maintenance\030\t \002(\005\":\n\022ContaminationState\022"
    "\022\n\npercentage\030\001 \001(\005\022\020\n\010quantity\030\002 \001(\002\"B\n"
    "\rCommunication\022\025\n\006jammed\030\001 \001(\010:\005false\022\032\n"
    "\017knowledge_group\030\002 \001(\005:\0010\"\216\022\n\021MsgUnitAtt"
    "ributes\022\013\n\003oid\030\001 \002(\r\022?\n\026dotation_eff_per"
    "sonnel\030\002 \001(\0132\037.MsgsSimToClient.HumanDota"
    "tions\022B\n\025dotation_eff_materiel\030\003 \001(\0132#.M"
    "sgsSimToClient.EquipmentDotations\022B\n\026dot"
    "ation_eff_ressource\030\004 \001(\0132\".MsgsSimToCli"
    "ent.ResourceDotations\022;\n\022equipements_pre"
    "tes\030\005 \001(\0132\037.MsgsSimToClient.LentEquipmen"
    "ts\022B\n\025equipements_empruntes\030\006 \001(\0132#.Msgs"
    "SimToClient.BorrowedEquipments\022)\n\010positi"
    "on\030\007 \001(\0132\027.Common.MsgCoordLatLong\022%\n\tdir"
    "ection\030\010 \001(\0132\022.Common.MsgHeading\022\022\n\007haut"
    "eur\030\t \001(\005:\0010\022\023\n\010altitude\030\n \001(\005:\0010\022\022\n\007vit"
    "esse\030\013 \001(\005:\0010\022!\n\026etat_operationnel_brut\030"
    "\014 \001(\005:\0010\022-\n\020pions_renforcant\030\r \001(\0132\023.Com"
    "mon.MsgUnitList\022\030\n\rpion_renforce\030\016 \001(\005:\001"
    "0\022\023\n\004mort\030\017 \001(\010:\005false\022\031\n\nneutralise\030\020 \001"
    "(\010:\005false\022 \n\021mode_furtif_actif\030\021 \001(\010:\005fa"
    "lse\022\027\n\010embarque\030\022 \001(\010:\005false\022(\n\031transpor"
    "teurs_disponibles\030\023 \001(\010:\005false\022?\n\013postur"
    "e_old\030\024 \001(\0162*.MsgsSimToClient.MsgUnitAtt"
    "ributes.Posture\022?\n\013posture_new\030\025 \001(\0162*.M"
    "sgsSimToClient.MsgUnitAttributes.Posture"
    "\022\036\n\023posture_pourcentage\030\026 \001(\005:\0010\022\034\n\021etat"
    "_installation\030\027 \001(\005:\0010\022)\n\032en_tenue_de_pr"
    "otection_nbc\030\030 \001(\010:\005false\0224\n\030contamine_p"
    "ar_agents_nbc\030\031 \001(\0132\022.Common.MsgListOID\022"
    "?\n\022etat_contamination\030\032 \001(\0132#.MsgsSimToC"
    "lient.ContaminationState\0226\n\016communicatio"
    "ns\030\033 \001(\0132\036.MsgsSimToClient.Communication"
    "\022\034\n\rsilence_radio\030\034 \001(\010:\005false\022\032\n\013radar_"
    "actif\030\035 \001(\010:\005false\022.\n\021pions_transportes\030"
    "\036 \001(\0132\023.Common.MsgUnitList\022\034\n\021pion_trans"
    "porteur\030\037 \001(\005:\0010\022;\n\020rapport_de_force\030  \001"
    "(\0162!.MsgsSimToClient.ForceRatio.Value\022@\n"
    "\023combat_de_rencontre\030! \001(\0162#.Common.Enum"
    "MeetingEngagementStatus\0228\n\021etat_operatio"
    "nnel\030\" \001(\0162\035.Common.EnumOperationalStatu"
    "s\022Z\n\035disponibilite_au_tir_indirect\030# \001(\016"
    "23.MsgsSimToClient.MsgUnitAttributes.Fir"
    "eAvailability\0225\n\003roe\030$ \001(\0162(.MsgsSimToCl"
    "ient.RulesOfEngagement.Value\022H\n\016roe_popu"
    "lation\030% \001(\01620.MsgsSimToClient.MsgUnitAt"
    "tributes.PopulationRoe\022*\n\007fatigue\030& \001(\0162"
    "\031.Common.EnumUnitTiredness\022%\n\005moral\030\' \001("
    "\0162\026.Common.EnumUnitMorale\022.\n\nexperience\030"
    "( \001(\0162\032.Common.EnumUnitExperience\022\r\n\005ren"
    "du\030) \001(\005\022\031\n\nprisonnier\030* \001(\010:\005false\022%\n\026r"
    "efugie_pris_en_compte\030+ \001(\010:\005false\"\204\001\n\007P"
    "osture\022\r\n\tmouvement\020\000\022\025\n\021mouvement_discr"
    "et\020\001\022\t\n\005arret\020\002\022\021\n\rposte_reflexe\020\003\022\t\n\005po"
    "ste\020\004\022\021\n\rposte_amenage\020\005\022\027\n\023poste_prepar"
    "e_genie\020\006\"N\n\020FireAvailability\022\027\n\023none_fi"
    "re_available\020\000\022\017\n\013pret_au_tir\020\001\022\020\n\014indis"
    "ponible\020\002\"\256\001\n\rPopulationRoe\022\010\n\004none\020\000\022\031\n"
    "\025emploi_force_interdit\020\001\022-\n)maintien_a_d"
    "istance_par_moyens_non_letaux\020\002\022+\n\'dispe"
    "rsion_par_moyens_de_defense_actifs\020\003\022\034\n\030"
    "armes_letales_autorisees\020\004\"C\n\017MsgUnitPat"
    "hFind\022\013\n\003oid\030\001 \002(\005\022#\n\nitineraire\030\002 \002(\0132\017"
    ".Common.MsgPath\"!\n\022MsgUnitDestruction\022\013\n"
    "\003oid\030\001 \002(\005\"`\n\026MsgUnitEnvironmentType\022\013\n\003"
    "oid\030\001 \002(\005\022\014\n\004area\030\002 \002(\005\022\014\n\004left\030\003 \002(\005\022\r\n"
    "\005right\030\004 \002(\005\022\016\n\006linear\030\005 \002(\005\"\211\001\n\030MsgUnit"
    "KnowledgeCreation\022\013\n\003oid\030\001 \002(\005\022\035\n\025oid_gr"
    "oupe_possesseur\030\002 \002(\005\022\030\n\020oid_unite_reell"
    "e\030\003 \002(\005\022\'\n\ntype_unite\030\004 \002(\0132\023.Common.Msg"
    "UnitType\"v\n\021AutomatPerception\022\025\n\roid_com"
    "pagnie\030\001 \002(\005\022J\n\024identification_level\030\002 \002"
    "(\0162,.MsgsSimToClient.EnumUnitIdentificat"
    "ionLevel\"J\n\026SeqOfAutomatPerception\0220\n\004el"
    "em\030\001 \003(\0132\".MsgsSimToClient.AutomatPercep"
    "tion\"\316\004\n\026MsgUnitKnowledgeUpdate\022\013\n\003oid\030\001"
    " \002(\005\022\035\n\025oid_groupe_possesseur\030\002 \002(\005\022\025\n\np"
    "ertinence\030\003 \001(\005:\0010\022J\n\024identification_lev"
    "el\030\004 \001(\0162,.MsgsSimToClient.EnumUnitIdent"
    "ificationLevel\022N\n\030max_identification_lev"
    "el\030\005 \001(\0162,.MsgsSimToClient.EnumUnitIdent"
    "ificationLevel\022\022\n\007etat_op\030\006 \001(\005:\0010\022\023\n\004mo"
    "rt\030\007 \001(\010:\005false\022)\n\010position\030\010 \001(\0132\027.Comm"
    "on.MsgCoordLatLong\022%\n\tdirection\030\t \001(\0132\022."
    "Common.MsgHeading\022\020\n\005speed\030\n \001(\005:\0010\022\017\n\004c"
    "amp\030\013 \001(\005:\0010\022\030\n\tnature_pc\030\014 \001(\010:\005false\022I"
    "\n\030perception_par_compagnie\030\r \001(\0132\'.MsgsS"
    "imToClient.SeqOfAutomatPerception\022\020\n\005ren"
    "du\030\016 \001(\005:\0010\022\031\n\nprisonnier\030\017 \001(\010:\005false\022%"
    "\n\026refugie_pris_en_compte\030\020 \001(\010:\005false\"I\n"
    "\033MsgUnitKnowledgeDestruction\022\013\n\003oid\030\001 \002("
    "\005\022\035\n\025oid_groupe_possesseur\030\002 \002(\005\"f\n\027MsgS"
    "tartUnitFire_target\022\014\n\004unit\030\001 \001(\005\022\022\n\npop"
    "ulation\030\002 \001(\005\022)\n\010position\030\003 \001(\0132\027.Common"
    ".MsgCoordLatLong\"\265\001\n\020MsgStartUnitFire\022\020\n"
    "\010fire_oid\030\001 \002(\005\022\021\n\tfirer_oid\030\002 \002(\005\0228\n\006ta"
    "rget\030\003 \002(\0132(.MsgsSimToClient.MsgStartUni"
    "tFire_target\022+\n\004type\030\004 \002(\0162\035.Common.MsgS"
    "tartUnitFire_type\022\025\n\nammunition\030\005 \001(\005:\0010"
    "\"\277\001\n\023UnitHumanFireDamage\022#\n\004rank\030\001 \002(\0162\025"
    ".Common.EnumHumanRank\022\021\n\talive_nbr\030\002 \002(\005"
    "\022\020\n\010dead_nbr\030\003 \002(\005\022\026\n\016wounded_u1_nbr\030\004 \002"
    "(\005\022\026\n\016wounded_u2_nbr\030\005 \002(\005\022\026\n\016wounded_u3"
    "_nbr\030\006 \002(\005\022\026\n\016wounded_ue_nbr\030\007 \002(\005\"N\n\030Se"
    "qOfUnitHumanFireDamage\0222\n\004elem\030\001 \003(\0132$.M"
    "sgsSimToClient.UnitHumanFireDamage\"}\n\032Ms"
    "gUnitEquipmentFireDamage\022\027\n\017equipement_t"
    "ype\030\001 \002(\005\022\025\n\ravailable_nbr\030\002 \002(\r\022\027\n\017unav"
    "ailable_nbr\030\003 \002(\r\022\026\n\016repairable_nbr\030\004 \002("
    "\r\"Y\n\034SeqOfUnitEquipmentFireDamage\0229\n\004ele"
    "m\030\001 \003(\0132+.MsgsSimToClient.MsgUnitEquipme"
    "ntFireDamage\"\242\001\n\022MsgUnitFireDamages\022\016\n\006t"
    "arget\030\001 \002(\005\0229\n\006humans\030\002 \002(\0132).MsgsSimToC"
    "lient.SeqOfUnitHumanFireDamage\022A\n\nequipm"
    "ents\030\003 \002(\0132-.MsgsSimToClient.SeqOfUnitEq"
    "uipmentFireDamage\"H\n\023MsgUnitsFireDamages"
    "\0221\n\004elem\030\001 \003(\0132#.MsgsSimToClient.MsgUnit"
    "FireDamages\"<\n\030MsgPopulationFireDamages\022"
    "\016\n\006target\030\001 \002(\005\022\020\n\010dead_nbr\030\002 \002(\005\"T\n\031Msg"
    "PopulationsFireDamages\0227\n\004elem\030\001 \003(\0132).M"
    "sgsSimToClient.MsgPopulationFireDamages\""
    "\251\001\n\017MsgStopUnitFire\022\020\n\010fire_oid\030\001 \002(\005\022;\n"
    "\runits_damages\030\002 \001(\0132$.MsgsSimToClient.M"
    "sgUnitsFireDamages\022G\n\023populations_damage"
    "s\030\003 \001(\0132*.MsgsSimToClient.MsgPopulations"
    "FireDamages\"=\n\026MsgStartPopulationFire\022\020\n"
    "\010fire_oid\030\001 \002(\005\022\021\n\tfirer_oid\030\002 \002(\005\"f\n\025Ms"
    "gStopPopulationFire\022\020\n\010fire_oid\030\001 \002(\005\022;\n"
    "\runits_damages\030\002 \002(\0132$.MsgsSimToClient.M"
    "sgUnitsFireDamages\"\250\001\n\014MsgExplosion\022\022\n\no"
    "bject_oid\030\001 \002(\005\022;\n\runits_damages\030\002 \001(\0132$"
    ".MsgsSimToClient.MsgUnitsFireDamages\022G\n\023"
    "populations_damages\030\003 \001(\0132*.MsgsSimToCli"
    "ent.MsgPopulationsFireDamages\"y\n\022MsgStar"
    "tFireEffect\022\022\n\neffect_oid\030\001 \002(\005\022%\n\010locat"
    "ion\030\002 \002(\0132\023.Common.MsgLocation\022(\n\004type\030\003"
    " \002(\0162\032.Common.EnumFireEffectType\" \n\021MsgS"
    "topFireEffect\022\013\n\003oid\030\001 \002(\005\"\270\001\n\tMsgReport"
    "\022\013\n\003oid\030\001 \002(\005\022\n\n\002cr\030\002 \002(\005\022\016\n\006cr_oid\030\003 \002("
    "\005\022-\n\004type\030\004 \002(\0162\037.MsgsSimToClient.EnumRe"
    "portType\022!\n\004time\030\005 \002(\0132\023.Common.MsgDateT"
    "ime\0220\n\nparametres\030\006 \001(\0132\034.Common.MsgMiss"
    "ionParameters\"2\n\023MsgInvalidateReport\022\013\n\003"
    "oid\030\001 \002(\005\022\016\n\006cr_oid\030\002 \002(\005\"(\n\010MsgTrace\022\013\n"
    "\003oid\030\001 \002(\005\022\017\n\007message\030\002 \002(\t\"=\n\022MsgDecisi"
    "onalState\022\013\n\003oid\030\001 \002(\005\022\013\n\003key\030\002 \002(\t\022\r\n\005v"
    "alue\030\003 \002(\t\"O\n\016MsgDebugPoints\022\013\n\003oid\030\001 \002("
    "\005\0220\n\013coordinates\030\002 \002(\0132\033.Common.MsgCoord"
    "LatLongList\"0\n\014SeqOfHeading\022 \n\004elem\030\001 \003("
    "\0132\022.Common.MsgHeading\"\213\001\n\rMsgVisionCone\022"
    "\'\n\006origin\030\001 \002(\0132\027.Common.MsgCoordLatLong"
    "\022\016\n\006height\030\002 \002(\005\022\016\n\006sensor\030\003 \002(\t\0221\n\ndire"
    "ctions\030\004 \002(\0132\035.MsgsSimToClient.SeqOfHead"
    "ing\"?\n\017SeqOfVisionCone\022,\n\004elem\030\001 \003(\0132\036.M"
    "sgsSimToClient.MsgVisionCone\"f\n\022MsgUnitV"
    "isionCones\022\013\n\003oid\030\001 \002(\005\022/\n\005cones\030\002 \002(\0132 "
    ".MsgsSimToClient.SeqOfVisionCone\022\022\n\nelon"
    "gation\030\003 \002(\002\"\246\001\n\020MsgUnitDetection\022\013\n\003oid"
    "\030\001 \002(\005\022\031\n\021detected_unit_oid\030\002 \002(\005\0226\n\022cur"
    "rent_visibility\030\003 \002(\0162\032.Common.EnumUnitV"
    "isibility\0222\n\016max_visibility\030\004 \002(\0162\032.Comm"
    "on.EnumUnitVisibility\"e\n\022MsgObjectDetect"
    "ion\022\013\n\003oid\030\001 \002(\005\022\022\n\nobject_oid\030\002 \002(\005\022.\n\n"
    "visibility\030\003 \002(\0162\032.Common.EnumUnitVisibi"
    "lity\"\225\001\n#MsgPopulationConcentrationDetec"
    "tion\022\013\n\003oid\030\001 \002(\005\022\026\n\016population_oid\030\002 \002("
    "\005\022\031\n\021concentration_oid\030\003 \002(\005\022.\n\nvisibili"
    "ty\030\004 \002(\0162\032.Common.EnumUnitVisibility\"z\n\032"
    "MsgPopulationFlowDetection\022\013\n\003oid\030\001 \002(\005\022"
    "\026\n\016population_oid\030\002 \002(\005\022\020\n\010flow_oid\030\003 \002("
    "\005\022%\n\014visible_flow\030\004 \002(\0132\017.Common.MsgPath"
    "\"\242\001\n\021MsgObjectCreation\022\013\n\003oid\030\001 \002(\005\022\014\n\004t"
    "ype\030\002 \002(\t\022\014\n\004name\030\003 \002(\t\022\014\n\004team\030\004 \002(\005\022%\n"
    "\010location\030\005 \002(\0132\023.Common.MsgLocation\022/\n\n"
    "attributes\030\006 \002(\0132\033.Common.MsgObjectAttri"
    "butes\"#\n\024MsgObjectDestruction\022\013\n\003oid\030\001 \002"
    "(\005\"v\n\017MsgObjectUpdate\022\013\n\003oid\030\001 \002(\005\022%\n\010lo"
    "cation\030\002 \001(\0132\023.Common.MsgLocation\022/\n\natt"
    "ributes\030\003 \002(\0132\033.Common.MsgObjectAttribut"
    "es\"\232\001\n\032MsgObjectKnowledgeCreation\022\013\n\003oid"
    "\030\001 \002(\005\022\014\n\004team\030\002 \002(\005\022\023\n\013real_object\030\003 \002("
    "\005\022\014\n\004type\030\004 \002(\t\022/\n\nattributes\030\005 \002(\0132\033.Co"
    "mmon.MsgObjectAttributes\022\r\n\005group\030\006 \001(\005\""
    "\224\002\n\030MsgObjectKnowledgeUpdate\022\013\n\003oid\030\001 \002("
    "\005\022\014\n\004team\030\002 \002(\005\022\026\n\013real_object\030\003 \001(\005:\0010\022"
    "\024\n\trelevance\030\004 \001(\005:\0010\022%\n\010location\030\005 \001(\0132"
    "\023.Common.MsgLocation\022/\n\nattributes\030\006 \001(\013"
    "2\033.Common.MsgObjectAttributes\022\030\n\tperceiv"
    "ed\030\007 \001(\010:\005false\022.\n\022automat_perception\030\010 "
    "\001(\0132\022.Common.MsgListOID\022\r\n\005group\030\t \001(\005\":"
    "\n\035MsgObjectKnowledgeDestruction\022\013\n\003oid\030\001"
    " \002(\005\022\014\n\004team\030\002 \002(\005\"J\n\031MsgUrbanKnowledgeC"
    "reation\022\013\n\003oid\030\001 \002(\005\022\014\n\004team\030\002 \002(\005\022\022\n\nre"
    "al_urban\030\003 \002(\005\"\374\001\n\027MsgUrbanKnowledgeUpda"
    "te\022\013\n\003oid\030\001 \002(\005\022\014\n\004team\030\002 \002(\005\022\022\n\nreal_ur"
    "ban\030\003 \002(\005\022\021\n\trelevance\030\004 \001(\005\022J\n\024identifi"
    "cation_level\030\005 \001(\0162,.MsgsSimToClient.Enu"
    "mUnitIdentificationLevel\022\020\n\010progress\030\006 \001"
    "(\005\022\021\n\tperceived\030\007 \001(\010\022.\n\022automat_percept"
    "ion\030\010 \001(\0132\022.Common.MsgListOID\"9\n\034MsgUrba"
    "nKnowledgeDestruction\022\013\n\003oid\030\001 \002(\005\022\014\n\004te"
    "am\030\002 \002(\005\"\351\001\n\035MsgLogMedicalHandlingCreati"
    "on\022\024\n\014oid_consigne\030\001 \002(\005\022\020\n\010oid_pion\030\002 \002"
    "(\005\022\025\n\rtick_creation\030\003 \002(\005\022#\n\004rang\030\004 \002(\0162"
    "\025.Common.EnumHumanRank\022(\n\010blessure\030\005 \002(\016"
    "2\026.Common.EnumHumanWound\022\034\n\rblesse_menta"
    "l\030\006 \001(\010:\005false\022\034\n\rcontamine_nbc\030\007 \001(\010:\005f"
    "alse\"\247\002\n\033MsgLogMedicalHandlingUpdate\022\024\n\014"
    "oid_consigne\030\001 \002(\005\022\020\n\010oid_pion\030\002 \002(\005\022 \n\025"
    "oid_pion_log_traitant\030\003 \001(\005:\0010\022(\n\010blessu"
    "re\030\004 \001(\0162\026.Common.EnumHumanWound\022\034\n\rbles"
    "se_mental\030\005 \001(\010:\005false\022\034\n\rcontamine_nbc\030"
    "\006 \001(\010:\005false\0222\n\004etat\030\007 \001(\0162$.Common.Enum"
    "LogMedicalHandlingStatus\022$\n\025diagnostique"
    "_effectue\030\010 \001(\010:\005false\"J\n MsgLogMedicalH"
    "andlingDestruction\022\024\n\014oid_consigne\030\001 \002(\005"
    "\022\020\n\010oid_pion\030\002 \002(\005\"\261\001\n\"MsgLogMedicalEqui"
    "pmentAvailability\022\027\n\017type_equipement\030\001 \002"
    "(\005\022\021\n\tnbr_total\030\002 \002(\005\022\027\n\017nbr_disponibles"
    "\030\003 \002(\005\022\026\n\016nbr_au_travail\030\004 \002(\005\022\025\n\nnbr_pr"
    "etes\030\005 \001(\005:\0010\022\027\n\014nbr_au_repos\030\006 \001(\005:\0010\"i"
    "\n$SeqOfLogMedicalEquipmentAvailability\022A"
    "\n\004elem\030\001 \003(\01323.MsgsSimToClient.MsgLogMed"
    "icalEquipmentAvailability\"\313\003\n\022MsgLogMedi"
    "calState\022\020\n\010oid_pion\030\001 \002(\005\022\035\n\016chaine_act"
    "ivee\030\002 \001(\010:\005false\0222\n\tpriorites\030\003 \001(\0132\037.C"
    "ommon.MsgLogMedicalPriorities\0223\n\023priorit"
    "es_tactiques\030\004 \001(\0132\026.Common.MsgAutomatLi"
    "st\022_\n disponibilites_ambulances_releve\030\005"
    " \001(\01325.MsgsSimToClient.SeqOfLogMedicalEq"
    "uipmentAvailability\022b\n#disponibilites_am"
    "bulances_ramassage\030\006 \001(\01325.MsgsSimToClie"
    "nt.SeqOfLogMedicalEquipmentAvailability\022"
    "V\n\027disponibilites_medecins\030\007 \001(\01325.MsgsS"
    "imToClient.SeqOfLogMedicalEquipmentAvail"
    "ability\"\217\001\n!MsgLogMaintenanceHandlingCre"
    "ation\022\024\n\014oid_consigne\030\001 \002(\005\022\020\n\010oid_pion\030"
    "\002 \002(\005\022\025\n\rtick_creation\030\003 \002(\005\022\027\n\017type_equ"
    "ipement\030\004 \002(\005\022\022\n\ntype_panne\030\005 \002(\005\"\306\001\n\037Ms"
    "gLogMaintenanceHandlingUpdate\022\024\n\014oid_con"
    "signe\030\001 \002(\005\022\020\n\010oid_pion\030\002 \002(\005\022\035\n\025oid_pio"
    "n_log_traitant\030\003 \002(\005\0226\n\004etat\030\004 \001(\0162(.Com"
    "mon.EnumLogMaintenanceHandlingStatus\022$\n\025"
    "diagnostique_effectue\030\005 \001(\010:\005false\"N\n$Ms"
    "gLogMaintenanceHandlingDestruction\022\024\n\014oi"
    "d_consigne\030\001 \002(\005\022\020\n\010oid_pion\030\002 \002(\005\"\262\001\n&M"
    "sgLogMaintenanceEquipmentAvailability\022\027\n"
    "\017type_equipement\030\001 \002(\005\022\021\n\tnbr_total\030\002 \002("
    "\005\022\027\n\017nbr_disponibles\030\003 \002(\005\022\026\n\016nbr_au_tra"
    "vail\030\004 \002(\005\022\025\n\nnbr_pretes\030\005 \001(\005:\0010\022\024\n\014nbr"
    "_au_repos\030\006 \001(\005\"q\n(SeqOfLogMaintenanceEq"
    "uipmentAvailability\022E\n\004elem\030\001 \003(\01327.Msgs"
    "SimToClient.MsgLogMaintenanceEquipmentAv"
    "ailability\"\256\003\n\026MsgLogMaintenanceState\022\020\n"
    "\010oid_pion\030\001 \002(\005\022\026\n\016chaine_activee\030\002 \001(\010\022"
    "?\n\016regime_travail\030\003 \001(\0162\'.Common.EnumLog"
    "MaintenanceRegimeTravail\0226\n\tpriorites\030\004 "
    "\001(\0132#.Common.MsgLogMaintenancePriorities"
    "\0223\n\023priorites_tactiques\030\005 \001(\0132\026.Common.M"
    "sgAutomatList\022]\n\032disponibilites_remorque"
    "urs\030\006 \001(\01329.MsgsSimToClient.SeqOfLogMain"
    "tenanceEquipmentAvailability\022]\n\032disponib"
    "ilites_reparateurs\030\007 \001(\01329.MsgsSimToClie"
    "nt.SeqOfLogMaintenanceEquipmentAvailabil"
    "ity\"\231\001\n\034MsgLogSupplyHandlingCreation\022\024\n\014"
    "oid_consigne\030\001 \001(\005\022\024\n\014oid_automate\030\002 \001(\005"
    "\022\025\n\rtick_creation\030\003 \001(\005\0226\n\tdotations\030\004 \001"
    "(\0132#.MsgsSimToClient.SeqOfDotationQuery\""
    "{\n\020MsgDotationQuery\022\024\n\014ressource_id\030\001 \001("
    "\005\022\031\n\021quantite_demandee\030\002 \001(\005\022\031\n\021quantite"
    "_accordee\030\003 \001(\005\022\033\n\023quantite_en_transit\030\004"
    " \001(\005\"E\n\022SeqOfDotationQuery\022/\n\004elem\030\001 \003(\013"
    "2!.MsgsSimToClient.MsgDotationQuery\"\257\002\n\032"
    "MsgLogSupplyHandlingUpdate\022\024\n\014oid_consig"
    "ne\030\001 \001(\005\022\024\n\014oid_automate\030\002 \001(\005\022!\n\031oid_au"
    "tomate_log_traitant\030\003 \001(\005\0222\n*oid_automat"
    "e_log_fournissant_moyens_convoi\030\004 \001(\005\022\032\n"
    "\022oid_pion_convoyant\030\005 \001(\005\022:\n\004etat\030\006 \001(\0162"
    ",.MsgsSimToClient.EnumLogSupplyHandlingS"
    "tatus\0226\n\tdotations\030\007 \001(\0132#.MsgsSimToClie"
    "nt.SeqOfDotationQuery\"M\n\037MsgLogSupplyHan"
    "dlingDestruction\022\024\n\014oid_consigne\030\001 \002(\005\022\024"
    "\n\014oid_automate\030\002 \002(\005\"\254\001\n MsgLogSupplyEqu"
    "imentAvailability\022\027\n\017type_equipement\030\001 \001"
    "(\005\022\021\n\tnbr_total\030\002 \001(\005\022\027\n\017nbr_disponibles"
    "\030\003 \001(\005\022\026\n\016nbr_au_travail\030\004 \001(\005\022\025\n\nnbr_pr"
    "etes\030\005 \001(\005:\0010\022\024\n\014nbr_au_repos\030\006 \001(\005\"e\n\"S"
    "eqOfLogSupplyEquimentAvailability\022?\n\004ele"
    "m\030\001 \003(\01321.MsgsSimToClient.MsgLogSupplyEq"
    "uimentAvailability\"\314\001\n\021MsgLogSupplyState"
    "\022\020\n\010oid_pion\030\001 \001(\005\022\026\n\016chaine_activee\030\002 \001"
    "(\010\022*\n\006stocks\030\003 \001(\0132\032.Common.SeqOfDotatio"
    "nStock\022a\n$disponibilites_transporteurs_c"
    "onvois\030\004 \001(\01323.MsgsSimToClient.SeqOfLogS"
    "upplyEquimentAvailability\"V\n\022MsgLogSuppl"
    "yQuotas\022\024\n\014oid_automate\030\001 \002(\005\022*\n\006quotas\030"
    "\002 \002(\0132\032.Common.SeqOfDotationQuota\"\\\n\025Msg"
    "PopulationCreation\022\013\n\003oid\030\001 \002(\005\022\027\n\017type_"
    "population\030\002 \002(\005\022\013\n\003nom\030\003 \001(\t\022\020\n\010oid_cam"
    "p\030\004 \002(\005\">\n\023MsgPopulationUpdate\022\013\n\003oid\030\001 "
    "\002(\005\022\032\n\017etat_domination\030\002 \001(\005:\0010\"t\n\"MsgPo"
    "pulationConcentrationCreation\022\013\n\003oid\030\001 \002"
    "(\005\022\026\n\016oid_population\030\002 \002(\005\022)\n\010position\030\003"
    " \002(\0132\027.Common.MsgCoordLatLong\"L\n%MsgPopu"
    "lationConcentrationDestruction\022\013\n\003oid\030\001 "
    "\002(\005\022\026\n\016oid_population\030\002 \002(\005\"\265\001\n MsgPopul"
    "ationConcentrationUpdate\022\013\n\003oid\030\001 \002(\005\022\026\n"
    "\016oid_population\030\002 \002(\005\022\035\n\022nb_humains_viva"
    "nts\030\003 \001(\005:\0010\022\033\n\020nb_humains_morts\030\004 \001(\005:\001"
    "0\0220\n\010attitude\030\005 \001(\0162\036.Common.EnumPopulat"
    "ionAttitude\"@\n\031MsgPopulationFlowCreation"
    "\022\013\n\003oid\030\001 \002(\005\022\026\n\016oid_population\030\002 \002(\005\"C\n"
    "\034MsgPopulationFlowDestruction\022\013\n\003oid\030\001 \002"
    "(\005\022\026\n\016oid_population\030\002 \002(\005\"\253\002\n\027MsgPopula"
    "tionFlowUpdate\022\013\n\003oid\030\001 \002(\005\022\026\n\016oid_popul"
    "ation\030\002 \002(\005\022#\n\nitineraire\030\003 \001(\0132\017.Common"
    ".MsgPath\022\035\n\004flux\030\004 \001(\0132\017.Common.MsgPath\022"
    "%\n\tdirection\030\005 \001(\0132\022.Common.MsgHeading\022\022"
    "\n\007vitesse\030\006 \001(\005:\0010\022\035\n\022nb_humains_vivants"
    "\030\007 \001(\005:\0010\022\033\n\020nb_humains_morts\030\010 \001(\005:\0010\0220"
    "\n\010attitude\030\t \001(\0162\036.Common.EnumPopulation"
    "Attitude\"\206\001\n\036MsgPopulationKnowledgeCreat"
    "ion\022\030\n\020oid_connaissance\030\001 \002(\005\022\035\n\025oid_gro"
    "upe_possesseur\030\002 \002(\005\022\035\n\025oid_population_r"
    "eelle\030\003 \001(\005\022\014\n\004camp\030\004 \001(\005\"s\n\034MsgPopulati"
    "onKnowledgeUpdate\022\030\n\020oid_connaissance\030\001 "
    "\002(\005\022\035\n\025oid_groupe_possesseur\030\002 \002(\005\022\032\n\017et"
    "at_domination\030\003 \001(\005:\0010\"\\\n!MsgPopulationK"
    "nowledgeDestruction\022\030\n\020oid_connaissance\030"
    "\001 \002(\005\022\035\n\025oid_groupe_possesseur\030\002 \002(\005\"\346\001\n"
    "+MsgPopulationConcentrationKnowledgeCrea"
    "tion\022&\n\036oid_connaissance_concentration\030\001"
    " \002(\005\022#\n\033oid_connaissance_population\030\002 \002("
    "\005\022\035\n\025oid_groupe_possesseur\030\003 \002(\005\022 \n\030oid_"
    "concentration_reelle\030\004 \001(\005\022)\n\010position\030\005"
    " \001(\0132\027.Common.MsgCoordLatLong\"\234\001\n.MsgPop"
    "ulationConcentrationKnowledgeDestruction"
    "\022&\n\036oid_connaissance_concentration\030\001 \002(\005"
    "\022#\n\033oid_connaissance_population\030\002 \002(\005\022\035\n"
    "\025oid_groupe_possesseur\030\003 \002(\005\"\333\002\n)MsgPopu"
    "lationConcentrationKnowledgeUpdate\022&\n\036oi"
    "d_connaissance_concentration\030\001 \002(\005\022#\n\033oi"
    "d_connaissance_population\030\002 \002(\005\022\035\n\025oid_g"
    "roupe_possesseur\030\003 \002(\005\022#\n\030oid_concentrat"
    "ion_reelle\030\004 \001(\005:\0010\022\035\n\022nb_humains_vivant"
    "s\030\005 \001(\005:\0010\022\033\n\020nb_humains_morts\030\006 \001(\005:\0010\022"
    "0\n\010attitude\030\007 \001(\0162\036.Common.EnumPopulatio"
    "nAttitude\022\025\n\npertinence\030\010 \001(\005:\0010\022\030\n\test_"
    "percu\030\t \001(\010:\005false\"\236\001\n\"MsgPopulationFlow"
    "KnowledgeCreation\022\035\n\025oid_connaissance_fl"
    "ux\030\001 \002(\005\022#\n\033oid_connaissance_population\030"
    "\002 \002(\005\022\035\n\025oid_groupe_possesseur\030\003 \002(\005\022\025\n\r"
    "oid_flux_reel\030\004 \002(\005\"A\n\013MsgFlowPart\022\036\n\005fo"
    "rme\030\001 \002(\0132\017.Common.MsgPath\022\022\n\npertinence"
    "\030\002 \002(\005\";\n\rSeqOfFlowPart\022*\n\004elem\030\001 \003(\0132\034."
    "MsgsSimToClient.MsgFlowPart\"\212\001\n%MsgPopul"
    "ationFlowKnowledgeDestruction\022\035\n\025oid_con"
    "naissance_flux\030\001 \002(\005\022#\n\033oid_connaissance"
    "_population\030\002 \002(\005\022\035\n\025oid_groupe_possesse"
    "ur\030\003 \002(\005\"\231\003\n MsgPopulationFlowKnowledgeU"
    "pdate\022\035\n\025oid_connaissance_flux\030\001 \002(\005\022#\n\033"
    "oid_connaissance_population\030\002 \002(\005\022\035\n\025oid"
    "_groupe_possesseur\030\003 \002(\005\022\030\n\roid_flux_ree"
    "l\030\004 \001(\005:\0010\0225\n\rportions_flux\030\005 \001(\0132\036.Msgs"
    "SimToClient.SeqOfFlowPart\022%\n\tdirection\030\006"
    " \001(\0132\022.Common.MsgHeading\022\022\n\007vitesse\030\007 \001("
    "\005:\0010\022\035\n\022nb_humains_vivants\030\010 \001(\005:\0010\022\033\n\020n"
    "b_humains_morts\030\t \001(\005:\0010\0220\n\010attitude\030\n \001"
    "(\0162\036.Common.EnumPopulationAttitude\022\030\n\tes"
    "t_percu\030\013 \001(\010:\005false\"(\n\030MsgFolkCreation_"
    "profiles\022\014\n\004elem\030\001 \003(\t\"*\n\032MsgFolkCreatio"
    "n_activities\022\014\n\004elem\030\001 \003(\t\"\274\001\n\017MsgFolkCr"
    "eation\022;\n\010profiles\030\001 \002(\0132).MsgsSimToClie"
    "nt.MsgFolkCreation_profiles\022?\n\nactivitie"
    "s\030\002 \002(\0132+.MsgsSimToClient.MsgFolkCreatio"
    "n_activities\022\026\n\016container_size\030\003 \001(\005\022\023\n\013"
    "edge_number\030\004 \001(\005\"U\n\026MsgFolkGraphEdgeUpd"
    "ate\022\013\n\003oid\030\001 \002(\005\022\017\n\007shp_oid\030\002 \002(\005\022\035\n\025pop"
    "ulation_occupation\030\003 \003(\005\"K\n\022MsgFolkGraph"
    "Update\0225\n\004elem\030\001 \003(\0132\'.MsgsSimToClient.M"
    "sgFolkGraphEdgeUpdate\"\032\n\030MsgControlGloba"
    "lMeteoAck\"\031\n\027MsgControlLocalMeteoAck\"%\n#"
    "MsgControlCheckPointSetFrequencyAck\" \n\036M"
    "sgControlCheckPointSaveNowAck\"\037\n\035MsgCont"
    "rolCheckPointSaveBegin\"\"\n MsgControlChec"
    "kPointSaveBeginAck\"+\n\033MsgControlCheckPoi"
    "ntSaveEnd\022\014\n\004name\030\001 \001(\t\"!\n\037MsgControlSen"
    "dCurrentStateBegin\"\037\n\035MsgControlSendCurr"
    "entStateEnd\"L\n\033MsgUrbanAttributeVegetati"
    "on\022\014\n\004type\030\001 \002(\t\022\016\n\006height\030\002 \002(\005\022\017\n\007dens"
    "ity\030\003 \002(\002\"p\n\025MsgUrbanAttributeSoil\022\022\n\noc"
    "cupation\030\001 \002(\002\022\026\n\016trafficability\030\002 \002(\002\022\020"
    "\n\010multiple\030\003 \002(\010\022\031\n\021compound_clearing\030\004 "
    "\002(\t\"\274\001\n\035MsgUrbanAttributeArchitecture\022\016\n"
    "\006height\030\001 \002(\002\022\024\n\014floor_number\030\002 \002(\005\022\035\n\025b"
    "asement_level_number\030\003 \002(\005\022\022\n\nroof_shape"
    "\030\004 \002(\t\022\020\n\010material\030\005 \002(\t\022\030\n\020inner_clutte"
    "ring\030\006 \002(\002\022\026\n\016facade_opacity\030\007 \002(\002\"G\n\014Ms"
    "gColorRGBA\022\013\n\003red\030\001 \002(\005\022\r\n\005green\030\002 \002(\005\022\014"
    "\n\004blue\030\003 \002(\005\022\r\n\005alpha\030\004 \002(\002\"M\n\026MagicActi"
    "onCreateUrban\022\014\n\004name\030\001 \002(\t\022%\n\010location\030"
    "\002 \002(\0132\023.Common.MsgLocation\"%\n\026MagicActio"
    "nUpdateUrban\022\013\n\003oid\030\001 \002(\r\"&\n\027MagicAction"
    "DestroyUrban\022\013\n\003oid\030\001 \002(\r\"\324\001\n\023MsgUrbanMa"
    "gicAction\022=\n\014create_urban\030\001 \001(\0132\'.MsgsSi"
    "mToClient.MagicActionCreateUrban\022=\n\014upda"
    "te_urban\030\002 \001(\0132\'.MsgsSimToClient.MagicAc"
    "tionUpdateUrban\022?\n\rdestroy_urban\030\003 \001(\0132("
    ".MsgsSimToClient.MagicActionDestroyUrban"
    "\"\260\002\n\026MsgUrbanMagicActionAck\022E\n\nerror_cod"
    "e\030\001 \002(\01621.MsgsSimToClient.MsgUrbanMagicA"
    "ctionAck.ErrorCode\"\316\001\n\tErrorCode\022\014\n\010no_e"
    "rror\020\000\022\027\n\023error_invalid_urban\020\001\022\024\n\020error"
    "_invalid_id\020\002\022\026\n\022error_invalid_camp\020\003\022\036\n"
    "\032error_invalid_localisation\020\004\022%\n!error_m"
    "issing_specific_attributes\020\005\022%\n!error_in"
    "valid_specific_attributes\020\006\"\200\002\n\022MsgUrban"
    "Attributes\022@\n\nvegetation\030\001 \001(\0132,.MsgsSim"
    "ToClient.MsgUrbanAttributeVegetation\0224\n\004"
    "soil\030\002 \001(\0132&.MsgsSimToClient.MsgUrbanAtt"
    "ributeSoil\022D\n\014architecture\030\003 \001(\0132..MsgsS"
    "imToClient.MsgUrbanAttributeArchitecture"
    "\022,\n\005color\030\004 \001(\0132\035.MsgsSimToClient.MsgCol"
    "orRGBA\"\215\001\n\020MsgUrbanCreation\022\013\n\003oid\030\001 \002(\r"
    "\022\014\n\004name\030\002 \002(\t\022%\n\010location\030\003 \002(\0132\023.Commo"
    "n.MsgLocation\0227\n\nattributes\030\004 \001(\0132#.Msgs"
    "SimToClient.MsgUrbanAttributes\"c\n\021MsgUrb"
    "anDetection\022\013\n\003oid\030\001 \002(\r\022\021\n\turban_oid\030\002 "
    "\002(\r\022.\n\nvisibility\030\003 \002(\0162\032.Common.EnumUni"
    "tVisibility\"D\n\016MsgUrbanUpdate\022\013\n\003oid\030\001 \002"
    "(\r\022%\n\010location\030\002 \001(\0132\023.Common.MsgLocatio"
    "n\"\"\n\023MsgUrbanDestruction\022\013\n\003oid\030\001 \002(\r\"i\n"
    "\031MsgKnowledgeGroupCreation\022\013\n\003oid\030\001 \002(\r\022"
    "\020\n\010oid_camp\030\002 \002(\r\022\022\n\noid_parent\030\003 \001(\r\022\014\n"
    "\004type\030\004 \002(\t\022\013\n\003jam\030\005 \001(\010\"k\n\027MsgKnowledge"
    "GroupUpdate\022\013\n\003oid\030\001 \002(\r\022\020\n\010oid_camp\030\002 \001"
    "(\r\022\022\n\noid_parent\030\003 \001(\r\022\017\n\007enabled\030\004 \001(\010\022"
    "\014\n\004type\030\005 \001(\t\"\265\001\n\021KnowledgeGroupAck\"\237\001\n\t"
    "ErrorCode\022\014\n\010no_error\020\000\022\026\n\022error_invalid"
    "_unit\020\001\022\032\n\026error_invalid_superior\020\002\022\026\n\022e"
    "rror_invalid_camp\020\003\022 \n\034error_invalid_kno"
    "wledgegroup\020\004\022\026\n\022error_invalid_type\020\005\"e\n"
    "\024MsgKnowledgeGroupAck\022\013\n\003oid\030\001 \002(\r\022@\n\ner"
    "ror_code\030\002 \002(\0162,.MsgsSimToClient.Knowled"
    "geGroupAck.ErrorCode\"m\n\034MsgKnowledgeGrou"
    "pCreationAck\022\013\n\003oid\030\001 \002(\r\022@\n\nerror_code\030"
    "\002 \002(\0162,.MsgsSimToClient.KnowledgeGroupAc"
    "k.ErrorCode\"k\n\032MsgKnowledgeGroupUpdateAc"
    "k\022\013\n\003oid\030\001 \002(\r\022@\n\nerror_code\030\002 \002(\0162,.Msg"
    "sSimToClient.KnowledgeGroupAck.ErrorCode"
    "\"=\n\034MsgKnowledgeGroupDestruction\022\013\n\003oid\030"
    "\001 \002(\r\022\020\n\010oid_camp\030\002 \002(\r\"T\n\025MsgControlGlo"
    "balMeteo\022.\n\nattributes\030\001 \002(\0132\032.Common.Ms"
    "gMeteoAttributes\022\013\n\003oid\030\002 \002(\r\"\313\001\n\034MsgCon"
    "trolLocalMeteoCreation\022\013\n\003oid\030\001 \002(\r\0224\n\023t"
    "op_left_coordinate\030\002 \001(\0132\027.Common.MsgCoo"
    "rdLatLong\0228\n\027bottom_right_coordinate\030\003 \001"
    "(\0132\027.Common.MsgCoordLatLong\022.\n\nattribute"
    "s\030\004 \001(\0132\032.Common.MsgMeteoAttributes\".\n\037M"
    "sgControlLocalMeteoDestruction\022\013\n\003oid\030\001 "
    "\002(\r\"\340I\n\016MsgSimToClient\022\022\n\007context\030\001 \001(\005:"
    "\0010\0228\n\007message\030\002 \002(\0132\'.MsgsSimToClient.Ms"
    "gSimToClient.Content\032\377H\n\007Content\0228\n\016unit"
    "_order_ack\030\001 \001(\0132 .MsgsSimToClient.MsgUn"
    "itOrderAck\022>\n\021automat_order_ack\030\002 \001(\0132#."
    "MsgsSimToClient.MsgAutomatOrderAck\022D\n\024po"
    "pulation_order_ack\030\003 \001(\0132&.MsgsSimToClie"
    "nt.MsgPopulationOrderAck\0228\n\016frag_order_a"
    "ck\030\004 \001(\0132 .MsgsSimToClient.MsgFragOrderA"
    "ck\022C\n\024set_automat_mode_ack\030\005 \001(\0132%.MsgsS"
    "imToClient.MsgSetAutomatModeAck\022M\n\031unit_"
    "creation_request_ack\030\006 \001(\0132*.MsgsSimToCl"
    "ient.MsgUnitCreationRequestAck\022<\n\020magic_"
    "action_ack\030\007 \001(\0132\".MsgsSimToClient.MsgMa"
    "gicActionAck\022E\n\025unit_magic_action_ack\030\010 "
    "\001(\0132&.MsgsSimToClient.MsgUnitMagicAction"
    "Ack\022I\n\027object_magic_action_ack\030\t \001(\0132(.M"
    "sgsSimToClient.MsgObjectMagicActionAck\022Q"
    "\n\033population_magic_action_ack\030\n \001(\0132,.Ms"
    "gsSimToClient.MsgPopulationMagicActionAc"
    "k\022D\n\024change_diplomacy_ack\030\013 \001(\0132&.MsgsSi"
    "mToClient.MsgChangeDiplomacyAck\022^\n\"autom"
    "at_change_knowledge_group_ack\030\014 \001(\01322.Ms"
    "gsSimToClient.MsgAutomatChangeKnowledgeG"
    "roupAck\022\\\n!automat_change_logistic_links"
    "_ack\030\r \001(\01321.MsgsSimToClient.MsgAutomatC"
    "hangeLogisticLinksAck\022Q\n\033automat_change_"
    "superior_ack\030\016 \001(\0132,.MsgsSimToClient.Msg"
    "AutomatChangeSuperiorAck\022K\n\030unit_change_"
    "superior_ack\030\017 \001(\0132).MsgsSimToClient.Msg"
    "UnitChangeSuperiorAck\022J\n\030log_supply_push"
    "_flow_ack\030\020 \001(\0132(.MsgsSimToClient.MsgLog"
    "SupplyPushFlowAck\022R\n\034log_supply_change_q"
    "uotas_ack\030\021 \001(\0132,.MsgsSimToClient.MsgLog"
    "SupplyChangeQuotasAck\022C\n\023control_informa"
    "tion\030\022 \001(\0132&.MsgsSimToClient.MsgControlI"
    "nformation\022V\n\035control_profiling_informat"
    "ion\030\023 \001(\0132/.MsgsSimToClient.MsgControlPr"
    "ofilingInformation\022@\n\022control_begin_tick"
    "\030\024 \001(\0132$.MsgsSimToClient.MsgControlBegin"
    "Tick\022<\n\020control_end_tick\030\025 \001(\0132\".MsgsSim"
    "ToClient.MsgControlEndTick\022<\n\020control_st"
    "op_ack\030\026 \001(\0132\".MsgsSimToClient.MsgContro"
    "lStopAck\022>\n\021control_pause_ack\030\027 \001(\0132#.Ms"
    "gsSimToClient.MsgControlPauseAck\022@\n\022cont"
    "rol_resume_ack\030\030 \001(\0132$.MsgsSimToClient.M"
    "sgControlResumeAck\022V\n\036control_change_tim"
    "e_factor_ack\030\031 \001(\0132..MsgsSimToClient.Msg"
    "ControlChangeTimeFactorAck\022R\n\034control_da"
    "te_time_change_ack\030\032 \001(\0132,.MsgsSimToClie"
    "nt.MsgControlDatetimeChangeAck\022Q\n\033contro"
    "l_checkpoint_save_end\030\033 \001(\0132,.MsgsSimToC"
    "lient.MsgControlCheckPointSaveEnd\0228\n\022for"
    "mation_creation\030\034 \001(\0132\034.Common.MsgFormat"
    "ionCreation\0227\n\rside_creation\030\035 \001(\0132 .Msg"
    "sSimToClient.MsgTeamCreation\022=\n\020automat_"
    "creation\030\036 \001(\0132#.MsgsSimToClient.MsgAuto"
    "matCreation\022A\n\022automat_attributes\030\037 \001(\0132"
    "%.MsgsSimToClient.MsgAutomatAttributes\0227"
    "\n\runit_creation\030  \001(\0132 .MsgsSimToClient."
    "MsgUnitCreation\022;\n\017unit_attributes\030! \001(\013"
    "2\".MsgsSimToClient.MsgUnitAttributes\0227\n\r"
    "unit_pathfind\030\" \001(\0132 .MsgsSimToClient.Ms"
    "gUnitPathFind\022=\n\020unit_destruction\030# \001(\0132"
    "#.MsgsSimToClient.MsgUnitDestruction\022F\n\025"
    "unit_environment_type\030$ \001(\0132\'.MsgsSimToC"
    "lient.MsgUnitEnvironmentType\0224\n\020change_d"
    "iplomacy\030% \001(\0132\032.Common.MsgChangeDiploma"
    "cy\022;\n\024unit_change_superior\030& \001(\0132\035.Commo"
    "n.MsgUnitChangeSuperior\022L\n\035automat_chang"
    "e_logistic_links\030\' \001(\0132%.Common.MsgAutom"
    "atChangeLogisticLinks\022N\n\036automat_change_"
    "knowledge_group\030( \001(\0132&.Common.MsgAutoma"
    "tChangeKnowledgeGroup\022A\n\027automat_change_"
    "superior\030) \001(\0132 .Common.MsgAutomatChange"
    "Superior\022J\n\027unit_knowledge_creation\030* \001("
    "\0132).MsgsSimToClient.MsgUnitKnowledgeCrea"
    "tion\022F\n\025unit_knowledge_update\030+ \001(\0132\'.Ms"
    "gsSimToClient.MsgUnitKnowledgeUpdate\022P\n\032"
    "unit_knowledge_destruction\030, \001(\0132,.MsgsS"
    "imToClient.MsgUnitKnowledgeDestruction\022:"
    "\n\017start_unit_fire\030- \001(\0132!.MsgsSimToClien"
    "t.MsgStartUnitFire\0228\n\016stop_unit_fire\030. \001"
    "(\0132 .MsgsSimToClient.MsgStopUnitFire\022F\n\025"
    "start_population_fire\030/ \001(\0132\'.MsgsSimToC"
    "lient.MsgStartPopulationFire\022D\n\024stop_pop"
    "ulation_fire\0300 \001(\0132&.MsgsSimToClient.Msg"
    "StopPopulationFire\0220\n\texplosion\0301 \001(\0132\035."
    "MsgsSimToClient.MsgExplosion\022>\n\021start_fi"
    "re_effect\0302 \001(\0132#.MsgsSimToClient.MsgSta"
    "rtFireEffect\022<\n\020stop_fire_effect\0303 \001(\0132\""
    ".MsgsSimToClient.MsgStopFireEffect\022*\n\006re"
    "port\0304 \001(\0132\032.MsgsSimToClient.MsgReport\022?"
    "\n\021invalidate_report\0305 \001(\0132$.MsgsSimToCli"
    "ent.MsgInvalidateReport\022(\n\005trace\0306 \001(\0132\031"
    ".MsgsSimToClient.MsgTrace\022=\n\020decisional_"
    "state\0307 \001(\0132#.MsgsSimToClient.MsgDecisio"
    "nalState\0225\n\014debug_points\0308 \001(\0132\037.MsgsSim"
    "ToClient.MsgDebugPoints\022>\n\021unit_vision_c"
    "ones\0309 \001(\0132#.MsgsSimToClient.MsgUnitVisi"
    "onCones\0229\n\016unit_detection\030: \001(\0132!.MsgsSi"
    "mToClient.MsgUnitDetection\022=\n\020object_det"
    "ection\030; \001(\0132#.MsgsSimToClient.MsgObject"
    "Detection\022`\n\"population_concentration_de"
    "tection\030< \001(\01324.MsgsSimToClient.MsgPopul"
    "ationConcentrationDetection\022N\n\031populatio"
    "n_flow_detection\030= \001(\0132+.MsgsSimToClient"
    ".MsgPopulationFlowDetection\022(\n\nunit_orde"
    "r\030> \001(\0132\024.Common.MsgUnitOrder\022.\n\rautomat"
    "_order\030? \001(\0132\027.Common.MsgAutomatOrder\0224\n"
    "\020population_order\030@ \001(\0132\032.Common.MsgPopu"
    "lationOrder\022;\n\017object_creation\030A \001(\0132\".M"
    "sgsSimToClient.MsgObjectCreation\022A\n\022obje"
    "ct_destruction\030B \001(\0132%.MsgsSimToClient.M"
    "sgObjectDestruction\0227\n\robject_update\030C \001"
    "(\0132 .MsgsSimToClient.MsgObjectUpdate\022N\n\031"
    "object_knowledge_creation\030D \001(\0132+.MsgsSi"
    "mToClient.MsgObjectKnowledgeCreation\022J\n\027"
    "object_knowledge_update\030E \001(\0132).MsgsSimT"
    "oClient.MsgObjectKnowledgeUpdate\022T\n\034obje"
    "ct_knowledge_destruction\030F \001(\0132..MsgsSim"
    "ToClient.MsgObjectKnowledgeDestruction\022U"
    "\n\035log_medical_handling_creation\030G \001(\0132.."
    "MsgsSimToClient.MsgLogMedicalHandlingCre"
    "ation\022Q\n\033log_medical_handling_update\030H \001"
    "(\0132,.MsgsSimToClient.MsgLogMedicalHandli"
    "ngUpdate\022[\n log_medical_handling_destruc"
    "tion\030I \001(\01321.MsgsSimToClient.MsgLogMedic"
    "alHandlingDestruction\022>\n\021log_medical_sta"
    "te\030J \001(\0132#.MsgsSimToClient.MsgLogMedical"
    "State\022]\n!log_maintenance_handling_creati"
    "on\030K \001(\01322.MsgsSimToClient.MsgLogMainten"
    "anceHandlingCreation\022Y\n\037log_maintenance_"
    "handling_update\030L \001(\01320.MsgsSimToClient."
    "MsgLogMaintenanceHandlingUpdate\022c\n$log_m"
    "aintenance_handling_destruction\030M \001(\01325."
    "MsgsSimToClient.MsgLogMaintenanceHandlin"
    "gDestruction\022F\n\025log_maintenance_state\030N "
    "\001(\0132\'.MsgsSimToClient.MsgLogMaintenanceS"
    "tate\022S\n\034log_supply_handling_creation\030O \001"
    "(\0132-.MsgsSimToClient.MsgLogSupplyHandlin"
    "gCreation\022O\n\032log_supply_handling_update\030"
    "P \001(\0132+.MsgsSimToClient.MsgLogSupplyHand"
    "lingUpdate\022Y\n\037log_supply_handling_destru"
    "ction\030Q \001(\01320.MsgsSimToClient.MsgLogSupp"
    "lyHandlingDestruction\022<\n\020log_supply_stat"
    "e\030R \001(\0132\".MsgsSimToClient.MsgLogSupplySt"
    "ate\022>\n\021log_supply_quotas\030S \001(\0132#.MsgsSim"
    "ToClient.MsgLogSupplyQuotas\022C\n\023populatio"
    "n_creation\030T \001(\0132&.MsgsSimToClient.MsgPo"
    "pulationCreation\022?\n\021population_update\030U "
    "\001(\0132$.MsgsSimToClient.MsgPopulationUpdat"
    "e\022^\n!population_concentration_creation\030V"
    " \001(\01323.MsgsSimToClient.MsgPopulationConc"
    "entrationCreation\022d\n$population_concentr"
    "ation_destruction\030W \001(\01326.MsgsSimToClien"
    "t.MsgPopulationConcentrationDestruction\022"
    "Z\n\037population_concentration_update\030X \001(\013"
    "21.MsgsSimToClient.MsgPopulationConcentr"
    "ationUpdate\022L\n\030population_flow_creation\030"
    "Y \001(\0132*.MsgsSimToClient.MsgPopulationFlo"
    "wCreation\022R\n\033population_flow_destruction"
    "\030Z \001(\0132-.MsgsSimToClient.MsgPopulationFl"
    "owDestruction\022H\n\026population_flow_update\030"
    "[ \001(\0132(.MsgsSimToClient.MsgPopulationFlo"
    "wUpdate\022V\n\035population_knowledge_creation"
    "\030\\ \001(\0132/.MsgsSimToClient.MsgPopulationKn"
    "owledgeCreation\022R\n\033population_knowledge_"
    "update\030] \001(\0132-.MsgsSimToClient.MsgPopula"
    "tionKnowledgeUpdate\022\\\n population_knowle"
    "dge_destruction\030^ \001(\01322.MsgsSimToClient."
    "MsgPopulationKnowledgeDestruction\022q\n+pop"
    "ulation_concentration_knowledge_creation"
    "\030_ \001(\0132<.MsgsSimToClient.MsgPopulationCo"
    "ncentrationKnowledgeCreation\022w\n.populati"
    "on_concentration_knowledge_destruction\030`"
    " \001(\0132?.MsgsSimToClient.MsgPopulationConc"
    "entrationKnowledgeDestruction\022m\n)populat"
    "ion_concentration_knowledge_update\030a \001(\013"
    "2:.MsgsSimToClient.MsgPopulationConcentr"
    "ationKnowledgeUpdate\022_\n\"population_flow_"
    "knowledge_creation\030b \001(\01323.MsgsSimToClie"
    "nt.MsgPopulationFlowKnowledgeCreation\022e\n"
    "%population_flow_knowledge_destruction\030c"
    " \001(\01326.MsgsSimToClient.MsgPopulationFlow"
    "KnowledgeDestruction\022[\n population_flow_"
    "knowledge_update\030d \001(\01321.MsgsSimToClient"
    ".MsgPopulationFlowKnowledgeUpdate\0227\n\rfol"
    "k_creation\030e \001(\0132 .MsgsSimToClient.MsgFo"
    "lkCreation\022>\n\021folk_graph_update\030f \001(\0132#."
    "MsgsSimToClient.MsgFolkGraphUpdate\022K\n\030co"
    "ntrol_global_meteo_ack\030g \001(\0132).MsgsSimTo"
    "Client.MsgControlGlobalMeteoAck\022I\n\027contr"
    "ol_local_meteo_ack\030h \001(\0132(.MsgsSimToClie"
    "nt.MsgControlLocalMeteoAck\022U\n\035control_ch"
    "eckpoint_save_begin\030i \001(\0132..MsgsSimToCli"
    "ent.MsgControlCheckPointSaveBegin\022b\n$con"
    "trol_checkpoint_set_frequency_ack\030j \001(\0132"
    "4.MsgsSimToClient.MsgControlCheckPointSe"
    "tFrequencyAck\022X\n\037control_checkpoint_save"
    "_now_ack\030k \001(\0132/.MsgsSimToClient.MsgCont"
    "rolCheckPointSaveNowAck\022Z\n control_send_"
    "current_state_begin\030l \001(\01320.MsgsSimToCli"
    "ent.MsgControlSendCurrentStateBegin\022V\n\036c"
    "ontrol_send_current_state_end\030m \001(\0132..Ms"
    "gsSimToClient.MsgControlSendCurrentState"
    "End\0229\n\016urban_creation\030n \001(\0132!.MsgsSimToC"
    "lient.MsgUrbanCreation\022L\n\030urban_knowledg"
    "e_creation\030o \001(\0132*.MsgsSimToClient.MsgUr"
    "banKnowledgeCreation\022H\n\026urban_knowledge_"
    "update\030p \001(\0132(.MsgsSimToClient.MsgUrbanK"
    "nowledgeUpdate\022R\n\033urban_knowledge_destru"
    "ction\030q \001(\0132-.MsgsSimToClient.MsgUrbanKn"
    "owledgeDestruction\022-\n\016stock_resource\030r \001"
    "(\0132\025.Common.StockResource\022;\n\017urban_detec"
    "tion\030s \001(\0132\".MsgsSimToClient.MsgUrbanDet"
    "ection\022B\n\023knowledge_group_ack\030t \001(\0132%.Ms"
    "gsSimToClient.MsgKnowledgeGroupAck\022L\n\030kn"
    "owledge_group_creation\030u \001(\0132*.MsgsSimTo"
    "Client.MsgKnowledgeGroupCreation\022H\n\026know"
    "ledge_group_update\030v \001(\0132(.MsgsSimToClie"
    "nt.MsgKnowledgeGroupUpdate\022S\n\034knowledge_"
    "group_creation_ack\030w \001(\0132-.MsgsSimToClie"
    "nt.MsgKnowledgeGroupCreationAck\022O\n\032knowl"
    "edge_group_update_ack\030x \001(\0132+.MsgsSimToC"
    "lient.MsgKnowledgeGroupUpdateAck\022R\n\033know"
    "ledge_group_destruction\030y \001(\0132-.MsgsSimT"
    "oClient.MsgKnowledgeGroupDestruction\022R\n\034"
    "action_create_fire_order_ack\030z \001(\0132,.Msg"
    "sSimToClient.MsgActionCreateFireOrderAck"
    "\022D\n\024control_global_meteo\030{ \001(\0132&.MsgsSim"
    "ToClient.MsgControlGlobalMeteo\022S\n\034contro"
    "l_local_meteo_creation\030| \001(\0132-.MsgsSimTo"
    "Client.MsgControlLocalMeteoCreation\022Y\n\037c"
    "ontrol_local_meteo_destruction\030} \001(\01320.M"
    "sgsSimToClient.MsgControlLocalMeteoDestr"
    "uction*\217\002\n\033EnumLogSupplyHandlingStatus\022\035"
    "\n\031convoi_en_attente_camions\020\001\022\027\n\023convoi_"
    "constitution\020\002\022,\n(convoi_deplacement_ver"
    "s_point_chargement\020\003\022\025\n\021convoi_chargemen"
    "t\020\004\022.\n*convoi_deplacement_vers_point_dec"
    "hargement\020\005\022\027\n\023convoi_dechargement\020\006\022\035\n\031"
    "convoi_deplacement_retour\020\007\022\013\n\007termine\020\010"
    "*V\n\033EnumUnitIdentificationLevel\022\016\n\nident"
    "ifiee\020\000\022\014\n\010reconnue\020\001\022\014\n\010detectee\020\002\022\013\n\007s"
    "ignale\020\003*W\n\016EnumReportType\022\013\n\007message\020\000\022"
    "\017\n\013operationel\020\001\022\032\n\026evenement_exceptionn"
    "el\020\002\022\013\n\007warning\020\003", 35617);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimToClient.proto", &protobuf_RegisterTypes);
  OrderAck::default_instance_ = new OrderAck();
  MsgUnitOrderAck::default_instance_ = new MsgUnitOrderAck();
  MsgAutomatOrderAck::default_instance_ = new MsgAutomatOrderAck();
  MsgPopulationOrderAck::default_instance_ = new MsgPopulationOrderAck();
  MsgFragOrderAck::default_instance_ = new MsgFragOrderAck();
  MsgSetAutomatModeAck::default_instance_ = new MsgSetAutomatModeAck();
  UnitActionAck::default_instance_ = new UnitActionAck();
  MsgUnitCreationRequestAck::default_instance_ = new MsgUnitCreationRequestAck();
  MsgMagicActionAck::default_instance_ = new MsgMagicActionAck();
  MsgUnitMagicActionAck::default_instance_ = new MsgUnitMagicActionAck();
  MsgObjectMagicActionAck::default_instance_ = new MsgObjectMagicActionAck();
  MsgPopulationMagicActionAck::default_instance_ = new MsgPopulationMagicActionAck();
  MsgChangeDiplomacyAck::default_instance_ = new MsgChangeDiplomacyAck();
  HierarchyModificationAck::default_instance_ = new HierarchyModificationAck();
  MsgAutomatChangeKnowledgeGroupAck::default_instance_ = new MsgAutomatChangeKnowledgeGroupAck();
  MsgAutomatChangeLogisticLinksAck::default_instance_ = new MsgAutomatChangeLogisticLinksAck();
  MsgAutomatChangeSuperiorAck::default_instance_ = new MsgAutomatChangeSuperiorAck();
  MsgUnitChangeSuperiorAck::default_instance_ = new MsgUnitChangeSuperiorAck();
  MsgLogSupplyPushFlowAck::default_instance_ = new MsgLogSupplyPushFlowAck();
  MsgLogSupplyChangeQuotasAck::default_instance_ = new MsgLogSupplyChangeQuotasAck();
  MsgActionCreateFireOrderAck::default_instance_ = new MsgActionCreateFireOrderAck();
  MsgControlInformation::default_instance_ = new MsgControlInformation();
  MsgControlProfilingInformation::default_instance_ = new MsgControlProfilingInformation();
  MsgControlBeginTick::default_instance_ = new MsgControlBeginTick();
  MsgControlEndTick::default_instance_ = new MsgControlEndTick();
  ControlAck::default_instance_ = new ControlAck();
  MsgControlDatetimeChangeAck::default_instance_ = new MsgControlDatetimeChangeAck();
  MsgControlChangeTimeFactorAck::default_instance_ = new MsgControlChangeTimeFactorAck();
  MsgControlStopAck::default_instance_ = new MsgControlStopAck();
  MsgControlPauseAck::default_instance_ = new MsgControlPauseAck();
  MsgControlResumeAck::default_instance_ = new MsgControlResumeAck();
  MsgTeamCreation::default_instance_ = new MsgTeamCreation();
  MsgAutomatCreation_oid_parent::default_instance_ = new MsgAutomatCreation_oid_parent();
  MsgAutomatCreation::default_instance_ = new MsgAutomatCreation();
  RulesOfEngagement::default_instance_ = new RulesOfEngagement();
  ForceRatio::default_instance_ = new ForceRatio();
  MsgAutomatAttributes::default_instance_ = new MsgAutomatAttributes();
  MsgUnitCreation::default_instance_ = new MsgUnitCreation();
  BorrowedEquipments::default_instance_ = new BorrowedEquipments();
  BorrowedEquipments_BorrowedEquipment::default_instance_ = new BorrowedEquipments_BorrowedEquipment();
  LentEquipments::default_instance_ = new LentEquipments();
  LentEquipments_LentEquipment::default_instance_ = new LentEquipments_LentEquipment();
  ResourceDotations::default_instance_ = new ResourceDotations();
  ResourceDotations_ResourceDotation::default_instance_ = new ResourceDotations_ResourceDotation();
  EquipmentDotations::default_instance_ = new EquipmentDotations();
  EquipmentDotations_EquipmentDotation::default_instance_ = new EquipmentDotations_EquipmentDotation();
  HumanDotations::default_instance_ = new HumanDotations();
  HumanDotations_HumanDotation::default_instance_ = new HumanDotations_HumanDotation();
  ContaminationState::default_instance_ = new ContaminationState();
  Communication::default_instance_ = new Communication();
  MsgUnitAttributes::default_instance_ = new MsgUnitAttributes();
  MsgUnitPathFind::default_instance_ = new MsgUnitPathFind();
  MsgUnitDestruction::default_instance_ = new MsgUnitDestruction();
  MsgUnitEnvironmentType::default_instance_ = new MsgUnitEnvironmentType();
  MsgUnitKnowledgeCreation::default_instance_ = new MsgUnitKnowledgeCreation();
  AutomatPerception::default_instance_ = new AutomatPerception();
  SeqOfAutomatPerception::default_instance_ = new SeqOfAutomatPerception();
  MsgUnitKnowledgeUpdate::default_instance_ = new MsgUnitKnowledgeUpdate();
  MsgUnitKnowledgeDestruction::default_instance_ = new MsgUnitKnowledgeDestruction();
  MsgStartUnitFire_target::default_instance_ = new MsgStartUnitFire_target();
  MsgStartUnitFire::default_instance_ = new MsgStartUnitFire();
  UnitHumanFireDamage::default_instance_ = new UnitHumanFireDamage();
  SeqOfUnitHumanFireDamage::default_instance_ = new SeqOfUnitHumanFireDamage();
  MsgUnitEquipmentFireDamage::default_instance_ = new MsgUnitEquipmentFireDamage();
  SeqOfUnitEquipmentFireDamage::default_instance_ = new SeqOfUnitEquipmentFireDamage();
  MsgUnitFireDamages::default_instance_ = new MsgUnitFireDamages();
  MsgUnitsFireDamages::default_instance_ = new MsgUnitsFireDamages();
  MsgPopulationFireDamages::default_instance_ = new MsgPopulationFireDamages();
  MsgPopulationsFireDamages::default_instance_ = new MsgPopulationsFireDamages();
  MsgStopUnitFire::default_instance_ = new MsgStopUnitFire();
  MsgStartPopulationFire::default_instance_ = new MsgStartPopulationFire();
  MsgStopPopulationFire::default_instance_ = new MsgStopPopulationFire();
  MsgExplosion::default_instance_ = new MsgExplosion();
  MsgStartFireEffect::default_instance_ = new MsgStartFireEffect();
  MsgStopFireEffect::default_instance_ = new MsgStopFireEffect();
  MsgReport::default_instance_ = new MsgReport();
  MsgInvalidateReport::default_instance_ = new MsgInvalidateReport();
  MsgTrace::default_instance_ = new MsgTrace();
  MsgDecisionalState::default_instance_ = new MsgDecisionalState();
  MsgDebugPoints::default_instance_ = new MsgDebugPoints();
  SeqOfHeading::default_instance_ = new SeqOfHeading();
  MsgVisionCone::default_instance_ = new MsgVisionCone();
  SeqOfVisionCone::default_instance_ = new SeqOfVisionCone();
  MsgUnitVisionCones::default_instance_ = new MsgUnitVisionCones();
  MsgUnitDetection::default_instance_ = new MsgUnitDetection();
  MsgObjectDetection::default_instance_ = new MsgObjectDetection();
  MsgPopulationConcentrationDetection::default_instance_ = new MsgPopulationConcentrationDetection();
  MsgPopulationFlowDetection::default_instance_ = new MsgPopulationFlowDetection();
  MsgObjectCreation::default_instance_ = new MsgObjectCreation();
  MsgObjectDestruction::default_instance_ = new MsgObjectDestruction();
  MsgObjectUpdate::default_instance_ = new MsgObjectUpdate();
  MsgObjectKnowledgeCreation::default_instance_ = new MsgObjectKnowledgeCreation();
  MsgObjectKnowledgeUpdate::default_instance_ = new MsgObjectKnowledgeUpdate();
  MsgObjectKnowledgeDestruction::default_instance_ = new MsgObjectKnowledgeDestruction();
  MsgUrbanKnowledgeCreation::default_instance_ = new MsgUrbanKnowledgeCreation();
  MsgUrbanKnowledgeUpdate::default_instance_ = new MsgUrbanKnowledgeUpdate();
  MsgUrbanKnowledgeDestruction::default_instance_ = new MsgUrbanKnowledgeDestruction();
  MsgLogMedicalHandlingCreation::default_instance_ = new MsgLogMedicalHandlingCreation();
  MsgLogMedicalHandlingUpdate::default_instance_ = new MsgLogMedicalHandlingUpdate();
  MsgLogMedicalHandlingDestruction::default_instance_ = new MsgLogMedicalHandlingDestruction();
  MsgLogMedicalEquipmentAvailability::default_instance_ = new MsgLogMedicalEquipmentAvailability();
  SeqOfLogMedicalEquipmentAvailability::default_instance_ = new SeqOfLogMedicalEquipmentAvailability();
  MsgLogMedicalState::default_instance_ = new MsgLogMedicalState();
  MsgLogMaintenanceHandlingCreation::default_instance_ = new MsgLogMaintenanceHandlingCreation();
  MsgLogMaintenanceHandlingUpdate::default_instance_ = new MsgLogMaintenanceHandlingUpdate();
  MsgLogMaintenanceHandlingDestruction::default_instance_ = new MsgLogMaintenanceHandlingDestruction();
  MsgLogMaintenanceEquipmentAvailability::default_instance_ = new MsgLogMaintenanceEquipmentAvailability();
  SeqOfLogMaintenanceEquipmentAvailability::default_instance_ = new SeqOfLogMaintenanceEquipmentAvailability();
  MsgLogMaintenanceState::default_instance_ = new MsgLogMaintenanceState();
  MsgLogSupplyHandlingCreation::default_instance_ = new MsgLogSupplyHandlingCreation();
  MsgDotationQuery::default_instance_ = new MsgDotationQuery();
  SeqOfDotationQuery::default_instance_ = new SeqOfDotationQuery();
  MsgLogSupplyHandlingUpdate::default_instance_ = new MsgLogSupplyHandlingUpdate();
  MsgLogSupplyHandlingDestruction::default_instance_ = new MsgLogSupplyHandlingDestruction();
  MsgLogSupplyEquimentAvailability::default_instance_ = new MsgLogSupplyEquimentAvailability();
  SeqOfLogSupplyEquimentAvailability::default_instance_ = new SeqOfLogSupplyEquimentAvailability();
  MsgLogSupplyState::default_instance_ = new MsgLogSupplyState();
  MsgLogSupplyQuotas::default_instance_ = new MsgLogSupplyQuotas();
  MsgPopulationCreation::default_instance_ = new MsgPopulationCreation();
  MsgPopulationUpdate::default_instance_ = new MsgPopulationUpdate();
  MsgPopulationConcentrationCreation::default_instance_ = new MsgPopulationConcentrationCreation();
  MsgPopulationConcentrationDestruction::default_instance_ = new MsgPopulationConcentrationDestruction();
  MsgPopulationConcentrationUpdate::default_instance_ = new MsgPopulationConcentrationUpdate();
  MsgPopulationFlowCreation::default_instance_ = new MsgPopulationFlowCreation();
  MsgPopulationFlowDestruction::default_instance_ = new MsgPopulationFlowDestruction();
  MsgPopulationFlowUpdate::default_instance_ = new MsgPopulationFlowUpdate();
  MsgPopulationKnowledgeCreation::default_instance_ = new MsgPopulationKnowledgeCreation();
  MsgPopulationKnowledgeUpdate::default_instance_ = new MsgPopulationKnowledgeUpdate();
  MsgPopulationKnowledgeDestruction::default_instance_ = new MsgPopulationKnowledgeDestruction();
  MsgPopulationConcentrationKnowledgeCreation::default_instance_ = new MsgPopulationConcentrationKnowledgeCreation();
  MsgPopulationConcentrationKnowledgeDestruction::default_instance_ = new MsgPopulationConcentrationKnowledgeDestruction();
  MsgPopulationConcentrationKnowledgeUpdate::default_instance_ = new MsgPopulationConcentrationKnowledgeUpdate();
  MsgPopulationFlowKnowledgeCreation::default_instance_ = new MsgPopulationFlowKnowledgeCreation();
  MsgFlowPart::default_instance_ = new MsgFlowPart();
  SeqOfFlowPart::default_instance_ = new SeqOfFlowPart();
  MsgPopulationFlowKnowledgeDestruction::default_instance_ = new MsgPopulationFlowKnowledgeDestruction();
  MsgPopulationFlowKnowledgeUpdate::default_instance_ = new MsgPopulationFlowKnowledgeUpdate();
  MsgFolkCreation_profiles::default_instance_ = new MsgFolkCreation_profiles();
  MsgFolkCreation_activities::default_instance_ = new MsgFolkCreation_activities();
  MsgFolkCreation::default_instance_ = new MsgFolkCreation();
  MsgFolkGraphEdgeUpdate::default_instance_ = new MsgFolkGraphEdgeUpdate();
  MsgFolkGraphUpdate::default_instance_ = new MsgFolkGraphUpdate();
  MsgControlGlobalMeteoAck::default_instance_ = new MsgControlGlobalMeteoAck();
  MsgControlLocalMeteoAck::default_instance_ = new MsgControlLocalMeteoAck();
  MsgControlCheckPointSetFrequencyAck::default_instance_ = new MsgControlCheckPointSetFrequencyAck();
  MsgControlCheckPointSaveNowAck::default_instance_ = new MsgControlCheckPointSaveNowAck();
  MsgControlCheckPointSaveBegin::default_instance_ = new MsgControlCheckPointSaveBegin();
  MsgControlCheckPointSaveBeginAck::default_instance_ = new MsgControlCheckPointSaveBeginAck();
  MsgControlCheckPointSaveEnd::default_instance_ = new MsgControlCheckPointSaveEnd();
  MsgControlSendCurrentStateBegin::default_instance_ = new MsgControlSendCurrentStateBegin();
  MsgControlSendCurrentStateEnd::default_instance_ = new MsgControlSendCurrentStateEnd();
  MsgUrbanAttributeVegetation::default_instance_ = new MsgUrbanAttributeVegetation();
  MsgUrbanAttributeSoil::default_instance_ = new MsgUrbanAttributeSoil();
  MsgUrbanAttributeArchitecture::default_instance_ = new MsgUrbanAttributeArchitecture();
  MsgColorRGBA::default_instance_ = new MsgColorRGBA();
  MagicActionCreateUrban::default_instance_ = new MagicActionCreateUrban();
  MagicActionUpdateUrban::default_instance_ = new MagicActionUpdateUrban();
  MagicActionDestroyUrban::default_instance_ = new MagicActionDestroyUrban();
  MsgUrbanMagicAction::default_instance_ = new MsgUrbanMagicAction();
  MsgUrbanMagicActionAck::default_instance_ = new MsgUrbanMagicActionAck();
  MsgUrbanAttributes::default_instance_ = new MsgUrbanAttributes();
  MsgUrbanCreation::default_instance_ = new MsgUrbanCreation();
  MsgUrbanDetection::default_instance_ = new MsgUrbanDetection();
  MsgUrbanUpdate::default_instance_ = new MsgUrbanUpdate();
  MsgUrbanDestruction::default_instance_ = new MsgUrbanDestruction();
  MsgKnowledgeGroupCreation::default_instance_ = new MsgKnowledgeGroupCreation();
  MsgKnowledgeGroupUpdate::default_instance_ = new MsgKnowledgeGroupUpdate();
  KnowledgeGroupAck::default_instance_ = new KnowledgeGroupAck();
  MsgKnowledgeGroupAck::default_instance_ = new MsgKnowledgeGroupAck();
  MsgKnowledgeGroupCreationAck::default_instance_ = new MsgKnowledgeGroupCreationAck();
  MsgKnowledgeGroupUpdateAck::default_instance_ = new MsgKnowledgeGroupUpdateAck();
  MsgKnowledgeGroupDestruction::default_instance_ = new MsgKnowledgeGroupDestruction();
  MsgControlGlobalMeteo::default_instance_ = new MsgControlGlobalMeteo();
  MsgControlLocalMeteoCreation::default_instance_ = new MsgControlLocalMeteoCreation();
  MsgControlLocalMeteoDestruction::default_instance_ = new MsgControlLocalMeteoDestruction();
  MsgSimToClient::default_instance_ = new MsgSimToClient();
  MsgSimToClient_Content::default_instance_ = new MsgSimToClient_Content();
  OrderAck::default_instance_->InitAsDefaultInstance();
  MsgUnitOrderAck::default_instance_->InitAsDefaultInstance();
  MsgAutomatOrderAck::default_instance_->InitAsDefaultInstance();
  MsgPopulationOrderAck::default_instance_->InitAsDefaultInstance();
  MsgFragOrderAck::default_instance_->InitAsDefaultInstance();
  MsgSetAutomatModeAck::default_instance_->InitAsDefaultInstance();
  UnitActionAck::default_instance_->InitAsDefaultInstance();
  MsgUnitCreationRequestAck::default_instance_->InitAsDefaultInstance();
  MsgMagicActionAck::default_instance_->InitAsDefaultInstance();
  MsgUnitMagicActionAck::default_instance_->InitAsDefaultInstance();
  MsgObjectMagicActionAck::default_instance_->InitAsDefaultInstance();
  MsgPopulationMagicActionAck::default_instance_->InitAsDefaultInstance();
  MsgChangeDiplomacyAck::default_instance_->InitAsDefaultInstance();
  HierarchyModificationAck::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeKnowledgeGroupAck::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeLogisticLinksAck::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeSuperiorAck::default_instance_->InitAsDefaultInstance();
  MsgUnitChangeSuperiorAck::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyPushFlowAck::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyChangeQuotasAck::default_instance_->InitAsDefaultInstance();
  MsgActionCreateFireOrderAck::default_instance_->InitAsDefaultInstance();
  MsgControlInformation::default_instance_->InitAsDefaultInstance();
  MsgControlProfilingInformation::default_instance_->InitAsDefaultInstance();
  MsgControlBeginTick::default_instance_->InitAsDefaultInstance();
  MsgControlEndTick::default_instance_->InitAsDefaultInstance();
  ControlAck::default_instance_->InitAsDefaultInstance();
  MsgControlDatetimeChangeAck::default_instance_->InitAsDefaultInstance();
  MsgControlChangeTimeFactorAck::default_instance_->InitAsDefaultInstance();
  MsgControlStopAck::default_instance_->InitAsDefaultInstance();
  MsgControlPauseAck::default_instance_->InitAsDefaultInstance();
  MsgControlResumeAck::default_instance_->InitAsDefaultInstance();
  MsgTeamCreation::default_instance_->InitAsDefaultInstance();
  MsgAutomatCreation_oid_parent::default_instance_->InitAsDefaultInstance();
  MsgAutomatCreation::default_instance_->InitAsDefaultInstance();
  RulesOfEngagement::default_instance_->InitAsDefaultInstance();
  ForceRatio::default_instance_->InitAsDefaultInstance();
  MsgAutomatAttributes::default_instance_->InitAsDefaultInstance();
  MsgUnitCreation::default_instance_->InitAsDefaultInstance();
  BorrowedEquipments::default_instance_->InitAsDefaultInstance();
  BorrowedEquipments_BorrowedEquipment::default_instance_->InitAsDefaultInstance();
  LentEquipments::default_instance_->InitAsDefaultInstance();
  LentEquipments_LentEquipment::default_instance_->InitAsDefaultInstance();
  ResourceDotations::default_instance_->InitAsDefaultInstance();
  ResourceDotations_ResourceDotation::default_instance_->InitAsDefaultInstance();
  EquipmentDotations::default_instance_->InitAsDefaultInstance();
  EquipmentDotations_EquipmentDotation::default_instance_->InitAsDefaultInstance();
  HumanDotations::default_instance_->InitAsDefaultInstance();
  HumanDotations_HumanDotation::default_instance_->InitAsDefaultInstance();
  ContaminationState::default_instance_->InitAsDefaultInstance();
  Communication::default_instance_->InitAsDefaultInstance();
  MsgUnitAttributes::default_instance_->InitAsDefaultInstance();
  MsgUnitPathFind::default_instance_->InitAsDefaultInstance();
  MsgUnitDestruction::default_instance_->InitAsDefaultInstance();
  MsgUnitEnvironmentType::default_instance_->InitAsDefaultInstance();
  MsgUnitKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  AutomatPerception::default_instance_->InitAsDefaultInstance();
  SeqOfAutomatPerception::default_instance_->InitAsDefaultInstance();
  MsgUnitKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgUnitKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgStartUnitFire_target::default_instance_->InitAsDefaultInstance();
  MsgStartUnitFire::default_instance_->InitAsDefaultInstance();
  UnitHumanFireDamage::default_instance_->InitAsDefaultInstance();
  SeqOfUnitHumanFireDamage::default_instance_->InitAsDefaultInstance();
  MsgUnitEquipmentFireDamage::default_instance_->InitAsDefaultInstance();
  SeqOfUnitEquipmentFireDamage::default_instance_->InitAsDefaultInstance();
  MsgUnitFireDamages::default_instance_->InitAsDefaultInstance();
  MsgUnitsFireDamages::default_instance_->InitAsDefaultInstance();
  MsgPopulationFireDamages::default_instance_->InitAsDefaultInstance();
  MsgPopulationsFireDamages::default_instance_->InitAsDefaultInstance();
  MsgStopUnitFire::default_instance_->InitAsDefaultInstance();
  MsgStartPopulationFire::default_instance_->InitAsDefaultInstance();
  MsgStopPopulationFire::default_instance_->InitAsDefaultInstance();
  MsgExplosion::default_instance_->InitAsDefaultInstance();
  MsgStartFireEffect::default_instance_->InitAsDefaultInstance();
  MsgStopFireEffect::default_instance_->InitAsDefaultInstance();
  MsgReport::default_instance_->InitAsDefaultInstance();
  MsgInvalidateReport::default_instance_->InitAsDefaultInstance();
  MsgTrace::default_instance_->InitAsDefaultInstance();
  MsgDecisionalState::default_instance_->InitAsDefaultInstance();
  MsgDebugPoints::default_instance_->InitAsDefaultInstance();
  SeqOfHeading::default_instance_->InitAsDefaultInstance();
  MsgVisionCone::default_instance_->InitAsDefaultInstance();
  SeqOfVisionCone::default_instance_->InitAsDefaultInstance();
  MsgUnitVisionCones::default_instance_->InitAsDefaultInstance();
  MsgUnitDetection::default_instance_->InitAsDefaultInstance();
  MsgObjectDetection::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationDetection::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowDetection::default_instance_->InitAsDefaultInstance();
  MsgObjectCreation::default_instance_->InitAsDefaultInstance();
  MsgObjectDestruction::default_instance_->InitAsDefaultInstance();
  MsgObjectUpdate::default_instance_->InitAsDefaultInstance();
  MsgObjectKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  MsgObjectKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgObjectKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgUrbanKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  MsgUrbanKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgUrbanKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalHandlingCreation::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalHandlingUpdate::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalHandlingDestruction::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalEquipmentAvailability::default_instance_->InitAsDefaultInstance();
  SeqOfLogMedicalEquipmentAvailability::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalState::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenanceHandlingCreation::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenanceHandlingUpdate::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenanceHandlingDestruction::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenanceEquipmentAvailability::default_instance_->InitAsDefaultInstance();
  SeqOfLogMaintenanceEquipmentAvailability::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenanceState::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyHandlingCreation::default_instance_->InitAsDefaultInstance();
  MsgDotationQuery::default_instance_->InitAsDefaultInstance();
  SeqOfDotationQuery::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyHandlingUpdate::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyHandlingDestruction::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyEquimentAvailability::default_instance_->InitAsDefaultInstance();
  SeqOfLogSupplyEquimentAvailability::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyState::default_instance_->InitAsDefaultInstance();
  MsgLogSupplyQuotas::default_instance_->InitAsDefaultInstance();
  MsgPopulationCreation::default_instance_->InitAsDefaultInstance();
  MsgPopulationUpdate::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationCreation::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationDestruction::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationUpdate::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowCreation::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowDestruction::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowUpdate::default_instance_->InitAsDefaultInstance();
  MsgPopulationKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  MsgPopulationKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgPopulationKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgPopulationConcentrationKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowKnowledgeCreation::default_instance_->InitAsDefaultInstance();
  MsgFlowPart::default_instance_->InitAsDefaultInstance();
  SeqOfFlowPart::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowKnowledgeDestruction::default_instance_->InitAsDefaultInstance();
  MsgPopulationFlowKnowledgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgFolkCreation_profiles::default_instance_->InitAsDefaultInstance();
  MsgFolkCreation_activities::default_instance_->InitAsDefaultInstance();
  MsgFolkCreation::default_instance_->InitAsDefaultInstance();
  MsgFolkGraphEdgeUpdate::default_instance_->InitAsDefaultInstance();
  MsgFolkGraphUpdate::default_instance_->InitAsDefaultInstance();
  MsgControlGlobalMeteoAck::default_instance_->InitAsDefaultInstance();
  MsgControlLocalMeteoAck::default_instance_->InitAsDefaultInstance();
  MsgControlCheckPointSetFrequencyAck::default_instance_->InitAsDefaultInstance();
  MsgControlCheckPointSaveNowAck::default_instance_->InitAsDefaultInstance();
  MsgControlCheckPointSaveBegin::default_instance_->InitAsDefaultInstance();
  MsgControlCheckPointSaveBeginAck::default_instance_->InitAsDefaultInstance();
  MsgControlCheckPointSaveEnd::default_instance_->InitAsDefaultInstance();
  MsgControlSendCurrentStateBegin::default_instance_->InitAsDefaultInstance();
  MsgControlSendCurrentStateEnd::default_instance_->InitAsDefaultInstance();
  MsgUrbanAttributeVegetation::default_instance_->InitAsDefaultInstance();
  MsgUrbanAttributeSoil::default_instance_->InitAsDefaultInstance();
  MsgUrbanAttributeArchitecture::default_instance_->InitAsDefaultInstance();
  MsgColorRGBA::default_instance_->InitAsDefaultInstance();
  MagicActionCreateUrban::default_instance_->InitAsDefaultInstance();
  MagicActionUpdateUrban::default_instance_->InitAsDefaultInstance();
  MagicActionDestroyUrban::default_instance_->InitAsDefaultInstance();
  MsgUrbanMagicAction::default_instance_->InitAsDefaultInstance();
  MsgUrbanMagicActionAck::default_instance_->InitAsDefaultInstance();
  MsgUrbanAttributes::default_instance_->InitAsDefaultInstance();
  MsgUrbanCreation::default_instance_->InitAsDefaultInstance();
  MsgUrbanDetection::default_instance_->InitAsDefaultInstance();
  MsgUrbanUpdate::default_instance_->InitAsDefaultInstance();
  MsgUrbanDestruction::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupCreation::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupUpdate::default_instance_->InitAsDefaultInstance();
  KnowledgeGroupAck::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupAck::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupCreationAck::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupUpdateAck::default_instance_->InitAsDefaultInstance();
  MsgKnowledgeGroupDestruction::default_instance_->InitAsDefaultInstance();
  MsgControlGlobalMeteo::default_instance_->InitAsDefaultInstance();
  MsgControlLocalMeteoCreation::default_instance_->InitAsDefaultInstance();
  MsgControlLocalMeteoDestruction::default_instance_->InitAsDefaultInstance();
  MsgSimToClient::default_instance_->InitAsDefaultInstance();
  MsgSimToClient_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SimToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SimToClient_2eproto {
  StaticDescriptorInitializer_SimToClient_2eproto() {
    protobuf_AddDesc_SimToClient_2eproto();
  }
} static_descriptor_initializer_SimToClient_2eproto_;

const ::google::protobuf::EnumDescriptor* EnumLogSupplyHandlingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumLogSupplyHandlingStatus_descriptor_;
}
bool EnumLogSupplyHandlingStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumUnitIdentificationLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumUnitIdentificationLevel_descriptor_;
}
bool EnumUnitIdentificationLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumReportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumReportType_descriptor_;
}
bool EnumReportType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OrderAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderAck_ErrorCode_descriptor_;
}
bool OrderAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderAck_ErrorCode OrderAck::no_error;
const OrderAck_ErrorCode OrderAck::error_invalid_unit;
const OrderAck_ErrorCode OrderAck::error_invalid_limit;
const OrderAck_ErrorCode OrderAck::error_invalid_lima;
const OrderAck_ErrorCode OrderAck::error_invalid_mission;
const OrderAck_ErrorCode OrderAck::error_invalid_mission_parameters;
const OrderAck_ErrorCode OrderAck::error_unit_cannot_receive_order;
const OrderAck_ErrorCode OrderAck::error_invalid_order_conduite;
const OrderAck_ErrorCode OrderAck::error_invalid_order_mission;
const OrderAck_ErrorCode OrderAck::error_invalid_order_initial;
const OrderAck_ErrorCode OrderAck::error_invalid_order_conduite_parameters;
const OrderAck_ErrorCode OrderAck::error_unit_surrendered;
const OrderAck_ErrorCode OrderAck::error_invalid_lima_function;
const OrderAck_ErrorCode OrderAck::ErrorCode_MIN;
const OrderAck_ErrorCode OrderAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

OrderAck::OrderAck() {
  SharedCtor();
}

void OrderAck::InitAsDefaultInstance() {
}

OrderAck::OrderAck(const OrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void OrderAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderAck::~OrderAck() {
  SharedDtor();
}

void OrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* OrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderAck_descriptor_;
}

const OrderAck& OrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

OrderAck* OrderAck::default_instance_ = NULL;

OrderAck* OrderAck::New() const {
  return new OrderAck;
}

void OrderAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    OrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void OrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderAck::MergeFrom(const OrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderAck::CopyFrom(const OrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderAck::IsInitialized() const {
  
  return true;
}

void OrderAck::Swap(OrderAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderAck_descriptor_;
  metadata.reflection = OrderAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitOrderAck::kOidFieldNumber;
const int MsgUnitOrderAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgUnitOrderAck::MsgUnitOrderAck() {
  SharedCtor();
}

void MsgUnitOrderAck::InitAsDefaultInstance() {
}

MsgUnitOrderAck::MsgUnitOrderAck(const MsgUnitOrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitOrderAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitOrderAck::~MsgUnitOrderAck() {
  SharedDtor();
}

void MsgUnitOrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitOrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitOrderAck_descriptor_;
}

const MsgUnitOrderAck& MsgUnitOrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitOrderAck* MsgUnitOrderAck::default_instance_ = NULL;

MsgUnitOrderAck* MsgUnitOrderAck::New() const {
  return new MsgUnitOrderAck;
}

void MsgUnitOrderAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitOrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::OrderAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::OrderAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitOrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitOrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitOrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitOrderAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitOrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitOrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitOrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitOrderAck::MergeFrom(const MsgUnitOrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitOrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitOrderAck::CopyFrom(const MsgUnitOrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitOrderAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgUnitOrderAck::Swap(MsgUnitOrderAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitOrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitOrderAck_descriptor_;
  metadata.reflection = MsgUnitOrderAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatOrderAck::kOidFieldNumber;
const int MsgAutomatOrderAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatOrderAck::MsgAutomatOrderAck() {
  SharedCtor();
}

void MsgAutomatOrderAck::InitAsDefaultInstance() {
}

MsgAutomatOrderAck::MsgAutomatOrderAck(const MsgAutomatOrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatOrderAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatOrderAck::~MsgAutomatOrderAck() {
  SharedDtor();
}

void MsgAutomatOrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAutomatOrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatOrderAck_descriptor_;
}

const MsgAutomatOrderAck& MsgAutomatOrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatOrderAck* MsgAutomatOrderAck::default_instance_ = NULL;

MsgAutomatOrderAck* MsgAutomatOrderAck::New() const {
  return new MsgAutomatOrderAck;
}

void MsgAutomatOrderAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatOrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::OrderAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::OrderAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatOrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatOrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatOrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatOrderAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatOrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatOrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatOrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatOrderAck::MergeFrom(const MsgAutomatOrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatOrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatOrderAck::CopyFrom(const MsgAutomatOrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatOrderAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgAutomatOrderAck::Swap(MsgAutomatOrderAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatOrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatOrderAck_descriptor_;
  metadata.reflection = MsgAutomatOrderAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationOrderAck::kOidFieldNumber;
const int MsgPopulationOrderAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgPopulationOrderAck::MsgPopulationOrderAck() {
  SharedCtor();
}

void MsgPopulationOrderAck::InitAsDefaultInstance() {
}

MsgPopulationOrderAck::MsgPopulationOrderAck(const MsgPopulationOrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationOrderAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationOrderAck::~MsgPopulationOrderAck() {
  SharedDtor();
}

void MsgPopulationOrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationOrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationOrderAck_descriptor_;
}

const MsgPopulationOrderAck& MsgPopulationOrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationOrderAck* MsgPopulationOrderAck::default_instance_ = NULL;

MsgPopulationOrderAck* MsgPopulationOrderAck::New() const {
  return new MsgPopulationOrderAck;
}

void MsgPopulationOrderAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationOrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::OrderAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::OrderAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationOrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationOrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationOrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationOrderAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationOrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationOrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationOrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationOrderAck::MergeFrom(const MsgPopulationOrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationOrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationOrderAck::CopyFrom(const MsgPopulationOrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationOrderAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationOrderAck::Swap(MsgPopulationOrderAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationOrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationOrderAck_descriptor_;
  metadata.reflection = MsgPopulationOrderAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFragOrderAck::kOidFieldNumber;
const int MsgFragOrderAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgFragOrderAck::MsgFragOrderAck() {
  SharedCtor();
}

void MsgFragOrderAck::InitAsDefaultInstance() {
}

MsgFragOrderAck::MsgFragOrderAck(const MsgFragOrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFragOrderAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFragOrderAck::~MsgFragOrderAck() {
  SharedDtor();
}

void MsgFragOrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFragOrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFragOrderAck_descriptor_;
}

const MsgFragOrderAck& MsgFragOrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFragOrderAck* MsgFragOrderAck::default_instance_ = NULL;

MsgFragOrderAck* MsgFragOrderAck::New() const {
  return new MsgFragOrderAck;
}

void MsgFragOrderAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFragOrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::OrderAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::OrderAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFragOrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFragOrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFragOrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFragOrderAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.OrderAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFragOrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFragOrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFragOrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFragOrderAck::MergeFrom(const MsgFragOrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFragOrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFragOrderAck::CopyFrom(const MsgFragOrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFragOrderAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgFragOrderAck::Swap(MsgFragOrderAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFragOrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFragOrderAck_descriptor_;
  metadata.reflection = MsgFragOrderAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgSetAutomatModeAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetAutomatModeAck_ErrorCode_descriptor_;
}
bool MsgSetAutomatModeAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgSetAutomatModeAck_ErrorCode MsgSetAutomatModeAck::no_error;
const MsgSetAutomatModeAck_ErrorCode MsgSetAutomatModeAck::error_invalid_unit;
const MsgSetAutomatModeAck_ErrorCode MsgSetAutomatModeAck::error_not_allowed;
const MsgSetAutomatModeAck_ErrorCode MsgSetAutomatModeAck::ErrorCode_MIN;
const MsgSetAutomatModeAck_ErrorCode MsgSetAutomatModeAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgSetAutomatModeAck::kOidFieldNumber;
const int MsgSetAutomatModeAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgSetAutomatModeAck::MsgSetAutomatModeAck() {
  SharedCtor();
}

void MsgSetAutomatModeAck::InitAsDefaultInstance() {
}

MsgSetAutomatModeAck::MsgSetAutomatModeAck(const MsgSetAutomatModeAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSetAutomatModeAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSetAutomatModeAck::~MsgSetAutomatModeAck() {
  SharedDtor();
}

void MsgSetAutomatModeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgSetAutomatModeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSetAutomatModeAck_descriptor_;
}

const MsgSetAutomatModeAck& MsgSetAutomatModeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgSetAutomatModeAck* MsgSetAutomatModeAck::default_instance_ = NULL;

MsgSetAutomatModeAck* MsgSetAutomatModeAck::New() const {
  return new MsgSetAutomatModeAck;
}

void MsgSetAutomatModeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSetAutomatModeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.MsgSetAutomatModeAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgSetAutomatModeAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgSetAutomatModeAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSetAutomatModeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSetAutomatModeAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.MsgSetAutomatModeAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSetAutomatModeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.MsgSetAutomatModeAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSetAutomatModeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.MsgSetAutomatModeAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSetAutomatModeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSetAutomatModeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSetAutomatModeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSetAutomatModeAck::MergeFrom(const MsgSetAutomatModeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSetAutomatModeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSetAutomatModeAck::CopyFrom(const MsgSetAutomatModeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSetAutomatModeAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgSetAutomatModeAck::Swap(MsgSetAutomatModeAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSetAutomatModeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSetAutomatModeAck_descriptor_;
  metadata.reflection = MsgSetAutomatModeAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* UnitActionAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitActionAck_ErrorCode_descriptor_;
}
bool UnitActionAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const UnitActionAck_ErrorCode UnitActionAck::no_error;
const UnitActionAck_ErrorCode UnitActionAck::error_invalid_unit;
const UnitActionAck_ErrorCode UnitActionAck::error_automate_embraye;
const UnitActionAck_ErrorCode UnitActionAck::error_invalid_attribute;
const UnitActionAck_ErrorCode UnitActionAck::error_unit_surrendered;
const UnitActionAck_ErrorCode UnitActionAck::ErrorCode_MIN;
const UnitActionAck_ErrorCode UnitActionAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

UnitActionAck::UnitActionAck() {
  SharedCtor();
}

void UnitActionAck::InitAsDefaultInstance() {
}

UnitActionAck::UnitActionAck(const UnitActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitActionAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitActionAck::~UnitActionAck() {
  SharedDtor();
}

void UnitActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitActionAck_descriptor_;
}

const UnitActionAck& UnitActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

UnitActionAck* UnitActionAck::default_instance_ = NULL;

UnitActionAck* UnitActionAck::New() const {
  return new UnitActionAck;
}

void UnitActionAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UnitActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitActionAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitActionAck::MergeFrom(const UnitActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitActionAck::CopyFrom(const UnitActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitActionAck::IsInitialized() const {
  
  return true;
}

void UnitActionAck::Swap(UnitActionAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitActionAck_descriptor_;
  metadata.reflection = UnitActionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitCreationRequestAck::kErrorFieldNumber;
#endif  // !_MSC_VER

MsgUnitCreationRequestAck::MsgUnitCreationRequestAck() {
  SharedCtor();
}

void MsgUnitCreationRequestAck::InitAsDefaultInstance() {
}

MsgUnitCreationRequestAck::MsgUnitCreationRequestAck(const MsgUnitCreationRequestAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitCreationRequestAck::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitCreationRequestAck::~MsgUnitCreationRequestAck() {
  SharedDtor();
}

void MsgUnitCreationRequestAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitCreationRequestAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitCreationRequestAck_descriptor_;
}

const MsgUnitCreationRequestAck& MsgUnitCreationRequestAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitCreationRequestAck* MsgUnitCreationRequestAck::default_instance_ = NULL;

MsgUnitCreationRequestAck* MsgUnitCreationRequestAck::New() const {
  return new MsgUnitCreationRequestAck;
}

void MsgUnitCreationRequestAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitCreationRequestAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.UnitActionAck.ErrorCode error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::UnitActionAck_ErrorCode_IsValid(value)) {
          set_error(static_cast< ::MsgsSimToClient::UnitActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitCreationRequestAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitCreationRequestAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.UnitActionAck.ErrorCode error = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitCreationRequestAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.UnitActionAck.ErrorCode error = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitCreationRequestAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.UnitActionAck.ErrorCode error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitCreationRequestAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitCreationRequestAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitCreationRequestAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitCreationRequestAck::MergeFrom(const MsgUnitCreationRequestAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitCreationRequestAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitCreationRequestAck::CopyFrom(const MsgUnitCreationRequestAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitCreationRequestAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgUnitCreationRequestAck::Swap(MsgUnitCreationRequestAck* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitCreationRequestAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitCreationRequestAck_descriptor_;
  metadata.reflection = MsgUnitCreationRequestAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgMagicActionAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMagicActionAck_ErrorCode_descriptor_;
}
bool MsgMagicActionAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgMagicActionAck_ErrorCode MsgMagicActionAck::no_error;
const MsgMagicActionAck_ErrorCode MsgMagicActionAck::error_invalid_attribute;
const MsgMagicActionAck_ErrorCode MsgMagicActionAck::ErrorCode_MIN;
const MsgMagicActionAck_ErrorCode MsgMagicActionAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgMagicActionAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgMagicActionAck::MsgMagicActionAck() {
  SharedCtor();
}

void MsgMagicActionAck::InitAsDefaultInstance() {
}

MsgMagicActionAck::MsgMagicActionAck(const MsgMagicActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMagicActionAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMagicActionAck::~MsgMagicActionAck() {
  SharedDtor();
}

void MsgMagicActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMagicActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMagicActionAck_descriptor_;
}

const MsgMagicActionAck& MsgMagicActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgMagicActionAck* MsgMagicActionAck::default_instance_ = NULL;

MsgMagicActionAck* MsgMagicActionAck::New() const {
  return new MsgMagicActionAck;
}

void MsgMagicActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMagicActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.MsgMagicActionAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgMagicActionAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgMagicActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMagicActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMagicActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.MsgMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMagicActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.MsgMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMagicActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.MsgMagicActionAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMagicActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMagicActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMagicActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMagicActionAck::MergeFrom(const MsgMagicActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMagicActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMagicActionAck::CopyFrom(const MsgMagicActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMagicActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgMagicActionAck::Swap(MsgMagicActionAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMagicActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMagicActionAck_descriptor_;
  metadata.reflection = MsgMagicActionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitMagicActionAck::kOidFieldNumber;
const int MsgUnitMagicActionAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgUnitMagicActionAck::MsgUnitMagicActionAck() {
  SharedCtor();
}

void MsgUnitMagicActionAck::InitAsDefaultInstance() {
}

MsgUnitMagicActionAck::MsgUnitMagicActionAck(const MsgUnitMagicActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitMagicActionAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitMagicActionAck::~MsgUnitMagicActionAck() {
  SharedDtor();
}

void MsgUnitMagicActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitMagicActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitMagicActionAck_descriptor_;
}

const MsgUnitMagicActionAck& MsgUnitMagicActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitMagicActionAck* MsgUnitMagicActionAck::default_instance_ = NULL;

MsgUnitMagicActionAck* MsgUnitMagicActionAck::New() const {
  return new MsgUnitMagicActionAck;
}

void MsgUnitMagicActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitMagicActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.UnitActionAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::UnitActionAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::UnitActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitMagicActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitMagicActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.UnitActionAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitMagicActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.UnitActionAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitMagicActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.UnitActionAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitMagicActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitMagicActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitMagicActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitMagicActionAck::MergeFrom(const MsgUnitMagicActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitMagicActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitMagicActionAck::CopyFrom(const MsgUnitMagicActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitMagicActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgUnitMagicActionAck::Swap(MsgUnitMagicActionAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitMagicActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitMagicActionAck_descriptor_;
  metadata.reflection = MsgUnitMagicActionAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgObjectMagicActionAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectMagicActionAck_ErrorCode_descriptor_;
}
bool MsgObjectMagicActionAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::no_error;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_invalid_object;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_invalid_id;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_invalid_camp;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_invalid_localisation;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_missing_specific_attributes;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::error_invalid_specific_attributes;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::ErrorCode_MIN;
const MsgObjectMagicActionAck_ErrorCode MsgObjectMagicActionAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgObjectMagicActionAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgObjectMagicActionAck::MsgObjectMagicActionAck() {
  SharedCtor();
}

void MsgObjectMagicActionAck::InitAsDefaultInstance() {
}

MsgObjectMagicActionAck::MsgObjectMagicActionAck(const MsgObjectMagicActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectMagicActionAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectMagicActionAck::~MsgObjectMagicActionAck() {
  SharedDtor();
}

void MsgObjectMagicActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgObjectMagicActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectMagicActionAck_descriptor_;
}

const MsgObjectMagicActionAck& MsgObjectMagicActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectMagicActionAck* MsgObjectMagicActionAck::default_instance_ = NULL;

MsgObjectMagicActionAck* MsgObjectMagicActionAck::New() const {
  return new MsgObjectMagicActionAck;
}

void MsgObjectMagicActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectMagicActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.MsgObjectMagicActionAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgObjectMagicActionAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgObjectMagicActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectMagicActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectMagicActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.MsgObjectMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectMagicActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.MsgObjectMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectMagicActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.MsgObjectMagicActionAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectMagicActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectMagicActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectMagicActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectMagicActionAck::MergeFrom(const MsgObjectMagicActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectMagicActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectMagicActionAck::CopyFrom(const MsgObjectMagicActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectMagicActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgObjectMagicActionAck::Swap(MsgObjectMagicActionAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectMagicActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectMagicActionAck_descriptor_;
  metadata.reflection = MsgObjectMagicActionAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgPopulationMagicActionAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationMagicActionAck_ErrorCode_descriptor_;
}
bool MsgPopulationMagicActionAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgPopulationMagicActionAck_ErrorCode MsgPopulationMagicActionAck::no_error;
const MsgPopulationMagicActionAck_ErrorCode MsgPopulationMagicActionAck::error_invalid_unit;
const MsgPopulationMagicActionAck_ErrorCode MsgPopulationMagicActionAck::error_invalid_attribute;
const MsgPopulationMagicActionAck_ErrorCode MsgPopulationMagicActionAck::ErrorCode_MIN;
const MsgPopulationMagicActionAck_ErrorCode MsgPopulationMagicActionAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgPopulationMagicActionAck::kOidFieldNumber;
const int MsgPopulationMagicActionAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgPopulationMagicActionAck::MsgPopulationMagicActionAck() {
  SharedCtor();
}

void MsgPopulationMagicActionAck::InitAsDefaultInstance() {
}

MsgPopulationMagicActionAck::MsgPopulationMagicActionAck(const MsgPopulationMagicActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationMagicActionAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationMagicActionAck::~MsgPopulationMagicActionAck() {
  SharedDtor();
}

void MsgPopulationMagicActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationMagicActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationMagicActionAck_descriptor_;
}

const MsgPopulationMagicActionAck& MsgPopulationMagicActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationMagicActionAck* MsgPopulationMagicActionAck::default_instance_ = NULL;

MsgPopulationMagicActionAck* MsgPopulationMagicActionAck::New() const {
  return new MsgPopulationMagicActionAck;
}

void MsgPopulationMagicActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationMagicActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.MsgPopulationMagicActionAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgPopulationMagicActionAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgPopulationMagicActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationMagicActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationMagicActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.MsgPopulationMagicActionAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationMagicActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.MsgPopulationMagicActionAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationMagicActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.MsgPopulationMagicActionAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationMagicActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationMagicActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationMagicActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationMagicActionAck::MergeFrom(const MsgPopulationMagicActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationMagicActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationMagicActionAck::CopyFrom(const MsgPopulationMagicActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationMagicActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationMagicActionAck::Swap(MsgPopulationMagicActionAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationMagicActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationMagicActionAck_descriptor_;
  metadata.reflection = MsgPopulationMagicActionAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_descriptor_;
}
bool MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode MsgChangeDiplomacyAck::no_error_diplomacy;
const MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode MsgChangeDiplomacyAck::error_invalid_camp_diplomacy;
const MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode MsgChangeDiplomacyAck::EnumChangeDiplomacyErrorCode_MIN;
const MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode MsgChangeDiplomacyAck::EnumChangeDiplomacyErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgChangeDiplomacyAck::kOidCamp1FieldNumber;
const int MsgChangeDiplomacyAck::kOidCamp2FieldNumber;
const int MsgChangeDiplomacyAck::kDiplomatieFieldNumber;
const int MsgChangeDiplomacyAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgChangeDiplomacyAck::MsgChangeDiplomacyAck() {
  SharedCtor();
}

void MsgChangeDiplomacyAck::InitAsDefaultInstance() {
}

MsgChangeDiplomacyAck::MsgChangeDiplomacyAck(const MsgChangeDiplomacyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeDiplomacyAck::SharedCtor() {
  _cached_size_ = 0;
  oid_camp1_ = 0;
  oid_camp2_ = 0;
  diplomatie_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeDiplomacyAck::~MsgChangeDiplomacyAck() {
  SharedDtor();
}

void MsgChangeDiplomacyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChangeDiplomacyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeDiplomacyAck_descriptor_;
}

const MsgChangeDiplomacyAck& MsgChangeDiplomacyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgChangeDiplomacyAck* MsgChangeDiplomacyAck::default_instance_ = NULL;

MsgChangeDiplomacyAck* MsgChangeDiplomacyAck::New() const {
  return new MsgChangeDiplomacyAck;
}

void MsgChangeDiplomacyAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_camp1_ = 0;
    oid_camp2_ = 0;
    diplomatie_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeDiplomacyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_camp1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_camp1_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_camp2;
        break;
      }
      
      // required int32 oid_camp2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_camp2_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_diplomatie;
        break;
      }
      
      // required .Common.EnumDiplomacy diplomatie = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diplomatie:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumDiplomacy_IsValid(value)) {
          set_diplomatie(static_cast< Common::EnumDiplomacy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.MsgChangeDiplomacyAck.EnumChangeDiplomacyErrorCode error_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgChangeDiplomacyAck_EnumChangeDiplomacyErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeDiplomacyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeDiplomacyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_camp1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_camp1(), output);
  }
  
  // required int32 oid_camp2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_camp2(), output);
  }
  
  // required .Common.EnumDiplomacy diplomatie = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->diplomatie(), output);
  }
  
  // required .MsgsSimToClient.MsgChangeDiplomacyAck.EnumChangeDiplomacyErrorCode error_code = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeDiplomacyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_camp1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_camp1(), target);
  }
  
  // required int32 oid_camp2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_camp2(), target);
  }
  
  // required .Common.EnumDiplomacy diplomatie = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->diplomatie(), target);
  }
  
  // required .MsgsSimToClient.MsgChangeDiplomacyAck.EnumChangeDiplomacyErrorCode error_code = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeDiplomacyAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_camp1 = 1;
    if (has_oid_camp1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_camp1());
    }
    
    // required int32 oid_camp2 = 2;
    if (has_oid_camp2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_camp2());
    }
    
    // required .Common.EnumDiplomacy diplomatie = 3;
    if (has_diplomatie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->diplomatie());
    }
    
    // required .MsgsSimToClient.MsgChangeDiplomacyAck.EnumChangeDiplomacyErrorCode error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeDiplomacyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeDiplomacyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeDiplomacyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeDiplomacyAck::MergeFrom(const MsgChangeDiplomacyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_camp1(from.oid_camp1());
    }
    if (from._has_bit(1)) {
      set_oid_camp2(from.oid_camp2());
    }
    if (from._has_bit(2)) {
      set_diplomatie(from.diplomatie());
    }
    if (from._has_bit(3)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeDiplomacyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeDiplomacyAck::CopyFrom(const MsgChangeDiplomacyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeDiplomacyAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgChangeDiplomacyAck::Swap(MsgChangeDiplomacyAck* other) {
  if (other != this) {
    std::swap(oid_camp1_, other->oid_camp1_);
    std::swap(oid_camp2_, other->oid_camp2_);
    std::swap(diplomatie_, other->diplomatie_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeDiplomacyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeDiplomacyAck_descriptor_;
  metadata.reflection = MsgChangeDiplomacyAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* HierarchyModificationAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchyModificationAck_ErrorCode_descriptor_;
}
bool HierarchyModificationAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::no_error_hierarchy;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_pion;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_automate;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_formation;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_automate_tc2;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_automate_maintenance;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_automate_sante;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_automate_ravitaillement;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_unit_surrendered_hierarchy;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_camp_hierarchy;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_invalid_groupe_connaissance;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::error_camps_incompatibles;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::ErrorCode_MIN;
const HierarchyModificationAck_ErrorCode HierarchyModificationAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

HierarchyModificationAck::HierarchyModificationAck() {
  SharedCtor();
}

void HierarchyModificationAck::InitAsDefaultInstance() {
}

HierarchyModificationAck::HierarchyModificationAck(const HierarchyModificationAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void HierarchyModificationAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HierarchyModificationAck::~HierarchyModificationAck() {
  SharedDtor();
}

void HierarchyModificationAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HierarchyModificationAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchyModificationAck_descriptor_;
}

const HierarchyModificationAck& HierarchyModificationAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

HierarchyModificationAck* HierarchyModificationAck::default_instance_ = NULL;

HierarchyModificationAck* HierarchyModificationAck::New() const {
  return new HierarchyModificationAck;
}

void HierarchyModificationAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HierarchyModificationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HierarchyModificationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HierarchyModificationAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HierarchyModificationAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HierarchyModificationAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HierarchyModificationAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HierarchyModificationAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HierarchyModificationAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HierarchyModificationAck::MergeFrom(const HierarchyModificationAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HierarchyModificationAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchyModificationAck::CopyFrom(const HierarchyModificationAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchyModificationAck::IsInitialized() const {
  
  return true;
}

void HierarchyModificationAck::Swap(HierarchyModificationAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HierarchyModificationAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchyModificationAck_descriptor_;
  metadata.reflection = HierarchyModificationAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeKnowledgeGroupAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeKnowledgeGroupAck::MsgAutomatChangeKnowledgeGroupAck() {
  SharedCtor();
}

void MsgAutomatChangeKnowledgeGroupAck::InitAsDefaultInstance() {
}

MsgAutomatChangeKnowledgeGroupAck::MsgAutomatChangeKnowledgeGroupAck(const MsgAutomatChangeKnowledgeGroupAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeKnowledgeGroupAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeKnowledgeGroupAck::~MsgAutomatChangeKnowledgeGroupAck() {
  SharedDtor();
}

void MsgAutomatChangeKnowledgeGroupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeKnowledgeGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeKnowledgeGroupAck_descriptor_;
}

const MsgAutomatChangeKnowledgeGroupAck& MsgAutomatChangeKnowledgeGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatChangeKnowledgeGroupAck* MsgAutomatChangeKnowledgeGroupAck::default_instance_ = NULL;

MsgAutomatChangeKnowledgeGroupAck* MsgAutomatChangeKnowledgeGroupAck::New() const {
  return new MsgAutomatChangeKnowledgeGroupAck;
}

void MsgAutomatChangeKnowledgeGroupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeKnowledgeGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::HierarchyModificationAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::HierarchyModificationAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeKnowledgeGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeKnowledgeGroupAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeKnowledgeGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeKnowledgeGroupAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeKnowledgeGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeKnowledgeGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeKnowledgeGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeKnowledgeGroupAck::MergeFrom(const MsgAutomatChangeKnowledgeGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeKnowledgeGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeKnowledgeGroupAck::CopyFrom(const MsgAutomatChangeKnowledgeGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeKnowledgeGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAutomatChangeKnowledgeGroupAck::Swap(MsgAutomatChangeKnowledgeGroupAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeKnowledgeGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeKnowledgeGroupAck_descriptor_;
  metadata.reflection = MsgAutomatChangeKnowledgeGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeLogisticLinksAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeLogisticLinksAck::MsgAutomatChangeLogisticLinksAck() {
  SharedCtor();
}

void MsgAutomatChangeLogisticLinksAck::InitAsDefaultInstance() {
}

MsgAutomatChangeLogisticLinksAck::MsgAutomatChangeLogisticLinksAck(const MsgAutomatChangeLogisticLinksAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeLogisticLinksAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeLogisticLinksAck::~MsgAutomatChangeLogisticLinksAck() {
  SharedDtor();
}

void MsgAutomatChangeLogisticLinksAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeLogisticLinksAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeLogisticLinksAck_descriptor_;
}

const MsgAutomatChangeLogisticLinksAck& MsgAutomatChangeLogisticLinksAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatChangeLogisticLinksAck* MsgAutomatChangeLogisticLinksAck::default_instance_ = NULL;

MsgAutomatChangeLogisticLinksAck* MsgAutomatChangeLogisticLinksAck::New() const {
  return new MsgAutomatChangeLogisticLinksAck;
}

void MsgAutomatChangeLogisticLinksAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeLogisticLinksAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::HierarchyModificationAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::HierarchyModificationAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeLogisticLinksAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeLogisticLinksAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeLogisticLinksAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeLogisticLinksAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeLogisticLinksAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeLogisticLinksAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeLogisticLinksAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeLogisticLinksAck::MergeFrom(const MsgAutomatChangeLogisticLinksAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeLogisticLinksAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeLogisticLinksAck::CopyFrom(const MsgAutomatChangeLogisticLinksAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeLogisticLinksAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAutomatChangeLogisticLinksAck::Swap(MsgAutomatChangeLogisticLinksAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeLogisticLinksAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeLogisticLinksAck_descriptor_;
  metadata.reflection = MsgAutomatChangeLogisticLinksAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeSuperiorAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeSuperiorAck::MsgAutomatChangeSuperiorAck() {
  SharedCtor();
}

void MsgAutomatChangeSuperiorAck::InitAsDefaultInstance() {
}

MsgAutomatChangeSuperiorAck::MsgAutomatChangeSuperiorAck(const MsgAutomatChangeSuperiorAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeSuperiorAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeSuperiorAck::~MsgAutomatChangeSuperiorAck() {
  SharedDtor();
}

void MsgAutomatChangeSuperiorAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeSuperiorAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeSuperiorAck_descriptor_;
}

const MsgAutomatChangeSuperiorAck& MsgAutomatChangeSuperiorAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatChangeSuperiorAck* MsgAutomatChangeSuperiorAck::default_instance_ = NULL;

MsgAutomatChangeSuperiorAck* MsgAutomatChangeSuperiorAck::New() const {
  return new MsgAutomatChangeSuperiorAck;
}

void MsgAutomatChangeSuperiorAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeSuperiorAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::HierarchyModificationAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::HierarchyModificationAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeSuperiorAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeSuperiorAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeSuperiorAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeSuperiorAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeSuperiorAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeSuperiorAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeSuperiorAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeSuperiorAck::MergeFrom(const MsgAutomatChangeSuperiorAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeSuperiorAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeSuperiorAck::CopyFrom(const MsgAutomatChangeSuperiorAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeSuperiorAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAutomatChangeSuperiorAck::Swap(MsgAutomatChangeSuperiorAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeSuperiorAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeSuperiorAck_descriptor_;
  metadata.reflection = MsgAutomatChangeSuperiorAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitChangeSuperiorAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgUnitChangeSuperiorAck::MsgUnitChangeSuperiorAck() {
  SharedCtor();
}

void MsgUnitChangeSuperiorAck::InitAsDefaultInstance() {
}

MsgUnitChangeSuperiorAck::MsgUnitChangeSuperiorAck(const MsgUnitChangeSuperiorAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitChangeSuperiorAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitChangeSuperiorAck::~MsgUnitChangeSuperiorAck() {
  SharedDtor();
}

void MsgUnitChangeSuperiorAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitChangeSuperiorAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitChangeSuperiorAck_descriptor_;
}

const MsgUnitChangeSuperiorAck& MsgUnitChangeSuperiorAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitChangeSuperiorAck* MsgUnitChangeSuperiorAck::default_instance_ = NULL;

MsgUnitChangeSuperiorAck* MsgUnitChangeSuperiorAck::New() const {
  return new MsgUnitChangeSuperiorAck;
}

void MsgUnitChangeSuperiorAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitChangeSuperiorAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::HierarchyModificationAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::HierarchyModificationAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitChangeSuperiorAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitChangeSuperiorAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitChangeSuperiorAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitChangeSuperiorAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.HierarchyModificationAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitChangeSuperiorAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitChangeSuperiorAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitChangeSuperiorAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitChangeSuperiorAck::MergeFrom(const MsgUnitChangeSuperiorAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitChangeSuperiorAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitChangeSuperiorAck::CopyFrom(const MsgUnitChangeSuperiorAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitChangeSuperiorAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgUnitChangeSuperiorAck::Swap(MsgUnitChangeSuperiorAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitChangeSuperiorAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitChangeSuperiorAck_descriptor_;
  metadata.reflection = MsgUnitChangeSuperiorAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_descriptor_;
}
bool MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow MsgLogSupplyPushFlowAck::no_error_pushflow;
const MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow MsgLogSupplyPushFlowAck::error_invalid_donneur_pushflow;
const MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow MsgLogSupplyPushFlowAck::error_invalid_receveur_pushflow;
const MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow MsgLogSupplyPushFlowAck::EnumLogSupplyPushFlow_MIN;
const MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow MsgLogSupplyPushFlowAck::EnumLogSupplyPushFlow_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgLogSupplyPushFlowAck::kAckFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyPushFlowAck::MsgLogSupplyPushFlowAck() {
  SharedCtor();
}

void MsgLogSupplyPushFlowAck::InitAsDefaultInstance() {
}

MsgLogSupplyPushFlowAck::MsgLogSupplyPushFlowAck(const MsgLogSupplyPushFlowAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyPushFlowAck::SharedCtor() {
  _cached_size_ = 0;
  ack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyPushFlowAck::~MsgLogSupplyPushFlowAck() {
  SharedDtor();
}

void MsgLogSupplyPushFlowAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyPushFlowAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyPushFlowAck_descriptor_;
}

const MsgLogSupplyPushFlowAck& MsgLogSupplyPushFlowAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyPushFlowAck* MsgLogSupplyPushFlowAck::default_instance_ = NULL;

MsgLogSupplyPushFlowAck* MsgLogSupplyPushFlowAck::New() const {
  return new MsgLogSupplyPushFlowAck;
}

void MsgLogSupplyPushFlowAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ack_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyPushFlowAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck.EnumLogSupplyPushFlow ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow_IsValid(value)) {
          set_ack(static_cast< ::MsgsSimToClient::MsgLogSupplyPushFlowAck_EnumLogSupplyPushFlow >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyPushFlowAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyPushFlowAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck.EnumLogSupplyPushFlow ack = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ack(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyPushFlowAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck.EnumLogSupplyPushFlow ack = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ack(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyPushFlowAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck.EnumLogSupplyPushFlow ack = 1;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ack());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyPushFlowAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyPushFlowAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyPushFlowAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyPushFlowAck::MergeFrom(const MsgLogSupplyPushFlowAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ack(from.ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyPushFlowAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyPushFlowAck::CopyFrom(const MsgLogSupplyPushFlowAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyPushFlowAck::IsInitialized() const {
  
  return true;
}

void MsgLogSupplyPushFlowAck::Swap(MsgLogSupplyPushFlowAck* other) {
  if (other != this) {
    std::swap(ack_, other->ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyPushFlowAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyPushFlowAck_descriptor_;
  metadata.reflection = MsgLogSupplyPushFlowAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_descriptor_;
}
bool MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas MsgLogSupplyChangeQuotasAck::no_error_quotas;
const MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas MsgLogSupplyChangeQuotasAck::error_invalid_donneur_quotas;
const MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas MsgLogSupplyChangeQuotasAck::error_invalid_receveur_quotas;
const MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas MsgLogSupplyChangeQuotasAck::LogSupplyChangeQuotas_MIN;
const MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas MsgLogSupplyChangeQuotasAck::LogSupplyChangeQuotas_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgLogSupplyChangeQuotasAck::kAckFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyChangeQuotasAck::MsgLogSupplyChangeQuotasAck() {
  SharedCtor();
}

void MsgLogSupplyChangeQuotasAck::InitAsDefaultInstance() {
}

MsgLogSupplyChangeQuotasAck::MsgLogSupplyChangeQuotasAck(const MsgLogSupplyChangeQuotasAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyChangeQuotasAck::SharedCtor() {
  _cached_size_ = 0;
  ack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyChangeQuotasAck::~MsgLogSupplyChangeQuotasAck() {
  SharedDtor();
}

void MsgLogSupplyChangeQuotasAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyChangeQuotasAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyChangeQuotasAck_descriptor_;
}

const MsgLogSupplyChangeQuotasAck& MsgLogSupplyChangeQuotasAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyChangeQuotasAck* MsgLogSupplyChangeQuotasAck::default_instance_ = NULL;

MsgLogSupplyChangeQuotasAck* MsgLogSupplyChangeQuotasAck::New() const {
  return new MsgLogSupplyChangeQuotasAck;
}

void MsgLogSupplyChangeQuotasAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ack_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyChangeQuotasAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck.LogSupplyChangeQuotas ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas_IsValid(value)) {
          set_ack(static_cast< ::MsgsSimToClient::MsgLogSupplyChangeQuotasAck_LogSupplyChangeQuotas >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyChangeQuotasAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyChangeQuotasAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck.LogSupplyChangeQuotas ack = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ack(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyChangeQuotasAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck.LogSupplyChangeQuotas ack = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ack(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyChangeQuotasAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck.LogSupplyChangeQuotas ack = 1;
    if (has_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ack());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyChangeQuotasAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyChangeQuotasAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyChangeQuotasAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyChangeQuotasAck::MergeFrom(const MsgLogSupplyChangeQuotasAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ack(from.ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyChangeQuotasAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyChangeQuotasAck::CopyFrom(const MsgLogSupplyChangeQuotasAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyChangeQuotasAck::IsInitialized() const {
  
  return true;
}

void MsgLogSupplyChangeQuotasAck::Swap(MsgLogSupplyChangeQuotasAck* other) {
  if (other != this) {
    std::swap(ack_, other->ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyChangeQuotasAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyChangeQuotasAck_descriptor_;
  metadata.reflection = MsgLogSupplyChangeQuotasAck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_descriptor_;
}
bool MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::no_error;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::error_invalid_reporter;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::error_invalid_target;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::error_invalid_munition;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::error_target_no_illuminated;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::EnumActionCreateFireOrderErrorCode_MIN;
const MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode MsgActionCreateFireOrderAck::EnumActionCreateFireOrderErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgActionCreateFireOrderAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgActionCreateFireOrderAck::MsgActionCreateFireOrderAck() {
  SharedCtor();
}

void MsgActionCreateFireOrderAck::InitAsDefaultInstance() {
}

MsgActionCreateFireOrderAck::MsgActionCreateFireOrderAck(const MsgActionCreateFireOrderAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgActionCreateFireOrderAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgActionCreateFireOrderAck::~MsgActionCreateFireOrderAck() {
  SharedDtor();
}

void MsgActionCreateFireOrderAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgActionCreateFireOrderAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgActionCreateFireOrderAck_descriptor_;
}

const MsgActionCreateFireOrderAck& MsgActionCreateFireOrderAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgActionCreateFireOrderAck* MsgActionCreateFireOrderAck::default_instance_ = NULL;

MsgActionCreateFireOrderAck* MsgActionCreateFireOrderAck::New() const {
  return new MsgActionCreateFireOrderAck;
}

void MsgActionCreateFireOrderAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgActionCreateFireOrderAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.MsgActionCreateFireOrderAck.EnumActionCreateFireOrderErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgActionCreateFireOrderAck_EnumActionCreateFireOrderErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgActionCreateFireOrderAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgActionCreateFireOrderAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.MsgActionCreateFireOrderAck.EnumActionCreateFireOrderErrorCode error_code = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgActionCreateFireOrderAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.MsgActionCreateFireOrderAck.EnumActionCreateFireOrderErrorCode error_code = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgActionCreateFireOrderAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.MsgActionCreateFireOrderAck.EnumActionCreateFireOrderErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgActionCreateFireOrderAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgActionCreateFireOrderAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgActionCreateFireOrderAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgActionCreateFireOrderAck::MergeFrom(const MsgActionCreateFireOrderAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgActionCreateFireOrderAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgActionCreateFireOrderAck::CopyFrom(const MsgActionCreateFireOrderAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgActionCreateFireOrderAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgActionCreateFireOrderAck::Swap(MsgActionCreateFireOrderAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgActionCreateFireOrderAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgActionCreateFireOrderAck_descriptor_;
  metadata.reflection = MsgActionCreateFireOrderAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlInformation::kCurrentTickFieldNumber;
const int MsgControlInformation::kInitialDateTimeFieldNumber;
const int MsgControlInformation::kDateTimeFieldNumber;
const int MsgControlInformation::kTickDurationFieldNumber;
const int MsgControlInformation::kTimeFactorFieldNumber;
const int MsgControlInformation::kCheckpointFrequencyFieldNumber;
const int MsgControlInformation::kStatusFieldNumber;
const int MsgControlInformation::kSendVisionConesFieldNumber;
const int MsgControlInformation::kProfilingEnabledFieldNumber;
#endif  // !_MSC_VER

MsgControlInformation::MsgControlInformation() {
  SharedCtor();
}

void MsgControlInformation::InitAsDefaultInstance() {
  initial_date_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
  date_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgControlInformation::MsgControlInformation(const MsgControlInformation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlInformation::SharedCtor() {
  _cached_size_ = 0;
  current_tick_ = 0;
  initial_date_time_ = NULL;
  date_time_ = NULL;
  tick_duration_ = 0;
  time_factor_ = 0;
  checkpoint_frequency_ = 0;
  status_ = 0;
  send_vision_cones_ = false;
  profiling_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlInformation::~MsgControlInformation() {
  SharedDtor();
}

void MsgControlInformation::SharedDtor() {
  if (this != default_instance_) {
    delete initial_date_time_;
    delete date_time_;
  }
}

const ::google::protobuf::Descriptor* MsgControlInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlInformation_descriptor_;
}

const MsgControlInformation& MsgControlInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlInformation* MsgControlInformation::default_instance_ = NULL;

MsgControlInformation* MsgControlInformation::New() const {
  return new MsgControlInformation;
}

void MsgControlInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_tick_ = 0;
    if (_has_bit(1)) {
      if (initial_date_time_ != NULL) initial_date_time_->::Common::MsgDateTime::Clear();
    }
    if (_has_bit(2)) {
      if (date_time_ != NULL) date_time_->::Common::MsgDateTime::Clear();
    }
    tick_duration_ = 0;
    time_factor_ = 0;
    checkpoint_frequency_ = 0;
    status_ = 0;
    send_vision_cones_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profiling_enabled_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_tick_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_initial_date_time;
        break;
      }
      
      // required .Common.MsgDateTime initial_date_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_initial_date_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_initial_date_time()));
        if (input->ExpectTag(26)) goto parse_date_time;
        break;
      }
      
      // required .Common.MsgDateTime date_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_date_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_date_time()));
        if (input->ExpectTag(32)) goto parse_tick_duration;
        break;
      }
      
      // required int32 tick_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_duration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_duration_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_time_factor;
        break;
      }
      
      // required int32 time_factor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time_factor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_factor_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_checkpoint_frequency;
        break;
      }
      
      // required int32 checkpoint_frequency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_checkpoint_frequency:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &checkpoint_frequency_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }
      
      // required .Common.EnumSimulationState status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumSimulationState_IsValid(value)) {
          set_status(static_cast< Common::EnumSimulationState >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_send_vision_cones;
        break;
      }
      
      // required bool send_vision_cones = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_send_vision_cones:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &send_vision_cones_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_profiling_enabled;
        break;
      }
      
      // required bool profiling_enabled = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_profiling_enabled:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &profiling_enabled_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlInformation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_tick(), output);
  }
  
  // required .Common.MsgDateTime initial_date_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->initial_date_time(), output);
  }
  
  // required .Common.MsgDateTime date_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->date_time(), output);
  }
  
  // required int32 tick_duration = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tick_duration(), output);
  }
  
  // required int32 time_factor = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_factor(), output);
  }
  
  // required int32 checkpoint_frequency = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->checkpoint_frequency(), output);
  }
  
  // required .Common.EnumSimulationState status = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->status(), output);
  }
  
  // required bool send_vision_cones = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->send_vision_cones(), output);
  }
  
  // required bool profiling_enabled = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->profiling_enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_tick(), target);
  }
  
  // required .Common.MsgDateTime initial_date_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->initial_date_time(), target);
  }
  
  // required .Common.MsgDateTime date_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date_time(), target);
  }
  
  // required int32 tick_duration = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tick_duration(), target);
  }
  
  // required int32 time_factor = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_factor(), target);
  }
  
  // required int32 checkpoint_frequency = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->checkpoint_frequency(), target);
  }
  
  // required .Common.EnumSimulationState status = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->status(), target);
  }
  
  // required bool send_vision_cones = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->send_vision_cones(), target);
  }
  
  // required bool profiling_enabled = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->profiling_enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_tick = 1;
    if (has_current_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_tick());
    }
    
    // required .Common.MsgDateTime initial_date_time = 2;
    if (has_initial_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial_date_time());
    }
    
    // required .Common.MsgDateTime date_time = 3;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time());
    }
    
    // required int32 tick_duration = 4;
    if (has_tick_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_duration());
    }
    
    // required int32 time_factor = 5;
    if (has_time_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_factor());
    }
    
    // required int32 checkpoint_frequency = 6;
    if (has_checkpoint_frequency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checkpoint_frequency());
    }
    
    // required .Common.EnumSimulationState status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required bool send_vision_cones = 8;
    if (has_send_vision_cones()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool profiling_enabled = 9;
    if (has_profiling_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlInformation::MergeFrom(const MsgControlInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_tick(from.current_tick());
    }
    if (from._has_bit(1)) {
      mutable_initial_date_time()->::Common::MsgDateTime::MergeFrom(from.initial_date_time());
    }
    if (from._has_bit(2)) {
      mutable_date_time()->::Common::MsgDateTime::MergeFrom(from.date_time());
    }
    if (from._has_bit(3)) {
      set_tick_duration(from.tick_duration());
    }
    if (from._has_bit(4)) {
      set_time_factor(from.time_factor());
    }
    if (from._has_bit(5)) {
      set_checkpoint_frequency(from.checkpoint_frequency());
    }
    if (from._has_bit(6)) {
      set_status(from.status());
    }
    if (from._has_bit(7)) {
      set_send_vision_cones(from.send_vision_cones());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_profiling_enabled(from.profiling_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlInformation::CopyFrom(const MsgControlInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  if (has_initial_date_time()) {
    if (!this->initial_date_time().IsInitialized()) return false;
  }
  if (has_date_time()) {
    if (!this->date_time().IsInitialized()) return false;
  }
  return true;
}

void MsgControlInformation::Swap(MsgControlInformation* other) {
  if (other != this) {
    std::swap(current_tick_, other->current_tick_);
    std::swap(initial_date_time_, other->initial_date_time_);
    std::swap(date_time_, other->date_time_);
    std::swap(tick_duration_, other->tick_duration_);
    std::swap(time_factor_, other->time_factor_);
    std::swap(checkpoint_frequency_, other->checkpoint_frequency_);
    std::swap(status_, other->status_);
    std::swap(send_vision_cones_, other->send_vision_cones_);
    std::swap(profiling_enabled_, other->profiling_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlInformation_descriptor_;
  metadata.reflection = MsgControlInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlProfilingInformation::kPerceptionFieldNumber;
const int MsgControlProfilingInformation::kDecisionFieldNumber;
const int MsgControlProfilingInformation::kActionFieldNumber;
const int MsgControlProfilingInformation::kMainLoopFieldNumber;
#endif  // !_MSC_VER

MsgControlProfilingInformation::MsgControlProfilingInformation() {
  SharedCtor();
}

void MsgControlProfilingInformation::InitAsDefaultInstance() {
}

MsgControlProfilingInformation::MsgControlProfilingInformation(const MsgControlProfilingInformation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlProfilingInformation::SharedCtor() {
  _cached_size_ = 0;
  perception_ = 0;
  decision_ = 0;
  action_ = 0;
  main_loop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlProfilingInformation::~MsgControlProfilingInformation() {
  SharedDtor();
}

void MsgControlProfilingInformation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlProfilingInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlProfilingInformation_descriptor_;
}

const MsgControlProfilingInformation& MsgControlProfilingInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlProfilingInformation* MsgControlProfilingInformation::default_instance_ = NULL;

MsgControlProfilingInformation* MsgControlProfilingInformation::New() const {
  return new MsgControlProfilingInformation;
}

void MsgControlProfilingInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    perception_ = 0;
    decision_ = 0;
    action_ = 0;
    main_loop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlProfilingInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float perception = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &perception_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_decision;
        break;
      }
      
      // required float decision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_decision:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &decision_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_action;
        break;
      }
      
      // required float action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_action:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &action_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_main_loop;
        break;
      }
      
      // required float main_loop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_main_loop:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &main_loop_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlProfilingInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlProfilingInformation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float perception = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->perception(), output);
  }
  
  // required float decision = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->decision(), output);
  }
  
  // required float action = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->action(), output);
  }
  
  // required float main_loop = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->main_loop(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlProfilingInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float perception = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->perception(), target);
  }
  
  // required float decision = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->decision(), target);
  }
  
  // required float action = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->action(), target);
  }
  
  // required float main_loop = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->main_loop(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlProfilingInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float perception = 1;
    if (has_perception()) {
      total_size += 1 + 4;
    }
    
    // required float decision = 2;
    if (has_decision()) {
      total_size += 1 + 4;
    }
    
    // required float action = 3;
    if (has_action()) {
      total_size += 1 + 4;
    }
    
    // required float main_loop = 4;
    if (has_main_loop()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlProfilingInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlProfilingInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlProfilingInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlProfilingInformation::MergeFrom(const MsgControlProfilingInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_perception(from.perception());
    }
    if (from._has_bit(1)) {
      set_decision(from.decision());
    }
    if (from._has_bit(2)) {
      set_action(from.action());
    }
    if (from._has_bit(3)) {
      set_main_loop(from.main_loop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlProfilingInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlProfilingInformation::CopyFrom(const MsgControlProfilingInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlProfilingInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgControlProfilingInformation::Swap(MsgControlProfilingInformation* other) {
  if (other != this) {
    std::swap(perception_, other->perception_);
    std::swap(decision_, other->decision_);
    std::swap(action_, other->action_);
    std::swap(main_loop_, other->main_loop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlProfilingInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlProfilingInformation_descriptor_;
  metadata.reflection = MsgControlProfilingInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlBeginTick::kCurrentTickFieldNumber;
const int MsgControlBeginTick::kDateTimeFieldNumber;
#endif  // !_MSC_VER

MsgControlBeginTick::MsgControlBeginTick() {
  SharedCtor();
}

void MsgControlBeginTick::InitAsDefaultInstance() {
  date_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgControlBeginTick::MsgControlBeginTick(const MsgControlBeginTick& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlBeginTick::SharedCtor() {
  _cached_size_ = 0;
  current_tick_ = 0;
  date_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlBeginTick::~MsgControlBeginTick() {
  SharedDtor();
}

void MsgControlBeginTick::SharedDtor() {
  if (this != default_instance_) {
    delete date_time_;
  }
}

const ::google::protobuf::Descriptor* MsgControlBeginTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlBeginTick_descriptor_;
}

const MsgControlBeginTick& MsgControlBeginTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlBeginTick* MsgControlBeginTick::default_instance_ = NULL;

MsgControlBeginTick* MsgControlBeginTick::New() const {
  return new MsgControlBeginTick;
}

void MsgControlBeginTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_tick_ = 0;
    if (_has_bit(1)) {
      if (date_time_ != NULL) date_time_->::Common::MsgDateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlBeginTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_tick_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_date_time;
        break;
      }
      
      // required .Common.MsgDateTime date_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_date_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_date_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlBeginTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlBeginTick::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_tick(), output);
  }
  
  // required .Common.MsgDateTime date_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->date_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlBeginTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_tick(), target);
  }
  
  // required .Common.MsgDateTime date_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->date_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlBeginTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_tick = 1;
    if (has_current_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_tick());
    }
    
    // required .Common.MsgDateTime date_time = 2;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlBeginTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlBeginTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlBeginTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlBeginTick::MergeFrom(const MsgControlBeginTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_tick(from.current_tick());
    }
    if (from._has_bit(1)) {
      mutable_date_time()->::Common::MsgDateTime::MergeFrom(from.date_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlBeginTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlBeginTick::CopyFrom(const MsgControlBeginTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlBeginTick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_date_time()) {
    if (!this->date_time().IsInitialized()) return false;
  }
  return true;
}

void MsgControlBeginTick::Swap(MsgControlBeginTick* other) {
  if (other != this) {
    std::swap(current_tick_, other->current_tick_);
    std::swap(date_time_, other->date_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlBeginTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlBeginTick_descriptor_;
  metadata.reflection = MsgControlBeginTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlEndTick::kCurrentTickFieldNumber;
const int MsgControlEndTick::kTickDurationFieldNumber;
const int MsgControlEndTick::kLongPathfindsFieldNumber;
const int MsgControlEndTick::kShortPathfindsFieldNumber;
const int MsgControlEndTick::kMemoryFieldNumber;
const int MsgControlEndTick::kVirtualMemoryFieldNumber;
#endif  // !_MSC_VER

MsgControlEndTick::MsgControlEndTick() {
  SharedCtor();
}

void MsgControlEndTick::InitAsDefaultInstance() {
}

MsgControlEndTick::MsgControlEndTick(const MsgControlEndTick& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlEndTick::SharedCtor() {
  _cached_size_ = 0;
  current_tick_ = 0;
  tick_duration_ = 0;
  long_pathfinds_ = 0;
  short_pathfinds_ = 0;
  memory_ = 0;
  virtual_memory_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlEndTick::~MsgControlEndTick() {
  SharedDtor();
}

void MsgControlEndTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlEndTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlEndTick_descriptor_;
}

const MsgControlEndTick& MsgControlEndTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlEndTick* MsgControlEndTick::default_instance_ = NULL;

MsgControlEndTick* MsgControlEndTick::New() const {
  return new MsgControlEndTick;
}

void MsgControlEndTick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_tick_ = 0;
    tick_duration_ = 0;
    long_pathfinds_ = 0;
    short_pathfinds_ = 0;
    memory_ = 0;
    virtual_memory_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlEndTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_tick_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_tick_duration;
        break;
      }
      
      // required int32 tick_duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_duration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_duration_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_long_pathfinds;
        break;
      }
      
      // required int32 long_pathfinds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_long_pathfinds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &long_pathfinds_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_short_pathfinds;
        break;
      }
      
      // required int32 short_pathfinds = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_short_pathfinds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &short_pathfinds_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_memory;
        break;
      }
      
      // required int32 memory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_memory:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &memory_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_virtual_memory;
        break;
      }
      
      // required int32 virtual_memory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_virtual_memory:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &virtual_memory_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlEndTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlEndTick::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_tick(), output);
  }
  
  // required int32 tick_duration = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick_duration(), output);
  }
  
  // required int32 long_pathfinds = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->long_pathfinds(), output);
  }
  
  // required int32 short_pathfinds = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->short_pathfinds(), output);
  }
  
  // required int32 memory = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memory(), output);
  }
  
  // required int32 virtual_memory = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->virtual_memory(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlEndTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_tick(), target);
  }
  
  // required int32 tick_duration = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick_duration(), target);
  }
  
  // required int32 long_pathfinds = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->long_pathfinds(), target);
  }
  
  // required int32 short_pathfinds = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->short_pathfinds(), target);
  }
  
  // required int32 memory = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memory(), target);
  }
  
  // required int32 virtual_memory = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->virtual_memory(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlEndTick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_tick = 1;
    if (has_current_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_tick());
    }
    
    // required int32 tick_duration = 2;
    if (has_tick_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_duration());
    }
    
    // required int32 long_pathfinds = 3;
    if (has_long_pathfinds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->long_pathfinds());
    }
    
    // required int32 short_pathfinds = 4;
    if (has_short_pathfinds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->short_pathfinds());
    }
    
    // required int32 memory = 5;
    if (has_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memory());
    }
    
    // required int32 virtual_memory = 6;
    if (has_virtual_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->virtual_memory());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlEndTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlEndTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlEndTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlEndTick::MergeFrom(const MsgControlEndTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_tick(from.current_tick());
    }
    if (from._has_bit(1)) {
      set_tick_duration(from.tick_duration());
    }
    if (from._has_bit(2)) {
      set_long_pathfinds(from.long_pathfinds());
    }
    if (from._has_bit(3)) {
      set_short_pathfinds(from.short_pathfinds());
    }
    if (from._has_bit(4)) {
      set_memory(from.memory());
    }
    if (from._has_bit(5)) {
      set_virtual_memory(from.virtual_memory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlEndTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlEndTick::CopyFrom(const MsgControlEndTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlEndTick::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void MsgControlEndTick::Swap(MsgControlEndTick* other) {
  if (other != this) {
    std::swap(current_tick_, other->current_tick_);
    std::swap(tick_duration_, other->tick_duration_);
    std::swap(long_pathfinds_, other->long_pathfinds_);
    std::swap(short_pathfinds_, other->short_pathfinds_);
    std::swap(memory_, other->memory_);
    std::swap(virtual_memory_, other->virtual_memory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlEndTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlEndTick_descriptor_;
  metadata.reflection = MsgControlEndTick_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ControlAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlAck_ErrorCode_descriptor_;
}
bool ControlAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ControlAck_ErrorCode ControlAck::no_error;
const ControlAck_ErrorCode ControlAck::error_already_started;
const ControlAck_ErrorCode ControlAck::error_not_started;
const ControlAck_ErrorCode ControlAck::error_not_paused;
const ControlAck_ErrorCode ControlAck::error_already_paused;
const ControlAck_ErrorCode ControlAck::error_invalid_time_factor;
const ControlAck_ErrorCode ControlAck::error_invalid_date_time;
const ControlAck_ErrorCode ControlAck::ErrorCode_MIN;
const ControlAck_ErrorCode ControlAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ControlAck::ControlAck() {
  SharedCtor();
}

void ControlAck::InitAsDefaultInstance() {
}

ControlAck::ControlAck(const ControlAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void ControlAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlAck::~ControlAck() {
  SharedDtor();
}

void ControlAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ControlAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlAck_descriptor_;
}

const ControlAck& ControlAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

ControlAck* ControlAck::default_instance_ = NULL;

ControlAck* ControlAck::New() const {
  return new ControlAck;
}

void ControlAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ControlAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ControlAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ControlAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ControlAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ControlAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ControlAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ControlAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ControlAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ControlAck::MergeFrom(const ControlAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ControlAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlAck::CopyFrom(const ControlAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlAck::IsInitialized() const {
  
  return true;
}

void ControlAck::Swap(ControlAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ControlAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlAck_descriptor_;
  metadata.reflection = ControlAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlDatetimeChangeAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlDatetimeChangeAck::MsgControlDatetimeChangeAck() {
  SharedCtor();
}

void MsgControlDatetimeChangeAck::InitAsDefaultInstance() {
}

MsgControlDatetimeChangeAck::MsgControlDatetimeChangeAck(const MsgControlDatetimeChangeAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlDatetimeChangeAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlDatetimeChangeAck::~MsgControlDatetimeChangeAck() {
  SharedDtor();
}

void MsgControlDatetimeChangeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlDatetimeChangeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlDatetimeChangeAck_descriptor_;
}

const MsgControlDatetimeChangeAck& MsgControlDatetimeChangeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlDatetimeChangeAck* MsgControlDatetimeChangeAck::default_instance_ = NULL;

MsgControlDatetimeChangeAck* MsgControlDatetimeChangeAck::New() const {
  return new MsgControlDatetimeChangeAck;
}

void MsgControlDatetimeChangeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlDatetimeChangeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlDatetimeChangeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlDatetimeChangeAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlDatetimeChangeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlDatetimeChangeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlDatetimeChangeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlDatetimeChangeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlDatetimeChangeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlDatetimeChangeAck::MergeFrom(const MsgControlDatetimeChangeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlDatetimeChangeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlDatetimeChangeAck::CopyFrom(const MsgControlDatetimeChangeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlDatetimeChangeAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlDatetimeChangeAck::Swap(MsgControlDatetimeChangeAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlDatetimeChangeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlDatetimeChangeAck_descriptor_;
  metadata.reflection = MsgControlDatetimeChangeAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlChangeTimeFactorAck::kTimeFactorFieldNumber;
const int MsgControlChangeTimeFactorAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlChangeTimeFactorAck::MsgControlChangeTimeFactorAck() {
  SharedCtor();
}

void MsgControlChangeTimeFactorAck::InitAsDefaultInstance() {
}

MsgControlChangeTimeFactorAck::MsgControlChangeTimeFactorAck(const MsgControlChangeTimeFactorAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlChangeTimeFactorAck::SharedCtor() {
  _cached_size_ = 0;
  time_factor_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlChangeTimeFactorAck::~MsgControlChangeTimeFactorAck() {
  SharedDtor();
}

void MsgControlChangeTimeFactorAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlChangeTimeFactorAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlChangeTimeFactorAck_descriptor_;
}

const MsgControlChangeTimeFactorAck& MsgControlChangeTimeFactorAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlChangeTimeFactorAck* MsgControlChangeTimeFactorAck::default_instance_ = NULL;

MsgControlChangeTimeFactorAck* MsgControlChangeTimeFactorAck::New() const {
  return new MsgControlChangeTimeFactorAck;
}

void MsgControlChangeTimeFactorAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_factor_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlChangeTimeFactorAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time_factor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_factor_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlChangeTimeFactorAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlChangeTimeFactorAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 time_factor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_factor(), output);
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlChangeTimeFactorAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time_factor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_factor(), target);
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlChangeTimeFactorAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time_factor = 1;
    if (has_time_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_factor());
    }
    
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlChangeTimeFactorAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlChangeTimeFactorAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlChangeTimeFactorAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlChangeTimeFactorAck::MergeFrom(const MsgControlChangeTimeFactorAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time_factor(from.time_factor());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlChangeTimeFactorAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlChangeTimeFactorAck::CopyFrom(const MsgControlChangeTimeFactorAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlChangeTimeFactorAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgControlChangeTimeFactorAck::Swap(MsgControlChangeTimeFactorAck* other) {
  if (other != this) {
    std::swap(time_factor_, other->time_factor_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlChangeTimeFactorAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlChangeTimeFactorAck_descriptor_;
  metadata.reflection = MsgControlChangeTimeFactorAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlStopAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlStopAck::MsgControlStopAck() {
  SharedCtor();
}

void MsgControlStopAck::InitAsDefaultInstance() {
}

MsgControlStopAck::MsgControlStopAck(const MsgControlStopAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlStopAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlStopAck::~MsgControlStopAck() {
  SharedDtor();
}

void MsgControlStopAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlStopAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlStopAck_descriptor_;
}

const MsgControlStopAck& MsgControlStopAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlStopAck* MsgControlStopAck::default_instance_ = NULL;

MsgControlStopAck* MsgControlStopAck::New() const {
  return new MsgControlStopAck;
}

void MsgControlStopAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlStopAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlStopAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlStopAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlStopAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlStopAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlStopAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlStopAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlStopAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlStopAck::MergeFrom(const MsgControlStopAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlStopAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlStopAck::CopyFrom(const MsgControlStopAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlStopAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlStopAck::Swap(MsgControlStopAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlStopAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlStopAck_descriptor_;
  metadata.reflection = MsgControlStopAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlPauseAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlPauseAck::MsgControlPauseAck() {
  SharedCtor();
}

void MsgControlPauseAck::InitAsDefaultInstance() {
}

MsgControlPauseAck::MsgControlPauseAck(const MsgControlPauseAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlPauseAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlPauseAck::~MsgControlPauseAck() {
  SharedDtor();
}

void MsgControlPauseAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlPauseAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlPauseAck_descriptor_;
}

const MsgControlPauseAck& MsgControlPauseAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlPauseAck* MsgControlPauseAck::default_instance_ = NULL;

MsgControlPauseAck* MsgControlPauseAck::New() const {
  return new MsgControlPauseAck;
}

void MsgControlPauseAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlPauseAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlPauseAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlPauseAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlPauseAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlPauseAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlPauseAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlPauseAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlPauseAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlPauseAck::MergeFrom(const MsgControlPauseAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlPauseAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlPauseAck::CopyFrom(const MsgControlPauseAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlPauseAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlPauseAck::Swap(MsgControlPauseAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlPauseAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlPauseAck_descriptor_;
  metadata.reflection = MsgControlPauseAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlResumeAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlResumeAck::MsgControlResumeAck() {
  SharedCtor();
}

void MsgControlResumeAck::InitAsDefaultInstance() {
}

MsgControlResumeAck::MsgControlResumeAck(const MsgControlResumeAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlResumeAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlResumeAck::~MsgControlResumeAck() {
  SharedDtor();
}

void MsgControlResumeAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlResumeAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlResumeAck_descriptor_;
}

const MsgControlResumeAck& MsgControlResumeAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlResumeAck* MsgControlResumeAck::default_instance_ = NULL;

MsgControlResumeAck* MsgControlResumeAck::New() const {
  return new MsgControlResumeAck;
}

void MsgControlResumeAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlResumeAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlResumeAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlResumeAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlResumeAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlResumeAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlResumeAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlResumeAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlResumeAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlResumeAck::MergeFrom(const MsgControlResumeAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlResumeAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlResumeAck::CopyFrom(const MsgControlResumeAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlResumeAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlResumeAck::Swap(MsgControlResumeAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlResumeAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlResumeAck_descriptor_;
  metadata.reflection = MsgControlResumeAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgTeamCreation::_default_nom_;
#ifndef _MSC_VER
const int MsgTeamCreation::kOidFieldNumber;
const int MsgTeamCreation::kNomFieldNumber;
const int MsgTeamCreation::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgTeamCreation::MsgTeamCreation() {
  SharedCtor();
}

void MsgTeamCreation::InitAsDefaultInstance() {
}

MsgTeamCreation::MsgTeamCreation(const MsgTeamCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTeamCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  nom_ = const_cast< ::std::string*>(&_default_nom_);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTeamCreation::~MsgTeamCreation() {
  SharedDtor();
}

void MsgTeamCreation::SharedDtor() {
  if (nom_ != &_default_nom_) {
    delete nom_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTeamCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTeamCreation_descriptor_;
}

const MsgTeamCreation& MsgTeamCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgTeamCreation* MsgTeamCreation::default_instance_ = NULL;

MsgTeamCreation* MsgTeamCreation::New() const {
  return new MsgTeamCreation;
}

void MsgTeamCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    if (_has_bit(1)) {
      if (nom_ != &_default_nom_) {
        nom_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTeamCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_nom;
        break;
      }
      
      // required string nom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_nom()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->nom().data(), this->nom().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .Common.EnumDiplomacy type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumDiplomacy_IsValid(value)) {
          set_type(static_cast< Common::EnumDiplomacy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTeamCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTeamCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required string nom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nom(), output);
  }
  
  // required .Common.EnumDiplomacy type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTeamCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required string nom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nom(), target);
  }
  
  // required .Common.EnumDiplomacy type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTeamCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required string nom = 2;
    if (has_nom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nom());
    }
    
    // required .Common.EnumDiplomacy type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTeamCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTeamCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTeamCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTeamCreation::MergeFrom(const MsgTeamCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_nom(from.nom());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTeamCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTeamCreation::CopyFrom(const MsgTeamCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTeamCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgTeamCreation::Swap(MsgTeamCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(nom_, other->nom_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTeamCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTeamCreation_descriptor_;
  metadata.reflection = MsgTeamCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatCreation_oid_parent::kFormationFieldNumber;
const int MsgAutomatCreation_oid_parent::kAutomateFieldNumber;
#endif  // !_MSC_VER

MsgAutomatCreation_oid_parent::MsgAutomatCreation_oid_parent() {
  SharedCtor();
}

void MsgAutomatCreation_oid_parent::InitAsDefaultInstance() {
  formation_ = const_cast< ::Common::MsgFormation*>(&::Common::MsgFormation::default_instance());
  automate_ = const_cast< ::Common::MsgAutomat*>(&::Common::MsgAutomat::default_instance());
}

MsgAutomatCreation_oid_parent::MsgAutomatCreation_oid_parent(const MsgAutomatCreation_oid_parent& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatCreation_oid_parent::SharedCtor() {
  _cached_size_ = 0;
  formation_ = NULL;
  automate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatCreation_oid_parent::~MsgAutomatCreation_oid_parent() {
  SharedDtor();
}

void MsgAutomatCreation_oid_parent::SharedDtor() {
  if (this != default_instance_) {
    delete formation_;
    delete automate_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatCreation_oid_parent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatCreation_oid_parent_descriptor_;
}

const MsgAutomatCreation_oid_parent& MsgAutomatCreation_oid_parent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatCreation_oid_parent* MsgAutomatCreation_oid_parent::default_instance_ = NULL;

MsgAutomatCreation_oid_parent* MsgAutomatCreation_oid_parent::New() const {
  return new MsgAutomatCreation_oid_parent;
}

void MsgAutomatCreation_oid_parent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (formation_ != NULL) formation_->::Common::MsgFormation::Clear();
    }
    if (_has_bit(1)) {
      if (automate_ != NULL) automate_->::Common::MsgAutomat::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatCreation_oid_parent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.MsgFormation formation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectTag(18)) goto parse_automate;
        break;
      }
      
      // optional .Common.MsgAutomat automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automate()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatCreation_oid_parent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatCreation_oid_parent::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.MsgFormation formation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->formation(), output);
  }
  
  // optional .Common.MsgAutomat automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->automate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatCreation_oid_parent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.MsgFormation formation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formation(), target);
  }
  
  // optional .Common.MsgAutomat automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->automate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatCreation_oid_parent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.MsgFormation formation = 1;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
    // optional .Common.MsgAutomat automate = 2;
    if (has_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatCreation_oid_parent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatCreation_oid_parent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatCreation_oid_parent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatCreation_oid_parent::MergeFrom(const MsgAutomatCreation_oid_parent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_formation()->::Common::MsgFormation::MergeFrom(from.formation());
    }
    if (from._has_bit(1)) {
      mutable_automate()->::Common::MsgAutomat::MergeFrom(from.automate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatCreation_oid_parent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatCreation_oid_parent::CopyFrom(const MsgAutomatCreation_oid_parent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatCreation_oid_parent::IsInitialized() const {
  
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  if (has_automate()) {
    if (!this->automate().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatCreation_oid_parent::Swap(MsgAutomatCreation_oid_parent* other) {
  if (other != this) {
    std::swap(formation_, other->formation_);
    std::swap(automate_, other->automate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatCreation_oid_parent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatCreation_oid_parent_descriptor_;
  metadata.reflection = MsgAutomatCreation_oid_parent_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgAutomatCreation::_default_nom_;
#ifndef _MSC_VER
const int MsgAutomatCreation::kOidFieldNumber;
const int MsgAutomatCreation::kTypeAutomateFieldNumber;
const int MsgAutomatCreation::kNomFieldNumber;
const int MsgAutomatCreation::kOidParentFieldNumber;
const int MsgAutomatCreation::kOidCampFieldNumber;
const int MsgAutomatCreation::kOidGroupeConnaissanceFieldNumber;
#endif  // !_MSC_VER

MsgAutomatCreation::MsgAutomatCreation() {
  SharedCtor();
}

void MsgAutomatCreation::InitAsDefaultInstance() {
  oid_parent_ = const_cast< ::MsgsSimToClient::MsgAutomatCreation_oid_parent*>(&::MsgsSimToClient::MsgAutomatCreation_oid_parent::default_instance());
}

MsgAutomatCreation::MsgAutomatCreation(const MsgAutomatCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  type_automate_ = 0u;
  nom_ = const_cast< ::std::string*>(&_default_nom_);
  oid_parent_ = NULL;
  oid_camp_ = 0u;
  oid_groupe_connaissance_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatCreation::~MsgAutomatCreation() {
  SharedDtor();
}

void MsgAutomatCreation::SharedDtor() {
  if (nom_ != &_default_nom_) {
    delete nom_;
  }
  if (this != default_instance_) {
    delete oid_parent_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatCreation_descriptor_;
}

const MsgAutomatCreation& MsgAutomatCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatCreation* MsgAutomatCreation::default_instance_ = NULL;

MsgAutomatCreation* MsgAutomatCreation::New() const {
  return new MsgAutomatCreation;
}

void MsgAutomatCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    type_automate_ = 0u;
    if (_has_bit(2)) {
      if (nom_ != &_default_nom_) {
        nom_->clear();
      }
    }
    if (_has_bit(3)) {
      if (oid_parent_ != NULL) oid_parent_->::MsgsSimToClient::MsgAutomatCreation_oid_parent::Clear();
    }
    oid_camp_ = 0u;
    oid_groupe_connaissance_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type_automate;
        break;
      }
      
      // optional uint32 type_automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_automate_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_nom;
        break;
      }
      
      // optional string nom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_nom()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->nom().data(), this->nom().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_oid_parent;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatCreation_oid_parent oid_parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_oid_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_oid_parent()));
        if (input->ExpectTag(40)) goto parse_oid_camp;
        break;
      }
      
      // optional uint32 oid_camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_camp_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_oid_groupe_connaissance;
        break;
      }
      
      // optional uint32 oid_groupe_connaissance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_connaissance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_groupe_connaissance_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional uint32 type_automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_automate(), output);
  }
  
  // optional string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nom(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatCreation_oid_parent oid_parent = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->oid_parent(), output);
  }
  
  // optional uint32 oid_camp = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->oid_camp(), output);
  }
  
  // optional uint32 oid_groupe_connaissance = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oid_groupe_connaissance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional uint32 type_automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_automate(), target);
  }
  
  // optional string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nom(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatCreation_oid_parent oid_parent = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->oid_parent(), target);
  }
  
  // optional uint32 oid_camp = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->oid_camp(), target);
  }
  
  // optional uint32 oid_groupe_connaissance = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oid_groupe_connaissance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional uint32 type_automate = 2;
    if (has_type_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_automate());
    }
    
    // optional string nom = 3;
    if (has_nom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nom());
    }
    
    // optional .MsgsSimToClient.MsgAutomatCreation_oid_parent oid_parent = 4;
    if (has_oid_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oid_parent());
    }
    
    // optional uint32 oid_camp = 5;
    if (has_oid_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_camp());
    }
    
    // optional uint32 oid_groupe_connaissance = 6;
    if (has_oid_groupe_connaissance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_groupe_connaissance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatCreation::MergeFrom(const MsgAutomatCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_type_automate(from.type_automate());
    }
    if (from._has_bit(2)) {
      set_nom(from.nom());
    }
    if (from._has_bit(3)) {
      mutable_oid_parent()->::MsgsSimToClient::MsgAutomatCreation_oid_parent::MergeFrom(from.oid_parent());
    }
    if (from._has_bit(4)) {
      set_oid_camp(from.oid_camp());
    }
    if (from._has_bit(5)) {
      set_oid_groupe_connaissance(from.oid_groupe_connaissance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatCreation::CopyFrom(const MsgAutomatCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatCreation::IsInitialized() const {
  
  if (has_oid_parent()) {
    if (!this->oid_parent().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatCreation::Swap(MsgAutomatCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(type_automate_, other->type_automate_);
    std::swap(nom_, other->nom_);
    std::swap(oid_parent_, other->oid_parent_);
    std::swap(oid_camp_, other->oid_camp_);
    std::swap(oid_groupe_connaissance_, other->oid_groupe_connaissance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatCreation_descriptor_;
  metadata.reflection = MsgAutomatCreation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RulesOfEngagement_Value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RulesOfEngagement_Value_descriptor_;
}
bool RulesOfEngagement_Value_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RulesOfEngagement_Value RulesOfEngagement::none_roe;
const RulesOfEngagement_Value RulesOfEngagement::tir_libre;
const RulesOfEngagement_Value RulesOfEngagement::tir_sur_riposte;
const RulesOfEngagement_Value RulesOfEngagement::tir_interdit;
const RulesOfEngagement_Value RulesOfEngagement::Value_MIN;
const RulesOfEngagement_Value RulesOfEngagement::Value_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

RulesOfEngagement::RulesOfEngagement() {
  SharedCtor();
}

void RulesOfEngagement::InitAsDefaultInstance() {
}

RulesOfEngagement::RulesOfEngagement(const RulesOfEngagement& from) {
  SharedCtor();
  MergeFrom(from);
}

void RulesOfEngagement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RulesOfEngagement::~RulesOfEngagement() {
  SharedDtor();
}

void RulesOfEngagement::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* RulesOfEngagement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RulesOfEngagement_descriptor_;
}

const RulesOfEngagement& RulesOfEngagement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

RulesOfEngagement* RulesOfEngagement::default_instance_ = NULL;

RulesOfEngagement* RulesOfEngagement::New() const {
  return new RulesOfEngagement;
}

void RulesOfEngagement::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RulesOfEngagement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RulesOfEngagement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    RulesOfEngagement::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RulesOfEngagement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RulesOfEngagement::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void RulesOfEngagement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RulesOfEngagement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RulesOfEngagement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RulesOfEngagement::MergeFrom(const RulesOfEngagement& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RulesOfEngagement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RulesOfEngagement::CopyFrom(const RulesOfEngagement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RulesOfEngagement::IsInitialized() const {
  
  return true;
}

void RulesOfEngagement::Swap(RulesOfEngagement* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RulesOfEngagement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RulesOfEngagement_descriptor_;
  metadata.reflection = RulesOfEngagement_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ForceRatio_Value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceRatio_Value_descriptor_;
}
bool ForceRatio_Value_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ForceRatio_Value ForceRatio::none_force_ratio;
const ForceRatio_Value ForceRatio::neutre;
const ForceRatio_Value ForceRatio::favorable;
const ForceRatio_Value ForceRatio::defavorable;
const ForceRatio_Value ForceRatio::Value_MIN;
const ForceRatio_Value ForceRatio::Value_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ForceRatio::ForceRatio() {
  SharedCtor();
}

void ForceRatio::InitAsDefaultInstance() {
}

ForceRatio::ForceRatio(const ForceRatio& from) {
  SharedCtor();
  MergeFrom(from);
}

void ForceRatio::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceRatio::~ForceRatio() {
  SharedDtor();
}

void ForceRatio::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ForceRatio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceRatio_descriptor_;
}

const ForceRatio& ForceRatio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

ForceRatio* ForceRatio::default_instance_ = NULL;

ForceRatio* ForceRatio::New() const {
  return new ForceRatio;
}

void ForceRatio::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceRatio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ForceRatio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ForceRatio::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForceRatio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForceRatio::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ForceRatio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceRatio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceRatio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceRatio::MergeFrom(const ForceRatio& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceRatio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceRatio::CopyFrom(const ForceRatio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceRatio::IsInitialized() const {
  
  return true;
}

void ForceRatio::Swap(ForceRatio* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceRatio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceRatio_descriptor_;
  metadata.reflection = ForceRatio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatAttributes::kOidFieldNumber;
const int MsgAutomatAttributes::kEtatAutomateFieldNumber;
const int MsgAutomatAttributes::kRapportDeForceFieldNumber;
const int MsgAutomatAttributes::kCombatDeRencontreFieldNumber;
const int MsgAutomatAttributes::kEtatOperationnelFieldNumber;
const int MsgAutomatAttributes::kRoeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatAttributes::MsgAutomatAttributes() {
  SharedCtor();
}

void MsgAutomatAttributes::InitAsDefaultInstance() {
}

MsgAutomatAttributes::MsgAutomatAttributes(const MsgAutomatAttributes& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatAttributes::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  etat_automate_ = 0;
  rapport_de_force_ = 0;
  combat_de_rencontre_ = 0;
  etat_operationnel_ = 0;
  roe_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatAttributes::~MsgAutomatAttributes() {
  SharedDtor();
}

void MsgAutomatAttributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAutomatAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatAttributes_descriptor_;
}

const MsgAutomatAttributes& MsgAutomatAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgAutomatAttributes* MsgAutomatAttributes::default_instance_ = NULL;

MsgAutomatAttributes* MsgAutomatAttributes::New() const {
  return new MsgAutomatAttributes;
}

void MsgAutomatAttributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    etat_automate_ = 0;
    rapport_de_force_ = 0;
    combat_de_rencontre_ = 0;
    etat_operationnel_ = 0;
    roe_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_etat_automate;
        break;
      }
      
      // optional .Common.EnumAutomatMode etat_automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_automate:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumAutomatMode_IsValid(value)) {
          set_etat_automate(static_cast< Common::EnumAutomatMode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectTag(24)) goto parse_rapport_de_force;
        break;
      }
      
      // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rapport_de_force:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ForceRatio_Value_IsValid(value)) {
          set_rapport_de_force(static_cast< ::MsgsSimToClient::ForceRatio_Value >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_combat_de_rencontre;
        break;
      }
      
      // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_combat_de_rencontre:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumMeetingEngagementStatus_IsValid(value)) {
          set_combat_de_rencontre(static_cast< Common::EnumMeetingEngagementStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_etat_operationnel;
        break;
      }
      
      // optional .Common.EnumOperationalStatus etat_operationnel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_operationnel:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumOperationalStatus_IsValid(value)) {
          set_etat_operationnel(static_cast< Common::EnumOperationalStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_roe;
        break;
      }
      
      // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roe:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::RulesOfEngagement_Value_IsValid(value)) {
          set_roe(static_cast< ::MsgsSimToClient::RulesOfEngagement_Value >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatAttributes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional .Common.EnumAutomatMode etat_automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etat_automate(), output);
  }
  
  // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rapport_de_force(), output);
  }
  
  // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->combat_de_rencontre(), output);
  }
  
  // optional .Common.EnumOperationalStatus etat_operationnel = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etat_operationnel(), output);
  }
  
  // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->roe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional .Common.EnumAutomatMode etat_automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etat_automate(), target);
  }
  
  // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rapport_de_force(), target);
  }
  
  // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->combat_de_rencontre(), target);
  }
  
  // optional .Common.EnumOperationalStatus etat_operationnel = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etat_operationnel(), target);
  }
  
  // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->roe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatAttributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional .Common.EnumAutomatMode etat_automate = 2;
    if (has_etat_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat_automate());
    }
    
    // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 3;
    if (has_rapport_de_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rapport_de_force());
    }
    
    // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 4;
    if (has_combat_de_rencontre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->combat_de_rencontre());
    }
    
    // optional .Common.EnumOperationalStatus etat_operationnel = 5;
    if (has_etat_operationnel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat_operationnel());
    }
    
    // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 6;
    if (has_roe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roe());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatAttributes::MergeFrom(const MsgAutomatAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_etat_automate(from.etat_automate());
    }
    if (from._has_bit(2)) {
      set_rapport_de_force(from.rapport_de_force());
    }
    if (from._has_bit(3)) {
      set_combat_de_rencontre(from.combat_de_rencontre());
    }
    if (from._has_bit(4)) {
      set_etat_operationnel(from.etat_operationnel());
    }
    if (from._has_bit(5)) {
      set_roe(from.roe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatAttributes::CopyFrom(const MsgAutomatAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAutomatAttributes::Swap(MsgAutomatAttributes* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(etat_automate_, other->etat_automate_);
    std::swap(rapport_de_force_, other->rapport_de_force_);
    std::swap(combat_de_rencontre_, other->combat_de_rencontre_);
    std::swap(etat_operationnel_, other->etat_operationnel_);
    std::swap(roe_, other->roe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatAttributes_descriptor_;
  metadata.reflection = MsgAutomatAttributes_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUnitCreation::_default_nom_;
#ifndef _MSC_VER
const int MsgUnitCreation::kOidFieldNumber;
const int MsgUnitCreation::kTypePionFieldNumber;
const int MsgUnitCreation::kNomFieldNumber;
const int MsgUnitCreation::kOidAutomateFieldNumber;
const int MsgUnitCreation::kPcFieldNumber;
#endif  // !_MSC_VER

MsgUnitCreation::MsgUnitCreation() {
  SharedCtor();
}

void MsgUnitCreation::InitAsDefaultInstance() {
}

MsgUnitCreation::MsgUnitCreation(const MsgUnitCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  type_pion_ = 0u;
  nom_ = const_cast< ::std::string*>(&_default_nom_);
  oid_automate_ = 0u;
  pc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitCreation::~MsgUnitCreation() {
  SharedDtor();
}

void MsgUnitCreation::SharedDtor() {
  if (nom_ != &_default_nom_) {
    delete nom_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitCreation_descriptor_;
}

const MsgUnitCreation& MsgUnitCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitCreation* MsgUnitCreation::default_instance_ = NULL;

MsgUnitCreation* MsgUnitCreation::New() const {
  return new MsgUnitCreation;
}

void MsgUnitCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    type_pion_ = 0u;
    if (_has_bit(2)) {
      if (nom_ != &_default_nom_) {
        nom_->clear();
      }
    }
    oid_automate_ = 0u;
    pc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type_pion;
        break;
      }
      
      // required uint32 type_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_pion_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_nom;
        break;
      }
      
      // required string nom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_nom()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->nom().data(), this->nom().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_oid_automate;
        break;
      }
      
      // required uint32 oid_automate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_automate_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_pc;
        break;
      }
      
      // required bool pc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &pc_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required uint32 type_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_pion(), output);
  }
  
  // required string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nom(), output);
  }
  
  // required uint32 oid_automate = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oid_automate(), output);
  }
  
  // required bool pc = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required uint32 type_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_pion(), target);
  }
  
  // required string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nom(), target);
  }
  
  // required uint32 oid_automate = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oid_automate(), target);
  }
  
  // required bool pc = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required uint32 type_pion = 2;
    if (has_type_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_pion());
    }
    
    // required string nom = 3;
    if (has_nom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nom());
    }
    
    // required uint32 oid_automate = 4;
    if (has_oid_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_automate());
    }
    
    // required bool pc = 5;
    if (has_pc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitCreation::MergeFrom(const MsgUnitCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_type_pion(from.type_pion());
    }
    if (from._has_bit(2)) {
      set_nom(from.nom());
    }
    if (from._has_bit(3)) {
      set_oid_automate(from.oid_automate());
    }
    if (from._has_bit(4)) {
      set_pc(from.pc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitCreation::CopyFrom(const MsgUnitCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgUnitCreation::Swap(MsgUnitCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(type_pion_, other->type_pion_);
    std::swap(nom_, other->nom_);
    std::swap(oid_automate_, other->oid_automate_);
    std::swap(pc_, other->pc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitCreation_descriptor_;
  metadata.reflection = MsgUnitCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BorrowedEquipments_BorrowedEquipment::kOidPionPreteurFieldNumber;
const int BorrowedEquipments_BorrowedEquipment::kTypeEquipementFieldNumber;
const int BorrowedEquipments_BorrowedEquipment::kNombreFieldNumber;
#endif  // !_MSC_VER

BorrowedEquipments_BorrowedEquipment::BorrowedEquipments_BorrowedEquipment() {
  SharedCtor();
}

void BorrowedEquipments_BorrowedEquipment::InitAsDefaultInstance() {
}

BorrowedEquipments_BorrowedEquipment::BorrowedEquipments_BorrowedEquipment(const BorrowedEquipments_BorrowedEquipment& from) {
  SharedCtor();
  MergeFrom(from);
}

void BorrowedEquipments_BorrowedEquipment::SharedCtor() {
  _cached_size_ = 0;
  oid_pion_preteur_ = 0u;
  type_equipement_ = 0u;
  nombre_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BorrowedEquipments_BorrowedEquipment::~BorrowedEquipments_BorrowedEquipment() {
  SharedDtor();
}

void BorrowedEquipments_BorrowedEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BorrowedEquipments_BorrowedEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BorrowedEquipments_BorrowedEquipment_descriptor_;
}

const BorrowedEquipments_BorrowedEquipment& BorrowedEquipments_BorrowedEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

BorrowedEquipments_BorrowedEquipment* BorrowedEquipments_BorrowedEquipment::default_instance_ = NULL;

BorrowedEquipments_BorrowedEquipment* BorrowedEquipments_BorrowedEquipment::New() const {
  return new BorrowedEquipments_BorrowedEquipment;
}

void BorrowedEquipments_BorrowedEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_pion_preteur_ = 0u;
    type_equipement_ = 0u;
    nombre_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BorrowedEquipments_BorrowedEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid_pion_preteur = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_pion_preteur_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type_equipement;
        break;
      }
      
      // required uint32 type_equipement = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_equipement:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_equipement_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nombre;
        break;
      }
      
      // required int32 nombre = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nombre:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nombre_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BorrowedEquipments_BorrowedEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BorrowedEquipments_BorrowedEquipment::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid_pion_preteur = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid_pion_preteur(), output);
  }
  
  // required uint32 type_equipement = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_equipement(), output);
  }
  
  // required int32 nombre = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nombre(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BorrowedEquipments_BorrowedEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid_pion_preteur = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid_pion_preteur(), target);
  }
  
  // required uint32 type_equipement = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_equipement(), target);
  }
  
  // required int32 nombre = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nombre(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BorrowedEquipments_BorrowedEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid_pion_preteur = 1;
    if (has_oid_pion_preteur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_pion_preteur());
    }
    
    // required uint32 type_equipement = 2;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_equipement());
    }
    
    // required int32 nombre = 3;
    if (has_nombre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nombre());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BorrowedEquipments_BorrowedEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BorrowedEquipments_BorrowedEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BorrowedEquipments_BorrowedEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BorrowedEquipments_BorrowedEquipment::MergeFrom(const BorrowedEquipments_BorrowedEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_pion_preteur(from.oid_pion_preteur());
    }
    if (from._has_bit(1)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(2)) {
      set_nombre(from.nombre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BorrowedEquipments_BorrowedEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BorrowedEquipments_BorrowedEquipment::CopyFrom(const BorrowedEquipments_BorrowedEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorrowedEquipments_BorrowedEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void BorrowedEquipments_BorrowedEquipment::Swap(BorrowedEquipments_BorrowedEquipment* other) {
  if (other != this) {
    std::swap(oid_pion_preteur_, other->oid_pion_preteur_);
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nombre_, other->nombre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BorrowedEquipments_BorrowedEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BorrowedEquipments_BorrowedEquipment_descriptor_;
  metadata.reflection = BorrowedEquipments_BorrowedEquipment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BorrowedEquipments::kElemFieldNumber;
#endif  // !_MSC_VER

BorrowedEquipments::BorrowedEquipments() {
  SharedCtor();
}

void BorrowedEquipments::InitAsDefaultInstance() {
}

BorrowedEquipments::BorrowedEquipments(const BorrowedEquipments& from) {
  SharedCtor();
  MergeFrom(from);
}

void BorrowedEquipments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BorrowedEquipments::~BorrowedEquipments() {
  SharedDtor();
}

void BorrowedEquipments::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BorrowedEquipments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BorrowedEquipments_descriptor_;
}

const BorrowedEquipments& BorrowedEquipments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

BorrowedEquipments* BorrowedEquipments::default_instance_ = NULL;

BorrowedEquipments* BorrowedEquipments::New() const {
  return new BorrowedEquipments;
}

void BorrowedEquipments::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BorrowedEquipments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.BorrowedEquipments.BorrowedEquipment elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BorrowedEquipments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BorrowedEquipments::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.BorrowedEquipments.BorrowedEquipment elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BorrowedEquipments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.BorrowedEquipments.BorrowedEquipment elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BorrowedEquipments::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.BorrowedEquipments.BorrowedEquipment elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BorrowedEquipments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BorrowedEquipments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BorrowedEquipments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BorrowedEquipments::MergeFrom(const BorrowedEquipments& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BorrowedEquipments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BorrowedEquipments::CopyFrom(const BorrowedEquipments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BorrowedEquipments::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void BorrowedEquipments::Swap(BorrowedEquipments* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BorrowedEquipments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BorrowedEquipments_descriptor_;
  metadata.reflection = BorrowedEquipments_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LentEquipments_LentEquipment::kOidPionEmprunteurFieldNumber;
const int LentEquipments_LentEquipment::kTypeEquipementFieldNumber;
const int LentEquipments_LentEquipment::kNombreFieldNumber;
#endif  // !_MSC_VER

LentEquipments_LentEquipment::LentEquipments_LentEquipment() {
  SharedCtor();
}

void LentEquipments_LentEquipment::InitAsDefaultInstance() {
}

LentEquipments_LentEquipment::LentEquipments_LentEquipment(const LentEquipments_LentEquipment& from) {
  SharedCtor();
  MergeFrom(from);
}

void LentEquipments_LentEquipment::SharedCtor() {
  _cached_size_ = 0;
  oid_pion_emprunteur_ = 0u;
  type_equipement_ = 0u;
  nombre_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LentEquipments_LentEquipment::~LentEquipments_LentEquipment() {
  SharedDtor();
}

void LentEquipments_LentEquipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LentEquipments_LentEquipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LentEquipments_LentEquipment_descriptor_;
}

const LentEquipments_LentEquipment& LentEquipments_LentEquipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

LentEquipments_LentEquipment* LentEquipments_LentEquipment::default_instance_ = NULL;

LentEquipments_LentEquipment* LentEquipments_LentEquipment::New() const {
  return new LentEquipments_LentEquipment;
}

void LentEquipments_LentEquipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_pion_emprunteur_ = 0u;
    type_equipement_ = 0u;
    nombre_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LentEquipments_LentEquipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid_pion_emprunteur = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_pion_emprunteur_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type_equipement;
        break;
      }
      
      // required uint32 type_equipement = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_equipement:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_equipement_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nombre;
        break;
      }
      
      // required int32 nombre = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nombre:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nombre_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LentEquipments_LentEquipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    LentEquipments_LentEquipment::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid_pion_emprunteur = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid_pion_emprunteur(), output);
  }
  
  // required uint32 type_equipement = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_equipement(), output);
  }
  
  // required int32 nombre = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nombre(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LentEquipments_LentEquipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid_pion_emprunteur = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid_pion_emprunteur(), target);
  }
  
  // required uint32 type_equipement = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_equipement(), target);
  }
  
  // required int32 nombre = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nombre(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LentEquipments_LentEquipment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid_pion_emprunteur = 1;
    if (has_oid_pion_emprunteur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_pion_emprunteur());
    }
    
    // required uint32 type_equipement = 2;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_equipement());
    }
    
    // required int32 nombre = 3;
    if (has_nombre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nombre());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void LentEquipments_LentEquipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LentEquipments_LentEquipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LentEquipments_LentEquipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LentEquipments_LentEquipment::MergeFrom(const LentEquipments_LentEquipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_pion_emprunteur(from.oid_pion_emprunteur());
    }
    if (from._has_bit(1)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(2)) {
      set_nombre(from.nombre());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LentEquipments_LentEquipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LentEquipments_LentEquipment::CopyFrom(const LentEquipments_LentEquipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LentEquipments_LentEquipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void LentEquipments_LentEquipment::Swap(LentEquipments_LentEquipment* other) {
  if (other != this) {
    std::swap(oid_pion_emprunteur_, other->oid_pion_emprunteur_);
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nombre_, other->nombre_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LentEquipments_LentEquipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LentEquipments_LentEquipment_descriptor_;
  metadata.reflection = LentEquipments_LentEquipment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int LentEquipments::kElemFieldNumber;
#endif  // !_MSC_VER

LentEquipments::LentEquipments() {
  SharedCtor();
}

void LentEquipments::InitAsDefaultInstance() {
}

LentEquipments::LentEquipments(const LentEquipments& from) {
  SharedCtor();
  MergeFrom(from);
}

void LentEquipments::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LentEquipments::~LentEquipments() {
  SharedDtor();
}

void LentEquipments::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* LentEquipments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LentEquipments_descriptor_;
}

const LentEquipments& LentEquipments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

LentEquipments* LentEquipments::default_instance_ = NULL;

LentEquipments* LentEquipments::New() const {
  return new LentEquipments;
}

void LentEquipments::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LentEquipments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.LentEquipments.LentEquipment elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LentEquipments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    LentEquipments::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.LentEquipments.LentEquipment elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LentEquipments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.LentEquipments.LentEquipment elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LentEquipments::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.LentEquipments.LentEquipment elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void LentEquipments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LentEquipments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LentEquipments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LentEquipments::MergeFrom(const LentEquipments& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LentEquipments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LentEquipments::CopyFrom(const LentEquipments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LentEquipments::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void LentEquipments::Swap(LentEquipments* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LentEquipments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LentEquipments_descriptor_;
  metadata.reflection = LentEquipments_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceDotations_ResourceDotation::kRessourceIdFieldNumber;
const int ResourceDotations_ResourceDotation::kQuantiteDisponibleFieldNumber;
#endif  // !_MSC_VER

ResourceDotations_ResourceDotation::ResourceDotations_ResourceDotation() {
  SharedCtor();
}

void ResourceDotations_ResourceDotation::InitAsDefaultInstance() {
}

ResourceDotations_ResourceDotation::ResourceDotations_ResourceDotation(const ResourceDotations_ResourceDotation& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceDotations_ResourceDotation::SharedCtor() {
  _cached_size_ = 0;
  ressource_id_ = 0u;
  quantite_disponible_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceDotations_ResourceDotation::~ResourceDotations_ResourceDotation() {
  SharedDtor();
}

void ResourceDotations_ResourceDotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ResourceDotations_ResourceDotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDotations_ResourceDotation_descriptor_;
}

const ResourceDotations_ResourceDotation& ResourceDotations_ResourceDotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

ResourceDotations_ResourceDotation* ResourceDotations_ResourceDotation::default_instance_ = NULL;

ResourceDotations_ResourceDotation* ResourceDotations_ResourceDotation::New() const {
  return new ResourceDotations_ResourceDotation;
}

void ResourceDotations_ResourceDotation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ressource_id_ = 0u;
    quantite_disponible_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceDotations_ResourceDotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ressource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &ressource_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_quantite_disponible;
        break;
      }
      
      // required int32 quantite_disponible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantite_disponible:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantite_disponible_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceDotations_ResourceDotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceDotations_ResourceDotation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 ressource_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ressource_id(), output);
  }
  
  // required int32 quantite_disponible = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantite_disponible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceDotations_ResourceDotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ressource_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ressource_id(), target);
  }
  
  // required int32 quantite_disponible = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantite_disponible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceDotations_ResourceDotation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ressource_id = 1;
    if (has_ressource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ressource_id());
    }
    
    // required int32 quantite_disponible = 2;
    if (has_quantite_disponible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantite_disponible());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceDotations_ResourceDotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceDotations_ResourceDotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceDotations_ResourceDotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceDotations_ResourceDotation::MergeFrom(const ResourceDotations_ResourceDotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ressource_id(from.ressource_id());
    }
    if (from._has_bit(1)) {
      set_quantite_disponible(from.quantite_disponible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceDotations_ResourceDotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDotations_ResourceDotation::CopyFrom(const ResourceDotations_ResourceDotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDotations_ResourceDotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ResourceDotations_ResourceDotation::Swap(ResourceDotations_ResourceDotation* other) {
  if (other != this) {
    std::swap(ressource_id_, other->ressource_id_);
    std::swap(quantite_disponible_, other->quantite_disponible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceDotations_ResourceDotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDotations_ResourceDotation_descriptor_;
  metadata.reflection = ResourceDotations_ResourceDotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResourceDotations::kElemFieldNumber;
#endif  // !_MSC_VER

ResourceDotations::ResourceDotations() {
  SharedCtor();
}

void ResourceDotations::InitAsDefaultInstance() {
}

ResourceDotations::ResourceDotations(const ResourceDotations& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceDotations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceDotations::~ResourceDotations() {
  SharedDtor();
}

void ResourceDotations::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ResourceDotations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDotations_descriptor_;
}

const ResourceDotations& ResourceDotations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

ResourceDotations* ResourceDotations::default_instance_ = NULL;

ResourceDotations* ResourceDotations::New() const {
  return new ResourceDotations;
}

void ResourceDotations::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceDotations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.ResourceDotations.ResourceDotation elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceDotations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceDotations::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.ResourceDotations.ResourceDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceDotations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.ResourceDotations.ResourceDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceDotations::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.ResourceDotations.ResourceDotation elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceDotations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceDotations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceDotations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceDotations::MergeFrom(const ResourceDotations& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceDotations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDotations::CopyFrom(const ResourceDotations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDotations::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceDotations::Swap(ResourceDotations* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceDotations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDotations_descriptor_;
  metadata.reflection = ResourceDotations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentDotations_EquipmentDotation::kTypeEquipementFieldNumber;
const int EquipmentDotations_EquipmentDotation::kNbDisponiblesFieldNumber;
const int EquipmentDotations_EquipmentDotation::kNbIndisponiblesFieldNumber;
const int EquipmentDotations_EquipmentDotation::kNbReparablesFieldNumber;
const int EquipmentDotations_EquipmentDotation::kNbDansChaineMaintenanceFieldNumber;
const int EquipmentDotations_EquipmentDotation::kNbPrisonniersFieldNumber;
#endif  // !_MSC_VER

EquipmentDotations_EquipmentDotation::EquipmentDotations_EquipmentDotation() {
  SharedCtor();
}

void EquipmentDotations_EquipmentDotation::InitAsDefaultInstance() {
}

EquipmentDotations_EquipmentDotation::EquipmentDotations_EquipmentDotation(const EquipmentDotations_EquipmentDotation& from) {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentDotations_EquipmentDotation::SharedCtor() {
  _cached_size_ = 0;
  type_equipement_ = 0u;
  nb_disponibles_ = 0;
  nb_indisponibles_ = 0;
  nb_reparables_ = 0;
  nb_dans_chaine_maintenance_ = 0;
  nb_prisonniers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentDotations_EquipmentDotation::~EquipmentDotations_EquipmentDotation() {
  SharedDtor();
}

void EquipmentDotations_EquipmentDotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EquipmentDotations_EquipmentDotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentDotations_EquipmentDotation_descriptor_;
}

const EquipmentDotations_EquipmentDotation& EquipmentDotations_EquipmentDotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

EquipmentDotations_EquipmentDotation* EquipmentDotations_EquipmentDotation::default_instance_ = NULL;

EquipmentDotations_EquipmentDotation* EquipmentDotations_EquipmentDotation::New() const {
  return new EquipmentDotations_EquipmentDotation;
}

void EquipmentDotations_EquipmentDotation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_equipement_ = 0u;
    nb_disponibles_ = 0;
    nb_indisponibles_ = 0;
    nb_reparables_ = 0;
    nb_dans_chaine_maintenance_ = 0;
    nb_prisonniers_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentDotations_EquipmentDotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type_equipement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &type_equipement_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nb_disponibles;
        break;
      }
      
      // required int32 nb_disponibles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_disponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_disponibles_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nb_indisponibles;
        break;
      }
      
      // required int32 nb_indisponibles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_indisponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_indisponibles_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nb_reparables;
        break;
      }
      
      // required int32 nb_reparables = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_reparables:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_reparables_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nb_dans_chaine_maintenance;
        break;
      }
      
      // required int32 nb_dans_chaine_maintenance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_dans_chaine_maintenance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_dans_chaine_maintenance_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nb_prisonniers;
        break;
      }
      
      // required int32 nb_prisonniers = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_prisonniers:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_prisonniers_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentDotations_EquipmentDotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EquipmentDotations_EquipmentDotation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 type_equipement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type_equipement(), output);
  }
  
  // required int32 nb_disponibles = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nb_disponibles(), output);
  }
  
  // required int32 nb_indisponibles = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nb_indisponibles(), output);
  }
  
  // required int32 nb_reparables = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nb_reparables(), output);
  }
  
  // required int32 nb_dans_chaine_maintenance = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nb_dans_chaine_maintenance(), output);
  }
  
  // required int32 nb_prisonniers = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nb_prisonniers(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentDotations_EquipmentDotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type_equipement = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type_equipement(), target);
  }
  
  // required int32 nb_disponibles = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nb_disponibles(), target);
  }
  
  // required int32 nb_indisponibles = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nb_indisponibles(), target);
  }
  
  // required int32 nb_reparables = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nb_reparables(), target);
  }
  
  // required int32 nb_dans_chaine_maintenance = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nb_dans_chaine_maintenance(), target);
  }
  
  // required int32 nb_prisonniers = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nb_prisonniers(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentDotations_EquipmentDotation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type_equipement = 1;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_equipement());
    }
    
    // required int32 nb_disponibles = 2;
    if (has_nb_disponibles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_disponibles());
    }
    
    // required int32 nb_indisponibles = 3;
    if (has_nb_indisponibles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_indisponibles());
    }
    
    // required int32 nb_reparables = 4;
    if (has_nb_reparables()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_reparables());
    }
    
    // required int32 nb_dans_chaine_maintenance = 5;
    if (has_nb_dans_chaine_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_dans_chaine_maintenance());
    }
    
    // required int32 nb_prisonniers = 6;
    if (has_nb_prisonniers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_prisonniers());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EquipmentDotations_EquipmentDotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentDotations_EquipmentDotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentDotations_EquipmentDotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentDotations_EquipmentDotation::MergeFrom(const EquipmentDotations_EquipmentDotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(1)) {
      set_nb_disponibles(from.nb_disponibles());
    }
    if (from._has_bit(2)) {
      set_nb_indisponibles(from.nb_indisponibles());
    }
    if (from._has_bit(3)) {
      set_nb_reparables(from.nb_reparables());
    }
    if (from._has_bit(4)) {
      set_nb_dans_chaine_maintenance(from.nb_dans_chaine_maintenance());
    }
    if (from._has_bit(5)) {
      set_nb_prisonniers(from.nb_prisonniers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentDotations_EquipmentDotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentDotations_EquipmentDotation::CopyFrom(const EquipmentDotations_EquipmentDotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentDotations_EquipmentDotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void EquipmentDotations_EquipmentDotation::Swap(EquipmentDotations_EquipmentDotation* other) {
  if (other != this) {
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nb_disponibles_, other->nb_disponibles_);
    std::swap(nb_indisponibles_, other->nb_indisponibles_);
    std::swap(nb_reparables_, other->nb_reparables_);
    std::swap(nb_dans_chaine_maintenance_, other->nb_dans_chaine_maintenance_);
    std::swap(nb_prisonniers_, other->nb_prisonniers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentDotations_EquipmentDotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentDotations_EquipmentDotation_descriptor_;
  metadata.reflection = EquipmentDotations_EquipmentDotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EquipmentDotations::kElemFieldNumber;
#endif  // !_MSC_VER

EquipmentDotations::EquipmentDotations() {
  SharedCtor();
}

void EquipmentDotations::InitAsDefaultInstance() {
}

EquipmentDotations::EquipmentDotations(const EquipmentDotations& from) {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentDotations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentDotations::~EquipmentDotations() {
  SharedDtor();
}

void EquipmentDotations::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EquipmentDotations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentDotations_descriptor_;
}

const EquipmentDotations& EquipmentDotations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

EquipmentDotations* EquipmentDotations::default_instance_ = NULL;

EquipmentDotations* EquipmentDotations::New() const {
  return new EquipmentDotations;
}

void EquipmentDotations::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentDotations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.EquipmentDotations.EquipmentDotation elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentDotations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EquipmentDotations::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.EquipmentDotations.EquipmentDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentDotations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.EquipmentDotations.EquipmentDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentDotations::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.EquipmentDotations.EquipmentDotation elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EquipmentDotations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentDotations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentDotations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentDotations::MergeFrom(const EquipmentDotations& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentDotations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentDotations::CopyFrom(const EquipmentDotations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentDotations::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentDotations::Swap(EquipmentDotations* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentDotations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentDotations_descriptor_;
  metadata.reflection = EquipmentDotations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HumanDotations_HumanDotation::kRangFieldNumber;
const int HumanDotations_HumanDotation::kNbTotalFieldNumber;
const int HumanDotations_HumanDotation::kNbOperationnelsFieldNumber;
const int HumanDotations_HumanDotation::kNbMortsFieldNumber;
const int HumanDotations_HumanDotation::kNbBlessesFieldNumber;
const int HumanDotations_HumanDotation::kNbBlessesMentauxFieldNumber;
const int HumanDotations_HumanDotation::kNbContaminesNbcFieldNumber;
const int HumanDotations_HumanDotation::kNbDansChaineSanteFieldNumber;
const int HumanDotations_HumanDotation::kNbUtilisesPourMaintenanceFieldNumber;
#endif  // !_MSC_VER

HumanDotations_HumanDotation::HumanDotations_HumanDotation() {
  SharedCtor();
}

void HumanDotations_HumanDotation::InitAsDefaultInstance() {
}

HumanDotations_HumanDotation::HumanDotations_HumanDotation(const HumanDotations_HumanDotation& from) {
  SharedCtor();
  MergeFrom(from);
}

void HumanDotations_HumanDotation::SharedCtor() {
  _cached_size_ = 0;
  rang_ = 0;
  nb_total_ = 0;
  nb_operationnels_ = 0;
  nb_morts_ = 0;
  nb_blesses_ = 0;
  nb_blesses_mentaux_ = 0;
  nb_contamines_nbc_ = 0;
  nb_dans_chaine_sante_ = 0;
  nb_utilises_pour_maintenance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanDotations_HumanDotation::~HumanDotations_HumanDotation() {
  SharedDtor();
}

void HumanDotations_HumanDotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HumanDotations_HumanDotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanDotations_HumanDotation_descriptor_;
}

const HumanDotations_HumanDotation& HumanDotations_HumanDotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

HumanDotations_HumanDotation* HumanDotations_HumanDotation::default_instance_ = NULL;

HumanDotations_HumanDotation* HumanDotations_HumanDotation::New() const {
  return new HumanDotations_HumanDotation;
}

void HumanDotations_HumanDotation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rang_ = 0;
    nb_total_ = 0;
    nb_operationnels_ = 0;
    nb_morts_ = 0;
    nb_blesses_ = 0;
    nb_blesses_mentaux_ = 0;
    nb_contamines_nbc_ = 0;
    nb_dans_chaine_sante_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nb_utilises_pour_maintenance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanDotations_HumanDotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.EnumHumanRank rang = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanRank_IsValid(value)) {
          set_rang(static_cast< Common::EnumHumanRank >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_nb_total;
        break;
      }
      
      // required int32 nb_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_total:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_total_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nb_operationnels;
        break;
      }
      
      // required int32 nb_operationnels = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_operationnels:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_operationnels_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nb_morts;
        break;
      }
      
      // required int32 nb_morts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_morts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_morts_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nb_blesses;
        break;
      }
      
      // required int32 nb_blesses = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_blesses:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_blesses_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nb_blesses_mentaux;
        break;
      }
      
      // required int32 nb_blesses_mentaux = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_blesses_mentaux:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_blesses_mentaux_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_nb_contamines_nbc;
        break;
      }
      
      // required int32 nb_contamines_nbc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_contamines_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_contamines_nbc_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nb_dans_chaine_sante;
        break;
      }
      
      // required int32 nb_dans_chaine_sante = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_dans_chaine_sante:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_dans_chaine_sante_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nb_utilises_pour_maintenance;
        break;
      }
      
      // required int32 nb_utilises_pour_maintenance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_utilises_pour_maintenance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_utilises_pour_maintenance_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanDotations_HumanDotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HumanDotations_HumanDotation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.EnumHumanRank rang = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rang(), output);
  }
  
  // required int32 nb_total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nb_total(), output);
  }
  
  // required int32 nb_operationnels = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nb_operationnels(), output);
  }
  
  // required int32 nb_morts = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nb_morts(), output);
  }
  
  // required int32 nb_blesses = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nb_blesses(), output);
  }
  
  // required int32 nb_blesses_mentaux = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nb_blesses_mentaux(), output);
  }
  
  // required int32 nb_contamines_nbc = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nb_contamines_nbc(), output);
  }
  
  // required int32 nb_dans_chaine_sante = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nb_dans_chaine_sante(), output);
  }
  
  // required int32 nb_utilises_pour_maintenance = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nb_utilises_pour_maintenance(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanDotations_HumanDotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.EnumHumanRank rang = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rang(), target);
  }
  
  // required int32 nb_total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nb_total(), target);
  }
  
  // required int32 nb_operationnels = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nb_operationnels(), target);
  }
  
  // required int32 nb_morts = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nb_morts(), target);
  }
  
  // required int32 nb_blesses = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nb_blesses(), target);
  }
  
  // required int32 nb_blesses_mentaux = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nb_blesses_mentaux(), target);
  }
  
  // required int32 nb_contamines_nbc = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nb_contamines_nbc(), target);
  }
  
  // required int32 nb_dans_chaine_sante = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nb_dans_chaine_sante(), target);
  }
  
  // required int32 nb_utilises_pour_maintenance = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nb_utilises_pour_maintenance(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanDotations_HumanDotation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.EnumHumanRank rang = 1;
    if (has_rang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rang());
    }
    
    // required int32 nb_total = 2;
    if (has_nb_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_total());
    }
    
    // required int32 nb_operationnels = 3;
    if (has_nb_operationnels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_operationnels());
    }
    
    // required int32 nb_morts = 4;
    if (has_nb_morts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_morts());
    }
    
    // required int32 nb_blesses = 5;
    if (has_nb_blesses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_blesses());
    }
    
    // required int32 nb_blesses_mentaux = 6;
    if (has_nb_blesses_mentaux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_blesses_mentaux());
    }
    
    // required int32 nb_contamines_nbc = 7;
    if (has_nb_contamines_nbc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_contamines_nbc());
    }
    
    // required int32 nb_dans_chaine_sante = 8;
    if (has_nb_dans_chaine_sante()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_dans_chaine_sante());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 nb_utilises_pour_maintenance = 9;
    if (has_nb_utilises_pour_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_utilises_pour_maintenance());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HumanDotations_HumanDotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanDotations_HumanDotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanDotations_HumanDotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanDotations_HumanDotation::MergeFrom(const HumanDotations_HumanDotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rang(from.rang());
    }
    if (from._has_bit(1)) {
      set_nb_total(from.nb_total());
    }
    if (from._has_bit(2)) {
      set_nb_operationnels(from.nb_operationnels());
    }
    if (from._has_bit(3)) {
      set_nb_morts(from.nb_morts());
    }
    if (from._has_bit(4)) {
      set_nb_blesses(from.nb_blesses());
    }
    if (from._has_bit(5)) {
      set_nb_blesses_mentaux(from.nb_blesses_mentaux());
    }
    if (from._has_bit(6)) {
      set_nb_contamines_nbc(from.nb_contamines_nbc());
    }
    if (from._has_bit(7)) {
      set_nb_dans_chaine_sante(from.nb_dans_chaine_sante());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nb_utilises_pour_maintenance(from.nb_utilises_pour_maintenance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanDotations_HumanDotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanDotations_HumanDotation::CopyFrom(const HumanDotations_HumanDotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanDotations_HumanDotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;
  
  return true;
}

void HumanDotations_HumanDotation::Swap(HumanDotations_HumanDotation* other) {
  if (other != this) {
    std::swap(rang_, other->rang_);
    std::swap(nb_total_, other->nb_total_);
    std::swap(nb_operationnels_, other->nb_operationnels_);
    std::swap(nb_morts_, other->nb_morts_);
    std::swap(nb_blesses_, other->nb_blesses_);
    std::swap(nb_blesses_mentaux_, other->nb_blesses_mentaux_);
    std::swap(nb_contamines_nbc_, other->nb_contamines_nbc_);
    std::swap(nb_dans_chaine_sante_, other->nb_dans_chaine_sante_);
    std::swap(nb_utilises_pour_maintenance_, other->nb_utilises_pour_maintenance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanDotations_HumanDotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanDotations_HumanDotation_descriptor_;
  metadata.reflection = HumanDotations_HumanDotation_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int HumanDotations::kElemFieldNumber;
#endif  // !_MSC_VER

HumanDotations::HumanDotations() {
  SharedCtor();
}

void HumanDotations::InitAsDefaultInstance() {
}

HumanDotations::HumanDotations(const HumanDotations& from) {
  SharedCtor();
  MergeFrom(from);
}

void HumanDotations::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HumanDotations::~HumanDotations() {
  SharedDtor();
}

void HumanDotations::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* HumanDotations::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HumanDotations_descriptor_;
}

const HumanDotations& HumanDotations::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

HumanDotations* HumanDotations::default_instance_ = NULL;

HumanDotations* HumanDotations::New() const {
  return new HumanDotations;
}

void HumanDotations::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HumanDotations::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.HumanDotations.HumanDotation elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HumanDotations::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    HumanDotations::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.HumanDotations.HumanDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HumanDotations::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.HumanDotations.HumanDotation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HumanDotations::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.HumanDotations.HumanDotation elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void HumanDotations::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HumanDotations* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HumanDotations*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HumanDotations::MergeFrom(const HumanDotations& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HumanDotations::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HumanDotations::CopyFrom(const HumanDotations& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HumanDotations::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void HumanDotations::Swap(HumanDotations* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HumanDotations::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HumanDotations_descriptor_;
  metadata.reflection = HumanDotations_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContaminationState::kPercentageFieldNumber;
const int ContaminationState::kQuantityFieldNumber;
#endif  // !_MSC_VER

ContaminationState::ContaminationState() {
  SharedCtor();
}

void ContaminationState::InitAsDefaultInstance() {
}

ContaminationState::ContaminationState(const ContaminationState& from) {
  SharedCtor();
  MergeFrom(from);
}

void ContaminationState::SharedCtor() {
  _cached_size_ = 0;
  percentage_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContaminationState::~ContaminationState() {
  SharedDtor();
}

void ContaminationState::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ContaminationState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContaminationState_descriptor_;
}

const ContaminationState& ContaminationState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

ContaminationState* ContaminationState::default_instance_ = NULL;

ContaminationState* ContaminationState::New() const {
  return new ContaminationState;
}

void ContaminationState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    percentage_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContaminationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 percentage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &percentage_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_quantity;
        break;
      }
      
      // optional float quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_quantity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &quantity_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContaminationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ContaminationState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 percentage = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->percentage(), output);
  }
  
  // optional float quantity = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContaminationState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 percentage = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->percentage(), target);
  }
  
  // optional float quantity = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContaminationState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 percentage = 1;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }
    
    // optional float quantity = 2;
    if (has_quantity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ContaminationState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContaminationState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContaminationState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContaminationState::MergeFrom(const ContaminationState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_percentage(from.percentage());
    }
    if (from._has_bit(1)) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContaminationState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContaminationState::CopyFrom(const ContaminationState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContaminationState::IsInitialized() const {
  
  return true;
}

void ContaminationState::Swap(ContaminationState* other) {
  if (other != this) {
    std::swap(percentage_, other->percentage_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContaminationState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContaminationState_descriptor_;
  metadata.reflection = ContaminationState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Communication::kJammedFieldNumber;
const int Communication::kKnowledgeGroupFieldNumber;
#endif  // !_MSC_VER

Communication::Communication() {
  SharedCtor();
}

void Communication::InitAsDefaultInstance() {
}

Communication::Communication(const Communication& from) {
  SharedCtor();
  MergeFrom(from);
}

void Communication::SharedCtor() {
  _cached_size_ = 0;
  jammed_ = false;
  knowledge_group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Communication::~Communication() {
  SharedDtor();
}

void Communication::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Communication::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Communication_descriptor_;
}

const Communication& Communication::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

Communication* Communication::default_instance_ = NULL;

Communication* Communication::New() const {
  return new Communication;
}

void Communication::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jammed_ = false;
    knowledge_group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Communication::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool jammed = 1 [default = false];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &jammed_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_knowledge_group;
        break;
      }
      
      // optional int32 knowledge_group = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &knowledge_group_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Communication::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Communication::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool jammed = 1 [default = false];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->jammed(), output);
  }
  
  // optional int32 knowledge_group = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->knowledge_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Communication::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool jammed = 1 [default = false];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->jammed(), target);
  }
  
  // optional int32 knowledge_group = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->knowledge_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Communication::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool jammed = 1 [default = false];
    if (has_jammed()) {
      total_size += 1 + 1;
    }
    
    // optional int32 knowledge_group = 2 [default = 0];
    if (has_knowledge_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->knowledge_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Communication::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Communication* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Communication*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Communication::MergeFrom(const Communication& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_jammed(from.jammed());
    }
    if (from._has_bit(1)) {
      set_knowledge_group(from.knowledge_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Communication::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Communication::CopyFrom(const Communication& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Communication::IsInitialized() const {
  
  return true;
}

void Communication::Swap(Communication* other) {
  if (other != this) {
    std::swap(jammed_, other->jammed_);
    std::swap(knowledge_group_, other->knowledge_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Communication::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Communication_descriptor_;
  metadata.reflection = Communication_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_Posture_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitAttributes_Posture_descriptor_;
}
bool MsgUnitAttributes_Posture_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgUnitAttributes_Posture MsgUnitAttributes::mouvement;
const MsgUnitAttributes_Posture MsgUnitAttributes::mouvement_discret;
const MsgUnitAttributes_Posture MsgUnitAttributes::arret;
const MsgUnitAttributes_Posture MsgUnitAttributes::poste_reflexe;
const MsgUnitAttributes_Posture MsgUnitAttributes::poste;
const MsgUnitAttributes_Posture MsgUnitAttributes::poste_amenage;
const MsgUnitAttributes_Posture MsgUnitAttributes::poste_prepare_genie;
const MsgUnitAttributes_Posture MsgUnitAttributes::Posture_MIN;
const MsgUnitAttributes_Posture MsgUnitAttributes::Posture_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_FireAvailability_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitAttributes_FireAvailability_descriptor_;
}
bool MsgUnitAttributes_FireAvailability_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgUnitAttributes_FireAvailability MsgUnitAttributes::none_fire_available;
const MsgUnitAttributes_FireAvailability MsgUnitAttributes::pret_au_tir;
const MsgUnitAttributes_FireAvailability MsgUnitAttributes::indisponible;
const MsgUnitAttributes_FireAvailability MsgUnitAttributes::FireAvailability_MIN;
const MsgUnitAttributes_FireAvailability MsgUnitAttributes::FireAvailability_MAX;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgUnitAttributes_PopulationRoe_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitAttributes_PopulationRoe_descriptor_;
}
bool MsgUnitAttributes_PopulationRoe_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::none;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::emploi_force_interdit;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::maintien_a_distance_par_moyens_non_letaux;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::dispersion_par_moyens_de_defense_actifs;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::armes_letales_autorisees;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::PopulationRoe_MIN;
const MsgUnitAttributes_PopulationRoe MsgUnitAttributes::PopulationRoe_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgUnitAttributes::kOidFieldNumber;
const int MsgUnitAttributes::kDotationEffPersonnelFieldNumber;
const int MsgUnitAttributes::kDotationEffMaterielFieldNumber;
const int MsgUnitAttributes::kDotationEffRessourceFieldNumber;
const int MsgUnitAttributes::kEquipementsPretesFieldNumber;
const int MsgUnitAttributes::kEquipementsEmpruntesFieldNumber;
const int MsgUnitAttributes::kPositionFieldNumber;
const int MsgUnitAttributes::kDirectionFieldNumber;
const int MsgUnitAttributes::kHauteurFieldNumber;
const int MsgUnitAttributes::kAltitudeFieldNumber;
const int MsgUnitAttributes::kVitesseFieldNumber;
const int MsgUnitAttributes::kEtatOperationnelBrutFieldNumber;
const int MsgUnitAttributes::kPionsRenforcantFieldNumber;
const int MsgUnitAttributes::kPionRenforceFieldNumber;
const int MsgUnitAttributes::kMortFieldNumber;
const int MsgUnitAttributes::kNeutraliseFieldNumber;
const int MsgUnitAttributes::kModeFurtifActifFieldNumber;
const int MsgUnitAttributes::kEmbarqueFieldNumber;
const int MsgUnitAttributes::kTransporteursDisponiblesFieldNumber;
const int MsgUnitAttributes::kPostureOldFieldNumber;
const int MsgUnitAttributes::kPostureNewFieldNumber;
const int MsgUnitAttributes::kPosturePourcentageFieldNumber;
const int MsgUnitAttributes::kEtatInstallationFieldNumber;
const int MsgUnitAttributes::kEnTenueDeProtectionNbcFieldNumber;
const int MsgUnitAttributes::kContamineParAgentsNbcFieldNumber;
const int MsgUnitAttributes::kEtatContaminationFieldNumber;
const int MsgUnitAttributes::kCommunicationsFieldNumber;
const int MsgUnitAttributes::kSilenceRadioFieldNumber;
const int MsgUnitAttributes::kRadarActifFieldNumber;
const int MsgUnitAttributes::kPionsTransportesFieldNumber;
const int MsgUnitAttributes::kPionTransporteurFieldNumber;
const int MsgUnitAttributes::kRapportDeForceFieldNumber;
const int MsgUnitAttributes::kCombatDeRencontreFieldNumber;
const int MsgUnitAttributes::kEtatOperationnelFieldNumber;
const int MsgUnitAttributes::kDisponibiliteAuTirIndirectFieldNumber;
const int MsgUnitAttributes::kRoeFieldNumber;
const int MsgUnitAttributes::kRoePopulationFieldNumber;
const int MsgUnitAttributes::kFatigueFieldNumber;
const int MsgUnitAttributes::kMoralFieldNumber;
const int MsgUnitAttributes::kExperienceFieldNumber;
const int MsgUnitAttributes::kRenduFieldNumber;
const int MsgUnitAttributes::kPrisonnierFieldNumber;
const int MsgUnitAttributes::kRefugiePrisEnCompteFieldNumber;
#endif  // !_MSC_VER

MsgUnitAttributes::MsgUnitAttributes() {
  SharedCtor();
}

void MsgUnitAttributes::InitAsDefaultInstance() {
  dotation_eff_personnel_ = const_cast< ::MsgsSimToClient::HumanDotations*>(&::MsgsSimToClient::HumanDotations::default_instance());
  dotation_eff_materiel_ = const_cast< ::MsgsSimToClient::EquipmentDotations*>(&::MsgsSimToClient::EquipmentDotations::default_instance());
  dotation_eff_ressource_ = const_cast< ::MsgsSimToClient::ResourceDotations*>(&::MsgsSimToClient::ResourceDotations::default_instance());
  equipements_pretes_ = const_cast< ::MsgsSimToClient::LentEquipments*>(&::MsgsSimToClient::LentEquipments::default_instance());
  equipements_empruntes_ = const_cast< ::MsgsSimToClient::BorrowedEquipments*>(&::MsgsSimToClient::BorrowedEquipments::default_instance());
  position_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  direction_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
  pions_renforcant_ = const_cast< ::Common::MsgUnitList*>(&::Common::MsgUnitList::default_instance());
  contamine_par_agents_nbc_ = const_cast< ::Common::MsgListOID*>(&::Common::MsgListOID::default_instance());
  etat_contamination_ = const_cast< ::MsgsSimToClient::ContaminationState*>(&::MsgsSimToClient::ContaminationState::default_instance());
  communications_ = const_cast< ::MsgsSimToClient::Communication*>(&::MsgsSimToClient::Communication::default_instance());
  pions_transportes_ = const_cast< ::Common::MsgUnitList*>(&::Common::MsgUnitList::default_instance());
}

MsgUnitAttributes::MsgUnitAttributes(const MsgUnitAttributes& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitAttributes::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  dotation_eff_personnel_ = NULL;
  dotation_eff_materiel_ = NULL;
  dotation_eff_ressource_ = NULL;
  equipements_pretes_ = NULL;
  equipements_empruntes_ = NULL;
  position_ = NULL;
  direction_ = NULL;
  hauteur_ = 0;
  altitude_ = 0;
  vitesse_ = 0;
  etat_operationnel_brut_ = 0;
  pions_renforcant_ = NULL;
  pion_renforce_ = 0;
  mort_ = false;
  neutralise_ = false;
  mode_furtif_actif_ = false;
  embarque_ = false;
  transporteurs_disponibles_ = false;
  posture_old_ = 0;
  posture_new_ = 0;
  posture_pourcentage_ = 0;
  etat_installation_ = 0;
  en_tenue_de_protection_nbc_ = false;
  contamine_par_agents_nbc_ = NULL;
  etat_contamination_ = NULL;
  communications_ = NULL;
  silence_radio_ = false;
  radar_actif_ = false;
  pions_transportes_ = NULL;
  pion_transporteur_ = 0;
  rapport_de_force_ = 0;
  combat_de_rencontre_ = 0;
  etat_operationnel_ = 0;
  disponibilite_au_tir_indirect_ = 0;
  roe_ = 0;
  roe_population_ = 0;
  fatigue_ = 0;
  moral_ = 0;
  experience_ = 0;
  rendu_ = 0;
  prisonnier_ = false;
  refugie_pris_en_compte_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitAttributes::~MsgUnitAttributes() {
  SharedDtor();
}

void MsgUnitAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete dotation_eff_personnel_;
    delete dotation_eff_materiel_;
    delete dotation_eff_ressource_;
    delete equipements_pretes_;
    delete equipements_empruntes_;
    delete position_;
    delete direction_;
    delete pions_renforcant_;
    delete contamine_par_agents_nbc_;
    delete etat_contamination_;
    delete communications_;
    delete pions_transportes_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitAttributes_descriptor_;
}

const MsgUnitAttributes& MsgUnitAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitAttributes* MsgUnitAttributes::default_instance_ = NULL;

MsgUnitAttributes* MsgUnitAttributes::New() const {
  return new MsgUnitAttributes;
}

void MsgUnitAttributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    if (_has_bit(1)) {
      if (dotation_eff_personnel_ != NULL) dotation_eff_personnel_->::MsgsSimToClient::HumanDotations::Clear();
    }
    if (_has_bit(2)) {
      if (dotation_eff_materiel_ != NULL) dotation_eff_materiel_->::MsgsSimToClient::EquipmentDotations::Clear();
    }
    if (_has_bit(3)) {
      if (dotation_eff_ressource_ != NULL) dotation_eff_ressource_->::MsgsSimToClient::ResourceDotations::Clear();
    }
    if (_has_bit(4)) {
      if (equipements_pretes_ != NULL) equipements_pretes_->::MsgsSimToClient::LentEquipments::Clear();
    }
    if (_has_bit(5)) {
      if (equipements_empruntes_ != NULL) equipements_empruntes_->::MsgsSimToClient::BorrowedEquipments::Clear();
    }
    if (_has_bit(6)) {
      if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
    }
    if (_has_bit(7)) {
      if (direction_ != NULL) direction_->::Common::MsgHeading::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hauteur_ = 0;
    altitude_ = 0;
    vitesse_ = 0;
    etat_operationnel_brut_ = 0;
    if (_has_bit(12)) {
      if (pions_renforcant_ != NULL) pions_renforcant_->::Common::MsgUnitList::Clear();
    }
    pion_renforce_ = 0;
    mort_ = false;
    neutralise_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mode_furtif_actif_ = false;
    embarque_ = false;
    transporteurs_disponibles_ = false;
    posture_old_ = 0;
    posture_new_ = 0;
    posture_pourcentage_ = 0;
    etat_installation_ = 0;
    en_tenue_de_protection_nbc_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (contamine_par_agents_nbc_ != NULL) contamine_par_agents_nbc_->::Common::MsgListOID::Clear();
    }
    if (_has_bit(25)) {
      if (etat_contamination_ != NULL) etat_contamination_->::MsgsSimToClient::ContaminationState::Clear();
    }
    if (_has_bit(26)) {
      if (communications_ != NULL) communications_->::MsgsSimToClient::Communication::Clear();
    }
    silence_radio_ = false;
    radar_actif_ = false;
    if (_has_bit(29)) {
      if (pions_transportes_ != NULL) pions_transportes_->::Common::MsgUnitList::Clear();
    }
    pion_transporteur_ = 0;
    rapport_de_force_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    combat_de_rencontre_ = 0;
    etat_operationnel_ = 0;
    disponibilite_au_tir_indirect_ = 0;
    roe_ = 0;
    roe_population_ = 0;
    fatigue_ = 0;
    moral_ = 0;
    experience_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    rendu_ = 0;
    prisonnier_ = false;
    refugie_pris_en_compte_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_dotation_eff_personnel;
        break;
      }
      
      // optional .MsgsSimToClient.HumanDotations dotation_eff_personnel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dotation_eff_personnel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dotation_eff_personnel()));
        if (input->ExpectTag(26)) goto parse_dotation_eff_materiel;
        break;
      }
      
      // optional .MsgsSimToClient.EquipmentDotations dotation_eff_materiel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dotation_eff_materiel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dotation_eff_materiel()));
        if (input->ExpectTag(34)) goto parse_dotation_eff_ressource;
        break;
      }
      
      // optional .MsgsSimToClient.ResourceDotations dotation_eff_ressource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dotation_eff_ressource:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dotation_eff_ressource()));
        if (input->ExpectTag(42)) goto parse_equipements_pretes;
        break;
      }
      
      // optional .MsgsSimToClient.LentEquipments equipements_pretes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equipements_pretes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_equipements_pretes()));
        if (input->ExpectTag(50)) goto parse_equipements_empruntes;
        break;
      }
      
      // optional .MsgsSimToClient.BorrowedEquipments equipements_empruntes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equipements_empruntes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_equipements_empruntes()));
        if (input->ExpectTag(58)) goto parse_position;
        break;
      }
      
      // optional .Common.MsgCoordLatLong position = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectTag(66)) goto parse_direction;
        break;
      }
      
      // optional .Common.MsgHeading direction = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_direction()));
        if (input->ExpectTag(72)) goto parse_hauteur;
        break;
      }
      
      // optional int32 hauteur = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_hauteur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &hauteur_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_altitude;
        break;
      }
      
      // optional int32 altitude = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_altitude:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &altitude_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_vitesse;
        break;
      }
      
      // optional int32 vitesse = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vitesse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vitesse_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_etat_operationnel_brut;
        break;
      }
      
      // optional int32 etat_operationnel_brut = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_operationnel_brut:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &etat_operationnel_brut_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_pions_renforcant;
        break;
      }
      
      // optional .Common.MsgUnitList pions_renforcant = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pions_renforcant:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pions_renforcant()));
        if (input->ExpectTag(112)) goto parse_pion_renforce;
        break;
      }
      
      // optional int32 pion_renforce = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pion_renforce:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pion_renforce_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_mort;
        break;
      }
      
      // optional bool mort = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mort:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &mort_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_neutralise;
        break;
      }
      
      // optional bool neutralise = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_neutralise:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &neutralise_));
        _set_bit(15);
        if (input->ExpectTag(136)) goto parse_mode_furtif_actif;
        break;
      }
      
      // optional bool mode_furtif_actif = 17 [default = false];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mode_furtif_actif:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &mode_furtif_actif_));
        _set_bit(16);
        if (input->ExpectTag(144)) goto parse_embarque;
        break;
      }
      
      // optional bool embarque = 18 [default = false];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_embarque:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &embarque_));
        _set_bit(17);
        if (input->ExpectTag(152)) goto parse_transporteurs_disponibles;
        break;
      }
      
      // optional bool transporteurs_disponibles = 19 [default = false];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_transporteurs_disponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &transporteurs_disponibles_));
        _set_bit(18);
        if (input->ExpectTag(160)) goto parse_posture_old;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_old = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posture_old:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgUnitAttributes_Posture_IsValid(value)) {
          set_posture_old(static_cast< ::MsgsSimToClient::MsgUnitAttributes_Posture >(value));
        } else {
          mutable_unknown_fields()->AddVarint(20, value);
        }
        if (input->ExpectTag(168)) goto parse_posture_new;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_new = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posture_new:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgUnitAttributes_Posture_IsValid(value)) {
          set_posture_new(static_cast< ::MsgsSimToClient::MsgUnitAttributes_Posture >(value));
        } else {
          mutable_unknown_fields()->AddVarint(21, value);
        }
        if (input->ExpectTag(176)) goto parse_posture_pourcentage;
        break;
      }
      
      // optional int32 posture_pourcentage = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_posture_pourcentage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &posture_pourcentage_));
        _set_bit(21);
        if (input->ExpectTag(184)) goto parse_etat_installation;
        break;
      }
      
      // optional int32 etat_installation = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_installation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &etat_installation_));
        _set_bit(22);
        if (input->ExpectTag(192)) goto parse_en_tenue_de_protection_nbc;
        break;
      }
      
      // optional bool en_tenue_de_protection_nbc = 24 [default = false];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_en_tenue_de_protection_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &en_tenue_de_protection_nbc_));
        _set_bit(23);
        if (input->ExpectTag(202)) goto parse_contamine_par_agents_nbc;
        break;
      }
      
      // optional .Common.MsgListOID contamine_par_agents_nbc = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_contamine_par_agents_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_contamine_par_agents_nbc()));
        if (input->ExpectTag(210)) goto parse_etat_contamination;
        break;
      }
      
      // optional .MsgsSimToClient.ContaminationState etat_contamination = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_etat_contamination:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_etat_contamination()));
        if (input->ExpectTag(218)) goto parse_communications;
        break;
      }
      
      // optional .MsgsSimToClient.Communication communications = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_communications:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_communications()));
        if (input->ExpectTag(224)) goto parse_silence_radio;
        break;
      }
      
      // optional bool silence_radio = 28 [default = false];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_silence_radio:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &silence_radio_));
        _set_bit(27);
        if (input->ExpectTag(232)) goto parse_radar_actif;
        break;
      }
      
      // optional bool radar_actif = 29 [default = false];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_radar_actif:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &radar_actif_));
        _set_bit(28);
        if (input->ExpectTag(242)) goto parse_pions_transportes;
        break;
      }
      
      // optional .Common.MsgUnitList pions_transportes = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pions_transportes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pions_transportes()));
        if (input->ExpectTag(248)) goto parse_pion_transporteur;
        break;
      }
      
      // optional int32 pion_transporteur = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pion_transporteur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pion_transporteur_));
        _set_bit(30);
        if (input->ExpectTag(256)) goto parse_rapport_de_force;
        break;
      }
      
      // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rapport_de_force:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ForceRatio_Value_IsValid(value)) {
          set_rapport_de_force(static_cast< ::MsgsSimToClient::ForceRatio_Value >(value));
        } else {
          mutable_unknown_fields()->AddVarint(32, value);
        }
        if (input->ExpectTag(264)) goto parse_combat_de_rencontre;
        break;
      }
      
      // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_combat_de_rencontre:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumMeetingEngagementStatus_IsValid(value)) {
          set_combat_de_rencontre(static_cast< Common::EnumMeetingEngagementStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(33, value);
        }
        if (input->ExpectTag(272)) goto parse_etat_operationnel;
        break;
      }
      
      // optional .Common.EnumOperationalStatus etat_operationnel = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_operationnel:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumOperationalStatus_IsValid(value)) {
          set_etat_operationnel(static_cast< Common::EnumOperationalStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(34, value);
        }
        if (input->ExpectTag(280)) goto parse_disponibilite_au_tir_indirect;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitAttributes.FireAvailability disponibilite_au_tir_indirect = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_disponibilite_au_tir_indirect:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgUnitAttributes_FireAvailability_IsValid(value)) {
          set_disponibilite_au_tir_indirect(static_cast< ::MsgsSimToClient::MsgUnitAttributes_FireAvailability >(value));
        } else {
          mutable_unknown_fields()->AddVarint(35, value);
        }
        if (input->ExpectTag(288)) goto parse_roe;
        break;
      }
      
      // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roe:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::RulesOfEngagement_Value_IsValid(value)) {
          set_roe(static_cast< ::MsgsSimToClient::RulesOfEngagement_Value >(value));
        } else {
          mutable_unknown_fields()->AddVarint(36, value);
        }
        if (input->ExpectTag(296)) goto parse_roe_population;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitAttributes.PopulationRoe roe_population = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_roe_population:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgUnitAttributes_PopulationRoe_IsValid(value)) {
          set_roe_population(static_cast< ::MsgsSimToClient::MsgUnitAttributes_PopulationRoe >(value));
        } else {
          mutable_unknown_fields()->AddVarint(37, value);
        }
        if (input->ExpectTag(304)) goto parse_fatigue;
        break;
      }
      
      // optional .Common.EnumUnitTiredness fatigue = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fatigue:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitTiredness_IsValid(value)) {
          set_fatigue(static_cast< Common::EnumUnitTiredness >(value));
        } else {
          mutable_unknown_fields()->AddVarint(38, value);
        }
        if (input->ExpectTag(312)) goto parse_moral;
        break;
      }
      
      // optional .Common.EnumUnitMorale moral = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_moral:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitMorale_IsValid(value)) {
          set_moral(static_cast< Common::EnumUnitMorale >(value));
        } else {
          mutable_unknown_fields()->AddVarint(39, value);
        }
        if (input->ExpectTag(320)) goto parse_experience;
        break;
      }
      
      // optional .Common.EnumUnitExperience experience = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_experience:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitExperience_IsValid(value)) {
          set_experience(static_cast< Common::EnumUnitExperience >(value));
        } else {
          mutable_unknown_fields()->AddVarint(40, value);
        }
        if (input->ExpectTag(328)) goto parse_rendu;
        break;
      }
      
      // optional int32 rendu = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rendu:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rendu_));
        _set_bit(40);
        if (input->ExpectTag(336)) goto parse_prisonnier;
        break;
      }
      
      // optional bool prisonnier = 42 [default = false];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prisonnier:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &prisonnier_));
        _set_bit(41);
        if (input->ExpectTag(344)) goto parse_refugie_pris_en_compte;
        break;
      }
      
      // optional bool refugie_pris_en_compte = 43 [default = false];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_refugie_pris_en_compte:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &refugie_pris_en_compte_));
        _set_bit(42);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitAttributes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional .MsgsSimToClient.HumanDotations dotation_eff_personnel = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->dotation_eff_personnel(), output);
  }
  
  // optional .MsgsSimToClient.EquipmentDotations dotation_eff_materiel = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->dotation_eff_materiel(), output);
  }
  
  // optional .MsgsSimToClient.ResourceDotations dotation_eff_ressource = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->dotation_eff_ressource(), output);
  }
  
  // optional .MsgsSimToClient.LentEquipments equipements_pretes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->equipements_pretes(), output);
  }
  
  // optional .MsgsSimToClient.BorrowedEquipments equipements_empruntes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->equipements_empruntes(), output);
  }
  
  // optional .Common.MsgCoordLatLong position = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->position(), output);
  }
  
  // optional .Common.MsgHeading direction = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->direction(), output);
  }
  
  // optional int32 hauteur = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hauteur(), output);
  }
  
  // optional int32 altitude = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->altitude(), output);
  }
  
  // optional int32 vitesse = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->vitesse(), output);
  }
  
  // optional int32 etat_operationnel_brut = 12 [default = 0];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->etat_operationnel_brut(), output);
  }
  
  // optional .Common.MsgUnitList pions_renforcant = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->pions_renforcant(), output);
  }
  
  // optional int32 pion_renforce = 14 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pion_renforce(), output);
  }
  
  // optional bool mort = 15 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->mort(), output);
  }
  
  // optional bool neutralise = 16 [default = false];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->neutralise(), output);
  }
  
  // optional bool mode_furtif_actif = 17 [default = false];
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->mode_furtif_actif(), output);
  }
  
  // optional bool embarque = 18 [default = false];
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->embarque(), output);
  }
  
  // optional bool transporteurs_disponibles = 19 [default = false];
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->transporteurs_disponibles(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_old = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->posture_old(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_new = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->posture_new(), output);
  }
  
  // optional int32 posture_pourcentage = 22 [default = 0];
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->posture_pourcentage(), output);
  }
  
  // optional int32 etat_installation = 23 [default = 0];
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->etat_installation(), output);
  }
  
  // optional bool en_tenue_de_protection_nbc = 24 [default = false];
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->en_tenue_de_protection_nbc(), output);
  }
  
  // optional .Common.MsgListOID contamine_par_agents_nbc = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->contamine_par_agents_nbc(), output);
  }
  
  // optional .MsgsSimToClient.ContaminationState etat_contamination = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->etat_contamination(), output);
  }
  
  // optional .MsgsSimToClient.Communication communications = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      27, this->communications(), output);
  }
  
  // optional bool silence_radio = 28 [default = false];
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->silence_radio(), output);
  }
  
  // optional bool radar_actif = 29 [default = false];
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->radar_actif(), output);
  }
  
  // optional .Common.MsgUnitList pions_transportes = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      30, this->pions_transportes(), output);
  }
  
  // optional int32 pion_transporteur = 31 [default = 0];
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->pion_transporteur(), output);
  }
  
  // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      32, this->rapport_de_force(), output);
  }
  
  // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->combat_de_rencontre(), output);
  }
  
  // optional .Common.EnumOperationalStatus etat_operationnel = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->etat_operationnel(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.FireAvailability disponibilite_au_tir_indirect = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->disponibilite_au_tir_indirect(), output);
  }
  
  // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->roe(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.PopulationRoe roe_population = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->roe_population(), output);
  }
  
  // optional .Common.EnumUnitTiredness fatigue = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->fatigue(), output);
  }
  
  // optional .Common.EnumUnitMorale moral = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      39, this->moral(), output);
  }
  
  // optional .Common.EnumUnitExperience experience = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->experience(), output);
  }
  
  // optional int32 rendu = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->rendu(), output);
  }
  
  // optional bool prisonnier = 42 [default = false];
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->prisonnier(), output);
  }
  
  // optional bool refugie_pris_en_compte = 43 [default = false];
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(43, this->refugie_pris_en_compte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional .MsgsSimToClient.HumanDotations dotation_eff_personnel = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dotation_eff_personnel(), target);
  }
  
  // optional .MsgsSimToClient.EquipmentDotations dotation_eff_materiel = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dotation_eff_materiel(), target);
  }
  
  // optional .MsgsSimToClient.ResourceDotations dotation_eff_ressource = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dotation_eff_ressource(), target);
  }
  
  // optional .MsgsSimToClient.LentEquipments equipements_pretes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equipements_pretes(), target);
  }
  
  // optional .MsgsSimToClient.BorrowedEquipments equipements_empruntes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equipements_empruntes(), target);
  }
  
  // optional .Common.MsgCoordLatLong position = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position(), target);
  }
  
  // optional .Common.MsgHeading direction = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->direction(), target);
  }
  
  // optional int32 hauteur = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hauteur(), target);
  }
  
  // optional int32 altitude = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->altitude(), target);
  }
  
  // optional int32 vitesse = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->vitesse(), target);
  }
  
  // optional int32 etat_operationnel_brut = 12 [default = 0];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->etat_operationnel_brut(), target);
  }
  
  // optional .Common.MsgUnitList pions_renforcant = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->pions_renforcant(), target);
  }
  
  // optional int32 pion_renforce = 14 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pion_renforce(), target);
  }
  
  // optional bool mort = 15 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->mort(), target);
  }
  
  // optional bool neutralise = 16 [default = false];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->neutralise(), target);
  }
  
  // optional bool mode_furtif_actif = 17 [default = false];
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->mode_furtif_actif(), target);
  }
  
  // optional bool embarque = 18 [default = false];
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->embarque(), target);
  }
  
  // optional bool transporteurs_disponibles = 19 [default = false];
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->transporteurs_disponibles(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_old = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->posture_old(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_new = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->posture_new(), target);
  }
  
  // optional int32 posture_pourcentage = 22 [default = 0];
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->posture_pourcentage(), target);
  }
  
  // optional int32 etat_installation = 23 [default = 0];
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->etat_installation(), target);
  }
  
  // optional bool en_tenue_de_protection_nbc = 24 [default = false];
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->en_tenue_de_protection_nbc(), target);
  }
  
  // optional .Common.MsgListOID contamine_par_agents_nbc = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->contamine_par_agents_nbc(), target);
  }
  
  // optional .MsgsSimToClient.ContaminationState etat_contamination = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->etat_contamination(), target);
  }
  
  // optional .MsgsSimToClient.Communication communications = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->communications(), target);
  }
  
  // optional bool silence_radio = 28 [default = false];
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->silence_radio(), target);
  }
  
  // optional bool radar_actif = 29 [default = false];
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->radar_actif(), target);
  }
  
  // optional .Common.MsgUnitList pions_transportes = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->pions_transportes(), target);
  }
  
  // optional int32 pion_transporteur = 31 [default = 0];
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->pion_transporteur(), target);
  }
  
  // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      32, this->rapport_de_force(), target);
  }
  
  // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->combat_de_rencontre(), target);
  }
  
  // optional .Common.EnumOperationalStatus etat_operationnel = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->etat_operationnel(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.FireAvailability disponibilite_au_tir_indirect = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->disponibilite_au_tir_indirect(), target);
  }
  
  // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->roe(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes.PopulationRoe roe_population = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->roe_population(), target);
  }
  
  // optional .Common.EnumUnitTiredness fatigue = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->fatigue(), target);
  }
  
  // optional .Common.EnumUnitMorale moral = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      39, this->moral(), target);
  }
  
  // optional .Common.EnumUnitExperience experience = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->experience(), target);
  }
  
  // optional int32 rendu = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->rendu(), target);
  }
  
  // optional bool prisonnier = 42 [default = false];
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->prisonnier(), target);
  }
  
  // optional bool refugie_pris_en_compte = 43 [default = false];
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(43, this->refugie_pris_en_compte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitAttributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional .MsgsSimToClient.HumanDotations dotation_eff_personnel = 2;
    if (has_dotation_eff_personnel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotation_eff_personnel());
    }
    
    // optional .MsgsSimToClient.EquipmentDotations dotation_eff_materiel = 3;
    if (has_dotation_eff_materiel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotation_eff_materiel());
    }
    
    // optional .MsgsSimToClient.ResourceDotations dotation_eff_ressource = 4;
    if (has_dotation_eff_ressource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotation_eff_ressource());
    }
    
    // optional .MsgsSimToClient.LentEquipments equipements_pretes = 5;
    if (has_equipements_pretes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipements_pretes());
    }
    
    // optional .MsgsSimToClient.BorrowedEquipments equipements_empruntes = 6;
    if (has_equipements_empruntes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipements_empruntes());
    }
    
    // optional .Common.MsgCoordLatLong position = 7;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .Common.MsgHeading direction = 8;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hauteur = 9 [default = 0];
    if (has_hauteur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hauteur());
    }
    
    // optional int32 altitude = 10 [default = 0];
    if (has_altitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->altitude());
    }
    
    // optional int32 vitesse = 11 [default = 0];
    if (has_vitesse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitesse());
    }
    
    // optional int32 etat_operationnel_brut = 12 [default = 0];
    if (has_etat_operationnel_brut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etat_operationnel_brut());
    }
    
    // optional .Common.MsgUnitList pions_renforcant = 13;
    if (has_pions_renforcant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pions_renforcant());
    }
    
    // optional int32 pion_renforce = 14 [default = 0];
    if (has_pion_renforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pion_renforce());
    }
    
    // optional bool mort = 15 [default = false];
    if (has_mort()) {
      total_size += 1 + 1;
    }
    
    // optional bool neutralise = 16 [default = false];
    if (has_neutralise()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool mode_furtif_actif = 17 [default = false];
    if (has_mode_furtif_actif()) {
      total_size += 2 + 1;
    }
    
    // optional bool embarque = 18 [default = false];
    if (has_embarque()) {
      total_size += 2 + 1;
    }
    
    // optional bool transporteurs_disponibles = 19 [default = false];
    if (has_transporteurs_disponibles()) {
      total_size += 2 + 1;
    }
    
    // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_old = 20;
    if (has_posture_old()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->posture_old());
    }
    
    // optional .MsgsSimToClient.MsgUnitAttributes.Posture posture_new = 21;
    if (has_posture_new()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->posture_new());
    }
    
    // optional int32 posture_pourcentage = 22 [default = 0];
    if (has_posture_pourcentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posture_pourcentage());
    }
    
    // optional int32 etat_installation = 23 [default = 0];
    if (has_etat_installation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etat_installation());
    }
    
    // optional bool en_tenue_de_protection_nbc = 24 [default = false];
    if (has_en_tenue_de_protection_nbc()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Common.MsgListOID contamine_par_agents_nbc = 25;
    if (has_contamine_par_agents_nbc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->contamine_par_agents_nbc());
    }
    
    // optional .MsgsSimToClient.ContaminationState etat_contamination = 26;
    if (has_etat_contamination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->etat_contamination());
    }
    
    // optional .MsgsSimToClient.Communication communications = 27;
    if (has_communications()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->communications());
    }
    
    // optional bool silence_radio = 28 [default = false];
    if (has_silence_radio()) {
      total_size += 2 + 1;
    }
    
    // optional bool radar_actif = 29 [default = false];
    if (has_radar_actif()) {
      total_size += 2 + 1;
    }
    
    // optional .Common.MsgUnitList pions_transportes = 30;
    if (has_pions_transportes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pions_transportes());
    }
    
    // optional int32 pion_transporteur = 31 [default = 0];
    if (has_pion_transporteur()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pion_transporteur());
    }
    
    // optional .MsgsSimToClient.ForceRatio.Value rapport_de_force = 32;
    if (has_rapport_de_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rapport_de_force());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .Common.EnumMeetingEngagementStatus combat_de_rencontre = 33;
    if (has_combat_de_rencontre()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->combat_de_rencontre());
    }
    
    // optional .Common.EnumOperationalStatus etat_operationnel = 34;
    if (has_etat_operationnel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat_operationnel());
    }
    
    // optional .MsgsSimToClient.MsgUnitAttributes.FireAvailability disponibilite_au_tir_indirect = 35;
    if (has_disponibilite_au_tir_indirect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->disponibilite_au_tir_indirect());
    }
    
    // optional .MsgsSimToClient.RulesOfEngagement.Value roe = 36;
    if (has_roe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roe());
    }
    
    // optional .MsgsSimToClient.MsgUnitAttributes.PopulationRoe roe_population = 37;
    if (has_roe_population()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roe_population());
    }
    
    // optional .Common.EnumUnitTiredness fatigue = 38;
    if (has_fatigue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fatigue());
    }
    
    // optional .Common.EnumUnitMorale moral = 39;
    if (has_moral()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->moral());
    }
    
    // optional .Common.EnumUnitExperience experience = 40;
    if (has_experience()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->experience());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 rendu = 41;
    if (has_rendu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rendu());
    }
    
    // optional bool prisonnier = 42 [default = false];
    if (has_prisonnier()) {
      total_size += 2 + 1;
    }
    
    // optional bool refugie_pris_en_compte = 43 [default = false];
    if (has_refugie_pris_en_compte()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitAttributes::MergeFrom(const MsgUnitAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_dotation_eff_personnel()->::MsgsSimToClient::HumanDotations::MergeFrom(from.dotation_eff_personnel());
    }
    if (from._has_bit(2)) {
      mutable_dotation_eff_materiel()->::MsgsSimToClient::EquipmentDotations::MergeFrom(from.dotation_eff_materiel());
    }
    if (from._has_bit(3)) {
      mutable_dotation_eff_ressource()->::MsgsSimToClient::ResourceDotations::MergeFrom(from.dotation_eff_ressource());
    }
    if (from._has_bit(4)) {
      mutable_equipements_pretes()->::MsgsSimToClient::LentEquipments::MergeFrom(from.equipements_pretes());
    }
    if (from._has_bit(5)) {
      mutable_equipements_empruntes()->::MsgsSimToClient::BorrowedEquipments::MergeFrom(from.equipements_empruntes());
    }
    if (from._has_bit(6)) {
      mutable_position()->::Common::MsgCoordLatLong::MergeFrom(from.position());
    }
    if (from._has_bit(7)) {
      mutable_direction()->::Common::MsgHeading::MergeFrom(from.direction());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_hauteur(from.hauteur());
    }
    if (from._has_bit(9)) {
      set_altitude(from.altitude());
    }
    if (from._has_bit(10)) {
      set_vitesse(from.vitesse());
    }
    if (from._has_bit(11)) {
      set_etat_operationnel_brut(from.etat_operationnel_brut());
    }
    if (from._has_bit(12)) {
      mutable_pions_renforcant()->::Common::MsgUnitList::MergeFrom(from.pions_renforcant());
    }
    if (from._has_bit(13)) {
      set_pion_renforce(from.pion_renforce());
    }
    if (from._has_bit(14)) {
      set_mort(from.mort());
    }
    if (from._has_bit(15)) {
      set_neutralise(from.neutralise());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_mode_furtif_actif(from.mode_furtif_actif());
    }
    if (from._has_bit(17)) {
      set_embarque(from.embarque());
    }
    if (from._has_bit(18)) {
      set_transporteurs_disponibles(from.transporteurs_disponibles());
    }
    if (from._has_bit(19)) {
      set_posture_old(from.posture_old());
    }
    if (from._has_bit(20)) {
      set_posture_new(from.posture_new());
    }
    if (from._has_bit(21)) {
      set_posture_pourcentage(from.posture_pourcentage());
    }
    if (from._has_bit(22)) {
      set_etat_installation(from.etat_installation());
    }
    if (from._has_bit(23)) {
      set_en_tenue_de_protection_nbc(from.en_tenue_de_protection_nbc());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_contamine_par_agents_nbc()->::Common::MsgListOID::MergeFrom(from.contamine_par_agents_nbc());
    }
    if (from._has_bit(25)) {
      mutable_etat_contamination()->::MsgsSimToClient::ContaminationState::MergeFrom(from.etat_contamination());
    }
    if (from._has_bit(26)) {
      mutable_communications()->::MsgsSimToClient::Communication::MergeFrom(from.communications());
    }
    if (from._has_bit(27)) {
      set_silence_radio(from.silence_radio());
    }
    if (from._has_bit(28)) {
      set_radar_actif(from.radar_actif());
    }
    if (from._has_bit(29)) {
      mutable_pions_transportes()->::Common::MsgUnitList::MergeFrom(from.pions_transportes());
    }
    if (from._has_bit(30)) {
      set_pion_transporteur(from.pion_transporteur());
    }
    if (from._has_bit(31)) {
      set_rapport_de_force(from.rapport_de_force());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      set_combat_de_rencontre(from.combat_de_rencontre());
    }
    if (from._has_bit(33)) {
      set_etat_operationnel(from.etat_operationnel());
    }
    if (from._has_bit(34)) {
      set_disponibilite_au_tir_indirect(from.disponibilite_au_tir_indirect());
    }
    if (from._has_bit(35)) {
      set_roe(from.roe());
    }
    if (from._has_bit(36)) {
      set_roe_population(from.roe_population());
    }
    if (from._has_bit(37)) {
      set_fatigue(from.fatigue());
    }
    if (from._has_bit(38)) {
      set_moral(from.moral());
    }
    if (from._has_bit(39)) {
      set_experience(from.experience());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_rendu(from.rendu());
    }
    if (from._has_bit(41)) {
      set_prisonnier(from.prisonnier());
    }
    if (from._has_bit(42)) {
      set_refugie_pris_en_compte(from.refugie_pris_en_compte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitAttributes::CopyFrom(const MsgUnitAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_dotation_eff_personnel()) {
    if (!this->dotation_eff_personnel().IsInitialized()) return false;
  }
  if (has_dotation_eff_materiel()) {
    if (!this->dotation_eff_materiel().IsInitialized()) return false;
  }
  if (has_dotation_eff_ressource()) {
    if (!this->dotation_eff_ressource().IsInitialized()) return false;
  }
  if (has_equipements_pretes()) {
    if (!this->equipements_pretes().IsInitialized()) return false;
  }
  if (has_equipements_empruntes()) {
    if (!this->equipements_empruntes().IsInitialized()) return false;
  }
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  if (has_pions_renforcant()) {
    if (!this->pions_renforcant().IsInitialized()) return false;
  }
  if (has_pions_transportes()) {
    if (!this->pions_transportes().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitAttributes::Swap(MsgUnitAttributes* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(dotation_eff_personnel_, other->dotation_eff_personnel_);
    std::swap(dotation_eff_materiel_, other->dotation_eff_materiel_);
    std::swap(dotation_eff_ressource_, other->dotation_eff_ressource_);
    std::swap(equipements_pretes_, other->equipements_pretes_);
    std::swap(equipements_empruntes_, other->equipements_empruntes_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(hauteur_, other->hauteur_);
    std::swap(altitude_, other->altitude_);
    std::swap(vitesse_, other->vitesse_);
    std::swap(etat_operationnel_brut_, other->etat_operationnel_brut_);
    std::swap(pions_renforcant_, other->pions_renforcant_);
    std::swap(pion_renforce_, other->pion_renforce_);
    std::swap(mort_, other->mort_);
    std::swap(neutralise_, other->neutralise_);
    std::swap(mode_furtif_actif_, other->mode_furtif_actif_);
    std::swap(embarque_, other->embarque_);
    std::swap(transporteurs_disponibles_, other->transporteurs_disponibles_);
    std::swap(posture_old_, other->posture_old_);
    std::swap(posture_new_, other->posture_new_);
    std::swap(posture_pourcentage_, other->posture_pourcentage_);
    std::swap(etat_installation_, other->etat_installation_);
    std::swap(en_tenue_de_protection_nbc_, other->en_tenue_de_protection_nbc_);
    std::swap(contamine_par_agents_nbc_, other->contamine_par_agents_nbc_);
    std::swap(etat_contamination_, other->etat_contamination_);
    std::swap(communications_, other->communications_);
    std::swap(silence_radio_, other->silence_radio_);
    std::swap(radar_actif_, other->radar_actif_);
    std::swap(pions_transportes_, other->pions_transportes_);
    std::swap(pion_transporteur_, other->pion_transporteur_);
    std::swap(rapport_de_force_, other->rapport_de_force_);
    std::swap(combat_de_rencontre_, other->combat_de_rencontre_);
    std::swap(etat_operationnel_, other->etat_operationnel_);
    std::swap(disponibilite_au_tir_indirect_, other->disponibilite_au_tir_indirect_);
    std::swap(roe_, other->roe_);
    std::swap(roe_population_, other->roe_population_);
    std::swap(fatigue_, other->fatigue_);
    std::swap(moral_, other->moral_);
    std::swap(experience_, other->experience_);
    std::swap(rendu_, other->rendu_);
    std::swap(prisonnier_, other->prisonnier_);
    std::swap(refugie_pris_en_compte_, other->refugie_pris_en_compte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitAttributes_descriptor_;
  metadata.reflection = MsgUnitAttributes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitPathFind::kOidFieldNumber;
const int MsgUnitPathFind::kItineraireFieldNumber;
#endif  // !_MSC_VER

MsgUnitPathFind::MsgUnitPathFind() {
  SharedCtor();
}

void MsgUnitPathFind::InitAsDefaultInstance() {
  itineraire_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
}

MsgUnitPathFind::MsgUnitPathFind(const MsgUnitPathFind& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitPathFind::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  itineraire_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitPathFind::~MsgUnitPathFind() {
  SharedDtor();
}

void MsgUnitPathFind::SharedDtor() {
  if (this != default_instance_) {
    delete itineraire_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitPathFind::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitPathFind_descriptor_;
}

const MsgUnitPathFind& MsgUnitPathFind::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitPathFind* MsgUnitPathFind::default_instance_ = NULL;

MsgUnitPathFind* MsgUnitPathFind::New() const {
  return new MsgUnitPathFind;
}

void MsgUnitPathFind::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (itineraire_ != NULL) itineraire_->::Common::MsgPath::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitPathFind::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_itineraire;
        break;
      }
      
      // required .Common.MsgPath itineraire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_itineraire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_itineraire()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitPathFind::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitPathFind::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required .Common.MsgPath itineraire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->itineraire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitPathFind::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required .Common.MsgPath itineraire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itineraire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitPathFind::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required .Common.MsgPath itineraire = 2;
    if (has_itineraire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itineraire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitPathFind::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitPathFind* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitPathFind*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitPathFind::MergeFrom(const MsgUnitPathFind& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_itineraire()->::Common::MsgPath::MergeFrom(from.itineraire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitPathFind::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitPathFind::CopyFrom(const MsgUnitPathFind& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitPathFind::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_itineraire()) {
    if (!this->itineraire().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitPathFind::Swap(MsgUnitPathFind* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(itineraire_, other->itineraire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitPathFind::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitPathFind_descriptor_;
  metadata.reflection = MsgUnitPathFind_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitDestruction::kOidFieldNumber;
#endif  // !_MSC_VER

MsgUnitDestruction::MsgUnitDestruction() {
  SharedCtor();
}

void MsgUnitDestruction::InitAsDefaultInstance() {
}

MsgUnitDestruction::MsgUnitDestruction(const MsgUnitDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitDestruction::~MsgUnitDestruction() {
  SharedDtor();
}

void MsgUnitDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitDestruction_descriptor_;
}

const MsgUnitDestruction& MsgUnitDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitDestruction* MsgUnitDestruction::default_instance_ = NULL;

MsgUnitDestruction* MsgUnitDestruction::New() const {
  return new MsgUnitDestruction;
}

void MsgUnitDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitDestruction::MergeFrom(const MsgUnitDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitDestruction::CopyFrom(const MsgUnitDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgUnitDestruction::Swap(MsgUnitDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitDestruction_descriptor_;
  metadata.reflection = MsgUnitDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitEnvironmentType::kOidFieldNumber;
const int MsgUnitEnvironmentType::kAreaFieldNumber;
const int MsgUnitEnvironmentType::kLeftFieldNumber;
const int MsgUnitEnvironmentType::kRightFieldNumber;
const int MsgUnitEnvironmentType::kLinearFieldNumber;
#endif  // !_MSC_VER

MsgUnitEnvironmentType::MsgUnitEnvironmentType() {
  SharedCtor();
}

void MsgUnitEnvironmentType::InitAsDefaultInstance() {
}

MsgUnitEnvironmentType::MsgUnitEnvironmentType(const MsgUnitEnvironmentType& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitEnvironmentType::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  area_ = 0;
  left_ = 0;
  right_ = 0;
  linear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitEnvironmentType::~MsgUnitEnvironmentType() {
  SharedDtor();
}

void MsgUnitEnvironmentType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitEnvironmentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitEnvironmentType_descriptor_;
}

const MsgUnitEnvironmentType& MsgUnitEnvironmentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitEnvironmentType* MsgUnitEnvironmentType::default_instance_ = NULL;

MsgUnitEnvironmentType* MsgUnitEnvironmentType::New() const {
  return new MsgUnitEnvironmentType;
}

void MsgUnitEnvironmentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    area_ = 0;
    left_ = 0;
    right_ = 0;
    linear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitEnvironmentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }
      
      // required int32 area = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_area:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &area_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }
      
      // required int32 left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_left:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &left_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_right;
        break;
      }
      
      // required int32 right = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_right:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &right_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_linear;
        break;
      }
      
      // required int32 linear = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_linear:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &linear_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitEnvironmentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitEnvironmentType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 area = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->area(), output);
  }
  
  // required int32 left = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left(), output);
  }
  
  // required int32 right = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->right(), output);
  }
  
  // required int32 linear = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->linear(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitEnvironmentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 area = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->area(), target);
  }
  
  // required int32 left = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left(), target);
  }
  
  // required int32 right = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->right(), target);
  }
  
  // required int32 linear = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->linear(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitEnvironmentType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->area());
    }
    
    // required int32 left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }
    
    // required int32 right = 4;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }
    
    // required int32 linear = 5;
    if (has_linear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linear());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitEnvironmentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitEnvironmentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitEnvironmentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitEnvironmentType::MergeFrom(const MsgUnitEnvironmentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_area(from.area());
    }
    if (from._has_bit(2)) {
      set_left(from.left());
    }
    if (from._has_bit(3)) {
      set_right(from.right());
    }
    if (from._has_bit(4)) {
      set_linear(from.linear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitEnvironmentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitEnvironmentType::CopyFrom(const MsgUnitEnvironmentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitEnvironmentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgUnitEnvironmentType::Swap(MsgUnitEnvironmentType* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(area_, other->area_);
    std::swap(left_, other->left_);
    std::swap(right_, other->right_);
    std::swap(linear_, other->linear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitEnvironmentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitEnvironmentType_descriptor_;
  metadata.reflection = MsgUnitEnvironmentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitKnowledgeCreation::kOidFieldNumber;
const int MsgUnitKnowledgeCreation::kOidGroupePossesseurFieldNumber;
const int MsgUnitKnowledgeCreation::kOidUniteReelleFieldNumber;
const int MsgUnitKnowledgeCreation::kTypeUniteFieldNumber;
#endif  // !_MSC_VER

MsgUnitKnowledgeCreation::MsgUnitKnowledgeCreation() {
  SharedCtor();
}

void MsgUnitKnowledgeCreation::InitAsDefaultInstance() {
  type_unite_ = const_cast< ::Common::MsgUnitType*>(&::Common::MsgUnitType::default_instance());
}

MsgUnitKnowledgeCreation::MsgUnitKnowledgeCreation(const MsgUnitKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_unite_reelle_ = 0;
  type_unite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitKnowledgeCreation::~MsgUnitKnowledgeCreation() {
  SharedDtor();
}

void MsgUnitKnowledgeCreation::SharedDtor() {
  if (this != default_instance_) {
    delete type_unite_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitKnowledgeCreation_descriptor_;
}

const MsgUnitKnowledgeCreation& MsgUnitKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitKnowledgeCreation* MsgUnitKnowledgeCreation::default_instance_ = NULL;

MsgUnitKnowledgeCreation* MsgUnitKnowledgeCreation::New() const {
  return new MsgUnitKnowledgeCreation;
}

void MsgUnitKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_unite_reelle_ = 0;
    if (_has_bit(3)) {
      if (type_unite_ != NULL) type_unite_->::Common::MsgUnitType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_unite_reelle;
        break;
      }
      
      // required int32 oid_unite_reelle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_unite_reelle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_unite_reelle_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_type_unite;
        break;
      }
      
      // required .Common.MsgUnitType type_unite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type_unite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_type_unite()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  // required int32 oid_unite_reelle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_unite_reelle(), output);
  }
  
  // required .Common.MsgUnitType type_unite = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->type_unite(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  // required int32 oid_unite_reelle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_unite_reelle(), target);
  }
  
  // required .Common.MsgUnitType type_unite = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->type_unite(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // required int32 oid_unite_reelle = 3;
    if (has_oid_unite_reelle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_unite_reelle());
    }
    
    // required .Common.MsgUnitType type_unite = 4;
    if (has_type_unite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type_unite());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitKnowledgeCreation::MergeFrom(const MsgUnitKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(2)) {
      set_oid_unite_reelle(from.oid_unite_reelle());
    }
    if (from._has_bit(3)) {
      mutable_type_unite()->::Common::MsgUnitType::MergeFrom(from.type_unite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitKnowledgeCreation::CopyFrom(const MsgUnitKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_type_unite()) {
    if (!this->type_unite().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitKnowledgeCreation::Swap(MsgUnitKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_unite_reelle_, other->oid_unite_reelle_);
    std::swap(type_unite_, other->type_unite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitKnowledgeCreation_descriptor_;
  metadata.reflection = MsgUnitKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutomatPerception::kOidCompagnieFieldNumber;
const int AutomatPerception::kIdentificationLevelFieldNumber;
#endif  // !_MSC_VER

AutomatPerception::AutomatPerception() {
  SharedCtor();
}

void AutomatPerception::InitAsDefaultInstance() {
}

AutomatPerception::AutomatPerception(const AutomatPerception& from) {
  SharedCtor();
  MergeFrom(from);
}

void AutomatPerception::SharedCtor() {
  _cached_size_ = 0;
  oid_compagnie_ = 0;
  identification_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomatPerception::~AutomatPerception() {
  SharedDtor();
}

void AutomatPerception::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AutomatPerception::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomatPerception_descriptor_;
}

const AutomatPerception& AutomatPerception::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

AutomatPerception* AutomatPerception::default_instance_ = NULL;

AutomatPerception* AutomatPerception::New() const {
  return new AutomatPerception;
}

void AutomatPerception::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_compagnie_ = 0;
    identification_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomatPerception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_compagnie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_compagnie_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_identification_level;
        break;
      }
      
      // required .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_identification_level:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumUnitIdentificationLevel_IsValid(value)) {
          set_identification_level(static_cast< MsgsSimToClient::EnumUnitIdentificationLevel >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomatPerception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AutomatPerception::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_compagnie = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_compagnie(), output);
  }
  
  // required .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->identification_level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomatPerception::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_compagnie = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_compagnie(), target);
  }
  
  // required .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->identification_level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomatPerception::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_compagnie = 1;
    if (has_oid_compagnie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_compagnie());
    }
    
    // required .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 2;
    if (has_identification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identification_level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AutomatPerception::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomatPerception* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomatPerception*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomatPerception::MergeFrom(const AutomatPerception& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_compagnie(from.oid_compagnie());
    }
    if (from._has_bit(1)) {
      set_identification_level(from.identification_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomatPerception::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatPerception::CopyFrom(const AutomatPerception& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatPerception::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AutomatPerception::Swap(AutomatPerception* other) {
  if (other != this) {
    std::swap(oid_compagnie_, other->oid_compagnie_);
    std::swap(identification_level_, other->identification_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomatPerception::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomatPerception_descriptor_;
  metadata.reflection = AutomatPerception_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfAutomatPerception::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfAutomatPerception::SeqOfAutomatPerception() {
  SharedCtor();
}

void SeqOfAutomatPerception::InitAsDefaultInstance() {
}

SeqOfAutomatPerception::SeqOfAutomatPerception(const SeqOfAutomatPerception& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfAutomatPerception::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfAutomatPerception::~SeqOfAutomatPerception() {
  SharedDtor();
}

void SeqOfAutomatPerception::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfAutomatPerception::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfAutomatPerception_descriptor_;
}

const SeqOfAutomatPerception& SeqOfAutomatPerception::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfAutomatPerception* SeqOfAutomatPerception::default_instance_ = NULL;

SeqOfAutomatPerception* SeqOfAutomatPerception::New() const {
  return new SeqOfAutomatPerception;
}

void SeqOfAutomatPerception::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfAutomatPerception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.AutomatPerception elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfAutomatPerception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfAutomatPerception::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.AutomatPerception elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfAutomatPerception::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.AutomatPerception elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfAutomatPerception::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.AutomatPerception elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfAutomatPerception::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfAutomatPerception* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfAutomatPerception*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfAutomatPerception::MergeFrom(const SeqOfAutomatPerception& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfAutomatPerception::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfAutomatPerception::CopyFrom(const SeqOfAutomatPerception& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfAutomatPerception::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfAutomatPerception::Swap(SeqOfAutomatPerception* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfAutomatPerception::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfAutomatPerception_descriptor_;
  metadata.reflection = SeqOfAutomatPerception_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitKnowledgeUpdate::kOidFieldNumber;
const int MsgUnitKnowledgeUpdate::kOidGroupePossesseurFieldNumber;
const int MsgUnitKnowledgeUpdate::kPertinenceFieldNumber;
const int MsgUnitKnowledgeUpdate::kIdentificationLevelFieldNumber;
const int MsgUnitKnowledgeUpdate::kMaxIdentificationLevelFieldNumber;
const int MsgUnitKnowledgeUpdate::kEtatOpFieldNumber;
const int MsgUnitKnowledgeUpdate::kMortFieldNumber;
const int MsgUnitKnowledgeUpdate::kPositionFieldNumber;
const int MsgUnitKnowledgeUpdate::kDirectionFieldNumber;
const int MsgUnitKnowledgeUpdate::kSpeedFieldNumber;
const int MsgUnitKnowledgeUpdate::kCampFieldNumber;
const int MsgUnitKnowledgeUpdate::kNaturePcFieldNumber;
const int MsgUnitKnowledgeUpdate::kPerceptionParCompagnieFieldNumber;
const int MsgUnitKnowledgeUpdate::kRenduFieldNumber;
const int MsgUnitKnowledgeUpdate::kPrisonnierFieldNumber;
const int MsgUnitKnowledgeUpdate::kRefugiePrisEnCompteFieldNumber;
#endif  // !_MSC_VER

MsgUnitKnowledgeUpdate::MsgUnitKnowledgeUpdate() {
  SharedCtor();
}

void MsgUnitKnowledgeUpdate::InitAsDefaultInstance() {
  position_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  direction_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
  perception_par_compagnie_ = const_cast< ::MsgsSimToClient::SeqOfAutomatPerception*>(&::MsgsSimToClient::SeqOfAutomatPerception::default_instance());
}

MsgUnitKnowledgeUpdate::MsgUnitKnowledgeUpdate(const MsgUnitKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_groupe_possesseur_ = 0;
  pertinence_ = 0;
  identification_level_ = 0;
  max_identification_level_ = 0;
  etat_op_ = 0;
  mort_ = false;
  position_ = NULL;
  direction_ = NULL;
  speed_ = 0;
  camp_ = 0;
  nature_pc_ = false;
  perception_par_compagnie_ = NULL;
  rendu_ = 0;
  prisonnier_ = false;
  refugie_pris_en_compte_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitKnowledgeUpdate::~MsgUnitKnowledgeUpdate() {
  SharedDtor();
}

void MsgUnitKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete direction_;
    delete perception_par_compagnie_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitKnowledgeUpdate_descriptor_;
}

const MsgUnitKnowledgeUpdate& MsgUnitKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitKnowledgeUpdate* MsgUnitKnowledgeUpdate::default_instance_ = NULL;

MsgUnitKnowledgeUpdate* MsgUnitKnowledgeUpdate::New() const {
  return new MsgUnitKnowledgeUpdate;
}

void MsgUnitKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_groupe_possesseur_ = 0;
    pertinence_ = 0;
    identification_level_ = 0;
    max_identification_level_ = 0;
    etat_op_ = 0;
    mort_ = false;
    if (_has_bit(7)) {
      if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (direction_ != NULL) direction_->::Common::MsgHeading::Clear();
    }
    speed_ = 0;
    camp_ = 0;
    nature_pc_ = false;
    if (_has_bit(12)) {
      if (perception_par_compagnie_ != NULL) perception_par_compagnie_->::MsgsSimToClient::SeqOfAutomatPerception::Clear();
    }
    rendu_ = 0;
    prisonnier_ = false;
    refugie_pris_en_compte_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_pertinence;
        break;
      }
      
      // optional int32 pertinence = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pertinence:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pertinence_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_identification_level;
        break;
      }
      
      // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_identification_level:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumUnitIdentificationLevel_IsValid(value)) {
          set_identification_level(static_cast< MsgsSimToClient::EnumUnitIdentificationLevel >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_max_identification_level;
        break;
      }
      
      // optional .MsgsSimToClient.EnumUnitIdentificationLevel max_identification_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_identification_level:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumUnitIdentificationLevel_IsValid(value)) {
          set_max_identification_level(static_cast< MsgsSimToClient::EnumUnitIdentificationLevel >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_etat_op;
        break;
      }
      
      // optional int32 etat_op = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_op:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &etat_op_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_mort;
        break;
      }
      
      // optional bool mort = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_mort:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &mort_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_position;
        break;
      }
      
      // optional .Common.MsgCoordLatLong position = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectTag(74)) goto parse_direction;
        break;
      }
      
      // optional .Common.MsgHeading direction = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_direction()));
        if (input->ExpectTag(80)) goto parse_speed;
        break;
      }
      
      // optional int32 speed = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &speed_));
        _set_bit(9);
        if (input->ExpectTag(88)) goto parse_camp;
        break;
      }
      
      // optional int32 camp = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &camp_));
        _set_bit(10);
        if (input->ExpectTag(96)) goto parse_nature_pc;
        break;
      }
      
      // optional bool nature_pc = 12 [default = false];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nature_pc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &nature_pc_));
        _set_bit(11);
        if (input->ExpectTag(106)) goto parse_perception_par_compagnie;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfAutomatPerception perception_par_compagnie = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_perception_par_compagnie:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_perception_par_compagnie()));
        if (input->ExpectTag(112)) goto parse_rendu;
        break;
      }
      
      // optional int32 rendu = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rendu:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &rendu_));
        _set_bit(13);
        if (input->ExpectTag(120)) goto parse_prisonnier;
        break;
      }
      
      // optional bool prisonnier = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_prisonnier:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &prisonnier_));
        _set_bit(14);
        if (input->ExpectTag(128)) goto parse_refugie_pris_en_compte;
        break;
      }
      
      // optional bool refugie_pris_en_compte = 16 [default = false];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_refugie_pris_en_compte:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &refugie_pris_en_compte_));
        _set_bit(15);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 pertinence = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pertinence(), output);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->identification_level(), output);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel max_identification_level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->max_identification_level(), output);
  }
  
  // optional int32 etat_op = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->etat_op(), output);
  }
  
  // optional bool mort = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->mort(), output);
  }
  
  // optional .Common.MsgCoordLatLong position = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->position(), output);
  }
  
  // optional .Common.MsgHeading direction = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->direction(), output);
  }
  
  // optional int32 speed = 10 [default = 0];
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->speed(), output);
  }
  
  // optional int32 camp = 11 [default = 0];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->camp(), output);
  }
  
  // optional bool nature_pc = 12 [default = false];
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->nature_pc(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfAutomatPerception perception_par_compagnie = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->perception_par_compagnie(), output);
  }
  
  // optional int32 rendu = 14 [default = 0];
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rendu(), output);
  }
  
  // optional bool prisonnier = 15 [default = false];
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->prisonnier(), output);
  }
  
  // optional bool refugie_pris_en_compte = 16 [default = false];
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->refugie_pris_en_compte(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 pertinence = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pertinence(), target);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->identification_level(), target);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel max_identification_level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->max_identification_level(), target);
  }
  
  // optional int32 etat_op = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->etat_op(), target);
  }
  
  // optional bool mort = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->mort(), target);
  }
  
  // optional .Common.MsgCoordLatLong position = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->position(), target);
  }
  
  // optional .Common.MsgHeading direction = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->direction(), target);
  }
  
  // optional int32 speed = 10 [default = 0];
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->speed(), target);
  }
  
  // optional int32 camp = 11 [default = 0];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->camp(), target);
  }
  
  // optional bool nature_pc = 12 [default = false];
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->nature_pc(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfAutomatPerception perception_par_compagnie = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->perception_par_compagnie(), target);
  }
  
  // optional int32 rendu = 14 [default = 0];
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rendu(), target);
  }
  
  // optional bool prisonnier = 15 [default = false];
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->prisonnier(), target);
  }
  
  // optional bool refugie_pris_en_compte = 16 [default = false];
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->refugie_pris_en_compte(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 pertinence = 3 [default = 0];
    if (has_pertinence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pertinence());
    }
    
    // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 4;
    if (has_identification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identification_level());
    }
    
    // optional .MsgsSimToClient.EnumUnitIdentificationLevel max_identification_level = 5;
    if (has_max_identification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_identification_level());
    }
    
    // optional int32 etat_op = 6 [default = 0];
    if (has_etat_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etat_op());
    }
    
    // optional bool mort = 7 [default = false];
    if (has_mort()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.MsgCoordLatLong position = 8;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.MsgHeading direction = 9;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
    // optional int32 speed = 10 [default = 0];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }
    
    // optional int32 camp = 11 [default = 0];
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }
    
    // optional bool nature_pc = 12 [default = false];
    if (has_nature_pc()) {
      total_size += 1 + 1;
    }
    
    // optional .MsgsSimToClient.SeqOfAutomatPerception perception_par_compagnie = 13;
    if (has_perception_par_compagnie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_par_compagnie());
    }
    
    // optional int32 rendu = 14 [default = 0];
    if (has_rendu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rendu());
    }
    
    // optional bool prisonnier = 15 [default = false];
    if (has_prisonnier()) {
      total_size += 1 + 1;
    }
    
    // optional bool refugie_pris_en_compte = 16 [default = false];
    if (has_refugie_pris_en_compte()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitKnowledgeUpdate::MergeFrom(const MsgUnitKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(2)) {
      set_pertinence(from.pertinence());
    }
    if (from._has_bit(3)) {
      set_identification_level(from.identification_level());
    }
    if (from._has_bit(4)) {
      set_max_identification_level(from.max_identification_level());
    }
    if (from._has_bit(5)) {
      set_etat_op(from.etat_op());
    }
    if (from._has_bit(6)) {
      set_mort(from.mort());
    }
    if (from._has_bit(7)) {
      mutable_position()->::Common::MsgCoordLatLong::MergeFrom(from.position());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_direction()->::Common::MsgHeading::MergeFrom(from.direction());
    }
    if (from._has_bit(9)) {
      set_speed(from.speed());
    }
    if (from._has_bit(10)) {
      set_camp(from.camp());
    }
    if (from._has_bit(11)) {
      set_nature_pc(from.nature_pc());
    }
    if (from._has_bit(12)) {
      mutable_perception_par_compagnie()->::MsgsSimToClient::SeqOfAutomatPerception::MergeFrom(from.perception_par_compagnie());
    }
    if (from._has_bit(13)) {
      set_rendu(from.rendu());
    }
    if (from._has_bit(14)) {
      set_prisonnier(from.prisonnier());
    }
    if (from._has_bit(15)) {
      set_refugie_pris_en_compte(from.refugie_pris_en_compte());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitKnowledgeUpdate::CopyFrom(const MsgUnitKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  if (has_perception_par_compagnie()) {
    if (!this->perception_par_compagnie().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitKnowledgeUpdate::Swap(MsgUnitKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(pertinence_, other->pertinence_);
    std::swap(identification_level_, other->identification_level_);
    std::swap(max_identification_level_, other->max_identification_level_);
    std::swap(etat_op_, other->etat_op_);
    std::swap(mort_, other->mort_);
    std::swap(position_, other->position_);
    std::swap(direction_, other->direction_);
    std::swap(speed_, other->speed_);
    std::swap(camp_, other->camp_);
    std::swap(nature_pc_, other->nature_pc_);
    std::swap(perception_par_compagnie_, other->perception_par_compagnie_);
    std::swap(rendu_, other->rendu_);
    std::swap(prisonnier_, other->prisonnier_);
    std::swap(refugie_pris_en_compte_, other->refugie_pris_en_compte_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgUnitKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitKnowledgeDestruction::kOidFieldNumber;
const int MsgUnitKnowledgeDestruction::kOidGroupePossesseurFieldNumber;
#endif  // !_MSC_VER

MsgUnitKnowledgeDestruction::MsgUnitKnowledgeDestruction() {
  SharedCtor();
}

void MsgUnitKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgUnitKnowledgeDestruction::MsgUnitKnowledgeDestruction(const MsgUnitKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_groupe_possesseur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitKnowledgeDestruction::~MsgUnitKnowledgeDestruction() {
  SharedDtor();
}

void MsgUnitKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitKnowledgeDestruction_descriptor_;
}

const MsgUnitKnowledgeDestruction& MsgUnitKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitKnowledgeDestruction* MsgUnitKnowledgeDestruction::default_instance_ = NULL;

MsgUnitKnowledgeDestruction* MsgUnitKnowledgeDestruction::New() const {
  return new MsgUnitKnowledgeDestruction;
}

void MsgUnitKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_groupe_possesseur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitKnowledgeDestruction::MergeFrom(const MsgUnitKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitKnowledgeDestruction::CopyFrom(const MsgUnitKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgUnitKnowledgeDestruction::Swap(MsgUnitKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgUnitKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartUnitFire_target::kUnitFieldNumber;
const int MsgStartUnitFire_target::kPopulationFieldNumber;
const int MsgStartUnitFire_target::kPositionFieldNumber;
#endif  // !_MSC_VER

MsgStartUnitFire_target::MsgStartUnitFire_target() {
  SharedCtor();
}

void MsgStartUnitFire_target::InitAsDefaultInstance() {
  position_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
}

MsgStartUnitFire_target::MsgStartUnitFire_target(const MsgStartUnitFire_target& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartUnitFire_target::SharedCtor() {
  _cached_size_ = 0;
  unit_ = 0;
  population_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartUnitFire_target::~MsgStartUnitFire_target() {
  SharedDtor();
}

void MsgStartUnitFire_target::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

const ::google::protobuf::Descriptor* MsgStartUnitFire_target::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartUnitFire_target_descriptor_;
}

const MsgStartUnitFire_target& MsgStartUnitFire_target::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStartUnitFire_target* MsgStartUnitFire_target::default_instance_ = NULL;

MsgStartUnitFire_target* MsgStartUnitFire_target::New() const {
  return new MsgStartUnitFire_target;
}

void MsgStartUnitFire_target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_ = 0;
    population_ = 0;
    if (_has_bit(2)) {
      if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartUnitFire_target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &unit_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_population;
        break;
      }
      
      // optional int32 population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &population_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // optional .Common.MsgCoordLatLong position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartUnitFire_target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStartUnitFire_target::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 unit = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit(), output);
  }
  
  // optional int32 population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->population(), output);
  }
  
  // optional .Common.MsgCoordLatLong position = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartUnitFire_target::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 unit = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit(), target);
  }
  
  // optional int32 population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->population(), target);
  }
  
  // optional .Common.MsgCoordLatLong position = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartUnitFire_target::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit());
    }
    
    // optional int32 population = 2;
    if (has_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population());
    }
    
    // optional .Common.MsgCoordLatLong position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStartUnitFire_target::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartUnitFire_target* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartUnitFire_target*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartUnitFire_target::MergeFrom(const MsgStartUnitFire_target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_unit(from.unit());
    }
    if (from._has_bit(1)) {
      set_population(from.population());
    }
    if (from._has_bit(2)) {
      mutable_position()->::Common::MsgCoordLatLong::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartUnitFire_target::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartUnitFire_target::CopyFrom(const MsgStartUnitFire_target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartUnitFire_target::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void MsgStartUnitFire_target::Swap(MsgStartUnitFire_target* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(population_, other->population_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartUnitFire_target::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartUnitFire_target_descriptor_;
  metadata.reflection = MsgStartUnitFire_target_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartUnitFire::kFireOidFieldNumber;
const int MsgStartUnitFire::kFirerOidFieldNumber;
const int MsgStartUnitFire::kTargetFieldNumber;
const int MsgStartUnitFire::kTypeFieldNumber;
const int MsgStartUnitFire::kAmmunitionFieldNumber;
#endif  // !_MSC_VER

MsgStartUnitFire::MsgStartUnitFire() {
  SharedCtor();
}

void MsgStartUnitFire::InitAsDefaultInstance() {
  target_ = const_cast< ::MsgsSimToClient::MsgStartUnitFire_target*>(&::MsgsSimToClient::MsgStartUnitFire_target::default_instance());
}

MsgStartUnitFire::MsgStartUnitFire(const MsgStartUnitFire& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartUnitFire::SharedCtor() {
  _cached_size_ = 0;
  fire_oid_ = 0;
  firer_oid_ = 0;
  target_ = NULL;
  type_ = 0;
  ammunition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartUnitFire::~MsgStartUnitFire() {
  SharedDtor();
}

void MsgStartUnitFire::SharedDtor() {
  if (this != default_instance_) {
    delete target_;
  }
}

const ::google::protobuf::Descriptor* MsgStartUnitFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartUnitFire_descriptor_;
}

const MsgStartUnitFire& MsgStartUnitFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStartUnitFire* MsgStartUnitFire::default_instance_ = NULL;

MsgStartUnitFire* MsgStartUnitFire::New() const {
  return new MsgStartUnitFire;
}

void MsgStartUnitFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_oid_ = 0;
    firer_oid_ = 0;
    if (_has_bit(2)) {
      if (target_ != NULL) target_->::MsgsSimToClient::MsgStartUnitFire_target::Clear();
    }
    type_ = 0;
    ammunition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartUnitFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fire_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fire_oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_firer_oid;
        break;
      }
      
      // required int32 firer_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_firer_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &firer_oid_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_target;
        break;
      }
      
      // required .MsgsSimToClient.MsgStartUnitFire_target target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_target:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_target()));
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required .Common.MsgStartUnitFire_type type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::MsgStartUnitFire_type_IsValid(value)) {
          set_type(static_cast< Common::MsgStartUnitFire_type >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_ammunition;
        break;
      }
      
      // optional int32 ammunition = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_ammunition:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ammunition_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartUnitFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStartUnitFire::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fire_oid(), output);
  }
  
  // required int32 firer_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->firer_oid(), output);
  }
  
  // required .MsgsSimToClient.MsgStartUnitFire_target target = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->target(), output);
  }
  
  // required .Common.MsgStartUnitFire_type type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // optional int32 ammunition = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ammunition(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartUnitFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fire_oid(), target);
  }
  
  // required int32 firer_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->firer_oid(), target);
  }
  
  // required .MsgsSimToClient.MsgStartUnitFire_target target = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->target(), target);
  }
  
  // required .Common.MsgStartUnitFire_type type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // optional int32 ammunition = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ammunition(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartUnitFire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fire_oid = 1;
    if (has_fire_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_oid());
    }
    
    // required int32 firer_oid = 2;
    if (has_firer_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firer_oid());
    }
    
    // required .MsgsSimToClient.MsgStartUnitFire_target target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // required .Common.MsgStartUnitFire_type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional int32 ammunition = 5 [default = 0];
    if (has_ammunition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ammunition());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStartUnitFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartUnitFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartUnitFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartUnitFire::MergeFrom(const MsgStartUnitFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fire_oid(from.fire_oid());
    }
    if (from._has_bit(1)) {
      set_firer_oid(from.firer_oid());
    }
    if (from._has_bit(2)) {
      mutable_target()->::MsgsSimToClient::MsgStartUnitFire_target::MergeFrom(from.target());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_ammunition(from.ammunition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartUnitFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartUnitFire::CopyFrom(const MsgStartUnitFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartUnitFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void MsgStartUnitFire::Swap(MsgStartUnitFire* other) {
  if (other != this) {
    std::swap(fire_oid_, other->fire_oid_);
    std::swap(firer_oid_, other->firer_oid_);
    std::swap(target_, other->target_);
    std::swap(type_, other->type_);
    std::swap(ammunition_, other->ammunition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartUnitFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartUnitFire_descriptor_;
  metadata.reflection = MsgStartUnitFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitHumanFireDamage::kRankFieldNumber;
const int UnitHumanFireDamage::kAliveNbrFieldNumber;
const int UnitHumanFireDamage::kDeadNbrFieldNumber;
const int UnitHumanFireDamage::kWoundedU1NbrFieldNumber;
const int UnitHumanFireDamage::kWoundedU2NbrFieldNumber;
const int UnitHumanFireDamage::kWoundedU3NbrFieldNumber;
const int UnitHumanFireDamage::kWoundedUeNbrFieldNumber;
#endif  // !_MSC_VER

UnitHumanFireDamage::UnitHumanFireDamage() {
  SharedCtor();
}

void UnitHumanFireDamage::InitAsDefaultInstance() {
}

UnitHumanFireDamage::UnitHumanFireDamage(const UnitHumanFireDamage& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitHumanFireDamage::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  alive_nbr_ = 0;
  dead_nbr_ = 0;
  wounded_u1_nbr_ = 0;
  wounded_u2_nbr_ = 0;
  wounded_u3_nbr_ = 0;
  wounded_ue_nbr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitHumanFireDamage::~UnitHumanFireDamage() {
  SharedDtor();
}

void UnitHumanFireDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitHumanFireDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitHumanFireDamage_descriptor_;
}

const UnitHumanFireDamage& UnitHumanFireDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

UnitHumanFireDamage* UnitHumanFireDamage::default_instance_ = NULL;

UnitHumanFireDamage* UnitHumanFireDamage::New() const {
  return new UnitHumanFireDamage;
}

void UnitHumanFireDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    alive_nbr_ = 0;
    dead_nbr_ = 0;
    wounded_u1_nbr_ = 0;
    wounded_u2_nbr_ = 0;
    wounded_u3_nbr_ = 0;
    wounded_ue_nbr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitHumanFireDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.EnumHumanRank rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanRank_IsValid(value)) {
          set_rank(static_cast< Common::EnumHumanRank >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_alive_nbr;
        break;
      }
      
      // required int32 alive_nbr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_alive_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &alive_nbr_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_dead_nbr;
        break;
      }
      
      // required int32 dead_nbr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dead_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dead_nbr_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_wounded_u1_nbr;
        break;
      }
      
      // required int32 wounded_u1_nbr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wounded_u1_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wounded_u1_nbr_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_wounded_u2_nbr;
        break;
      }
      
      // required int32 wounded_u2_nbr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wounded_u2_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wounded_u2_nbr_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_wounded_u3_nbr;
        break;
      }
      
      // required int32 wounded_u3_nbr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wounded_u3_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wounded_u3_nbr_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_wounded_ue_nbr;
        break;
      }
      
      // required int32 wounded_ue_nbr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wounded_ue_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wounded_ue_nbr_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitHumanFireDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitHumanFireDamage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.EnumHumanRank rank = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rank(), output);
  }
  
  // required int32 alive_nbr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alive_nbr(), output);
  }
  
  // required int32 dead_nbr = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dead_nbr(), output);
  }
  
  // required int32 wounded_u1_nbr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wounded_u1_nbr(), output);
  }
  
  // required int32 wounded_u2_nbr = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wounded_u2_nbr(), output);
  }
  
  // required int32 wounded_u3_nbr = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wounded_u3_nbr(), output);
  }
  
  // required int32 wounded_ue_nbr = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->wounded_ue_nbr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitHumanFireDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.EnumHumanRank rank = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rank(), target);
  }
  
  // required int32 alive_nbr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alive_nbr(), target);
  }
  
  // required int32 dead_nbr = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dead_nbr(), target);
  }
  
  // required int32 wounded_u1_nbr = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wounded_u1_nbr(), target);
  }
  
  // required int32 wounded_u2_nbr = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wounded_u2_nbr(), target);
  }
  
  // required int32 wounded_u3_nbr = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wounded_u3_nbr(), target);
  }
  
  // required int32 wounded_ue_nbr = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->wounded_ue_nbr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitHumanFireDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.EnumHumanRank rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank());
    }
    
    // required int32 alive_nbr = 2;
    if (has_alive_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alive_nbr());
    }
    
    // required int32 dead_nbr = 3;
    if (has_dead_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_nbr());
    }
    
    // required int32 wounded_u1_nbr = 4;
    if (has_wounded_u1_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wounded_u1_nbr());
    }
    
    // required int32 wounded_u2_nbr = 5;
    if (has_wounded_u2_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wounded_u2_nbr());
    }
    
    // required int32 wounded_u3_nbr = 6;
    if (has_wounded_u3_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wounded_u3_nbr());
    }
    
    // required int32 wounded_ue_nbr = 7;
    if (has_wounded_ue_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wounded_ue_nbr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitHumanFireDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitHumanFireDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitHumanFireDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitHumanFireDamage::MergeFrom(const UnitHumanFireDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_rank(from.rank());
    }
    if (from._has_bit(1)) {
      set_alive_nbr(from.alive_nbr());
    }
    if (from._has_bit(2)) {
      set_dead_nbr(from.dead_nbr());
    }
    if (from._has_bit(3)) {
      set_wounded_u1_nbr(from.wounded_u1_nbr());
    }
    if (from._has_bit(4)) {
      set_wounded_u2_nbr(from.wounded_u2_nbr());
    }
    if (from._has_bit(5)) {
      set_wounded_u3_nbr(from.wounded_u3_nbr());
    }
    if (from._has_bit(6)) {
      set_wounded_ue_nbr(from.wounded_ue_nbr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitHumanFireDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitHumanFireDamage::CopyFrom(const UnitHumanFireDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitHumanFireDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void UnitHumanFireDamage::Swap(UnitHumanFireDamage* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(alive_nbr_, other->alive_nbr_);
    std::swap(dead_nbr_, other->dead_nbr_);
    std::swap(wounded_u1_nbr_, other->wounded_u1_nbr_);
    std::swap(wounded_u2_nbr_, other->wounded_u2_nbr_);
    std::swap(wounded_u3_nbr_, other->wounded_u3_nbr_);
    std::swap(wounded_ue_nbr_, other->wounded_ue_nbr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitHumanFireDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitHumanFireDamage_descriptor_;
  metadata.reflection = UnitHumanFireDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfUnitHumanFireDamage::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfUnitHumanFireDamage::SeqOfUnitHumanFireDamage() {
  SharedCtor();
}

void SeqOfUnitHumanFireDamage::InitAsDefaultInstance() {
}

SeqOfUnitHumanFireDamage::SeqOfUnitHumanFireDamage(const SeqOfUnitHumanFireDamage& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfUnitHumanFireDamage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfUnitHumanFireDamage::~SeqOfUnitHumanFireDamage() {
  SharedDtor();
}

void SeqOfUnitHumanFireDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfUnitHumanFireDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfUnitHumanFireDamage_descriptor_;
}

const SeqOfUnitHumanFireDamage& SeqOfUnitHumanFireDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfUnitHumanFireDamage* SeqOfUnitHumanFireDamage::default_instance_ = NULL;

SeqOfUnitHumanFireDamage* SeqOfUnitHumanFireDamage::New() const {
  return new SeqOfUnitHumanFireDamage;
}

void SeqOfUnitHumanFireDamage::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfUnitHumanFireDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.UnitHumanFireDamage elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfUnitHumanFireDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfUnitHumanFireDamage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.UnitHumanFireDamage elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfUnitHumanFireDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.UnitHumanFireDamage elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfUnitHumanFireDamage::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.UnitHumanFireDamage elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfUnitHumanFireDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfUnitHumanFireDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfUnitHumanFireDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfUnitHumanFireDamage::MergeFrom(const SeqOfUnitHumanFireDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfUnitHumanFireDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfUnitHumanFireDamage::CopyFrom(const SeqOfUnitHumanFireDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfUnitHumanFireDamage::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfUnitHumanFireDamage::Swap(SeqOfUnitHumanFireDamage* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfUnitHumanFireDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfUnitHumanFireDamage_descriptor_;
  metadata.reflection = SeqOfUnitHumanFireDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitEquipmentFireDamage::kEquipementTypeFieldNumber;
const int MsgUnitEquipmentFireDamage::kAvailableNbrFieldNumber;
const int MsgUnitEquipmentFireDamage::kUnavailableNbrFieldNumber;
const int MsgUnitEquipmentFireDamage::kRepairableNbrFieldNumber;
#endif  // !_MSC_VER

MsgUnitEquipmentFireDamage::MsgUnitEquipmentFireDamage() {
  SharedCtor();
}

void MsgUnitEquipmentFireDamage::InitAsDefaultInstance() {
}

MsgUnitEquipmentFireDamage::MsgUnitEquipmentFireDamage(const MsgUnitEquipmentFireDamage& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitEquipmentFireDamage::SharedCtor() {
  _cached_size_ = 0;
  equipement_type_ = 0;
  available_nbr_ = 0u;
  unavailable_nbr_ = 0u;
  repairable_nbr_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitEquipmentFireDamage::~MsgUnitEquipmentFireDamage() {
  SharedDtor();
}

void MsgUnitEquipmentFireDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitEquipmentFireDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitEquipmentFireDamage_descriptor_;
}

const MsgUnitEquipmentFireDamage& MsgUnitEquipmentFireDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitEquipmentFireDamage* MsgUnitEquipmentFireDamage::default_instance_ = NULL;

MsgUnitEquipmentFireDamage* MsgUnitEquipmentFireDamage::New() const {
  return new MsgUnitEquipmentFireDamage;
}

void MsgUnitEquipmentFireDamage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipement_type_ = 0;
    available_nbr_ = 0u;
    unavailable_nbr_ = 0u;
    repairable_nbr_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitEquipmentFireDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 equipement_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &equipement_type_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_available_nbr;
        break;
      }
      
      // required uint32 available_nbr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_available_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &available_nbr_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_unavailable_nbr;
        break;
      }
      
      // required uint32 unavailable_nbr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_unavailable_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &unavailable_nbr_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_repairable_nbr;
        break;
      }
      
      // required uint32 repairable_nbr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_repairable_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &repairable_nbr_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitEquipmentFireDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitEquipmentFireDamage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 equipement_type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equipement_type(), output);
  }
  
  // required uint32 available_nbr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->available_nbr(), output);
  }
  
  // required uint32 unavailable_nbr = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unavailable_nbr(), output);
  }
  
  // required uint32 repairable_nbr = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->repairable_nbr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitEquipmentFireDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 equipement_type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equipement_type(), target);
  }
  
  // required uint32 available_nbr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->available_nbr(), target);
  }
  
  // required uint32 unavailable_nbr = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unavailable_nbr(), target);
  }
  
  // required uint32 repairable_nbr = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->repairable_nbr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitEquipmentFireDamage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 equipement_type = 1;
    if (has_equipement_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipement_type());
    }
    
    // required uint32 available_nbr = 2;
    if (has_available_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->available_nbr());
    }
    
    // required uint32 unavailable_nbr = 3;
    if (has_unavailable_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unavailable_nbr());
    }
    
    // required uint32 repairable_nbr = 4;
    if (has_repairable_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repairable_nbr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitEquipmentFireDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitEquipmentFireDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitEquipmentFireDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitEquipmentFireDamage::MergeFrom(const MsgUnitEquipmentFireDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_equipement_type(from.equipement_type());
    }
    if (from._has_bit(1)) {
      set_available_nbr(from.available_nbr());
    }
    if (from._has_bit(2)) {
      set_unavailable_nbr(from.unavailable_nbr());
    }
    if (from._has_bit(3)) {
      set_repairable_nbr(from.repairable_nbr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitEquipmentFireDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitEquipmentFireDamage::CopyFrom(const MsgUnitEquipmentFireDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitEquipmentFireDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgUnitEquipmentFireDamage::Swap(MsgUnitEquipmentFireDamage* other) {
  if (other != this) {
    std::swap(equipement_type_, other->equipement_type_);
    std::swap(available_nbr_, other->available_nbr_);
    std::swap(unavailable_nbr_, other->unavailable_nbr_);
    std::swap(repairable_nbr_, other->repairable_nbr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitEquipmentFireDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitEquipmentFireDamage_descriptor_;
  metadata.reflection = MsgUnitEquipmentFireDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfUnitEquipmentFireDamage::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfUnitEquipmentFireDamage::SeqOfUnitEquipmentFireDamage() {
  SharedCtor();
}

void SeqOfUnitEquipmentFireDamage::InitAsDefaultInstance() {
}

SeqOfUnitEquipmentFireDamage::SeqOfUnitEquipmentFireDamage(const SeqOfUnitEquipmentFireDamage& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfUnitEquipmentFireDamage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfUnitEquipmentFireDamage::~SeqOfUnitEquipmentFireDamage() {
  SharedDtor();
}

void SeqOfUnitEquipmentFireDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfUnitEquipmentFireDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfUnitEquipmentFireDamage_descriptor_;
}

const SeqOfUnitEquipmentFireDamage& SeqOfUnitEquipmentFireDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfUnitEquipmentFireDamage* SeqOfUnitEquipmentFireDamage::default_instance_ = NULL;

SeqOfUnitEquipmentFireDamage* SeqOfUnitEquipmentFireDamage::New() const {
  return new SeqOfUnitEquipmentFireDamage;
}

void SeqOfUnitEquipmentFireDamage::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfUnitEquipmentFireDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgUnitEquipmentFireDamage elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfUnitEquipmentFireDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfUnitEquipmentFireDamage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgUnitEquipmentFireDamage elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfUnitEquipmentFireDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgUnitEquipmentFireDamage elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfUnitEquipmentFireDamage::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgUnitEquipmentFireDamage elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfUnitEquipmentFireDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfUnitEquipmentFireDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfUnitEquipmentFireDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfUnitEquipmentFireDamage::MergeFrom(const SeqOfUnitEquipmentFireDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfUnitEquipmentFireDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfUnitEquipmentFireDamage::CopyFrom(const SeqOfUnitEquipmentFireDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfUnitEquipmentFireDamage::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfUnitEquipmentFireDamage::Swap(SeqOfUnitEquipmentFireDamage* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfUnitEquipmentFireDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfUnitEquipmentFireDamage_descriptor_;
  metadata.reflection = SeqOfUnitEquipmentFireDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitFireDamages::kTargetFieldNumber;
const int MsgUnitFireDamages::kHumansFieldNumber;
const int MsgUnitFireDamages::kEquipmentsFieldNumber;
#endif  // !_MSC_VER

MsgUnitFireDamages::MsgUnitFireDamages() {
  SharedCtor();
}

void MsgUnitFireDamages::InitAsDefaultInstance() {
  humans_ = const_cast< ::MsgsSimToClient::SeqOfUnitHumanFireDamage*>(&::MsgsSimToClient::SeqOfUnitHumanFireDamage::default_instance());
  equipments_ = const_cast< ::MsgsSimToClient::SeqOfUnitEquipmentFireDamage*>(&::MsgsSimToClient::SeqOfUnitEquipmentFireDamage::default_instance());
}

MsgUnitFireDamages::MsgUnitFireDamages(const MsgUnitFireDamages& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitFireDamages::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  humans_ = NULL;
  equipments_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitFireDamages::~MsgUnitFireDamages() {
  SharedDtor();
}

void MsgUnitFireDamages::SharedDtor() {
  if (this != default_instance_) {
    delete humans_;
    delete equipments_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitFireDamages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitFireDamages_descriptor_;
}

const MsgUnitFireDamages& MsgUnitFireDamages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitFireDamages* MsgUnitFireDamages::default_instance_ = NULL;

MsgUnitFireDamages* MsgUnitFireDamages::New() const {
  return new MsgUnitFireDamages;
}

void MsgUnitFireDamages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0;
    if (_has_bit(1)) {
      if (humans_ != NULL) humans_->::MsgsSimToClient::SeqOfUnitHumanFireDamage::Clear();
    }
    if (_has_bit(2)) {
      if (equipments_ != NULL) equipments_->::MsgsSimToClient::SeqOfUnitEquipmentFireDamage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitFireDamages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &target_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_humans;
        break;
      }
      
      // required .MsgsSimToClient.SeqOfUnitHumanFireDamage humans = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_humans:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_humans()));
        if (input->ExpectTag(26)) goto parse_equipments;
        break;
      }
      
      // required .MsgsSimToClient.SeqOfUnitEquipmentFireDamage equipments = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equipments:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_equipments()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitFireDamages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitFireDamages::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }
  
  // required .MsgsSimToClient.SeqOfUnitHumanFireDamage humans = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->humans(), output);
  }
  
  // required .MsgsSimToClient.SeqOfUnitEquipmentFireDamage equipments = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->equipments(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitFireDamages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 target = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }
  
  // required .MsgsSimToClient.SeqOfUnitHumanFireDamage humans = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->humans(), target);
  }
  
  // required .MsgsSimToClient.SeqOfUnitEquipmentFireDamage equipments = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equipments(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitFireDamages::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }
    
    // required .MsgsSimToClient.SeqOfUnitHumanFireDamage humans = 2;
    if (has_humans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->humans());
    }
    
    // required .MsgsSimToClient.SeqOfUnitEquipmentFireDamage equipments = 3;
    if (has_equipments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipments());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitFireDamages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitFireDamages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitFireDamages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitFireDamages::MergeFrom(const MsgUnitFireDamages& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target(from.target());
    }
    if (from._has_bit(1)) {
      mutable_humans()->::MsgsSimToClient::SeqOfUnitHumanFireDamage::MergeFrom(from.humans());
    }
    if (from._has_bit(2)) {
      mutable_equipments()->::MsgsSimToClient::SeqOfUnitEquipmentFireDamage::MergeFrom(from.equipments());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitFireDamages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitFireDamages::CopyFrom(const MsgUnitFireDamages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitFireDamages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_humans()) {
    if (!this->humans().IsInitialized()) return false;
  }
  if (has_equipments()) {
    if (!this->equipments().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitFireDamages::Swap(MsgUnitFireDamages* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(humans_, other->humans_);
    std::swap(equipments_, other->equipments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitFireDamages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitFireDamages_descriptor_;
  metadata.reflection = MsgUnitFireDamages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitsFireDamages::kElemFieldNumber;
#endif  // !_MSC_VER

MsgUnitsFireDamages::MsgUnitsFireDamages() {
  SharedCtor();
}

void MsgUnitsFireDamages::InitAsDefaultInstance() {
}

MsgUnitsFireDamages::MsgUnitsFireDamages(const MsgUnitsFireDamages& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitsFireDamages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitsFireDamages::~MsgUnitsFireDamages() {
  SharedDtor();
}

void MsgUnitsFireDamages::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitsFireDamages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitsFireDamages_descriptor_;
}

const MsgUnitsFireDamages& MsgUnitsFireDamages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitsFireDamages* MsgUnitsFireDamages::default_instance_ = NULL;

MsgUnitsFireDamages* MsgUnitsFireDamages::New() const {
  return new MsgUnitsFireDamages;
}

void MsgUnitsFireDamages::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitsFireDamages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgUnitFireDamages elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitsFireDamages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitsFireDamages::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgUnitFireDamages elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitsFireDamages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgUnitFireDamages elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitsFireDamages::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgUnitFireDamages elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitsFireDamages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitsFireDamages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitsFireDamages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitsFireDamages::MergeFrom(const MsgUnitsFireDamages& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitsFireDamages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitsFireDamages::CopyFrom(const MsgUnitsFireDamages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitsFireDamages::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgUnitsFireDamages::Swap(MsgUnitsFireDamages* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitsFireDamages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitsFireDamages_descriptor_;
  metadata.reflection = MsgUnitsFireDamages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFireDamages::kTargetFieldNumber;
const int MsgPopulationFireDamages::kDeadNbrFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFireDamages::MsgPopulationFireDamages() {
  SharedCtor();
}

void MsgPopulationFireDamages::InitAsDefaultInstance() {
}

MsgPopulationFireDamages::MsgPopulationFireDamages(const MsgPopulationFireDamages& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFireDamages::SharedCtor() {
  _cached_size_ = 0;
  target_ = 0;
  dead_nbr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFireDamages::~MsgPopulationFireDamages() {
  SharedDtor();
}

void MsgPopulationFireDamages::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFireDamages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFireDamages_descriptor_;
}

const MsgPopulationFireDamages& MsgPopulationFireDamages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFireDamages* MsgPopulationFireDamages::default_instance_ = NULL;

MsgPopulationFireDamages* MsgPopulationFireDamages::New() const {
  return new MsgPopulationFireDamages;
}

void MsgPopulationFireDamages::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_ = 0;
    dead_nbr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFireDamages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &target_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_dead_nbr;
        break;
      }
      
      // required int32 dead_nbr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dead_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dead_nbr_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFireDamages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFireDamages::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 target = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->target(), output);
  }
  
  // required int32 dead_nbr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dead_nbr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFireDamages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 target = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->target(), target);
  }
  
  // required int32 dead_nbr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dead_nbr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFireDamages::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 target = 1;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }
    
    // required int32 dead_nbr = 2;
    if (has_dead_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dead_nbr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFireDamages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFireDamages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFireDamages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFireDamages::MergeFrom(const MsgPopulationFireDamages& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_target(from.target());
    }
    if (from._has_bit(1)) {
      set_dead_nbr(from.dead_nbr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFireDamages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFireDamages::CopyFrom(const MsgPopulationFireDamages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFireDamages::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationFireDamages::Swap(MsgPopulationFireDamages* other) {
  if (other != this) {
    std::swap(target_, other->target_);
    std::swap(dead_nbr_, other->dead_nbr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFireDamages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFireDamages_descriptor_;
  metadata.reflection = MsgPopulationFireDamages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationsFireDamages::kElemFieldNumber;
#endif  // !_MSC_VER

MsgPopulationsFireDamages::MsgPopulationsFireDamages() {
  SharedCtor();
}

void MsgPopulationsFireDamages::InitAsDefaultInstance() {
}

MsgPopulationsFireDamages::MsgPopulationsFireDamages(const MsgPopulationsFireDamages& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationsFireDamages::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationsFireDamages::~MsgPopulationsFireDamages() {
  SharedDtor();
}

void MsgPopulationsFireDamages::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationsFireDamages::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationsFireDamages_descriptor_;
}

const MsgPopulationsFireDamages& MsgPopulationsFireDamages::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationsFireDamages* MsgPopulationsFireDamages::default_instance_ = NULL;

MsgPopulationsFireDamages* MsgPopulationsFireDamages::New() const {
  return new MsgPopulationsFireDamages;
}

void MsgPopulationsFireDamages::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationsFireDamages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgPopulationFireDamages elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationsFireDamages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationsFireDamages::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgPopulationFireDamages elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationsFireDamages::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgPopulationFireDamages elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationsFireDamages::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgPopulationFireDamages elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationsFireDamages::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationsFireDamages* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationsFireDamages*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationsFireDamages::MergeFrom(const MsgPopulationsFireDamages& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationsFireDamages::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationsFireDamages::CopyFrom(const MsgPopulationsFireDamages& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationsFireDamages::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationsFireDamages::Swap(MsgPopulationsFireDamages* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationsFireDamages::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationsFireDamages_descriptor_;
  metadata.reflection = MsgPopulationsFireDamages_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStopUnitFire::kFireOidFieldNumber;
const int MsgStopUnitFire::kUnitsDamagesFieldNumber;
const int MsgStopUnitFire::kPopulationsDamagesFieldNumber;
#endif  // !_MSC_VER

MsgStopUnitFire::MsgStopUnitFire() {
  SharedCtor();
}

void MsgStopUnitFire::InitAsDefaultInstance() {
  units_damages_ = const_cast< ::MsgsSimToClient::MsgUnitsFireDamages*>(&::MsgsSimToClient::MsgUnitsFireDamages::default_instance());
  populations_damages_ = const_cast< ::MsgsSimToClient::MsgPopulationsFireDamages*>(&::MsgsSimToClient::MsgPopulationsFireDamages::default_instance());
}

MsgStopUnitFire::MsgStopUnitFire(const MsgStopUnitFire& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStopUnitFire::SharedCtor() {
  _cached_size_ = 0;
  fire_oid_ = 0;
  units_damages_ = NULL;
  populations_damages_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStopUnitFire::~MsgStopUnitFire() {
  SharedDtor();
}

void MsgStopUnitFire::SharedDtor() {
  if (this != default_instance_) {
    delete units_damages_;
    delete populations_damages_;
  }
}

const ::google::protobuf::Descriptor* MsgStopUnitFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStopUnitFire_descriptor_;
}

const MsgStopUnitFire& MsgStopUnitFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStopUnitFire* MsgStopUnitFire::default_instance_ = NULL;

MsgStopUnitFire* MsgStopUnitFire::New() const {
  return new MsgStopUnitFire;
}

void MsgStopUnitFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_oid_ = 0;
    if (_has_bit(1)) {
      if (units_damages_ != NULL) units_damages_->::MsgsSimToClient::MsgUnitsFireDamages::Clear();
    }
    if (_has_bit(2)) {
      if (populations_damages_ != NULL) populations_damages_->::MsgsSimToClient::MsgPopulationsFireDamages::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStopUnitFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fire_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fire_oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_units_damages;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_units_damages()));
        if (input->ExpectTag(26)) goto parse_populations_damages;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_populations_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_populations_damages()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStopUnitFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStopUnitFire::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fire_oid(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->units_damages(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->populations_damages(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStopUnitFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fire_oid(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units_damages(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->populations_damages(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStopUnitFire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fire_oid = 1;
    if (has_fire_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_oid());
    }
    
    // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
    if (has_units_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units_damages());
    }
    
    // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
    if (has_populations_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->populations_damages());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStopUnitFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStopUnitFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStopUnitFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStopUnitFire::MergeFrom(const MsgStopUnitFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fire_oid(from.fire_oid());
    }
    if (from._has_bit(1)) {
      mutable_units_damages()->::MsgsSimToClient::MsgUnitsFireDamages::MergeFrom(from.units_damages());
    }
    if (from._has_bit(2)) {
      mutable_populations_damages()->::MsgsSimToClient::MsgPopulationsFireDamages::MergeFrom(from.populations_damages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStopUnitFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStopUnitFire::CopyFrom(const MsgStopUnitFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStopUnitFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_units_damages()) {
    if (!this->units_damages().IsInitialized()) return false;
  }
  if (has_populations_damages()) {
    if (!this->populations_damages().IsInitialized()) return false;
  }
  return true;
}

void MsgStopUnitFire::Swap(MsgStopUnitFire* other) {
  if (other != this) {
    std::swap(fire_oid_, other->fire_oid_);
    std::swap(units_damages_, other->units_damages_);
    std::swap(populations_damages_, other->populations_damages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStopUnitFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStopUnitFire_descriptor_;
  metadata.reflection = MsgStopUnitFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartPopulationFire::kFireOidFieldNumber;
const int MsgStartPopulationFire::kFirerOidFieldNumber;
#endif  // !_MSC_VER

MsgStartPopulationFire::MsgStartPopulationFire() {
  SharedCtor();
}

void MsgStartPopulationFire::InitAsDefaultInstance() {
}

MsgStartPopulationFire::MsgStartPopulationFire(const MsgStartPopulationFire& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartPopulationFire::SharedCtor() {
  _cached_size_ = 0;
  fire_oid_ = 0;
  firer_oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartPopulationFire::~MsgStartPopulationFire() {
  SharedDtor();
}

void MsgStartPopulationFire::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgStartPopulationFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartPopulationFire_descriptor_;
}

const MsgStartPopulationFire& MsgStartPopulationFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStartPopulationFire* MsgStartPopulationFire::default_instance_ = NULL;

MsgStartPopulationFire* MsgStartPopulationFire::New() const {
  return new MsgStartPopulationFire;
}

void MsgStartPopulationFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_oid_ = 0;
    firer_oid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartPopulationFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fire_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fire_oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_firer_oid;
        break;
      }
      
      // required int32 firer_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_firer_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &firer_oid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartPopulationFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStartPopulationFire::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fire_oid(), output);
  }
  
  // required int32 firer_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->firer_oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartPopulationFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fire_oid(), target);
  }
  
  // required int32 firer_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->firer_oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartPopulationFire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fire_oid = 1;
    if (has_fire_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_oid());
    }
    
    // required int32 firer_oid = 2;
    if (has_firer_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firer_oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStartPopulationFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartPopulationFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartPopulationFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartPopulationFire::MergeFrom(const MsgStartPopulationFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fire_oid(from.fire_oid());
    }
    if (from._has_bit(1)) {
      set_firer_oid(from.firer_oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartPopulationFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartPopulationFire::CopyFrom(const MsgStartPopulationFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartPopulationFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgStartPopulationFire::Swap(MsgStartPopulationFire* other) {
  if (other != this) {
    std::swap(fire_oid_, other->fire_oid_);
    std::swap(firer_oid_, other->firer_oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartPopulationFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartPopulationFire_descriptor_;
  metadata.reflection = MsgStartPopulationFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStopPopulationFire::kFireOidFieldNumber;
const int MsgStopPopulationFire::kUnitsDamagesFieldNumber;
#endif  // !_MSC_VER

MsgStopPopulationFire::MsgStopPopulationFire() {
  SharedCtor();
}

void MsgStopPopulationFire::InitAsDefaultInstance() {
  units_damages_ = const_cast< ::MsgsSimToClient::MsgUnitsFireDamages*>(&::MsgsSimToClient::MsgUnitsFireDamages::default_instance());
}

MsgStopPopulationFire::MsgStopPopulationFire(const MsgStopPopulationFire& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStopPopulationFire::SharedCtor() {
  _cached_size_ = 0;
  fire_oid_ = 0;
  units_damages_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStopPopulationFire::~MsgStopPopulationFire() {
  SharedDtor();
}

void MsgStopPopulationFire::SharedDtor() {
  if (this != default_instance_) {
    delete units_damages_;
  }
}

const ::google::protobuf::Descriptor* MsgStopPopulationFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStopPopulationFire_descriptor_;
}

const MsgStopPopulationFire& MsgStopPopulationFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStopPopulationFire* MsgStopPopulationFire::default_instance_ = NULL;

MsgStopPopulationFire* MsgStopPopulationFire::New() const {
  return new MsgStopPopulationFire;
}

void MsgStopPopulationFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fire_oid_ = 0;
    if (_has_bit(1)) {
      if (units_damages_ != NULL) units_damages_->::MsgsSimToClient::MsgUnitsFireDamages::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStopPopulationFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fire_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &fire_oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_units_damages;
        break;
      }
      
      // required .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_units_damages()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStopPopulationFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStopPopulationFire::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fire_oid(), output);
  }
  
  // required .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->units_damages(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStopPopulationFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fire_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fire_oid(), target);
  }
  
  // required .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units_damages(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStopPopulationFire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fire_oid = 1;
    if (has_fire_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fire_oid());
    }
    
    // required .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
    if (has_units_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units_damages());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStopPopulationFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStopPopulationFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStopPopulationFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStopPopulationFire::MergeFrom(const MsgStopPopulationFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_fire_oid(from.fire_oid());
    }
    if (from._has_bit(1)) {
      mutable_units_damages()->::MsgsSimToClient::MsgUnitsFireDamages::MergeFrom(from.units_damages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStopPopulationFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStopPopulationFire::CopyFrom(const MsgStopPopulationFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStopPopulationFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_units_damages()) {
    if (!this->units_damages().IsInitialized()) return false;
  }
  return true;
}

void MsgStopPopulationFire::Swap(MsgStopPopulationFire* other) {
  if (other != this) {
    std::swap(fire_oid_, other->fire_oid_);
    std::swap(units_damages_, other->units_damages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStopPopulationFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStopPopulationFire_descriptor_;
  metadata.reflection = MsgStopPopulationFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgExplosion::kObjectOidFieldNumber;
const int MsgExplosion::kUnitsDamagesFieldNumber;
const int MsgExplosion::kPopulationsDamagesFieldNumber;
#endif  // !_MSC_VER

MsgExplosion::MsgExplosion() {
  SharedCtor();
}

void MsgExplosion::InitAsDefaultInstance() {
  units_damages_ = const_cast< ::MsgsSimToClient::MsgUnitsFireDamages*>(&::MsgsSimToClient::MsgUnitsFireDamages::default_instance());
  populations_damages_ = const_cast< ::MsgsSimToClient::MsgPopulationsFireDamages*>(&::MsgsSimToClient::MsgPopulationsFireDamages::default_instance());
}

MsgExplosion::MsgExplosion(const MsgExplosion& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgExplosion::SharedCtor() {
  _cached_size_ = 0;
  object_oid_ = 0;
  units_damages_ = NULL;
  populations_damages_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExplosion::~MsgExplosion() {
  SharedDtor();
}

void MsgExplosion::SharedDtor() {
  if (this != default_instance_) {
    delete units_damages_;
    delete populations_damages_;
  }
}

const ::google::protobuf::Descriptor* MsgExplosion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExplosion_descriptor_;
}

const MsgExplosion& MsgExplosion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgExplosion* MsgExplosion::default_instance_ = NULL;

MsgExplosion* MsgExplosion::New() const {
  return new MsgExplosion;
}

void MsgExplosion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_oid_ = 0;
    if (_has_bit(1)) {
      if (units_damages_ != NULL) units_damages_->::MsgsSimToClient::MsgUnitsFireDamages::Clear();
    }
    if (_has_bit(2)) {
      if (populations_damages_ != NULL) populations_damages_->::MsgsSimToClient::MsgPopulationsFireDamages::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExplosion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 object_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &object_oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_units_damages;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_units_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_units_damages()));
        if (input->ExpectTag(26)) goto parse_populations_damages;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_populations_damages:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_populations_damages()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExplosion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgExplosion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 object_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->object_oid(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->units_damages(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->populations_damages(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExplosion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 object_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->object_oid(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->units_damages(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->populations_damages(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExplosion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 object_oid = 1;
    if (has_object_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_oid());
    }
    
    // optional .MsgsSimToClient.MsgUnitsFireDamages units_damages = 2;
    if (has_units_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units_damages());
    }
    
    // optional .MsgsSimToClient.MsgPopulationsFireDamages populations_damages = 3;
    if (has_populations_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->populations_damages());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgExplosion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExplosion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExplosion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExplosion::MergeFrom(const MsgExplosion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_object_oid(from.object_oid());
    }
    if (from._has_bit(1)) {
      mutable_units_damages()->::MsgsSimToClient::MsgUnitsFireDamages::MergeFrom(from.units_damages());
    }
    if (from._has_bit(2)) {
      mutable_populations_damages()->::MsgsSimToClient::MsgPopulationsFireDamages::MergeFrom(from.populations_damages());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExplosion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExplosion::CopyFrom(const MsgExplosion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExplosion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_units_damages()) {
    if (!this->units_damages().IsInitialized()) return false;
  }
  if (has_populations_damages()) {
    if (!this->populations_damages().IsInitialized()) return false;
  }
  return true;
}

void MsgExplosion::Swap(MsgExplosion* other) {
  if (other != this) {
    std::swap(object_oid_, other->object_oid_);
    std::swap(units_damages_, other->units_damages_);
    std::swap(populations_damages_, other->populations_damages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExplosion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExplosion_descriptor_;
  metadata.reflection = MsgExplosion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStartFireEffect::kEffectOidFieldNumber;
const int MsgStartFireEffect::kLocationFieldNumber;
const int MsgStartFireEffect::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgStartFireEffect::MsgStartFireEffect() {
  SharedCtor();
}

void MsgStartFireEffect::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgStartFireEffect::MsgStartFireEffect(const MsgStartFireEffect& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStartFireEffect::SharedCtor() {
  _cached_size_ = 0;
  effect_oid_ = 0;
  location_ = NULL;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStartFireEffect::~MsgStartFireEffect() {
  SharedDtor();
}

void MsgStartFireEffect::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgStartFireEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStartFireEffect_descriptor_;
}

const MsgStartFireEffect& MsgStartFireEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStartFireEffect* MsgStartFireEffect::default_instance_ = NULL;

MsgStartFireEffect* MsgStartFireEffect::New() const {
  return new MsgStartFireEffect;
}

void MsgStartFireEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effect_oid_ = 0;
    if (_has_bit(1)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStartFireEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 effect_oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &effect_oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // required .Common.MsgLocation location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // required .Common.EnumFireEffectType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumFireEffectType_IsValid(value)) {
          set_type(static_cast< Common::EnumFireEffectType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStartFireEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStartFireEffect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 effect_oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->effect_oid(), output);
  }
  
  // required .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->location(), output);
  }
  
  // required .Common.EnumFireEffectType type = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStartFireEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 effect_oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->effect_oid(), target);
  }
  
  // required .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  // required .Common.EnumFireEffectType type = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStartFireEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 effect_oid = 1;
    if (has_effect_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_oid());
    }
    
    // required .Common.MsgLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // required .Common.EnumFireEffectType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStartFireEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStartFireEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStartFireEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStartFireEffect::MergeFrom(const MsgStartFireEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_effect_oid(from.effect_oid());
    }
    if (from._has_bit(1)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(2)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStartFireEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStartFireEffect::CopyFrom(const MsgStartFireEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStartFireEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgStartFireEffect::Swap(MsgStartFireEffect* other) {
  if (other != this) {
    std::swap(effect_oid_, other->effect_oid_);
    std::swap(location_, other->location_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStartFireEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStartFireEffect_descriptor_;
  metadata.reflection = MsgStartFireEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgStopFireEffect::kOidFieldNumber;
#endif  // !_MSC_VER

MsgStopFireEffect::MsgStopFireEffect() {
  SharedCtor();
}

void MsgStopFireEffect::InitAsDefaultInstance() {
}

MsgStopFireEffect::MsgStopFireEffect(const MsgStopFireEffect& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgStopFireEffect::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgStopFireEffect::~MsgStopFireEffect() {
  SharedDtor();
}

void MsgStopFireEffect::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgStopFireEffect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgStopFireEffect_descriptor_;
}

const MsgStopFireEffect& MsgStopFireEffect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgStopFireEffect* MsgStopFireEffect::default_instance_ = NULL;

MsgStopFireEffect* MsgStopFireEffect::New() const {
  return new MsgStopFireEffect;
}

void MsgStopFireEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgStopFireEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgStopFireEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgStopFireEffect::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgStopFireEffect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgStopFireEffect::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgStopFireEffect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgStopFireEffect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgStopFireEffect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgStopFireEffect::MergeFrom(const MsgStopFireEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgStopFireEffect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgStopFireEffect::CopyFrom(const MsgStopFireEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgStopFireEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgStopFireEffect::Swap(MsgStopFireEffect* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgStopFireEffect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgStopFireEffect_descriptor_;
  metadata.reflection = MsgStopFireEffect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReport::kOidFieldNumber;
const int MsgReport::kCrFieldNumber;
const int MsgReport::kCrOidFieldNumber;
const int MsgReport::kTypeFieldNumber;
const int MsgReport::kTimeFieldNumber;
const int MsgReport::kParametresFieldNumber;
#endif  // !_MSC_VER

MsgReport::MsgReport() {
  SharedCtor();
}

void MsgReport::InitAsDefaultInstance() {
  time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
  parametres_ = const_cast< ::Common::MsgMissionParameters*>(&::Common::MsgMissionParameters::default_instance());
}

MsgReport::MsgReport(const MsgReport& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReport::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  cr_ = 0;
  cr_oid_ = 0;
  type_ = 0;
  time_ = NULL;
  parametres_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReport::~MsgReport() {
  SharedDtor();
}

void MsgReport::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
    delete parametres_;
  }
}

const ::google::protobuf::Descriptor* MsgReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReport_descriptor_;
}

const MsgReport& MsgReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgReport* MsgReport::default_instance_ = NULL;

MsgReport* MsgReport::New() const {
  return new MsgReport;
}

void MsgReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    cr_ = 0;
    cr_oid_ = 0;
    type_ = 0;
    if (_has_bit(4)) {
      if (time_ != NULL) time_->::Common::MsgDateTime::Clear();
    }
    if (_has_bit(5)) {
      if (parametres_ != NULL) parametres_->::Common::MsgMissionParameters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cr;
        break;
      }
      
      // required int32 cr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cr_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_cr_oid;
        break;
      }
      
      // required int32 cr_oid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cr_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cr_oid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required .MsgsSimToClient.EnumReportType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumReportType_IsValid(value)) {
          set_type(static_cast< MsgsSimToClient::EnumReportType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }
      
      // required .Common.MsgDateTime time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_time()));
        if (input->ExpectTag(50)) goto parse_parametres;
        break;
      }
      
      // optional .Common.MsgMissionParameters parametres = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parametres:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_parametres()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReport::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 cr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cr(), output);
  }
  
  // required int32 cr_oid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cr_oid(), output);
  }
  
  // required .MsgsSimToClient.EnumReportType type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // required .Common.MsgDateTime time = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->time(), output);
  }
  
  // optional .Common.MsgMissionParameters parametres = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->parametres(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 cr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cr(), target);
  }
  
  // required int32 cr_oid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cr_oid(), target);
  }
  
  // required .MsgsSimToClient.EnumReportType type = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // required .Common.MsgDateTime time = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->time(), target);
  }
  
  // optional .Common.MsgMissionParameters parametres = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->parametres(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 cr = 2;
    if (has_cr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cr());
    }
    
    // required int32 cr_oid = 3;
    if (has_cr_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cr_oid());
    }
    
    // required .MsgsSimToClient.EnumReportType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required .Common.MsgDateTime time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }
    
    // optional .Common.MsgMissionParameters parametres = 6;
    if (has_parametres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parametres());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReport::MergeFrom(const MsgReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_cr(from.cr());
    }
    if (from._has_bit(2)) {
      set_cr_oid(from.cr_oid());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      mutable_time()->::Common::MsgDateTime::MergeFrom(from.time());
    }
    if (from._has_bit(5)) {
      mutable_parametres()->::Common::MsgMissionParameters::MergeFrom(from.parametres());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReport::CopyFrom(const MsgReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_parametres()) {
    if (!this->parametres().IsInitialized()) return false;
  }
  return true;
}

void MsgReport::Swap(MsgReport* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(cr_, other->cr_);
    std::swap(cr_oid_, other->cr_oid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(parametres_, other->parametres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReport_descriptor_;
  metadata.reflection = MsgReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgInvalidateReport::kOidFieldNumber;
const int MsgInvalidateReport::kCrOidFieldNumber;
#endif  // !_MSC_VER

MsgInvalidateReport::MsgInvalidateReport() {
  SharedCtor();
}

void MsgInvalidateReport::InitAsDefaultInstance() {
}

MsgInvalidateReport::MsgInvalidateReport(const MsgInvalidateReport& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgInvalidateReport::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  cr_oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgInvalidateReport::~MsgInvalidateReport() {
  SharedDtor();
}

void MsgInvalidateReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgInvalidateReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgInvalidateReport_descriptor_;
}

const MsgInvalidateReport& MsgInvalidateReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgInvalidateReport* MsgInvalidateReport::default_instance_ = NULL;

MsgInvalidateReport* MsgInvalidateReport::New() const {
  return new MsgInvalidateReport;
}

void MsgInvalidateReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    cr_oid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgInvalidateReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_cr_oid;
        break;
      }
      
      // required int32 cr_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cr_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cr_oid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgInvalidateReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgInvalidateReport::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 cr_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cr_oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgInvalidateReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 cr_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cr_oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgInvalidateReport::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 cr_oid = 2;
    if (has_cr_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cr_oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgInvalidateReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgInvalidateReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgInvalidateReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgInvalidateReport::MergeFrom(const MsgInvalidateReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_cr_oid(from.cr_oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgInvalidateReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgInvalidateReport::CopyFrom(const MsgInvalidateReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgInvalidateReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgInvalidateReport::Swap(MsgInvalidateReport* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(cr_oid_, other->cr_oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgInvalidateReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgInvalidateReport_descriptor_;
  metadata.reflection = MsgInvalidateReport_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgTrace::_default_message_;
#ifndef _MSC_VER
const int MsgTrace::kOidFieldNumber;
const int MsgTrace::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgTrace::MsgTrace() {
  SharedCtor();
}

void MsgTrace::InitAsDefaultInstance() {
}

MsgTrace::MsgTrace(const MsgTrace& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTrace::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTrace::~MsgTrace() {
  SharedDtor();
}

void MsgTrace::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTrace_descriptor_;
}

const MsgTrace& MsgTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgTrace* MsgTrace::default_instance_ = NULL;

MsgTrace* MsgTrace::New() const {
  return new MsgTrace;
}

void MsgTrace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_message()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTrace::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTrace::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTrace::MergeFrom(const MsgTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTrace::CopyFrom(const MsgTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTrace::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgTrace::Swap(MsgTrace* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTrace_descriptor_;
  metadata.reflection = MsgTrace_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgDecisionalState::_default_key_;
const ::std::string MsgDecisionalState::_default_value_;
#ifndef _MSC_VER
const int MsgDecisionalState::kOidFieldNumber;
const int MsgDecisionalState::kKeyFieldNumber;
const int MsgDecisionalState::kValueFieldNumber;
#endif  // !_MSC_VER

MsgDecisionalState::MsgDecisionalState() {
  SharedCtor();
}

void MsgDecisionalState::InitAsDefaultInstance() {
}

MsgDecisionalState::MsgDecisionalState(const MsgDecisionalState& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDecisionalState::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDecisionalState::~MsgDecisionalState() {
  SharedDtor();
}

void MsgDecisionalState::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDecisionalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDecisionalState_descriptor_;
}

const MsgDecisionalState& MsgDecisionalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgDecisionalState* MsgDecisionalState::default_instance_ = NULL;

MsgDecisionalState* MsgDecisionalState::New() const {
  return new MsgDecisionalState;
}

void MsgDecisionalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDecisionalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required string key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_key:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_key()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->key().data(), this->key().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // required string value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_value()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->value().data(), this->value().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDecisionalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDecisionalState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required string key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->key(), output);
  }
  
  // required string value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDecisionalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required string key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }
  
  // required string value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDecisionalState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required string key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDecisionalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDecisionalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDecisionalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDecisionalState::MergeFrom(const MsgDecisionalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDecisionalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDecisionalState::CopyFrom(const MsgDecisionalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDecisionalState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgDecisionalState::Swap(MsgDecisionalState* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDecisionalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDecisionalState_descriptor_;
  metadata.reflection = MsgDecisionalState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDebugPoints::kOidFieldNumber;
const int MsgDebugPoints::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

MsgDebugPoints::MsgDebugPoints() {
  SharedCtor();
}

void MsgDebugPoints::InitAsDefaultInstance() {
  coordinates_ = const_cast< ::Common::MsgCoordLatLongList*>(&::Common::MsgCoordLatLongList::default_instance());
}

MsgDebugPoints::MsgDebugPoints(const MsgDebugPoints& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDebugPoints::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  coordinates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDebugPoints::~MsgDebugPoints() {
  SharedDtor();
}

void MsgDebugPoints::SharedDtor() {
  if (this != default_instance_) {
    delete coordinates_;
  }
}

const ::google::protobuf::Descriptor* MsgDebugPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDebugPoints_descriptor_;
}

const MsgDebugPoints& MsgDebugPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgDebugPoints* MsgDebugPoints::default_instance_ = NULL;

MsgDebugPoints* MsgDebugPoints::New() const {
  return new MsgDebugPoints;
}

void MsgDebugPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (coordinates_ != NULL) coordinates_->::Common::MsgCoordLatLongList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDebugPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_coordinates;
        break;
      }
      
      // required .Common.MsgCoordLatLongList coordinates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_coordinates:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_coordinates()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDebugPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDebugPoints::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required .Common.MsgCoordLatLongList coordinates = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->coordinates(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDebugPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required .Common.MsgCoordLatLongList coordinates = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coordinates(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDebugPoints::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required .Common.MsgCoordLatLongList coordinates = 2;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDebugPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDebugPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDebugPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDebugPoints::MergeFrom(const MsgDebugPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_coordinates()->::Common::MsgCoordLatLongList::MergeFrom(from.coordinates());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDebugPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDebugPoints::CopyFrom(const MsgDebugPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDebugPoints::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  return true;
}

void MsgDebugPoints::Swap(MsgDebugPoints* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDebugPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDebugPoints_descriptor_;
  metadata.reflection = MsgDebugPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfHeading::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfHeading::SeqOfHeading() {
  SharedCtor();
}

void SeqOfHeading::InitAsDefaultInstance() {
}

SeqOfHeading::SeqOfHeading(const SeqOfHeading& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfHeading::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfHeading::~SeqOfHeading() {
  SharedDtor();
}

void SeqOfHeading::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfHeading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfHeading_descriptor_;
}

const SeqOfHeading& SeqOfHeading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfHeading* SeqOfHeading::default_instance_ = NULL;

SeqOfHeading* SeqOfHeading::New() const {
  return new SeqOfHeading;
}

void SeqOfHeading::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfHeading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgHeading elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfHeading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfHeading::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgHeading elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfHeading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgHeading elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfHeading::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgHeading elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfHeading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfHeading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfHeading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfHeading::MergeFrom(const SeqOfHeading& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfHeading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfHeading::CopyFrom(const SeqOfHeading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfHeading::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfHeading::Swap(SeqOfHeading* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfHeading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfHeading_descriptor_;
  metadata.reflection = SeqOfHeading_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgVisionCone::_default_sensor_;
#ifndef _MSC_VER
const int MsgVisionCone::kOriginFieldNumber;
const int MsgVisionCone::kHeightFieldNumber;
const int MsgVisionCone::kSensorFieldNumber;
const int MsgVisionCone::kDirectionsFieldNumber;
#endif  // !_MSC_VER

MsgVisionCone::MsgVisionCone() {
  SharedCtor();
}

void MsgVisionCone::InitAsDefaultInstance() {
  origin_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  directions_ = const_cast< ::MsgsSimToClient::SeqOfHeading*>(&::MsgsSimToClient::SeqOfHeading::default_instance());
}

MsgVisionCone::MsgVisionCone(const MsgVisionCone& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgVisionCone::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  height_ = 0;
  sensor_ = const_cast< ::std::string*>(&_default_sensor_);
  directions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgVisionCone::~MsgVisionCone() {
  SharedDtor();
}

void MsgVisionCone::SharedDtor() {
  if (sensor_ != &_default_sensor_) {
    delete sensor_;
  }
  if (this != default_instance_) {
    delete origin_;
    delete directions_;
  }
}

const ::google::protobuf::Descriptor* MsgVisionCone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgVisionCone_descriptor_;
}

const MsgVisionCone& MsgVisionCone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgVisionCone* MsgVisionCone::default_instance_ = NULL;

MsgVisionCone* MsgVisionCone::New() const {
  return new MsgVisionCone;
}

void MsgVisionCone::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (origin_ != NULL) origin_->::Common::MsgCoordLatLong::Clear();
    }
    height_ = 0;
    if (_has_bit(2)) {
      if (sensor_ != &_default_sensor_) {
        sensor_->clear();
      }
    }
    if (_has_bit(3)) {
      if (directions_ != NULL) directions_->::MsgsSimToClient::SeqOfHeading::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgVisionCone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgCoordLatLong origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_origin()));
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_height:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &height_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_sensor;
        break;
      }
      
      // required string sensor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_sensor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_sensor()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->sensor().data(), this->sensor().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_directions;
        break;
      }
      
      // required .MsgsSimToClient.SeqOfHeading directions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_directions:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_directions()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgVisionCone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgVisionCone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgCoordLatLong origin = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->origin(), output);
  }
  
  // required int32 height = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
  // required string sensor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor().data(), this->sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sensor(), output);
  }
  
  // required .MsgsSimToClient.SeqOfHeading directions = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->directions(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgVisionCone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgCoordLatLong origin = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }
  
  // required int32 height = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }
  
  // required string sensor = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sensor().data(), this->sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sensor(), target);
  }
  
  // required .MsgsSimToClient.SeqOfHeading directions = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->directions(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgVisionCone::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgCoordLatLong origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }
    
    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required string sensor = 3;
    if (has_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor());
    }
    
    // required .MsgsSimToClient.SeqOfHeading directions = 4;
    if (has_directions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->directions());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgVisionCone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgVisionCone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgVisionCone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgVisionCone::MergeFrom(const MsgVisionCone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_origin()->::Common::MsgCoordLatLong::MergeFrom(from.origin());
    }
    if (from._has_bit(1)) {
      set_height(from.height());
    }
    if (from._has_bit(2)) {
      set_sensor(from.sensor());
    }
    if (from._has_bit(3)) {
      mutable_directions()->::MsgsSimToClient::SeqOfHeading::MergeFrom(from.directions());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgVisionCone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgVisionCone::CopyFrom(const MsgVisionCone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgVisionCone::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  if (has_directions()) {
    if (!this->directions().IsInitialized()) return false;
  }
  return true;
}

void MsgVisionCone::Swap(MsgVisionCone* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(height_, other->height_);
    std::swap(sensor_, other->sensor_);
    std::swap(directions_, other->directions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgVisionCone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgVisionCone_descriptor_;
  metadata.reflection = MsgVisionCone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfVisionCone::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfVisionCone::SeqOfVisionCone() {
  SharedCtor();
}

void SeqOfVisionCone::InitAsDefaultInstance() {
}

SeqOfVisionCone::SeqOfVisionCone(const SeqOfVisionCone& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfVisionCone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfVisionCone::~SeqOfVisionCone() {
  SharedDtor();
}

void SeqOfVisionCone::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfVisionCone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfVisionCone_descriptor_;
}

const SeqOfVisionCone& SeqOfVisionCone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfVisionCone* SeqOfVisionCone::default_instance_ = NULL;

SeqOfVisionCone* SeqOfVisionCone::New() const {
  return new SeqOfVisionCone;
}

void SeqOfVisionCone::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfVisionCone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgVisionCone elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfVisionCone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfVisionCone::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgVisionCone elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfVisionCone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgVisionCone elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfVisionCone::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgVisionCone elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfVisionCone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfVisionCone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfVisionCone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfVisionCone::MergeFrom(const SeqOfVisionCone& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfVisionCone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfVisionCone::CopyFrom(const SeqOfVisionCone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfVisionCone::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfVisionCone::Swap(SeqOfVisionCone* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfVisionCone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfVisionCone_descriptor_;
  metadata.reflection = SeqOfVisionCone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitVisionCones::kOidFieldNumber;
const int MsgUnitVisionCones::kConesFieldNumber;
const int MsgUnitVisionCones::kElongationFieldNumber;
#endif  // !_MSC_VER

MsgUnitVisionCones::MsgUnitVisionCones() {
  SharedCtor();
}

void MsgUnitVisionCones::InitAsDefaultInstance() {
  cones_ = const_cast< ::MsgsSimToClient::SeqOfVisionCone*>(&::MsgsSimToClient::SeqOfVisionCone::default_instance());
}

MsgUnitVisionCones::MsgUnitVisionCones(const MsgUnitVisionCones& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitVisionCones::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  cones_ = NULL;
  elongation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitVisionCones::~MsgUnitVisionCones() {
  SharedDtor();
}

void MsgUnitVisionCones::SharedDtor() {
  if (this != default_instance_) {
    delete cones_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitVisionCones::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitVisionCones_descriptor_;
}

const MsgUnitVisionCones& MsgUnitVisionCones::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitVisionCones* MsgUnitVisionCones::default_instance_ = NULL;

MsgUnitVisionCones* MsgUnitVisionCones::New() const {
  return new MsgUnitVisionCones;
}

void MsgUnitVisionCones::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (cones_ != NULL) cones_->::MsgsSimToClient::SeqOfVisionCone::Clear();
    }
    elongation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitVisionCones::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_cones;
        break;
      }
      
      // required .MsgsSimToClient.SeqOfVisionCone cones = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_cones:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_cones()));
        if (input->ExpectTag(29)) goto parse_elongation;
        break;
      }
      
      // required float elongation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_elongation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &elongation_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitVisionCones::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitVisionCones::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.SeqOfVisionCone cones = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->cones(), output);
  }
  
  // required float elongation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->elongation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitVisionCones::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.SeqOfVisionCone cones = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cones(), target);
  }
  
  // required float elongation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->elongation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitVisionCones::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.SeqOfVisionCone cones = 2;
    if (has_cones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cones());
    }
    
    // required float elongation = 3;
    if (has_elongation()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitVisionCones::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitVisionCones* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitVisionCones*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitVisionCones::MergeFrom(const MsgUnitVisionCones& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_cones()->::MsgsSimToClient::SeqOfVisionCone::MergeFrom(from.cones());
    }
    if (from._has_bit(2)) {
      set_elongation(from.elongation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitVisionCones::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitVisionCones::CopyFrom(const MsgUnitVisionCones& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitVisionCones::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_cones()) {
    if (!this->cones().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitVisionCones::Swap(MsgUnitVisionCones* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(cones_, other->cones_);
    std::swap(elongation_, other->elongation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitVisionCones::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitVisionCones_descriptor_;
  metadata.reflection = MsgUnitVisionCones_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitDetection::kOidFieldNumber;
const int MsgUnitDetection::kDetectedUnitOidFieldNumber;
const int MsgUnitDetection::kCurrentVisibilityFieldNumber;
const int MsgUnitDetection::kMaxVisibilityFieldNumber;
#endif  // !_MSC_VER

MsgUnitDetection::MsgUnitDetection() {
  SharedCtor();
}

void MsgUnitDetection::InitAsDefaultInstance() {
}

MsgUnitDetection::MsgUnitDetection(const MsgUnitDetection& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitDetection::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  detected_unit_oid_ = 0;
  current_visibility_ = 0;
  max_visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitDetection::~MsgUnitDetection() {
  SharedDtor();
}

void MsgUnitDetection::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUnitDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitDetection_descriptor_;
}

const MsgUnitDetection& MsgUnitDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUnitDetection* MsgUnitDetection::default_instance_ = NULL;

MsgUnitDetection* MsgUnitDetection::New() const {
  return new MsgUnitDetection;
}

void MsgUnitDetection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    detected_unit_oid_ = 0;
    current_visibility_ = 0;
    max_visibility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_detected_unit_oid;
        break;
      }
      
      // required int32 detected_unit_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_detected_unit_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &detected_unit_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_current_visibility;
        break;
      }
      
      // required .Common.EnumUnitVisibility current_visibility = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_current_visibility:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitVisibility_IsValid(value)) {
          set_current_visibility(static_cast< Common::EnumUnitVisibility >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_max_visibility;
        break;
      }
      
      // required .Common.EnumUnitVisibility max_visibility = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_visibility:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitVisibility_IsValid(value)) {
          set_max_visibility(static_cast< Common::EnumUnitVisibility >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitDetection::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 detected_unit_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->detected_unit_oid(), output);
  }
  
  // required .Common.EnumUnitVisibility current_visibility = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->current_visibility(), output);
  }
  
  // required .Common.EnumUnitVisibility max_visibility = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->max_visibility(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitDetection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 detected_unit_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->detected_unit_oid(), target);
  }
  
  // required .Common.EnumUnitVisibility current_visibility = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->current_visibility(), target);
  }
  
  // required .Common.EnumUnitVisibility max_visibility = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->max_visibility(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitDetection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 detected_unit_oid = 2;
    if (has_detected_unit_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detected_unit_oid());
    }
    
    // required .Common.EnumUnitVisibility current_visibility = 3;
    if (has_current_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_visibility());
    }
    
    // required .Common.EnumUnitVisibility max_visibility = 4;
    if (has_max_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->max_visibility());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitDetection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitDetection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitDetection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitDetection::MergeFrom(const MsgUnitDetection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_detected_unit_oid(from.detected_unit_oid());
    }
    if (from._has_bit(2)) {
      set_current_visibility(from.current_visibility());
    }
    if (from._has_bit(3)) {
      set_max_visibility(from.max_visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitDetection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitDetection::CopyFrom(const MsgUnitDetection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgUnitDetection::Swap(MsgUnitDetection* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(detected_unit_oid_, other->detected_unit_oid_);
    std::swap(current_visibility_, other->current_visibility_);
    std::swap(max_visibility_, other->max_visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitDetection_descriptor_;
  metadata.reflection = MsgUnitDetection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectDetection::kOidFieldNumber;
const int MsgObjectDetection::kObjectOidFieldNumber;
const int MsgObjectDetection::kVisibilityFieldNumber;
#endif  // !_MSC_VER

MsgObjectDetection::MsgObjectDetection() {
  SharedCtor();
}

void MsgObjectDetection::InitAsDefaultInstance() {
}

MsgObjectDetection::MsgObjectDetection(const MsgObjectDetection& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectDetection::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  object_oid_ = 0;
  visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectDetection::~MsgObjectDetection() {
  SharedDtor();
}

void MsgObjectDetection::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgObjectDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectDetection_descriptor_;
}

const MsgObjectDetection& MsgObjectDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectDetection* MsgObjectDetection::default_instance_ = NULL;

MsgObjectDetection* MsgObjectDetection::New() const {
  return new MsgObjectDetection;
}

void MsgObjectDetection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    object_oid_ = 0;
    visibility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_object_oid;
        break;
      }
      
      // required int32 object_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_object_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &object_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_visibility;
        break;
      }
      
      // required .Common.EnumUnitVisibility visibility = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_visibility:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitVisibility_IsValid(value)) {
          set_visibility(static_cast< Common::EnumUnitVisibility >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectDetection::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 object_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->object_oid(), output);
  }
  
  // required .Common.EnumUnitVisibility visibility = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->visibility(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectDetection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 object_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->object_oid(), target);
  }
  
  // required .Common.EnumUnitVisibility visibility = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->visibility(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectDetection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 object_oid = 2;
    if (has_object_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->object_oid());
    }
    
    // required .Common.EnumUnitVisibility visibility = 3;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectDetection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectDetection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectDetection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectDetection::MergeFrom(const MsgObjectDetection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_object_oid(from.object_oid());
    }
    if (from._has_bit(2)) {
      set_visibility(from.visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectDetection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectDetection::CopyFrom(const MsgObjectDetection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgObjectDetection::Swap(MsgObjectDetection* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(object_oid_, other->object_oid_);
    std::swap(visibility_, other->visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectDetection_descriptor_;
  metadata.reflection = MsgObjectDetection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationDetection::kOidFieldNumber;
const int MsgPopulationConcentrationDetection::kPopulationOidFieldNumber;
const int MsgPopulationConcentrationDetection::kConcentrationOidFieldNumber;
const int MsgPopulationConcentrationDetection::kVisibilityFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationDetection::MsgPopulationConcentrationDetection() {
  SharedCtor();
}

void MsgPopulationConcentrationDetection::InitAsDefaultInstance() {
}

MsgPopulationConcentrationDetection::MsgPopulationConcentrationDetection(const MsgPopulationConcentrationDetection& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationDetection::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  population_oid_ = 0;
  concentration_oid_ = 0;
  visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationDetection::~MsgPopulationConcentrationDetection() {
  SharedDtor();
}

void MsgPopulationConcentrationDetection::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationDetection_descriptor_;
}

const MsgPopulationConcentrationDetection& MsgPopulationConcentrationDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationDetection* MsgPopulationConcentrationDetection::default_instance_ = NULL;

MsgPopulationConcentrationDetection* MsgPopulationConcentrationDetection::New() const {
  return new MsgPopulationConcentrationDetection;
}

void MsgPopulationConcentrationDetection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    population_oid_ = 0;
    concentration_oid_ = 0;
    visibility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_population_oid;
        break;
      }
      
      // required int32 population_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_population_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &population_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_concentration_oid;
        break;
      }
      
      // required int32 concentration_oid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_concentration_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &concentration_oid_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_visibility;
        break;
      }
      
      // required .Common.EnumUnitVisibility visibility = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_visibility:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitVisibility_IsValid(value)) {
          set_visibility(static_cast< Common::EnumUnitVisibility >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationDetection::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 population_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->population_oid(), output);
  }
  
  // required int32 concentration_oid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->concentration_oid(), output);
  }
  
  // required .Common.EnumUnitVisibility visibility = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->visibility(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationDetection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 population_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->population_oid(), target);
  }
  
  // required int32 concentration_oid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->concentration_oid(), target);
  }
  
  // required .Common.EnumUnitVisibility visibility = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->visibility(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationDetection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 population_oid = 2;
    if (has_population_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population_oid());
    }
    
    // required int32 concentration_oid = 3;
    if (has_concentration_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concentration_oid());
    }
    
    // required .Common.EnumUnitVisibility visibility = 4;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationDetection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationDetection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationDetection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationDetection::MergeFrom(const MsgPopulationConcentrationDetection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_population_oid(from.population_oid());
    }
    if (from._has_bit(2)) {
      set_concentration_oid(from.concentration_oid());
    }
    if (from._has_bit(3)) {
      set_visibility(from.visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationDetection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationDetection::CopyFrom(const MsgPopulationConcentrationDetection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgPopulationConcentrationDetection::Swap(MsgPopulationConcentrationDetection* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(population_oid_, other->population_oid_);
    std::swap(concentration_oid_, other->concentration_oid_);
    std::swap(visibility_, other->visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationDetection_descriptor_;
  metadata.reflection = MsgPopulationConcentrationDetection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowDetection::kOidFieldNumber;
const int MsgPopulationFlowDetection::kPopulationOidFieldNumber;
const int MsgPopulationFlowDetection::kFlowOidFieldNumber;
const int MsgPopulationFlowDetection::kVisibleFlowFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowDetection::MsgPopulationFlowDetection() {
  SharedCtor();
}

void MsgPopulationFlowDetection::InitAsDefaultInstance() {
  visible_flow_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
}

MsgPopulationFlowDetection::MsgPopulationFlowDetection(const MsgPopulationFlowDetection& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowDetection::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  population_oid_ = 0;
  flow_oid_ = 0;
  visible_flow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowDetection::~MsgPopulationFlowDetection() {
  SharedDtor();
}

void MsgPopulationFlowDetection::SharedDtor() {
  if (this != default_instance_) {
    delete visible_flow_;
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowDetection_descriptor_;
}

const MsgPopulationFlowDetection& MsgPopulationFlowDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowDetection* MsgPopulationFlowDetection::default_instance_ = NULL;

MsgPopulationFlowDetection* MsgPopulationFlowDetection::New() const {
  return new MsgPopulationFlowDetection;
}

void MsgPopulationFlowDetection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    population_oid_ = 0;
    flow_oid_ = 0;
    if (_has_bit(3)) {
      if (visible_flow_ != NULL) visible_flow_->::Common::MsgPath::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_population_oid;
        break;
      }
      
      // required int32 population_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_population_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &population_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_flow_oid;
        break;
      }
      
      // required int32 flow_oid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flow_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flow_oid_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_visible_flow;
        break;
      }
      
      // required .Common.MsgPath visible_flow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_visible_flow:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_visible_flow()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowDetection::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 population_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->population_oid(), output);
  }
  
  // required int32 flow_oid = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flow_oid(), output);
  }
  
  // required .Common.MsgPath visible_flow = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->visible_flow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowDetection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 population_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->population_oid(), target);
  }
  
  // required int32 flow_oid = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flow_oid(), target);
  }
  
  // required .Common.MsgPath visible_flow = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->visible_flow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowDetection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 population_oid = 2;
    if (has_population_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->population_oid());
    }
    
    // required int32 flow_oid = 3;
    if (has_flow_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow_oid());
    }
    
    // required .Common.MsgPath visible_flow = 4;
    if (has_visible_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visible_flow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowDetection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowDetection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowDetection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowDetection::MergeFrom(const MsgPopulationFlowDetection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_population_oid(from.population_oid());
    }
    if (from._has_bit(2)) {
      set_flow_oid(from.flow_oid());
    }
    if (from._has_bit(3)) {
      mutable_visible_flow()->::Common::MsgPath::MergeFrom(from.visible_flow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowDetection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowDetection::CopyFrom(const MsgPopulationFlowDetection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_visible_flow()) {
    if (!this->visible_flow().IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationFlowDetection::Swap(MsgPopulationFlowDetection* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(population_oid_, other->population_oid_);
    std::swap(flow_oid_, other->flow_oid_);
    std::swap(visible_flow_, other->visible_flow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowDetection_descriptor_;
  metadata.reflection = MsgPopulationFlowDetection_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgObjectCreation::_default_type_;
const ::std::string MsgObjectCreation::_default_name_;
#ifndef _MSC_VER
const int MsgObjectCreation::kOidFieldNumber;
const int MsgObjectCreation::kTypeFieldNumber;
const int MsgObjectCreation::kNameFieldNumber;
const int MsgObjectCreation::kTeamFieldNumber;
const int MsgObjectCreation::kLocationFieldNumber;
const int MsgObjectCreation::kAttributesFieldNumber;
#endif  // !_MSC_VER

MsgObjectCreation::MsgObjectCreation() {
  SharedCtor();
}

void MsgObjectCreation::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  attributes_ = const_cast< ::Common::MsgObjectAttributes*>(&::Common::MsgObjectAttributes::default_instance());
}

MsgObjectCreation::MsgObjectCreation(const MsgObjectCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  name_ = const_cast< ::std::string*>(&_default_name_);
  team_ = 0;
  location_ = NULL;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectCreation::~MsgObjectCreation() {
  SharedDtor();
}

void MsgObjectCreation::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgObjectCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectCreation_descriptor_;
}

const MsgObjectCreation& MsgObjectCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectCreation* MsgObjectCreation::default_instance_ = NULL;

MsgObjectCreation* MsgObjectCreation::New() const {
  return new MsgObjectCreation;
}

void MsgObjectCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(2)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    team_ = 0;
    if (_has_bit(4)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(5)) {
      if (attributes_ != NULL) attributes_->::Common::MsgObjectAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }
      
      // required int32 team = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }
      
      // required .Common.MsgLocation location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(50)) goto parse_attributes;
        break;
      }
      
      // required .Common.MsgObjectAttributes attributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required string type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  // required int32 team = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->team(), output);
  }
  
  // required .Common.MsgLocation location = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->location(), output);
  }
  
  // required .Common.MsgObjectAttributes attributes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->attributes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required string type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  // required string name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  // required int32 team = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->team(), target);
  }
  
  // required .Common.MsgLocation location = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }
  
  // required .Common.MsgObjectAttributes attributes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attributes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // required .Common.MsgLocation location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // required .Common.MsgObjectAttributes attributes = 6;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectCreation::MergeFrom(const MsgObjectCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_name(from.name());
    }
    if (from._has_bit(3)) {
      set_team(from.team());
    }
    if (from._has_bit(4)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(5)) {
      mutable_attributes()->::Common::MsgObjectAttributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectCreation::CopyFrom(const MsgObjectCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgObjectCreation::Swap(MsgObjectCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(team_, other->team_);
    std::swap(location_, other->location_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectCreation_descriptor_;
  metadata.reflection = MsgObjectCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectDestruction::kOidFieldNumber;
#endif  // !_MSC_VER

MsgObjectDestruction::MsgObjectDestruction() {
  SharedCtor();
}

void MsgObjectDestruction::InitAsDefaultInstance() {
}

MsgObjectDestruction::MsgObjectDestruction(const MsgObjectDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectDestruction::~MsgObjectDestruction() {
  SharedDtor();
}

void MsgObjectDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgObjectDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectDestruction_descriptor_;
}

const MsgObjectDestruction& MsgObjectDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectDestruction* MsgObjectDestruction::default_instance_ = NULL;

MsgObjectDestruction* MsgObjectDestruction::New() const {
  return new MsgObjectDestruction;
}

void MsgObjectDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectDestruction::MergeFrom(const MsgObjectDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectDestruction::CopyFrom(const MsgObjectDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgObjectDestruction::Swap(MsgObjectDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectDestruction_descriptor_;
  metadata.reflection = MsgObjectDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectUpdate::kOidFieldNumber;
const int MsgObjectUpdate::kLocationFieldNumber;
const int MsgObjectUpdate::kAttributesFieldNumber;
#endif  // !_MSC_VER

MsgObjectUpdate::MsgObjectUpdate() {
  SharedCtor();
}

void MsgObjectUpdate::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  attributes_ = const_cast< ::Common::MsgObjectAttributes*>(&::Common::MsgObjectAttributes::default_instance());
}

MsgObjectUpdate::MsgObjectUpdate(const MsgObjectUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  location_ = NULL;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectUpdate::~MsgObjectUpdate() {
  SharedDtor();
}

void MsgObjectUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgObjectUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectUpdate_descriptor_;
}

const MsgObjectUpdate& MsgObjectUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectUpdate* MsgObjectUpdate::default_instance_ = NULL;

MsgObjectUpdate* MsgObjectUpdate::New() const {
  return new MsgObjectUpdate;
}

void MsgObjectUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    if (_has_bit(1)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(2)) {
      if (attributes_ != NULL) attributes_->::Common::MsgObjectAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // optional .Common.MsgLocation location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(26)) goto parse_attributes;
        break;
      }
      
      // required .Common.MsgObjectAttributes attributes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // optional .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->location(), output);
  }
  
  // required .Common.MsgObjectAttributes attributes = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->attributes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // optional .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  // required .Common.MsgObjectAttributes attributes = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attributes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // optional .Common.MsgLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // required .Common.MsgObjectAttributes attributes = 3;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectUpdate::MergeFrom(const MsgObjectUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(2)) {
      mutable_attributes()->::Common::MsgObjectAttributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectUpdate::CopyFrom(const MsgObjectUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgObjectUpdate::Swap(MsgObjectUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(location_, other->location_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectUpdate_descriptor_;
  metadata.reflection = MsgObjectUpdate_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgObjectKnowledgeCreation::_default_type_;
#ifndef _MSC_VER
const int MsgObjectKnowledgeCreation::kOidFieldNumber;
const int MsgObjectKnowledgeCreation::kTeamFieldNumber;
const int MsgObjectKnowledgeCreation::kRealObjectFieldNumber;
const int MsgObjectKnowledgeCreation::kTypeFieldNumber;
const int MsgObjectKnowledgeCreation::kAttributesFieldNumber;
const int MsgObjectKnowledgeCreation::kGroupFieldNumber;
#endif  // !_MSC_VER

MsgObjectKnowledgeCreation::MsgObjectKnowledgeCreation() {
  SharedCtor();
}

void MsgObjectKnowledgeCreation::InitAsDefaultInstance() {
  attributes_ = const_cast< ::Common::MsgObjectAttributes*>(&::Common::MsgObjectAttributes::default_instance());
}

MsgObjectKnowledgeCreation::MsgObjectKnowledgeCreation(const MsgObjectKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  real_object_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  attributes_ = NULL;
  group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectKnowledgeCreation::~MsgObjectKnowledgeCreation() {
  SharedDtor();
}

void MsgObjectKnowledgeCreation::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgObjectKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectKnowledgeCreation_descriptor_;
}

const MsgObjectKnowledgeCreation& MsgObjectKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectKnowledgeCreation* MsgObjectKnowledgeCreation::default_instance_ = NULL;

MsgObjectKnowledgeCreation* MsgObjectKnowledgeCreation::New() const {
  return new MsgObjectKnowledgeCreation;
}

void MsgObjectKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
    real_object_ = 0;
    if (_has_bit(3)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(4)) {
      if (attributes_ != NULL) attributes_->::Common::MsgObjectAttributes::Clear();
    }
    group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_real_object;
        break;
      }
      
      // required int32 real_object = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_real_object:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &real_object_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }
      
      // required string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }
      
      // required .Common.MsgObjectAttributes attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectTag(48)) goto parse_group;
        break;
      }
      
      // optional int32 group = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_group:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &group_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  // required int32 real_object = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real_object(), output);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }
  
  // required .Common.MsgObjectAttributes attributes = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->attributes(), output);
  }
  
  // optional int32 group = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  // required int32 real_object = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real_object(), target);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }
  
  // required .Common.MsgObjectAttributes attributes = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attributes(), target);
  }
  
  // optional int32 group = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // required int32 real_object = 3;
    if (has_real_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_object());
    }
    
    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required .Common.MsgObjectAttributes attributes = 5;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
    // optional int32 group = 6;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectKnowledgeCreation::MergeFrom(const MsgObjectKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
    if (from._has_bit(2)) {
      set_real_object(from.real_object());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      mutable_attributes()->::Common::MsgObjectAttributes::MergeFrom(from.attributes());
    }
    if (from._has_bit(5)) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectKnowledgeCreation::CopyFrom(const MsgObjectKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgObjectKnowledgeCreation::Swap(MsgObjectKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(real_object_, other->real_object_);
    std::swap(type_, other->type_);
    std::swap(attributes_, other->attributes_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectKnowledgeCreation_descriptor_;
  metadata.reflection = MsgObjectKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectKnowledgeUpdate::kOidFieldNumber;
const int MsgObjectKnowledgeUpdate::kTeamFieldNumber;
const int MsgObjectKnowledgeUpdate::kRealObjectFieldNumber;
const int MsgObjectKnowledgeUpdate::kRelevanceFieldNumber;
const int MsgObjectKnowledgeUpdate::kLocationFieldNumber;
const int MsgObjectKnowledgeUpdate::kAttributesFieldNumber;
const int MsgObjectKnowledgeUpdate::kPerceivedFieldNumber;
const int MsgObjectKnowledgeUpdate::kAutomatPerceptionFieldNumber;
const int MsgObjectKnowledgeUpdate::kGroupFieldNumber;
#endif  // !_MSC_VER

MsgObjectKnowledgeUpdate::MsgObjectKnowledgeUpdate() {
  SharedCtor();
}

void MsgObjectKnowledgeUpdate::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  attributes_ = const_cast< ::Common::MsgObjectAttributes*>(&::Common::MsgObjectAttributes::default_instance());
  automat_perception_ = const_cast< ::Common::MsgListOID*>(&::Common::MsgListOID::default_instance());
}

MsgObjectKnowledgeUpdate::MsgObjectKnowledgeUpdate(const MsgObjectKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  real_object_ = 0;
  relevance_ = 0;
  location_ = NULL;
  attributes_ = NULL;
  perceived_ = false;
  automat_perception_ = NULL;
  group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectKnowledgeUpdate::~MsgObjectKnowledgeUpdate() {
  SharedDtor();
}

void MsgObjectKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete attributes_;
    delete automat_perception_;
  }
}

const ::google::protobuf::Descriptor* MsgObjectKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectKnowledgeUpdate_descriptor_;
}

const MsgObjectKnowledgeUpdate& MsgObjectKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectKnowledgeUpdate* MsgObjectKnowledgeUpdate::default_instance_ = NULL;

MsgObjectKnowledgeUpdate* MsgObjectKnowledgeUpdate::New() const {
  return new MsgObjectKnowledgeUpdate;
}

void MsgObjectKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
    real_object_ = 0;
    relevance_ = 0;
    if (_has_bit(4)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(5)) {
      if (attributes_ != NULL) attributes_->::Common::MsgObjectAttributes::Clear();
    }
    perceived_ = false;
    if (_has_bit(7)) {
      if (automat_perception_ != NULL) automat_perception_->::Common::MsgListOID::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_real_object;
        break;
      }
      
      // optional int32 real_object = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_real_object:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &real_object_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_relevance;
        break;
      }
      
      // optional int32 relevance = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_relevance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &relevance_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }
      
      // optional .Common.MsgLocation location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(50)) goto parse_attributes;
        break;
      }
      
      // optional .Common.MsgObjectAttributes attributes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectTag(56)) goto parse_perceived;
        break;
      }
      
      // optional bool perceived = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_perceived:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &perceived_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_automat_perception;
        break;
      }
      
      // optional .Common.MsgListOID automat_perception = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_perception:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_perception()));
        if (input->ExpectTag(72)) goto parse_group;
        break;
      }
      
      // optional int32 group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_group:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &group_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  // optional int32 real_object = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real_object(), output);
  }
  
  // optional int32 relevance = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->relevance(), output);
  }
  
  // optional .Common.MsgLocation location = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->location(), output);
  }
  
  // optional .Common.MsgObjectAttributes attributes = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->attributes(), output);
  }
  
  // optional bool perceived = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->perceived(), output);
  }
  
  // optional .Common.MsgListOID automat_perception = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->automat_perception(), output);
  }
  
  // optional int32 group = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  // optional int32 real_object = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real_object(), target);
  }
  
  // optional int32 relevance = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->relevance(), target);
  }
  
  // optional .Common.MsgLocation location = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }
  
  // optional .Common.MsgObjectAttributes attributes = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->attributes(), target);
  }
  
  // optional bool perceived = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->perceived(), target);
  }
  
  // optional .Common.MsgListOID automat_perception = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->automat_perception(), target);
  }
  
  // optional int32 group = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // optional int32 real_object = 3 [default = 0];
    if (has_real_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_object());
    }
    
    // optional int32 relevance = 4 [default = 0];
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relevance());
    }
    
    // optional .Common.MsgLocation location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional .Common.MsgObjectAttributes attributes = 6;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
    // optional bool perceived = 7 [default = false];
    if (has_perceived()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.MsgListOID automat_perception = 8;
    if (has_automat_perception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_perception());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 group = 9;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectKnowledgeUpdate::MergeFrom(const MsgObjectKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
    if (from._has_bit(2)) {
      set_real_object(from.real_object());
    }
    if (from._has_bit(3)) {
      set_relevance(from.relevance());
    }
    if (from._has_bit(4)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(5)) {
      mutable_attributes()->::Common::MsgObjectAttributes::MergeFrom(from.attributes());
    }
    if (from._has_bit(6)) {
      set_perceived(from.perceived());
    }
    if (from._has_bit(7)) {
      mutable_automat_perception()->::Common::MsgListOID::MergeFrom(from.automat_perception());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectKnowledgeUpdate::CopyFrom(const MsgObjectKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgObjectKnowledgeUpdate::Swap(MsgObjectKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(real_object_, other->real_object_);
    std::swap(relevance_, other->relevance_);
    std::swap(location_, other->location_);
    std::swap(attributes_, other->attributes_);
    std::swap(perceived_, other->perceived_);
    std::swap(automat_perception_, other->automat_perception_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgObjectKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgObjectKnowledgeDestruction::kOidFieldNumber;
const int MsgObjectKnowledgeDestruction::kTeamFieldNumber;
#endif  // !_MSC_VER

MsgObjectKnowledgeDestruction::MsgObjectKnowledgeDestruction() {
  SharedCtor();
}

void MsgObjectKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgObjectKnowledgeDestruction::MsgObjectKnowledgeDestruction(const MsgObjectKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgObjectKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgObjectKnowledgeDestruction::~MsgObjectKnowledgeDestruction() {
  SharedDtor();
}

void MsgObjectKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgObjectKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgObjectKnowledgeDestruction_descriptor_;
}

const MsgObjectKnowledgeDestruction& MsgObjectKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgObjectKnowledgeDestruction* MsgObjectKnowledgeDestruction::default_instance_ = NULL;

MsgObjectKnowledgeDestruction* MsgObjectKnowledgeDestruction::New() const {
  return new MsgObjectKnowledgeDestruction;
}

void MsgObjectKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgObjectKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgObjectKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgObjectKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgObjectKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgObjectKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgObjectKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgObjectKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgObjectKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgObjectKnowledgeDestruction::MergeFrom(const MsgObjectKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgObjectKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgObjectKnowledgeDestruction::CopyFrom(const MsgObjectKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgObjectKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgObjectKnowledgeDestruction::Swap(MsgObjectKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgObjectKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgObjectKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgObjectKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanKnowledgeCreation::kOidFieldNumber;
const int MsgUrbanKnowledgeCreation::kTeamFieldNumber;
const int MsgUrbanKnowledgeCreation::kRealUrbanFieldNumber;
#endif  // !_MSC_VER

MsgUrbanKnowledgeCreation::MsgUrbanKnowledgeCreation() {
  SharedCtor();
}

void MsgUrbanKnowledgeCreation::InitAsDefaultInstance() {
}

MsgUrbanKnowledgeCreation::MsgUrbanKnowledgeCreation(const MsgUrbanKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  real_urban_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanKnowledgeCreation::~MsgUrbanKnowledgeCreation() {
  SharedDtor();
}

void MsgUrbanKnowledgeCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanKnowledgeCreation_descriptor_;
}

const MsgUrbanKnowledgeCreation& MsgUrbanKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanKnowledgeCreation* MsgUrbanKnowledgeCreation::default_instance_ = NULL;

MsgUrbanKnowledgeCreation* MsgUrbanKnowledgeCreation::New() const {
  return new MsgUrbanKnowledgeCreation;
}

void MsgUrbanKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
    real_urban_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_real_urban;
        break;
      }
      
      // required int32 real_urban = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_real_urban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &real_urban_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  // required int32 real_urban = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real_urban(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  // required int32 real_urban = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real_urban(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // required int32 real_urban = 3;
    if (has_real_urban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_urban());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanKnowledgeCreation::MergeFrom(const MsgUrbanKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
    if (from._has_bit(2)) {
      set_real_urban(from.real_urban());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanKnowledgeCreation::CopyFrom(const MsgUrbanKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgUrbanKnowledgeCreation::Swap(MsgUrbanKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(real_urban_, other->real_urban_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanKnowledgeCreation_descriptor_;
  metadata.reflection = MsgUrbanKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanKnowledgeUpdate::kOidFieldNumber;
const int MsgUrbanKnowledgeUpdate::kTeamFieldNumber;
const int MsgUrbanKnowledgeUpdate::kRealUrbanFieldNumber;
const int MsgUrbanKnowledgeUpdate::kRelevanceFieldNumber;
const int MsgUrbanKnowledgeUpdate::kIdentificationLevelFieldNumber;
const int MsgUrbanKnowledgeUpdate::kProgressFieldNumber;
const int MsgUrbanKnowledgeUpdate::kPerceivedFieldNumber;
const int MsgUrbanKnowledgeUpdate::kAutomatPerceptionFieldNumber;
#endif  // !_MSC_VER

MsgUrbanKnowledgeUpdate::MsgUrbanKnowledgeUpdate() {
  SharedCtor();
}

void MsgUrbanKnowledgeUpdate::InitAsDefaultInstance() {
  automat_perception_ = const_cast< ::Common::MsgListOID*>(&::Common::MsgListOID::default_instance());
}

MsgUrbanKnowledgeUpdate::MsgUrbanKnowledgeUpdate(const MsgUrbanKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  real_urban_ = 0;
  relevance_ = 0;
  identification_level_ = 0;
  progress_ = 0;
  perceived_ = false;
  automat_perception_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanKnowledgeUpdate::~MsgUrbanKnowledgeUpdate() {
  SharedDtor();
}

void MsgUrbanKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete automat_perception_;
  }
}

const ::google::protobuf::Descriptor* MsgUrbanKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanKnowledgeUpdate_descriptor_;
}

const MsgUrbanKnowledgeUpdate& MsgUrbanKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanKnowledgeUpdate* MsgUrbanKnowledgeUpdate::default_instance_ = NULL;

MsgUrbanKnowledgeUpdate* MsgUrbanKnowledgeUpdate::New() const {
  return new MsgUrbanKnowledgeUpdate;
}

void MsgUrbanKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
    real_urban_ = 0;
    relevance_ = 0;
    identification_level_ = 0;
    progress_ = 0;
    perceived_ = false;
    if (_has_bit(7)) {
      if (automat_perception_ != NULL) automat_perception_->::Common::MsgListOID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_real_urban;
        break;
      }
      
      // required int32 real_urban = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_real_urban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &real_urban_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_relevance;
        break;
      }
      
      // optional int32 relevance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_relevance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &relevance_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_identification_level;
        break;
      }
      
      // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_identification_level:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumUnitIdentificationLevel_IsValid(value)) {
          set_identification_level(static_cast< MsgsSimToClient::EnumUnitIdentificationLevel >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_progress;
        break;
      }
      
      // optional int32 progress = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_progress:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &progress_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_perceived;
        break;
      }
      
      // optional bool perceived = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_perceived:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &perceived_));
        _set_bit(6);
        if (input->ExpectTag(66)) goto parse_automat_perception;
        break;
      }
      
      // optional .Common.MsgListOID automat_perception = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_perception:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_perception()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  // required int32 real_urban = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->real_urban(), output);
  }
  
  // optional int32 relevance = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->relevance(), output);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->identification_level(), output);
  }
  
  // optional int32 progress = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->progress(), output);
  }
  
  // optional bool perceived = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->perceived(), output);
  }
  
  // optional .Common.MsgListOID automat_perception = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->automat_perception(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  // required int32 real_urban = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->real_urban(), target);
  }
  
  // optional int32 relevance = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->relevance(), target);
  }
  
  // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->identification_level(), target);
  }
  
  // optional int32 progress = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->progress(), target);
  }
  
  // optional bool perceived = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->perceived(), target);
  }
  
  // optional .Common.MsgListOID automat_perception = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->automat_perception(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
    // required int32 real_urban = 3;
    if (has_real_urban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->real_urban());
    }
    
    // optional int32 relevance = 4;
    if (has_relevance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relevance());
    }
    
    // optional .MsgsSimToClient.EnumUnitIdentificationLevel identification_level = 5;
    if (has_identification_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->identification_level());
    }
    
    // optional int32 progress = 6;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
    // optional bool perceived = 7;
    if (has_perceived()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.MsgListOID automat_perception = 8;
    if (has_automat_perception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_perception());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanKnowledgeUpdate::MergeFrom(const MsgUrbanKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
    if (from._has_bit(2)) {
      set_real_urban(from.real_urban());
    }
    if (from._has_bit(3)) {
      set_relevance(from.relevance());
    }
    if (from._has_bit(4)) {
      set_identification_level(from.identification_level());
    }
    if (from._has_bit(5)) {
      set_progress(from.progress());
    }
    if (from._has_bit(6)) {
      set_perceived(from.perceived());
    }
    if (from._has_bit(7)) {
      mutable_automat_perception()->::Common::MsgListOID::MergeFrom(from.automat_perception());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanKnowledgeUpdate::CopyFrom(const MsgUrbanKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgUrbanKnowledgeUpdate::Swap(MsgUrbanKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(real_urban_, other->real_urban_);
    std::swap(relevance_, other->relevance_);
    std::swap(identification_level_, other->identification_level_);
    std::swap(progress_, other->progress_);
    std::swap(perceived_, other->perceived_);
    std::swap(automat_perception_, other->automat_perception_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgUrbanKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanKnowledgeDestruction::kOidFieldNumber;
const int MsgUrbanKnowledgeDestruction::kTeamFieldNumber;
#endif  // !_MSC_VER

MsgUrbanKnowledgeDestruction::MsgUrbanKnowledgeDestruction() {
  SharedCtor();
}

void MsgUrbanKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgUrbanKnowledgeDestruction::MsgUrbanKnowledgeDestruction(const MsgUrbanKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanKnowledgeDestruction::~MsgUrbanKnowledgeDestruction() {
  SharedDtor();
}

void MsgUrbanKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanKnowledgeDestruction_descriptor_;
}

const MsgUrbanKnowledgeDestruction& MsgUrbanKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanKnowledgeDestruction* MsgUrbanKnowledgeDestruction::default_instance_ = NULL;

MsgUrbanKnowledgeDestruction* MsgUrbanKnowledgeDestruction::New() const {
  return new MsgUrbanKnowledgeDestruction;
}

void MsgUrbanKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    team_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_team;
        break;
      }
      
      // required int32 team = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_team:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &team_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->team(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 team = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->team(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanKnowledgeDestruction::MergeFrom(const MsgUrbanKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanKnowledgeDestruction::CopyFrom(const MsgUrbanKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgUrbanKnowledgeDestruction::Swap(MsgUrbanKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgUrbanKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalHandlingCreation::kOidConsigneFieldNumber;
const int MsgLogMedicalHandlingCreation::kOidPionFieldNumber;
const int MsgLogMedicalHandlingCreation::kTickCreationFieldNumber;
const int MsgLogMedicalHandlingCreation::kRangFieldNumber;
const int MsgLogMedicalHandlingCreation::kBlessureFieldNumber;
const int MsgLogMedicalHandlingCreation::kBlesseMentalFieldNumber;
const int MsgLogMedicalHandlingCreation::kContamineNbcFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalHandlingCreation::MsgLogMedicalHandlingCreation() {
  SharedCtor();
}

void MsgLogMedicalHandlingCreation::InitAsDefaultInstance() {
}

MsgLogMedicalHandlingCreation::MsgLogMedicalHandlingCreation(const MsgLogMedicalHandlingCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalHandlingCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  tick_creation_ = 0;
  rang_ = 0;
  blessure_ = 0;
  blesse_mental_ = false;
  contamine_nbc_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalHandlingCreation::~MsgLogMedicalHandlingCreation() {
  SharedDtor();
}

void MsgLogMedicalHandlingCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalHandlingCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalHandlingCreation_descriptor_;
}

const MsgLogMedicalHandlingCreation& MsgLogMedicalHandlingCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMedicalHandlingCreation* MsgLogMedicalHandlingCreation::default_instance_ = NULL;

MsgLogMedicalHandlingCreation* MsgLogMedicalHandlingCreation::New() const {
  return new MsgLogMedicalHandlingCreation;
}

void MsgLogMedicalHandlingCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
    tick_creation_ = 0;
    rang_ = 0;
    blessure_ = 0;
    blesse_mental_ = false;
    contamine_nbc_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalHandlingCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_tick_creation;
        break;
      }
      
      // required int32 tick_creation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_creation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_rang;
        break;
      }
      
      // required .Common.EnumHumanRank rang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_rang:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanRank_IsValid(value)) {
          set_rang(static_cast< Common::EnumHumanRank >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_blessure;
        break;
      }
      
      // required .Common.EnumHumanWound blessure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blessure:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanWound_IsValid(value)) {
          set_blessure(static_cast< Common::EnumHumanWound >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectTag(48)) goto parse_blesse_mental;
        break;
      }
      
      // optional bool blesse_mental = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blesse_mental:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &blesse_mental_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_contamine_nbc;
        break;
      }
      
      // optional bool contamine_nbc = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_contamine_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &contamine_nbc_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalHandlingCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalHandlingCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  // required int32 tick_creation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tick_creation(), output);
  }
  
  // required .Common.EnumHumanRank rang = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rang(), output);
  }
  
  // required .Common.EnumHumanWound blessure = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->blessure(), output);
  }
  
  // optional bool blesse_mental = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->blesse_mental(), output);
  }
  
  // optional bool contamine_nbc = 7 [default = false];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->contamine_nbc(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalHandlingCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  // required int32 tick_creation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tick_creation(), target);
  }
  
  // required .Common.EnumHumanRank rang = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rang(), target);
  }
  
  // required .Common.EnumHumanWound blessure = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->blessure(), target);
  }
  
  // optional bool blesse_mental = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->blesse_mental(), target);
  }
  
  // optional bool contamine_nbc = 7 [default = false];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->contamine_nbc(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalHandlingCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // required int32 tick_creation = 3;
    if (has_tick_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_creation());
    }
    
    // required .Common.EnumHumanRank rang = 4;
    if (has_rang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rang());
    }
    
    // required .Common.EnumHumanWound blessure = 5;
    if (has_blessure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blessure());
    }
    
    // optional bool blesse_mental = 6 [default = false];
    if (has_blesse_mental()) {
      total_size += 1 + 1;
    }
    
    // optional bool contamine_nbc = 7 [default = false];
    if (has_contamine_nbc()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalHandlingCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalHandlingCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalHandlingCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalHandlingCreation::MergeFrom(const MsgLogMedicalHandlingCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(2)) {
      set_tick_creation(from.tick_creation());
    }
    if (from._has_bit(3)) {
      set_rang(from.rang());
    }
    if (from._has_bit(4)) {
      set_blessure(from.blessure());
    }
    if (from._has_bit(5)) {
      set_blesse_mental(from.blesse_mental());
    }
    if (from._has_bit(6)) {
      set_contamine_nbc(from.contamine_nbc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalHandlingCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalHandlingCreation::CopyFrom(const MsgLogMedicalHandlingCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalHandlingCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgLogMedicalHandlingCreation::Swap(MsgLogMedicalHandlingCreation* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(tick_creation_, other->tick_creation_);
    std::swap(rang_, other->rang_);
    std::swap(blessure_, other->blessure_);
    std::swap(blesse_mental_, other->blesse_mental_);
    std::swap(contamine_nbc_, other->contamine_nbc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalHandlingCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalHandlingCreation_descriptor_;
  metadata.reflection = MsgLogMedicalHandlingCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalHandlingUpdate::kOidConsigneFieldNumber;
const int MsgLogMedicalHandlingUpdate::kOidPionFieldNumber;
const int MsgLogMedicalHandlingUpdate::kOidPionLogTraitantFieldNumber;
const int MsgLogMedicalHandlingUpdate::kBlessureFieldNumber;
const int MsgLogMedicalHandlingUpdate::kBlesseMentalFieldNumber;
const int MsgLogMedicalHandlingUpdate::kContamineNbcFieldNumber;
const int MsgLogMedicalHandlingUpdate::kEtatFieldNumber;
const int MsgLogMedicalHandlingUpdate::kDiagnostiqueEffectueFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalHandlingUpdate::MsgLogMedicalHandlingUpdate() {
  SharedCtor();
}

void MsgLogMedicalHandlingUpdate::InitAsDefaultInstance() {
}

MsgLogMedicalHandlingUpdate::MsgLogMedicalHandlingUpdate(const MsgLogMedicalHandlingUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalHandlingUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  oid_pion_log_traitant_ = 0;
  blessure_ = 0;
  blesse_mental_ = false;
  contamine_nbc_ = false;
  etat_ = 0;
  diagnostique_effectue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalHandlingUpdate::~MsgLogMedicalHandlingUpdate() {
  SharedDtor();
}

void MsgLogMedicalHandlingUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalHandlingUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalHandlingUpdate_descriptor_;
}

const MsgLogMedicalHandlingUpdate& MsgLogMedicalHandlingUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMedicalHandlingUpdate* MsgLogMedicalHandlingUpdate::default_instance_ = NULL;

MsgLogMedicalHandlingUpdate* MsgLogMedicalHandlingUpdate::New() const {
  return new MsgLogMedicalHandlingUpdate;
}

void MsgLogMedicalHandlingUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
    oid_pion_log_traitant_ = 0;
    blessure_ = 0;
    blesse_mental_ = false;
    contamine_nbc_ = false;
    etat_ = 0;
    diagnostique_effectue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalHandlingUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_pion_log_traitant;
        break;
      }
      
      // optional int32 oid_pion_log_traitant = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion_log_traitant:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_log_traitant_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_blessure;
        break;
      }
      
      // optional .Common.EnumHumanWound blessure = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blessure:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanWound_IsValid(value)) {
          set_blessure(static_cast< Common::EnumHumanWound >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_blesse_mental;
        break;
      }
      
      // optional bool blesse_mental = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blesse_mental:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &blesse_mental_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_contamine_nbc;
        break;
      }
      
      // optional bool contamine_nbc = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_contamine_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &contamine_nbc_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_etat;
        break;
      }
      
      // optional .Common.EnumLogMedicalHandlingStatus etat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumLogMedicalHandlingStatus_IsValid(value)) {
          set_etat(static_cast< Common::EnumLogMedicalHandlingStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_diagnostique_effectue;
        break;
      }
      
      // optional bool diagnostique_effectue = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diagnostique_effectue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &diagnostique_effectue_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalHandlingUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalHandlingUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  // optional int32 oid_pion_log_traitant = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_pion_log_traitant(), output);
  }
  
  // optional .Common.EnumHumanWound blessure = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->blessure(), output);
  }
  
  // optional bool blesse_mental = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blesse_mental(), output);
  }
  
  // optional bool contamine_nbc = 6 [default = false];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->contamine_nbc(), output);
  }
  
  // optional .Common.EnumLogMedicalHandlingStatus etat = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->etat(), output);
  }
  
  // optional bool diagnostique_effectue = 8 [default = false];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->diagnostique_effectue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalHandlingUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  // optional int32 oid_pion_log_traitant = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_pion_log_traitant(), target);
  }
  
  // optional .Common.EnumHumanWound blessure = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->blessure(), target);
  }
  
  // optional bool blesse_mental = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blesse_mental(), target);
  }
  
  // optional bool contamine_nbc = 6 [default = false];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->contamine_nbc(), target);
  }
  
  // optional .Common.EnumLogMedicalHandlingStatus etat = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->etat(), target);
  }
  
  // optional bool diagnostique_effectue = 8 [default = false];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->diagnostique_effectue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalHandlingUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // optional int32 oid_pion_log_traitant = 3 [default = 0];
    if (has_oid_pion_log_traitant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion_log_traitant());
    }
    
    // optional .Common.EnumHumanWound blessure = 4;
    if (has_blessure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->blessure());
    }
    
    // optional bool blesse_mental = 5 [default = false];
    if (has_blesse_mental()) {
      total_size += 1 + 1;
    }
    
    // optional bool contamine_nbc = 6 [default = false];
    if (has_contamine_nbc()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.EnumLogMedicalHandlingStatus etat = 7;
    if (has_etat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat());
    }
    
    // optional bool diagnostique_effectue = 8 [default = false];
    if (has_diagnostique_effectue()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalHandlingUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalHandlingUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalHandlingUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalHandlingUpdate::MergeFrom(const MsgLogMedicalHandlingUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(2)) {
      set_oid_pion_log_traitant(from.oid_pion_log_traitant());
    }
    if (from._has_bit(3)) {
      set_blessure(from.blessure());
    }
    if (from._has_bit(4)) {
      set_blesse_mental(from.blesse_mental());
    }
    if (from._has_bit(5)) {
      set_contamine_nbc(from.contamine_nbc());
    }
    if (from._has_bit(6)) {
      set_etat(from.etat());
    }
    if (from._has_bit(7)) {
      set_diagnostique_effectue(from.diagnostique_effectue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalHandlingUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalHandlingUpdate::CopyFrom(const MsgLogMedicalHandlingUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalHandlingUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgLogMedicalHandlingUpdate::Swap(MsgLogMedicalHandlingUpdate* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(oid_pion_log_traitant_, other->oid_pion_log_traitant_);
    std::swap(blessure_, other->blessure_);
    std::swap(blesse_mental_, other->blesse_mental_);
    std::swap(contamine_nbc_, other->contamine_nbc_);
    std::swap(etat_, other->etat_);
    std::swap(diagnostique_effectue_, other->diagnostique_effectue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalHandlingUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalHandlingUpdate_descriptor_;
  metadata.reflection = MsgLogMedicalHandlingUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalHandlingDestruction::kOidConsigneFieldNumber;
const int MsgLogMedicalHandlingDestruction::kOidPionFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalHandlingDestruction::MsgLogMedicalHandlingDestruction() {
  SharedCtor();
}

void MsgLogMedicalHandlingDestruction::InitAsDefaultInstance() {
}

MsgLogMedicalHandlingDestruction::MsgLogMedicalHandlingDestruction(const MsgLogMedicalHandlingDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalHandlingDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalHandlingDestruction::~MsgLogMedicalHandlingDestruction() {
  SharedDtor();
}

void MsgLogMedicalHandlingDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalHandlingDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalHandlingDestruction_descriptor_;
}

const MsgLogMedicalHandlingDestruction& MsgLogMedicalHandlingDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMedicalHandlingDestruction* MsgLogMedicalHandlingDestruction::default_instance_ = NULL;

MsgLogMedicalHandlingDestruction* MsgLogMedicalHandlingDestruction::New() const {
  return new MsgLogMedicalHandlingDestruction;
}

void MsgLogMedicalHandlingDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalHandlingDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalHandlingDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalHandlingDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalHandlingDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalHandlingDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalHandlingDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalHandlingDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalHandlingDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalHandlingDestruction::MergeFrom(const MsgLogMedicalHandlingDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalHandlingDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalHandlingDestruction::CopyFrom(const MsgLogMedicalHandlingDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalHandlingDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgLogMedicalHandlingDestruction::Swap(MsgLogMedicalHandlingDestruction* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalHandlingDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalHandlingDestruction_descriptor_;
  metadata.reflection = MsgLogMedicalHandlingDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalEquipmentAvailability::kTypeEquipementFieldNumber;
const int MsgLogMedicalEquipmentAvailability::kNbrTotalFieldNumber;
const int MsgLogMedicalEquipmentAvailability::kNbrDisponiblesFieldNumber;
const int MsgLogMedicalEquipmentAvailability::kNbrAuTravailFieldNumber;
const int MsgLogMedicalEquipmentAvailability::kNbrPretesFieldNumber;
const int MsgLogMedicalEquipmentAvailability::kNbrAuReposFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalEquipmentAvailability::MsgLogMedicalEquipmentAvailability() {
  SharedCtor();
}

void MsgLogMedicalEquipmentAvailability::InitAsDefaultInstance() {
}

MsgLogMedicalEquipmentAvailability::MsgLogMedicalEquipmentAvailability(const MsgLogMedicalEquipmentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalEquipmentAvailability::SharedCtor() {
  _cached_size_ = 0;
  type_equipement_ = 0;
  nbr_total_ = 0;
  nbr_disponibles_ = 0;
  nbr_au_travail_ = 0;
  nbr_pretes_ = 0;
  nbr_au_repos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalEquipmentAvailability::~MsgLogMedicalEquipmentAvailability() {
  SharedDtor();
}

void MsgLogMedicalEquipmentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalEquipmentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalEquipmentAvailability_descriptor_;
}

const MsgLogMedicalEquipmentAvailability& MsgLogMedicalEquipmentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMedicalEquipmentAvailability* MsgLogMedicalEquipmentAvailability::default_instance_ = NULL;

MsgLogMedicalEquipmentAvailability* MsgLogMedicalEquipmentAvailability::New() const {
  return new MsgLogMedicalEquipmentAvailability;
}

void MsgLogMedicalEquipmentAvailability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_equipement_ = 0;
    nbr_total_ = 0;
    nbr_disponibles_ = 0;
    nbr_au_travail_ = 0;
    nbr_pretes_ = 0;
    nbr_au_repos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalEquipmentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_equipement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_equipement_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nbr_total;
        break;
      }
      
      // required int32 nbr_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_total:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_total_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nbr_disponibles;
        break;
      }
      
      // required int32 nbr_disponibles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_disponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_disponibles_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nbr_au_travail;
        break;
      }
      
      // required int32 nbr_au_travail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_travail:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_travail_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nbr_pretes;
        break;
      }
      
      // optional int32 nbr_pretes = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_pretes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_pretes_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nbr_au_repos;
        break;
      }
      
      // optional int32 nbr_au_repos = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_repos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_repos_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalEquipmentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalEquipmentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 type_equipement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_equipement(), output);
  }
  
  // required int32 nbr_total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nbr_total(), output);
  }
  
  // required int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nbr_disponibles(), output);
  }
  
  // required int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nbr_au_travail(), output);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbr_pretes(), output);
  }
  
  // optional int32 nbr_au_repos = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nbr_au_repos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalEquipmentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_equipement = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_equipement(), target);
  }
  
  // required int32 nbr_total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nbr_total(), target);
  }
  
  // required int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nbr_disponibles(), target);
  }
  
  // required int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nbr_au_travail(), target);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbr_pretes(), target);
  }
  
  // optional int32 nbr_au_repos = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nbr_au_repos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalEquipmentAvailability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_equipement = 1;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_equipement());
    }
    
    // required int32 nbr_total = 2;
    if (has_nbr_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_total());
    }
    
    // required int32 nbr_disponibles = 3;
    if (has_nbr_disponibles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_disponibles());
    }
    
    // required int32 nbr_au_travail = 4;
    if (has_nbr_au_travail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_travail());
    }
    
    // optional int32 nbr_pretes = 5 [default = 0];
    if (has_nbr_pretes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_pretes());
    }
    
    // optional int32 nbr_au_repos = 6 [default = 0];
    if (has_nbr_au_repos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_repos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalEquipmentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalEquipmentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalEquipmentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalEquipmentAvailability::MergeFrom(const MsgLogMedicalEquipmentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(1)) {
      set_nbr_total(from.nbr_total());
    }
    if (from._has_bit(2)) {
      set_nbr_disponibles(from.nbr_disponibles());
    }
    if (from._has_bit(3)) {
      set_nbr_au_travail(from.nbr_au_travail());
    }
    if (from._has_bit(4)) {
      set_nbr_pretes(from.nbr_pretes());
    }
    if (from._has_bit(5)) {
      set_nbr_au_repos(from.nbr_au_repos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalEquipmentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalEquipmentAvailability::CopyFrom(const MsgLogMedicalEquipmentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalEquipmentAvailability::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgLogMedicalEquipmentAvailability::Swap(MsgLogMedicalEquipmentAvailability* other) {
  if (other != this) {
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nbr_total_, other->nbr_total_);
    std::swap(nbr_disponibles_, other->nbr_disponibles_);
    std::swap(nbr_au_travail_, other->nbr_au_travail_);
    std::swap(nbr_pretes_, other->nbr_pretes_);
    std::swap(nbr_au_repos_, other->nbr_au_repos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalEquipmentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalEquipmentAvailability_descriptor_;
  metadata.reflection = MsgLogMedicalEquipmentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfLogMedicalEquipmentAvailability::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfLogMedicalEquipmentAvailability::SeqOfLogMedicalEquipmentAvailability() {
  SharedCtor();
}

void SeqOfLogMedicalEquipmentAvailability::InitAsDefaultInstance() {
}

SeqOfLogMedicalEquipmentAvailability::SeqOfLogMedicalEquipmentAvailability(const SeqOfLogMedicalEquipmentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfLogMedicalEquipmentAvailability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfLogMedicalEquipmentAvailability::~SeqOfLogMedicalEquipmentAvailability() {
  SharedDtor();
}

void SeqOfLogMedicalEquipmentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfLogMedicalEquipmentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfLogMedicalEquipmentAvailability_descriptor_;
}

const SeqOfLogMedicalEquipmentAvailability& SeqOfLogMedicalEquipmentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfLogMedicalEquipmentAvailability* SeqOfLogMedicalEquipmentAvailability::default_instance_ = NULL;

SeqOfLogMedicalEquipmentAvailability* SeqOfLogMedicalEquipmentAvailability::New() const {
  return new SeqOfLogMedicalEquipmentAvailability;
}

void SeqOfLogMedicalEquipmentAvailability::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfLogMedicalEquipmentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgLogMedicalEquipmentAvailability elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfLogMedicalEquipmentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfLogMedicalEquipmentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgLogMedicalEquipmentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfLogMedicalEquipmentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgLogMedicalEquipmentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfLogMedicalEquipmentAvailability::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgLogMedicalEquipmentAvailability elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfLogMedicalEquipmentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfLogMedicalEquipmentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfLogMedicalEquipmentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfLogMedicalEquipmentAvailability::MergeFrom(const SeqOfLogMedicalEquipmentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfLogMedicalEquipmentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfLogMedicalEquipmentAvailability::CopyFrom(const SeqOfLogMedicalEquipmentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfLogMedicalEquipmentAvailability::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfLogMedicalEquipmentAvailability::Swap(SeqOfLogMedicalEquipmentAvailability* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfLogMedicalEquipmentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfLogMedicalEquipmentAvailability_descriptor_;
  metadata.reflection = SeqOfLogMedicalEquipmentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalState::kOidPionFieldNumber;
const int MsgLogMedicalState::kChaineActiveeFieldNumber;
const int MsgLogMedicalState::kPrioritesFieldNumber;
const int MsgLogMedicalState::kPrioritesTactiquesFieldNumber;
const int MsgLogMedicalState::kDisponibilitesAmbulancesReleveFieldNumber;
const int MsgLogMedicalState::kDisponibilitesAmbulancesRamassageFieldNumber;
const int MsgLogMedicalState::kDisponibilitesMedecinsFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalState::MsgLogMedicalState() {
  SharedCtor();
}

void MsgLogMedicalState::InitAsDefaultInstance() {
  priorites_ = const_cast< ::Common::MsgLogMedicalPriorities*>(&::Common::MsgLogMedicalPriorities::default_instance());
  priorites_tactiques_ = const_cast< ::Common::MsgAutomatList*>(&::Common::MsgAutomatList::default_instance());
  disponibilites_ambulances_releve_ = const_cast< ::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability*>(&::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::default_instance());
  disponibilites_ambulances_ramassage_ = const_cast< ::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability*>(&::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::default_instance());
  disponibilites_medecins_ = const_cast< ::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability*>(&::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::default_instance());
}

MsgLogMedicalState::MsgLogMedicalState(const MsgLogMedicalState& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalState::SharedCtor() {
  _cached_size_ = 0;
  oid_pion_ = 0;
  chaine_activee_ = false;
  priorites_ = NULL;
  priorites_tactiques_ = NULL;
  disponibilites_ambulances_releve_ = NULL;
  disponibilites_ambulances_ramassage_ = NULL;
  disponibilites_medecins_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalState::~MsgLogMedicalState() {
  SharedDtor();
}

void MsgLogMedicalState::SharedDtor() {
  if (this != default_instance_) {
    delete priorites_;
    delete priorites_tactiques_;
    delete disponibilites_ambulances_releve_;
    delete disponibilites_ambulances_ramassage_;
    delete disponibilites_medecins_;
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalState_descriptor_;
}

const MsgLogMedicalState& MsgLogMedicalState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMedicalState* MsgLogMedicalState::default_instance_ = NULL;

MsgLogMedicalState* MsgLogMedicalState::New() const {
  return new MsgLogMedicalState;
}

void MsgLogMedicalState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_pion_ = 0;
    chaine_activee_ = false;
    if (_has_bit(2)) {
      if (priorites_ != NULL) priorites_->::Common::MsgLogMedicalPriorities::Clear();
    }
    if (_has_bit(3)) {
      if (priorites_tactiques_ != NULL) priorites_tactiques_->::Common::MsgAutomatList::Clear();
    }
    if (_has_bit(4)) {
      if (disponibilites_ambulances_releve_ != NULL) disponibilites_ambulances_releve_->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::Clear();
    }
    if (_has_bit(5)) {
      if (disponibilites_ambulances_ramassage_ != NULL) disponibilites_ambulances_ramassage_->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::Clear();
    }
    if (_has_bit(6)) {
      if (disponibilites_medecins_ != NULL) disponibilites_medecins_->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_pion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_chaine_activee;
        break;
      }
      
      // optional bool chaine_activee = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chaine_activee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &chaine_activee_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_priorites;
        break;
      }
      
      // optional .Common.MsgLogMedicalPriorities priorites = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_priorites:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_priorites()));
        if (input->ExpectTag(34)) goto parse_priorites_tactiques;
        break;
      }
      
      // optional .Common.MsgAutomatList priorites_tactiques = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_priorites_tactiques:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_priorites_tactiques()));
        if (input->ExpectTag(42)) goto parse_disponibilites_ambulances_releve;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_ambulances_releve:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_ambulances_releve()));
        if (input->ExpectTag(50)) goto parse_disponibilites_ambulances_ramassage;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_ambulances_ramassage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_ambulances_ramassage()));
        if (input->ExpectTag(58)) goto parse_disponibilites_medecins;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_medecins = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_medecins:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_medecins()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_pion = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_pion(), output);
  }
  
  // optional bool chaine_activee = 2 [default = false];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chaine_activee(), output);
  }
  
  // optional .Common.MsgLogMedicalPriorities priorites = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->priorites(), output);
  }
  
  // optional .Common.MsgAutomatList priorites_tactiques = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->priorites_tactiques(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->disponibilites_ambulances_releve(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->disponibilites_ambulances_ramassage(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_medecins = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->disponibilites_medecins(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_pion = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_pion(), target);
  }
  
  // optional bool chaine_activee = 2 [default = false];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chaine_activee(), target);
  }
  
  // optional .Common.MsgLogMedicalPriorities priorites = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->priorites(), target);
  }
  
  // optional .Common.MsgAutomatList priorites_tactiques = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->priorites_tactiques(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->disponibilites_ambulances_releve(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->disponibilites_ambulances_ramassage(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_medecins = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disponibilites_medecins(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_pion = 1;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // optional bool chaine_activee = 2 [default = false];
    if (has_chaine_activee()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.MsgLogMedicalPriorities priorites = 3;
    if (has_priorites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priorites());
    }
    
    // optional .Common.MsgAutomatList priorites_tactiques = 4;
    if (has_priorites_tactiques()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priorites_tactiques());
    }
    
    // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve = 5;
    if (has_disponibilites_ambulances_releve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_ambulances_releve());
    }
    
    // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
    if (has_disponibilites_ambulances_ramassage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_ambulances_ramassage());
    }
    
    // optional .MsgsSimToClient.SeqOfLogMedicalEquipmentAvailability disponibilites_medecins = 7;
    if (has_disponibilites_medecins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_medecins());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalState::MergeFrom(const MsgLogMedicalState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(1)) {
      set_chaine_activee(from.chaine_activee());
    }
    if (from._has_bit(2)) {
      mutable_priorites()->::Common::MsgLogMedicalPriorities::MergeFrom(from.priorites());
    }
    if (from._has_bit(3)) {
      mutable_priorites_tactiques()->::Common::MsgAutomatList::MergeFrom(from.priorites_tactiques());
    }
    if (from._has_bit(4)) {
      mutable_disponibilites_ambulances_releve()->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::MergeFrom(from.disponibilites_ambulances_releve());
    }
    if (from._has_bit(5)) {
      mutable_disponibilites_ambulances_ramassage()->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::MergeFrom(from.disponibilites_ambulances_ramassage());
    }
    if (from._has_bit(6)) {
      mutable_disponibilites_medecins()->::MsgsSimToClient::SeqOfLogMedicalEquipmentAvailability::MergeFrom(from.disponibilites_medecins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalState::CopyFrom(const MsgLogMedicalState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_priorites_tactiques()) {
    if (!this->priorites_tactiques().IsInitialized()) return false;
  }
  if (has_disponibilites_ambulances_releve()) {
    if (!this->disponibilites_ambulances_releve().IsInitialized()) return false;
  }
  if (has_disponibilites_ambulances_ramassage()) {
    if (!this->disponibilites_ambulances_ramassage().IsInitialized()) return false;
  }
  if (has_disponibilites_medecins()) {
    if (!this->disponibilites_medecins().IsInitialized()) return false;
  }
  return true;
}

void MsgLogMedicalState::Swap(MsgLogMedicalState* other) {
  if (other != this) {
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(chaine_activee_, other->chaine_activee_);
    std::swap(priorites_, other->priorites_);
    std::swap(priorites_tactiques_, other->priorites_tactiques_);
    std::swap(disponibilites_ambulances_releve_, other->disponibilites_ambulances_releve_);
    std::swap(disponibilites_ambulances_ramassage_, other->disponibilites_ambulances_ramassage_);
    std::swap(disponibilites_medecins_, other->disponibilites_medecins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalState_descriptor_;
  metadata.reflection = MsgLogMedicalState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenanceHandlingCreation::kOidConsigneFieldNumber;
const int MsgLogMaintenanceHandlingCreation::kOidPionFieldNumber;
const int MsgLogMaintenanceHandlingCreation::kTickCreationFieldNumber;
const int MsgLogMaintenanceHandlingCreation::kTypeEquipementFieldNumber;
const int MsgLogMaintenanceHandlingCreation::kTypePanneFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenanceHandlingCreation::MsgLogMaintenanceHandlingCreation() {
  SharedCtor();
}

void MsgLogMaintenanceHandlingCreation::InitAsDefaultInstance() {
}

MsgLogMaintenanceHandlingCreation::MsgLogMaintenanceHandlingCreation(const MsgLogMaintenanceHandlingCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  tick_creation_ = 0;
  type_equipement_ = 0;
  type_panne_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenanceHandlingCreation::~MsgLogMaintenanceHandlingCreation() {
  SharedDtor();
}

void MsgLogMaintenanceHandlingCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenanceHandlingCreation_descriptor_;
}

const MsgLogMaintenanceHandlingCreation& MsgLogMaintenanceHandlingCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMaintenanceHandlingCreation* MsgLogMaintenanceHandlingCreation::default_instance_ = NULL;

MsgLogMaintenanceHandlingCreation* MsgLogMaintenanceHandlingCreation::New() const {
  return new MsgLogMaintenanceHandlingCreation;
}

void MsgLogMaintenanceHandlingCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
    tick_creation_ = 0;
    type_equipement_ = 0;
    type_panne_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenanceHandlingCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_tick_creation;
        break;
      }
      
      // required int32 tick_creation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_creation_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_type_equipement;
        break;
      }
      
      // required int32 type_equipement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_equipement:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_equipement_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_type_panne;
        break;
      }
      
      // required int32 type_panne = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_panne:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_panne_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenanceHandlingCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenanceHandlingCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  // required int32 tick_creation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tick_creation(), output);
  }
  
  // required int32 type_equipement = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type_equipement(), output);
  }
  
  // required int32 type_panne = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type_panne(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenanceHandlingCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  // required int32 tick_creation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tick_creation(), target);
  }
  
  // required int32 type_equipement = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type_equipement(), target);
  }
  
  // required int32 type_panne = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type_panne(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenanceHandlingCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // required int32 tick_creation = 3;
    if (has_tick_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_creation());
    }
    
    // required int32 type_equipement = 4;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_equipement());
    }
    
    // required int32 type_panne = 5;
    if (has_type_panne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_panne());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenanceHandlingCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenanceHandlingCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenanceHandlingCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenanceHandlingCreation::MergeFrom(const MsgLogMaintenanceHandlingCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(2)) {
      set_tick_creation(from.tick_creation());
    }
    if (from._has_bit(3)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(4)) {
      set_type_panne(from.type_panne());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenanceHandlingCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingCreation::CopyFrom(const MsgLogMaintenanceHandlingCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenanceHandlingCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void MsgLogMaintenanceHandlingCreation::Swap(MsgLogMaintenanceHandlingCreation* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(tick_creation_, other->tick_creation_);
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(type_panne_, other->type_panne_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenanceHandlingCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenanceHandlingCreation_descriptor_;
  metadata.reflection = MsgLogMaintenanceHandlingCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenanceHandlingUpdate::kOidConsigneFieldNumber;
const int MsgLogMaintenanceHandlingUpdate::kOidPionFieldNumber;
const int MsgLogMaintenanceHandlingUpdate::kOidPionLogTraitantFieldNumber;
const int MsgLogMaintenanceHandlingUpdate::kEtatFieldNumber;
const int MsgLogMaintenanceHandlingUpdate::kDiagnostiqueEffectueFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenanceHandlingUpdate::MsgLogMaintenanceHandlingUpdate() {
  SharedCtor();
}

void MsgLogMaintenanceHandlingUpdate::InitAsDefaultInstance() {
}

MsgLogMaintenanceHandlingUpdate::MsgLogMaintenanceHandlingUpdate(const MsgLogMaintenanceHandlingUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  oid_pion_log_traitant_ = 0;
  etat_ = 0;
  diagnostique_effectue_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenanceHandlingUpdate::~MsgLogMaintenanceHandlingUpdate() {
  SharedDtor();
}

void MsgLogMaintenanceHandlingUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenanceHandlingUpdate_descriptor_;
}

const MsgLogMaintenanceHandlingUpdate& MsgLogMaintenanceHandlingUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMaintenanceHandlingUpdate* MsgLogMaintenanceHandlingUpdate::default_instance_ = NULL;

MsgLogMaintenanceHandlingUpdate* MsgLogMaintenanceHandlingUpdate::New() const {
  return new MsgLogMaintenanceHandlingUpdate;
}

void MsgLogMaintenanceHandlingUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
    oid_pion_log_traitant_ = 0;
    etat_ = 0;
    diagnostique_effectue_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenanceHandlingUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_pion_log_traitant;
        break;
      }
      
      // required int32 oid_pion_log_traitant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion_log_traitant:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_log_traitant_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_etat;
        break;
      }
      
      // optional .Common.EnumLogMaintenanceHandlingStatus etat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumLogMaintenanceHandlingStatus_IsValid(value)) {
          set_etat(static_cast< Common::EnumLogMaintenanceHandlingStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(4, value);
        }
        if (input->ExpectTag(40)) goto parse_diagnostique_effectue;
        break;
      }
      
      // optional bool diagnostique_effectue = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diagnostique_effectue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &diagnostique_effectue_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenanceHandlingUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenanceHandlingUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  // required int32 oid_pion_log_traitant = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_pion_log_traitant(), output);
  }
  
  // optional .Common.EnumLogMaintenanceHandlingStatus etat = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etat(), output);
  }
  
  // optional bool diagnostique_effectue = 5 [default = false];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->diagnostique_effectue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenanceHandlingUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  // required int32 oid_pion_log_traitant = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_pion_log_traitant(), target);
  }
  
  // optional .Common.EnumLogMaintenanceHandlingStatus etat = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etat(), target);
  }
  
  // optional bool diagnostique_effectue = 5 [default = false];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->diagnostique_effectue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenanceHandlingUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // required int32 oid_pion_log_traitant = 3;
    if (has_oid_pion_log_traitant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion_log_traitant());
    }
    
    // optional .Common.EnumLogMaintenanceHandlingStatus etat = 4;
    if (has_etat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat());
    }
    
    // optional bool diagnostique_effectue = 5 [default = false];
    if (has_diagnostique_effectue()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenanceHandlingUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenanceHandlingUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenanceHandlingUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenanceHandlingUpdate::MergeFrom(const MsgLogMaintenanceHandlingUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(2)) {
      set_oid_pion_log_traitant(from.oid_pion_log_traitant());
    }
    if (from._has_bit(3)) {
      set_etat(from.etat());
    }
    if (from._has_bit(4)) {
      set_diagnostique_effectue(from.diagnostique_effectue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenanceHandlingUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingUpdate::CopyFrom(const MsgLogMaintenanceHandlingUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenanceHandlingUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgLogMaintenanceHandlingUpdate::Swap(MsgLogMaintenanceHandlingUpdate* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(oid_pion_log_traitant_, other->oid_pion_log_traitant_);
    std::swap(etat_, other->etat_);
    std::swap(diagnostique_effectue_, other->diagnostique_effectue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenanceHandlingUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenanceHandlingUpdate_descriptor_;
  metadata.reflection = MsgLogMaintenanceHandlingUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenanceHandlingDestruction::kOidConsigneFieldNumber;
const int MsgLogMaintenanceHandlingDestruction::kOidPionFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenanceHandlingDestruction::MsgLogMaintenanceHandlingDestruction() {
  SharedCtor();
}

void MsgLogMaintenanceHandlingDestruction::InitAsDefaultInstance() {
}

MsgLogMaintenanceHandlingDestruction::MsgLogMaintenanceHandlingDestruction(const MsgLogMaintenanceHandlingDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_pion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenanceHandlingDestruction::~MsgLogMaintenanceHandlingDestruction() {
  SharedDtor();
}

void MsgLogMaintenanceHandlingDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenanceHandlingDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenanceHandlingDestruction_descriptor_;
}

const MsgLogMaintenanceHandlingDestruction& MsgLogMaintenanceHandlingDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMaintenanceHandlingDestruction* MsgLogMaintenanceHandlingDestruction::default_instance_ = NULL;

MsgLogMaintenanceHandlingDestruction* MsgLogMaintenanceHandlingDestruction::New() const {
  return new MsgLogMaintenanceHandlingDestruction;
}

void MsgLogMaintenanceHandlingDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_pion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenanceHandlingDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_pion;
        break;
      }
      
      // required int32 oid_pion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenanceHandlingDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenanceHandlingDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_pion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenanceHandlingDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_pion = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_pion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenanceHandlingDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_pion = 2;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenanceHandlingDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenanceHandlingDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenanceHandlingDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenanceHandlingDestruction::MergeFrom(const MsgLogMaintenanceHandlingDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_pion(from.oid_pion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenanceHandlingDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenanceHandlingDestruction::CopyFrom(const MsgLogMaintenanceHandlingDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenanceHandlingDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgLogMaintenanceHandlingDestruction::Swap(MsgLogMaintenanceHandlingDestruction* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenanceHandlingDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenanceHandlingDestruction_descriptor_;
  metadata.reflection = MsgLogMaintenanceHandlingDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenanceEquipmentAvailability::kTypeEquipementFieldNumber;
const int MsgLogMaintenanceEquipmentAvailability::kNbrTotalFieldNumber;
const int MsgLogMaintenanceEquipmentAvailability::kNbrDisponiblesFieldNumber;
const int MsgLogMaintenanceEquipmentAvailability::kNbrAuTravailFieldNumber;
const int MsgLogMaintenanceEquipmentAvailability::kNbrPretesFieldNumber;
const int MsgLogMaintenanceEquipmentAvailability::kNbrAuReposFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenanceEquipmentAvailability::MsgLogMaintenanceEquipmentAvailability() {
  SharedCtor();
}

void MsgLogMaintenanceEquipmentAvailability::InitAsDefaultInstance() {
}

MsgLogMaintenanceEquipmentAvailability::MsgLogMaintenanceEquipmentAvailability(const MsgLogMaintenanceEquipmentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenanceEquipmentAvailability::SharedCtor() {
  _cached_size_ = 0;
  type_equipement_ = 0;
  nbr_total_ = 0;
  nbr_disponibles_ = 0;
  nbr_au_travail_ = 0;
  nbr_pretes_ = 0;
  nbr_au_repos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenanceEquipmentAvailability::~MsgLogMaintenanceEquipmentAvailability() {
  SharedDtor();
}

void MsgLogMaintenanceEquipmentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenanceEquipmentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenanceEquipmentAvailability_descriptor_;
}

const MsgLogMaintenanceEquipmentAvailability& MsgLogMaintenanceEquipmentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMaintenanceEquipmentAvailability* MsgLogMaintenanceEquipmentAvailability::default_instance_ = NULL;

MsgLogMaintenanceEquipmentAvailability* MsgLogMaintenanceEquipmentAvailability::New() const {
  return new MsgLogMaintenanceEquipmentAvailability;
}

void MsgLogMaintenanceEquipmentAvailability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_equipement_ = 0;
    nbr_total_ = 0;
    nbr_disponibles_ = 0;
    nbr_au_travail_ = 0;
    nbr_pretes_ = 0;
    nbr_au_repos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenanceEquipmentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_equipement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_equipement_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nbr_total;
        break;
      }
      
      // required int32 nbr_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_total:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_total_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nbr_disponibles;
        break;
      }
      
      // required int32 nbr_disponibles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_disponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_disponibles_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nbr_au_travail;
        break;
      }
      
      // required int32 nbr_au_travail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_travail:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_travail_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nbr_pretes;
        break;
      }
      
      // optional int32 nbr_pretes = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_pretes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_pretes_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nbr_au_repos;
        break;
      }
      
      // optional int32 nbr_au_repos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_repos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_repos_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenanceEquipmentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenanceEquipmentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 type_equipement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_equipement(), output);
  }
  
  // required int32 nbr_total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nbr_total(), output);
  }
  
  // required int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nbr_disponibles(), output);
  }
  
  // required int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nbr_au_travail(), output);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbr_pretes(), output);
  }
  
  // optional int32 nbr_au_repos = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nbr_au_repos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenanceEquipmentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_equipement = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_equipement(), target);
  }
  
  // required int32 nbr_total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nbr_total(), target);
  }
  
  // required int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nbr_disponibles(), target);
  }
  
  // required int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nbr_au_travail(), target);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbr_pretes(), target);
  }
  
  // optional int32 nbr_au_repos = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nbr_au_repos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenanceEquipmentAvailability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_equipement = 1;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_equipement());
    }
    
    // required int32 nbr_total = 2;
    if (has_nbr_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_total());
    }
    
    // required int32 nbr_disponibles = 3;
    if (has_nbr_disponibles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_disponibles());
    }
    
    // required int32 nbr_au_travail = 4;
    if (has_nbr_au_travail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_travail());
    }
    
    // optional int32 nbr_pretes = 5 [default = 0];
    if (has_nbr_pretes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_pretes());
    }
    
    // optional int32 nbr_au_repos = 6;
    if (has_nbr_au_repos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_repos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenanceEquipmentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenanceEquipmentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenanceEquipmentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenanceEquipmentAvailability::MergeFrom(const MsgLogMaintenanceEquipmentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(1)) {
      set_nbr_total(from.nbr_total());
    }
    if (from._has_bit(2)) {
      set_nbr_disponibles(from.nbr_disponibles());
    }
    if (from._has_bit(3)) {
      set_nbr_au_travail(from.nbr_au_travail());
    }
    if (from._has_bit(4)) {
      set_nbr_pretes(from.nbr_pretes());
    }
    if (from._has_bit(5)) {
      set_nbr_au_repos(from.nbr_au_repos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenanceEquipmentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenanceEquipmentAvailability::CopyFrom(const MsgLogMaintenanceEquipmentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenanceEquipmentAvailability::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgLogMaintenanceEquipmentAvailability::Swap(MsgLogMaintenanceEquipmentAvailability* other) {
  if (other != this) {
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nbr_total_, other->nbr_total_);
    std::swap(nbr_disponibles_, other->nbr_disponibles_);
    std::swap(nbr_au_travail_, other->nbr_au_travail_);
    std::swap(nbr_pretes_, other->nbr_pretes_);
    std::swap(nbr_au_repos_, other->nbr_au_repos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenanceEquipmentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenanceEquipmentAvailability_descriptor_;
  metadata.reflection = MsgLogMaintenanceEquipmentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfLogMaintenanceEquipmentAvailability::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfLogMaintenanceEquipmentAvailability::SeqOfLogMaintenanceEquipmentAvailability() {
  SharedCtor();
}

void SeqOfLogMaintenanceEquipmentAvailability::InitAsDefaultInstance() {
}

SeqOfLogMaintenanceEquipmentAvailability::SeqOfLogMaintenanceEquipmentAvailability(const SeqOfLogMaintenanceEquipmentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfLogMaintenanceEquipmentAvailability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfLogMaintenanceEquipmentAvailability::~SeqOfLogMaintenanceEquipmentAvailability() {
  SharedDtor();
}

void SeqOfLogMaintenanceEquipmentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfLogMaintenanceEquipmentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfLogMaintenanceEquipmentAvailability_descriptor_;
}

const SeqOfLogMaintenanceEquipmentAvailability& SeqOfLogMaintenanceEquipmentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfLogMaintenanceEquipmentAvailability* SeqOfLogMaintenanceEquipmentAvailability::default_instance_ = NULL;

SeqOfLogMaintenanceEquipmentAvailability* SeqOfLogMaintenanceEquipmentAvailability::New() const {
  return new SeqOfLogMaintenanceEquipmentAvailability;
}

void SeqOfLogMaintenanceEquipmentAvailability::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfLogMaintenanceEquipmentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgLogMaintenanceEquipmentAvailability elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfLogMaintenanceEquipmentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfLogMaintenanceEquipmentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgLogMaintenanceEquipmentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfLogMaintenanceEquipmentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgLogMaintenanceEquipmentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfLogMaintenanceEquipmentAvailability::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgLogMaintenanceEquipmentAvailability elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfLogMaintenanceEquipmentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfLogMaintenanceEquipmentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfLogMaintenanceEquipmentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfLogMaintenanceEquipmentAvailability::MergeFrom(const SeqOfLogMaintenanceEquipmentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfLogMaintenanceEquipmentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfLogMaintenanceEquipmentAvailability::CopyFrom(const SeqOfLogMaintenanceEquipmentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfLogMaintenanceEquipmentAvailability::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfLogMaintenanceEquipmentAvailability::Swap(SeqOfLogMaintenanceEquipmentAvailability* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfLogMaintenanceEquipmentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfLogMaintenanceEquipmentAvailability_descriptor_;
  metadata.reflection = SeqOfLogMaintenanceEquipmentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenanceState::kOidPionFieldNumber;
const int MsgLogMaintenanceState::kChaineActiveeFieldNumber;
const int MsgLogMaintenanceState::kRegimeTravailFieldNumber;
const int MsgLogMaintenanceState::kPrioritesFieldNumber;
const int MsgLogMaintenanceState::kPrioritesTactiquesFieldNumber;
const int MsgLogMaintenanceState::kDisponibilitesRemorqueursFieldNumber;
const int MsgLogMaintenanceState::kDisponibilitesReparateursFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenanceState::MsgLogMaintenanceState() {
  SharedCtor();
}

void MsgLogMaintenanceState::InitAsDefaultInstance() {
  priorites_ = const_cast< ::Common::MsgLogMaintenancePriorities*>(&::Common::MsgLogMaintenancePriorities::default_instance());
  priorites_tactiques_ = const_cast< ::Common::MsgAutomatList*>(&::Common::MsgAutomatList::default_instance());
  disponibilites_remorqueurs_ = const_cast< ::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability*>(&::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::default_instance());
  disponibilites_reparateurs_ = const_cast< ::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability*>(&::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::default_instance());
}

MsgLogMaintenanceState::MsgLogMaintenanceState(const MsgLogMaintenanceState& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenanceState::SharedCtor() {
  _cached_size_ = 0;
  oid_pion_ = 0;
  chaine_activee_ = false;
  regime_travail_ = 0;
  priorites_ = NULL;
  priorites_tactiques_ = NULL;
  disponibilites_remorqueurs_ = NULL;
  disponibilites_reparateurs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenanceState::~MsgLogMaintenanceState() {
  SharedDtor();
}

void MsgLogMaintenanceState::SharedDtor() {
  if (this != default_instance_) {
    delete priorites_;
    delete priorites_tactiques_;
    delete disponibilites_remorqueurs_;
    delete disponibilites_reparateurs_;
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenanceState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenanceState_descriptor_;
}

const MsgLogMaintenanceState& MsgLogMaintenanceState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogMaintenanceState* MsgLogMaintenanceState::default_instance_ = NULL;

MsgLogMaintenanceState* MsgLogMaintenanceState::New() const {
  return new MsgLogMaintenanceState;
}

void MsgLogMaintenanceState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_pion_ = 0;
    chaine_activee_ = false;
    regime_travail_ = 0;
    if (_has_bit(3)) {
      if (priorites_ != NULL) priorites_->::Common::MsgLogMaintenancePriorities::Clear();
    }
    if (_has_bit(4)) {
      if (priorites_tactiques_ != NULL) priorites_tactiques_->::Common::MsgAutomatList::Clear();
    }
    if (_has_bit(5)) {
      if (disponibilites_remorqueurs_ != NULL) disponibilites_remorqueurs_->::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::Clear();
    }
    if (_has_bit(6)) {
      if (disponibilites_reparateurs_ != NULL) disponibilites_reparateurs_->::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenanceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_pion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_chaine_activee;
        break;
      }
      
      // optional bool chaine_activee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chaine_activee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &chaine_activee_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_regime_travail;
        break;
      }
      
      // optional .Common.EnumLogMaintenanceRegimeTravail regime_travail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_regime_travail:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumLogMaintenanceRegimeTravail_IsValid(value)) {
          set_regime_travail(static_cast< Common::EnumLogMaintenanceRegimeTravail >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(34)) goto parse_priorites;
        break;
      }
      
      // optional .Common.MsgLogMaintenancePriorities priorites = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_priorites:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_priorites()));
        if (input->ExpectTag(42)) goto parse_priorites_tactiques;
        break;
      }
      
      // optional .Common.MsgAutomatList priorites_tactiques = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_priorites_tactiques:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_priorites_tactiques()));
        if (input->ExpectTag(50)) goto parse_disponibilites_remorqueurs;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_remorqueurs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_remorqueurs()));
        if (input->ExpectTag(58)) goto parse_disponibilites_reparateurs;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_reparateurs:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_reparateurs()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenanceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenanceState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_pion = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_pion(), output);
  }
  
  // optional bool chaine_activee = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chaine_activee(), output);
  }
  
  // optional .Common.EnumLogMaintenanceRegimeTravail regime_travail = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->regime_travail(), output);
  }
  
  // optional .Common.MsgLogMaintenancePriorities priorites = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->priorites(), output);
  }
  
  // optional .Common.MsgAutomatList priorites_tactiques = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->priorites_tactiques(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->disponibilites_remorqueurs(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->disponibilites_reparateurs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenanceState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_pion = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_pion(), target);
  }
  
  // optional bool chaine_activee = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chaine_activee(), target);
  }
  
  // optional .Common.EnumLogMaintenanceRegimeTravail regime_travail = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->regime_travail(), target);
  }
  
  // optional .Common.MsgLogMaintenancePriorities priorites = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->priorites(), target);
  }
  
  // optional .Common.MsgAutomatList priorites_tactiques = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->priorites_tactiques(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->disponibilites_remorqueurs(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->disponibilites_reparateurs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenanceState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_pion = 1;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // optional bool chaine_activee = 2;
    if (has_chaine_activee()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.EnumLogMaintenanceRegimeTravail regime_travail = 3;
    if (has_regime_travail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->regime_travail());
    }
    
    // optional .Common.MsgLogMaintenancePriorities priorites = 4;
    if (has_priorites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priorites());
    }
    
    // optional .Common.MsgAutomatList priorites_tactiques = 5;
    if (has_priorites_tactiques()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->priorites_tactiques());
    }
    
    // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
    if (has_disponibilites_remorqueurs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_remorqueurs());
    }
    
    // optional .MsgsSimToClient.SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
    if (has_disponibilites_reparateurs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_reparateurs());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenanceState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenanceState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenanceState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenanceState::MergeFrom(const MsgLogMaintenanceState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(1)) {
      set_chaine_activee(from.chaine_activee());
    }
    if (from._has_bit(2)) {
      set_regime_travail(from.regime_travail());
    }
    if (from._has_bit(3)) {
      mutable_priorites()->::Common::MsgLogMaintenancePriorities::MergeFrom(from.priorites());
    }
    if (from._has_bit(4)) {
      mutable_priorites_tactiques()->::Common::MsgAutomatList::MergeFrom(from.priorites_tactiques());
    }
    if (from._has_bit(5)) {
      mutable_disponibilites_remorqueurs()->::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::MergeFrom(from.disponibilites_remorqueurs());
    }
    if (from._has_bit(6)) {
      mutable_disponibilites_reparateurs()->::MsgsSimToClient::SeqOfLogMaintenanceEquipmentAvailability::MergeFrom(from.disponibilites_reparateurs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenanceState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenanceState::CopyFrom(const MsgLogMaintenanceState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenanceState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_priorites()) {
    if (!this->priorites().IsInitialized()) return false;
  }
  if (has_priorites_tactiques()) {
    if (!this->priorites_tactiques().IsInitialized()) return false;
  }
  if (has_disponibilites_remorqueurs()) {
    if (!this->disponibilites_remorqueurs().IsInitialized()) return false;
  }
  if (has_disponibilites_reparateurs()) {
    if (!this->disponibilites_reparateurs().IsInitialized()) return false;
  }
  return true;
}

void MsgLogMaintenanceState::Swap(MsgLogMaintenanceState* other) {
  if (other != this) {
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(chaine_activee_, other->chaine_activee_);
    std::swap(regime_travail_, other->regime_travail_);
    std::swap(priorites_, other->priorites_);
    std::swap(priorites_tactiques_, other->priorites_tactiques_);
    std::swap(disponibilites_remorqueurs_, other->disponibilites_remorqueurs_);
    std::swap(disponibilites_reparateurs_, other->disponibilites_reparateurs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenanceState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenanceState_descriptor_;
  metadata.reflection = MsgLogMaintenanceState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyHandlingCreation::kOidConsigneFieldNumber;
const int MsgLogSupplyHandlingCreation::kOidAutomateFieldNumber;
const int MsgLogSupplyHandlingCreation::kTickCreationFieldNumber;
const int MsgLogSupplyHandlingCreation::kDotationsFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyHandlingCreation::MsgLogSupplyHandlingCreation() {
  SharedCtor();
}

void MsgLogSupplyHandlingCreation::InitAsDefaultInstance() {
  dotations_ = const_cast< ::MsgsSimToClient::SeqOfDotationQuery*>(&::MsgsSimToClient::SeqOfDotationQuery::default_instance());
}

MsgLogSupplyHandlingCreation::MsgLogSupplyHandlingCreation(const MsgLogSupplyHandlingCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyHandlingCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_automate_ = 0;
  tick_creation_ = 0;
  dotations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyHandlingCreation::~MsgLogSupplyHandlingCreation() {
  SharedDtor();
}

void MsgLogSupplyHandlingCreation::SharedDtor() {
  if (this != default_instance_) {
    delete dotations_;
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyHandlingCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyHandlingCreation_descriptor_;
}

const MsgLogSupplyHandlingCreation& MsgLogSupplyHandlingCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyHandlingCreation* MsgLogSupplyHandlingCreation::default_instance_ = NULL;

MsgLogSupplyHandlingCreation* MsgLogSupplyHandlingCreation::New() const {
  return new MsgLogSupplyHandlingCreation;
}

void MsgLogSupplyHandlingCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_automate_ = 0;
    tick_creation_ = 0;
    if (_has_bit(3)) {
      if (dotations_ != NULL) dotations_->::MsgsSimToClient::SeqOfDotationQuery::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyHandlingCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_automate;
        break;
      }
      
      // optional int32 oid_automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_tick_creation;
        break;
      }
      
      // optional int32 tick_creation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_creation_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_dotations;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dotations:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dotations()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyHandlingCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyHandlingCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // optional int32 oid_automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_automate(), output);
  }
  
  // optional int32 tick_creation = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tick_creation(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->dotations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyHandlingCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // optional int32 oid_automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_automate(), target);
  }
  
  // optional int32 tick_creation = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tick_creation(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dotations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyHandlingCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // optional int32 oid_automate = 2;
    if (has_oid_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate());
    }
    
    // optional int32 tick_creation = 3;
    if (has_tick_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_creation());
    }
    
    // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 4;
    if (has_dotations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotations());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyHandlingCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyHandlingCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyHandlingCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyHandlingCreation::MergeFrom(const MsgLogSupplyHandlingCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_automate(from.oid_automate());
    }
    if (from._has_bit(2)) {
      set_tick_creation(from.tick_creation());
    }
    if (from._has_bit(3)) {
      mutable_dotations()->::MsgsSimToClient::SeqOfDotationQuery::MergeFrom(from.dotations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyHandlingCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyHandlingCreation::CopyFrom(const MsgLogSupplyHandlingCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyHandlingCreation::IsInitialized() const {
  
  return true;
}

void MsgLogSupplyHandlingCreation::Swap(MsgLogSupplyHandlingCreation* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_automate_, other->oid_automate_);
    std::swap(tick_creation_, other->tick_creation_);
    std::swap(dotations_, other->dotations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyHandlingCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyHandlingCreation_descriptor_;
  metadata.reflection = MsgLogSupplyHandlingCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDotationQuery::kRessourceIdFieldNumber;
const int MsgDotationQuery::kQuantiteDemandeeFieldNumber;
const int MsgDotationQuery::kQuantiteAccordeeFieldNumber;
const int MsgDotationQuery::kQuantiteEnTransitFieldNumber;
#endif  // !_MSC_VER

MsgDotationQuery::MsgDotationQuery() {
  SharedCtor();
}

void MsgDotationQuery::InitAsDefaultInstance() {
}

MsgDotationQuery::MsgDotationQuery(const MsgDotationQuery& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDotationQuery::SharedCtor() {
  _cached_size_ = 0;
  ressource_id_ = 0;
  quantite_demandee_ = 0;
  quantite_accordee_ = 0;
  quantite_en_transit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDotationQuery::~MsgDotationQuery() {
  SharedDtor();
}

void MsgDotationQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDotationQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDotationQuery_descriptor_;
}

const MsgDotationQuery& MsgDotationQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgDotationQuery* MsgDotationQuery::default_instance_ = NULL;

MsgDotationQuery* MsgDotationQuery::New() const {
  return new MsgDotationQuery;
}

void MsgDotationQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ressource_id_ = 0;
    quantite_demandee_ = 0;
    quantite_accordee_ = 0;
    quantite_en_transit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDotationQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ressource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &ressource_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_quantite_demandee;
        break;
      }
      
      // optional int32 quantite_demandee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantite_demandee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantite_demandee_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_quantite_accordee;
        break;
      }
      
      // optional int32 quantite_accordee = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantite_accordee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantite_accordee_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_quantite_en_transit;
        break;
      }
      
      // optional int32 quantite_en_transit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantite_en_transit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantite_en_transit_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDotationQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDotationQuery::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 ressource_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ressource_id(), output);
  }
  
  // optional int32 quantite_demandee = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantite_demandee(), output);
  }
  
  // optional int32 quantite_accordee = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quantite_accordee(), output);
  }
  
  // optional int32 quantite_en_transit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quantite_en_transit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDotationQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ressource_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ressource_id(), target);
  }
  
  // optional int32 quantite_demandee = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantite_demandee(), target);
  }
  
  // optional int32 quantite_accordee = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quantite_accordee(), target);
  }
  
  // optional int32 quantite_en_transit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quantite_en_transit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDotationQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ressource_id = 1;
    if (has_ressource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ressource_id());
    }
    
    // optional int32 quantite_demandee = 2;
    if (has_quantite_demandee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantite_demandee());
    }
    
    // optional int32 quantite_accordee = 3;
    if (has_quantite_accordee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantite_accordee());
    }
    
    // optional int32 quantite_en_transit = 4;
    if (has_quantite_en_transit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantite_en_transit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDotationQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDotationQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDotationQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDotationQuery::MergeFrom(const MsgDotationQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ressource_id(from.ressource_id());
    }
    if (from._has_bit(1)) {
      set_quantite_demandee(from.quantite_demandee());
    }
    if (from._has_bit(2)) {
      set_quantite_accordee(from.quantite_accordee());
    }
    if (from._has_bit(3)) {
      set_quantite_en_transit(from.quantite_en_transit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDotationQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDotationQuery::CopyFrom(const MsgDotationQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDotationQuery::IsInitialized() const {
  
  return true;
}

void MsgDotationQuery::Swap(MsgDotationQuery* other) {
  if (other != this) {
    std::swap(ressource_id_, other->ressource_id_);
    std::swap(quantite_demandee_, other->quantite_demandee_);
    std::swap(quantite_accordee_, other->quantite_accordee_);
    std::swap(quantite_en_transit_, other->quantite_en_transit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDotationQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDotationQuery_descriptor_;
  metadata.reflection = MsgDotationQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfDotationQuery::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfDotationQuery::SeqOfDotationQuery() {
  SharedCtor();
}

void SeqOfDotationQuery::InitAsDefaultInstance() {
}

SeqOfDotationQuery::SeqOfDotationQuery(const SeqOfDotationQuery& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfDotationQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfDotationQuery::~SeqOfDotationQuery() {
  SharedDtor();
}

void SeqOfDotationQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfDotationQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfDotationQuery_descriptor_;
}

const SeqOfDotationQuery& SeqOfDotationQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfDotationQuery* SeqOfDotationQuery::default_instance_ = NULL;

SeqOfDotationQuery* SeqOfDotationQuery::New() const {
  return new SeqOfDotationQuery;
}

void SeqOfDotationQuery::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfDotationQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgDotationQuery elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfDotationQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfDotationQuery::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgDotationQuery elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfDotationQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgDotationQuery elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfDotationQuery::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgDotationQuery elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfDotationQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfDotationQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfDotationQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfDotationQuery::MergeFrom(const SeqOfDotationQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfDotationQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfDotationQuery::CopyFrom(const SeqOfDotationQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfDotationQuery::IsInitialized() const {
  
  return true;
}

void SeqOfDotationQuery::Swap(SeqOfDotationQuery* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfDotationQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfDotationQuery_descriptor_;
  metadata.reflection = SeqOfDotationQuery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyHandlingUpdate::kOidConsigneFieldNumber;
const int MsgLogSupplyHandlingUpdate::kOidAutomateFieldNumber;
const int MsgLogSupplyHandlingUpdate::kOidAutomateLogTraitantFieldNumber;
const int MsgLogSupplyHandlingUpdate::kOidAutomateLogFournissantMoyensConvoiFieldNumber;
const int MsgLogSupplyHandlingUpdate::kOidPionConvoyantFieldNumber;
const int MsgLogSupplyHandlingUpdate::kEtatFieldNumber;
const int MsgLogSupplyHandlingUpdate::kDotationsFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyHandlingUpdate::MsgLogSupplyHandlingUpdate() {
  SharedCtor();
}

void MsgLogSupplyHandlingUpdate::InitAsDefaultInstance() {
  dotations_ = const_cast< ::MsgsSimToClient::SeqOfDotationQuery*>(&::MsgsSimToClient::SeqOfDotationQuery::default_instance());
}

MsgLogSupplyHandlingUpdate::MsgLogSupplyHandlingUpdate(const MsgLogSupplyHandlingUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyHandlingUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_automate_ = 0;
  oid_automate_log_traitant_ = 0;
  oid_automate_log_fournissant_moyens_convoi_ = 0;
  oid_pion_convoyant_ = 0;
  etat_ = 1;
  dotations_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyHandlingUpdate::~MsgLogSupplyHandlingUpdate() {
  SharedDtor();
}

void MsgLogSupplyHandlingUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete dotations_;
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyHandlingUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyHandlingUpdate_descriptor_;
}

const MsgLogSupplyHandlingUpdate& MsgLogSupplyHandlingUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyHandlingUpdate* MsgLogSupplyHandlingUpdate::default_instance_ = NULL;

MsgLogSupplyHandlingUpdate* MsgLogSupplyHandlingUpdate::New() const {
  return new MsgLogSupplyHandlingUpdate;
}

void MsgLogSupplyHandlingUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_automate_ = 0;
    oid_automate_log_traitant_ = 0;
    oid_automate_log_fournissant_moyens_convoi_ = 0;
    oid_pion_convoyant_ = 0;
    etat_ = 1;
    if (_has_bit(6)) {
      if (dotations_ != NULL) dotations_->::MsgsSimToClient::SeqOfDotationQuery::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyHandlingUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_automate;
        break;
      }
      
      // optional int32 oid_automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_automate_log_traitant;
        break;
      }
      
      // optional int32 oid_automate_log_traitant = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate_log_traitant:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_log_traitant_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_oid_automate_log_fournissant_moyens_convoi;
        break;
      }
      
      // optional int32 oid_automate_log_fournissant_moyens_convoi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate_log_fournissant_moyens_convoi:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_log_fournissant_moyens_convoi_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_oid_pion_convoyant;
        break;
      }
      
      // optional int32 oid_pion_convoyant = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_pion_convoyant:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_convoyant_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_etat;
        break;
      }
      
      // optional .MsgsSimToClient.EnumLogSupplyHandlingStatus etat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (MsgsSimToClient::EnumLogSupplyHandlingStatus_IsValid(value)) {
          set_etat(static_cast< MsgsSimToClient::EnumLogSupplyHandlingStatus >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectTag(58)) goto parse_dotations;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dotations:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_dotations()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyHandlingUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyHandlingUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // optional int32 oid_automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_automate(), output);
  }
  
  // optional int32 oid_automate_log_traitant = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_automate_log_traitant(), output);
  }
  
  // optional int32 oid_automate_log_fournissant_moyens_convoi = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_automate_log_fournissant_moyens_convoi(), output);
  }
  
  // optional int32 oid_pion_convoyant = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->oid_pion_convoyant(), output);
  }
  
  // optional .MsgsSimToClient.EnumLogSupplyHandlingStatus etat = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->etat(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->dotations(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyHandlingUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // optional int32 oid_automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_automate(), target);
  }
  
  // optional int32 oid_automate_log_traitant = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_automate_log_traitant(), target);
  }
  
  // optional int32 oid_automate_log_fournissant_moyens_convoi = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_automate_log_fournissant_moyens_convoi(), target);
  }
  
  // optional int32 oid_pion_convoyant = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->oid_pion_convoyant(), target);
  }
  
  // optional .MsgsSimToClient.EnumLogSupplyHandlingStatus etat = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->etat(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dotations(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyHandlingUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // optional int32 oid_automate = 2;
    if (has_oid_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate());
    }
    
    // optional int32 oid_automate_log_traitant = 3;
    if (has_oid_automate_log_traitant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate_log_traitant());
    }
    
    // optional int32 oid_automate_log_fournissant_moyens_convoi = 4;
    if (has_oid_automate_log_fournissant_moyens_convoi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate_log_fournissant_moyens_convoi());
    }
    
    // optional int32 oid_pion_convoyant = 5;
    if (has_oid_pion_convoyant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion_convoyant());
    }
    
    // optional .MsgsSimToClient.EnumLogSupplyHandlingStatus etat = 6;
    if (has_etat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etat());
    }
    
    // optional .MsgsSimToClient.SeqOfDotationQuery dotations = 7;
    if (has_dotations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotations());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyHandlingUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyHandlingUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyHandlingUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyHandlingUpdate::MergeFrom(const MsgLogSupplyHandlingUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_automate(from.oid_automate());
    }
    if (from._has_bit(2)) {
      set_oid_automate_log_traitant(from.oid_automate_log_traitant());
    }
    if (from._has_bit(3)) {
      set_oid_automate_log_fournissant_moyens_convoi(from.oid_automate_log_fournissant_moyens_convoi());
    }
    if (from._has_bit(4)) {
      set_oid_pion_convoyant(from.oid_pion_convoyant());
    }
    if (from._has_bit(5)) {
      set_etat(from.etat());
    }
    if (from._has_bit(6)) {
      mutable_dotations()->::MsgsSimToClient::SeqOfDotationQuery::MergeFrom(from.dotations());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyHandlingUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyHandlingUpdate::CopyFrom(const MsgLogSupplyHandlingUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyHandlingUpdate::IsInitialized() const {
  
  return true;
}

void MsgLogSupplyHandlingUpdate::Swap(MsgLogSupplyHandlingUpdate* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_automate_, other->oid_automate_);
    std::swap(oid_automate_log_traitant_, other->oid_automate_log_traitant_);
    std::swap(oid_automate_log_fournissant_moyens_convoi_, other->oid_automate_log_fournissant_moyens_convoi_);
    std::swap(oid_pion_convoyant_, other->oid_pion_convoyant_);
    std::swap(etat_, other->etat_);
    std::swap(dotations_, other->dotations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyHandlingUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyHandlingUpdate_descriptor_;
  metadata.reflection = MsgLogSupplyHandlingUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyHandlingDestruction::kOidConsigneFieldNumber;
const int MsgLogSupplyHandlingDestruction::kOidAutomateFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyHandlingDestruction::MsgLogSupplyHandlingDestruction() {
  SharedCtor();
}

void MsgLogSupplyHandlingDestruction::InitAsDefaultInstance() {
}

MsgLogSupplyHandlingDestruction::MsgLogSupplyHandlingDestruction(const MsgLogSupplyHandlingDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyHandlingDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_consigne_ = 0;
  oid_automate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyHandlingDestruction::~MsgLogSupplyHandlingDestruction() {
  SharedDtor();
}

void MsgLogSupplyHandlingDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyHandlingDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyHandlingDestruction_descriptor_;
}

const MsgLogSupplyHandlingDestruction& MsgLogSupplyHandlingDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyHandlingDestruction* MsgLogSupplyHandlingDestruction::default_instance_ = NULL;

MsgLogSupplyHandlingDestruction* MsgLogSupplyHandlingDestruction::New() const {
  return new MsgLogSupplyHandlingDestruction;
}

void MsgLogSupplyHandlingDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_consigne_ = 0;
    oid_automate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyHandlingDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_consigne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_consigne_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_automate;
        break;
      }
      
      // required int32 oid_automate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_automate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyHandlingDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyHandlingDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_consigne(), output);
  }
  
  // required int32 oid_automate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_automate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyHandlingDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_consigne = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_consigne(), target);
  }
  
  // required int32 oid_automate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_automate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyHandlingDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_consigne = 1;
    if (has_oid_consigne()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_consigne());
    }
    
    // required int32 oid_automate = 2;
    if (has_oid_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyHandlingDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyHandlingDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyHandlingDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyHandlingDestruction::MergeFrom(const MsgLogSupplyHandlingDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_consigne(from.oid_consigne());
    }
    if (from._has_bit(1)) {
      set_oid_automate(from.oid_automate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyHandlingDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyHandlingDestruction::CopyFrom(const MsgLogSupplyHandlingDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyHandlingDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgLogSupplyHandlingDestruction::Swap(MsgLogSupplyHandlingDestruction* other) {
  if (other != this) {
    std::swap(oid_consigne_, other->oid_consigne_);
    std::swap(oid_automate_, other->oid_automate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyHandlingDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyHandlingDestruction_descriptor_;
  metadata.reflection = MsgLogSupplyHandlingDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyEquimentAvailability::kTypeEquipementFieldNumber;
const int MsgLogSupplyEquimentAvailability::kNbrTotalFieldNumber;
const int MsgLogSupplyEquimentAvailability::kNbrDisponiblesFieldNumber;
const int MsgLogSupplyEquimentAvailability::kNbrAuTravailFieldNumber;
const int MsgLogSupplyEquimentAvailability::kNbrPretesFieldNumber;
const int MsgLogSupplyEquimentAvailability::kNbrAuReposFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyEquimentAvailability::MsgLogSupplyEquimentAvailability() {
  SharedCtor();
}

void MsgLogSupplyEquimentAvailability::InitAsDefaultInstance() {
}

MsgLogSupplyEquimentAvailability::MsgLogSupplyEquimentAvailability(const MsgLogSupplyEquimentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyEquimentAvailability::SharedCtor() {
  _cached_size_ = 0;
  type_equipement_ = 0;
  nbr_total_ = 0;
  nbr_disponibles_ = 0;
  nbr_au_travail_ = 0;
  nbr_pretes_ = 0;
  nbr_au_repos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyEquimentAvailability::~MsgLogSupplyEquimentAvailability() {
  SharedDtor();
}

void MsgLogSupplyEquimentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyEquimentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyEquimentAvailability_descriptor_;
}

const MsgLogSupplyEquimentAvailability& MsgLogSupplyEquimentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyEquimentAvailability* MsgLogSupplyEquimentAvailability::default_instance_ = NULL;

MsgLogSupplyEquimentAvailability* MsgLogSupplyEquimentAvailability::New() const {
  return new MsgLogSupplyEquimentAvailability;
}

void MsgLogSupplyEquimentAvailability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_equipement_ = 0;
    nbr_total_ = 0;
    nbr_disponibles_ = 0;
    nbr_au_travail_ = 0;
    nbr_pretes_ = 0;
    nbr_au_repos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyEquimentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_equipement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_equipement_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_nbr_total;
        break;
      }
      
      // optional int32 nbr_total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_total:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_total_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nbr_disponibles;
        break;
      }
      
      // optional int32 nbr_disponibles = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_disponibles:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_disponibles_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nbr_au_travail;
        break;
      }
      
      // optional int32 nbr_au_travail = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_travail:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_travail_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nbr_pretes;
        break;
      }
      
      // optional int32 nbr_pretes = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_pretes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_pretes_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nbr_au_repos;
        break;
      }
      
      // optional int32 nbr_au_repos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nbr_au_repos:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nbr_au_repos_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyEquimentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyEquimentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 type_equipement = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_equipement(), output);
  }
  
  // optional int32 nbr_total = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nbr_total(), output);
  }
  
  // optional int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nbr_disponibles(), output);
  }
  
  // optional int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nbr_au_travail(), output);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nbr_pretes(), output);
  }
  
  // optional int32 nbr_au_repos = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nbr_au_repos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyEquimentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_equipement = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_equipement(), target);
  }
  
  // optional int32 nbr_total = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nbr_total(), target);
  }
  
  // optional int32 nbr_disponibles = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nbr_disponibles(), target);
  }
  
  // optional int32 nbr_au_travail = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nbr_au_travail(), target);
  }
  
  // optional int32 nbr_pretes = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nbr_pretes(), target);
  }
  
  // optional int32 nbr_au_repos = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nbr_au_repos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyEquimentAvailability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_equipement = 1;
    if (has_type_equipement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_equipement());
    }
    
    // optional int32 nbr_total = 2;
    if (has_nbr_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_total());
    }
    
    // optional int32 nbr_disponibles = 3;
    if (has_nbr_disponibles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_disponibles());
    }
    
    // optional int32 nbr_au_travail = 4;
    if (has_nbr_au_travail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_travail());
    }
    
    // optional int32 nbr_pretes = 5 [default = 0];
    if (has_nbr_pretes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_pretes());
    }
    
    // optional int32 nbr_au_repos = 6;
    if (has_nbr_au_repos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbr_au_repos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyEquimentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyEquimentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyEquimentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyEquimentAvailability::MergeFrom(const MsgLogSupplyEquimentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type_equipement(from.type_equipement());
    }
    if (from._has_bit(1)) {
      set_nbr_total(from.nbr_total());
    }
    if (from._has_bit(2)) {
      set_nbr_disponibles(from.nbr_disponibles());
    }
    if (from._has_bit(3)) {
      set_nbr_au_travail(from.nbr_au_travail());
    }
    if (from._has_bit(4)) {
      set_nbr_pretes(from.nbr_pretes());
    }
    if (from._has_bit(5)) {
      set_nbr_au_repos(from.nbr_au_repos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyEquimentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyEquimentAvailability::CopyFrom(const MsgLogSupplyEquimentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyEquimentAvailability::IsInitialized() const {
  
  return true;
}

void MsgLogSupplyEquimentAvailability::Swap(MsgLogSupplyEquimentAvailability* other) {
  if (other != this) {
    std::swap(type_equipement_, other->type_equipement_);
    std::swap(nbr_total_, other->nbr_total_);
    std::swap(nbr_disponibles_, other->nbr_disponibles_);
    std::swap(nbr_au_travail_, other->nbr_au_travail_);
    std::swap(nbr_pretes_, other->nbr_pretes_);
    std::swap(nbr_au_repos_, other->nbr_au_repos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyEquimentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyEquimentAvailability_descriptor_;
  metadata.reflection = MsgLogSupplyEquimentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfLogSupplyEquimentAvailability::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfLogSupplyEquimentAvailability::SeqOfLogSupplyEquimentAvailability() {
  SharedCtor();
}

void SeqOfLogSupplyEquimentAvailability::InitAsDefaultInstance() {
}

SeqOfLogSupplyEquimentAvailability::SeqOfLogSupplyEquimentAvailability(const SeqOfLogSupplyEquimentAvailability& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfLogSupplyEquimentAvailability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfLogSupplyEquimentAvailability::~SeqOfLogSupplyEquimentAvailability() {
  SharedDtor();
}

void SeqOfLogSupplyEquimentAvailability::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfLogSupplyEquimentAvailability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfLogSupplyEquimentAvailability_descriptor_;
}

const SeqOfLogSupplyEquimentAvailability& SeqOfLogSupplyEquimentAvailability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfLogSupplyEquimentAvailability* SeqOfLogSupplyEquimentAvailability::default_instance_ = NULL;

SeqOfLogSupplyEquimentAvailability* SeqOfLogSupplyEquimentAvailability::New() const {
  return new SeqOfLogSupplyEquimentAvailability;
}

void SeqOfLogSupplyEquimentAvailability::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfLogSupplyEquimentAvailability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgLogSupplyEquimentAvailability elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfLogSupplyEquimentAvailability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfLogSupplyEquimentAvailability::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgLogSupplyEquimentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfLogSupplyEquimentAvailability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgLogSupplyEquimentAvailability elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfLogSupplyEquimentAvailability::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgLogSupplyEquimentAvailability elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfLogSupplyEquimentAvailability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfLogSupplyEquimentAvailability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfLogSupplyEquimentAvailability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfLogSupplyEquimentAvailability::MergeFrom(const SeqOfLogSupplyEquimentAvailability& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfLogSupplyEquimentAvailability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfLogSupplyEquimentAvailability::CopyFrom(const SeqOfLogSupplyEquimentAvailability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfLogSupplyEquimentAvailability::IsInitialized() const {
  
  return true;
}

void SeqOfLogSupplyEquimentAvailability::Swap(SeqOfLogSupplyEquimentAvailability* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfLogSupplyEquimentAvailability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfLogSupplyEquimentAvailability_descriptor_;
  metadata.reflection = SeqOfLogSupplyEquimentAvailability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyState::kOidPionFieldNumber;
const int MsgLogSupplyState::kChaineActiveeFieldNumber;
const int MsgLogSupplyState::kStocksFieldNumber;
const int MsgLogSupplyState::kDisponibilitesTransporteursConvoisFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyState::MsgLogSupplyState() {
  SharedCtor();
}

void MsgLogSupplyState::InitAsDefaultInstance() {
  stocks_ = const_cast< ::Common::SeqOfDotationStock*>(&::Common::SeqOfDotationStock::default_instance());
  disponibilites_transporteurs_convois_ = const_cast< ::MsgsSimToClient::SeqOfLogSupplyEquimentAvailability*>(&::MsgsSimToClient::SeqOfLogSupplyEquimentAvailability::default_instance());
}

MsgLogSupplyState::MsgLogSupplyState(const MsgLogSupplyState& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyState::SharedCtor() {
  _cached_size_ = 0;
  oid_pion_ = 0;
  chaine_activee_ = false;
  stocks_ = NULL;
  disponibilites_transporteurs_convois_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyState::~MsgLogSupplyState() {
  SharedDtor();
}

void MsgLogSupplyState::SharedDtor() {
  if (this != default_instance_) {
    delete stocks_;
    delete disponibilites_transporteurs_convois_;
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyState_descriptor_;
}

const MsgLogSupplyState& MsgLogSupplyState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyState* MsgLogSupplyState::default_instance_ = NULL;

MsgLogSupplyState* MsgLogSupplyState::New() const {
  return new MsgLogSupplyState;
}

void MsgLogSupplyState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_pion_ = 0;
    chaine_activee_ = false;
    if (_has_bit(2)) {
      if (stocks_ != NULL) stocks_->::Common::SeqOfDotationStock::Clear();
    }
    if (_has_bit(3)) {
      if (disponibilites_transporteurs_convois_ != NULL) disponibilites_transporteurs_convois_->::MsgsSimToClient::SeqOfLogSupplyEquimentAvailability::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 oid_pion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_pion_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_chaine_activee;
        break;
      }
      
      // optional bool chaine_activee = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_chaine_activee:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &chaine_activee_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_stocks;
        break;
      }
      
      // optional .Common.SeqOfDotationStock stocks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stocks:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stocks()));
        if (input->ExpectTag(34)) goto parse_disponibilites_transporteurs_convois;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfLogSupplyEquimentAvailability disponibilites_transporteurs_convois = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_disponibilites_transporteurs_convois:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_disponibilites_transporteurs_convois()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyState::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 oid_pion = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_pion(), output);
  }
  
  // optional bool chaine_activee = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chaine_activee(), output);
  }
  
  // optional .Common.SeqOfDotationStock stocks = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->stocks(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfLogSupplyEquimentAvailability disponibilites_transporteurs_convois = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->disponibilites_transporteurs_convois(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 oid_pion = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_pion(), target);
  }
  
  // optional bool chaine_activee = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chaine_activee(), target);
  }
  
  // optional .Common.SeqOfDotationStock stocks = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stocks(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfLogSupplyEquimentAvailability disponibilites_transporteurs_convois = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->disponibilites_transporteurs_convois(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 oid_pion = 1;
    if (has_oid_pion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_pion());
    }
    
    // optional bool chaine_activee = 2;
    if (has_chaine_activee()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.SeqOfDotationStock stocks = 3;
    if (has_stocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stocks());
    }
    
    // optional .MsgsSimToClient.SeqOfLogSupplyEquimentAvailability disponibilites_transporteurs_convois = 4;
    if (has_disponibilites_transporteurs_convois()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disponibilites_transporteurs_convois());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyState::MergeFrom(const MsgLogSupplyState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_pion(from.oid_pion());
    }
    if (from._has_bit(1)) {
      set_chaine_activee(from.chaine_activee());
    }
    if (from._has_bit(2)) {
      mutable_stocks()->::Common::SeqOfDotationStock::MergeFrom(from.stocks());
    }
    if (from._has_bit(3)) {
      mutable_disponibilites_transporteurs_convois()->::MsgsSimToClient::SeqOfLogSupplyEquimentAvailability::MergeFrom(from.disponibilites_transporteurs_convois());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyState::CopyFrom(const MsgLogSupplyState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyState::IsInitialized() const {
  
  if (has_stocks()) {
    if (!this->stocks().IsInitialized()) return false;
  }
  return true;
}

void MsgLogSupplyState::Swap(MsgLogSupplyState* other) {
  if (other != this) {
    std::swap(oid_pion_, other->oid_pion_);
    std::swap(chaine_activee_, other->chaine_activee_);
    std::swap(stocks_, other->stocks_);
    std::swap(disponibilites_transporteurs_convois_, other->disponibilites_transporteurs_convois_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyState_descriptor_;
  metadata.reflection = MsgLogSupplyState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogSupplyQuotas::kOidAutomateFieldNumber;
const int MsgLogSupplyQuotas::kQuotasFieldNumber;
#endif  // !_MSC_VER

MsgLogSupplyQuotas::MsgLogSupplyQuotas() {
  SharedCtor();
}

void MsgLogSupplyQuotas::InitAsDefaultInstance() {
  quotas_ = const_cast< ::Common::SeqOfDotationQuota*>(&::Common::SeqOfDotationQuota::default_instance());
}

MsgLogSupplyQuotas::MsgLogSupplyQuotas(const MsgLogSupplyQuotas& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogSupplyQuotas::SharedCtor() {
  _cached_size_ = 0;
  oid_automate_ = 0;
  quotas_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogSupplyQuotas::~MsgLogSupplyQuotas() {
  SharedDtor();
}

void MsgLogSupplyQuotas::SharedDtor() {
  if (this != default_instance_) {
    delete quotas_;
  }
}

const ::google::protobuf::Descriptor* MsgLogSupplyQuotas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogSupplyQuotas_descriptor_;
}

const MsgLogSupplyQuotas& MsgLogSupplyQuotas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgLogSupplyQuotas* MsgLogSupplyQuotas::default_instance_ = NULL;

MsgLogSupplyQuotas* MsgLogSupplyQuotas::New() const {
  return new MsgLogSupplyQuotas;
}

void MsgLogSupplyQuotas::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_automate_ = 0;
    if (_has_bit(1)) {
      if (quotas_ != NULL) quotas_->::Common::SeqOfDotationQuota::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogSupplyQuotas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_automate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_automate_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_quotas;
        break;
      }
      
      // required .Common.SeqOfDotationQuota quotas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_quotas:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_quotas()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogSupplyQuotas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogSupplyQuotas::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_automate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_automate(), output);
  }
  
  // required .Common.SeqOfDotationQuota quotas = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->quotas(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogSupplyQuotas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_automate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_automate(), target);
  }
  
  // required .Common.SeqOfDotationQuota quotas = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quotas(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogSupplyQuotas::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_automate = 1;
    if (has_oid_automate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_automate());
    }
    
    // required .Common.SeqOfDotationQuota quotas = 2;
    if (has_quotas()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotas());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogSupplyQuotas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogSupplyQuotas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogSupplyQuotas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogSupplyQuotas::MergeFrom(const MsgLogSupplyQuotas& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_automate(from.oid_automate());
    }
    if (from._has_bit(1)) {
      mutable_quotas()->::Common::SeqOfDotationQuota::MergeFrom(from.quotas());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogSupplyQuotas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogSupplyQuotas::CopyFrom(const MsgLogSupplyQuotas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogSupplyQuotas::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_quotas()) {
    if (!this->quotas().IsInitialized()) return false;
  }
  return true;
}

void MsgLogSupplyQuotas::Swap(MsgLogSupplyQuotas* other) {
  if (other != this) {
    std::swap(oid_automate_, other->oid_automate_);
    std::swap(quotas_, other->quotas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogSupplyQuotas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogSupplyQuotas_descriptor_;
  metadata.reflection = MsgLogSupplyQuotas_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgPopulationCreation::_default_nom_;
#ifndef _MSC_VER
const int MsgPopulationCreation::kOidFieldNumber;
const int MsgPopulationCreation::kTypePopulationFieldNumber;
const int MsgPopulationCreation::kNomFieldNumber;
const int MsgPopulationCreation::kOidCampFieldNumber;
#endif  // !_MSC_VER

MsgPopulationCreation::MsgPopulationCreation() {
  SharedCtor();
}

void MsgPopulationCreation::InitAsDefaultInstance() {
}

MsgPopulationCreation::MsgPopulationCreation(const MsgPopulationCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  type_population_ = 0;
  nom_ = const_cast< ::std::string*>(&_default_nom_);
  oid_camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationCreation::~MsgPopulationCreation() {
  SharedDtor();
}

void MsgPopulationCreation::SharedDtor() {
  if (nom_ != &_default_nom_) {
    delete nom_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationCreation_descriptor_;
}

const MsgPopulationCreation& MsgPopulationCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationCreation* MsgPopulationCreation::default_instance_ = NULL;

MsgPopulationCreation* MsgPopulationCreation::New() const {
  return new MsgPopulationCreation;
}

void MsgPopulationCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    type_population_ = 0;
    if (_has_bit(2)) {
      if (nom_ != &_default_nom_) {
        nom_->clear();
      }
    }
    oid_camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_type_population;
        break;
      }
      
      // required int32 type_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &type_population_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_nom;
        break;
      }
      
      // optional string nom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nom:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_nom()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->nom().data(), this->nom().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_oid_camp;
        break;
      }
      
      // required int32 oid_camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_camp_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 type_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_population(), output);
  }
  
  // optional string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nom(), output);
  }
  
  // required int32 oid_camp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_camp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 type_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_population(), target);
  }
  
  // optional string nom = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nom().data(), this->nom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->nom(), target);
  }
  
  // required int32 oid_camp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_camp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 type_population = 2;
    if (has_type_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_population());
    }
    
    // optional string nom = 3;
    if (has_nom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nom());
    }
    
    // required int32 oid_camp = 4;
    if (has_oid_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_camp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationCreation::MergeFrom(const MsgPopulationCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_type_population(from.type_population());
    }
    if (from._has_bit(2)) {
      set_nom(from.nom());
    }
    if (from._has_bit(3)) {
      set_oid_camp(from.oid_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationCreation::CopyFrom(const MsgPopulationCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void MsgPopulationCreation::Swap(MsgPopulationCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(type_population_, other->type_population_);
    std::swap(nom_, other->nom_);
    std::swap(oid_camp_, other->oid_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationCreation_descriptor_;
  metadata.reflection = MsgPopulationCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationUpdate::kOidFieldNumber;
const int MsgPopulationUpdate::kEtatDominationFieldNumber;
#endif  // !_MSC_VER

MsgPopulationUpdate::MsgPopulationUpdate() {
  SharedCtor();
}

void MsgPopulationUpdate::InitAsDefaultInstance() {
}

MsgPopulationUpdate::MsgPopulationUpdate(const MsgPopulationUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  etat_domination_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationUpdate::~MsgPopulationUpdate() {
  SharedDtor();
}

void MsgPopulationUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationUpdate_descriptor_;
}

const MsgPopulationUpdate& MsgPopulationUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationUpdate* MsgPopulationUpdate::default_instance_ = NULL;

MsgPopulationUpdate* MsgPopulationUpdate::New() const {
  return new MsgPopulationUpdate;
}

void MsgPopulationUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    etat_domination_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_etat_domination;
        break;
      }
      
      // optional int32 etat_domination = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_domination:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &etat_domination_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // optional int32 etat_domination = 2 [default = 0];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->etat_domination(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // optional int32 etat_domination = 2 [default = 0];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->etat_domination(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // optional int32 etat_domination = 2 [default = 0];
    if (has_etat_domination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etat_domination());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationUpdate::MergeFrom(const MsgPopulationUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_etat_domination(from.etat_domination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationUpdate::CopyFrom(const MsgPopulationUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgPopulationUpdate::Swap(MsgPopulationUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(etat_domination_, other->etat_domination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationUpdate_descriptor_;
  metadata.reflection = MsgPopulationUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationCreation::kOidFieldNumber;
const int MsgPopulationConcentrationCreation::kOidPopulationFieldNumber;
const int MsgPopulationConcentrationCreation::kPositionFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationCreation::MsgPopulationConcentrationCreation() {
  SharedCtor();
}

void MsgPopulationConcentrationCreation::InitAsDefaultInstance() {
  position_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
}

MsgPopulationConcentrationCreation::MsgPopulationConcentrationCreation(const MsgPopulationConcentrationCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationCreation::~MsgPopulationConcentrationCreation() {
  SharedDtor();
}

void MsgPopulationConcentrationCreation::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationCreation_descriptor_;
}

const MsgPopulationConcentrationCreation& MsgPopulationConcentrationCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationCreation* MsgPopulationConcentrationCreation::default_instance_ = NULL;

MsgPopulationConcentrationCreation* MsgPopulationConcentrationCreation::New() const {
  return new MsgPopulationConcentrationCreation;
}

void MsgPopulationConcentrationCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
    if (_has_bit(2)) {
      if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_position;
        break;
      }
      
      // required .Common.MsgCoordLatLong position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  // required .Common.MsgCoordLatLong position = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  // required .Common.MsgCoordLatLong position = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
    // required .Common.MsgCoordLatLong position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationCreation::MergeFrom(const MsgPopulationConcentrationCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
    if (from._has_bit(2)) {
      mutable_position()->::Common::MsgCoordLatLong::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationCreation::CopyFrom(const MsgPopulationConcentrationCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationConcentrationCreation::Swap(MsgPopulationConcentrationCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationCreation_descriptor_;
  metadata.reflection = MsgPopulationConcentrationCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationDestruction::kOidFieldNumber;
const int MsgPopulationConcentrationDestruction::kOidPopulationFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationDestruction::MsgPopulationConcentrationDestruction() {
  SharedCtor();
}

void MsgPopulationConcentrationDestruction::InitAsDefaultInstance() {
}

MsgPopulationConcentrationDestruction::MsgPopulationConcentrationDestruction(const MsgPopulationConcentrationDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationDestruction::~MsgPopulationConcentrationDestruction() {
  SharedDtor();
}

void MsgPopulationConcentrationDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationDestruction_descriptor_;
}

const MsgPopulationConcentrationDestruction& MsgPopulationConcentrationDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationDestruction* MsgPopulationConcentrationDestruction::default_instance_ = NULL;

MsgPopulationConcentrationDestruction* MsgPopulationConcentrationDestruction::New() const {
  return new MsgPopulationConcentrationDestruction;
}

void MsgPopulationConcentrationDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationDestruction::MergeFrom(const MsgPopulationConcentrationDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationDestruction::CopyFrom(const MsgPopulationConcentrationDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationConcentrationDestruction::Swap(MsgPopulationConcentrationDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationDestruction_descriptor_;
  metadata.reflection = MsgPopulationConcentrationDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationUpdate::kOidFieldNumber;
const int MsgPopulationConcentrationUpdate::kOidPopulationFieldNumber;
const int MsgPopulationConcentrationUpdate::kNbHumainsVivantsFieldNumber;
const int MsgPopulationConcentrationUpdate::kNbHumainsMortsFieldNumber;
const int MsgPopulationConcentrationUpdate::kAttitudeFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationUpdate::MsgPopulationConcentrationUpdate() {
  SharedCtor();
}

void MsgPopulationConcentrationUpdate::InitAsDefaultInstance() {
}

MsgPopulationConcentrationUpdate::MsgPopulationConcentrationUpdate(const MsgPopulationConcentrationUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  nb_humains_vivants_ = 0;
  nb_humains_morts_ = 0;
  attitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationUpdate::~MsgPopulationConcentrationUpdate() {
  SharedDtor();
}

void MsgPopulationConcentrationUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationUpdate_descriptor_;
}

const MsgPopulationConcentrationUpdate& MsgPopulationConcentrationUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationUpdate* MsgPopulationConcentrationUpdate::default_instance_ = NULL;

MsgPopulationConcentrationUpdate* MsgPopulationConcentrationUpdate::New() const {
  return new MsgPopulationConcentrationUpdate;
}

void MsgPopulationConcentrationUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
    nb_humains_vivants_ = 0;
    nb_humains_morts_ = 0;
    attitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_nb_humains_vivants;
        break;
      }
      
      // optional int32 nb_humains_vivants = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_vivants:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_vivants_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_nb_humains_morts;
        break;
      }
      
      // optional int32 nb_humains_morts = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_morts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_morts_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_attitude;
        break;
      }
      
      // optional .Common.EnumPopulationAttitude attitude = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attitude:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumPopulationAttitude_IsValid(value)) {
          set_attitude(static_cast< Common::EnumPopulationAttitude >(value));
        } else {
          mutable_unknown_fields()->AddVarint(5, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  // optional int32 nb_humains_vivants = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nb_humains_vivants(), output);
  }
  
  // optional int32 nb_humains_morts = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nb_humains_morts(), output);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->attitude(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  // optional int32 nb_humains_vivants = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nb_humains_vivants(), target);
  }
  
  // optional int32 nb_humains_morts = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nb_humains_morts(), target);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->attitude(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
    // optional int32 nb_humains_vivants = 3 [default = 0];
    if (has_nb_humains_vivants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_vivants());
    }
    
    // optional int32 nb_humains_morts = 4 [default = 0];
    if (has_nb_humains_morts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_morts());
    }
    
    // optional .Common.EnumPopulationAttitude attitude = 5;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attitude());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationUpdate::MergeFrom(const MsgPopulationConcentrationUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
    if (from._has_bit(2)) {
      set_nb_humains_vivants(from.nb_humains_vivants());
    }
    if (from._has_bit(3)) {
      set_nb_humains_morts(from.nb_humains_morts());
    }
    if (from._has_bit(4)) {
      set_attitude(from.attitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationUpdate::CopyFrom(const MsgPopulationConcentrationUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationConcentrationUpdate::Swap(MsgPopulationConcentrationUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(nb_humains_vivants_, other->nb_humains_vivants_);
    std::swap(nb_humains_morts_, other->nb_humains_morts_);
    std::swap(attitude_, other->attitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationUpdate_descriptor_;
  metadata.reflection = MsgPopulationConcentrationUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowCreation::kOidFieldNumber;
const int MsgPopulationFlowCreation::kOidPopulationFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowCreation::MsgPopulationFlowCreation() {
  SharedCtor();
}

void MsgPopulationFlowCreation::InitAsDefaultInstance() {
}

MsgPopulationFlowCreation::MsgPopulationFlowCreation(const MsgPopulationFlowCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowCreation::~MsgPopulationFlowCreation() {
  SharedDtor();
}

void MsgPopulationFlowCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowCreation_descriptor_;
}

const MsgPopulationFlowCreation& MsgPopulationFlowCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowCreation* MsgPopulationFlowCreation::default_instance_ = NULL;

MsgPopulationFlowCreation* MsgPopulationFlowCreation::New() const {
  return new MsgPopulationFlowCreation;
}

void MsgPopulationFlowCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowCreation::MergeFrom(const MsgPopulationFlowCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowCreation::CopyFrom(const MsgPopulationFlowCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationFlowCreation::Swap(MsgPopulationFlowCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowCreation_descriptor_;
  metadata.reflection = MsgPopulationFlowCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowDestruction::kOidFieldNumber;
const int MsgPopulationFlowDestruction::kOidPopulationFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowDestruction::MsgPopulationFlowDestruction() {
  SharedCtor();
}

void MsgPopulationFlowDestruction::InitAsDefaultInstance() {
}

MsgPopulationFlowDestruction::MsgPopulationFlowDestruction(const MsgPopulationFlowDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowDestruction::~MsgPopulationFlowDestruction() {
  SharedDtor();
}

void MsgPopulationFlowDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowDestruction_descriptor_;
}

const MsgPopulationFlowDestruction& MsgPopulationFlowDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowDestruction* MsgPopulationFlowDestruction::default_instance_ = NULL;

MsgPopulationFlowDestruction* MsgPopulationFlowDestruction::New() const {
  return new MsgPopulationFlowDestruction;
}

void MsgPopulationFlowDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowDestruction::MergeFrom(const MsgPopulationFlowDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowDestruction::CopyFrom(const MsgPopulationFlowDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationFlowDestruction::Swap(MsgPopulationFlowDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowDestruction_descriptor_;
  metadata.reflection = MsgPopulationFlowDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowUpdate::kOidFieldNumber;
const int MsgPopulationFlowUpdate::kOidPopulationFieldNumber;
const int MsgPopulationFlowUpdate::kItineraireFieldNumber;
const int MsgPopulationFlowUpdate::kFluxFieldNumber;
const int MsgPopulationFlowUpdate::kDirectionFieldNumber;
const int MsgPopulationFlowUpdate::kVitesseFieldNumber;
const int MsgPopulationFlowUpdate::kNbHumainsVivantsFieldNumber;
const int MsgPopulationFlowUpdate::kNbHumainsMortsFieldNumber;
const int MsgPopulationFlowUpdate::kAttitudeFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowUpdate::MsgPopulationFlowUpdate() {
  SharedCtor();
}

void MsgPopulationFlowUpdate::InitAsDefaultInstance() {
  itineraire_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
  flux_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
  direction_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
}

MsgPopulationFlowUpdate::MsgPopulationFlowUpdate(const MsgPopulationFlowUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  oid_population_ = 0;
  itineraire_ = NULL;
  flux_ = NULL;
  direction_ = NULL;
  vitesse_ = 0;
  nb_humains_vivants_ = 0;
  nb_humains_morts_ = 0;
  attitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowUpdate::~MsgPopulationFlowUpdate() {
  SharedDtor();
}

void MsgPopulationFlowUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete itineraire_;
    delete flux_;
    delete direction_;
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowUpdate_descriptor_;
}

const MsgPopulationFlowUpdate& MsgPopulationFlowUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowUpdate* MsgPopulationFlowUpdate::default_instance_ = NULL;

MsgPopulationFlowUpdate* MsgPopulationFlowUpdate::New() const {
  return new MsgPopulationFlowUpdate;
}

void MsgPopulationFlowUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    oid_population_ = 0;
    if (_has_bit(2)) {
      if (itineraire_ != NULL) itineraire_->::Common::MsgPath::Clear();
    }
    if (_has_bit(3)) {
      if (flux_ != NULL) flux_->::Common::MsgPath::Clear();
    }
    if (_has_bit(4)) {
      if (direction_ != NULL) direction_->::Common::MsgHeading::Clear();
    }
    vitesse_ = 0;
    nb_humains_vivants_ = 0;
    nb_humains_morts_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_population;
        break;
      }
      
      // required int32 oid_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_itineraire;
        break;
      }
      
      // optional .Common.MsgPath itineraire = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_itineraire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_itineraire()));
        if (input->ExpectTag(34)) goto parse_flux;
        break;
      }
      
      // optional .Common.MsgPath flux = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_flux:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_flux()));
        if (input->ExpectTag(42)) goto parse_direction;
        break;
      }
      
      // optional .Common.MsgHeading direction = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_direction()));
        if (input->ExpectTag(48)) goto parse_vitesse;
        break;
      }
      
      // optional int32 vitesse = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vitesse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vitesse_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_nb_humains_vivants;
        break;
      }
      
      // optional int32 nb_humains_vivants = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_vivants:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_vivants_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nb_humains_morts;
        break;
      }
      
      // optional int32 nb_humains_morts = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_morts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_morts_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_attitude;
        break;
      }
      
      // optional .Common.EnumPopulationAttitude attitude = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attitude:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumPopulationAttitude_IsValid(value)) {
          set_attitude(static_cast< Common::EnumPopulationAttitude >(value));
        } else {
          mutable_unknown_fields()->AddVarint(9, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_population(), output);
  }
  
  // optional .Common.MsgPath itineraire = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->itineraire(), output);
  }
  
  // optional .Common.MsgPath flux = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->flux(), output);
  }
  
  // optional .Common.MsgHeading direction = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->direction(), output);
  }
  
  // optional int32 vitesse = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vitesse(), output);
  }
  
  // optional int32 nb_humains_vivants = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nb_humains_vivants(), output);
  }
  
  // optional int32 nb_humains_morts = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nb_humains_morts(), output);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->attitude(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 oid_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_population(), target);
  }
  
  // optional .Common.MsgPath itineraire = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itineraire(), target);
  }
  
  // optional .Common.MsgPath flux = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->flux(), target);
  }
  
  // optional .Common.MsgHeading direction = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->direction(), target);
  }
  
  // optional int32 vitesse = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vitesse(), target);
  }
  
  // optional int32 nb_humains_vivants = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nb_humains_vivants(), target);
  }
  
  // optional int32 nb_humains_morts = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nb_humains_morts(), target);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->attitude(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 oid_population = 2;
    if (has_oid_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population());
    }
    
    // optional .Common.MsgPath itineraire = 3;
    if (has_itineraire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itineraire());
    }
    
    // optional .Common.MsgPath flux = 4;
    if (has_flux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flux());
    }
    
    // optional .Common.MsgHeading direction = 5;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
    // optional int32 vitesse = 6 [default = 0];
    if (has_vitesse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitesse());
    }
    
    // optional int32 nb_humains_vivants = 7 [default = 0];
    if (has_nb_humains_vivants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_vivants());
    }
    
    // optional int32 nb_humains_morts = 8 [default = 0];
    if (has_nb_humains_morts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_morts());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.EnumPopulationAttitude attitude = 9;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attitude());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowUpdate::MergeFrom(const MsgPopulationFlowUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_population(from.oid_population());
    }
    if (from._has_bit(2)) {
      mutable_itineraire()->::Common::MsgPath::MergeFrom(from.itineraire());
    }
    if (from._has_bit(3)) {
      mutable_flux()->::Common::MsgPath::MergeFrom(from.flux());
    }
    if (from._has_bit(4)) {
      mutable_direction()->::Common::MsgHeading::MergeFrom(from.direction());
    }
    if (from._has_bit(5)) {
      set_vitesse(from.vitesse());
    }
    if (from._has_bit(6)) {
      set_nb_humains_vivants(from.nb_humains_vivants());
    }
    if (from._has_bit(7)) {
      set_nb_humains_morts(from.nb_humains_morts());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_attitude(from.attitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowUpdate::CopyFrom(const MsgPopulationFlowUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_itineraire()) {
    if (!this->itineraire().IsInitialized()) return false;
  }
  if (has_flux()) {
    if (!this->flux().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationFlowUpdate::Swap(MsgPopulationFlowUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_population_, other->oid_population_);
    std::swap(itineraire_, other->itineraire_);
    std::swap(flux_, other->flux_);
    std::swap(direction_, other->direction_);
    std::swap(vitesse_, other->vitesse_);
    std::swap(nb_humains_vivants_, other->nb_humains_vivants_);
    std::swap(nb_humains_morts_, other->nb_humains_morts_);
    std::swap(attitude_, other->attitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowUpdate_descriptor_;
  metadata.reflection = MsgPopulationFlowUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationKnowledgeCreation::kOidConnaissanceFieldNumber;
const int MsgPopulationKnowledgeCreation::kOidGroupePossesseurFieldNumber;
const int MsgPopulationKnowledgeCreation::kOidPopulationReelleFieldNumber;
const int MsgPopulationKnowledgeCreation::kCampFieldNumber;
#endif  // !_MSC_VER

MsgPopulationKnowledgeCreation::MsgPopulationKnowledgeCreation() {
  SharedCtor();
}

void MsgPopulationKnowledgeCreation::InitAsDefaultInstance() {
}

MsgPopulationKnowledgeCreation::MsgPopulationKnowledgeCreation(const MsgPopulationKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_population_reelle_ = 0;
  camp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationKnowledgeCreation::~MsgPopulationKnowledgeCreation() {
  SharedDtor();
}

void MsgPopulationKnowledgeCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationKnowledgeCreation_descriptor_;
}

const MsgPopulationKnowledgeCreation& MsgPopulationKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationKnowledgeCreation* MsgPopulationKnowledgeCreation::default_instance_ = NULL;

MsgPopulationKnowledgeCreation* MsgPopulationKnowledgeCreation::New() const {
  return new MsgPopulationKnowledgeCreation;
}

void MsgPopulationKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_population_reelle_ = 0;
    camp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_population_reelle;
        break;
      }
      
      // optional int32 oid_population_reelle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_population_reelle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_population_reelle_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_camp;
        break;
      }
      
      // optional int32 camp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &camp_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 oid_population_reelle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_population_reelle(), output);
  }
  
  // optional int32 camp = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->camp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 oid_population_reelle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_population_reelle(), target);
  }
  
  // optional int32 camp = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->camp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance = 1;
    if (has_oid_connaissance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 oid_population_reelle = 3;
    if (has_oid_population_reelle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_population_reelle());
    }
    
    // optional int32 camp = 4;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationKnowledgeCreation::MergeFrom(const MsgPopulationKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance(from.oid_connaissance());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(2)) {
      set_oid_population_reelle(from.oid_population_reelle());
    }
    if (from._has_bit(3)) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationKnowledgeCreation::CopyFrom(const MsgPopulationKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationKnowledgeCreation::Swap(MsgPopulationKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_connaissance_, other->oid_connaissance_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_population_reelle_, other->oid_population_reelle_);
    std::swap(camp_, other->camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationKnowledgeCreation_descriptor_;
  metadata.reflection = MsgPopulationKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationKnowledgeUpdate::kOidConnaissanceFieldNumber;
const int MsgPopulationKnowledgeUpdate::kOidGroupePossesseurFieldNumber;
const int MsgPopulationKnowledgeUpdate::kEtatDominationFieldNumber;
#endif  // !_MSC_VER

MsgPopulationKnowledgeUpdate::MsgPopulationKnowledgeUpdate() {
  SharedCtor();
}

void MsgPopulationKnowledgeUpdate::InitAsDefaultInstance() {
}

MsgPopulationKnowledgeUpdate::MsgPopulationKnowledgeUpdate(const MsgPopulationKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_ = 0;
  oid_groupe_possesseur_ = 0;
  etat_domination_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationKnowledgeUpdate::~MsgPopulationKnowledgeUpdate() {
  SharedDtor();
}

void MsgPopulationKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationKnowledgeUpdate_descriptor_;
}

const MsgPopulationKnowledgeUpdate& MsgPopulationKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationKnowledgeUpdate* MsgPopulationKnowledgeUpdate::default_instance_ = NULL;

MsgPopulationKnowledgeUpdate* MsgPopulationKnowledgeUpdate::New() const {
  return new MsgPopulationKnowledgeUpdate;
}

void MsgPopulationKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_ = 0;
    oid_groupe_possesseur_ = 0;
    etat_domination_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_etat_domination;
        break;
      }
      
      // optional int32 etat_domination = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_etat_domination:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &etat_domination_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 etat_domination = 3 [default = 0];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->etat_domination(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 etat_domination = 3 [default = 0];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->etat_domination(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance = 1;
    if (has_oid_connaissance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 etat_domination = 3 [default = 0];
    if (has_etat_domination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->etat_domination());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationKnowledgeUpdate::MergeFrom(const MsgPopulationKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance(from.oid_connaissance());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(2)) {
      set_etat_domination(from.etat_domination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationKnowledgeUpdate::CopyFrom(const MsgPopulationKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationKnowledgeUpdate::Swap(MsgPopulationKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_connaissance_, other->oid_connaissance_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(etat_domination_, other->etat_domination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgPopulationKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationKnowledgeDestruction::kOidConnaissanceFieldNumber;
const int MsgPopulationKnowledgeDestruction::kOidGroupePossesseurFieldNumber;
#endif  // !_MSC_VER

MsgPopulationKnowledgeDestruction::MsgPopulationKnowledgeDestruction() {
  SharedCtor();
}

void MsgPopulationKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgPopulationKnowledgeDestruction::MsgPopulationKnowledgeDestruction(const MsgPopulationKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_ = 0;
  oid_groupe_possesseur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationKnowledgeDestruction::~MsgPopulationKnowledgeDestruction() {
  SharedDtor();
}

void MsgPopulationKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationKnowledgeDestruction_descriptor_;
}

const MsgPopulationKnowledgeDestruction& MsgPopulationKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationKnowledgeDestruction* MsgPopulationKnowledgeDestruction::default_instance_ = NULL;

MsgPopulationKnowledgeDestruction* MsgPopulationKnowledgeDestruction::New() const {
  return new MsgPopulationKnowledgeDestruction;
}

void MsgPopulationKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_ = 0;
    oid_groupe_possesseur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance(), output);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_groupe_possesseur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance(), target);
  }
  
  // required int32 oid_groupe_possesseur = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_groupe_possesseur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance = 1;
    if (has_oid_connaissance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance());
    }
    
    // required int32 oid_groupe_possesseur = 2;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationKnowledgeDestruction::MergeFrom(const MsgPopulationKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance(from.oid_connaissance());
    }
    if (from._has_bit(1)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationKnowledgeDestruction::CopyFrom(const MsgPopulationKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPopulationKnowledgeDestruction::Swap(MsgPopulationKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_connaissance_, other->oid_connaissance_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgPopulationKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationKnowledgeCreation::kOidConnaissanceConcentrationFieldNumber;
const int MsgPopulationConcentrationKnowledgeCreation::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationConcentrationKnowledgeCreation::kOidGroupePossesseurFieldNumber;
const int MsgPopulationConcentrationKnowledgeCreation::kOidConcentrationReelleFieldNumber;
const int MsgPopulationConcentrationKnowledgeCreation::kPositionFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationKnowledgeCreation::MsgPopulationConcentrationKnowledgeCreation() {
  SharedCtor();
}

void MsgPopulationConcentrationKnowledgeCreation::InitAsDefaultInstance() {
  position_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
}

MsgPopulationConcentrationKnowledgeCreation::MsgPopulationConcentrationKnowledgeCreation(const MsgPopulationConcentrationKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_concentration_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_concentration_reelle_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationKnowledgeCreation::~MsgPopulationConcentrationKnowledgeCreation() {
  SharedDtor();
}

void MsgPopulationConcentrationKnowledgeCreation::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationKnowledgeCreation_descriptor_;
}

const MsgPopulationConcentrationKnowledgeCreation& MsgPopulationConcentrationKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationKnowledgeCreation* MsgPopulationConcentrationKnowledgeCreation::default_instance_ = NULL;

MsgPopulationConcentrationKnowledgeCreation* MsgPopulationConcentrationKnowledgeCreation::New() const {
  return new MsgPopulationConcentrationKnowledgeCreation;
}

void MsgPopulationConcentrationKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_concentration_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_concentration_reelle_ = 0;
    if (_has_bit(4)) {
      if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_concentration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_concentration_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_oid_concentration_reelle;
        break;
      }
      
      // optional int32 oid_concentration_reelle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_concentration_reelle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_concentration_reelle_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_position;
        break;
      }
      
      // optional .Common.MsgCoordLatLong position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_concentration(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 oid_concentration_reelle = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_concentration_reelle(), output);
  }
  
  // optional .Common.MsgCoordLatLong position = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_concentration(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 oid_concentration_reelle = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_concentration_reelle(), target);
  }
  
  // optional .Common.MsgCoordLatLong position = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_concentration = 1;
    if (has_oid_connaissance_concentration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_concentration());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 oid_concentration_reelle = 4;
    if (has_oid_concentration_reelle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_concentration_reelle());
    }
    
    // optional .Common.MsgCoordLatLong position = 5;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationKnowledgeCreation::MergeFrom(const MsgPopulationConcentrationKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_concentration(from.oid_connaissance_concentration());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(3)) {
      set_oid_concentration_reelle(from.oid_concentration_reelle());
    }
    if (from._has_bit(4)) {
      mutable_position()->::Common::MsgCoordLatLong::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeCreation::CopyFrom(const MsgPopulationConcentrationKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationConcentrationKnowledgeCreation::Swap(MsgPopulationConcentrationKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_connaissance_concentration_, other->oid_connaissance_concentration_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_concentration_reelle_, other->oid_concentration_reelle_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationKnowledgeCreation_descriptor_;
  metadata.reflection = MsgPopulationConcentrationKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationKnowledgeDestruction::kOidConnaissanceConcentrationFieldNumber;
const int MsgPopulationConcentrationKnowledgeDestruction::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationConcentrationKnowledgeDestruction::kOidGroupePossesseurFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationKnowledgeDestruction::MsgPopulationConcentrationKnowledgeDestruction() {
  SharedCtor();
}

void MsgPopulationConcentrationKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgPopulationConcentrationKnowledgeDestruction::MsgPopulationConcentrationKnowledgeDestruction(const MsgPopulationConcentrationKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_concentration_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationKnowledgeDestruction::~MsgPopulationConcentrationKnowledgeDestruction() {
  SharedDtor();
}

void MsgPopulationConcentrationKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationKnowledgeDestruction_descriptor_;
}

const MsgPopulationConcentrationKnowledgeDestruction& MsgPopulationConcentrationKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationKnowledgeDestruction* MsgPopulationConcentrationKnowledgeDestruction::default_instance_ = NULL;

MsgPopulationConcentrationKnowledgeDestruction* MsgPopulationConcentrationKnowledgeDestruction::New() const {
  return new MsgPopulationConcentrationKnowledgeDestruction;
}

void MsgPopulationConcentrationKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_concentration_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_concentration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_concentration_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_concentration(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_concentration(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_concentration = 1;
    if (has_oid_connaissance_concentration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_concentration());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationKnowledgeDestruction::MergeFrom(const MsgPopulationConcentrationKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_concentration(from.oid_connaissance_concentration());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeDestruction::CopyFrom(const MsgPopulationConcentrationKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgPopulationConcentrationKnowledgeDestruction::Swap(MsgPopulationConcentrationKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_connaissance_concentration_, other->oid_connaissance_concentration_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgPopulationConcentrationKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationConcentrationKnowledgeUpdate::kOidConnaissanceConcentrationFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kOidGroupePossesseurFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kOidConcentrationReelleFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kNbHumainsVivantsFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kNbHumainsMortsFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kAttitudeFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kPertinenceFieldNumber;
const int MsgPopulationConcentrationKnowledgeUpdate::kEstPercuFieldNumber;
#endif  // !_MSC_VER

MsgPopulationConcentrationKnowledgeUpdate::MsgPopulationConcentrationKnowledgeUpdate() {
  SharedCtor();
}

void MsgPopulationConcentrationKnowledgeUpdate::InitAsDefaultInstance() {
}

MsgPopulationConcentrationKnowledgeUpdate::MsgPopulationConcentrationKnowledgeUpdate(const MsgPopulationConcentrationKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_concentration_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_concentration_reelle_ = 0;
  nb_humains_vivants_ = 0;
  nb_humains_morts_ = 0;
  attitude_ = 0;
  pertinence_ = 0;
  est_percu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationConcentrationKnowledgeUpdate::~MsgPopulationConcentrationKnowledgeUpdate() {
  SharedDtor();
}

void MsgPopulationConcentrationKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationConcentrationKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationConcentrationKnowledgeUpdate_descriptor_;
}

const MsgPopulationConcentrationKnowledgeUpdate& MsgPopulationConcentrationKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationConcentrationKnowledgeUpdate* MsgPopulationConcentrationKnowledgeUpdate::default_instance_ = NULL;

MsgPopulationConcentrationKnowledgeUpdate* MsgPopulationConcentrationKnowledgeUpdate::New() const {
  return new MsgPopulationConcentrationKnowledgeUpdate;
}

void MsgPopulationConcentrationKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_concentration_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_concentration_reelle_ = 0;
    nb_humains_vivants_ = 0;
    nb_humains_morts_ = 0;
    attitude_ = 0;
    pertinence_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    est_percu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationConcentrationKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_concentration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_concentration_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_oid_concentration_reelle;
        break;
      }
      
      // optional int32 oid_concentration_reelle = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_concentration_reelle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_concentration_reelle_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_nb_humains_vivants;
        break;
      }
      
      // optional int32 nb_humains_vivants = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_vivants:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_vivants_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_nb_humains_morts;
        break;
      }
      
      // optional int32 nb_humains_morts = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_morts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_morts_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_attitude;
        break;
      }
      
      // optional .Common.EnumPopulationAttitude attitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attitude:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumPopulationAttitude_IsValid(value)) {
          set_attitude(static_cast< Common::EnumPopulationAttitude >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_pertinence;
        break;
      }
      
      // optional int32 pertinence = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pertinence:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pertinence_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_est_percu;
        break;
      }
      
      // optional bool est_percu = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_est_percu:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &est_percu_));
        _set_bit(8);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationConcentrationKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationConcentrationKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_concentration(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 oid_concentration_reelle = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_concentration_reelle(), output);
  }
  
  // optional int32 nb_humains_vivants = 5 [default = 0];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nb_humains_vivants(), output);
  }
  
  // optional int32 nb_humains_morts = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nb_humains_morts(), output);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->attitude(), output);
  }
  
  // optional int32 pertinence = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pertinence(), output);
  }
  
  // optional bool est_percu = 9 [default = false];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->est_percu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationConcentrationKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_concentration = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_concentration(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 oid_concentration_reelle = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_concentration_reelle(), target);
  }
  
  // optional int32 nb_humains_vivants = 5 [default = 0];
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nb_humains_vivants(), target);
  }
  
  // optional int32 nb_humains_morts = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nb_humains_morts(), target);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->attitude(), target);
  }
  
  // optional int32 pertinence = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pertinence(), target);
  }
  
  // optional bool est_percu = 9 [default = false];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->est_percu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationConcentrationKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_concentration = 1;
    if (has_oid_connaissance_concentration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_concentration());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 oid_concentration_reelle = 4 [default = 0];
    if (has_oid_concentration_reelle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_concentration_reelle());
    }
    
    // optional int32 nb_humains_vivants = 5 [default = 0];
    if (has_nb_humains_vivants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_vivants());
    }
    
    // optional int32 nb_humains_morts = 6 [default = 0];
    if (has_nb_humains_morts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_morts());
    }
    
    // optional .Common.EnumPopulationAttitude attitude = 7;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attitude());
    }
    
    // optional int32 pertinence = 8 [default = 0];
    if (has_pertinence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pertinence());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool est_percu = 9 [default = false];
    if (has_est_percu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationConcentrationKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationConcentrationKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationConcentrationKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationConcentrationKnowledgeUpdate::MergeFrom(const MsgPopulationConcentrationKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_concentration(from.oid_connaissance_concentration());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(3)) {
      set_oid_concentration_reelle(from.oid_concentration_reelle());
    }
    if (from._has_bit(4)) {
      set_nb_humains_vivants(from.nb_humains_vivants());
    }
    if (from._has_bit(5)) {
      set_nb_humains_morts(from.nb_humains_morts());
    }
    if (from._has_bit(6)) {
      set_attitude(from.attitude());
    }
    if (from._has_bit(7)) {
      set_pertinence(from.pertinence());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_est_percu(from.est_percu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationConcentrationKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationConcentrationKnowledgeUpdate::CopyFrom(const MsgPopulationConcentrationKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationConcentrationKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgPopulationConcentrationKnowledgeUpdate::Swap(MsgPopulationConcentrationKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_connaissance_concentration_, other->oid_connaissance_concentration_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_concentration_reelle_, other->oid_concentration_reelle_);
    std::swap(nb_humains_vivants_, other->nb_humains_vivants_);
    std::swap(nb_humains_morts_, other->nb_humains_morts_);
    std::swap(attitude_, other->attitude_);
    std::swap(pertinence_, other->pertinence_);
    std::swap(est_percu_, other->est_percu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationConcentrationKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationConcentrationKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgPopulationConcentrationKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowKnowledgeCreation::kOidConnaissanceFluxFieldNumber;
const int MsgPopulationFlowKnowledgeCreation::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationFlowKnowledgeCreation::kOidGroupePossesseurFieldNumber;
const int MsgPopulationFlowKnowledgeCreation::kOidFluxReelFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowKnowledgeCreation::MsgPopulationFlowKnowledgeCreation() {
  SharedCtor();
}

void MsgPopulationFlowKnowledgeCreation::InitAsDefaultInstance() {
}

MsgPopulationFlowKnowledgeCreation::MsgPopulationFlowKnowledgeCreation(const MsgPopulationFlowKnowledgeCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_flux_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_flux_reel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowKnowledgeCreation::~MsgPopulationFlowKnowledgeCreation() {
  SharedDtor();
}

void MsgPopulationFlowKnowledgeCreation::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowKnowledgeCreation_descriptor_;
}

const MsgPopulationFlowKnowledgeCreation& MsgPopulationFlowKnowledgeCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowKnowledgeCreation* MsgPopulationFlowKnowledgeCreation::default_instance_ = NULL;

MsgPopulationFlowKnowledgeCreation* MsgPopulationFlowKnowledgeCreation::New() const {
  return new MsgPopulationFlowKnowledgeCreation;
}

void MsgPopulationFlowKnowledgeCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_flux_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_flux_reel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowKnowledgeCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_flux = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_flux_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_oid_flux_reel;
        break;
      }
      
      // required int32 oid_flux_reel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_flux_reel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_flux_reel_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowKnowledgeCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowKnowledgeCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_flux(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  // required int32 oid_flux_reel = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_flux_reel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowKnowledgeCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_flux(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  // required int32 oid_flux_reel = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_flux_reel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowKnowledgeCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_flux = 1;
    if (has_oid_connaissance_flux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_flux());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // required int32 oid_flux_reel = 4;
    if (has_oid_flux_reel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_flux_reel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowKnowledgeCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowKnowledgeCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowKnowledgeCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowKnowledgeCreation::MergeFrom(const MsgPopulationFlowKnowledgeCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_flux(from.oid_connaissance_flux());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(3)) {
      set_oid_flux_reel(from.oid_flux_reel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowKnowledgeCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeCreation::CopyFrom(const MsgPopulationFlowKnowledgeCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowKnowledgeCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgPopulationFlowKnowledgeCreation::Swap(MsgPopulationFlowKnowledgeCreation* other) {
  if (other != this) {
    std::swap(oid_connaissance_flux_, other->oid_connaissance_flux_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_flux_reel_, other->oid_flux_reel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowKnowledgeCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowKnowledgeCreation_descriptor_;
  metadata.reflection = MsgPopulationFlowKnowledgeCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFlowPart::kFormeFieldNumber;
const int MsgFlowPart::kPertinenceFieldNumber;
#endif  // !_MSC_VER

MsgFlowPart::MsgFlowPart() {
  SharedCtor();
}

void MsgFlowPart::InitAsDefaultInstance() {
  forme_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
}

MsgFlowPart::MsgFlowPart(const MsgFlowPart& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFlowPart::SharedCtor() {
  _cached_size_ = 0;
  forme_ = NULL;
  pertinence_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFlowPart::~MsgFlowPart() {
  SharedDtor();
}

void MsgFlowPart::SharedDtor() {
  if (this != default_instance_) {
    delete forme_;
  }
}

const ::google::protobuf::Descriptor* MsgFlowPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFlowPart_descriptor_;
}

const MsgFlowPart& MsgFlowPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFlowPart* MsgFlowPart::default_instance_ = NULL;

MsgFlowPart* MsgFlowPart::New() const {
  return new MsgFlowPart;
}

void MsgFlowPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (forme_ != NULL) forme_->::Common::MsgPath::Clear();
    }
    pertinence_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFlowPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgPath forme = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_forme()));
        if (input->ExpectTag(16)) goto parse_pertinence;
        break;
      }
      
      // required int32 pertinence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_pertinence:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &pertinence_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFlowPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFlowPart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgPath forme = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->forme(), output);
  }
  
  // required int32 pertinence = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pertinence(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFlowPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgPath forme = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->forme(), target);
  }
  
  // required int32 pertinence = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pertinence(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFlowPart::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgPath forme = 1;
    if (has_forme()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forme());
    }
    
    // required int32 pertinence = 2;
    if (has_pertinence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pertinence());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFlowPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFlowPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFlowPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFlowPart::MergeFrom(const MsgFlowPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_forme()->::Common::MsgPath::MergeFrom(from.forme());
    }
    if (from._has_bit(1)) {
      set_pertinence(from.pertinence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFlowPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFlowPart::CopyFrom(const MsgFlowPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFlowPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_forme()) {
    if (!this->forme().IsInitialized()) return false;
  }
  return true;
}

void MsgFlowPart::Swap(MsgFlowPart* other) {
  if (other != this) {
    std::swap(forme_, other->forme_);
    std::swap(pertinence_, other->pertinence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFlowPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFlowPart_descriptor_;
  metadata.reflection = MsgFlowPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfFlowPart::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfFlowPart::SeqOfFlowPart() {
  SharedCtor();
}

void SeqOfFlowPart::InitAsDefaultInstance() {
}

SeqOfFlowPart::SeqOfFlowPart(const SeqOfFlowPart& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfFlowPart::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfFlowPart::~SeqOfFlowPart() {
  SharedDtor();
}

void SeqOfFlowPart::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfFlowPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfFlowPart_descriptor_;
}

const SeqOfFlowPart& SeqOfFlowPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

SeqOfFlowPart* SeqOfFlowPart::default_instance_ = NULL;

SeqOfFlowPart* SeqOfFlowPart::New() const {
  return new SeqOfFlowPart;
}

void SeqOfFlowPart::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfFlowPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgFlowPart elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfFlowPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfFlowPart::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgFlowPart elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfFlowPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgFlowPart elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfFlowPart::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgFlowPart elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfFlowPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfFlowPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfFlowPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfFlowPart::MergeFrom(const SeqOfFlowPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfFlowPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfFlowPart::CopyFrom(const SeqOfFlowPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfFlowPart::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfFlowPart::Swap(SeqOfFlowPart* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfFlowPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfFlowPart_descriptor_;
  metadata.reflection = SeqOfFlowPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowKnowledgeDestruction::kOidConnaissanceFluxFieldNumber;
const int MsgPopulationFlowKnowledgeDestruction::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationFlowKnowledgeDestruction::kOidGroupePossesseurFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowKnowledgeDestruction::MsgPopulationFlowKnowledgeDestruction() {
  SharedCtor();
}

void MsgPopulationFlowKnowledgeDestruction::InitAsDefaultInstance() {
}

MsgPopulationFlowKnowledgeDestruction::MsgPopulationFlowKnowledgeDestruction(const MsgPopulationFlowKnowledgeDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_flux_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowKnowledgeDestruction::~MsgPopulationFlowKnowledgeDestruction() {
  SharedDtor();
}

void MsgPopulationFlowKnowledgeDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowKnowledgeDestruction_descriptor_;
}

const MsgPopulationFlowKnowledgeDestruction& MsgPopulationFlowKnowledgeDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowKnowledgeDestruction* MsgPopulationFlowKnowledgeDestruction::default_instance_ = NULL;

MsgPopulationFlowKnowledgeDestruction* MsgPopulationFlowKnowledgeDestruction::New() const {
  return new MsgPopulationFlowKnowledgeDestruction;
}

void MsgPopulationFlowKnowledgeDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_flux_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowKnowledgeDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_flux = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_flux_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowKnowledgeDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowKnowledgeDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_flux(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowKnowledgeDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_flux(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowKnowledgeDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_flux = 1;
    if (has_oid_connaissance_flux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_flux());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowKnowledgeDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowKnowledgeDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowKnowledgeDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowKnowledgeDestruction::MergeFrom(const MsgPopulationFlowKnowledgeDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_flux(from.oid_connaissance_flux());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowKnowledgeDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeDestruction::CopyFrom(const MsgPopulationFlowKnowledgeDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowKnowledgeDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgPopulationFlowKnowledgeDestruction::Swap(MsgPopulationFlowKnowledgeDestruction* other) {
  if (other != this) {
    std::swap(oid_connaissance_flux_, other->oid_connaissance_flux_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowKnowledgeDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowKnowledgeDestruction_descriptor_;
  metadata.reflection = MsgPopulationFlowKnowledgeDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPopulationFlowKnowledgeUpdate::kOidConnaissanceFluxFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kOidConnaissancePopulationFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kOidGroupePossesseurFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kOidFluxReelFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kPortionsFluxFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kDirectionFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kVitesseFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kNbHumainsVivantsFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kNbHumainsMortsFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kAttitudeFieldNumber;
const int MsgPopulationFlowKnowledgeUpdate::kEstPercuFieldNumber;
#endif  // !_MSC_VER

MsgPopulationFlowKnowledgeUpdate::MsgPopulationFlowKnowledgeUpdate() {
  SharedCtor();
}

void MsgPopulationFlowKnowledgeUpdate::InitAsDefaultInstance() {
  portions_flux_ = const_cast< ::MsgsSimToClient::SeqOfFlowPart*>(&::MsgsSimToClient::SeqOfFlowPart::default_instance());
  direction_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
}

MsgPopulationFlowKnowledgeUpdate::MsgPopulationFlowKnowledgeUpdate(const MsgPopulationFlowKnowledgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_connaissance_flux_ = 0;
  oid_connaissance_population_ = 0;
  oid_groupe_possesseur_ = 0;
  oid_flux_reel_ = 0;
  portions_flux_ = NULL;
  direction_ = NULL;
  vitesse_ = 0;
  nb_humains_vivants_ = 0;
  nb_humains_morts_ = 0;
  attitude_ = 0;
  est_percu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPopulationFlowKnowledgeUpdate::~MsgPopulationFlowKnowledgeUpdate() {
  SharedDtor();
}

void MsgPopulationFlowKnowledgeUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete portions_flux_;
    delete direction_;
  }
}

const ::google::protobuf::Descriptor* MsgPopulationFlowKnowledgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPopulationFlowKnowledgeUpdate_descriptor_;
}

const MsgPopulationFlowKnowledgeUpdate& MsgPopulationFlowKnowledgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgPopulationFlowKnowledgeUpdate* MsgPopulationFlowKnowledgeUpdate::default_instance_ = NULL;

MsgPopulationFlowKnowledgeUpdate* MsgPopulationFlowKnowledgeUpdate::New() const {
  return new MsgPopulationFlowKnowledgeUpdate;
}

void MsgPopulationFlowKnowledgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_connaissance_flux_ = 0;
    oid_connaissance_population_ = 0;
    oid_groupe_possesseur_ = 0;
    oid_flux_reel_ = 0;
    if (_has_bit(4)) {
      if (portions_flux_ != NULL) portions_flux_->::MsgsSimToClient::SeqOfFlowPart::Clear();
    }
    if (_has_bit(5)) {
      if (direction_ != NULL) direction_->::Common::MsgHeading::Clear();
    }
    vitesse_ = 0;
    nb_humains_vivants_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nb_humains_morts_ = 0;
    attitude_ = 0;
    est_percu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPopulationFlowKnowledgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid_connaissance_flux = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_flux_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_connaissance_population;
        break;
      }
      
      // required int32 oid_connaissance_population = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_connaissance_population:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_connaissance_population_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_groupe_possesseur;
        break;
      }
      
      // required int32 oid_groupe_possesseur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_groupe_possesseur:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_groupe_possesseur_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_oid_flux_reel;
        break;
      }
      
      // optional int32 oid_flux_reel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_flux_reel:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_flux_reel_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_portions_flux;
        break;
      }
      
      // optional .MsgsSimToClient.SeqOfFlowPart portions_flux = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_portions_flux:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_portions_flux()));
        if (input->ExpectTag(50)) goto parse_direction;
        break;
      }
      
      // optional .Common.MsgHeading direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_direction()));
        if (input->ExpectTag(56)) goto parse_vitesse;
        break;
      }
      
      // optional int32 vitesse = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_vitesse:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &vitesse_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_nb_humains_vivants;
        break;
      }
      
      // optional int32 nb_humains_vivants = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_vivants:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_vivants_));
        _set_bit(7);
        if (input->ExpectTag(72)) goto parse_nb_humains_morts;
        break;
      }
      
      // optional int32 nb_humains_morts = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_nb_humains_morts:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nb_humains_morts_));
        _set_bit(8);
        if (input->ExpectTag(80)) goto parse_attitude;
        break;
      }
      
      // optional .Common.EnumPopulationAttitude attitude = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_attitude:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumPopulationAttitude_IsValid(value)) {
          set_attitude(static_cast< Common::EnumPopulationAttitude >(value));
        } else {
          mutable_unknown_fields()->AddVarint(10, value);
        }
        if (input->ExpectTag(88)) goto parse_est_percu;
        break;
      }
      
      // optional bool est_percu = 11 [default = false];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_est_percu:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &est_percu_));
        _set_bit(10);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPopulationFlowKnowledgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPopulationFlowKnowledgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid_connaissance_flux(), output);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->oid_connaissance_population(), output);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->oid_groupe_possesseur(), output);
  }
  
  // optional int32 oid_flux_reel = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->oid_flux_reel(), output);
  }
  
  // optional .MsgsSimToClient.SeqOfFlowPart portions_flux = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->portions_flux(), output);
  }
  
  // optional .Common.MsgHeading direction = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->direction(), output);
  }
  
  // optional int32 vitesse = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vitesse(), output);
  }
  
  // optional int32 nb_humains_vivants = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nb_humains_vivants(), output);
  }
  
  // optional int32 nb_humains_morts = 9 [default = 0];
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nb_humains_morts(), output);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->attitude(), output);
  }
  
  // optional bool est_percu = 11 [default = false];
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->est_percu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPopulationFlowKnowledgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid_connaissance_flux = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid_connaissance_flux(), target);
  }
  
  // required int32 oid_connaissance_population = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->oid_connaissance_population(), target);
  }
  
  // required int32 oid_groupe_possesseur = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->oid_groupe_possesseur(), target);
  }
  
  // optional int32 oid_flux_reel = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->oid_flux_reel(), target);
  }
  
  // optional .MsgsSimToClient.SeqOfFlowPart portions_flux = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->portions_flux(), target);
  }
  
  // optional .Common.MsgHeading direction = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->direction(), target);
  }
  
  // optional int32 vitesse = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vitesse(), target);
  }
  
  // optional int32 nb_humains_vivants = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nb_humains_vivants(), target);
  }
  
  // optional int32 nb_humains_morts = 9 [default = 0];
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nb_humains_morts(), target);
  }
  
  // optional .Common.EnumPopulationAttitude attitude = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->attitude(), target);
  }
  
  // optional bool est_percu = 11 [default = false];
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->est_percu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPopulationFlowKnowledgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid_connaissance_flux = 1;
    if (has_oid_connaissance_flux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_flux());
    }
    
    // required int32 oid_connaissance_population = 2;
    if (has_oid_connaissance_population()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_connaissance_population());
    }
    
    // required int32 oid_groupe_possesseur = 3;
    if (has_oid_groupe_possesseur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_groupe_possesseur());
    }
    
    // optional int32 oid_flux_reel = 4 [default = 0];
    if (has_oid_flux_reel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid_flux_reel());
    }
    
    // optional .MsgsSimToClient.SeqOfFlowPart portions_flux = 5;
    if (has_portions_flux()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->portions_flux());
    }
    
    // optional .Common.MsgHeading direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
    // optional int32 vitesse = 7 [default = 0];
    if (has_vitesse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitesse());
    }
    
    // optional int32 nb_humains_vivants = 8 [default = 0];
    if (has_nb_humains_vivants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_vivants());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nb_humains_morts = 9 [default = 0];
    if (has_nb_humains_morts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nb_humains_morts());
    }
    
    // optional .Common.EnumPopulationAttitude attitude = 10;
    if (has_attitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attitude());
    }
    
    // optional bool est_percu = 11 [default = false];
    if (has_est_percu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPopulationFlowKnowledgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPopulationFlowKnowledgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPopulationFlowKnowledgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPopulationFlowKnowledgeUpdate::MergeFrom(const MsgPopulationFlowKnowledgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid_connaissance_flux(from.oid_connaissance_flux());
    }
    if (from._has_bit(1)) {
      set_oid_connaissance_population(from.oid_connaissance_population());
    }
    if (from._has_bit(2)) {
      set_oid_groupe_possesseur(from.oid_groupe_possesseur());
    }
    if (from._has_bit(3)) {
      set_oid_flux_reel(from.oid_flux_reel());
    }
    if (from._has_bit(4)) {
      mutable_portions_flux()->::MsgsSimToClient::SeqOfFlowPart::MergeFrom(from.portions_flux());
    }
    if (from._has_bit(5)) {
      mutable_direction()->::Common::MsgHeading::MergeFrom(from.direction());
    }
    if (from._has_bit(6)) {
      set_vitesse(from.vitesse());
    }
    if (from._has_bit(7)) {
      set_nb_humains_vivants(from.nb_humains_vivants());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_nb_humains_morts(from.nb_humains_morts());
    }
    if (from._has_bit(9)) {
      set_attitude(from.attitude());
    }
    if (from._has_bit(10)) {
      set_est_percu(from.est_percu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPopulationFlowKnowledgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPopulationFlowKnowledgeUpdate::CopyFrom(const MsgPopulationFlowKnowledgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPopulationFlowKnowledgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_portions_flux()) {
    if (!this->portions_flux().IsInitialized()) return false;
  }
  if (has_direction()) {
    if (!this->direction().IsInitialized()) return false;
  }
  return true;
}

void MsgPopulationFlowKnowledgeUpdate::Swap(MsgPopulationFlowKnowledgeUpdate* other) {
  if (other != this) {
    std::swap(oid_connaissance_flux_, other->oid_connaissance_flux_);
    std::swap(oid_connaissance_population_, other->oid_connaissance_population_);
    std::swap(oid_groupe_possesseur_, other->oid_groupe_possesseur_);
    std::swap(oid_flux_reel_, other->oid_flux_reel_);
    std::swap(portions_flux_, other->portions_flux_);
    std::swap(direction_, other->direction_);
    std::swap(vitesse_, other->vitesse_);
    std::swap(nb_humains_vivants_, other->nb_humains_vivants_);
    std::swap(nb_humains_morts_, other->nb_humains_morts_);
    std::swap(attitude_, other->attitude_);
    std::swap(est_percu_, other->est_percu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPopulationFlowKnowledgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPopulationFlowKnowledgeUpdate_descriptor_;
  metadata.reflection = MsgPopulationFlowKnowledgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFolkCreation_profiles::kElemFieldNumber;
#endif  // !_MSC_VER

MsgFolkCreation_profiles::MsgFolkCreation_profiles() {
  SharedCtor();
}

void MsgFolkCreation_profiles::InitAsDefaultInstance() {
}

MsgFolkCreation_profiles::MsgFolkCreation_profiles(const MsgFolkCreation_profiles& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFolkCreation_profiles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFolkCreation_profiles::~MsgFolkCreation_profiles() {
  SharedDtor();
}

void MsgFolkCreation_profiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFolkCreation_profiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFolkCreation_profiles_descriptor_;
}

const MsgFolkCreation_profiles& MsgFolkCreation_profiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFolkCreation_profiles* MsgFolkCreation_profiles::default_instance_ = NULL;

MsgFolkCreation_profiles* MsgFolkCreation_profiles::New() const {
  return new MsgFolkCreation_profiles;
}

void MsgFolkCreation_profiles::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFolkCreation_profiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_elem()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->elem(0).data(), this->elem(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFolkCreation_profiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFolkCreation_profiles::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->elem(i).data(), this->elem(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFolkCreation_profiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elem(i).data(), this->elem(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFolkCreation_profiles::ByteSize() const {
  int total_size = 0;
  
  // repeated string elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFolkCreation_profiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFolkCreation_profiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFolkCreation_profiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFolkCreation_profiles::MergeFrom(const MsgFolkCreation_profiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFolkCreation_profiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFolkCreation_profiles::CopyFrom(const MsgFolkCreation_profiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFolkCreation_profiles::IsInitialized() const {
  
  return true;
}

void MsgFolkCreation_profiles::Swap(MsgFolkCreation_profiles* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFolkCreation_profiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFolkCreation_profiles_descriptor_;
  metadata.reflection = MsgFolkCreation_profiles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFolkCreation_activities::kElemFieldNumber;
#endif  // !_MSC_VER

MsgFolkCreation_activities::MsgFolkCreation_activities() {
  SharedCtor();
}

void MsgFolkCreation_activities::InitAsDefaultInstance() {
}

MsgFolkCreation_activities::MsgFolkCreation_activities(const MsgFolkCreation_activities& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFolkCreation_activities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFolkCreation_activities::~MsgFolkCreation_activities() {
  SharedDtor();
}

void MsgFolkCreation_activities::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFolkCreation_activities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFolkCreation_activities_descriptor_;
}

const MsgFolkCreation_activities& MsgFolkCreation_activities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFolkCreation_activities* MsgFolkCreation_activities::default_instance_ = NULL;

MsgFolkCreation_activities* MsgFolkCreation_activities::New() const {
  return new MsgFolkCreation_activities;
}

void MsgFolkCreation_activities::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFolkCreation_activities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_elem()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->elem(0).data(), this->elem(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFolkCreation_activities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFolkCreation_activities::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->elem(i).data(), this->elem(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFolkCreation_activities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->elem(i).data(), this->elem(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFolkCreation_activities::ByteSize() const {
  int total_size = 0;
  
  // repeated string elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFolkCreation_activities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFolkCreation_activities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFolkCreation_activities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFolkCreation_activities::MergeFrom(const MsgFolkCreation_activities& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFolkCreation_activities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFolkCreation_activities::CopyFrom(const MsgFolkCreation_activities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFolkCreation_activities::IsInitialized() const {
  
  return true;
}

void MsgFolkCreation_activities::Swap(MsgFolkCreation_activities* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFolkCreation_activities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFolkCreation_activities_descriptor_;
  metadata.reflection = MsgFolkCreation_activities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFolkCreation::kProfilesFieldNumber;
const int MsgFolkCreation::kActivitiesFieldNumber;
const int MsgFolkCreation::kContainerSizeFieldNumber;
const int MsgFolkCreation::kEdgeNumberFieldNumber;
#endif  // !_MSC_VER

MsgFolkCreation::MsgFolkCreation() {
  SharedCtor();
}

void MsgFolkCreation::InitAsDefaultInstance() {
  profiles_ = const_cast< ::MsgsSimToClient::MsgFolkCreation_profiles*>(&::MsgsSimToClient::MsgFolkCreation_profiles::default_instance());
  activities_ = const_cast< ::MsgsSimToClient::MsgFolkCreation_activities*>(&::MsgsSimToClient::MsgFolkCreation_activities::default_instance());
}

MsgFolkCreation::MsgFolkCreation(const MsgFolkCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFolkCreation::SharedCtor() {
  _cached_size_ = 0;
  profiles_ = NULL;
  activities_ = NULL;
  container_size_ = 0;
  edge_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFolkCreation::~MsgFolkCreation() {
  SharedDtor();
}

void MsgFolkCreation::SharedDtor() {
  if (this != default_instance_) {
    delete profiles_;
    delete activities_;
  }
}

const ::google::protobuf::Descriptor* MsgFolkCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFolkCreation_descriptor_;
}

const MsgFolkCreation& MsgFolkCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFolkCreation* MsgFolkCreation::default_instance_ = NULL;

MsgFolkCreation* MsgFolkCreation::New() const {
  return new MsgFolkCreation;
}

void MsgFolkCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (profiles_ != NULL) profiles_->::MsgsSimToClient::MsgFolkCreation_profiles::Clear();
    }
    if (_has_bit(1)) {
      if (activities_ != NULL) activities_->::MsgsSimToClient::MsgFolkCreation_activities::Clear();
    }
    container_size_ = 0;
    edge_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFolkCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.MsgFolkCreation_profiles profiles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_profiles()));
        if (input->ExpectTag(18)) goto parse_activities;
        break;
      }
      
      // required .MsgsSimToClient.MsgFolkCreation_activities activities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_activities:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_activities()));
        if (input->ExpectTag(24)) goto parse_container_size;
        break;
      }
      
      // optional int32 container_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_container_size:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &container_size_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_edge_number;
        break;
      }
      
      // optional int32 edge_number = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_edge_number:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &edge_number_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFolkCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFolkCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.MsgFolkCreation_profiles profiles = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->profiles(), output);
  }
  
  // required .MsgsSimToClient.MsgFolkCreation_activities activities = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->activities(), output);
  }
  
  // optional int32 container_size = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->container_size(), output);
  }
  
  // optional int32 edge_number = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->edge_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFolkCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.MsgFolkCreation_profiles profiles = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->profiles(), target);
  }
  
  // required .MsgsSimToClient.MsgFolkCreation_activities activities = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->activities(), target);
  }
  
  // optional int32 container_size = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->container_size(), target);
  }
  
  // optional int32 edge_number = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->edge_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFolkCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.MsgFolkCreation_profiles profiles = 1;
    if (has_profiles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->profiles());
    }
    
    // required .MsgsSimToClient.MsgFolkCreation_activities activities = 2;
    if (has_activities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activities());
    }
    
    // optional int32 container_size = 3;
    if (has_container_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->container_size());
    }
    
    // optional int32 edge_number = 4;
    if (has_edge_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edge_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFolkCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFolkCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFolkCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFolkCreation::MergeFrom(const MsgFolkCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_profiles()->::MsgsSimToClient::MsgFolkCreation_profiles::MergeFrom(from.profiles());
    }
    if (from._has_bit(1)) {
      mutable_activities()->::MsgsSimToClient::MsgFolkCreation_activities::MergeFrom(from.activities());
    }
    if (from._has_bit(2)) {
      set_container_size(from.container_size());
    }
    if (from._has_bit(3)) {
      set_edge_number(from.edge_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFolkCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFolkCreation::CopyFrom(const MsgFolkCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFolkCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgFolkCreation::Swap(MsgFolkCreation* other) {
  if (other != this) {
    std::swap(profiles_, other->profiles_);
    std::swap(activities_, other->activities_);
    std::swap(container_size_, other->container_size_);
    std::swap(edge_number_, other->edge_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFolkCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFolkCreation_descriptor_;
  metadata.reflection = MsgFolkCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFolkGraphEdgeUpdate::kOidFieldNumber;
const int MsgFolkGraphEdgeUpdate::kShpOidFieldNumber;
const int MsgFolkGraphEdgeUpdate::kPopulationOccupationFieldNumber;
#endif  // !_MSC_VER

MsgFolkGraphEdgeUpdate::MsgFolkGraphEdgeUpdate() {
  SharedCtor();
}

void MsgFolkGraphEdgeUpdate::InitAsDefaultInstance() {
}

MsgFolkGraphEdgeUpdate::MsgFolkGraphEdgeUpdate(const MsgFolkGraphEdgeUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFolkGraphEdgeUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0;
  shp_oid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFolkGraphEdgeUpdate::~MsgFolkGraphEdgeUpdate() {
  SharedDtor();
}

void MsgFolkGraphEdgeUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFolkGraphEdgeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFolkGraphEdgeUpdate_descriptor_;
}

const MsgFolkGraphEdgeUpdate& MsgFolkGraphEdgeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFolkGraphEdgeUpdate* MsgFolkGraphEdgeUpdate::default_instance_ = NULL;

MsgFolkGraphEdgeUpdate* MsgFolkGraphEdgeUpdate::New() const {
  return new MsgFolkGraphEdgeUpdate;
}

void MsgFolkGraphEdgeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0;
    shp_oid_ = 0;
  }
  population_occupation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFolkGraphEdgeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_shp_oid;
        break;
      }
      
      // required int32 shp_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_shp_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &shp_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_population_occupation;
        break;
      }
      
      // repeated int32 population_occupation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_population_occupation:
        ::google::protobuf::int32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value));
        add_population_occupation(value);
        if (input->ExpectTag(24)) goto parse_population_occupation;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFolkGraphEdgeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFolkGraphEdgeUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->oid(), output);
  }
  
  // required int32 shp_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shp_oid(), output);
  }
  
  // repeated int32 population_occupation = 3;
  for (int i = 0; i < this->population_occupation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->population_occupation(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFolkGraphEdgeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->oid(), target);
  }
  
  // required int32 shp_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shp_oid(), target);
  }
  
  // repeated int32 population_occupation = 3;
  for (int i = 0; i < this->population_occupation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->population_occupation(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFolkGraphEdgeUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->oid());
    }
    
    // required int32 shp_oid = 2;
    if (has_shp_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shp_oid());
    }
    
  }
  // repeated int32 population_occupation = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->population_occupation_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->population_occupation(i));
    }
    total_size += 1 * this->population_occupation_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFolkGraphEdgeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFolkGraphEdgeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFolkGraphEdgeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFolkGraphEdgeUpdate::MergeFrom(const MsgFolkGraphEdgeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  population_occupation_.MergeFrom(from.population_occupation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_shp_oid(from.shp_oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFolkGraphEdgeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFolkGraphEdgeUpdate::CopyFrom(const MsgFolkGraphEdgeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFolkGraphEdgeUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgFolkGraphEdgeUpdate::Swap(MsgFolkGraphEdgeUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(shp_oid_, other->shp_oid_);
    population_occupation_.Swap(&other->population_occupation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFolkGraphEdgeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFolkGraphEdgeUpdate_descriptor_;
  metadata.reflection = MsgFolkGraphEdgeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgFolkGraphUpdate::kElemFieldNumber;
#endif  // !_MSC_VER

MsgFolkGraphUpdate::MsgFolkGraphUpdate() {
  SharedCtor();
}

void MsgFolkGraphUpdate::InitAsDefaultInstance() {
}

MsgFolkGraphUpdate::MsgFolkGraphUpdate(const MsgFolkGraphUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgFolkGraphUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFolkGraphUpdate::~MsgFolkGraphUpdate() {
  SharedDtor();
}

void MsgFolkGraphUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgFolkGraphUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFolkGraphUpdate_descriptor_;
}

const MsgFolkGraphUpdate& MsgFolkGraphUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgFolkGraphUpdate* MsgFolkGraphUpdate::default_instance_ = NULL;

MsgFolkGraphUpdate* MsgFolkGraphUpdate::New() const {
  return new MsgFolkGraphUpdate;
}

void MsgFolkGraphUpdate::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFolkGraphUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgsSimToClient.MsgFolkGraphEdgeUpdate elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFolkGraphUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgFolkGraphUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .MsgsSimToClient.MsgFolkGraphEdgeUpdate elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFolkGraphUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgsSimToClient.MsgFolkGraphEdgeUpdate elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFolkGraphUpdate::ByteSize() const {
  int total_size = 0;
  
  // repeated .MsgsSimToClient.MsgFolkGraphEdgeUpdate elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgFolkGraphUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFolkGraphUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFolkGraphUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFolkGraphUpdate::MergeFrom(const MsgFolkGraphUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFolkGraphUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFolkGraphUpdate::CopyFrom(const MsgFolkGraphUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFolkGraphUpdate::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgFolkGraphUpdate::Swap(MsgFolkGraphUpdate* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFolkGraphUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFolkGraphUpdate_descriptor_;
  metadata.reflection = MsgFolkGraphUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlGlobalMeteoAck::MsgControlGlobalMeteoAck() {
  SharedCtor();
}

void MsgControlGlobalMeteoAck::InitAsDefaultInstance() {
}

MsgControlGlobalMeteoAck::MsgControlGlobalMeteoAck(const MsgControlGlobalMeteoAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlGlobalMeteoAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlGlobalMeteoAck::~MsgControlGlobalMeteoAck() {
  SharedDtor();
}

void MsgControlGlobalMeteoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlGlobalMeteoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlGlobalMeteoAck_descriptor_;
}

const MsgControlGlobalMeteoAck& MsgControlGlobalMeteoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlGlobalMeteoAck* MsgControlGlobalMeteoAck::default_instance_ = NULL;

MsgControlGlobalMeteoAck* MsgControlGlobalMeteoAck::New() const {
  return new MsgControlGlobalMeteoAck;
}

void MsgControlGlobalMeteoAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlGlobalMeteoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlGlobalMeteoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlGlobalMeteoAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlGlobalMeteoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlGlobalMeteoAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlGlobalMeteoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlGlobalMeteoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlGlobalMeteoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlGlobalMeteoAck::MergeFrom(const MsgControlGlobalMeteoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlGlobalMeteoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlGlobalMeteoAck::CopyFrom(const MsgControlGlobalMeteoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlGlobalMeteoAck::IsInitialized() const {
  
  return true;
}

void MsgControlGlobalMeteoAck::Swap(MsgControlGlobalMeteoAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlGlobalMeteoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlGlobalMeteoAck_descriptor_;
  metadata.reflection = MsgControlGlobalMeteoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlLocalMeteoAck::MsgControlLocalMeteoAck() {
  SharedCtor();
}

void MsgControlLocalMeteoAck::InitAsDefaultInstance() {
}

MsgControlLocalMeteoAck::MsgControlLocalMeteoAck(const MsgControlLocalMeteoAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlLocalMeteoAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlLocalMeteoAck::~MsgControlLocalMeteoAck() {
  SharedDtor();
}

void MsgControlLocalMeteoAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlLocalMeteoAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlLocalMeteoAck_descriptor_;
}

const MsgControlLocalMeteoAck& MsgControlLocalMeteoAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlLocalMeteoAck* MsgControlLocalMeteoAck::default_instance_ = NULL;

MsgControlLocalMeteoAck* MsgControlLocalMeteoAck::New() const {
  return new MsgControlLocalMeteoAck;
}

void MsgControlLocalMeteoAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlLocalMeteoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlLocalMeteoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlLocalMeteoAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlLocalMeteoAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlLocalMeteoAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlLocalMeteoAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlLocalMeteoAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlLocalMeteoAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlLocalMeteoAck::MergeFrom(const MsgControlLocalMeteoAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlLocalMeteoAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlLocalMeteoAck::CopyFrom(const MsgControlLocalMeteoAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlLocalMeteoAck::IsInitialized() const {
  
  return true;
}

void MsgControlLocalMeteoAck::Swap(MsgControlLocalMeteoAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlLocalMeteoAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlLocalMeteoAck_descriptor_;
  metadata.reflection = MsgControlLocalMeteoAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlCheckPointSetFrequencyAck::MsgControlCheckPointSetFrequencyAck() {
  SharedCtor();
}

void MsgControlCheckPointSetFrequencyAck::InitAsDefaultInstance() {
}

MsgControlCheckPointSetFrequencyAck::MsgControlCheckPointSetFrequencyAck(const MsgControlCheckPointSetFrequencyAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlCheckPointSetFrequencyAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlCheckPointSetFrequencyAck::~MsgControlCheckPointSetFrequencyAck() {
  SharedDtor();
}

void MsgControlCheckPointSetFrequencyAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlCheckPointSetFrequencyAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlCheckPointSetFrequencyAck_descriptor_;
}

const MsgControlCheckPointSetFrequencyAck& MsgControlCheckPointSetFrequencyAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlCheckPointSetFrequencyAck* MsgControlCheckPointSetFrequencyAck::default_instance_ = NULL;

MsgControlCheckPointSetFrequencyAck* MsgControlCheckPointSetFrequencyAck::New() const {
  return new MsgControlCheckPointSetFrequencyAck;
}

void MsgControlCheckPointSetFrequencyAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlCheckPointSetFrequencyAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlCheckPointSetFrequencyAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlCheckPointSetFrequencyAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlCheckPointSetFrequencyAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlCheckPointSetFrequencyAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlCheckPointSetFrequencyAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlCheckPointSetFrequencyAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlCheckPointSetFrequencyAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlCheckPointSetFrequencyAck::MergeFrom(const MsgControlCheckPointSetFrequencyAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlCheckPointSetFrequencyAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlCheckPointSetFrequencyAck::CopyFrom(const MsgControlCheckPointSetFrequencyAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlCheckPointSetFrequencyAck::IsInitialized() const {
  
  return true;
}

void MsgControlCheckPointSetFrequencyAck::Swap(MsgControlCheckPointSetFrequencyAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlCheckPointSetFrequencyAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlCheckPointSetFrequencyAck_descriptor_;
  metadata.reflection = MsgControlCheckPointSetFrequencyAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlCheckPointSaveNowAck::MsgControlCheckPointSaveNowAck() {
  SharedCtor();
}

void MsgControlCheckPointSaveNowAck::InitAsDefaultInstance() {
}

MsgControlCheckPointSaveNowAck::MsgControlCheckPointSaveNowAck(const MsgControlCheckPointSaveNowAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlCheckPointSaveNowAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlCheckPointSaveNowAck::~MsgControlCheckPointSaveNowAck() {
  SharedDtor();
}

void MsgControlCheckPointSaveNowAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlCheckPointSaveNowAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlCheckPointSaveNowAck_descriptor_;
}

const MsgControlCheckPointSaveNowAck& MsgControlCheckPointSaveNowAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlCheckPointSaveNowAck* MsgControlCheckPointSaveNowAck::default_instance_ = NULL;

MsgControlCheckPointSaveNowAck* MsgControlCheckPointSaveNowAck::New() const {
  return new MsgControlCheckPointSaveNowAck;
}

void MsgControlCheckPointSaveNowAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlCheckPointSaveNowAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlCheckPointSaveNowAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlCheckPointSaveNowAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlCheckPointSaveNowAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlCheckPointSaveNowAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlCheckPointSaveNowAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlCheckPointSaveNowAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlCheckPointSaveNowAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlCheckPointSaveNowAck::MergeFrom(const MsgControlCheckPointSaveNowAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlCheckPointSaveNowAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlCheckPointSaveNowAck::CopyFrom(const MsgControlCheckPointSaveNowAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlCheckPointSaveNowAck::IsInitialized() const {
  
  return true;
}

void MsgControlCheckPointSaveNowAck::Swap(MsgControlCheckPointSaveNowAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlCheckPointSaveNowAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlCheckPointSaveNowAck_descriptor_;
  metadata.reflection = MsgControlCheckPointSaveNowAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlCheckPointSaveBegin::MsgControlCheckPointSaveBegin() {
  SharedCtor();
}

void MsgControlCheckPointSaveBegin::InitAsDefaultInstance() {
}

MsgControlCheckPointSaveBegin::MsgControlCheckPointSaveBegin(const MsgControlCheckPointSaveBegin& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlCheckPointSaveBegin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlCheckPointSaveBegin::~MsgControlCheckPointSaveBegin() {
  SharedDtor();
}

void MsgControlCheckPointSaveBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlCheckPointSaveBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlCheckPointSaveBegin_descriptor_;
}

const MsgControlCheckPointSaveBegin& MsgControlCheckPointSaveBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlCheckPointSaveBegin* MsgControlCheckPointSaveBegin::default_instance_ = NULL;

MsgControlCheckPointSaveBegin* MsgControlCheckPointSaveBegin::New() const {
  return new MsgControlCheckPointSaveBegin;
}

void MsgControlCheckPointSaveBegin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlCheckPointSaveBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlCheckPointSaveBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlCheckPointSaveBegin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlCheckPointSaveBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlCheckPointSaveBegin::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlCheckPointSaveBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlCheckPointSaveBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlCheckPointSaveBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlCheckPointSaveBegin::MergeFrom(const MsgControlCheckPointSaveBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlCheckPointSaveBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlCheckPointSaveBegin::CopyFrom(const MsgControlCheckPointSaveBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlCheckPointSaveBegin::IsInitialized() const {
  
  return true;
}

void MsgControlCheckPointSaveBegin::Swap(MsgControlCheckPointSaveBegin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlCheckPointSaveBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlCheckPointSaveBegin_descriptor_;
  metadata.reflection = MsgControlCheckPointSaveBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlCheckPointSaveBeginAck::MsgControlCheckPointSaveBeginAck() {
  SharedCtor();
}

void MsgControlCheckPointSaveBeginAck::InitAsDefaultInstance() {
}

MsgControlCheckPointSaveBeginAck::MsgControlCheckPointSaveBeginAck(const MsgControlCheckPointSaveBeginAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlCheckPointSaveBeginAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlCheckPointSaveBeginAck::~MsgControlCheckPointSaveBeginAck() {
  SharedDtor();
}

void MsgControlCheckPointSaveBeginAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlCheckPointSaveBeginAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlCheckPointSaveBeginAck_descriptor_;
}

const MsgControlCheckPointSaveBeginAck& MsgControlCheckPointSaveBeginAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlCheckPointSaveBeginAck* MsgControlCheckPointSaveBeginAck::default_instance_ = NULL;

MsgControlCheckPointSaveBeginAck* MsgControlCheckPointSaveBeginAck::New() const {
  return new MsgControlCheckPointSaveBeginAck;
}

void MsgControlCheckPointSaveBeginAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlCheckPointSaveBeginAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlCheckPointSaveBeginAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlCheckPointSaveBeginAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlCheckPointSaveBeginAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlCheckPointSaveBeginAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlCheckPointSaveBeginAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlCheckPointSaveBeginAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlCheckPointSaveBeginAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlCheckPointSaveBeginAck::MergeFrom(const MsgControlCheckPointSaveBeginAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlCheckPointSaveBeginAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlCheckPointSaveBeginAck::CopyFrom(const MsgControlCheckPointSaveBeginAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlCheckPointSaveBeginAck::IsInitialized() const {
  
  return true;
}

void MsgControlCheckPointSaveBeginAck::Swap(MsgControlCheckPointSaveBeginAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlCheckPointSaveBeginAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlCheckPointSaveBeginAck_descriptor_;
  metadata.reflection = MsgControlCheckPointSaveBeginAck_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgControlCheckPointSaveEnd::_default_name_;
#ifndef _MSC_VER
const int MsgControlCheckPointSaveEnd::kNameFieldNumber;
#endif  // !_MSC_VER

MsgControlCheckPointSaveEnd::MsgControlCheckPointSaveEnd() {
  SharedCtor();
}

void MsgControlCheckPointSaveEnd::InitAsDefaultInstance() {
}

MsgControlCheckPointSaveEnd::MsgControlCheckPointSaveEnd(const MsgControlCheckPointSaveEnd& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlCheckPointSaveEnd::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlCheckPointSaveEnd::~MsgControlCheckPointSaveEnd() {
  SharedDtor();
}

void MsgControlCheckPointSaveEnd::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlCheckPointSaveEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlCheckPointSaveEnd_descriptor_;
}

const MsgControlCheckPointSaveEnd& MsgControlCheckPointSaveEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlCheckPointSaveEnd* MsgControlCheckPointSaveEnd::default_instance_ = NULL;

MsgControlCheckPointSaveEnd* MsgControlCheckPointSaveEnd::New() const {
  return new MsgControlCheckPointSaveEnd;
}

void MsgControlCheckPointSaveEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlCheckPointSaveEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlCheckPointSaveEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlCheckPointSaveEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlCheckPointSaveEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlCheckPointSaveEnd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlCheckPointSaveEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlCheckPointSaveEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlCheckPointSaveEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlCheckPointSaveEnd::MergeFrom(const MsgControlCheckPointSaveEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlCheckPointSaveEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlCheckPointSaveEnd::CopyFrom(const MsgControlCheckPointSaveEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlCheckPointSaveEnd::IsInitialized() const {
  
  return true;
}

void MsgControlCheckPointSaveEnd::Swap(MsgControlCheckPointSaveEnd* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlCheckPointSaveEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlCheckPointSaveEnd_descriptor_;
  metadata.reflection = MsgControlCheckPointSaveEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlSendCurrentStateBegin::MsgControlSendCurrentStateBegin() {
  SharedCtor();
}

void MsgControlSendCurrentStateBegin::InitAsDefaultInstance() {
}

MsgControlSendCurrentStateBegin::MsgControlSendCurrentStateBegin(const MsgControlSendCurrentStateBegin& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlSendCurrentStateBegin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlSendCurrentStateBegin::~MsgControlSendCurrentStateBegin() {
  SharedDtor();
}

void MsgControlSendCurrentStateBegin::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlSendCurrentStateBegin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlSendCurrentStateBegin_descriptor_;
}

const MsgControlSendCurrentStateBegin& MsgControlSendCurrentStateBegin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlSendCurrentStateBegin* MsgControlSendCurrentStateBegin::default_instance_ = NULL;

MsgControlSendCurrentStateBegin* MsgControlSendCurrentStateBegin::New() const {
  return new MsgControlSendCurrentStateBegin;
}

void MsgControlSendCurrentStateBegin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlSendCurrentStateBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlSendCurrentStateBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlSendCurrentStateBegin::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlSendCurrentStateBegin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlSendCurrentStateBegin::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlSendCurrentStateBegin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlSendCurrentStateBegin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlSendCurrentStateBegin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlSendCurrentStateBegin::MergeFrom(const MsgControlSendCurrentStateBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlSendCurrentStateBegin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlSendCurrentStateBegin::CopyFrom(const MsgControlSendCurrentStateBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlSendCurrentStateBegin::IsInitialized() const {
  
  return true;
}

void MsgControlSendCurrentStateBegin::Swap(MsgControlSendCurrentStateBegin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlSendCurrentStateBegin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlSendCurrentStateBegin_descriptor_;
  metadata.reflection = MsgControlSendCurrentStateBegin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlSendCurrentStateEnd::MsgControlSendCurrentStateEnd() {
  SharedCtor();
}

void MsgControlSendCurrentStateEnd::InitAsDefaultInstance() {
}

MsgControlSendCurrentStateEnd::MsgControlSendCurrentStateEnd(const MsgControlSendCurrentStateEnd& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlSendCurrentStateEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlSendCurrentStateEnd::~MsgControlSendCurrentStateEnd() {
  SharedDtor();
}

void MsgControlSendCurrentStateEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlSendCurrentStateEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlSendCurrentStateEnd_descriptor_;
}

const MsgControlSendCurrentStateEnd& MsgControlSendCurrentStateEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlSendCurrentStateEnd* MsgControlSendCurrentStateEnd::default_instance_ = NULL;

MsgControlSendCurrentStateEnd* MsgControlSendCurrentStateEnd::New() const {
  return new MsgControlSendCurrentStateEnd;
}

void MsgControlSendCurrentStateEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlSendCurrentStateEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlSendCurrentStateEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlSendCurrentStateEnd::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlSendCurrentStateEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlSendCurrentStateEnd::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlSendCurrentStateEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlSendCurrentStateEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlSendCurrentStateEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlSendCurrentStateEnd::MergeFrom(const MsgControlSendCurrentStateEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlSendCurrentStateEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlSendCurrentStateEnd::CopyFrom(const MsgControlSendCurrentStateEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlSendCurrentStateEnd::IsInitialized() const {
  
  return true;
}

void MsgControlSendCurrentStateEnd::Swap(MsgControlSendCurrentStateEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlSendCurrentStateEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlSendCurrentStateEnd_descriptor_;
  metadata.reflection = MsgControlSendCurrentStateEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUrbanAttributeVegetation::_default_type_;
#ifndef _MSC_VER
const int MsgUrbanAttributeVegetation::kTypeFieldNumber;
const int MsgUrbanAttributeVegetation::kHeightFieldNumber;
const int MsgUrbanAttributeVegetation::kDensityFieldNumber;
#endif  // !_MSC_VER

MsgUrbanAttributeVegetation::MsgUrbanAttributeVegetation() {
  SharedCtor();
}

void MsgUrbanAttributeVegetation::InitAsDefaultInstance() {
}

MsgUrbanAttributeVegetation::MsgUrbanAttributeVegetation(const MsgUrbanAttributeVegetation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanAttributeVegetation::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  height_ = 0;
  density_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanAttributeVegetation::~MsgUrbanAttributeVegetation() {
  SharedDtor();
}

void MsgUrbanAttributeVegetation::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanAttributeVegetation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanAttributeVegetation_descriptor_;
}

const MsgUrbanAttributeVegetation& MsgUrbanAttributeVegetation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanAttributeVegetation* MsgUrbanAttributeVegetation::default_instance_ = NULL;

MsgUrbanAttributeVegetation* MsgUrbanAttributeVegetation::New() const {
  return new MsgUrbanAttributeVegetation;
}

void MsgUrbanAttributeVegetation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    height_ = 0;
    density_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanAttributeVegetation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }
      
      // required int32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_height:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &height_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_density;
        break;
      }
      
      // required float density = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &density_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanAttributeVegetation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanAttributeVegetation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // required int32 height = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }
  
  // required float density = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->density(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanAttributeVegetation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // required int32 height = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }
  
  // required float density = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->density(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanAttributeVegetation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required int32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
    // required float density = 3;
    if (has_density()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanAttributeVegetation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanAttributeVegetation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanAttributeVegetation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanAttributeVegetation::MergeFrom(const MsgUrbanAttributeVegetation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_height(from.height());
    }
    if (from._has_bit(2)) {
      set_density(from.density());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanAttributeVegetation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanAttributeVegetation::CopyFrom(const MsgUrbanAttributeVegetation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanAttributeVegetation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgUrbanAttributeVegetation::Swap(MsgUrbanAttributeVegetation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(height_, other->height_);
    std::swap(density_, other->density_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanAttributeVegetation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanAttributeVegetation_descriptor_;
  metadata.reflection = MsgUrbanAttributeVegetation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUrbanAttributeSoil::_default_compound_clearing_;
#ifndef _MSC_VER
const int MsgUrbanAttributeSoil::kOccupationFieldNumber;
const int MsgUrbanAttributeSoil::kTrafficabilityFieldNumber;
const int MsgUrbanAttributeSoil::kMultipleFieldNumber;
const int MsgUrbanAttributeSoil::kCompoundClearingFieldNumber;
#endif  // !_MSC_VER

MsgUrbanAttributeSoil::MsgUrbanAttributeSoil() {
  SharedCtor();
}

void MsgUrbanAttributeSoil::InitAsDefaultInstance() {
}

MsgUrbanAttributeSoil::MsgUrbanAttributeSoil(const MsgUrbanAttributeSoil& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanAttributeSoil::SharedCtor() {
  _cached_size_ = 0;
  occupation_ = 0;
  trafficability_ = 0;
  multiple_ = false;
  compound_clearing_ = const_cast< ::std::string*>(&_default_compound_clearing_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanAttributeSoil::~MsgUrbanAttributeSoil() {
  SharedDtor();
}

void MsgUrbanAttributeSoil::SharedDtor() {
  if (compound_clearing_ != &_default_compound_clearing_) {
    delete compound_clearing_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanAttributeSoil::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanAttributeSoil_descriptor_;
}

const MsgUrbanAttributeSoil& MsgUrbanAttributeSoil::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanAttributeSoil* MsgUrbanAttributeSoil::default_instance_ = NULL;

MsgUrbanAttributeSoil* MsgUrbanAttributeSoil::New() const {
  return new MsgUrbanAttributeSoil;
}

void MsgUrbanAttributeSoil::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    occupation_ = 0;
    trafficability_ = 0;
    multiple_ = false;
    if (_has_bit(3)) {
      if (compound_clearing_ != &_default_compound_clearing_) {
        compound_clearing_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanAttributeSoil::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float occupation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &occupation_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_trafficability;
        break;
      }
      
      // required float trafficability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_trafficability:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &trafficability_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_multiple;
        break;
      }
      
      // required bool multiple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_multiple:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &multiple_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_compound_clearing;
        break;
      }
      
      // required string compound_clearing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_compound_clearing:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_compound_clearing()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->compound_clearing().data(), this->compound_clearing().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanAttributeSoil::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanAttributeSoil::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float occupation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->occupation(), output);
  }
  
  // required float trafficability = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->trafficability(), output);
  }
  
  // required bool multiple = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->multiple(), output);
  }
  
  // required string compound_clearing = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compound_clearing().data(), this->compound_clearing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->compound_clearing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanAttributeSoil::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float occupation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->occupation(), target);
  }
  
  // required float trafficability = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->trafficability(), target);
  }
  
  // required bool multiple = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->multiple(), target);
  }
  
  // required string compound_clearing = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->compound_clearing().data(), this->compound_clearing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->compound_clearing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanAttributeSoil::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float occupation = 1;
    if (has_occupation()) {
      total_size += 1 + 4;
    }
    
    // required float trafficability = 2;
    if (has_trafficability()) {
      total_size += 1 + 4;
    }
    
    // required bool multiple = 3;
    if (has_multiple()) {
      total_size += 1 + 1;
    }
    
    // required string compound_clearing = 4;
    if (has_compound_clearing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->compound_clearing());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanAttributeSoil::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanAttributeSoil* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanAttributeSoil*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanAttributeSoil::MergeFrom(const MsgUrbanAttributeSoil& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_occupation(from.occupation());
    }
    if (from._has_bit(1)) {
      set_trafficability(from.trafficability());
    }
    if (from._has_bit(2)) {
      set_multiple(from.multiple());
    }
    if (from._has_bit(3)) {
      set_compound_clearing(from.compound_clearing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanAttributeSoil::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanAttributeSoil::CopyFrom(const MsgUrbanAttributeSoil& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanAttributeSoil::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgUrbanAttributeSoil::Swap(MsgUrbanAttributeSoil* other) {
  if (other != this) {
    std::swap(occupation_, other->occupation_);
    std::swap(trafficability_, other->trafficability_);
    std::swap(multiple_, other->multiple_);
    std::swap(compound_clearing_, other->compound_clearing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanAttributeSoil::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanAttributeSoil_descriptor_;
  metadata.reflection = MsgUrbanAttributeSoil_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUrbanAttributeArchitecture::_default_roof_shape_;
const ::std::string MsgUrbanAttributeArchitecture::_default_material_;
#ifndef _MSC_VER
const int MsgUrbanAttributeArchitecture::kHeightFieldNumber;
const int MsgUrbanAttributeArchitecture::kFloorNumberFieldNumber;
const int MsgUrbanAttributeArchitecture::kBasementLevelNumberFieldNumber;
const int MsgUrbanAttributeArchitecture::kRoofShapeFieldNumber;
const int MsgUrbanAttributeArchitecture::kMaterialFieldNumber;
const int MsgUrbanAttributeArchitecture::kInnerClutteringFieldNumber;
const int MsgUrbanAttributeArchitecture::kFacadeOpacityFieldNumber;
#endif  // !_MSC_VER

MsgUrbanAttributeArchitecture::MsgUrbanAttributeArchitecture() {
  SharedCtor();
}

void MsgUrbanAttributeArchitecture::InitAsDefaultInstance() {
}

MsgUrbanAttributeArchitecture::MsgUrbanAttributeArchitecture(const MsgUrbanAttributeArchitecture& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanAttributeArchitecture::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  floor_number_ = 0;
  basement_level_number_ = 0;
  roof_shape_ = const_cast< ::std::string*>(&_default_roof_shape_);
  material_ = const_cast< ::std::string*>(&_default_material_);
  inner_cluttering_ = 0;
  facade_opacity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanAttributeArchitecture::~MsgUrbanAttributeArchitecture() {
  SharedDtor();
}

void MsgUrbanAttributeArchitecture::SharedDtor() {
  if (roof_shape_ != &_default_roof_shape_) {
    delete roof_shape_;
  }
  if (material_ != &_default_material_) {
    delete material_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanAttributeArchitecture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanAttributeArchitecture_descriptor_;
}

const MsgUrbanAttributeArchitecture& MsgUrbanAttributeArchitecture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanAttributeArchitecture* MsgUrbanAttributeArchitecture::default_instance_ = NULL;

MsgUrbanAttributeArchitecture* MsgUrbanAttributeArchitecture::New() const {
  return new MsgUrbanAttributeArchitecture;
}

void MsgUrbanAttributeArchitecture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
    floor_number_ = 0;
    basement_level_number_ = 0;
    if (_has_bit(3)) {
      if (roof_shape_ != &_default_roof_shape_) {
        roof_shape_->clear();
      }
    }
    if (_has_bit(4)) {
      if (material_ != &_default_material_) {
        material_->clear();
      }
    }
    inner_cluttering_ = 0;
    facade_opacity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanAttributeArchitecture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &height_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_floor_number;
        break;
      }
      
      // required int32 floor_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_floor_number:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &floor_number_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_basement_level_number;
        break;
      }
      
      // required int32 basement_level_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_basement_level_number:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &basement_level_number_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_roof_shape;
        break;
      }
      
      // required string roof_shape = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_roof_shape:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_roof_shape()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->roof_shape().data(), this->roof_shape().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_material;
        break;
      }
      
      // required string material = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_material:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_material()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->material().data(), this->material().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(53)) goto parse_inner_cluttering;
        break;
      }
      
      // required float inner_cluttering = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_inner_cluttering:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &inner_cluttering_));
        _set_bit(5);
        if (input->ExpectTag(61)) goto parse_facade_opacity;
        break;
      }
      
      // required float facade_opacity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_facade_opacity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &facade_opacity_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanAttributeArchitecture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanAttributeArchitecture::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float height = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->height(), output);
  }
  
  // required int32 floor_number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->floor_number(), output);
  }
  
  // required int32 basement_level_number = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->basement_level_number(), output);
  }
  
  // required string roof_shape = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roof_shape().data(), this->roof_shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->roof_shape(), output);
  }
  
  // required string material = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->material(), output);
  }
  
  // required float inner_cluttering = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->inner_cluttering(), output);
  }
  
  // required float facade_opacity = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->facade_opacity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanAttributeArchitecture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float height = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->height(), target);
  }
  
  // required int32 floor_number = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->floor_number(), target);
  }
  
  // required int32 basement_level_number = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->basement_level_number(), target);
  }
  
  // required string roof_shape = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roof_shape().data(), this->roof_shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->roof_shape(), target);
  }
  
  // required string material = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->material().data(), this->material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->material(), target);
  }
  
  // required float inner_cluttering = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->inner_cluttering(), target);
  }
  
  // required float facade_opacity = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->facade_opacity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanAttributeArchitecture::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float height = 1;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // required int32 floor_number = 2;
    if (has_floor_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor_number());
    }
    
    // required int32 basement_level_number = 3;
    if (has_basement_level_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basement_level_number());
    }
    
    // required string roof_shape = 4;
    if (has_roof_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roof_shape());
    }
    
    // required string material = 5;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->material());
    }
    
    // required float inner_cluttering = 6;
    if (has_inner_cluttering()) {
      total_size += 1 + 4;
    }
    
    // required float facade_opacity = 7;
    if (has_facade_opacity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanAttributeArchitecture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanAttributeArchitecture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanAttributeArchitecture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanAttributeArchitecture::MergeFrom(const MsgUrbanAttributeArchitecture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_height(from.height());
    }
    if (from._has_bit(1)) {
      set_floor_number(from.floor_number());
    }
    if (from._has_bit(2)) {
      set_basement_level_number(from.basement_level_number());
    }
    if (from._has_bit(3)) {
      set_roof_shape(from.roof_shape());
    }
    if (from._has_bit(4)) {
      set_material(from.material());
    }
    if (from._has_bit(5)) {
      set_inner_cluttering(from.inner_cluttering());
    }
    if (from._has_bit(6)) {
      set_facade_opacity(from.facade_opacity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanAttributeArchitecture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanAttributeArchitecture::CopyFrom(const MsgUrbanAttributeArchitecture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanAttributeArchitecture::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void MsgUrbanAttributeArchitecture::Swap(MsgUrbanAttributeArchitecture* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(floor_number_, other->floor_number_);
    std::swap(basement_level_number_, other->basement_level_number_);
    std::swap(roof_shape_, other->roof_shape_);
    std::swap(material_, other->material_);
    std::swap(inner_cluttering_, other->inner_cluttering_);
    std::swap(facade_opacity_, other->facade_opacity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanAttributeArchitecture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanAttributeArchitecture_descriptor_;
  metadata.reflection = MsgUrbanAttributeArchitecture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgColorRGBA::kRedFieldNumber;
const int MsgColorRGBA::kGreenFieldNumber;
const int MsgColorRGBA::kBlueFieldNumber;
const int MsgColorRGBA::kAlphaFieldNumber;
#endif  // !_MSC_VER

MsgColorRGBA::MsgColorRGBA() {
  SharedCtor();
}

void MsgColorRGBA::InitAsDefaultInstance() {
}

MsgColorRGBA::MsgColorRGBA(const MsgColorRGBA& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgColorRGBA::SharedCtor() {
  _cached_size_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgColorRGBA::~MsgColorRGBA() {
  SharedDtor();
}

void MsgColorRGBA::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgColorRGBA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgColorRGBA_descriptor_;
}

const MsgColorRGBA& MsgColorRGBA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgColorRGBA* MsgColorRGBA::default_instance_ = NULL;

MsgColorRGBA* MsgColorRGBA::New() const {
  return new MsgColorRGBA;
}

void MsgColorRGBA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    red_ = 0;
    green_ = 0;
    blue_ = 0;
    alpha_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgColorRGBA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &red_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_green;
        break;
      }
      
      // required int32 green = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_green:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &green_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_blue;
        break;
      }
      
      // required int32 blue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_blue:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &blue_));
        _set_bit(2);
        if (input->ExpectTag(37)) goto parse_alpha;
        break;
      }
      
      // required float alpha = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_alpha:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &alpha_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgColorRGBA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgColorRGBA::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 red = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->red(), output);
  }
  
  // required int32 green = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green(), output);
  }
  
  // required int32 blue = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue(), output);
  }
  
  // required float alpha = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->alpha(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgColorRGBA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 red = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->red(), target);
  }
  
  // required int32 green = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->green(), target);
  }
  
  // required int32 blue = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blue(), target);
  }
  
  // required float alpha = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->alpha(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgColorRGBA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 red = 1;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red());
    }
    
    // required int32 green = 2;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green());
    }
    
    // required int32 blue = 3;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue());
    }
    
    // required float alpha = 4;
    if (has_alpha()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgColorRGBA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgColorRGBA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgColorRGBA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgColorRGBA::MergeFrom(const MsgColorRGBA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_red(from.red());
    }
    if (from._has_bit(1)) {
      set_green(from.green());
    }
    if (from._has_bit(2)) {
      set_blue(from.blue());
    }
    if (from._has_bit(3)) {
      set_alpha(from.alpha());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgColorRGBA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgColorRGBA::CopyFrom(const MsgColorRGBA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgColorRGBA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgColorRGBA::Swap(MsgColorRGBA* other) {
  if (other != this) {
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(alpha_, other->alpha_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgColorRGBA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgColorRGBA_descriptor_;
  metadata.reflection = MsgColorRGBA_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MagicActionCreateUrban::_default_name_;
#ifndef _MSC_VER
const int MagicActionCreateUrban::kNameFieldNumber;
const int MagicActionCreateUrban::kLocationFieldNumber;
#endif  // !_MSC_VER

MagicActionCreateUrban::MagicActionCreateUrban() {
  SharedCtor();
}

void MagicActionCreateUrban::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MagicActionCreateUrban::MagicActionCreateUrban(const MagicActionCreateUrban& from) {
  SharedCtor();
  MergeFrom(from);
}

void MagicActionCreateUrban::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicActionCreateUrban::~MagicActionCreateUrban() {
  SharedDtor();
}

void MagicActionCreateUrban::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MagicActionCreateUrban::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicActionCreateUrban_descriptor_;
}

const MagicActionCreateUrban& MagicActionCreateUrban::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MagicActionCreateUrban* MagicActionCreateUrban::default_instance_ = NULL;

MagicActionCreateUrban* MagicActionCreateUrban::New() const {
  return new MagicActionCreateUrban;
}

void MagicActionCreateUrban::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicActionCreateUrban::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // required .Common.MsgLocation location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MagicActionCreateUrban::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MagicActionCreateUrban::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MagicActionCreateUrban::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MagicActionCreateUrban::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .Common.MsgLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MagicActionCreateUrban::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicActionCreateUrban* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicActionCreateUrban*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicActionCreateUrban::MergeFrom(const MagicActionCreateUrban& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicActionCreateUrban::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicActionCreateUrban::CopyFrom(const MagicActionCreateUrban& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicActionCreateUrban::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MagicActionCreateUrban::Swap(MagicActionCreateUrban* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicActionCreateUrban::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicActionCreateUrban_descriptor_;
  metadata.reflection = MagicActionCreateUrban_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MagicActionUpdateUrban::kOidFieldNumber;
#endif  // !_MSC_VER

MagicActionUpdateUrban::MagicActionUpdateUrban() {
  SharedCtor();
}

void MagicActionUpdateUrban::InitAsDefaultInstance() {
}

MagicActionUpdateUrban::MagicActionUpdateUrban(const MagicActionUpdateUrban& from) {
  SharedCtor();
  MergeFrom(from);
}

void MagicActionUpdateUrban::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicActionUpdateUrban::~MagicActionUpdateUrban() {
  SharedDtor();
}

void MagicActionUpdateUrban::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MagicActionUpdateUrban::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicActionUpdateUrban_descriptor_;
}

const MagicActionUpdateUrban& MagicActionUpdateUrban::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MagicActionUpdateUrban* MagicActionUpdateUrban::default_instance_ = NULL;

MagicActionUpdateUrban* MagicActionUpdateUrban::New() const {
  return new MagicActionUpdateUrban;
}

void MagicActionUpdateUrban::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicActionUpdateUrban::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MagicActionUpdateUrban::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MagicActionUpdateUrban::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MagicActionUpdateUrban::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MagicActionUpdateUrban::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MagicActionUpdateUrban::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicActionUpdateUrban* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicActionUpdateUrban*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicActionUpdateUrban::MergeFrom(const MagicActionUpdateUrban& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicActionUpdateUrban::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicActionUpdateUrban::CopyFrom(const MagicActionUpdateUrban& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicActionUpdateUrban::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MagicActionUpdateUrban::Swap(MagicActionUpdateUrban* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicActionUpdateUrban::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicActionUpdateUrban_descriptor_;
  metadata.reflection = MagicActionUpdateUrban_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MagicActionDestroyUrban::kOidFieldNumber;
#endif  // !_MSC_VER

MagicActionDestroyUrban::MagicActionDestroyUrban() {
  SharedCtor();
}

void MagicActionDestroyUrban::InitAsDefaultInstance() {
}

MagicActionDestroyUrban::MagicActionDestroyUrban(const MagicActionDestroyUrban& from) {
  SharedCtor();
  MergeFrom(from);
}

void MagicActionDestroyUrban::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicActionDestroyUrban::~MagicActionDestroyUrban() {
  SharedDtor();
}

void MagicActionDestroyUrban::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MagicActionDestroyUrban::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicActionDestroyUrban_descriptor_;
}

const MagicActionDestroyUrban& MagicActionDestroyUrban::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MagicActionDestroyUrban* MagicActionDestroyUrban::default_instance_ = NULL;

MagicActionDestroyUrban* MagicActionDestroyUrban::New() const {
  return new MagicActionDestroyUrban;
}

void MagicActionDestroyUrban::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicActionDestroyUrban::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MagicActionDestroyUrban::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MagicActionDestroyUrban::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MagicActionDestroyUrban::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MagicActionDestroyUrban::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MagicActionDestroyUrban::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicActionDestroyUrban* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicActionDestroyUrban*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicActionDestroyUrban::MergeFrom(const MagicActionDestroyUrban& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicActionDestroyUrban::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicActionDestroyUrban::CopyFrom(const MagicActionDestroyUrban& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicActionDestroyUrban::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MagicActionDestroyUrban::Swap(MagicActionDestroyUrban* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicActionDestroyUrban::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicActionDestroyUrban_descriptor_;
  metadata.reflection = MagicActionDestroyUrban_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanMagicAction::kCreateUrbanFieldNumber;
const int MsgUrbanMagicAction::kUpdateUrbanFieldNumber;
const int MsgUrbanMagicAction::kDestroyUrbanFieldNumber;
#endif  // !_MSC_VER

MsgUrbanMagicAction::MsgUrbanMagicAction() {
  SharedCtor();
}

void MsgUrbanMagicAction::InitAsDefaultInstance() {
  create_urban_ = const_cast< ::MsgsSimToClient::MagicActionCreateUrban*>(&::MsgsSimToClient::MagicActionCreateUrban::default_instance());
  update_urban_ = const_cast< ::MsgsSimToClient::MagicActionUpdateUrban*>(&::MsgsSimToClient::MagicActionUpdateUrban::default_instance());
  destroy_urban_ = const_cast< ::MsgsSimToClient::MagicActionDestroyUrban*>(&::MsgsSimToClient::MagicActionDestroyUrban::default_instance());
}

MsgUrbanMagicAction::MsgUrbanMagicAction(const MsgUrbanMagicAction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanMagicAction::SharedCtor() {
  _cached_size_ = 0;
  create_urban_ = NULL;
  update_urban_ = NULL;
  destroy_urban_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanMagicAction::~MsgUrbanMagicAction() {
  SharedDtor();
}

void MsgUrbanMagicAction::SharedDtor() {
  if (this != default_instance_) {
    delete create_urban_;
    delete update_urban_;
    delete destroy_urban_;
  }
}

const ::google::protobuf::Descriptor* MsgUrbanMagicAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanMagicAction_descriptor_;
}

const MsgUrbanMagicAction& MsgUrbanMagicAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanMagicAction* MsgUrbanMagicAction::default_instance_ = NULL;

MsgUrbanMagicAction* MsgUrbanMagicAction::New() const {
  return new MsgUrbanMagicAction;
}

void MsgUrbanMagicAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (create_urban_ != NULL) create_urban_->::MsgsSimToClient::MagicActionCreateUrban::Clear();
    }
    if (_has_bit(1)) {
      if (update_urban_ != NULL) update_urban_->::MsgsSimToClient::MagicActionUpdateUrban::Clear();
    }
    if (_has_bit(2)) {
      if (destroy_urban_ != NULL) destroy_urban_->::MsgsSimToClient::MagicActionDestroyUrban::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanMagicAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsSimToClient.MagicActionCreateUrban create_urban = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_create_urban()));
        if (input->ExpectTag(18)) goto parse_update_urban;
        break;
      }
      
      // optional .MsgsSimToClient.MagicActionUpdateUrban update_urban = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_update_urban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_update_urban()));
        if (input->ExpectTag(26)) goto parse_destroy_urban;
        break;
      }
      
      // optional .MsgsSimToClient.MagicActionDestroyUrban destroy_urban = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_destroy_urban:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_destroy_urban()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanMagicAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanMagicAction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsSimToClient.MagicActionCreateUrban create_urban = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->create_urban(), output);
  }
  
  // optional .MsgsSimToClient.MagicActionUpdateUrban update_urban = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->update_urban(), output);
  }
  
  // optional .MsgsSimToClient.MagicActionDestroyUrban destroy_urban = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->destroy_urban(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanMagicAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsSimToClient.MagicActionCreateUrban create_urban = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->create_urban(), target);
  }
  
  // optional .MsgsSimToClient.MagicActionUpdateUrban update_urban = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->update_urban(), target);
  }
  
  // optional .MsgsSimToClient.MagicActionDestroyUrban destroy_urban = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->destroy_urban(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanMagicAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsSimToClient.MagicActionCreateUrban create_urban = 1;
    if (has_create_urban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_urban());
    }
    
    // optional .MsgsSimToClient.MagicActionUpdateUrban update_urban = 2;
    if (has_update_urban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_urban());
    }
    
    // optional .MsgsSimToClient.MagicActionDestroyUrban destroy_urban = 3;
    if (has_destroy_urban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_urban());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanMagicAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanMagicAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanMagicAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanMagicAction::MergeFrom(const MsgUrbanMagicAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_create_urban()->::MsgsSimToClient::MagicActionCreateUrban::MergeFrom(from.create_urban());
    }
    if (from._has_bit(1)) {
      mutable_update_urban()->::MsgsSimToClient::MagicActionUpdateUrban::MergeFrom(from.update_urban());
    }
    if (from._has_bit(2)) {
      mutable_destroy_urban()->::MsgsSimToClient::MagicActionDestroyUrban::MergeFrom(from.destroy_urban());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanMagicAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanMagicAction::CopyFrom(const MsgUrbanMagicAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanMagicAction::IsInitialized() const {
  
  if (has_create_urban()) {
    if (!this->create_urban().IsInitialized()) return false;
  }
  if (has_update_urban()) {
    if (!this->update_urban().IsInitialized()) return false;
  }
  if (has_destroy_urban()) {
    if (!this->destroy_urban().IsInitialized()) return false;
  }
  return true;
}

void MsgUrbanMagicAction::Swap(MsgUrbanMagicAction* other) {
  if (other != this) {
    std::swap(create_urban_, other->create_urban_);
    std::swap(update_urban_, other->update_urban_);
    std::swap(destroy_urban_, other->destroy_urban_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanMagicAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanMagicAction_descriptor_;
  metadata.reflection = MsgUrbanMagicAction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgUrbanMagicActionAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanMagicActionAck_ErrorCode_descriptor_;
}
bool MsgUrbanMagicActionAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::no_error;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_invalid_urban;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_invalid_id;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_invalid_camp;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_invalid_localisation;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_missing_specific_attributes;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::error_invalid_specific_attributes;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::ErrorCode_MIN;
const MsgUrbanMagicActionAck_ErrorCode MsgUrbanMagicActionAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgUrbanMagicActionAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgUrbanMagicActionAck::MsgUrbanMagicActionAck() {
  SharedCtor();
}

void MsgUrbanMagicActionAck::InitAsDefaultInstance() {
}

MsgUrbanMagicActionAck::MsgUrbanMagicActionAck(const MsgUrbanMagicActionAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanMagicActionAck::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanMagicActionAck::~MsgUrbanMagicActionAck() {
  SharedDtor();
}

void MsgUrbanMagicActionAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanMagicActionAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanMagicActionAck_descriptor_;
}

const MsgUrbanMagicActionAck& MsgUrbanMagicActionAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanMagicActionAck* MsgUrbanMagicActionAck::default_instance_ = NULL;

MsgUrbanMagicActionAck* MsgUrbanMagicActionAck::New() const {
  return new MsgUrbanMagicActionAck;
}

void MsgUrbanMagicActionAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanMagicActionAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsSimToClient.MsgUrbanMagicActionAck.ErrorCode error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::MsgUrbanMagicActionAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::MsgUrbanMagicActionAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanMagicActionAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanMagicActionAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsSimToClient.MsgUrbanMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanMagicActionAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsSimToClient.MsgUrbanMagicActionAck.ErrorCode error_code = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanMagicActionAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsSimToClient.MsgUrbanMagicActionAck.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanMagicActionAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanMagicActionAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanMagicActionAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanMagicActionAck::MergeFrom(const MsgUrbanMagicActionAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanMagicActionAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanMagicActionAck::CopyFrom(const MsgUrbanMagicActionAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanMagicActionAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgUrbanMagicActionAck::Swap(MsgUrbanMagicActionAck* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanMagicActionAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanMagicActionAck_descriptor_;
  metadata.reflection = MsgUrbanMagicActionAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanAttributes::kVegetationFieldNumber;
const int MsgUrbanAttributes::kSoilFieldNumber;
const int MsgUrbanAttributes::kArchitectureFieldNumber;
const int MsgUrbanAttributes::kColorFieldNumber;
#endif  // !_MSC_VER

MsgUrbanAttributes::MsgUrbanAttributes() {
  SharedCtor();
}

void MsgUrbanAttributes::InitAsDefaultInstance() {
  vegetation_ = const_cast< ::MsgsSimToClient::MsgUrbanAttributeVegetation*>(&::MsgsSimToClient::MsgUrbanAttributeVegetation::default_instance());
  soil_ = const_cast< ::MsgsSimToClient::MsgUrbanAttributeSoil*>(&::MsgsSimToClient::MsgUrbanAttributeSoil::default_instance());
  architecture_ = const_cast< ::MsgsSimToClient::MsgUrbanAttributeArchitecture*>(&::MsgsSimToClient::MsgUrbanAttributeArchitecture::default_instance());
  color_ = const_cast< ::MsgsSimToClient::MsgColorRGBA*>(&::MsgsSimToClient::MsgColorRGBA::default_instance());
}

MsgUrbanAttributes::MsgUrbanAttributes(const MsgUrbanAttributes& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanAttributes::SharedCtor() {
  _cached_size_ = 0;
  vegetation_ = NULL;
  soil_ = NULL;
  architecture_ = NULL;
  color_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanAttributes::~MsgUrbanAttributes() {
  SharedDtor();
}

void MsgUrbanAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete vegetation_;
    delete soil_;
    delete architecture_;
    delete color_;
  }
}

const ::google::protobuf::Descriptor* MsgUrbanAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanAttributes_descriptor_;
}

const MsgUrbanAttributes& MsgUrbanAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanAttributes* MsgUrbanAttributes::default_instance_ = NULL;

MsgUrbanAttributes* MsgUrbanAttributes::New() const {
  return new MsgUrbanAttributes;
}

void MsgUrbanAttributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (vegetation_ != NULL) vegetation_->::MsgsSimToClient::MsgUrbanAttributeVegetation::Clear();
    }
    if (_has_bit(1)) {
      if (soil_ != NULL) soil_->::MsgsSimToClient::MsgUrbanAttributeSoil::Clear();
    }
    if (_has_bit(2)) {
      if (architecture_ != NULL) architecture_->::MsgsSimToClient::MsgUrbanAttributeArchitecture::Clear();
    }
    if (_has_bit(3)) {
      if (color_ != NULL) color_->::MsgsSimToClient::MsgColorRGBA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsSimToClient.MsgUrbanAttributeVegetation vegetation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_vegetation()));
        if (input->ExpectTag(18)) goto parse_soil;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanAttributeSoil soil = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_soil:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_soil()));
        if (input->ExpectTag(26)) goto parse_architecture;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanAttributeArchitecture architecture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_architecture:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_architecture()));
        if (input->ExpectTag(34)) goto parse_color;
        break;
      }
      
      // optional .MsgsSimToClient.MsgColorRGBA color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_color:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_color()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanAttributes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributeVegetation vegetation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->vegetation(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributeSoil soil = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->soil(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributeArchitecture architecture = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->architecture(), output);
  }
  
  // optional .MsgsSimToClient.MsgColorRGBA color = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsSimToClient.MsgUrbanAttributeVegetation vegetation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vegetation(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributeSoil soil = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->soil(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributeArchitecture architecture = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->architecture(), target);
  }
  
  // optional .MsgsSimToClient.MsgColorRGBA color = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanAttributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsSimToClient.MsgUrbanAttributeVegetation vegetation = 1;
    if (has_vegetation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vegetation());
    }
    
    // optional .MsgsSimToClient.MsgUrbanAttributeSoil soil = 2;
    if (has_soil()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soil());
    }
    
    // optional .MsgsSimToClient.MsgUrbanAttributeArchitecture architecture = 3;
    if (has_architecture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->architecture());
    }
    
    // optional .MsgsSimToClient.MsgColorRGBA color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->color());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanAttributes::MergeFrom(const MsgUrbanAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_vegetation()->::MsgsSimToClient::MsgUrbanAttributeVegetation::MergeFrom(from.vegetation());
    }
    if (from._has_bit(1)) {
      mutable_soil()->::MsgsSimToClient::MsgUrbanAttributeSoil::MergeFrom(from.soil());
    }
    if (from._has_bit(2)) {
      mutable_architecture()->::MsgsSimToClient::MsgUrbanAttributeArchitecture::MergeFrom(from.architecture());
    }
    if (from._has_bit(3)) {
      mutable_color()->::MsgsSimToClient::MsgColorRGBA::MergeFrom(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanAttributes::CopyFrom(const MsgUrbanAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanAttributes::IsInitialized() const {
  
  if (has_vegetation()) {
    if (!this->vegetation().IsInitialized()) return false;
  }
  if (has_soil()) {
    if (!this->soil().IsInitialized()) return false;
  }
  if (has_architecture()) {
    if (!this->architecture().IsInitialized()) return false;
  }
  if (has_color()) {
    if (!this->color().IsInitialized()) return false;
  }
  return true;
}

void MsgUrbanAttributes::Swap(MsgUrbanAttributes* other) {
  if (other != this) {
    std::swap(vegetation_, other->vegetation_);
    std::swap(soil_, other->soil_);
    std::swap(architecture_, other->architecture_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanAttributes_descriptor_;
  metadata.reflection = MsgUrbanAttributes_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUrbanCreation::_default_name_;
#ifndef _MSC_VER
const int MsgUrbanCreation::kOidFieldNumber;
const int MsgUrbanCreation::kNameFieldNumber;
const int MsgUrbanCreation::kLocationFieldNumber;
const int MsgUrbanCreation::kAttributesFieldNumber;
#endif  // !_MSC_VER

MsgUrbanCreation::MsgUrbanCreation() {
  SharedCtor();
}

void MsgUrbanCreation::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  attributes_ = const_cast< ::MsgsSimToClient::MsgUrbanAttributes*>(&::MsgsSimToClient::MsgUrbanAttributes::default_instance());
}

MsgUrbanCreation::MsgUrbanCreation(const MsgUrbanCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  name_ = const_cast< ::std::string*>(&_default_name_);
  location_ = NULL;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanCreation::~MsgUrbanCreation() {
  SharedDtor();
}

void MsgUrbanCreation::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete location_;
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgUrbanCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanCreation_descriptor_;
}

const MsgUrbanCreation& MsgUrbanCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanCreation* MsgUrbanCreation::default_instance_ = NULL;

MsgUrbanCreation* MsgUrbanCreation::New() const {
  return new MsgUrbanCreation;
}

void MsgUrbanCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    if (_has_bit(1)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(3)) {
      if (attributes_ != NULL) attributes_->::MsgsSimToClient::MsgUrbanAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_name:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_location;
        break;
      }
      
      // required .Common.MsgLocation location = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanAttributes attributes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required .Common.MsgLocation location = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->location(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributes attributes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->attributes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required string name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required .Common.MsgLocation location = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->location(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanAttributes attributes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attributes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .Common.MsgLocation location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional .MsgsSimToClient.MsgUrbanAttributes attributes = 4;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanCreation::MergeFrom(const MsgUrbanCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_name(from.name());
    }
    if (from._has_bit(2)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(3)) {
      mutable_attributes()->::MsgsSimToClient::MsgUrbanAttributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanCreation::CopyFrom(const MsgUrbanCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgUrbanCreation::Swap(MsgUrbanCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(name_, other->name_);
    std::swap(location_, other->location_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanCreation_descriptor_;
  metadata.reflection = MsgUrbanCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanDetection::kOidFieldNumber;
const int MsgUrbanDetection::kUrbanOidFieldNumber;
const int MsgUrbanDetection::kVisibilityFieldNumber;
#endif  // !_MSC_VER

MsgUrbanDetection::MsgUrbanDetection() {
  SharedCtor();
}

void MsgUrbanDetection::InitAsDefaultInstance() {
}

MsgUrbanDetection::MsgUrbanDetection(const MsgUrbanDetection& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanDetection::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  urban_oid_ = 0u;
  visibility_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanDetection::~MsgUrbanDetection() {
  SharedDtor();
}

void MsgUrbanDetection::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanDetection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanDetection_descriptor_;
}

const MsgUrbanDetection& MsgUrbanDetection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanDetection* MsgUrbanDetection::default_instance_ = NULL;

MsgUrbanDetection* MsgUrbanDetection::New() const {
  return new MsgUrbanDetection;
}

void MsgUrbanDetection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    urban_oid_ = 0u;
    visibility_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanDetection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_urban_oid;
        break;
      }
      
      // required uint32 urban_oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_urban_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &urban_oid_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_visibility;
        break;
      }
      
      // required .Common.EnumUnitVisibility visibility = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_visibility:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumUnitVisibility_IsValid(value)) {
          set_visibility(static_cast< Common::EnumUnitVisibility >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanDetection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanDetection::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required uint32 urban_oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->urban_oid(), output);
  }
  
  // required .Common.EnumUnitVisibility visibility = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->visibility(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanDetection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required uint32 urban_oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->urban_oid(), target);
  }
  
  // required .Common.EnumUnitVisibility visibility = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->visibility(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanDetection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required uint32 urban_oid = 2;
    if (has_urban_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urban_oid());
    }
    
    // required .Common.EnumUnitVisibility visibility = 3;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanDetection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanDetection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanDetection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanDetection::MergeFrom(const MsgUrbanDetection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_urban_oid(from.urban_oid());
    }
    if (from._has_bit(2)) {
      set_visibility(from.visibility());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanDetection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanDetection::CopyFrom(const MsgUrbanDetection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanDetection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MsgUrbanDetection::Swap(MsgUrbanDetection* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(urban_oid_, other->urban_oid_);
    std::swap(visibility_, other->visibility_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanDetection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanDetection_descriptor_;
  metadata.reflection = MsgUrbanDetection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanUpdate::kOidFieldNumber;
const int MsgUrbanUpdate::kLocationFieldNumber;
#endif  // !_MSC_VER

MsgUrbanUpdate::MsgUrbanUpdate() {
  SharedCtor();
}

void MsgUrbanUpdate::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgUrbanUpdate::MsgUrbanUpdate(const MsgUrbanUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanUpdate::~MsgUrbanUpdate() {
  SharedDtor();
}

void MsgUrbanUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgUrbanUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanUpdate_descriptor_;
}

const MsgUrbanUpdate& MsgUrbanUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanUpdate* MsgUrbanUpdate::default_instance_ = NULL;

MsgUrbanUpdate* MsgUrbanUpdate::New() const {
  return new MsgUrbanUpdate;
}

void MsgUrbanUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    if (_has_bit(1)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // optional .Common.MsgLocation location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional .Common.MsgLocation location = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional .Common.MsgLocation location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanUpdate::MergeFrom(const MsgUrbanUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanUpdate::CopyFrom(const MsgUrbanUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgUrbanUpdate::Swap(MsgUrbanUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanUpdate_descriptor_;
  metadata.reflection = MsgUrbanUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUrbanDestruction::kOidFieldNumber;
#endif  // !_MSC_VER

MsgUrbanDestruction::MsgUrbanDestruction() {
  SharedCtor();
}

void MsgUrbanDestruction::InitAsDefaultInstance() {
}

MsgUrbanDestruction::MsgUrbanDestruction(const MsgUrbanDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUrbanDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUrbanDestruction::~MsgUrbanDestruction() {
  SharedDtor();
}

void MsgUrbanDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgUrbanDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUrbanDestruction_descriptor_;
}

const MsgUrbanDestruction& MsgUrbanDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgUrbanDestruction* MsgUrbanDestruction::default_instance_ = NULL;

MsgUrbanDestruction* MsgUrbanDestruction::New() const {
  return new MsgUrbanDestruction;
}

void MsgUrbanDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUrbanDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUrbanDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUrbanDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUrbanDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUrbanDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUrbanDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUrbanDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUrbanDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUrbanDestruction::MergeFrom(const MsgUrbanDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUrbanDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUrbanDestruction::CopyFrom(const MsgUrbanDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUrbanDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgUrbanDestruction::Swap(MsgUrbanDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUrbanDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUrbanDestruction_descriptor_;
  metadata.reflection = MsgUrbanDestruction_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgKnowledgeGroupCreation::_default_type_;
#ifndef _MSC_VER
const int MsgKnowledgeGroupCreation::kOidFieldNumber;
const int MsgKnowledgeGroupCreation::kOidCampFieldNumber;
const int MsgKnowledgeGroupCreation::kOidParentFieldNumber;
const int MsgKnowledgeGroupCreation::kTypeFieldNumber;
const int MsgKnowledgeGroupCreation::kJamFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupCreation::MsgKnowledgeGroupCreation() {
  SharedCtor();
}

void MsgKnowledgeGroupCreation::InitAsDefaultInstance() {
}

MsgKnowledgeGroupCreation::MsgKnowledgeGroupCreation(const MsgKnowledgeGroupCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  oid_camp_ = 0u;
  oid_parent_ = 0u;
  type_ = const_cast< ::std::string*>(&_default_type_);
  jam_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupCreation::~MsgKnowledgeGroupCreation() {
  SharedDtor();
}

void MsgKnowledgeGroupCreation::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupCreation_descriptor_;
}

const MsgKnowledgeGroupCreation& MsgKnowledgeGroupCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupCreation* MsgKnowledgeGroupCreation::default_instance_ = NULL;

MsgKnowledgeGroupCreation* MsgKnowledgeGroupCreation::New() const {
  return new MsgKnowledgeGroupCreation;
}

void MsgKnowledgeGroupCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    oid_camp_ = 0u;
    oid_parent_ = 0u;
    if (_has_bit(3)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    jam_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_camp;
        break;
      }
      
      // required uint32 oid_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_camp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_parent;
        break;
      }
      
      // optional uint32 oid_parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_parent_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }
      
      // required string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(40)) goto parse_jam;
        break;
      }
      
      // optional bool jam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_jam:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &jam_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required uint32 oid_camp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oid_camp(), output);
  }
  
  // optional uint32 oid_parent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oid_parent(), output);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }
  
  // optional bool jam = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->jam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required uint32 oid_camp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oid_camp(), target);
  }
  
  // optional uint32 oid_parent = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oid_parent(), target);
  }
  
  // required string type = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }
  
  // optional bool jam = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->jam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required uint32 oid_camp = 2;
    if (has_oid_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_camp());
    }
    
    // optional uint32 oid_parent = 3;
    if (has_oid_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_parent());
    }
    
    // required string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // optional bool jam = 5;
    if (has_jam()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupCreation::MergeFrom(const MsgKnowledgeGroupCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_camp(from.oid_camp());
    }
    if (from._has_bit(2)) {
      set_oid_parent(from.oid_parent());
    }
    if (from._has_bit(3)) {
      set_type(from.type());
    }
    if (from._has_bit(4)) {
      set_jam(from.jam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupCreation::CopyFrom(const MsgKnowledgeGroupCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void MsgKnowledgeGroupCreation::Swap(MsgKnowledgeGroupCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_camp_, other->oid_camp_);
    std::swap(oid_parent_, other->oid_parent_);
    std::swap(type_, other->type_);
    std::swap(jam_, other->jam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupCreation_descriptor_;
  metadata.reflection = MsgKnowledgeGroupCreation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgKnowledgeGroupUpdate::_default_type_;
#ifndef _MSC_VER
const int MsgKnowledgeGroupUpdate::kOidFieldNumber;
const int MsgKnowledgeGroupUpdate::kOidCampFieldNumber;
const int MsgKnowledgeGroupUpdate::kOidParentFieldNumber;
const int MsgKnowledgeGroupUpdate::kEnabledFieldNumber;
const int MsgKnowledgeGroupUpdate::kTypeFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupUpdate::MsgKnowledgeGroupUpdate() {
  SharedCtor();
}

void MsgKnowledgeGroupUpdate::InitAsDefaultInstance() {
}

MsgKnowledgeGroupUpdate::MsgKnowledgeGroupUpdate(const MsgKnowledgeGroupUpdate& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupUpdate::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  oid_camp_ = 0u;
  oid_parent_ = 0u;
  enabled_ = false;
  type_ = const_cast< ::std::string*>(&_default_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupUpdate::~MsgKnowledgeGroupUpdate() {
  SharedDtor();
}

void MsgKnowledgeGroupUpdate::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupUpdate_descriptor_;
}

const MsgKnowledgeGroupUpdate& MsgKnowledgeGroupUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupUpdate* MsgKnowledgeGroupUpdate::default_instance_ = NULL;

MsgKnowledgeGroupUpdate* MsgKnowledgeGroupUpdate::New() const {
  return new MsgKnowledgeGroupUpdate;
}

void MsgKnowledgeGroupUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    oid_camp_ = 0u;
    oid_parent_ = 0u;
    enabled_ = false;
    if (_has_bit(4)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_camp;
        break;
      }
      
      // optional uint32 oid_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_camp_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_oid_parent;
        break;
      }
      
      // optional uint32 oid_parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_parent_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_enabled;
        break;
      }
      
      // optional bool enabled = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_enabled:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &enabled_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }
      
      // optional string type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupUpdate::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional uint32 oid_camp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oid_camp(), output);
  }
  
  // optional uint32 oid_parent = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oid_parent(), output);
  }
  
  // optional bool enabled = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enabled(), output);
  }
  
  // optional string type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional uint32 oid_camp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oid_camp(), target);
  }
  
  // optional uint32 oid_parent = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oid_parent(), target);
  }
  
  // optional bool enabled = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->enabled(), target);
  }
  
  // optional string type = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional uint32 oid_camp = 2;
    if (has_oid_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_camp());
    }
    
    // optional uint32 oid_parent = 3;
    if (has_oid_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_parent());
    }
    
    // optional bool enabled = 4;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupUpdate::MergeFrom(const MsgKnowledgeGroupUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_camp(from.oid_camp());
    }
    if (from._has_bit(2)) {
      set_oid_parent(from.oid_parent());
    }
    if (from._has_bit(3)) {
      set_enabled(from.enabled());
    }
    if (from._has_bit(4)) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupUpdate::CopyFrom(const MsgKnowledgeGroupUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgKnowledgeGroupUpdate::Swap(MsgKnowledgeGroupUpdate* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_camp_, other->oid_camp_);
    std::swap(oid_parent_, other->oid_parent_);
    std::swap(enabled_, other->enabled_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupUpdate_descriptor_;
  metadata.reflection = MsgKnowledgeGroupUpdate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KnowledgeGroupAck_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KnowledgeGroupAck_ErrorCode_descriptor_;
}
bool KnowledgeGroupAck_ErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::no_error;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::error_invalid_unit;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::error_invalid_superior;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::error_invalid_camp;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::error_invalid_knowledgegroup;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::error_invalid_type;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::ErrorCode_MIN;
const KnowledgeGroupAck_ErrorCode KnowledgeGroupAck::ErrorCode_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

KnowledgeGroupAck::KnowledgeGroupAck() {
  SharedCtor();
}

void KnowledgeGroupAck::InitAsDefaultInstance() {
}

KnowledgeGroupAck::KnowledgeGroupAck(const KnowledgeGroupAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void KnowledgeGroupAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KnowledgeGroupAck::~KnowledgeGroupAck() {
  SharedDtor();
}

void KnowledgeGroupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KnowledgeGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KnowledgeGroupAck_descriptor_;
}

const KnowledgeGroupAck& KnowledgeGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

KnowledgeGroupAck* KnowledgeGroupAck::default_instance_ = NULL;

KnowledgeGroupAck* KnowledgeGroupAck::New() const {
  return new KnowledgeGroupAck;
}

void KnowledgeGroupAck::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KnowledgeGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void KnowledgeGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KnowledgeGroupAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KnowledgeGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KnowledgeGroupAck::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KnowledgeGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KnowledgeGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KnowledgeGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KnowledgeGroupAck::MergeFrom(const KnowledgeGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KnowledgeGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnowledgeGroupAck::CopyFrom(const KnowledgeGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGroupAck::IsInitialized() const {
  
  return true;
}

void KnowledgeGroupAck::Swap(KnowledgeGroupAck* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KnowledgeGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KnowledgeGroupAck_descriptor_;
  metadata.reflection = KnowledgeGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKnowledgeGroupAck::kOidFieldNumber;
const int MsgKnowledgeGroupAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupAck::MsgKnowledgeGroupAck() {
  SharedCtor();
}

void MsgKnowledgeGroupAck::InitAsDefaultInstance() {
}

MsgKnowledgeGroupAck::MsgKnowledgeGroupAck(const MsgKnowledgeGroupAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupAck::~MsgKnowledgeGroupAck() {
  SharedDtor();
}

void MsgKnowledgeGroupAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupAck_descriptor_;
}

const MsgKnowledgeGroupAck& MsgKnowledgeGroupAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupAck* MsgKnowledgeGroupAck::default_instance_ = NULL;

MsgKnowledgeGroupAck* MsgKnowledgeGroupAck::New() const {
  return new MsgKnowledgeGroupAck;
}

void MsgKnowledgeGroupAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::KnowledgeGroupAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::KnowledgeGroupAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupAck::MergeFrom(const MsgKnowledgeGroupAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupAck::CopyFrom(const MsgKnowledgeGroupAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgKnowledgeGroupAck::Swap(MsgKnowledgeGroupAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupAck_descriptor_;
  metadata.reflection = MsgKnowledgeGroupAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKnowledgeGroupCreationAck::kOidFieldNumber;
const int MsgKnowledgeGroupCreationAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupCreationAck::MsgKnowledgeGroupCreationAck() {
  SharedCtor();
}

void MsgKnowledgeGroupCreationAck::InitAsDefaultInstance() {
}

MsgKnowledgeGroupCreationAck::MsgKnowledgeGroupCreationAck(const MsgKnowledgeGroupCreationAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupCreationAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupCreationAck::~MsgKnowledgeGroupCreationAck() {
  SharedDtor();
}

void MsgKnowledgeGroupCreationAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupCreationAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupCreationAck_descriptor_;
}

const MsgKnowledgeGroupCreationAck& MsgKnowledgeGroupCreationAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupCreationAck* MsgKnowledgeGroupCreationAck::default_instance_ = NULL;

MsgKnowledgeGroupCreationAck* MsgKnowledgeGroupCreationAck::New() const {
  return new MsgKnowledgeGroupCreationAck;
}

void MsgKnowledgeGroupCreationAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupCreationAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::KnowledgeGroupAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::KnowledgeGroupAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupCreationAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupCreationAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupCreationAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupCreationAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupCreationAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupCreationAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupCreationAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupCreationAck::MergeFrom(const MsgKnowledgeGroupCreationAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupCreationAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupCreationAck::CopyFrom(const MsgKnowledgeGroupCreationAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupCreationAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgKnowledgeGroupCreationAck::Swap(MsgKnowledgeGroupCreationAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupCreationAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupCreationAck_descriptor_;
  metadata.reflection = MsgKnowledgeGroupCreationAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKnowledgeGroupUpdateAck::kOidFieldNumber;
const int MsgKnowledgeGroupUpdateAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupUpdateAck::MsgKnowledgeGroupUpdateAck() {
  SharedCtor();
}

void MsgKnowledgeGroupUpdateAck::InitAsDefaultInstance() {
}

MsgKnowledgeGroupUpdateAck::MsgKnowledgeGroupUpdateAck(const MsgKnowledgeGroupUpdateAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupUpdateAck::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupUpdateAck::~MsgKnowledgeGroupUpdateAck() {
  SharedDtor();
}

void MsgKnowledgeGroupUpdateAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupUpdateAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupUpdateAck_descriptor_;
}

const MsgKnowledgeGroupUpdateAck& MsgKnowledgeGroupUpdateAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupUpdateAck* MsgKnowledgeGroupUpdateAck::default_instance_ = NULL;

MsgKnowledgeGroupUpdateAck* MsgKnowledgeGroupUpdateAck::New() const {
  return new MsgKnowledgeGroupUpdateAck;
}

void MsgKnowledgeGroupUpdateAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupUpdateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::KnowledgeGroupAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::KnowledgeGroupAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupUpdateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupUpdateAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupUpdateAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupUpdateAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required .MsgsSimToClient.KnowledgeGroupAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupUpdateAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupUpdateAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupUpdateAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupUpdateAck::MergeFrom(const MsgKnowledgeGroupUpdateAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupUpdateAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupUpdateAck::CopyFrom(const MsgKnowledgeGroupUpdateAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupUpdateAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgKnowledgeGroupUpdateAck::Swap(MsgKnowledgeGroupUpdateAck* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupUpdateAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupUpdateAck_descriptor_;
  metadata.reflection = MsgKnowledgeGroupUpdateAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgKnowledgeGroupDestruction::kOidFieldNumber;
const int MsgKnowledgeGroupDestruction::kOidCampFieldNumber;
#endif  // !_MSC_VER

MsgKnowledgeGroupDestruction::MsgKnowledgeGroupDestruction() {
  SharedCtor();
}

void MsgKnowledgeGroupDestruction::InitAsDefaultInstance() {
}

MsgKnowledgeGroupDestruction::MsgKnowledgeGroupDestruction(const MsgKnowledgeGroupDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgKnowledgeGroupDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  oid_camp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgKnowledgeGroupDestruction::~MsgKnowledgeGroupDestruction() {
  SharedDtor();
}

void MsgKnowledgeGroupDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgKnowledgeGroupDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgKnowledgeGroupDestruction_descriptor_;
}

const MsgKnowledgeGroupDestruction& MsgKnowledgeGroupDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgKnowledgeGroupDestruction* MsgKnowledgeGroupDestruction::default_instance_ = NULL;

MsgKnowledgeGroupDestruction* MsgKnowledgeGroupDestruction::New() const {
  return new MsgKnowledgeGroupDestruction;
}

void MsgKnowledgeGroupDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    oid_camp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgKnowledgeGroupDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_oid_camp;
        break;
      }
      
      // required uint32 oid_camp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid_camp:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_camp_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgKnowledgeGroupDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgKnowledgeGroupDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // required uint32 oid_camp = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oid_camp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgKnowledgeGroupDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // required uint32 oid_camp = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oid_camp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgKnowledgeGroupDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // required uint32 oid_camp = 2;
    if (has_oid_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid_camp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgKnowledgeGroupDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgKnowledgeGroupDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgKnowledgeGroupDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgKnowledgeGroupDestruction::MergeFrom(const MsgKnowledgeGroupDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      set_oid_camp(from.oid_camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgKnowledgeGroupDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgKnowledgeGroupDestruction::CopyFrom(const MsgKnowledgeGroupDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgKnowledgeGroupDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgKnowledgeGroupDestruction::Swap(MsgKnowledgeGroupDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(oid_camp_, other->oid_camp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgKnowledgeGroupDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgKnowledgeGroupDestruction_descriptor_;
  metadata.reflection = MsgKnowledgeGroupDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlGlobalMeteo::kAttributesFieldNumber;
const int MsgControlGlobalMeteo::kOidFieldNumber;
#endif  // !_MSC_VER

MsgControlGlobalMeteo::MsgControlGlobalMeteo() {
  SharedCtor();
}

void MsgControlGlobalMeteo::InitAsDefaultInstance() {
  attributes_ = const_cast< ::Common::MsgMeteoAttributes*>(&::Common::MsgMeteoAttributes::default_instance());
}

MsgControlGlobalMeteo::MsgControlGlobalMeteo(const MsgControlGlobalMeteo& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlGlobalMeteo::SharedCtor() {
  _cached_size_ = 0;
  attributes_ = NULL;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlGlobalMeteo::~MsgControlGlobalMeteo() {
  SharedDtor();
}

void MsgControlGlobalMeteo::SharedDtor() {
  if (this != default_instance_) {
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgControlGlobalMeteo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlGlobalMeteo_descriptor_;
}

const MsgControlGlobalMeteo& MsgControlGlobalMeteo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlGlobalMeteo* MsgControlGlobalMeteo::default_instance_ = NULL;

MsgControlGlobalMeteo* MsgControlGlobalMeteo::New() const {
  return new MsgControlGlobalMeteo;
}

void MsgControlGlobalMeteo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (attributes_ != NULL) attributes_->::Common::MsgMeteoAttributes::Clear();
    }
    oid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlGlobalMeteo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgMeteoAttributes attributes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectTag(16)) goto parse_oid;
        break;
      }
      
      // required uint32 oid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_oid:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlGlobalMeteo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlGlobalMeteo::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgMeteoAttributes attributes = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->attributes(), output);
  }
  
  // required uint32 oid = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlGlobalMeteo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgMeteoAttributes attributes = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attributes(), target);
  }
  
  // required uint32 oid = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlGlobalMeteo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgMeteoAttributes attributes = 1;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
    // required uint32 oid = 2;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlGlobalMeteo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlGlobalMeteo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlGlobalMeteo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlGlobalMeteo::MergeFrom(const MsgControlGlobalMeteo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_attributes()->::Common::MsgMeteoAttributes::MergeFrom(from.attributes());
    }
    if (from._has_bit(1)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlGlobalMeteo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlGlobalMeteo::CopyFrom(const MsgControlGlobalMeteo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlGlobalMeteo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgControlGlobalMeteo::Swap(MsgControlGlobalMeteo* other) {
  if (other != this) {
    std::swap(attributes_, other->attributes_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlGlobalMeteo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlGlobalMeteo_descriptor_;
  metadata.reflection = MsgControlGlobalMeteo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlLocalMeteoCreation::kOidFieldNumber;
const int MsgControlLocalMeteoCreation::kTopLeftCoordinateFieldNumber;
const int MsgControlLocalMeteoCreation::kBottomRightCoordinateFieldNumber;
const int MsgControlLocalMeteoCreation::kAttributesFieldNumber;
#endif  // !_MSC_VER

MsgControlLocalMeteoCreation::MsgControlLocalMeteoCreation() {
  SharedCtor();
}

void MsgControlLocalMeteoCreation::InitAsDefaultInstance() {
  top_left_coordinate_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  bottom_right_coordinate_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  attributes_ = const_cast< ::Common::MsgMeteoAttributes*>(&::Common::MsgMeteoAttributes::default_instance());
}

MsgControlLocalMeteoCreation::MsgControlLocalMeteoCreation(const MsgControlLocalMeteoCreation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlLocalMeteoCreation::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  top_left_coordinate_ = NULL;
  bottom_right_coordinate_ = NULL;
  attributes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlLocalMeteoCreation::~MsgControlLocalMeteoCreation() {
  SharedDtor();
}

void MsgControlLocalMeteoCreation::SharedDtor() {
  if (this != default_instance_) {
    delete top_left_coordinate_;
    delete bottom_right_coordinate_;
    delete attributes_;
  }
}

const ::google::protobuf::Descriptor* MsgControlLocalMeteoCreation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlLocalMeteoCreation_descriptor_;
}

const MsgControlLocalMeteoCreation& MsgControlLocalMeteoCreation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlLocalMeteoCreation* MsgControlLocalMeteoCreation::default_instance_ = NULL;

MsgControlLocalMeteoCreation* MsgControlLocalMeteoCreation::New() const {
  return new MsgControlLocalMeteoCreation;
}

void MsgControlLocalMeteoCreation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
    if (_has_bit(1)) {
      if (top_left_coordinate_ != NULL) top_left_coordinate_->::Common::MsgCoordLatLong::Clear();
    }
    if (_has_bit(2)) {
      if (bottom_right_coordinate_ != NULL) bottom_right_coordinate_->::Common::MsgCoordLatLong::Clear();
    }
    if (_has_bit(3)) {
      if (attributes_ != NULL) attributes_->::Common::MsgMeteoAttributes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlLocalMeteoCreation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_top_left_coordinate;
        break;
      }
      
      // optional .Common.MsgCoordLatLong top_left_coordinate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_top_left_coordinate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_top_left_coordinate()));
        if (input->ExpectTag(26)) goto parse_bottom_right_coordinate;
        break;
      }
      
      // optional .Common.MsgCoordLatLong bottom_right_coordinate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bottom_right_coordinate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_bottom_right_coordinate()));
        if (input->ExpectTag(34)) goto parse_attributes;
        break;
      }
      
      // optional .Common.MsgMeteoAttributes attributes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_attributes()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlLocalMeteoCreation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlLocalMeteoCreation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  // optional .Common.MsgCoordLatLong top_left_coordinate = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->top_left_coordinate(), output);
  }
  
  // optional .Common.MsgCoordLatLong bottom_right_coordinate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->bottom_right_coordinate(), output);
  }
  
  // optional .Common.MsgMeteoAttributes attributes = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->attributes(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlLocalMeteoCreation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  // optional .Common.MsgCoordLatLong top_left_coordinate = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_left_coordinate(), target);
  }
  
  // optional .Common.MsgCoordLatLong bottom_right_coordinate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bottom_right_coordinate(), target);
  }
  
  // optional .Common.MsgMeteoAttributes attributes = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attributes(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlLocalMeteoCreation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
    // optional .Common.MsgCoordLatLong top_left_coordinate = 2;
    if (has_top_left_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_left_coordinate());
    }
    
    // optional .Common.MsgCoordLatLong bottom_right_coordinate = 3;
    if (has_bottom_right_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottom_right_coordinate());
    }
    
    // optional .Common.MsgMeteoAttributes attributes = 4;
    if (has_attributes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attributes());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlLocalMeteoCreation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlLocalMeteoCreation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlLocalMeteoCreation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlLocalMeteoCreation::MergeFrom(const MsgControlLocalMeteoCreation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
    if (from._has_bit(1)) {
      mutable_top_left_coordinate()->::Common::MsgCoordLatLong::MergeFrom(from.top_left_coordinate());
    }
    if (from._has_bit(2)) {
      mutable_bottom_right_coordinate()->::Common::MsgCoordLatLong::MergeFrom(from.bottom_right_coordinate());
    }
    if (from._has_bit(3)) {
      mutable_attributes()->::Common::MsgMeteoAttributes::MergeFrom(from.attributes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlLocalMeteoCreation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlLocalMeteoCreation::CopyFrom(const MsgControlLocalMeteoCreation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlLocalMeteoCreation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_top_left_coordinate()) {
    if (!this->top_left_coordinate().IsInitialized()) return false;
  }
  if (has_bottom_right_coordinate()) {
    if (!this->bottom_right_coordinate().IsInitialized()) return false;
  }
  if (has_attributes()) {
    if (!this->attributes().IsInitialized()) return false;
  }
  return true;
}

void MsgControlLocalMeteoCreation::Swap(MsgControlLocalMeteoCreation* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(top_left_coordinate_, other->top_left_coordinate_);
    std::swap(bottom_right_coordinate_, other->bottom_right_coordinate_);
    std::swap(attributes_, other->attributes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlLocalMeteoCreation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlLocalMeteoCreation_descriptor_;
  metadata.reflection = MsgControlLocalMeteoCreation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlLocalMeteoDestruction::kOidFieldNumber;
#endif  // !_MSC_VER

MsgControlLocalMeteoDestruction::MsgControlLocalMeteoDestruction() {
  SharedCtor();
}

void MsgControlLocalMeteoDestruction::InitAsDefaultInstance() {
}

MsgControlLocalMeteoDestruction::MsgControlLocalMeteoDestruction(const MsgControlLocalMeteoDestruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlLocalMeteoDestruction::SharedCtor() {
  _cached_size_ = 0;
  oid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlLocalMeteoDestruction::~MsgControlLocalMeteoDestruction() {
  SharedDtor();
}

void MsgControlLocalMeteoDestruction::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlLocalMeteoDestruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlLocalMeteoDestruction_descriptor_;
}

const MsgControlLocalMeteoDestruction& MsgControlLocalMeteoDestruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgControlLocalMeteoDestruction* MsgControlLocalMeteoDestruction::default_instance_ = NULL;

MsgControlLocalMeteoDestruction* MsgControlLocalMeteoDestruction::New() const {
  return new MsgControlLocalMeteoDestruction;
}

void MsgControlLocalMeteoDestruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    oid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlLocalMeteoDestruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 oid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &oid_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlLocalMeteoDestruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlLocalMeteoDestruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlLocalMeteoDestruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 oid = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlLocalMeteoDestruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 oid = 1;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlLocalMeteoDestruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlLocalMeteoDestruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlLocalMeteoDestruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlLocalMeteoDestruction::MergeFrom(const MsgControlLocalMeteoDestruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlLocalMeteoDestruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlLocalMeteoDestruction::CopyFrom(const MsgControlLocalMeteoDestruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlLocalMeteoDestruction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlLocalMeteoDestruction::Swap(MsgControlLocalMeteoDestruction* other) {
  if (other != this) {
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlLocalMeteoDestruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlLocalMeteoDestruction_descriptor_;
  metadata.reflection = MsgControlLocalMeteoDestruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSimToClient_Content::kUnitOrderAckFieldNumber;
const int MsgSimToClient_Content::kAutomatOrderAckFieldNumber;
const int MsgSimToClient_Content::kPopulationOrderAckFieldNumber;
const int MsgSimToClient_Content::kFragOrderAckFieldNumber;
const int MsgSimToClient_Content::kSetAutomatModeAckFieldNumber;
const int MsgSimToClient_Content::kUnitCreationRequestAckFieldNumber;
const int MsgSimToClient_Content::kMagicActionAckFieldNumber;
const int MsgSimToClient_Content::kUnitMagicActionAckFieldNumber;
const int MsgSimToClient_Content::kObjectMagicActionAckFieldNumber;
const int MsgSimToClient_Content::kPopulationMagicActionAckFieldNumber;
const int MsgSimToClient_Content::kChangeDiplomacyAckFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeKnowledgeGroupAckFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeLogisticLinksAckFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeSuperiorAckFieldNumber;
const int MsgSimToClient_Content::kUnitChangeSuperiorAckFieldNumber;
const int MsgSimToClient_Content::kLogSupplyPushFlowAckFieldNumber;
const int MsgSimToClient_Content::kLogSupplyChangeQuotasAckFieldNumber;
const int MsgSimToClient_Content::kControlInformationFieldNumber;
const int MsgSimToClient_Content::kControlProfilingInformationFieldNumber;
const int MsgSimToClient_Content::kControlBeginTickFieldNumber;
const int MsgSimToClient_Content::kControlEndTickFieldNumber;
const int MsgSimToClient_Content::kControlStopAckFieldNumber;
const int MsgSimToClient_Content::kControlPauseAckFieldNumber;
const int MsgSimToClient_Content::kControlResumeAckFieldNumber;
const int MsgSimToClient_Content::kControlChangeTimeFactorAckFieldNumber;
const int MsgSimToClient_Content::kControlDateTimeChangeAckFieldNumber;
const int MsgSimToClient_Content::kControlCheckpointSaveEndFieldNumber;
const int MsgSimToClient_Content::kFormationCreationFieldNumber;
const int MsgSimToClient_Content::kSideCreationFieldNumber;
const int MsgSimToClient_Content::kAutomatCreationFieldNumber;
const int MsgSimToClient_Content::kAutomatAttributesFieldNumber;
const int MsgSimToClient_Content::kUnitCreationFieldNumber;
const int MsgSimToClient_Content::kUnitAttributesFieldNumber;
const int MsgSimToClient_Content::kUnitPathfindFieldNumber;
const int MsgSimToClient_Content::kUnitDestructionFieldNumber;
const int MsgSimToClient_Content::kUnitEnvironmentTypeFieldNumber;
const int MsgSimToClient_Content::kChangeDiplomacyFieldNumber;
const int MsgSimToClient_Content::kUnitChangeSuperiorFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeLogisticLinksFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeKnowledgeGroupFieldNumber;
const int MsgSimToClient_Content::kAutomatChangeSuperiorFieldNumber;
const int MsgSimToClient_Content::kUnitKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kUnitKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kUnitKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kStartUnitFireFieldNumber;
const int MsgSimToClient_Content::kStopUnitFireFieldNumber;
const int MsgSimToClient_Content::kStartPopulationFireFieldNumber;
const int MsgSimToClient_Content::kStopPopulationFireFieldNumber;
const int MsgSimToClient_Content::kExplosionFieldNumber;
const int MsgSimToClient_Content::kStartFireEffectFieldNumber;
const int MsgSimToClient_Content::kStopFireEffectFieldNumber;
const int MsgSimToClient_Content::kReportFieldNumber;
const int MsgSimToClient_Content::kInvalidateReportFieldNumber;
const int MsgSimToClient_Content::kTraceFieldNumber;
const int MsgSimToClient_Content::kDecisionalStateFieldNumber;
const int MsgSimToClient_Content::kDebugPointsFieldNumber;
const int MsgSimToClient_Content::kUnitVisionConesFieldNumber;
const int MsgSimToClient_Content::kUnitDetectionFieldNumber;
const int MsgSimToClient_Content::kObjectDetectionFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationDetectionFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowDetectionFieldNumber;
const int MsgSimToClient_Content::kUnitOrderFieldNumber;
const int MsgSimToClient_Content::kAutomatOrderFieldNumber;
const int MsgSimToClient_Content::kPopulationOrderFieldNumber;
const int MsgSimToClient_Content::kObjectCreationFieldNumber;
const int MsgSimToClient_Content::kObjectDestructionFieldNumber;
const int MsgSimToClient_Content::kObjectUpdateFieldNumber;
const int MsgSimToClient_Content::kObjectKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kObjectKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kObjectKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kLogMedicalHandlingCreationFieldNumber;
const int MsgSimToClient_Content::kLogMedicalHandlingUpdateFieldNumber;
const int MsgSimToClient_Content::kLogMedicalHandlingDestructionFieldNumber;
const int MsgSimToClient_Content::kLogMedicalStateFieldNumber;
const int MsgSimToClient_Content::kLogMaintenanceHandlingCreationFieldNumber;
const int MsgSimToClient_Content::kLogMaintenanceHandlingUpdateFieldNumber;
const int MsgSimToClient_Content::kLogMaintenanceHandlingDestructionFieldNumber;
const int MsgSimToClient_Content::kLogMaintenanceStateFieldNumber;
const int MsgSimToClient_Content::kLogSupplyHandlingCreationFieldNumber;
const int MsgSimToClient_Content::kLogSupplyHandlingUpdateFieldNumber;
const int MsgSimToClient_Content::kLogSupplyHandlingDestructionFieldNumber;
const int MsgSimToClient_Content::kLogSupplyStateFieldNumber;
const int MsgSimToClient_Content::kLogSupplyQuotasFieldNumber;
const int MsgSimToClient_Content::kPopulationCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationUpdateFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationDestructionFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationUpdateFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowDestructionFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowUpdateFieldNumber;
const int MsgSimToClient_Content::kPopulationKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kPopulationKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kPopulationConcentrationKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kPopulationFlowKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kFolkCreationFieldNumber;
const int MsgSimToClient_Content::kFolkGraphUpdateFieldNumber;
const int MsgSimToClient_Content::kControlGlobalMeteoAckFieldNumber;
const int MsgSimToClient_Content::kControlLocalMeteoAckFieldNumber;
const int MsgSimToClient_Content::kControlCheckpointSaveBeginFieldNumber;
const int MsgSimToClient_Content::kControlCheckpointSetFrequencyAckFieldNumber;
const int MsgSimToClient_Content::kControlCheckpointSaveNowAckFieldNumber;
const int MsgSimToClient_Content::kControlSendCurrentStateBeginFieldNumber;
const int MsgSimToClient_Content::kControlSendCurrentStateEndFieldNumber;
const int MsgSimToClient_Content::kUrbanCreationFieldNumber;
const int MsgSimToClient_Content::kUrbanKnowledgeCreationFieldNumber;
const int MsgSimToClient_Content::kUrbanKnowledgeUpdateFieldNumber;
const int MsgSimToClient_Content::kUrbanKnowledgeDestructionFieldNumber;
const int MsgSimToClient_Content::kStockResourceFieldNumber;
const int MsgSimToClient_Content::kUrbanDetectionFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupAckFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupCreationFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupUpdateFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupCreationAckFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupUpdateAckFieldNumber;
const int MsgSimToClient_Content::kKnowledgeGroupDestructionFieldNumber;
const int MsgSimToClient_Content::kActionCreateFireOrderAckFieldNumber;
const int MsgSimToClient_Content::kControlGlobalMeteoFieldNumber;
const int MsgSimToClient_Content::kControlLocalMeteoCreationFieldNumber;
const int MsgSimToClient_Content::kControlLocalMeteoDestructionFieldNumber;
#endif  // !_MSC_VER

MsgSimToClient_Content::MsgSimToClient_Content() {
  SharedCtor();
}

void MsgSimToClient_Content::InitAsDefaultInstance() {
  unit_order_ack_ = const_cast< ::MsgsSimToClient::MsgUnitOrderAck*>(&::MsgsSimToClient::MsgUnitOrderAck::default_instance());
  automat_order_ack_ = const_cast< ::MsgsSimToClient::MsgAutomatOrderAck*>(&::MsgsSimToClient::MsgAutomatOrderAck::default_instance());
  population_order_ack_ = const_cast< ::MsgsSimToClient::MsgPopulationOrderAck*>(&::MsgsSimToClient::MsgPopulationOrderAck::default_instance());
  frag_order_ack_ = const_cast< ::MsgsSimToClient::MsgFragOrderAck*>(&::MsgsSimToClient::MsgFragOrderAck::default_instance());
  set_automat_mode_ack_ = const_cast< ::MsgsSimToClient::MsgSetAutomatModeAck*>(&::MsgsSimToClient::MsgSetAutomatModeAck::default_instance());
  unit_creation_request_ack_ = const_cast< ::MsgsSimToClient::MsgUnitCreationRequestAck*>(&::MsgsSimToClient::MsgUnitCreationRequestAck::default_instance());
  magic_action_ack_ = const_cast< ::MsgsSimToClient::MsgMagicActionAck*>(&::MsgsSimToClient::MsgMagicActionAck::default_instance());
  unit_magic_action_ack_ = const_cast< ::MsgsSimToClient::MsgUnitMagicActionAck*>(&::MsgsSimToClient::MsgUnitMagicActionAck::default_instance());
  object_magic_action_ack_ = const_cast< ::MsgsSimToClient::MsgObjectMagicActionAck*>(&::MsgsSimToClient::MsgObjectMagicActionAck::default_instance());
  population_magic_action_ack_ = const_cast< ::MsgsSimToClient::MsgPopulationMagicActionAck*>(&::MsgsSimToClient::MsgPopulationMagicActionAck::default_instance());
  change_diplomacy_ack_ = const_cast< ::MsgsSimToClient::MsgChangeDiplomacyAck*>(&::MsgsSimToClient::MsgChangeDiplomacyAck::default_instance());
  automat_change_knowledge_group_ack_ = const_cast< ::MsgsSimToClient::MsgAutomatChangeKnowledgeGroupAck*>(&::MsgsSimToClient::MsgAutomatChangeKnowledgeGroupAck::default_instance());
  automat_change_logistic_links_ack_ = const_cast< ::MsgsSimToClient::MsgAutomatChangeLogisticLinksAck*>(&::MsgsSimToClient::MsgAutomatChangeLogisticLinksAck::default_instance());
  automat_change_superior_ack_ = const_cast< ::MsgsSimToClient::MsgAutomatChangeSuperiorAck*>(&::MsgsSimToClient::MsgAutomatChangeSuperiorAck::default_instance());
  unit_change_superior_ack_ = const_cast< ::MsgsSimToClient::MsgUnitChangeSuperiorAck*>(&::MsgsSimToClient::MsgUnitChangeSuperiorAck::default_instance());
  log_supply_push_flow_ack_ = const_cast< ::MsgsSimToClient::MsgLogSupplyPushFlowAck*>(&::MsgsSimToClient::MsgLogSupplyPushFlowAck::default_instance());
  log_supply_change_quotas_ack_ = const_cast< ::MsgsSimToClient::MsgLogSupplyChangeQuotasAck*>(&::MsgsSimToClient::MsgLogSupplyChangeQuotasAck::default_instance());
  control_information_ = const_cast< ::MsgsSimToClient::MsgControlInformation*>(&::MsgsSimToClient::MsgControlInformation::default_instance());
  control_profiling_information_ = const_cast< ::MsgsSimToClient::MsgControlProfilingInformation*>(&::MsgsSimToClient::MsgControlProfilingInformation::default_instance());
  control_begin_tick_ = const_cast< ::MsgsSimToClient::MsgControlBeginTick*>(&::MsgsSimToClient::MsgControlBeginTick::default_instance());
  control_end_tick_ = const_cast< ::MsgsSimToClient::MsgControlEndTick*>(&::MsgsSimToClient::MsgControlEndTick::default_instance());
  control_stop_ack_ = const_cast< ::MsgsSimToClient::MsgControlStopAck*>(&::MsgsSimToClient::MsgControlStopAck::default_instance());
  control_pause_ack_ = const_cast< ::MsgsSimToClient::MsgControlPauseAck*>(&::MsgsSimToClient::MsgControlPauseAck::default_instance());
  control_resume_ack_ = const_cast< ::MsgsSimToClient::MsgControlResumeAck*>(&::MsgsSimToClient::MsgControlResumeAck::default_instance());
  control_change_time_factor_ack_ = const_cast< ::MsgsSimToClient::MsgControlChangeTimeFactorAck*>(&::MsgsSimToClient::MsgControlChangeTimeFactorAck::default_instance());
  control_date_time_change_ack_ = const_cast< ::MsgsSimToClient::MsgControlDatetimeChangeAck*>(&::MsgsSimToClient::MsgControlDatetimeChangeAck::default_instance());
  control_checkpoint_save_end_ = const_cast< ::MsgsSimToClient::MsgControlCheckPointSaveEnd*>(&::MsgsSimToClient::MsgControlCheckPointSaveEnd::default_instance());
  formation_creation_ = const_cast< ::Common::MsgFormationCreation*>(&::Common::MsgFormationCreation::default_instance());
  side_creation_ = const_cast< ::MsgsSimToClient::MsgTeamCreation*>(&::MsgsSimToClient::MsgTeamCreation::default_instance());
  automat_creation_ = const_cast< ::MsgsSimToClient::MsgAutomatCreation*>(&::MsgsSimToClient::MsgAutomatCreation::default_instance());
  automat_attributes_ = const_cast< ::MsgsSimToClient::MsgAutomatAttributes*>(&::MsgsSimToClient::MsgAutomatAttributes::default_instance());
  unit_creation_ = const_cast< ::MsgsSimToClient::MsgUnitCreation*>(&::MsgsSimToClient::MsgUnitCreation::default_instance());
  unit_attributes_ = const_cast< ::MsgsSimToClient::MsgUnitAttributes*>(&::MsgsSimToClient::MsgUnitAttributes::default_instance());
  unit_pathfind_ = const_cast< ::MsgsSimToClient::MsgUnitPathFind*>(&::MsgsSimToClient::MsgUnitPathFind::default_instance());
  unit_destruction_ = const_cast< ::MsgsSimToClient::MsgUnitDestruction*>(&::MsgsSimToClient::MsgUnitDestruction::default_instance());
  unit_environment_type_ = const_cast< ::MsgsSimToClient::MsgUnitEnvironmentType*>(&::MsgsSimToClient::MsgUnitEnvironmentType::default_instance());
  change_diplomacy_ = const_cast< ::Common::MsgChangeDiplomacy*>(&::Common::MsgChangeDiplomacy::default_instance());
  unit_change_superior_ = const_cast< ::Common::MsgUnitChangeSuperior*>(&::Common::MsgUnitChangeSuperior::default_instance());
  automat_change_logistic_links_ = const_cast< ::Common::MsgAutomatChangeLogisticLinks*>(&::Common::MsgAutomatChangeLogisticLinks::default_instance());
  automat_change_knowledge_group_ = const_cast< ::Common::MsgAutomatChangeKnowledgeGroup*>(&::Common::MsgAutomatChangeKnowledgeGroup::default_instance());
  automat_change_superior_ = const_cast< ::Common::MsgAutomatChangeSuperior*>(&::Common::MsgAutomatChangeSuperior::default_instance());
  unit_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgUnitKnowledgeCreation*>(&::MsgsSimToClient::MsgUnitKnowledgeCreation::default_instance());
  unit_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgUnitKnowledgeUpdate*>(&::MsgsSimToClient::MsgUnitKnowledgeUpdate::default_instance());
  unit_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgUnitKnowledgeDestruction*>(&::MsgsSimToClient::MsgUnitKnowledgeDestruction::default_instance());
  start_unit_fire_ = const_cast< ::MsgsSimToClient::MsgStartUnitFire*>(&::MsgsSimToClient::MsgStartUnitFire::default_instance());
  stop_unit_fire_ = const_cast< ::MsgsSimToClient::MsgStopUnitFire*>(&::MsgsSimToClient::MsgStopUnitFire::default_instance());
  start_population_fire_ = const_cast< ::MsgsSimToClient::MsgStartPopulationFire*>(&::MsgsSimToClient::MsgStartPopulationFire::default_instance());
  stop_population_fire_ = const_cast< ::MsgsSimToClient::MsgStopPopulationFire*>(&::MsgsSimToClient::MsgStopPopulationFire::default_instance());
  explosion_ = const_cast< ::MsgsSimToClient::MsgExplosion*>(&::MsgsSimToClient::MsgExplosion::default_instance());
  start_fire_effect_ = const_cast< ::MsgsSimToClient::MsgStartFireEffect*>(&::MsgsSimToClient::MsgStartFireEffect::default_instance());
  stop_fire_effect_ = const_cast< ::MsgsSimToClient::MsgStopFireEffect*>(&::MsgsSimToClient::MsgStopFireEffect::default_instance());
  report_ = const_cast< ::MsgsSimToClient::MsgReport*>(&::MsgsSimToClient::MsgReport::default_instance());
  invalidate_report_ = const_cast< ::MsgsSimToClient::MsgInvalidateReport*>(&::MsgsSimToClient::MsgInvalidateReport::default_instance());
  trace_ = const_cast< ::MsgsSimToClient::MsgTrace*>(&::MsgsSimToClient::MsgTrace::default_instance());
  decisional_state_ = const_cast< ::MsgsSimToClient::MsgDecisionalState*>(&::MsgsSimToClient::MsgDecisionalState::default_instance());
  debug_points_ = const_cast< ::MsgsSimToClient::MsgDebugPoints*>(&::MsgsSimToClient::MsgDebugPoints::default_instance());
  unit_vision_cones_ = const_cast< ::MsgsSimToClient::MsgUnitVisionCones*>(&::MsgsSimToClient::MsgUnitVisionCones::default_instance());
  unit_detection_ = const_cast< ::MsgsSimToClient::MsgUnitDetection*>(&::MsgsSimToClient::MsgUnitDetection::default_instance());
  object_detection_ = const_cast< ::MsgsSimToClient::MsgObjectDetection*>(&::MsgsSimToClient::MsgObjectDetection::default_instance());
  population_concentration_detection_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationDetection*>(&::MsgsSimToClient::MsgPopulationConcentrationDetection::default_instance());
  population_flow_detection_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowDetection*>(&::MsgsSimToClient::MsgPopulationFlowDetection::default_instance());
  unit_order_ = const_cast< ::Common::MsgUnitOrder*>(&::Common::MsgUnitOrder::default_instance());
  automat_order_ = const_cast< ::Common::MsgAutomatOrder*>(&::Common::MsgAutomatOrder::default_instance());
  population_order_ = const_cast< ::Common::MsgPopulationOrder*>(&::Common::MsgPopulationOrder::default_instance());
  object_creation_ = const_cast< ::MsgsSimToClient::MsgObjectCreation*>(&::MsgsSimToClient::MsgObjectCreation::default_instance());
  object_destruction_ = const_cast< ::MsgsSimToClient::MsgObjectDestruction*>(&::MsgsSimToClient::MsgObjectDestruction::default_instance());
  object_update_ = const_cast< ::MsgsSimToClient::MsgObjectUpdate*>(&::MsgsSimToClient::MsgObjectUpdate::default_instance());
  object_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgObjectKnowledgeCreation*>(&::MsgsSimToClient::MsgObjectKnowledgeCreation::default_instance());
  object_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgObjectKnowledgeUpdate*>(&::MsgsSimToClient::MsgObjectKnowledgeUpdate::default_instance());
  object_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgObjectKnowledgeDestruction*>(&::MsgsSimToClient::MsgObjectKnowledgeDestruction::default_instance());
  log_medical_handling_creation_ = const_cast< ::MsgsSimToClient::MsgLogMedicalHandlingCreation*>(&::MsgsSimToClient::MsgLogMedicalHandlingCreation::default_instance());
  log_medical_handling_update_ = const_cast< ::MsgsSimToClient::MsgLogMedicalHandlingUpdate*>(&::MsgsSimToClient::MsgLogMedicalHandlingUpdate::default_instance());
  log_medical_handling_destruction_ = const_cast< ::MsgsSimToClient::MsgLogMedicalHandlingDestruction*>(&::MsgsSimToClient::MsgLogMedicalHandlingDestruction::default_instance());
  log_medical_state_ = const_cast< ::MsgsSimToClient::MsgLogMedicalState*>(&::MsgsSimToClient::MsgLogMedicalState::default_instance());
  log_maintenance_handling_creation_ = const_cast< ::MsgsSimToClient::MsgLogMaintenanceHandlingCreation*>(&::MsgsSimToClient::MsgLogMaintenanceHandlingCreation::default_instance());
  log_maintenance_handling_update_ = const_cast< ::MsgsSimToClient::MsgLogMaintenanceHandlingUpdate*>(&::MsgsSimToClient::MsgLogMaintenanceHandlingUpdate::default_instance());
  log_maintenance_handling_destruction_ = const_cast< ::MsgsSimToClient::MsgLogMaintenanceHandlingDestruction*>(&::MsgsSimToClient::MsgLogMaintenanceHandlingDestruction::default_instance());
  log_maintenance_state_ = const_cast< ::MsgsSimToClient::MsgLogMaintenanceState*>(&::MsgsSimToClient::MsgLogMaintenanceState::default_instance());
  log_supply_handling_creation_ = const_cast< ::MsgsSimToClient::MsgLogSupplyHandlingCreation*>(&::MsgsSimToClient::MsgLogSupplyHandlingCreation::default_instance());
  log_supply_handling_update_ = const_cast< ::MsgsSimToClient::MsgLogSupplyHandlingUpdate*>(&::MsgsSimToClient::MsgLogSupplyHandlingUpdate::default_instance());
  log_supply_handling_destruction_ = const_cast< ::MsgsSimToClient::MsgLogSupplyHandlingDestruction*>(&::MsgsSimToClient::MsgLogSupplyHandlingDestruction::default_instance());
  log_supply_state_ = const_cast< ::MsgsSimToClient::MsgLogSupplyState*>(&::MsgsSimToClient::MsgLogSupplyState::default_instance());
  log_supply_quotas_ = const_cast< ::MsgsSimToClient::MsgLogSupplyQuotas*>(&::MsgsSimToClient::MsgLogSupplyQuotas::default_instance());
  population_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationCreation*>(&::MsgsSimToClient::MsgPopulationCreation::default_instance());
  population_update_ = const_cast< ::MsgsSimToClient::MsgPopulationUpdate*>(&::MsgsSimToClient::MsgPopulationUpdate::default_instance());
  population_concentration_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationCreation*>(&::MsgsSimToClient::MsgPopulationConcentrationCreation::default_instance());
  population_concentration_destruction_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationDestruction*>(&::MsgsSimToClient::MsgPopulationConcentrationDestruction::default_instance());
  population_concentration_update_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationUpdate*>(&::MsgsSimToClient::MsgPopulationConcentrationUpdate::default_instance());
  population_flow_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowCreation*>(&::MsgsSimToClient::MsgPopulationFlowCreation::default_instance());
  population_flow_destruction_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowDestruction*>(&::MsgsSimToClient::MsgPopulationFlowDestruction::default_instance());
  population_flow_update_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowUpdate*>(&::MsgsSimToClient::MsgPopulationFlowUpdate::default_instance());
  population_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationKnowledgeCreation*>(&::MsgsSimToClient::MsgPopulationKnowledgeCreation::default_instance());
  population_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgPopulationKnowledgeUpdate*>(&::MsgsSimToClient::MsgPopulationKnowledgeUpdate::default_instance());
  population_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgPopulationKnowledgeDestruction*>(&::MsgsSimToClient::MsgPopulationKnowledgeDestruction::default_instance());
  population_concentration_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationKnowledgeCreation*>(&::MsgsSimToClient::MsgPopulationConcentrationKnowledgeCreation::default_instance());
  population_concentration_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationKnowledgeDestruction*>(&::MsgsSimToClient::MsgPopulationConcentrationKnowledgeDestruction::default_instance());
  population_concentration_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgPopulationConcentrationKnowledgeUpdate*>(&::MsgsSimToClient::MsgPopulationConcentrationKnowledgeUpdate::default_instance());
  population_flow_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowKnowledgeCreation*>(&::MsgsSimToClient::MsgPopulationFlowKnowledgeCreation::default_instance());
  population_flow_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowKnowledgeDestruction*>(&::MsgsSimToClient::MsgPopulationFlowKnowledgeDestruction::default_instance());
  population_flow_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgPopulationFlowKnowledgeUpdate*>(&::MsgsSimToClient::MsgPopulationFlowKnowledgeUpdate::default_instance());
  folk_creation_ = const_cast< ::MsgsSimToClient::MsgFolkCreation*>(&::MsgsSimToClient::MsgFolkCreation::default_instance());
  folk_graph_update_ = const_cast< ::MsgsSimToClient::MsgFolkGraphUpdate*>(&::MsgsSimToClient::MsgFolkGraphUpdate::default_instance());
  control_global_meteo_ack_ = const_cast< ::MsgsSimToClient::MsgControlGlobalMeteoAck*>(&::MsgsSimToClient::MsgControlGlobalMeteoAck::default_instance());
  control_local_meteo_ack_ = const_cast< ::MsgsSimToClient::MsgControlLocalMeteoAck*>(&::MsgsSimToClient::MsgControlLocalMeteoAck::default_instance());
  control_checkpoint_save_begin_ = const_cast< ::MsgsSimToClient::MsgControlCheckPointSaveBegin*>(&::MsgsSimToClient::MsgControlCheckPointSaveBegin::default_instance());
  control_checkpoint_set_frequency_ack_ = const_cast< ::MsgsSimToClient::MsgControlCheckPointSetFrequencyAck*>(&::MsgsSimToClient::MsgControlCheckPointSetFrequencyAck::default_instance());
  control_checkpoint_save_now_ack_ = const_cast< ::MsgsSimToClient::MsgControlCheckPointSaveNowAck*>(&::MsgsSimToClient::MsgControlCheckPointSaveNowAck::default_instance());
  control_send_current_state_begin_ = const_cast< ::MsgsSimToClient::MsgControlSendCurrentStateBegin*>(&::MsgsSimToClient::MsgControlSendCurrentStateBegin::default_instance());
  control_send_current_state_end_ = const_cast< ::MsgsSimToClient::MsgControlSendCurrentStateEnd*>(&::MsgsSimToClient::MsgControlSendCurrentStateEnd::default_instance());
  urban_creation_ = const_cast< ::MsgsSimToClient::MsgUrbanCreation*>(&::MsgsSimToClient::MsgUrbanCreation::default_instance());
  urban_knowledge_creation_ = const_cast< ::MsgsSimToClient::MsgUrbanKnowledgeCreation*>(&::MsgsSimToClient::MsgUrbanKnowledgeCreation::default_instance());
  urban_knowledge_update_ = const_cast< ::MsgsSimToClient::MsgUrbanKnowledgeUpdate*>(&::MsgsSimToClient::MsgUrbanKnowledgeUpdate::default_instance());
  urban_knowledge_destruction_ = const_cast< ::MsgsSimToClient::MsgUrbanKnowledgeDestruction*>(&::MsgsSimToClient::MsgUrbanKnowledgeDestruction::default_instance());
  stock_resource_ = const_cast< ::Common::StockResource*>(&::Common::StockResource::default_instance());
  urban_detection_ = const_cast< ::MsgsSimToClient::MsgUrbanDetection*>(&::MsgsSimToClient::MsgUrbanDetection::default_instance());
  knowledge_group_ack_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupAck*>(&::MsgsSimToClient::MsgKnowledgeGroupAck::default_instance());
  knowledge_group_creation_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupCreation*>(&::MsgsSimToClient::MsgKnowledgeGroupCreation::default_instance());
  knowledge_group_update_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupUpdate*>(&::MsgsSimToClient::MsgKnowledgeGroupUpdate::default_instance());
  knowledge_group_creation_ack_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupCreationAck*>(&::MsgsSimToClient::MsgKnowledgeGroupCreationAck::default_instance());
  knowledge_group_update_ack_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupUpdateAck*>(&::MsgsSimToClient::MsgKnowledgeGroupUpdateAck::default_instance());
  knowledge_group_destruction_ = const_cast< ::MsgsSimToClient::MsgKnowledgeGroupDestruction*>(&::MsgsSimToClient::MsgKnowledgeGroupDestruction::default_instance());
  action_create_fire_order_ack_ = const_cast< ::MsgsSimToClient::MsgActionCreateFireOrderAck*>(&::MsgsSimToClient::MsgActionCreateFireOrderAck::default_instance());
  control_global_meteo_ = const_cast< ::MsgsSimToClient::MsgControlGlobalMeteo*>(&::MsgsSimToClient::MsgControlGlobalMeteo::default_instance());
  control_local_meteo_creation_ = const_cast< ::MsgsSimToClient::MsgControlLocalMeteoCreation*>(&::MsgsSimToClient::MsgControlLocalMeteoCreation::default_instance());
  control_local_meteo_destruction_ = const_cast< ::MsgsSimToClient::MsgControlLocalMeteoDestruction*>(&::MsgsSimToClient::MsgControlLocalMeteoDestruction::default_instance());
}

MsgSimToClient_Content::MsgSimToClient_Content(const MsgSimToClient_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSimToClient_Content::SharedCtor() {
  _cached_size_ = 0;
  unit_order_ack_ = NULL;
  automat_order_ack_ = NULL;
  population_order_ack_ = NULL;
  frag_order_ack_ = NULL;
  set_automat_mode_ack_ = NULL;
  unit_creation_request_ack_ = NULL;
  magic_action_ack_ = NULL;
  unit_magic_action_ack_ = NULL;
  object_magic_action_ack_ = NULL;
  population_magic_action_ack_ = NULL;
  change_diplomacy_ack_ = NULL;
  automat_change_knowledge_group_ack_ = NULL;
  automat_change_logistic_links_ack_ = NULL;
  automat_change_superior_ack_ = NULL;
  unit_change_superior_ack_ = NULL;
  log_supply_push_flow_ack_ = NULL;
  log_supply_change_quotas_ack_ = NULL;
  control_information_ = NULL;
  control_profiling_information_ = NULL;
  control_begin_tick_ = NULL;
  control_end_tick_ = NULL;
  control_stop_ack_ = NULL;
  control_pause_ack_ = NULL;
  control_resume_ack_ = NULL;
  control_change_time_factor_ack_ = NULL;
  control_date_time_change_ack_ = NULL;
  control_checkpoint_save_end_ = NULL;
  formation_creation_ = NULL;
  side_creation_ = NULL;
  automat_creation_ = NULL;
  automat_attributes_ = NULL;
  unit_creation_ = NULL;
  unit_attributes_ = NULL;
  unit_pathfind_ = NULL;
  unit_destruction_ = NULL;
  unit_environment_type_ = NULL;
  change_diplomacy_ = NULL;
  unit_change_superior_ = NULL;
  automat_change_logistic_links_ = NULL;
  automat_change_knowledge_group_ = NULL;
  automat_change_superior_ = NULL;
  unit_knowledge_creation_ = NULL;
  unit_knowledge_update_ = NULL;
  unit_knowledge_destruction_ = NULL;
  start_unit_fire_ = NULL;
  stop_unit_fire_ = NULL;
  start_population_fire_ = NULL;
  stop_population_fire_ = NULL;
  explosion_ = NULL;
  start_fire_effect_ = NULL;
  stop_fire_effect_ = NULL;
  report_ = NULL;
  invalidate_report_ = NULL;
  trace_ = NULL;
  decisional_state_ = NULL;
  debug_points_ = NULL;
  unit_vision_cones_ = NULL;
  unit_detection_ = NULL;
  object_detection_ = NULL;
  population_concentration_detection_ = NULL;
  population_flow_detection_ = NULL;
  unit_order_ = NULL;
  automat_order_ = NULL;
  population_order_ = NULL;
  object_creation_ = NULL;
  object_destruction_ = NULL;
  object_update_ = NULL;
  object_knowledge_creation_ = NULL;
  object_knowledge_update_ = NULL;
  object_knowledge_destruction_ = NULL;
  log_medical_handling_creation_ = NULL;
  log_medical_handling_update_ = NULL;
  log_medical_handling_destruction_ = NULL;
  log_medical_state_ = NULL;
  log_maintenance_handling_creation_ = NULL;
  log_maintenance_handling_update_ = NULL;
  log_maintenance_handling_destruction_ = NULL;
  log_maintenance_state_ = NULL;
  log_supply_handling_creation_ = NULL;
  log_supply_handling_update_ = NULL;
  log_supply_handling_destruction_ = NULL;
  log_supply_state_ = NULL;
  log_supply_quotas_ = NULL;
  population_creation_ = NULL;
  population_update_ = NULL;
  population_concentration_creation_ = NULL;
  population_concentration_destruction_ = NULL;
  population_concentration_update_ = NULL;
  population_flow_creation_ = NULL;
  population_flow_destruction_ = NULL;
  population_flow_update_ = NULL;
  population_knowledge_creation_ = NULL;
  population_knowledge_update_ = NULL;
  population_knowledge_destruction_ = NULL;
  population_concentration_knowledge_creation_ = NULL;
  population_concentration_knowledge_destruction_ = NULL;
  population_concentration_knowledge_update_ = NULL;
  population_flow_knowledge_creation_ = NULL;
  population_flow_knowledge_destruction_ = NULL;
  population_flow_knowledge_update_ = NULL;
  folk_creation_ = NULL;
  folk_graph_update_ = NULL;
  control_global_meteo_ack_ = NULL;
  control_local_meteo_ack_ = NULL;
  control_checkpoint_save_begin_ = NULL;
  control_checkpoint_set_frequency_ack_ = NULL;
  control_checkpoint_save_now_ack_ = NULL;
  control_send_current_state_begin_ = NULL;
  control_send_current_state_end_ = NULL;
  urban_creation_ = NULL;
  urban_knowledge_creation_ = NULL;
  urban_knowledge_update_ = NULL;
  urban_knowledge_destruction_ = NULL;
  stock_resource_ = NULL;
  urban_detection_ = NULL;
  knowledge_group_ack_ = NULL;
  knowledge_group_creation_ = NULL;
  knowledge_group_update_ = NULL;
  knowledge_group_creation_ack_ = NULL;
  knowledge_group_update_ack_ = NULL;
  knowledge_group_destruction_ = NULL;
  action_create_fire_order_ack_ = NULL;
  control_global_meteo_ = NULL;
  control_local_meteo_creation_ = NULL;
  control_local_meteo_destruction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSimToClient_Content::~MsgSimToClient_Content() {
  SharedDtor();
}

void MsgSimToClient_Content::SharedDtor() {
  if (this != default_instance_) {
    delete unit_order_ack_;
    delete automat_order_ack_;
    delete population_order_ack_;
    delete frag_order_ack_;
    delete set_automat_mode_ack_;
    delete unit_creation_request_ack_;
    delete magic_action_ack_;
    delete unit_magic_action_ack_;
    delete object_magic_action_ack_;
    delete population_magic_action_ack_;
    delete change_diplomacy_ack_;
    delete automat_change_knowledge_group_ack_;
    delete automat_change_logistic_links_ack_;
    delete automat_change_superior_ack_;
    delete unit_change_superior_ack_;
    delete log_supply_push_flow_ack_;
    delete log_supply_change_quotas_ack_;
    delete control_information_;
    delete control_profiling_information_;
    delete control_begin_tick_;
    delete control_end_tick_;
    delete control_stop_ack_;
    delete control_pause_ack_;
    delete control_resume_ack_;
    delete control_change_time_factor_ack_;
    delete control_date_time_change_ack_;
    delete control_checkpoint_save_end_;
    delete formation_creation_;
    delete side_creation_;
    delete automat_creation_;
    delete automat_attributes_;
    delete unit_creation_;
    delete unit_attributes_;
    delete unit_pathfind_;
    delete unit_destruction_;
    delete unit_environment_type_;
    delete change_diplomacy_;
    delete unit_change_superior_;
    delete automat_change_logistic_links_;
    delete automat_change_knowledge_group_;
    delete automat_change_superior_;
    delete unit_knowledge_creation_;
    delete unit_knowledge_update_;
    delete unit_knowledge_destruction_;
    delete start_unit_fire_;
    delete stop_unit_fire_;
    delete start_population_fire_;
    delete stop_population_fire_;
    delete explosion_;
    delete start_fire_effect_;
    delete stop_fire_effect_;
    delete report_;
    delete invalidate_report_;
    delete trace_;
    delete decisional_state_;
    delete debug_points_;
    delete unit_vision_cones_;
    delete unit_detection_;
    delete object_detection_;
    delete population_concentration_detection_;
    delete population_flow_detection_;
    delete unit_order_;
    delete automat_order_;
    delete population_order_;
    delete object_creation_;
    delete object_destruction_;
    delete object_update_;
    delete object_knowledge_creation_;
    delete object_knowledge_update_;
    delete object_knowledge_destruction_;
    delete log_medical_handling_creation_;
    delete log_medical_handling_update_;
    delete log_medical_handling_destruction_;
    delete log_medical_state_;
    delete log_maintenance_handling_creation_;
    delete log_maintenance_handling_update_;
    delete log_maintenance_handling_destruction_;
    delete log_maintenance_state_;
    delete log_supply_handling_creation_;
    delete log_supply_handling_update_;
    delete log_supply_handling_destruction_;
    delete log_supply_state_;
    delete log_supply_quotas_;
    delete population_creation_;
    delete population_update_;
    delete population_concentration_creation_;
    delete population_concentration_destruction_;
    delete population_concentration_update_;
    delete population_flow_creation_;
    delete population_flow_destruction_;
    delete population_flow_update_;
    delete population_knowledge_creation_;
    delete population_knowledge_update_;
    delete population_knowledge_destruction_;
    delete population_concentration_knowledge_creation_;
    delete population_concentration_knowledge_destruction_;
    delete population_concentration_knowledge_update_;
    delete population_flow_knowledge_creation_;
    delete population_flow_knowledge_destruction_;
    delete population_flow_knowledge_update_;
    delete folk_creation_;
    delete folk_graph_update_;
    delete control_global_meteo_ack_;
    delete control_local_meteo_ack_;
    delete control_checkpoint_save_begin_;
    delete control_checkpoint_set_frequency_ack_;
    delete control_checkpoint_save_now_ack_;
    delete control_send_current_state_begin_;
    delete control_send_current_state_end_;
    delete urban_creation_;
    delete urban_knowledge_creation_;
    delete urban_knowledge_update_;
    delete urban_knowledge_destruction_;
    delete stock_resource_;
    delete urban_detection_;
    delete knowledge_group_ack_;
    delete knowledge_group_creation_;
    delete knowledge_group_update_;
    delete knowledge_group_creation_ack_;
    delete knowledge_group_update_ack_;
    delete knowledge_group_destruction_;
    delete action_create_fire_order_ack_;
    delete control_global_meteo_;
    delete control_local_meteo_creation_;
    delete control_local_meteo_destruction_;
  }
}

const ::google::protobuf::Descriptor* MsgSimToClient_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSimToClient_Content_descriptor_;
}

const MsgSimToClient_Content& MsgSimToClient_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgSimToClient_Content* MsgSimToClient_Content::default_instance_ = NULL;

MsgSimToClient_Content* MsgSimToClient_Content::New() const {
  return new MsgSimToClient_Content;
}

void MsgSimToClient_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (unit_order_ack_ != NULL) unit_order_ack_->::MsgsSimToClient::MsgUnitOrderAck::Clear();
    }
    if (_has_bit(1)) {
      if (automat_order_ack_ != NULL) automat_order_ack_->::MsgsSimToClient::MsgAutomatOrderAck::Clear();
    }
    if (_has_bit(2)) {
      if (population_order_ack_ != NULL) population_order_ack_->::MsgsSimToClient::MsgPopulationOrderAck::Clear();
    }
    if (_has_bit(3)) {
      if (frag_order_ack_ != NULL) frag_order_ack_->::MsgsSimToClient::MsgFragOrderAck::Clear();
    }
    if (_has_bit(4)) {
      if (set_automat_mode_ack_ != NULL) set_automat_mode_ack_->::MsgsSimToClient::MsgSetAutomatModeAck::Clear();
    }
    if (_has_bit(5)) {
      if (unit_creation_request_ack_ != NULL) unit_creation_request_ack_->::MsgsSimToClient::MsgUnitCreationRequestAck::Clear();
    }
    if (_has_bit(6)) {
      if (magic_action_ack_ != NULL) magic_action_ack_->::MsgsSimToClient::MsgMagicActionAck::Clear();
    }
    if (_has_bit(7)) {
      if (unit_magic_action_ack_ != NULL) unit_magic_action_ack_->::MsgsSimToClient::MsgUnitMagicActionAck::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (object_magic_action_ack_ != NULL) object_magic_action_ack_->::MsgsSimToClient::MsgObjectMagicActionAck::Clear();
    }
    if (_has_bit(9)) {
      if (population_magic_action_ack_ != NULL) population_magic_action_ack_->::MsgsSimToClient::MsgPopulationMagicActionAck::Clear();
    }
    if (_has_bit(10)) {
      if (change_diplomacy_ack_ != NULL) change_diplomacy_ack_->::MsgsSimToClient::MsgChangeDiplomacyAck::Clear();
    }
    if (_has_bit(11)) {
      if (automat_change_knowledge_group_ack_ != NULL) automat_change_knowledge_group_ack_->::MsgsSimToClient::MsgAutomatChangeKnowledgeGroupAck::Clear();
    }
    if (_has_bit(12)) {
      if (automat_change_logistic_links_ack_ != NULL) automat_change_logistic_links_ack_->::MsgsSimToClient::MsgAutomatChangeLogisticLinksAck::Clear();
    }
    if (_has_bit(13)) {
      if (automat_change_superior_ack_ != NULL) automat_change_superior_ack_->::MsgsSimToClient::MsgAutomatChangeSuperiorAck::Clear();
    }
    if (_has_bit(14)) {
      if (unit_change_superior_ack_ != NULL) unit_change_superior_ack_->::MsgsSimToClient::MsgUnitChangeSuperiorAck::Clear();
    }
    if (_has_bit(15)) {
      if (log_supply_push_flow_ack_ != NULL) log_supply_push_flow_ack_->::MsgsSimToClient::MsgLogSupplyPushFlowAck::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (log_supply_change_quotas_ack_ != NULL) log_supply_change_quotas_ack_->::MsgsSimToClient::MsgLogSupplyChangeQuotasAck::Clear();
    }
    if (_has_bit(17)) {
      if (control_information_ != NULL) control_information_->::MsgsSimToClient::MsgControlInformation::Clear();
    }
    if (_has_bit(18)) {
      if (control_profiling_information_ != NULL) control_profiling_information_->::MsgsSimToClient::MsgControlProfilingInformation::Clear();
    }
    if (_has_bit(19)) {
      if (control_begin_tick_ != NULL) control_begin_tick_->::MsgsSimToClient::MsgControlBeginTick::Clear();
    }
    if (_has_bit(20)) {
      if (control_end_tick_ != NULL) control_end_tick_->::MsgsSimToClient::MsgControlEndTick::Clear();
    }
    if (_has_bit(21)) {
      if (control_stop_ack_ != NULL) control_stop_ack_->::MsgsSimToClient::MsgControlStopAck::Clear();
    }
    if (_has_bit(22)) {
      if (control_pause_ack_ != NULL) control_pause_ack_->::MsgsSimToClient::MsgControlPauseAck::Clear();
    }
    if (_has_bit(23)) {
      if (control_resume_ack_ != NULL) control_resume_ack_->::MsgsSimToClient::MsgControlResumeAck::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (control_change_time_factor_ack_ != NULL) control_change_time_factor_ack_->::MsgsSimToClient::MsgControlChangeTimeFactorAck::Clear();
    }
    if (_has_bit(25)) {
      if (control_date_time_change_ack_ != NULL) control_date_time_change_ack_->::MsgsSimToClient::MsgControlDatetimeChangeAck::Clear();
    }
    if (_has_bit(26)) {
      if (control_checkpoint_save_end_ != NULL) control_checkpoint_save_end_->::MsgsSimToClient::MsgControlCheckPointSaveEnd::Clear();
    }
    if (_has_bit(27)) {
      if (formation_creation_ != NULL) formation_creation_->::Common::MsgFormationCreation::Clear();
    }
    if (_has_bit(28)) {
      if (side_creation_ != NULL) side_creation_->::MsgsSimToClient::MsgTeamCreation::Clear();
    }
    if (_has_bit(29)) {
      if (automat_creation_ != NULL) automat_creation_->::MsgsSimToClient::MsgAutomatCreation::Clear();
    }
    if (_has_bit(30)) {
      if (automat_attributes_ != NULL) automat_attributes_->::MsgsSimToClient::MsgAutomatAttributes::Clear();
    }
    if (_has_bit(31)) {
      if (unit_creation_ != NULL) unit_creation_->::MsgsSimToClient::MsgUnitCreation::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (unit_attributes_ != NULL) unit_attributes_->::MsgsSimToClient::MsgUnitAttributes::Clear();
    }
    if (_has_bit(33)) {
      if (unit_pathfind_ != NULL) unit_pathfind_->::MsgsSimToClient::MsgUnitPathFind::Clear();
    }
    if (_has_bit(34)) {
      if (unit_destruction_ != NULL) unit_destruction_->::MsgsSimToClient::MsgUnitDestruction::Clear();
    }
    if (_has_bit(35)) {
      if (unit_environment_type_ != NULL) unit_environment_type_->::MsgsSimToClient::MsgUnitEnvironmentType::Clear();
    }
    if (_has_bit(36)) {
      if (change_diplomacy_ != NULL) change_diplomacy_->::Common::MsgChangeDiplomacy::Clear();
    }
    if (_has_bit(37)) {
      if (unit_change_superior_ != NULL) unit_change_superior_->::Common::MsgUnitChangeSuperior::Clear();
    }
    if (_has_bit(38)) {
      if (automat_change_logistic_links_ != NULL) automat_change_logistic_links_->::Common::MsgAutomatChangeLogisticLinks::Clear();
    }
    if (_has_bit(39)) {
      if (automat_change_knowledge_group_ != NULL) automat_change_knowledge_group_->::Common::MsgAutomatChangeKnowledgeGroup::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (_has_bit(40)) {
      if (automat_change_superior_ != NULL) automat_change_superior_->::Common::MsgAutomatChangeSuperior::Clear();
    }
    if (_has_bit(41)) {
      if (unit_knowledge_creation_ != NULL) unit_knowledge_creation_->::MsgsSimToClient::MsgUnitKnowledgeCreation::Clear();
    }
    if (_has_bit(42)) {
      if (unit_knowledge_update_ != NULL) unit_knowledge_update_->::MsgsSimToClient::MsgUnitKnowledgeUpdate::Clear();
    }
    if (_has_bit(43)) {
      if (unit_knowledge_destruction_ != NULL) unit_knowledge_destruction_->::MsgsSimToClient::MsgUnitKnowledgeDestruction::Clear();
    }
    if (_has_bit(44)) {
      if (start_unit_fire_ != NULL) start_unit_fire_->::MsgsSimToClient::MsgStartUnitFire::Clear();
    }
    if (_has_bit(45)) {
      if (stop_unit_fire_ != NULL) stop_unit_fire_->::MsgsSimToClient::MsgStopUnitFire::Clear();
    }
    if (_has_bit(46)) {
      if (start_population_fire_ != NULL) start_population_fire_->::MsgsSimToClient::MsgStartPopulationFire::Clear();
    }
    if (_has_bit(47)) {
      if (stop_population_fire_ != NULL) stop_population_fire_->::MsgsSimToClient::MsgStopPopulationFire::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (_has_bit(48)) {
      if (explosion_ != NULL) explosion_->::MsgsSimToClient::MsgExplosion::Clear();
    }
    if (_has_bit(49)) {
      if (start_fire_effect_ != NULL) start_fire_effect_->::MsgsSimToClient::MsgStartFireEffect::Clear();
    }
    if (_has_bit(50)) {
      if (stop_fire_effect_ != NULL) stop_fire_effect_->::MsgsSimToClient::MsgStopFireEffect::Clear();
    }
    if (_has_bit(51)) {
      if (report_ != NULL) report_->::MsgsSimToClient::MsgReport::Clear();
    }
    if (_has_bit(52)) {
      if (invalidate_report_ != NULL) invalidate_report_->::MsgsSimToClient::MsgInvalidateReport::Clear();
    }
    if (_has_bit(53)) {
      if (trace_ != NULL) trace_->::MsgsSimToClient::MsgTrace::Clear();
    }
    if (_has_bit(54)) {
      if (decisional_state_ != NULL) decisional_state_->::MsgsSimToClient::MsgDecisionalState::Clear();
    }
    if (_has_bit(55)) {
      if (debug_points_ != NULL) debug_points_->::MsgsSimToClient::MsgDebugPoints::Clear();
    }
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (_has_bit(56)) {
      if (unit_vision_cones_ != NULL) unit_vision_cones_->::MsgsSimToClient::MsgUnitVisionCones::Clear();
    }
    if (_has_bit(57)) {
      if (unit_detection_ != NULL) unit_detection_->::MsgsSimToClient::MsgUnitDetection::Clear();
    }
    if (_has_bit(58)) {
      if (object_detection_ != NULL) object_detection_->::MsgsSimToClient::MsgObjectDetection::Clear();
    }
    if (_has_bit(59)) {
      if (population_concentration_detection_ != NULL) population_concentration_detection_->::MsgsSimToClient::MsgPopulationConcentrationDetection::Clear();
    }
    if (_has_bit(60)) {
      if (population_flow_detection_ != NULL) population_flow_detection_->::MsgsSimToClient::MsgPopulationFlowDetection::Clear();
    }
    if (_has_bit(61)) {
      if (unit_order_ != NULL) unit_order_->::Common::MsgUnitOrder::Clear();
    }
    if (_has_bit(62)) {
      if (automat_order_ != NULL) automat_order_->::Common::MsgAutomatOrder::Clear();
    }
    if (_has_bit(63)) {
      if (population_order_ != NULL) population_order_->::Common::MsgPopulationOrder::Clear();
    }
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (_has_bit(64)) {
      if (object_creation_ != NULL) object_creation_->::MsgsSimToClient::MsgObjectCreation::Clear();
    }
    if (_has_bit(65)) {
      if (object_destruction_ != NULL) object_destruction_->::MsgsSimToClient::MsgObjectDestruction::Clear();
    }
    if (_has_bit(66)) {
      if (object_update_ != NULL) object_update_->::MsgsSimToClient::MsgObjectUpdate::Clear();
    }
    if (_has_bit(67)) {
      if (object_knowledge_creation_ != NULL) object_knowledge_creation_->::MsgsSimToClient::MsgObjectKnowledgeCreation::Clear();
    }
    if (_has_bit(68)) {
      if (object_knowledge_update_ != NULL) object_knowledge_update_->::MsgsSimToClient::MsgObjectKnowledgeUpdate::Clear();
    }
    if (_has_bit(69)) {
      if (object_knowledge_destruction_ != NULL) object_knowledge_destruction_->::MsgsSimToClient::MsgObjectKnowledgeDestruction::Clear();
    }
    if (_has_bit(70)) {
      if (log_medical_handling_creation_ != NULL) log_medical_handling_creation_->::MsgsSimToClient::MsgLogMedicalHandlingCreation::Clear();
    }
    if (_has_bit(71)) {
      if (log_medical_handling_update_ != NULL) log_medical_handling_update_->::MsgsSimToClient::MsgLogMedicalHandlingUpdate::Clear();
    }
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (_has_bit(72)) {
      if (log_medical_handling_destruction_ != NULL) log_medical_handling_destruction_->::MsgsSimToClient::MsgLogMedicalHandlingDestruction::Clear();
    }
    if (_has_bit(73)) {
      if (log_medical_state_ != NULL) log_medical_state_->::MsgsSimToClient::MsgLogMedicalState::Clear();
    }
    if (_has_bit(74)) {
      if (log_maintenance_handling_creation_ != NULL) log_maintenance_handling_creation_->::MsgsSimToClient::MsgLogMaintenanceHandlingCreation::Clear();
    }
    if (_has_bit(75)) {
      if (log_maintenance_handling_update_ != NULL) log_maintenance_handling_update_->::MsgsSimToClient::MsgLogMaintenanceHandlingUpdate::Clear();
    }
    if (_has_bit(76)) {
      if (log_maintenance_handling_destruction_ != NULL) log_maintenance_handling_destruction_->::MsgsSimToClient::MsgLogMaintenanceHandlingDestruction::Clear();
    }
    if (_has_bit(77)) {
      if (log_maintenance_state_ != NULL) log_maintenance_state_->::MsgsSimToClient::MsgLogMaintenanceState::Clear();
    }
    if (_has_bit(78)) {
      if (log_supply_handling_creation_ != NULL) log_supply_handling_creation_->::MsgsSimToClient::MsgLogSupplyHandlingCreation::Clear();
    }
    if (_has_bit(79)) {
      if (log_supply_handling_update_ != NULL) log_supply_handling_update_->::MsgsSimToClient::MsgLogSupplyHandlingUpdate::Clear();
    }
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (_has_bit(80)) {
      if (log_supply_handling_destruction_ != NULL) log_supply_handling_destruction_->::MsgsSimToClient::MsgLogSupplyHandlingDestruction::Clear();
    }
    if (_has_bit(81)) {
      if (log_supply_state_ != NULL) log_supply_state_->::MsgsSimToClient::MsgLogSupplyState::Clear();
    }
    if (_has_bit(82)) {
      if (log_supply_quotas_ != NULL) log_supply_quotas_->::MsgsSimToClient::MsgLogSupplyQuotas::Clear();
    }
    if (_has_bit(83)) {
      if (population_creation_ != NULL) population_creation_->::MsgsSimToClient::MsgPopulationCreation::Clear();
    }
    if (_has_bit(84)) {
      if (population_update_ != NULL) population_update_->::MsgsSimToClient::MsgPopulationUpdate::Clear();
    }
    if (_has_bit(85)) {
      if (population_concentration_creation_ != NULL) population_concentration_creation_->::MsgsSimToClient::MsgPopulationConcentrationCreation::Clear();
    }
    if (_has_bit(86)) {
      if (population_concentration_destruction_ != NULL) population_concentration_destruction_->::MsgsSimToClient::MsgPopulationConcentrationDestruction::Clear();
    }
    if (_has_bit(87)) {
      if (population_concentration_update_ != NULL) population_concentration_update_->::MsgsSimToClient::MsgPopulationConcentrationUpdate::Clear();
    }
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (_has_bit(88)) {
      if (population_flow_creation_ != NULL) population_flow_creation_->::MsgsSimToClient::MsgPopulationFlowCreation::Clear();
    }
    if (_has_bit(89)) {
      if (population_flow_destruction_ != NULL) population_flow_destruction_->::MsgsSimToClient::MsgPopulationFlowDestruction::Clear();
    }
    if (_has_bit(90)) {
      if (population_flow_update_ != NULL) population_flow_update_->::MsgsSimToClient::MsgPopulationFlowUpdate::Clear();
    }
    if (_has_bit(91)) {
      if (population_knowledge_creation_ != NULL) population_knowledge_creation_->::MsgsSimToClient::MsgPopulationKnowledgeCreation::Clear();
    }
    if (_has_bit(92)) {
      if (population_knowledge_update_ != NULL) population_knowledge_update_->::MsgsSimToClient::MsgPopulationKnowledgeUpdate::Clear();
    }
    if (_has_bit(93)) {
      if (population_knowledge_destruction_ != NULL) population_knowledge_destruction_->::MsgsSimToClient::MsgPopulationKnowledgeDestruction::Clear();
    }
    if (_has_bit(94)) {
      if (population_concentration_knowledge_creation_ != NULL) population_concentration_knowledge_creation_->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeCreation::Clear();
    }
    if (_has_bit(95)) {
      if (population_concentration_knowledge_destruction_ != NULL) population_concentration_knowledge_destruction_->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeDestruction::Clear();
    }
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (_has_bit(96)) {
      if (population_concentration_knowledge_update_ != NULL) population_concentration_knowledge_update_->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeUpdate::Clear();
    }
    if (_has_bit(97)) {
      if (population_flow_knowledge_creation_ != NULL) population_flow_knowledge_creation_->::MsgsSimToClient::MsgPopulationFlowKnowledgeCreation::Clear();
    }
    if (_has_bit(98)) {
      if (population_flow_knowledge_destruction_ != NULL) population_flow_knowledge_destruction_->::MsgsSimToClient::MsgPopulationFlowKnowledgeDestruction::Clear();
    }
    if (_has_bit(99)) {
      if (population_flow_knowledge_update_ != NULL) population_flow_knowledge_update_->::MsgsSimToClient::MsgPopulationFlowKnowledgeUpdate::Clear();
    }
    if (_has_bit(100)) {
      if (folk_creation_ != NULL) folk_creation_->::MsgsSimToClient::MsgFolkCreation::Clear();
    }
    if (_has_bit(101)) {
      if (folk_graph_update_ != NULL) folk_graph_update_->::MsgsSimToClient::MsgFolkGraphUpdate::Clear();
    }
    if (_has_bit(102)) {
      if (control_global_meteo_ack_ != NULL) control_global_meteo_ack_->::MsgsSimToClient::MsgControlGlobalMeteoAck::Clear();
    }
    if (_has_bit(103)) {
      if (control_local_meteo_ack_ != NULL) control_local_meteo_ack_->::MsgsSimToClient::MsgControlLocalMeteoAck::Clear();
    }
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (_has_bit(104)) {
      if (control_checkpoint_save_begin_ != NULL) control_checkpoint_save_begin_->::MsgsSimToClient::MsgControlCheckPointSaveBegin::Clear();
    }
    if (_has_bit(105)) {
      if (control_checkpoint_set_frequency_ack_ != NULL) control_checkpoint_set_frequency_ack_->::MsgsSimToClient::MsgControlCheckPointSetFrequencyAck::Clear();
    }
    if (_has_bit(106)) {
      if (control_checkpoint_save_now_ack_ != NULL) control_checkpoint_save_now_ack_->::MsgsSimToClient::MsgControlCheckPointSaveNowAck::Clear();
    }
    if (_has_bit(107)) {
      if (control_send_current_state_begin_ != NULL) control_send_current_state_begin_->::MsgsSimToClient::MsgControlSendCurrentStateBegin::Clear();
    }
    if (_has_bit(108)) {
      if (control_send_current_state_end_ != NULL) control_send_current_state_end_->::MsgsSimToClient::MsgControlSendCurrentStateEnd::Clear();
    }
    if (_has_bit(109)) {
      if (urban_creation_ != NULL) urban_creation_->::MsgsSimToClient::MsgUrbanCreation::Clear();
    }
    if (_has_bit(110)) {
      if (urban_knowledge_creation_ != NULL) urban_knowledge_creation_->::MsgsSimToClient::MsgUrbanKnowledgeCreation::Clear();
    }
    if (_has_bit(111)) {
      if (urban_knowledge_update_ != NULL) urban_knowledge_update_->::MsgsSimToClient::MsgUrbanKnowledgeUpdate::Clear();
    }
  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (_has_bit(112)) {
      if (urban_knowledge_destruction_ != NULL) urban_knowledge_destruction_->::MsgsSimToClient::MsgUrbanKnowledgeDestruction::Clear();
    }
    if (_has_bit(113)) {
      if (stock_resource_ != NULL) stock_resource_->::Common::StockResource::Clear();
    }
    if (_has_bit(114)) {
      if (urban_detection_ != NULL) urban_detection_->::MsgsSimToClient::MsgUrbanDetection::Clear();
    }
    if (_has_bit(115)) {
      if (knowledge_group_ack_ != NULL) knowledge_group_ack_->::MsgsSimToClient::MsgKnowledgeGroupAck::Clear();
    }
    if (_has_bit(116)) {
      if (knowledge_group_creation_ != NULL) knowledge_group_creation_->::MsgsSimToClient::MsgKnowledgeGroupCreation::Clear();
    }
    if (_has_bit(117)) {
      if (knowledge_group_update_ != NULL) knowledge_group_update_->::MsgsSimToClient::MsgKnowledgeGroupUpdate::Clear();
    }
    if (_has_bit(118)) {
      if (knowledge_group_creation_ack_ != NULL) knowledge_group_creation_ack_->::MsgsSimToClient::MsgKnowledgeGroupCreationAck::Clear();
    }
    if (_has_bit(119)) {
      if (knowledge_group_update_ack_ != NULL) knowledge_group_update_ack_->::MsgsSimToClient::MsgKnowledgeGroupUpdateAck::Clear();
    }
  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (_has_bit(120)) {
      if (knowledge_group_destruction_ != NULL) knowledge_group_destruction_->::MsgsSimToClient::MsgKnowledgeGroupDestruction::Clear();
    }
    if (_has_bit(121)) {
      if (action_create_fire_order_ack_ != NULL) action_create_fire_order_ack_->::MsgsSimToClient::MsgActionCreateFireOrderAck::Clear();
    }
    if (_has_bit(122)) {
      if (control_global_meteo_ != NULL) control_global_meteo_->::MsgsSimToClient::MsgControlGlobalMeteo::Clear();
    }
    if (_has_bit(123)) {
      if (control_local_meteo_creation_ != NULL) control_local_meteo_creation_->::MsgsSimToClient::MsgControlLocalMeteoCreation::Clear();
    }
    if (_has_bit(124)) {
      if (control_local_meteo_destruction_ != NULL) control_local_meteo_destruction_->::MsgsSimToClient::MsgControlLocalMeteoDestruction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSimToClient_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsSimToClient.MsgUnitOrderAck unit_order_ack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_order_ack()));
        if (input->ExpectTag(18)) goto parse_automat_order_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatOrderAck automat_order_ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_order_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_order_ack()));
        if (input->ExpectTag(26)) goto parse_population_order_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationOrderAck population_order_ack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_order_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_order_ack()));
        if (input->ExpectTag(34)) goto parse_frag_order_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgFragOrderAck frag_order_ack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_frag_order_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_frag_order_ack()));
        if (input->ExpectTag(42)) goto parse_set_automat_mode_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgSetAutomatModeAck set_automat_mode_ack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_set_automat_mode_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_set_automat_mode_ack()));
        if (input->ExpectTag(50)) goto parse_unit_creation_request_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitCreationRequestAck unit_creation_request_ack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_creation_request_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_creation_request_ack()));
        if (input->ExpectTag(58)) goto parse_magic_action_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgMagicActionAck magic_action_ack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_magic_action_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_magic_action_ack()));
        if (input->ExpectTag(66)) goto parse_unit_magic_action_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitMagicActionAck unit_magic_action_ack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_magic_action_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_magic_action_ack()));
        if (input->ExpectTag(74)) goto parse_object_magic_action_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectMagicActionAck object_magic_action_ack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_magic_action_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_magic_action_ack()));
        if (input->ExpectTag(82)) goto parse_population_magic_action_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationMagicActionAck population_magic_action_ack = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_magic_action_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_magic_action_ack()));
        if (input->ExpectTag(90)) goto parse_change_diplomacy_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgChangeDiplomacyAck change_diplomacy_ack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_change_diplomacy_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_change_diplomacy_ack()));
        if (input->ExpectTag(98)) goto parse_automat_change_knowledge_group_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatChangeKnowledgeGroupAck automat_change_knowledge_group_ack = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_knowledge_group_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_knowledge_group_ack()));
        if (input->ExpectTag(106)) goto parse_automat_change_logistic_links_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatChangeLogisticLinksAck automat_change_logistic_links_ack = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_logistic_links_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_logistic_links_ack()));
        if (input->ExpectTag(114)) goto parse_automat_change_superior_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatChangeSuperiorAck automat_change_superior_ack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_superior_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_superior_ack()));
        if (input->ExpectTag(122)) goto parse_unit_change_superior_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitChangeSuperiorAck unit_change_superior_ack = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_change_superior_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_change_superior_ack()));
        if (input->ExpectTag(130)) goto parse_log_supply_push_flow_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck log_supply_push_flow_ack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_push_flow_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_push_flow_ack()));
        if (input->ExpectTag(138)) goto parse_log_supply_change_quotas_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck log_supply_change_quotas_ack = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_change_quotas_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_change_quotas_ack()));
        if (input->ExpectTag(146)) goto parse_control_information;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlInformation control_information = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_information:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_information()));
        if (input->ExpectTag(154)) goto parse_control_profiling_information;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlProfilingInformation control_profiling_information = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_profiling_information:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_profiling_information()));
        if (input->ExpectTag(162)) goto parse_control_begin_tick;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlBeginTick control_begin_tick = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_begin_tick:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_begin_tick()));
        if (input->ExpectTag(170)) goto parse_control_end_tick;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlEndTick control_end_tick = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_end_tick:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_end_tick()));
        if (input->ExpectTag(178)) goto parse_control_stop_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_stop_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_stop_ack()));
        if (input->ExpectTag(186)) goto parse_control_pause_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_pause_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_pause_ack()));
        if (input->ExpectTag(194)) goto parse_control_resume_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_resume_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_resume_ack()));
        if (input->ExpectTag(202)) goto parse_control_change_time_factor_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_change_time_factor_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_change_time_factor_ack()));
        if (input->ExpectTag(210)) goto parse_control_date_time_change_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlDatetimeChangeAck control_date_time_change_ack = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_date_time_change_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_date_time_change_ack()));
        if (input->ExpectTag(218)) goto parse_control_checkpoint_save_end;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlCheckPointSaveEnd control_checkpoint_save_end = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_checkpoint_save_end:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_checkpoint_save_end()));
        if (input->ExpectTag(226)) goto parse_formation_creation;
        break;
      }
      
      // optional .Common.MsgFormationCreation formation_creation = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation_creation()));
        if (input->ExpectTag(234)) goto parse_side_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgTeamCreation side_creation = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_side_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_side_creation()));
        if (input->ExpectTag(242)) goto parse_automat_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatCreation automat_creation = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_creation()));
        if (input->ExpectTag(250)) goto parse_automat_attributes;
        break;
      }
      
      // optional .MsgsSimToClient.MsgAutomatAttributes automat_attributes = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_attributes()));
        if (input->ExpectTag(258)) goto parse_unit_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitCreation unit_creation = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_creation()));
        if (input->ExpectTag(266)) goto parse_unit_attributes;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitAttributes unit_attributes = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_attributes:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_attributes()));
        if (input->ExpectTag(274)) goto parse_unit_pathfind;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitPathFind unit_pathfind = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_pathfind:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_pathfind()));
        if (input->ExpectTag(282)) goto parse_unit_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitDestruction unit_destruction = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_destruction()));
        if (input->ExpectTag(290)) goto parse_unit_environment_type;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitEnvironmentType unit_environment_type = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_environment_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_environment_type()));
        if (input->ExpectTag(298)) goto parse_change_diplomacy;
        break;
      }
      
      // optional .Common.MsgChangeDiplomacy change_diplomacy = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_change_diplomacy:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_change_diplomacy()));
        if (input->ExpectTag(306)) goto parse_unit_change_superior;
        break;
      }
      
      // optional .Common.MsgUnitChangeSuperior unit_change_superior = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_change_superior:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_change_superior()));
        if (input->ExpectTag(314)) goto parse_automat_change_logistic_links;
        break;
      }
      
      // optional .Common.MsgAutomatChangeLogisticLinks automat_change_logistic_links = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_logistic_links:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_logistic_links()));
        if (input->ExpectTag(322)) goto parse_automat_change_knowledge_group;
        break;
      }
      
      // optional .Common.MsgAutomatChangeKnowledgeGroup automat_change_knowledge_group = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_knowledge_group:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_knowledge_group()));
        if (input->ExpectTag(330)) goto parse_automat_change_superior;
        break;
      }
      
      // optional .Common.MsgAutomatChangeSuperior automat_change_superior = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_change_superior:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_change_superior()));
        if (input->ExpectTag(338)) goto parse_unit_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitKnowledgeCreation unit_knowledge_creation = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_knowledge_creation()));
        if (input->ExpectTag(346)) goto parse_unit_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitKnowledgeUpdate unit_knowledge_update = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_knowledge_update()));
        if (input->ExpectTag(354)) goto parse_unit_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitKnowledgeDestruction unit_knowledge_destruction = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_knowledge_destruction()));
        if (input->ExpectTag(362)) goto parse_start_unit_fire;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStartUnitFire start_unit_fire = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_unit_fire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_unit_fire()));
        if (input->ExpectTag(370)) goto parse_stop_unit_fire;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStopUnitFire stop_unit_fire = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stop_unit_fire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stop_unit_fire()));
        if (input->ExpectTag(378)) goto parse_start_population_fire;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStartPopulationFire start_population_fire = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_population_fire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_population_fire()));
        if (input->ExpectTag(386)) goto parse_stop_population_fire;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStopPopulationFire stop_population_fire = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stop_population_fire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stop_population_fire()));
        if (input->ExpectTag(394)) goto parse_explosion;
        break;
      }
      
      // optional .MsgsSimToClient.MsgExplosion explosion = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_explosion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_explosion()));
        if (input->ExpectTag(402)) goto parse_start_fire_effect;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStartFireEffect start_fire_effect = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_fire_effect:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_fire_effect()));
        if (input->ExpectTag(410)) goto parse_stop_fire_effect;
        break;
      }
      
      // optional .MsgsSimToClient.MsgStopFireEffect stop_fire_effect = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stop_fire_effect:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stop_fire_effect()));
        if (input->ExpectTag(418)) goto parse_report;
        break;
      }
      
      // optional .MsgsSimToClient.MsgReport report = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_report:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_report()));
        if (input->ExpectTag(426)) goto parse_invalidate_report;
        break;
      }
      
      // optional .MsgsSimToClient.MsgInvalidateReport invalidate_report = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_invalidate_report:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_invalidate_report()));
        if (input->ExpectTag(434)) goto parse_trace;
        break;
      }
      
      // optional .MsgsSimToClient.MsgTrace trace = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_trace:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_trace()));
        if (input->ExpectTag(442)) goto parse_decisional_state;
        break;
      }
      
      // optional .MsgsSimToClient.MsgDecisionalState decisional_state = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_decisional_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_decisional_state()));
        if (input->ExpectTag(450)) goto parse_debug_points;
        break;
      }
      
      // optional .MsgsSimToClient.MsgDebugPoints debug_points = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_debug_points:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_debug_points()));
        if (input->ExpectTag(458)) goto parse_unit_vision_cones;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitVisionCones unit_vision_cones = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_vision_cones:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_vision_cones()));
        if (input->ExpectTag(466)) goto parse_unit_detection;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUnitDetection unit_detection = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_detection:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_detection()));
        if (input->ExpectTag(474)) goto parse_object_detection;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectDetection object_detection = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_detection:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_detection()));
        if (input->ExpectTag(482)) goto parse_population_concentration_detection;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationDetection population_concentration_detection = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_detection:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_detection()));
        if (input->ExpectTag(490)) goto parse_population_flow_detection;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowDetection population_flow_detection = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_detection:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_detection()));
        if (input->ExpectTag(498)) goto parse_unit_order;
        break;
      }
      
      // optional .Common.MsgUnitOrder unit_order = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit_order:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit_order()));
        if (input->ExpectTag(506)) goto parse_automat_order;
        break;
      }
      
      // optional .Common.MsgAutomatOrder automat_order = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat_order:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat_order()));
        if (input->ExpectTag(514)) goto parse_population_order;
        break;
      }
      
      // optional .Common.MsgPopulationOrder population_order = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_order:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_order()));
        if (input->ExpectTag(522)) goto parse_object_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectCreation object_creation = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_creation()));
        if (input->ExpectTag(530)) goto parse_object_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectDestruction object_destruction = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_destruction()));
        if (input->ExpectTag(538)) goto parse_object_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectUpdate object_update = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_update()));
        if (input->ExpectTag(546)) goto parse_object_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectKnowledgeCreation object_knowledge_creation = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_knowledge_creation()));
        if (input->ExpectTag(554)) goto parse_object_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectKnowledgeUpdate object_knowledge_update = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_knowledge_update()));
        if (input->ExpectTag(562)) goto parse_object_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgObjectKnowledgeDestruction object_knowledge_destruction = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_object_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_object_knowledge_destruction()));
        if (input->ExpectTag(570)) goto parse_log_medical_handling_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMedicalHandlingCreation log_medical_handling_creation = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_medical_handling_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_medical_handling_creation()));
        if (input->ExpectTag(578)) goto parse_log_medical_handling_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMedicalHandlingUpdate log_medical_handling_update = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_medical_handling_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_medical_handling_update()));
        if (input->ExpectTag(586)) goto parse_log_medical_handling_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMedicalHandlingDestruction log_medical_handling_destruction = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_medical_handling_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_medical_handling_destruction()));
        if (input->ExpectTag(594)) goto parse_log_medical_state;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMedicalState log_medical_state = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_medical_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_medical_state()));
        if (input->ExpectTag(602)) goto parse_log_maintenance_handling_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMaintenanceHandlingCreation log_maintenance_handling_creation = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_maintenance_handling_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_maintenance_handling_creation()));
        if (input->ExpectTag(610)) goto parse_log_maintenance_handling_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMaintenanceHandlingUpdate log_maintenance_handling_update = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_maintenance_handling_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_maintenance_handling_update()));
        if (input->ExpectTag(618)) goto parse_log_maintenance_handling_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMaintenanceHandlingDestruction log_maintenance_handling_destruction = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_maintenance_handling_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_maintenance_handling_destruction()));
        if (input->ExpectTag(626)) goto parse_log_maintenance_state;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogMaintenanceState log_maintenance_state = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_maintenance_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_maintenance_state()));
        if (input->ExpectTag(634)) goto parse_log_supply_handling_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyHandlingCreation log_supply_handling_creation = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_handling_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_handling_creation()));
        if (input->ExpectTag(642)) goto parse_log_supply_handling_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyHandlingUpdate log_supply_handling_update = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_handling_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_handling_update()));
        if (input->ExpectTag(650)) goto parse_log_supply_handling_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyHandlingDestruction log_supply_handling_destruction = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_handling_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_handling_destruction()));
        if (input->ExpectTag(658)) goto parse_log_supply_state;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyState log_supply_state = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_state:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_state()));
        if (input->ExpectTag(666)) goto parse_log_supply_quotas;
        break;
      }
      
      // optional .MsgsSimToClient.MsgLogSupplyQuotas log_supply_quotas = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_log_supply_quotas:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_log_supply_quotas()));
        if (input->ExpectTag(674)) goto parse_population_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationCreation population_creation = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_creation()));
        if (input->ExpectTag(682)) goto parse_population_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationUpdate population_update = 85;
      case 85: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_update()));
        if (input->ExpectTag(690)) goto parse_population_concentration_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationCreation population_concentration_creation = 86;
      case 86: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_creation()));
        if (input->ExpectTag(698)) goto parse_population_concentration_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationDestruction population_concentration_destruction = 87;
      case 87: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_destruction()));
        if (input->ExpectTag(706)) goto parse_population_concentration_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationUpdate population_concentration_update = 88;
      case 88: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_update()));
        if (input->ExpectTag(714)) goto parse_population_flow_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowCreation population_flow_creation = 89;
      case 89: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_creation()));
        if (input->ExpectTag(722)) goto parse_population_flow_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowDestruction population_flow_destruction = 90;
      case 90: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_destruction()));
        if (input->ExpectTag(730)) goto parse_population_flow_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowUpdate population_flow_update = 91;
      case 91: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_update()));
        if (input->ExpectTag(738)) goto parse_population_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationKnowledgeCreation population_knowledge_creation = 92;
      case 92: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_knowledge_creation()));
        if (input->ExpectTag(746)) goto parse_population_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationKnowledgeUpdate population_knowledge_update = 93;
      case 93: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_knowledge_update()));
        if (input->ExpectTag(754)) goto parse_population_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationKnowledgeDestruction population_knowledge_destruction = 94;
      case 94: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_knowledge_destruction()));
        if (input->ExpectTag(762)) goto parse_population_concentration_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeCreation population_concentration_knowledge_creation = 95;
      case 95: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_knowledge_creation()));
        if (input->ExpectTag(770)) goto parse_population_concentration_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeDestruction population_concentration_knowledge_destruction = 96;
      case 96: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_knowledge_destruction()));
        if (input->ExpectTag(778)) goto parse_population_concentration_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeUpdate population_concentration_knowledge_update = 97;
      case 97: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_concentration_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_concentration_knowledge_update()));
        if (input->ExpectTag(786)) goto parse_population_flow_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeCreation population_flow_knowledge_creation = 98;
      case 98: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_knowledge_creation()));
        if (input->ExpectTag(794)) goto parse_population_flow_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeDestruction population_flow_knowledge_destruction = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_knowledge_destruction()));
        if (input->ExpectTag(802)) goto parse_population_flow_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeUpdate population_flow_knowledge_update = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_population_flow_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_population_flow_knowledge_update()));
        if (input->ExpectTag(810)) goto parse_folk_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgFolkCreation folk_creation = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_folk_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_folk_creation()));
        if (input->ExpectTag(818)) goto parse_folk_graph_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgFolkGraphUpdate folk_graph_update = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_folk_graph_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_folk_graph_update()));
        if (input->ExpectTag(826)) goto parse_control_global_meteo_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlGlobalMeteoAck control_global_meteo_ack = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_global_meteo_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_global_meteo_ack()));
        if (input->ExpectTag(834)) goto parse_control_local_meteo_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlLocalMeteoAck control_local_meteo_ack = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_local_meteo_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_local_meteo_ack()));
        if (input->ExpectTag(842)) goto parse_control_checkpoint_save_begin;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlCheckPointSaveBegin control_checkpoint_save_begin = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_checkpoint_save_begin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_checkpoint_save_begin()));
        if (input->ExpectTag(850)) goto parse_control_checkpoint_set_frequency_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlCheckPointSetFrequencyAck control_checkpoint_set_frequency_ack = 106;
      case 106: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_checkpoint_set_frequency_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_checkpoint_set_frequency_ack()));
        if (input->ExpectTag(858)) goto parse_control_checkpoint_save_now_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlCheckPointSaveNowAck control_checkpoint_save_now_ack = 107;
      case 107: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_checkpoint_save_now_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_checkpoint_save_now_ack()));
        if (input->ExpectTag(866)) goto parse_control_send_current_state_begin;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlSendCurrentStateBegin control_send_current_state_begin = 108;
      case 108: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_send_current_state_begin:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_send_current_state_begin()));
        if (input->ExpectTag(874)) goto parse_control_send_current_state_end;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlSendCurrentStateEnd control_send_current_state_end = 109;
      case 109: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_send_current_state_end:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_send_current_state_end()));
        if (input->ExpectTag(882)) goto parse_urban_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanCreation urban_creation = 110;
      case 110: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urban_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urban_creation()));
        if (input->ExpectTag(890)) goto parse_urban_knowledge_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanKnowledgeCreation urban_knowledge_creation = 111;
      case 111: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urban_knowledge_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urban_knowledge_creation()));
        if (input->ExpectTag(898)) goto parse_urban_knowledge_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanKnowledgeUpdate urban_knowledge_update = 112;
      case 112: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urban_knowledge_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urban_knowledge_update()));
        if (input->ExpectTag(906)) goto parse_urban_knowledge_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanKnowledgeDestruction urban_knowledge_destruction = 113;
      case 113: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urban_knowledge_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urban_knowledge_destruction()));
        if (input->ExpectTag(914)) goto parse_stock_resource;
        break;
      }
      
      // optional .Common.StockResource stock_resource = 114;
      case 114: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stock_resource:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stock_resource()));
        if (input->ExpectTag(922)) goto parse_urban_detection;
        break;
      }
      
      // optional .MsgsSimToClient.MsgUrbanDetection urban_detection = 115;
      case 115: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urban_detection:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urban_detection()));
        if (input->ExpectTag(930)) goto parse_knowledge_group_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupAck knowledge_group_ack = 116;
      case 116: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_ack()));
        if (input->ExpectTag(938)) goto parse_knowledge_group_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupCreation knowledge_group_creation = 117;
      case 117: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_creation()));
        if (input->ExpectTag(946)) goto parse_knowledge_group_update;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupUpdate knowledge_group_update = 118;
      case 118: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_update()));
        if (input->ExpectTag(954)) goto parse_knowledge_group_creation_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupCreationAck knowledge_group_creation_ack = 119;
      case 119: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_creation_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_creation_ack()));
        if (input->ExpectTag(962)) goto parse_knowledge_group_update_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupUpdateAck knowledge_group_update_ack = 120;
      case 120: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_update_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_update_ack()));
        if (input->ExpectTag(970)) goto parse_knowledge_group_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgKnowledgeGroupDestruction knowledge_group_destruction = 121;
      case 121: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group_destruction()));
        if (input->ExpectTag(978)) goto parse_action_create_fire_order_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgActionCreateFireOrderAck action_create_fire_order_ack = 122;
      case 122: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_action_create_fire_order_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_action_create_fire_order_ack()));
        if (input->ExpectTag(986)) goto parse_control_global_meteo;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlGlobalMeteo control_global_meteo = 123;
      case 123: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_global_meteo:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_global_meteo()));
        if (input->ExpectTag(994)) goto parse_control_local_meteo_creation;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlLocalMeteoCreation control_local_meteo_creation = 124;
      case 124: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_local_meteo_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_local_meteo_creation()));
        if (input->ExpectTag(1002)) goto parse_control_local_meteo_destruction;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlLocalMeteoDestruction control_local_meteo_destruction = 125;
      case 125: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_local_meteo_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_local_meteo_destruction()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSimToClient_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSimToClient_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsSimToClient.MsgUnitOrderAck unit_order_ack = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->unit_order_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatOrderAck automat_order_ack = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->automat_order_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationOrderAck population_order_ack = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->population_order_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgFragOrderAck frag_order_ack = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->frag_order_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgSetAutomatModeAck set_automat_mode_ack = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->set_automat_mode_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitCreationRequestAck unit_creation_request_ack = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->unit_creation_request_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgMagicActionAck magic_action_ack = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->magic_action_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitMagicActionAck unit_magic_action_ack = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->unit_magic_action_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectMagicActionAck object_magic_action_ack = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->object_magic_action_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationMagicActionAck population_magic_action_ack = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->population_magic_action_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgChangeDiplomacyAck change_diplomacy_ack = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->change_diplomacy_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeKnowledgeGroupAck automat_change_knowledge_group_ack = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->automat_change_knowledge_group_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeLogisticLinksAck automat_change_logistic_links_ack = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->automat_change_logistic_links_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeSuperiorAck automat_change_superior_ack = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->automat_change_superior_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitChangeSuperiorAck unit_change_superior_ack = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->unit_change_superior_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck log_supply_push_flow_ack = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->log_supply_push_flow_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck log_supply_change_quotas_ack = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      17, this->log_supply_change_quotas_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlInformation control_information = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->control_information(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlProfilingInformation control_profiling_information = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      19, this->control_profiling_information(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlBeginTick control_begin_tick = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      20, this->control_begin_tick(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlEndTick control_end_tick = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      21, this->control_end_tick(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      22, this->control_stop_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      23, this->control_pause_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->control_resume_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->control_change_time_factor_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlDatetimeChangeAck control_date_time_change_ack = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->control_date_time_change_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveEnd control_checkpoint_save_end = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      27, this->control_checkpoint_save_end(), output);
  }
  
  // optional .Common.MsgFormationCreation formation_creation = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      28, this->formation_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgTeamCreation side_creation = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      29, this->side_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatCreation automat_creation = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      30, this->automat_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgAutomatAttributes automat_attributes = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      31, this->automat_attributes(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitCreation unit_creation = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      32, this->unit_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes unit_attributes = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      33, this->unit_attributes(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitPathFind unit_pathfind = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      34, this->unit_pathfind(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitDestruction unit_destruction = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      35, this->unit_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitEnvironmentType unit_environment_type = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      36, this->unit_environment_type(), output);
  }
  
  // optional .Common.MsgChangeDiplomacy change_diplomacy = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      37, this->change_diplomacy(), output);
  }
  
  // optional .Common.MsgUnitChangeSuperior unit_change_superior = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      38, this->unit_change_superior(), output);
  }
  
  // optional .Common.MsgAutomatChangeLogisticLinks automat_change_logistic_links = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      39, this->automat_change_logistic_links(), output);
  }
  
  // optional .Common.MsgAutomatChangeKnowledgeGroup automat_change_knowledge_group = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      40, this->automat_change_knowledge_group(), output);
  }
  
  // optional .Common.MsgAutomatChangeSuperior automat_change_superior = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      41, this->automat_change_superior(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeCreation unit_knowledge_creation = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      42, this->unit_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeUpdate unit_knowledge_update = 43;
  if (_has_bit(42)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      43, this->unit_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeDestruction unit_knowledge_destruction = 44;
  if (_has_bit(43)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      44, this->unit_knowledge_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgStartUnitFire start_unit_fire = 45;
  if (_has_bit(44)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      45, this->start_unit_fire(), output);
  }
  
  // optional .MsgsSimToClient.MsgStopUnitFire stop_unit_fire = 46;
  if (_has_bit(45)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      46, this->stop_unit_fire(), output);
  }
  
  // optional .MsgsSimToClient.MsgStartPopulationFire start_population_fire = 47;
  if (_has_bit(46)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      47, this->start_population_fire(), output);
  }
  
  // optional .MsgsSimToClient.MsgStopPopulationFire stop_population_fire = 48;
  if (_has_bit(47)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      48, this->stop_population_fire(), output);
  }
  
  // optional .MsgsSimToClient.MsgExplosion explosion = 49;
  if (_has_bit(48)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      49, this->explosion(), output);
  }
  
  // optional .MsgsSimToClient.MsgStartFireEffect start_fire_effect = 50;
  if (_has_bit(49)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      50, this->start_fire_effect(), output);
  }
  
  // optional .MsgsSimToClient.MsgStopFireEffect stop_fire_effect = 51;
  if (_has_bit(50)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      51, this->stop_fire_effect(), output);
  }
  
  // optional .MsgsSimToClient.MsgReport report = 52;
  if (_has_bit(51)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      52, this->report(), output);
  }
  
  // optional .MsgsSimToClient.MsgInvalidateReport invalidate_report = 53;
  if (_has_bit(52)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      53, this->invalidate_report(), output);
  }
  
  // optional .MsgsSimToClient.MsgTrace trace = 54;
  if (_has_bit(53)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      54, this->trace(), output);
  }
  
  // optional .MsgsSimToClient.MsgDecisionalState decisional_state = 55;
  if (_has_bit(54)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      55, this->decisional_state(), output);
  }
  
  // optional .MsgsSimToClient.MsgDebugPoints debug_points = 56;
  if (_has_bit(55)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      56, this->debug_points(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitVisionCones unit_vision_cones = 57;
  if (_has_bit(56)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      57, this->unit_vision_cones(), output);
  }
  
  // optional .MsgsSimToClient.MsgUnitDetection unit_detection = 58;
  if (_has_bit(57)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      58, this->unit_detection(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectDetection object_detection = 59;
  if (_has_bit(58)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      59, this->object_detection(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationDetection population_concentration_detection = 60;
  if (_has_bit(59)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      60, this->population_concentration_detection(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowDetection population_flow_detection = 61;
  if (_has_bit(60)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      61, this->population_flow_detection(), output);
  }
  
  // optional .Common.MsgUnitOrder unit_order = 62;
  if (_has_bit(61)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      62, this->unit_order(), output);
  }
  
  // optional .Common.MsgAutomatOrder automat_order = 63;
  if (_has_bit(62)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      63, this->automat_order(), output);
  }
  
  // optional .Common.MsgPopulationOrder population_order = 64;
  if (_has_bit(63)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      64, this->population_order(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectCreation object_creation = 65;
  if (_has_bit(64)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      65, this->object_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectDestruction object_destruction = 66;
  if (_has_bit(65)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      66, this->object_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectUpdate object_update = 67;
  if (_has_bit(66)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      67, this->object_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeCreation object_knowledge_creation = 68;
  if (_has_bit(67)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      68, this->object_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeUpdate object_knowledge_update = 69;
  if (_has_bit(68)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      69, this->object_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeDestruction object_knowledge_destruction = 70;
  if (_has_bit(69)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      70, this->object_knowledge_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingCreation log_medical_handling_creation = 71;
  if (_has_bit(70)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      71, this->log_medical_handling_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingUpdate log_medical_handling_update = 72;
  if (_has_bit(71)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      72, this->log_medical_handling_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingDestruction log_medical_handling_destruction = 73;
  if (_has_bit(72)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      73, this->log_medical_handling_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalState log_medical_state = 74;
  if (_has_bit(73)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      74, this->log_medical_state(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingCreation log_maintenance_handling_creation = 75;
  if (_has_bit(74)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      75, this->log_maintenance_handling_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingUpdate log_maintenance_handling_update = 76;
  if (_has_bit(75)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      76, this->log_maintenance_handling_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingDestruction log_maintenance_handling_destruction = 77;
  if (_has_bit(76)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      77, this->log_maintenance_handling_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceState log_maintenance_state = 78;
  if (_has_bit(77)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      78, this->log_maintenance_state(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingCreation log_supply_handling_creation = 79;
  if (_has_bit(78)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      79, this->log_supply_handling_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingUpdate log_supply_handling_update = 80;
  if (_has_bit(79)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      80, this->log_supply_handling_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingDestruction log_supply_handling_destruction = 81;
  if (_has_bit(80)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      81, this->log_supply_handling_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyState log_supply_state = 82;
  if (_has_bit(81)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      82, this->log_supply_state(), output);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyQuotas log_supply_quotas = 83;
  if (_has_bit(82)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      83, this->log_supply_quotas(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationCreation population_creation = 84;
  if (_has_bit(83)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      84, this->population_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationUpdate population_update = 85;
  if (_has_bit(84)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      85, this->population_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationCreation population_concentration_creation = 86;
  if (_has_bit(85)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      86, this->population_concentration_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationDestruction population_concentration_destruction = 87;
  if (_has_bit(86)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      87, this->population_concentration_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationUpdate population_concentration_update = 88;
  if (_has_bit(87)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      88, this->population_concentration_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowCreation population_flow_creation = 89;
  if (_has_bit(88)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      89, this->population_flow_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowDestruction population_flow_destruction = 90;
  if (_has_bit(89)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      90, this->population_flow_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowUpdate population_flow_update = 91;
  if (_has_bit(90)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      91, this->population_flow_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeCreation population_knowledge_creation = 92;
  if (_has_bit(91)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      92, this->population_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeUpdate population_knowledge_update = 93;
  if (_has_bit(92)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      93, this->population_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeDestruction population_knowledge_destruction = 94;
  if (_has_bit(93)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      94, this->population_knowledge_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeCreation population_concentration_knowledge_creation = 95;
  if (_has_bit(94)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      95, this->population_concentration_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeDestruction population_concentration_knowledge_destruction = 96;
  if (_has_bit(95)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      96, this->population_concentration_knowledge_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeUpdate population_concentration_knowledge_update = 97;
  if (_has_bit(96)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      97, this->population_concentration_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeCreation population_flow_knowledge_creation = 98;
  if (_has_bit(97)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      98, this->population_flow_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeDestruction population_flow_knowledge_destruction = 99;
  if (_has_bit(98)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      99, this->population_flow_knowledge_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeUpdate population_flow_knowledge_update = 100;
  if (_has_bit(99)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      100, this->population_flow_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgFolkCreation folk_creation = 101;
  if (_has_bit(100)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      101, this->folk_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgFolkGraphUpdate folk_graph_update = 102;
  if (_has_bit(101)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      102, this->folk_graph_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlGlobalMeteoAck control_global_meteo_ack = 103;
  if (_has_bit(102)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      103, this->control_global_meteo_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoAck control_local_meteo_ack = 104;
  if (_has_bit(103)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      104, this->control_local_meteo_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveBegin control_checkpoint_save_begin = 105;
  if (_has_bit(104)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      105, this->control_checkpoint_save_begin(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSetFrequencyAck control_checkpoint_set_frequency_ack = 106;
  if (_has_bit(105)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      106, this->control_checkpoint_set_frequency_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveNowAck control_checkpoint_save_now_ack = 107;
  if (_has_bit(106)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      107, this->control_checkpoint_save_now_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlSendCurrentStateBegin control_send_current_state_begin = 108;
  if (_has_bit(107)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      108, this->control_send_current_state_begin(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlSendCurrentStateEnd control_send_current_state_end = 109;
  if (_has_bit(108)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      109, this->control_send_current_state_end(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanCreation urban_creation = 110;
  if (_has_bit(109)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      110, this->urban_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeCreation urban_knowledge_creation = 111;
  if (_has_bit(110)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      111, this->urban_knowledge_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeUpdate urban_knowledge_update = 112;
  if (_has_bit(111)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      112, this->urban_knowledge_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeDestruction urban_knowledge_destruction = 113;
  if (_has_bit(112)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      113, this->urban_knowledge_destruction(), output);
  }
  
  // optional .Common.StockResource stock_resource = 114;
  if (_has_bit(113)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      114, this->stock_resource(), output);
  }
  
  // optional .MsgsSimToClient.MsgUrbanDetection urban_detection = 115;
  if (_has_bit(114)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      115, this->urban_detection(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupAck knowledge_group_ack = 116;
  if (_has_bit(115)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      116, this->knowledge_group_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupCreation knowledge_group_creation = 117;
  if (_has_bit(116)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      117, this->knowledge_group_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupUpdate knowledge_group_update = 118;
  if (_has_bit(117)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      118, this->knowledge_group_update(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupCreationAck knowledge_group_creation_ack = 119;
  if (_has_bit(118)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      119, this->knowledge_group_creation_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupUpdateAck knowledge_group_update_ack = 120;
  if (_has_bit(119)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      120, this->knowledge_group_update_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupDestruction knowledge_group_destruction = 121;
  if (_has_bit(120)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      121, this->knowledge_group_destruction(), output);
  }
  
  // optional .MsgsSimToClient.MsgActionCreateFireOrderAck action_create_fire_order_ack = 122;
  if (_has_bit(121)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      122, this->action_create_fire_order_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlGlobalMeteo control_global_meteo = 123;
  if (_has_bit(122)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      123, this->control_global_meteo(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoCreation control_local_meteo_creation = 124;
  if (_has_bit(123)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      124, this->control_local_meteo_creation(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoDestruction control_local_meteo_destruction = 125;
  if (_has_bit(124)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      125, this->control_local_meteo_destruction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSimToClient_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsSimToClient.MsgUnitOrderAck unit_order_ack = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit_order_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatOrderAck automat_order_ack = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->automat_order_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationOrderAck population_order_ack = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->population_order_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgFragOrderAck frag_order_ack = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->frag_order_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgSetAutomatModeAck set_automat_mode_ack = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->set_automat_mode_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitCreationRequestAck unit_creation_request_ack = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->unit_creation_request_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgMagicActionAck magic_action_ack = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->magic_action_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitMagicActionAck unit_magic_action_ack = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->unit_magic_action_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectMagicActionAck object_magic_action_ack = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->object_magic_action_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationMagicActionAck population_magic_action_ack = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->population_magic_action_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgChangeDiplomacyAck change_diplomacy_ack = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->change_diplomacy_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeKnowledgeGroupAck automat_change_knowledge_group_ack = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->automat_change_knowledge_group_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeLogisticLinksAck automat_change_logistic_links_ack = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->automat_change_logistic_links_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatChangeSuperiorAck automat_change_superior_ack = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->automat_change_superior_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitChangeSuperiorAck unit_change_superior_ack = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->unit_change_superior_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck log_supply_push_flow_ack = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->log_supply_push_flow_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck log_supply_change_quotas_ack = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->log_supply_change_quotas_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlInformation control_information = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->control_information(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlProfilingInformation control_profiling_information = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->control_profiling_information(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlBeginTick control_begin_tick = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->control_begin_tick(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlEndTick control_end_tick = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->control_end_tick(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->control_stop_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->control_pause_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->control_resume_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->control_change_time_factor_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlDatetimeChangeAck control_date_time_change_ack = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->control_date_time_change_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveEnd control_checkpoint_save_end = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->control_checkpoint_save_end(), target);
  }
  
  // optional .Common.MsgFormationCreation formation_creation = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->formation_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgTeamCreation side_creation = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->side_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatCreation automat_creation = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->automat_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgAutomatAttributes automat_attributes = 31;
  if (_has_bit(30)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->automat_attributes(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitCreation unit_creation = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->unit_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitAttributes unit_attributes = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->unit_attributes(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitPathFind unit_pathfind = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->unit_pathfind(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitDestruction unit_destruction = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->unit_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitEnvironmentType unit_environment_type = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->unit_environment_type(), target);
  }
  
  // optional .Common.MsgChangeDiplomacy change_diplomacy = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->change_diplomacy(), target);
  }
  
  // optional .Common.MsgUnitChangeSuperior unit_change_superior = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->unit_change_superior(), target);
  }
  
  // optional .Common.MsgAutomatChangeLogisticLinks automat_change_logistic_links = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->automat_change_logistic_links(), target);
  }
  
  // optional .Common.MsgAutomatChangeKnowledgeGroup automat_change_knowledge_group = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->automat_change_knowledge_group(), target);
  }
  
  // optional .Common.MsgAutomatChangeSuperior automat_change_superior = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->automat_change_superior(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeCreation unit_knowledge_creation = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->unit_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeUpdate unit_knowledge_update = 43;
  if (_has_bit(42)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->unit_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitKnowledgeDestruction unit_knowledge_destruction = 44;
  if (_has_bit(43)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->unit_knowledge_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgStartUnitFire start_unit_fire = 45;
  if (_has_bit(44)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->start_unit_fire(), target);
  }
  
  // optional .MsgsSimToClient.MsgStopUnitFire stop_unit_fire = 46;
  if (_has_bit(45)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->stop_unit_fire(), target);
  }
  
  // optional .MsgsSimToClient.MsgStartPopulationFire start_population_fire = 47;
  if (_has_bit(46)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->start_population_fire(), target);
  }
  
  // optional .MsgsSimToClient.MsgStopPopulationFire stop_population_fire = 48;
  if (_has_bit(47)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->stop_population_fire(), target);
  }
  
  // optional .MsgsSimToClient.MsgExplosion explosion = 49;
  if (_has_bit(48)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        49, this->explosion(), target);
  }
  
  // optional .MsgsSimToClient.MsgStartFireEffect start_fire_effect = 50;
  if (_has_bit(49)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->start_fire_effect(), target);
  }
  
  // optional .MsgsSimToClient.MsgStopFireEffect stop_fire_effect = 51;
  if (_has_bit(50)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->stop_fire_effect(), target);
  }
  
  // optional .MsgsSimToClient.MsgReport report = 52;
  if (_has_bit(51)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->report(), target);
  }
  
  // optional .MsgsSimToClient.MsgInvalidateReport invalidate_report = 53;
  if (_has_bit(52)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->invalidate_report(), target);
  }
  
  // optional .MsgsSimToClient.MsgTrace trace = 54;
  if (_has_bit(53)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->trace(), target);
  }
  
  // optional .MsgsSimToClient.MsgDecisionalState decisional_state = 55;
  if (_has_bit(54)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        55, this->decisional_state(), target);
  }
  
  // optional .MsgsSimToClient.MsgDebugPoints debug_points = 56;
  if (_has_bit(55)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        56, this->debug_points(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitVisionCones unit_vision_cones = 57;
  if (_has_bit(56)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        57, this->unit_vision_cones(), target);
  }
  
  // optional .MsgsSimToClient.MsgUnitDetection unit_detection = 58;
  if (_has_bit(57)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        58, this->unit_detection(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectDetection object_detection = 59;
  if (_has_bit(58)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->object_detection(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationDetection population_concentration_detection = 60;
  if (_has_bit(59)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->population_concentration_detection(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowDetection population_flow_detection = 61;
  if (_has_bit(60)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        61, this->population_flow_detection(), target);
  }
  
  // optional .Common.MsgUnitOrder unit_order = 62;
  if (_has_bit(61)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        62, this->unit_order(), target);
  }
  
  // optional .Common.MsgAutomatOrder automat_order = 63;
  if (_has_bit(62)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        63, this->automat_order(), target);
  }
  
  // optional .Common.MsgPopulationOrder population_order = 64;
  if (_has_bit(63)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        64, this->population_order(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectCreation object_creation = 65;
  if (_has_bit(64)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        65, this->object_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectDestruction object_destruction = 66;
  if (_has_bit(65)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        66, this->object_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectUpdate object_update = 67;
  if (_has_bit(66)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        67, this->object_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeCreation object_knowledge_creation = 68;
  if (_has_bit(67)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        68, this->object_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeUpdate object_knowledge_update = 69;
  if (_has_bit(68)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        69, this->object_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgObjectKnowledgeDestruction object_knowledge_destruction = 70;
  if (_has_bit(69)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->object_knowledge_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingCreation log_medical_handling_creation = 71;
  if (_has_bit(70)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->log_medical_handling_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingUpdate log_medical_handling_update = 72;
  if (_has_bit(71)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->log_medical_handling_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalHandlingDestruction log_medical_handling_destruction = 73;
  if (_has_bit(72)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->log_medical_handling_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMedicalState log_medical_state = 74;
  if (_has_bit(73)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->log_medical_state(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingCreation log_maintenance_handling_creation = 75;
  if (_has_bit(74)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        75, this->log_maintenance_handling_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingUpdate log_maintenance_handling_update = 76;
  if (_has_bit(75)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        76, this->log_maintenance_handling_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceHandlingDestruction log_maintenance_handling_destruction = 77;
  if (_has_bit(76)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        77, this->log_maintenance_handling_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogMaintenanceState log_maintenance_state = 78;
  if (_has_bit(77)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        78, this->log_maintenance_state(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingCreation log_supply_handling_creation = 79;
  if (_has_bit(78)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        79, this->log_supply_handling_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingUpdate log_supply_handling_update = 80;
  if (_has_bit(79)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->log_supply_handling_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyHandlingDestruction log_supply_handling_destruction = 81;
  if (_has_bit(80)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        81, this->log_supply_handling_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyState log_supply_state = 82;
  if (_has_bit(81)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        82, this->log_supply_state(), target);
  }
  
  // optional .MsgsSimToClient.MsgLogSupplyQuotas log_supply_quotas = 83;
  if (_has_bit(82)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        83, this->log_supply_quotas(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationCreation population_creation = 84;
  if (_has_bit(83)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        84, this->population_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationUpdate population_update = 85;
  if (_has_bit(84)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->population_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationCreation population_concentration_creation = 86;
  if (_has_bit(85)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->population_concentration_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationDestruction population_concentration_destruction = 87;
  if (_has_bit(86)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->population_concentration_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationUpdate population_concentration_update = 88;
  if (_has_bit(87)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, this->population_concentration_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowCreation population_flow_creation = 89;
  if (_has_bit(88)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        89, this->population_flow_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowDestruction population_flow_destruction = 90;
  if (_has_bit(89)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        90, this->population_flow_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowUpdate population_flow_update = 91;
  if (_has_bit(90)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        91, this->population_flow_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeCreation population_knowledge_creation = 92;
  if (_has_bit(91)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        92, this->population_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeUpdate population_knowledge_update = 93;
  if (_has_bit(92)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        93, this->population_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationKnowledgeDestruction population_knowledge_destruction = 94;
  if (_has_bit(93)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        94, this->population_knowledge_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeCreation population_concentration_knowledge_creation = 95;
  if (_has_bit(94)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        95, this->population_concentration_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeDestruction population_concentration_knowledge_destruction = 96;
  if (_has_bit(95)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        96, this->population_concentration_knowledge_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeUpdate population_concentration_knowledge_update = 97;
  if (_has_bit(96)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        97, this->population_concentration_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeCreation population_flow_knowledge_creation = 98;
  if (_has_bit(97)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        98, this->population_flow_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeDestruction population_flow_knowledge_destruction = 99;
  if (_has_bit(98)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->population_flow_knowledge_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeUpdate population_flow_knowledge_update = 100;
  if (_has_bit(99)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->population_flow_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgFolkCreation folk_creation = 101;
  if (_has_bit(100)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->folk_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgFolkGraphUpdate folk_graph_update = 102;
  if (_has_bit(101)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->folk_graph_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlGlobalMeteoAck control_global_meteo_ack = 103;
  if (_has_bit(102)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->control_global_meteo_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoAck control_local_meteo_ack = 104;
  if (_has_bit(103)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->control_local_meteo_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveBegin control_checkpoint_save_begin = 105;
  if (_has_bit(104)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->control_checkpoint_save_begin(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSetFrequencyAck control_checkpoint_set_frequency_ack = 106;
  if (_has_bit(105)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->control_checkpoint_set_frequency_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlCheckPointSaveNowAck control_checkpoint_save_now_ack = 107;
  if (_has_bit(106)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->control_checkpoint_save_now_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlSendCurrentStateBegin control_send_current_state_begin = 108;
  if (_has_bit(107)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->control_send_current_state_begin(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlSendCurrentStateEnd control_send_current_state_end = 109;
  if (_has_bit(108)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->control_send_current_state_end(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanCreation urban_creation = 110;
  if (_has_bit(109)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->urban_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeCreation urban_knowledge_creation = 111;
  if (_has_bit(110)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->urban_knowledge_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeUpdate urban_knowledge_update = 112;
  if (_has_bit(111)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        112, this->urban_knowledge_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanKnowledgeDestruction urban_knowledge_destruction = 113;
  if (_has_bit(112)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        113, this->urban_knowledge_destruction(), target);
  }
  
  // optional .Common.StockResource stock_resource = 114;
  if (_has_bit(113)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        114, this->stock_resource(), target);
  }
  
  // optional .MsgsSimToClient.MsgUrbanDetection urban_detection = 115;
  if (_has_bit(114)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        115, this->urban_detection(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupAck knowledge_group_ack = 116;
  if (_has_bit(115)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        116, this->knowledge_group_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupCreation knowledge_group_creation = 117;
  if (_has_bit(116)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        117, this->knowledge_group_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupUpdate knowledge_group_update = 118;
  if (_has_bit(117)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        118, this->knowledge_group_update(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupCreationAck knowledge_group_creation_ack = 119;
  if (_has_bit(118)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        119, this->knowledge_group_creation_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupUpdateAck knowledge_group_update_ack = 120;
  if (_has_bit(119)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->knowledge_group_update_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgKnowledgeGroupDestruction knowledge_group_destruction = 121;
  if (_has_bit(120)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        121, this->knowledge_group_destruction(), target);
  }
  
  // optional .MsgsSimToClient.MsgActionCreateFireOrderAck action_create_fire_order_ack = 122;
  if (_has_bit(121)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        122, this->action_create_fire_order_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlGlobalMeteo control_global_meteo = 123;
  if (_has_bit(122)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        123, this->control_global_meteo(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoCreation control_local_meteo_creation = 124;
  if (_has_bit(123)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        124, this->control_local_meteo_creation(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlLocalMeteoDestruction control_local_meteo_destruction = 125;
  if (_has_bit(124)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        125, this->control_local_meteo_destruction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSimToClient_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsSimToClient.MsgUnitOrderAck unit_order_ack = 1;
    if (has_unit_order_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_order_ack());
    }
    
    // optional .MsgsSimToClient.MsgAutomatOrderAck automat_order_ack = 2;
    if (has_automat_order_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_order_ack());
    }
    
    // optional .MsgsSimToClient.MsgPopulationOrderAck population_order_ack = 3;
    if (has_population_order_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_order_ack());
    }
    
    // optional .MsgsSimToClient.MsgFragOrderAck frag_order_ack = 4;
    if (has_frag_order_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frag_order_ack());
    }
    
    // optional .MsgsSimToClient.MsgSetAutomatModeAck set_automat_mode_ack = 5;
    if (has_set_automat_mode_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->set_automat_mode_ack());
    }
    
    // optional .MsgsSimToClient.MsgUnitCreationRequestAck unit_creation_request_ack = 6;
    if (has_unit_creation_request_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_creation_request_ack());
    }
    
    // optional .MsgsSimToClient.MsgMagicActionAck magic_action_ack = 7;
    if (has_magic_action_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic_action_ack());
    }
    
    // optional .MsgsSimToClient.MsgUnitMagicActionAck unit_magic_action_ack = 8;
    if (has_unit_magic_action_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_magic_action_ack());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgsSimToClient.MsgObjectMagicActionAck object_magic_action_ack = 9;
    if (has_object_magic_action_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_magic_action_ack());
    }
    
    // optional .MsgsSimToClient.MsgPopulationMagicActionAck population_magic_action_ack = 10;
    if (has_population_magic_action_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_magic_action_ack());
    }
    
    // optional .MsgsSimToClient.MsgChangeDiplomacyAck change_diplomacy_ack = 11;
    if (has_change_diplomacy_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_diplomacy_ack());
    }
    
    // optional .MsgsSimToClient.MsgAutomatChangeKnowledgeGroupAck automat_change_knowledge_group_ack = 12;
    if (has_automat_change_knowledge_group_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_knowledge_group_ack());
    }
    
    // optional .MsgsSimToClient.MsgAutomatChangeLogisticLinksAck automat_change_logistic_links_ack = 13;
    if (has_automat_change_logistic_links_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_logistic_links_ack());
    }
    
    // optional .MsgsSimToClient.MsgAutomatChangeSuperiorAck automat_change_superior_ack = 14;
    if (has_automat_change_superior_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_superior_ack());
    }
    
    // optional .MsgsSimToClient.MsgUnitChangeSuperiorAck unit_change_superior_ack = 15;
    if (has_unit_change_superior_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_change_superior_ack());
    }
    
    // optional .MsgsSimToClient.MsgLogSupplyPushFlowAck log_supply_push_flow_ack = 16;
    if (has_log_supply_push_flow_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_push_flow_ack());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .MsgsSimToClient.MsgLogSupplyChangeQuotasAck log_supply_change_quotas_ack = 17;
    if (has_log_supply_change_quotas_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_change_quotas_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlInformation control_information = 18;
    if (has_control_information()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_information());
    }
    
    // optional .MsgsSimToClient.MsgControlProfilingInformation control_profiling_information = 19;
    if (has_control_profiling_information()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_profiling_information());
    }
    
    // optional .MsgsSimToClient.MsgControlBeginTick control_begin_tick = 20;
    if (has_control_begin_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_begin_tick());
    }
    
    // optional .MsgsSimToClient.MsgControlEndTick control_end_tick = 21;
    if (has_control_end_tick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_end_tick());
    }
    
    // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 22;
    if (has_control_stop_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_stop_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 23;
    if (has_control_pause_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_pause_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 24;
    if (has_control_resume_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_resume_ack());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 25;
    if (has_control_change_time_factor_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_change_time_factor_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlDatetimeChangeAck control_date_time_change_ack = 26;
    if (has_control_date_time_change_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_date_time_change_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlCheckPointSaveEnd control_checkpoint_save_end = 27;
    if (has_control_checkpoint_save_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_checkpoint_save_end());
    }
    
    // optional .Common.MsgFormationCreation formation_creation = 28;
    if (has_formation_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation_creation());
    }
    
    // optional .MsgsSimToClient.MsgTeamCreation side_creation = 29;
    if (has_side_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->side_creation());
    }
    
    // optional .MsgsSimToClient.MsgAutomatCreation automat_creation = 30;
    if (has_automat_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_creation());
    }
    
    // optional .MsgsSimToClient.MsgAutomatAttributes automat_attributes = 31;
    if (has_automat_attributes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_attributes());
    }
    
    // optional .MsgsSimToClient.MsgUnitCreation unit_creation = 32;
    if (has_unit_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_creation());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .MsgsSimToClient.MsgUnitAttributes unit_attributes = 33;
    if (has_unit_attributes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_attributes());
    }
    
    // optional .MsgsSimToClient.MsgUnitPathFind unit_pathfind = 34;
    if (has_unit_pathfind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_pathfind());
    }
    
    // optional .MsgsSimToClient.MsgUnitDestruction unit_destruction = 35;
    if (has_unit_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_destruction());
    }
    
    // optional .MsgsSimToClient.MsgUnitEnvironmentType unit_environment_type = 36;
    if (has_unit_environment_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_environment_type());
    }
    
    // optional .Common.MsgChangeDiplomacy change_diplomacy = 37;
    if (has_change_diplomacy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_diplomacy());
    }
    
    // optional .Common.MsgUnitChangeSuperior unit_change_superior = 38;
    if (has_unit_change_superior()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_change_superior());
    }
    
    // optional .Common.MsgAutomatChangeLogisticLinks automat_change_logistic_links = 39;
    if (has_automat_change_logistic_links()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_logistic_links());
    }
    
    // optional .Common.MsgAutomatChangeKnowledgeGroup automat_change_knowledge_group = 40;
    if (has_automat_change_knowledge_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_knowledge_group());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .Common.MsgAutomatChangeSuperior automat_change_superior = 41;
    if (has_automat_change_superior()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_change_superior());
    }
    
    // optional .MsgsSimToClient.MsgUnitKnowledgeCreation unit_knowledge_creation = 42;
    if (has_unit_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgUnitKnowledgeUpdate unit_knowledge_update = 43;
    if (has_unit_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_knowledge_update());
    }
    
    // optional .MsgsSimToClient.MsgUnitKnowledgeDestruction unit_knowledge_destruction = 44;
    if (has_unit_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_knowledge_destruction());
    }
    
    // optional .MsgsSimToClient.MsgStartUnitFire start_unit_fire = 45;
    if (has_start_unit_fire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_unit_fire());
    }
    
    // optional .MsgsSimToClient.MsgStopUnitFire stop_unit_fire = 46;
    if (has_stop_unit_fire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_unit_fire());
    }
    
    // optional .MsgsSimToClient.MsgStartPopulationFire start_population_fire = 47;
    if (has_start_population_fire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_population_fire());
    }
    
    // optional .MsgsSimToClient.MsgStopPopulationFire stop_population_fire = 48;
    if (has_stop_population_fire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_population_fire());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .MsgsSimToClient.MsgExplosion explosion = 49;
    if (has_explosion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->explosion());
    }
    
    // optional .MsgsSimToClient.MsgStartFireEffect start_fire_effect = 50;
    if (has_start_fire_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_fire_effect());
    }
    
    // optional .MsgsSimToClient.MsgStopFireEffect stop_fire_effect = 51;
    if (has_stop_fire_effect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stop_fire_effect());
    }
    
    // optional .MsgsSimToClient.MsgReport report = 52;
    if (has_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->report());
    }
    
    // optional .MsgsSimToClient.MsgInvalidateReport invalidate_report = 53;
    if (has_invalidate_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invalidate_report());
    }
    
    // optional .MsgsSimToClient.MsgTrace trace = 54;
    if (has_trace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trace());
    }
    
    // optional .MsgsSimToClient.MsgDecisionalState decisional_state = 55;
    if (has_decisional_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->decisional_state());
    }
    
    // optional .MsgsSimToClient.MsgDebugPoints debug_points = 56;
    if (has_debug_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debug_points());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .MsgsSimToClient.MsgUnitVisionCones unit_vision_cones = 57;
    if (has_unit_vision_cones()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_vision_cones());
    }
    
    // optional .MsgsSimToClient.MsgUnitDetection unit_detection = 58;
    if (has_unit_detection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_detection());
    }
    
    // optional .MsgsSimToClient.MsgObjectDetection object_detection = 59;
    if (has_object_detection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_detection());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationDetection population_concentration_detection = 60;
    if (has_population_concentration_detection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_detection());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowDetection population_flow_detection = 61;
    if (has_population_flow_detection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_detection());
    }
    
    // optional .Common.MsgUnitOrder unit_order = 62;
    if (has_unit_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit_order());
    }
    
    // optional .Common.MsgAutomatOrder automat_order = 63;
    if (has_automat_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat_order());
    }
    
    // optional .Common.MsgPopulationOrder population_order = 64;
    if (has_population_order()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_order());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .MsgsSimToClient.MsgObjectCreation object_creation = 65;
    if (has_object_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_creation());
    }
    
    // optional .MsgsSimToClient.MsgObjectDestruction object_destruction = 66;
    if (has_object_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_destruction());
    }
    
    // optional .MsgsSimToClient.MsgObjectUpdate object_update = 67;
    if (has_object_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_update());
    }
    
    // optional .MsgsSimToClient.MsgObjectKnowledgeCreation object_knowledge_creation = 68;
    if (has_object_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgObjectKnowledgeUpdate object_knowledge_update = 69;
    if (has_object_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_knowledge_update());
    }
    
    // optional .MsgsSimToClient.MsgObjectKnowledgeDestruction object_knowledge_destruction = 70;
    if (has_object_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object_knowledge_destruction());
    }
    
    // optional .MsgsSimToClient.MsgLogMedicalHandlingCreation log_medical_handling_creation = 71;
    if (has_log_medical_handling_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_medical_handling_creation());
    }
    
    // optional .MsgsSimToClient.MsgLogMedicalHandlingUpdate log_medical_handling_update = 72;
    if (has_log_medical_handling_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_medical_handling_update());
    }
    
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .MsgsSimToClient.MsgLogMedicalHandlingDestruction log_medical_handling_destruction = 73;
    if (has_log_medical_handling_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_medical_handling_destruction());
    }
    
    // optional .MsgsSimToClient.MsgLogMedicalState log_medical_state = 74;
    if (has_log_medical_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_medical_state());
    }
    
    // optional .MsgsSimToClient.MsgLogMaintenanceHandlingCreation log_maintenance_handling_creation = 75;
    if (has_log_maintenance_handling_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_maintenance_handling_creation());
    }
    
    // optional .MsgsSimToClient.MsgLogMaintenanceHandlingUpdate log_maintenance_handling_update = 76;
    if (has_log_maintenance_handling_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_maintenance_handling_update());
    }
    
    // optional .MsgsSimToClient.MsgLogMaintenanceHandlingDestruction log_maintenance_handling_destruction = 77;
    if (has_log_maintenance_handling_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_maintenance_handling_destruction());
    }
    
    // optional .MsgsSimToClient.MsgLogMaintenanceState log_maintenance_state = 78;
    if (has_log_maintenance_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_maintenance_state());
    }
    
    // optional .MsgsSimToClient.MsgLogSupplyHandlingCreation log_supply_handling_creation = 79;
    if (has_log_supply_handling_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_handling_creation());
    }
    
    // optional .MsgsSimToClient.MsgLogSupplyHandlingUpdate log_supply_handling_update = 80;
    if (has_log_supply_handling_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_handling_update());
    }
    
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .MsgsSimToClient.MsgLogSupplyHandlingDestruction log_supply_handling_destruction = 81;
    if (has_log_supply_handling_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_handling_destruction());
    }
    
    // optional .MsgsSimToClient.MsgLogSupplyState log_supply_state = 82;
    if (has_log_supply_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_state());
    }
    
    // optional .MsgsSimToClient.MsgLogSupplyQuotas log_supply_quotas = 83;
    if (has_log_supply_quotas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_supply_quotas());
    }
    
    // optional .MsgsSimToClient.MsgPopulationCreation population_creation = 84;
    if (has_population_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationUpdate population_update = 85;
    if (has_population_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_update());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationCreation population_concentration_creation = 86;
    if (has_population_concentration_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationDestruction population_concentration_destruction = 87;
    if (has_population_concentration_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_destruction());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationUpdate population_concentration_update = 88;
    if (has_population_concentration_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_update());
    }
    
  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .MsgsSimToClient.MsgPopulationFlowCreation population_flow_creation = 89;
    if (has_population_flow_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowDestruction population_flow_destruction = 90;
    if (has_population_flow_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_destruction());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowUpdate population_flow_update = 91;
    if (has_population_flow_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_update());
    }
    
    // optional .MsgsSimToClient.MsgPopulationKnowledgeCreation population_knowledge_creation = 92;
    if (has_population_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationKnowledgeUpdate population_knowledge_update = 93;
    if (has_population_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_knowledge_update());
    }
    
    // optional .MsgsSimToClient.MsgPopulationKnowledgeDestruction population_knowledge_destruction = 94;
    if (has_population_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_knowledge_destruction());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeCreation population_concentration_knowledge_creation = 95;
    if (has_population_concentration_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeDestruction population_concentration_knowledge_destruction = 96;
    if (has_population_concentration_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_knowledge_destruction());
    }
    
  }
  if (_has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    // optional .MsgsSimToClient.MsgPopulationConcentrationKnowledgeUpdate population_concentration_knowledge_update = 97;
    if (has_population_concentration_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_concentration_knowledge_update());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeCreation population_flow_knowledge_creation = 98;
    if (has_population_flow_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeDestruction population_flow_knowledge_destruction = 99;
    if (has_population_flow_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_knowledge_destruction());
    }
    
    // optional .MsgsSimToClient.MsgPopulationFlowKnowledgeUpdate population_flow_knowledge_update = 100;
    if (has_population_flow_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->population_flow_knowledge_update());
    }
    
    // optional .MsgsSimToClient.MsgFolkCreation folk_creation = 101;
    if (has_folk_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folk_creation());
    }
    
    // optional .MsgsSimToClient.MsgFolkGraphUpdate folk_graph_update = 102;
    if (has_folk_graph_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->folk_graph_update());
    }
    
    // optional .MsgsSimToClient.MsgControlGlobalMeteoAck control_global_meteo_ack = 103;
    if (has_control_global_meteo_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_global_meteo_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlLocalMeteoAck control_local_meteo_ack = 104;
    if (has_control_local_meteo_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_local_meteo_ack());
    }
    
  }
  if (_has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    // optional .MsgsSimToClient.MsgControlCheckPointSaveBegin control_checkpoint_save_begin = 105;
    if (has_control_checkpoint_save_begin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_checkpoint_save_begin());
    }
    
    // optional .MsgsSimToClient.MsgControlCheckPointSetFrequencyAck control_checkpoint_set_frequency_ack = 106;
    if (has_control_checkpoint_set_frequency_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_checkpoint_set_frequency_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlCheckPointSaveNowAck control_checkpoint_save_now_ack = 107;
    if (has_control_checkpoint_save_now_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_checkpoint_save_now_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlSendCurrentStateBegin control_send_current_state_begin = 108;
    if (has_control_send_current_state_begin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_send_current_state_begin());
    }
    
    // optional .MsgsSimToClient.MsgControlSendCurrentStateEnd control_send_current_state_end = 109;
    if (has_control_send_current_state_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_send_current_state_end());
    }
    
    // optional .MsgsSimToClient.MsgUrbanCreation urban_creation = 110;
    if (has_urban_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urban_creation());
    }
    
    // optional .MsgsSimToClient.MsgUrbanKnowledgeCreation urban_knowledge_creation = 111;
    if (has_urban_knowledge_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urban_knowledge_creation());
    }
    
    // optional .MsgsSimToClient.MsgUrbanKnowledgeUpdate urban_knowledge_update = 112;
    if (has_urban_knowledge_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urban_knowledge_update());
    }
    
  }
  if (_has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    // optional .MsgsSimToClient.MsgUrbanKnowledgeDestruction urban_knowledge_destruction = 113;
    if (has_urban_knowledge_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urban_knowledge_destruction());
    }
    
    // optional .Common.StockResource stock_resource = 114;
    if (has_stock_resource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stock_resource());
    }
    
    // optional .MsgsSimToClient.MsgUrbanDetection urban_detection = 115;
    if (has_urban_detection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urban_detection());
    }
    
    // optional .MsgsSimToClient.MsgKnowledgeGroupAck knowledge_group_ack = 116;
    if (has_knowledge_group_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_ack());
    }
    
    // optional .MsgsSimToClient.MsgKnowledgeGroupCreation knowledge_group_creation = 117;
    if (has_knowledge_group_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_creation());
    }
    
    // optional .MsgsSimToClient.MsgKnowledgeGroupUpdate knowledge_group_update = 118;
    if (has_knowledge_group_update()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_update());
    }
    
    // optional .MsgsSimToClient.MsgKnowledgeGroupCreationAck knowledge_group_creation_ack = 119;
    if (has_knowledge_group_creation_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_creation_ack());
    }
    
    // optional .MsgsSimToClient.MsgKnowledgeGroupUpdateAck knowledge_group_update_ack = 120;
    if (has_knowledge_group_update_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_update_ack());
    }
    
  }
  if (_has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    // optional .MsgsSimToClient.MsgKnowledgeGroupDestruction knowledge_group_destruction = 121;
    if (has_knowledge_group_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group_destruction());
    }
    
    // optional .MsgsSimToClient.MsgActionCreateFireOrderAck action_create_fire_order_ack = 122;
    if (has_action_create_fire_order_ack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action_create_fire_order_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlGlobalMeteo control_global_meteo = 123;
    if (has_control_global_meteo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_global_meteo());
    }
    
    // optional .MsgsSimToClient.MsgControlLocalMeteoCreation control_local_meteo_creation = 124;
    if (has_control_local_meteo_creation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_local_meteo_creation());
    }
    
    // optional .MsgsSimToClient.MsgControlLocalMeteoDestruction control_local_meteo_destruction = 125;
    if (has_control_local_meteo_destruction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_local_meteo_destruction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSimToClient_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSimToClient_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSimToClient_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSimToClient_Content::MergeFrom(const MsgSimToClient_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_unit_order_ack()->::MsgsSimToClient::MsgUnitOrderAck::MergeFrom(from.unit_order_ack());
    }
    if (from._has_bit(1)) {
      mutable_automat_order_ack()->::MsgsSimToClient::MsgAutomatOrderAck::MergeFrom(from.automat_order_ack());
    }
    if (from._has_bit(2)) {
      mutable_population_order_ack()->::MsgsSimToClient::MsgPopulationOrderAck::MergeFrom(from.population_order_ack());
    }
    if (from._has_bit(3)) {
      mutable_frag_order_ack()->::MsgsSimToClient::MsgFragOrderAck::MergeFrom(from.frag_order_ack());
    }
    if (from._has_bit(4)) {
      mutable_set_automat_mode_ack()->::MsgsSimToClient::MsgSetAutomatModeAck::MergeFrom(from.set_automat_mode_ack());
    }
    if (from._has_bit(5)) {
      mutable_unit_creation_request_ack()->::MsgsSimToClient::MsgUnitCreationRequestAck::MergeFrom(from.unit_creation_request_ack());
    }
    if (from._has_bit(6)) {
      mutable_magic_action_ack()->::MsgsSimToClient::MsgMagicActionAck::MergeFrom(from.magic_action_ack());
    }
    if (from._has_bit(7)) {
      mutable_unit_magic_action_ack()->::MsgsSimToClient::MsgUnitMagicActionAck::MergeFrom(from.unit_magic_action_ack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_object_magic_action_ack()->::MsgsSimToClient::MsgObjectMagicActionAck::MergeFrom(from.object_magic_action_ack());
    }
    if (from._has_bit(9)) {
      mutable_population_magic_action_ack()->::MsgsSimToClient::MsgPopulationMagicActionAck::MergeFrom(from.population_magic_action_ack());
    }
    if (from._has_bit(10)) {
      mutable_change_diplomacy_ack()->::MsgsSimToClient::MsgChangeDiplomacyAck::MergeFrom(from.change_diplomacy_ack());
    }
    if (from._has_bit(11)) {
      mutable_automat_change_knowledge_group_ack()->::MsgsSimToClient::MsgAutomatChangeKnowledgeGroupAck::MergeFrom(from.automat_change_knowledge_group_ack());
    }
    if (from._has_bit(12)) {
      mutable_automat_change_logistic_links_ack()->::MsgsSimToClient::MsgAutomatChangeLogisticLinksAck::MergeFrom(from.automat_change_logistic_links_ack());
    }
    if (from._has_bit(13)) {
      mutable_automat_change_superior_ack()->::MsgsSimToClient::MsgAutomatChangeSuperiorAck::MergeFrom(from.automat_change_superior_ack());
    }
    if (from._has_bit(14)) {
      mutable_unit_change_superior_ack()->::MsgsSimToClient::MsgUnitChangeSuperiorAck::MergeFrom(from.unit_change_superior_ack());
    }
    if (from._has_bit(15)) {
      mutable_log_supply_push_flow_ack()->::MsgsSimToClient::MsgLogSupplyPushFlowAck::MergeFrom(from.log_supply_push_flow_ack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_log_supply_change_quotas_ack()->::MsgsSimToClient::MsgLogSupplyChangeQuotasAck::MergeFrom(from.log_supply_change_quotas_ack());
    }
    if (from._has_bit(17)) {
      mutable_control_information()->::MsgsSimToClient::MsgControlInformation::MergeFrom(from.control_information());
    }
    if (from._has_bit(18)) {
      mutable_control_profiling_information()->::MsgsSimToClient::MsgControlProfilingInformation::MergeFrom(from.control_profiling_information());
    }
    if (from._has_bit(19)) {
      mutable_control_begin_tick()->::MsgsSimToClient::MsgControlBeginTick::MergeFrom(from.control_begin_tick());
    }
    if (from._has_bit(20)) {
      mutable_control_end_tick()->::MsgsSimToClient::MsgControlEndTick::MergeFrom(from.control_end_tick());
    }
    if (from._has_bit(21)) {
      mutable_control_stop_ack()->::MsgsSimToClient::MsgControlStopAck::MergeFrom(from.control_stop_ack());
    }
    if (from._has_bit(22)) {
      mutable_control_pause_ack()->::MsgsSimToClient::MsgControlPauseAck::MergeFrom(from.control_pause_ack());
    }
    if (from._has_bit(23)) {
      mutable_control_resume_ack()->::MsgsSimToClient::MsgControlResumeAck::MergeFrom(from.control_resume_ack());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_control_change_time_factor_ack()->::MsgsSimToClient::MsgControlChangeTimeFactorAck::MergeFrom(from.control_change_time_factor_ack());
    }
    if (from._has_bit(25)) {
      mutable_control_date_time_change_ack()->::MsgsSimToClient::MsgControlDatetimeChangeAck::MergeFrom(from.control_date_time_change_ack());
    }
    if (from._has_bit(26)) {
      mutable_control_checkpoint_save_end()->::MsgsSimToClient::MsgControlCheckPointSaveEnd::MergeFrom(from.control_checkpoint_save_end());
    }
    if (from._has_bit(27)) {
      mutable_formation_creation()->::Common::MsgFormationCreation::MergeFrom(from.formation_creation());
    }
    if (from._has_bit(28)) {
      mutable_side_creation()->::MsgsSimToClient::MsgTeamCreation::MergeFrom(from.side_creation());
    }
    if (from._has_bit(29)) {
      mutable_automat_creation()->::MsgsSimToClient::MsgAutomatCreation::MergeFrom(from.automat_creation());
    }
    if (from._has_bit(30)) {
      mutable_automat_attributes()->::MsgsSimToClient::MsgAutomatAttributes::MergeFrom(from.automat_attributes());
    }
    if (from._has_bit(31)) {
      mutable_unit_creation()->::MsgsSimToClient::MsgUnitCreation::MergeFrom(from.unit_creation());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      mutable_unit_attributes()->::MsgsSimToClient::MsgUnitAttributes::MergeFrom(from.unit_attributes());
    }
    if (from._has_bit(33)) {
      mutable_unit_pathfind()->::MsgsSimToClient::MsgUnitPathFind::MergeFrom(from.unit_pathfind());
    }
    if (from._has_bit(34)) {
      mutable_unit_destruction()->::MsgsSimToClient::MsgUnitDestruction::MergeFrom(from.unit_destruction());
    }
    if (from._has_bit(35)) {
      mutable_unit_environment_type()->::MsgsSimToClient::MsgUnitEnvironmentType::MergeFrom(from.unit_environment_type());
    }
    if (from._has_bit(36)) {
      mutable_change_diplomacy()->::Common::MsgChangeDiplomacy::MergeFrom(from.change_diplomacy());
    }
    if (from._has_bit(37)) {
      mutable_unit_change_superior()->::Common::MsgUnitChangeSuperior::MergeFrom(from.unit_change_superior());
    }
    if (from._has_bit(38)) {
      mutable_automat_change_logistic_links()->::Common::MsgAutomatChangeLogisticLinks::MergeFrom(from.automat_change_logistic_links());
    }
    if (from._has_bit(39)) {
      mutable_automat_change_knowledge_group()->::Common::MsgAutomatChangeKnowledgeGroup::MergeFrom(from.automat_change_knowledge_group());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      mutable_automat_change_superior()->::Common::MsgAutomatChangeSuperior::MergeFrom(from.automat_change_superior());
    }
    if (from._has_bit(41)) {
      mutable_unit_knowledge_creation()->::MsgsSimToClient::MsgUnitKnowledgeCreation::MergeFrom(from.unit_knowledge_creation());
    }
    if (from._has_bit(42)) {
      mutable_unit_knowledge_update()->::MsgsSimToClient::MsgUnitKnowledgeUpdate::MergeFrom(from.unit_knowledge_update());
    }
    if (from._has_bit(43)) {
      mutable_unit_knowledge_destruction()->::MsgsSimToClient::MsgUnitKnowledgeDestruction::MergeFrom(from.unit_knowledge_destruction());
    }
    if (from._has_bit(44)) {
      mutable_start_unit_fire()->::MsgsSimToClient::MsgStartUnitFire::MergeFrom(from.start_unit_fire());
    }
    if (from._has_bit(45)) {
      mutable_stop_unit_fire()->::MsgsSimToClient::MsgStopUnitFire::MergeFrom(from.stop_unit_fire());
    }
    if (from._has_bit(46)) {
      mutable_start_population_fire()->::MsgsSimToClient::MsgStartPopulationFire::MergeFrom(from.start_population_fire());
    }
    if (from._has_bit(47)) {
      mutable_stop_population_fire()->::MsgsSimToClient::MsgStopPopulationFire::MergeFrom(from.stop_population_fire());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from._has_bit(48)) {
      mutable_explosion()->::MsgsSimToClient::MsgExplosion::MergeFrom(from.explosion());
    }
    if (from._has_bit(49)) {
      mutable_start_fire_effect()->::MsgsSimToClient::MsgStartFireEffect::MergeFrom(from.start_fire_effect());
    }
    if (from._has_bit(50)) {
      mutable_stop_fire_effect()->::MsgsSimToClient::MsgStopFireEffect::MergeFrom(from.stop_fire_effect());
    }
    if (from._has_bit(51)) {
      mutable_report()->::MsgsSimToClient::MsgReport::MergeFrom(from.report());
    }
    if (from._has_bit(52)) {
      mutable_invalidate_report()->::MsgsSimToClient::MsgInvalidateReport::MergeFrom(from.invalidate_report());
    }
    if (from._has_bit(53)) {
      mutable_trace()->::MsgsSimToClient::MsgTrace::MergeFrom(from.trace());
    }
    if (from._has_bit(54)) {
      mutable_decisional_state()->::MsgsSimToClient::MsgDecisionalState::MergeFrom(from.decisional_state());
    }
    if (from._has_bit(55)) {
      mutable_debug_points()->::MsgsSimToClient::MsgDebugPoints::MergeFrom(from.debug_points());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from._has_bit(56)) {
      mutable_unit_vision_cones()->::MsgsSimToClient::MsgUnitVisionCones::MergeFrom(from.unit_vision_cones());
    }
    if (from._has_bit(57)) {
      mutable_unit_detection()->::MsgsSimToClient::MsgUnitDetection::MergeFrom(from.unit_detection());
    }
    if (from._has_bit(58)) {
      mutable_object_detection()->::MsgsSimToClient::MsgObjectDetection::MergeFrom(from.object_detection());
    }
    if (from._has_bit(59)) {
      mutable_population_concentration_detection()->::MsgsSimToClient::MsgPopulationConcentrationDetection::MergeFrom(from.population_concentration_detection());
    }
    if (from._has_bit(60)) {
      mutable_population_flow_detection()->::MsgsSimToClient::MsgPopulationFlowDetection::MergeFrom(from.population_flow_detection());
    }
    if (from._has_bit(61)) {
      mutable_unit_order()->::Common::MsgUnitOrder::MergeFrom(from.unit_order());
    }
    if (from._has_bit(62)) {
      mutable_automat_order()->::Common::MsgAutomatOrder::MergeFrom(from.automat_order());
    }
    if (from._has_bit(63)) {
      mutable_population_order()->::Common::MsgPopulationOrder::MergeFrom(from.population_order());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from._has_bit(64)) {
      mutable_object_creation()->::MsgsSimToClient::MsgObjectCreation::MergeFrom(from.object_creation());
    }
    if (from._has_bit(65)) {
      mutable_object_destruction()->::MsgsSimToClient::MsgObjectDestruction::MergeFrom(from.object_destruction());
    }
    if (from._has_bit(66)) {
      mutable_object_update()->::MsgsSimToClient::MsgObjectUpdate::MergeFrom(from.object_update());
    }
    if (from._has_bit(67)) {
      mutable_object_knowledge_creation()->::MsgsSimToClient::MsgObjectKnowledgeCreation::MergeFrom(from.object_knowledge_creation());
    }
    if (from._has_bit(68)) {
      mutable_object_knowledge_update()->::MsgsSimToClient::MsgObjectKnowledgeUpdate::MergeFrom(from.object_knowledge_update());
    }
    if (from._has_bit(69)) {
      mutable_object_knowledge_destruction()->::MsgsSimToClient::MsgObjectKnowledgeDestruction::MergeFrom(from.object_knowledge_destruction());
    }
    if (from._has_bit(70)) {
      mutable_log_medical_handling_creation()->::MsgsSimToClient::MsgLogMedicalHandlingCreation::MergeFrom(from.log_medical_handling_creation());
    }
    if (from._has_bit(71)) {
      mutable_log_medical_handling_update()->::MsgsSimToClient::MsgLogMedicalHandlingUpdate::MergeFrom(from.log_medical_handling_update());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from._has_bit(72)) {
      mutable_log_medical_handling_destruction()->::MsgsSimToClient::MsgLogMedicalHandlingDestruction::MergeFrom(from.log_medical_handling_destruction());
    }
    if (from._has_bit(73)) {
      mutable_log_medical_state()->::MsgsSimToClient::MsgLogMedicalState::MergeFrom(from.log_medical_state());
    }
    if (from._has_bit(74)) {
      mutable_log_maintenance_handling_creation()->::MsgsSimToClient::MsgLogMaintenanceHandlingCreation::MergeFrom(from.log_maintenance_handling_creation());
    }
    if (from._has_bit(75)) {
      mutable_log_maintenance_handling_update()->::MsgsSimToClient::MsgLogMaintenanceHandlingUpdate::MergeFrom(from.log_maintenance_handling_update());
    }
    if (from._has_bit(76)) {
      mutable_log_maintenance_handling_destruction()->::MsgsSimToClient::MsgLogMaintenanceHandlingDestruction::MergeFrom(from.log_maintenance_handling_destruction());
    }
    if (from._has_bit(77)) {
      mutable_log_maintenance_state()->::MsgsSimToClient::MsgLogMaintenanceState::MergeFrom(from.log_maintenance_state());
    }
    if (from._has_bit(78)) {
      mutable_log_supply_handling_creation()->::MsgsSimToClient::MsgLogSupplyHandlingCreation::MergeFrom(from.log_supply_handling_creation());
    }
    if (from._has_bit(79)) {
      mutable_log_supply_handling_update()->::MsgsSimToClient::MsgLogSupplyHandlingUpdate::MergeFrom(from.log_supply_handling_update());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from._has_bit(80)) {
      mutable_log_supply_handling_destruction()->::MsgsSimToClient::MsgLogSupplyHandlingDestruction::MergeFrom(from.log_supply_handling_destruction());
    }
    if (from._has_bit(81)) {
      mutable_log_supply_state()->::MsgsSimToClient::MsgLogSupplyState::MergeFrom(from.log_supply_state());
    }
    if (from._has_bit(82)) {
      mutable_log_supply_quotas()->::MsgsSimToClient::MsgLogSupplyQuotas::MergeFrom(from.log_supply_quotas());
    }
    if (from._has_bit(83)) {
      mutable_population_creation()->::MsgsSimToClient::MsgPopulationCreation::MergeFrom(from.population_creation());
    }
    if (from._has_bit(84)) {
      mutable_population_update()->::MsgsSimToClient::MsgPopulationUpdate::MergeFrom(from.population_update());
    }
    if (from._has_bit(85)) {
      mutable_population_concentration_creation()->::MsgsSimToClient::MsgPopulationConcentrationCreation::MergeFrom(from.population_concentration_creation());
    }
    if (from._has_bit(86)) {
      mutable_population_concentration_destruction()->::MsgsSimToClient::MsgPopulationConcentrationDestruction::MergeFrom(from.population_concentration_destruction());
    }
    if (from._has_bit(87)) {
      mutable_population_concentration_update()->::MsgsSimToClient::MsgPopulationConcentrationUpdate::MergeFrom(from.population_concentration_update());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from._has_bit(88)) {
      mutable_population_flow_creation()->::MsgsSimToClient::MsgPopulationFlowCreation::MergeFrom(from.population_flow_creation());
    }
    if (from._has_bit(89)) {
      mutable_population_flow_destruction()->::MsgsSimToClient::MsgPopulationFlowDestruction::MergeFrom(from.population_flow_destruction());
    }
    if (from._has_bit(90)) {
      mutable_population_flow_update()->::MsgsSimToClient::MsgPopulationFlowUpdate::MergeFrom(from.population_flow_update());
    }
    if (from._has_bit(91)) {
      mutable_population_knowledge_creation()->::MsgsSimToClient::MsgPopulationKnowledgeCreation::MergeFrom(from.population_knowledge_creation());
    }
    if (from._has_bit(92)) {
      mutable_population_knowledge_update()->::MsgsSimToClient::MsgPopulationKnowledgeUpdate::MergeFrom(from.population_knowledge_update());
    }
    if (from._has_bit(93)) {
      mutable_population_knowledge_destruction()->::MsgsSimToClient::MsgPopulationKnowledgeDestruction::MergeFrom(from.population_knowledge_destruction());
    }
    if (from._has_bit(94)) {
      mutable_population_concentration_knowledge_creation()->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeCreation::MergeFrom(from.population_concentration_knowledge_creation());
    }
    if (from._has_bit(95)) {
      mutable_population_concentration_knowledge_destruction()->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeDestruction::MergeFrom(from.population_concentration_knowledge_destruction());
    }
  }
  if (from._has_bits_[96 / 32] & (0xffu << (96 % 32))) {
    if (from._has_bit(96)) {
      mutable_population_concentration_knowledge_update()->::MsgsSimToClient::MsgPopulationConcentrationKnowledgeUpdate::MergeFrom(from.population_concentration_knowledge_update());
    }
    if (from._has_bit(97)) {
      mutable_population_flow_knowledge_creation()->::MsgsSimToClient::MsgPopulationFlowKnowledgeCreation::MergeFrom(from.population_flow_knowledge_creation());
    }
    if (from._has_bit(98)) {
      mutable_population_flow_knowledge_destruction()->::MsgsSimToClient::MsgPopulationFlowKnowledgeDestruction::MergeFrom(from.population_flow_knowledge_destruction());
    }
    if (from._has_bit(99)) {
      mutable_population_flow_knowledge_update()->::MsgsSimToClient::MsgPopulationFlowKnowledgeUpdate::MergeFrom(from.population_flow_knowledge_update());
    }
    if (from._has_bit(100)) {
      mutable_folk_creation()->::MsgsSimToClient::MsgFolkCreation::MergeFrom(from.folk_creation());
    }
    if (from._has_bit(101)) {
      mutable_folk_graph_update()->::MsgsSimToClient::MsgFolkGraphUpdate::MergeFrom(from.folk_graph_update());
    }
    if (from._has_bit(102)) {
      mutable_control_global_meteo_ack()->::MsgsSimToClient::MsgControlGlobalMeteoAck::MergeFrom(from.control_global_meteo_ack());
    }
    if (from._has_bit(103)) {
      mutable_control_local_meteo_ack()->::MsgsSimToClient::MsgControlLocalMeteoAck::MergeFrom(from.control_local_meteo_ack());
    }
  }
  if (from._has_bits_[104 / 32] & (0xffu << (104 % 32))) {
    if (from._has_bit(104)) {
      mutable_control_checkpoint_save_begin()->::MsgsSimToClient::MsgControlCheckPointSaveBegin::MergeFrom(from.control_checkpoint_save_begin());
    }
    if (from._has_bit(105)) {
      mutable_control_checkpoint_set_frequency_ack()->::MsgsSimToClient::MsgControlCheckPointSetFrequencyAck::MergeFrom(from.control_checkpoint_set_frequency_ack());
    }
    if (from._has_bit(106)) {
      mutable_control_checkpoint_save_now_ack()->::MsgsSimToClient::MsgControlCheckPointSaveNowAck::MergeFrom(from.control_checkpoint_save_now_ack());
    }
    if (from._has_bit(107)) {
      mutable_control_send_current_state_begin()->::MsgsSimToClient::MsgControlSendCurrentStateBegin::MergeFrom(from.control_send_current_state_begin());
    }
    if (from._has_bit(108)) {
      mutable_control_send_current_state_end()->::MsgsSimToClient::MsgControlSendCurrentStateEnd::MergeFrom(from.control_send_current_state_end());
    }
    if (from._has_bit(109)) {
      mutable_urban_creation()->::MsgsSimToClient::MsgUrbanCreation::MergeFrom(from.urban_creation());
    }
    if (from._has_bit(110)) {
      mutable_urban_knowledge_creation()->::MsgsSimToClient::MsgUrbanKnowledgeCreation::MergeFrom(from.urban_knowledge_creation());
    }
    if (from._has_bit(111)) {
      mutable_urban_knowledge_update()->::MsgsSimToClient::MsgUrbanKnowledgeUpdate::MergeFrom(from.urban_knowledge_update());
    }
  }
  if (from._has_bits_[112 / 32] & (0xffu << (112 % 32))) {
    if (from._has_bit(112)) {
      mutable_urban_knowledge_destruction()->::MsgsSimToClient::MsgUrbanKnowledgeDestruction::MergeFrom(from.urban_knowledge_destruction());
    }
    if (from._has_bit(113)) {
      mutable_stock_resource()->::Common::StockResource::MergeFrom(from.stock_resource());
    }
    if (from._has_bit(114)) {
      mutable_urban_detection()->::MsgsSimToClient::MsgUrbanDetection::MergeFrom(from.urban_detection());
    }
    if (from._has_bit(115)) {
      mutable_knowledge_group_ack()->::MsgsSimToClient::MsgKnowledgeGroupAck::MergeFrom(from.knowledge_group_ack());
    }
    if (from._has_bit(116)) {
      mutable_knowledge_group_creation()->::MsgsSimToClient::MsgKnowledgeGroupCreation::MergeFrom(from.knowledge_group_creation());
    }
    if (from._has_bit(117)) {
      mutable_knowledge_group_update()->::MsgsSimToClient::MsgKnowledgeGroupUpdate::MergeFrom(from.knowledge_group_update());
    }
    if (from._has_bit(118)) {
      mutable_knowledge_group_creation_ack()->::MsgsSimToClient::MsgKnowledgeGroupCreationAck::MergeFrom(from.knowledge_group_creation_ack());
    }
    if (from._has_bit(119)) {
      mutable_knowledge_group_update_ack()->::MsgsSimToClient::MsgKnowledgeGroupUpdateAck::MergeFrom(from.knowledge_group_update_ack());
    }
  }
  if (from._has_bits_[120 / 32] & (0xffu << (120 % 32))) {
    if (from._has_bit(120)) {
      mutable_knowledge_group_destruction()->::MsgsSimToClient::MsgKnowledgeGroupDestruction::MergeFrom(from.knowledge_group_destruction());
    }
    if (from._has_bit(121)) {
      mutable_action_create_fire_order_ack()->::MsgsSimToClient::MsgActionCreateFireOrderAck::MergeFrom(from.action_create_fire_order_ack());
    }
    if (from._has_bit(122)) {
      mutable_control_global_meteo()->::MsgsSimToClient::MsgControlGlobalMeteo::MergeFrom(from.control_global_meteo());
    }
    if (from._has_bit(123)) {
      mutable_control_local_meteo_creation()->::MsgsSimToClient::MsgControlLocalMeteoCreation::MergeFrom(from.control_local_meteo_creation());
    }
    if (from._has_bit(124)) {
      mutable_control_local_meteo_destruction()->::MsgsSimToClient::MsgControlLocalMeteoDestruction::MergeFrom(from.control_local_meteo_destruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSimToClient_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSimToClient_Content::CopyFrom(const MsgSimToClient_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSimToClient_Content::IsInitialized() const {
  
  if (has_unit_order_ack()) {
    if (!this->unit_order_ack().IsInitialized()) return false;
  }
  if (has_automat_order_ack()) {
    if (!this->automat_order_ack().IsInitialized()) return false;
  }
  if (has_population_order_ack()) {
    if (!this->population_order_ack().IsInitialized()) return false;
  }
  if (has_frag_order_ack()) {
    if (!this->frag_order_ack().IsInitialized()) return false;
  }
  if (has_set_automat_mode_ack()) {
    if (!this->set_automat_mode_ack().IsInitialized()) return false;
  }
  if (has_unit_creation_request_ack()) {
    if (!this->unit_creation_request_ack().IsInitialized()) return false;
  }
  if (has_magic_action_ack()) {
    if (!this->magic_action_ack().IsInitialized()) return false;
  }
  if (has_unit_magic_action_ack()) {
    if (!this->unit_magic_action_ack().IsInitialized()) return false;
  }
  if (has_object_magic_action_ack()) {
    if (!this->object_magic_action_ack().IsInitialized()) return false;
  }
  if (has_population_magic_action_ack()) {
    if (!this->population_magic_action_ack().IsInitialized()) return false;
  }
  if (has_change_diplomacy_ack()) {
    if (!this->change_diplomacy_ack().IsInitialized()) return false;
  }
  if (has_automat_change_knowledge_group_ack()) {
    if (!this->automat_change_knowledge_group_ack().IsInitialized()) return false;
  }
  if (has_automat_change_logistic_links_ack()) {
    if (!this->automat_change_logistic_links_ack().IsInitialized()) return false;
  }
  if (has_automat_change_superior_ack()) {
    if (!this->automat_change_superior_ack().IsInitialized()) return false;
  }
  if (has_unit_change_superior_ack()) {
    if (!this->unit_change_superior_ack().IsInitialized()) return false;
  }
  if (has_control_information()) {
    if (!this->control_information().IsInitialized()) return false;
  }
  if (has_control_profiling_information()) {
    if (!this->control_profiling_information().IsInitialized()) return false;
  }
  if (has_control_begin_tick()) {
    if (!this->control_begin_tick().IsInitialized()) return false;
  }
  if (has_control_end_tick()) {
    if (!this->control_end_tick().IsInitialized()) return false;
  }
  if (has_control_stop_ack()) {
    if (!this->control_stop_ack().IsInitialized()) return false;
  }
  if (has_control_pause_ack()) {
    if (!this->control_pause_ack().IsInitialized()) return false;
  }
  if (has_control_resume_ack()) {
    if (!this->control_resume_ack().IsInitialized()) return false;
  }
  if (has_control_change_time_factor_ack()) {
    if (!this->control_change_time_factor_ack().IsInitialized()) return false;
  }
  if (has_control_date_time_change_ack()) {
    if (!this->control_date_time_change_ack().IsInitialized()) return false;
  }
  if (has_formation_creation()) {
    if (!this->formation_creation().IsInitialized()) return false;
  }
  if (has_side_creation()) {
    if (!this->side_creation().IsInitialized()) return false;
  }
  if (has_automat_creation()) {
    if (!this->automat_creation().IsInitialized()) return false;
  }
  if (has_automat_attributes()) {
    if (!this->automat_attributes().IsInitialized()) return false;
  }
  if (has_unit_creation()) {
    if (!this->unit_creation().IsInitialized()) return false;
  }
  if (has_unit_attributes()) {
    if (!this->unit_attributes().IsInitialized()) return false;
  }
  if (has_unit_pathfind()) {
    if (!this->unit_pathfind().IsInitialized()) return false;
  }
  if (has_unit_destruction()) {
    if (!this->unit_destruction().IsInitialized()) return false;
  }
  if (has_unit_environment_type()) {
    if (!this->unit_environment_type().IsInitialized()) return false;
  }
  if (has_change_diplomacy()) {
    if (!this->change_diplomacy().IsInitialized()) return false;
  }
  if (has_unit_change_superior()) {
    if (!this->unit_change_superior().IsInitialized()) return false;
  }
  if (has_automat_change_logistic_links()) {
    if (!this->automat_change_logistic_links().IsInitialized()) return false;
  }
  if (has_automat_change_knowledge_group()) {
    if (!this->automat_change_knowledge_group().IsInitialized()) return false;
  }
  if (has_automat_change_superior()) {
    if (!this->automat_change_superior().IsInitialized()) return false;
  }
  if (has_unit_knowledge_creation()) {
    if (!this->unit_knowledge_creation().IsInitialized()) return false;
  }
  if (has_unit_knowledge_update()) {
    if (!this->unit_knowledge_update().IsInitialized()) return false;
  }
  if (has_unit_knowledge_destruction()) {
    if (!this->unit_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_start_unit_fire()) {
    if (!this->start_unit_fire().IsInitialized()) return false;
  }
  if (has_stop_unit_fire()) {
    if (!this->stop_unit_fire().IsInitialized()) return false;
  }
  if (has_start_population_fire()) {
    if (!this->start_population_fire().IsInitialized()) return false;
  }
  if (has_stop_population_fire()) {
    if (!this->stop_population_fire().IsInitialized()) return false;
  }
  if (has_explosion()) {
    if (!this->explosion().IsInitialized()) return false;
  }
  if (has_start_fire_effect()) {
    if (!this->start_fire_effect().IsInitialized()) return false;
  }
  if (has_stop_fire_effect()) {
    if (!this->stop_fire_effect().IsInitialized()) return false;
  }
  if (has_report()) {
    if (!this->report().IsInitialized()) return false;
  }
  if (has_invalidate_report()) {
    if (!this->invalidate_report().IsInitialized()) return false;
  }
  if (has_trace()) {
    if (!this->trace().IsInitialized()) return false;
  }
  if (has_decisional_state()) {
    if (!this->decisional_state().IsInitialized()) return false;
  }
  if (has_debug_points()) {
    if (!this->debug_points().IsInitialized()) return false;
  }
  if (has_unit_vision_cones()) {
    if (!this->unit_vision_cones().IsInitialized()) return false;
  }
  if (has_unit_detection()) {
    if (!this->unit_detection().IsInitialized()) return false;
  }
  if (has_object_detection()) {
    if (!this->object_detection().IsInitialized()) return false;
  }
  if (has_population_concentration_detection()) {
    if (!this->population_concentration_detection().IsInitialized()) return false;
  }
  if (has_population_flow_detection()) {
    if (!this->population_flow_detection().IsInitialized()) return false;
  }
  if (has_unit_order()) {
    if (!this->unit_order().IsInitialized()) return false;
  }
  if (has_automat_order()) {
    if (!this->automat_order().IsInitialized()) return false;
  }
  if (has_population_order()) {
    if (!this->population_order().IsInitialized()) return false;
  }
  if (has_object_creation()) {
    if (!this->object_creation().IsInitialized()) return false;
  }
  if (has_object_destruction()) {
    if (!this->object_destruction().IsInitialized()) return false;
  }
  if (has_object_update()) {
    if (!this->object_update().IsInitialized()) return false;
  }
  if (has_object_knowledge_creation()) {
    if (!this->object_knowledge_creation().IsInitialized()) return false;
  }
  if (has_object_knowledge_update()) {
    if (!this->object_knowledge_update().IsInitialized()) return false;
  }
  if (has_object_knowledge_destruction()) {
    if (!this->object_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_log_medical_handling_creation()) {
    if (!this->log_medical_handling_creation().IsInitialized()) return false;
  }
  if (has_log_medical_handling_update()) {
    if (!this->log_medical_handling_update().IsInitialized()) return false;
  }
  if (has_log_medical_handling_destruction()) {
    if (!this->log_medical_handling_destruction().IsInitialized()) return false;
  }
  if (has_log_medical_state()) {
    if (!this->log_medical_state().IsInitialized()) return false;
  }
  if (has_log_maintenance_handling_creation()) {
    if (!this->log_maintenance_handling_creation().IsInitialized()) return false;
  }
  if (has_log_maintenance_handling_update()) {
    if (!this->log_maintenance_handling_update().IsInitialized()) return false;
  }
  if (has_log_maintenance_handling_destruction()) {
    if (!this->log_maintenance_handling_destruction().IsInitialized()) return false;
  }
  if (has_log_maintenance_state()) {
    if (!this->log_maintenance_state().IsInitialized()) return false;
  }
  if (has_log_supply_handling_destruction()) {
    if (!this->log_supply_handling_destruction().IsInitialized()) return false;
  }
  if (has_log_supply_state()) {
    if (!this->log_supply_state().IsInitialized()) return false;
  }
  if (has_log_supply_quotas()) {
    if (!this->log_supply_quotas().IsInitialized()) return false;
  }
  if (has_population_creation()) {
    if (!this->population_creation().IsInitialized()) return false;
  }
  if (has_population_update()) {
    if (!this->population_update().IsInitialized()) return false;
  }
  if (has_population_concentration_creation()) {
    if (!this->population_concentration_creation().IsInitialized()) return false;
  }
  if (has_population_concentration_destruction()) {
    if (!this->population_concentration_destruction().IsInitialized()) return false;
  }
  if (has_population_concentration_update()) {
    if (!this->population_concentration_update().IsInitialized()) return false;
  }
  if (has_population_flow_creation()) {
    if (!this->population_flow_creation().IsInitialized()) return false;
  }
  if (has_population_flow_destruction()) {
    if (!this->population_flow_destruction().IsInitialized()) return false;
  }
  if (has_population_flow_update()) {
    if (!this->population_flow_update().IsInitialized()) return false;
  }
  if (has_population_knowledge_creation()) {
    if (!this->population_knowledge_creation().IsInitialized()) return false;
  }
  if (has_population_knowledge_update()) {
    if (!this->population_knowledge_update().IsInitialized()) return false;
  }
  if (has_population_knowledge_destruction()) {
    if (!this->population_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_population_concentration_knowledge_creation()) {
    if (!this->population_concentration_knowledge_creation().IsInitialized()) return false;
  }
  if (has_population_concentration_knowledge_destruction()) {
    if (!this->population_concentration_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_population_concentration_knowledge_update()) {
    if (!this->population_concentration_knowledge_update().IsInitialized()) return false;
  }
  if (has_population_flow_knowledge_creation()) {
    if (!this->population_flow_knowledge_creation().IsInitialized()) return false;
  }
  if (has_population_flow_knowledge_destruction()) {
    if (!this->population_flow_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_population_flow_knowledge_update()) {
    if (!this->population_flow_knowledge_update().IsInitialized()) return false;
  }
  if (has_folk_creation()) {
    if (!this->folk_creation().IsInitialized()) return false;
  }
  if (has_folk_graph_update()) {
    if (!this->folk_graph_update().IsInitialized()) return false;
  }
  if (has_urban_creation()) {
    if (!this->urban_creation().IsInitialized()) return false;
  }
  if (has_urban_knowledge_creation()) {
    if (!this->urban_knowledge_creation().IsInitialized()) return false;
  }
  if (has_urban_knowledge_update()) {
    if (!this->urban_knowledge_update().IsInitialized()) return false;
  }
  if (has_urban_knowledge_destruction()) {
    if (!this->urban_knowledge_destruction().IsInitialized()) return false;
  }
  if (has_stock_resource()) {
    if (!this->stock_resource().IsInitialized()) return false;
  }
  if (has_urban_detection()) {
    if (!this->urban_detection().IsInitialized()) return false;
  }
  if (has_knowledge_group_ack()) {
    if (!this->knowledge_group_ack().IsInitialized()) return false;
  }
  if (has_knowledge_group_creation()) {
    if (!this->knowledge_group_creation().IsInitialized()) return false;
  }
  if (has_knowledge_group_update()) {
    if (!this->knowledge_group_update().IsInitialized()) return false;
  }
  if (has_knowledge_group_creation_ack()) {
    if (!this->knowledge_group_creation_ack().IsInitialized()) return false;
  }
  if (has_knowledge_group_update_ack()) {
    if (!this->knowledge_group_update_ack().IsInitialized()) return false;
  }
  if (has_knowledge_group_destruction()) {
    if (!this->knowledge_group_destruction().IsInitialized()) return false;
  }
  if (has_action_create_fire_order_ack()) {
    if (!this->action_create_fire_order_ack().IsInitialized()) return false;
  }
  if (has_control_global_meteo()) {
    if (!this->control_global_meteo().IsInitialized()) return false;
  }
  if (has_control_local_meteo_creation()) {
    if (!this->control_local_meteo_creation().IsInitialized()) return false;
  }
  if (has_control_local_meteo_destruction()) {
    if (!this->control_local_meteo_destruction().IsInitialized()) return false;
  }
  return true;
}

void MsgSimToClient_Content::Swap(MsgSimToClient_Content* other) {
  if (other != this) {
    std::swap(unit_order_ack_, other->unit_order_ack_);
    std::swap(automat_order_ack_, other->automat_order_ack_);
    std::swap(population_order_ack_, other->population_order_ack_);
    std::swap(frag_order_ack_, other->frag_order_ack_);
    std::swap(set_automat_mode_ack_, other->set_automat_mode_ack_);
    std::swap(unit_creation_request_ack_, other->unit_creation_request_ack_);
    std::swap(magic_action_ack_, other->magic_action_ack_);
    std::swap(unit_magic_action_ack_, other->unit_magic_action_ack_);
    std::swap(object_magic_action_ack_, other->object_magic_action_ack_);
    std::swap(population_magic_action_ack_, other->population_magic_action_ack_);
    std::swap(change_diplomacy_ack_, other->change_diplomacy_ack_);
    std::swap(automat_change_knowledge_group_ack_, other->automat_change_knowledge_group_ack_);
    std::swap(automat_change_logistic_links_ack_, other->automat_change_logistic_links_ack_);
    std::swap(automat_change_superior_ack_, other->automat_change_superior_ack_);
    std::swap(unit_change_superior_ack_, other->unit_change_superior_ack_);
    std::swap(log_supply_push_flow_ack_, other->log_supply_push_flow_ack_);
    std::swap(log_supply_change_quotas_ack_, other->log_supply_change_quotas_ack_);
    std::swap(control_information_, other->control_information_);
    std::swap(control_profiling_information_, other->control_profiling_information_);
    std::swap(control_begin_tick_, other->control_begin_tick_);
    std::swap(control_end_tick_, other->control_end_tick_);
    std::swap(control_stop_ack_, other->control_stop_ack_);
    std::swap(control_pause_ack_, other->control_pause_ack_);
    std::swap(control_resume_ack_, other->control_resume_ack_);
    std::swap(control_change_time_factor_ack_, other->control_change_time_factor_ack_);
    std::swap(control_date_time_change_ack_, other->control_date_time_change_ack_);
    std::swap(control_checkpoint_save_end_, other->control_checkpoint_save_end_);
    std::swap(formation_creation_, other->formation_creation_);
    std::swap(side_creation_, other->side_creation_);
    std::swap(automat_creation_, other->automat_creation_);
    std::swap(automat_attributes_, other->automat_attributes_);
    std::swap(unit_creation_, other->unit_creation_);
    std::swap(unit_attributes_, other->unit_attributes_);
    std::swap(unit_pathfind_, other->unit_pathfind_);
    std::swap(unit_destruction_, other->unit_destruction_);
    std::swap(unit_environment_type_, other->unit_environment_type_);
    std::swap(change_diplomacy_, other->change_diplomacy_);
    std::swap(unit_change_superior_, other->unit_change_superior_);
    std::swap(automat_change_logistic_links_, other->automat_change_logistic_links_);
    std::swap(automat_change_knowledge_group_, other->automat_change_knowledge_group_);
    std::swap(automat_change_superior_, other->automat_change_superior_);
    std::swap(unit_knowledge_creation_, other->unit_knowledge_creation_);
    std::swap(unit_knowledge_update_, other->unit_knowledge_update_);
    std::swap(unit_knowledge_destruction_, other->unit_knowledge_destruction_);
    std::swap(start_unit_fire_, other->start_unit_fire_);
    std::swap(stop_unit_fire_, other->stop_unit_fire_);
    std::swap(start_population_fire_, other->start_population_fire_);
    std::swap(stop_population_fire_, other->stop_population_fire_);
    std::swap(explosion_, other->explosion_);
    std::swap(start_fire_effect_, other->start_fire_effect_);
    std::swap(stop_fire_effect_, other->stop_fire_effect_);
    std::swap(report_, other->report_);
    std::swap(invalidate_report_, other->invalidate_report_);
    std::swap(trace_, other->trace_);
    std::swap(decisional_state_, other->decisional_state_);
    std::swap(debug_points_, other->debug_points_);
    std::swap(unit_vision_cones_, other->unit_vision_cones_);
    std::swap(unit_detection_, other->unit_detection_);
    std::swap(object_detection_, other->object_detection_);
    std::swap(population_concentration_detection_, other->population_concentration_detection_);
    std::swap(population_flow_detection_, other->population_flow_detection_);
    std::swap(unit_order_, other->unit_order_);
    std::swap(automat_order_, other->automat_order_);
    std::swap(population_order_, other->population_order_);
    std::swap(object_creation_, other->object_creation_);
    std::swap(object_destruction_, other->object_destruction_);
    std::swap(object_update_, other->object_update_);
    std::swap(object_knowledge_creation_, other->object_knowledge_creation_);
    std::swap(object_knowledge_update_, other->object_knowledge_update_);
    std::swap(object_knowledge_destruction_, other->object_knowledge_destruction_);
    std::swap(log_medical_handling_creation_, other->log_medical_handling_creation_);
    std::swap(log_medical_handling_update_, other->log_medical_handling_update_);
    std::swap(log_medical_handling_destruction_, other->log_medical_handling_destruction_);
    std::swap(log_medical_state_, other->log_medical_state_);
    std::swap(log_maintenance_handling_creation_, other->log_maintenance_handling_creation_);
    std::swap(log_maintenance_handling_update_, other->log_maintenance_handling_update_);
    std::swap(log_maintenance_handling_destruction_, other->log_maintenance_handling_destruction_);
    std::swap(log_maintenance_state_, other->log_maintenance_state_);
    std::swap(log_supply_handling_creation_, other->log_supply_handling_creation_);
    std::swap(log_supply_handling_update_, other->log_supply_handling_update_);
    std::swap(log_supply_handling_destruction_, other->log_supply_handling_destruction_);
    std::swap(log_supply_state_, other->log_supply_state_);
    std::swap(log_supply_quotas_, other->log_supply_quotas_);
    std::swap(population_creation_, other->population_creation_);
    std::swap(population_update_, other->population_update_);
    std::swap(population_concentration_creation_, other->population_concentration_creation_);
    std::swap(population_concentration_destruction_, other->population_concentration_destruction_);
    std::swap(population_concentration_update_, other->population_concentration_update_);
    std::swap(population_flow_creation_, other->population_flow_creation_);
    std::swap(population_flow_destruction_, other->population_flow_destruction_);
    std::swap(population_flow_update_, other->population_flow_update_);
    std::swap(population_knowledge_creation_, other->population_knowledge_creation_);
    std::swap(population_knowledge_update_, other->population_knowledge_update_);
    std::swap(population_knowledge_destruction_, other->population_knowledge_destruction_);
    std::swap(population_concentration_knowledge_creation_, other->population_concentration_knowledge_creation_);
    std::swap(population_concentration_knowledge_destruction_, other->population_concentration_knowledge_destruction_);
    std::swap(population_concentration_knowledge_update_, other->population_concentration_knowledge_update_);
    std::swap(population_flow_knowledge_creation_, other->population_flow_knowledge_creation_);
    std::swap(population_flow_knowledge_destruction_, other->population_flow_knowledge_destruction_);
    std::swap(population_flow_knowledge_update_, other->population_flow_knowledge_update_);
    std::swap(folk_creation_, other->folk_creation_);
    std::swap(folk_graph_update_, other->folk_graph_update_);
    std::swap(control_global_meteo_ack_, other->control_global_meteo_ack_);
    std::swap(control_local_meteo_ack_, other->control_local_meteo_ack_);
    std::swap(control_checkpoint_save_begin_, other->control_checkpoint_save_begin_);
    std::swap(control_checkpoint_set_frequency_ack_, other->control_checkpoint_set_frequency_ack_);
    std::swap(control_checkpoint_save_now_ack_, other->control_checkpoint_save_now_ack_);
    std::swap(control_send_current_state_begin_, other->control_send_current_state_begin_);
    std::swap(control_send_current_state_end_, other->control_send_current_state_end_);
    std::swap(urban_creation_, other->urban_creation_);
    std::swap(urban_knowledge_creation_, other->urban_knowledge_creation_);
    std::swap(urban_knowledge_update_, other->urban_knowledge_update_);
    std::swap(urban_knowledge_destruction_, other->urban_knowledge_destruction_);
    std::swap(stock_resource_, other->stock_resource_);
    std::swap(urban_detection_, other->urban_detection_);
    std::swap(knowledge_group_ack_, other->knowledge_group_ack_);
    std::swap(knowledge_group_creation_, other->knowledge_group_creation_);
    std::swap(knowledge_group_update_, other->knowledge_group_update_);
    std::swap(knowledge_group_creation_ack_, other->knowledge_group_creation_ack_);
    std::swap(knowledge_group_update_ack_, other->knowledge_group_update_ack_);
    std::swap(knowledge_group_destruction_, other->knowledge_group_destruction_);
    std::swap(action_create_fire_order_ack_, other->action_create_fire_order_ack_);
    std::swap(control_global_meteo_, other->control_global_meteo_);
    std::swap(control_local_meteo_creation_, other->control_local_meteo_creation_);
    std::swap(control_local_meteo_destruction_, other->control_local_meteo_destruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    std::swap(_has_bits_[3], other->_has_bits_[3]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSimToClient_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSimToClient_Content_descriptor_;
  metadata.reflection = MsgSimToClient_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgSimToClient::kContextFieldNumber;
const int MsgSimToClient::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgSimToClient::MsgSimToClient() {
  SharedCtor();
}

void MsgSimToClient::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsSimToClient::MsgSimToClient_Content*>(&::MsgsSimToClient::MsgSimToClient_Content::default_instance());
}

MsgSimToClient::MsgSimToClient(const MsgSimToClient& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgSimToClient::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSimToClient::~MsgSimToClient() {
  SharedDtor();
}

void MsgSimToClient::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgSimToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSimToClient_descriptor_;
}

const MsgSimToClient& MsgSimToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimToClient_2eproto();  return *default_instance_;
}

MsgSimToClient* MsgSimToClient::default_instance_ = NULL;

MsgSimToClient* MsgSimToClient::New() const {
  return new MsgSimToClient;
}

void MsgSimToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::MsgsSimToClient::MsgSimToClient_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSimToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 context = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .MsgsSimToClient.MsgSimToClient.Content message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSimToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgSimToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // required .MsgsSimToClient.MsgSimToClient.Content message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSimToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // required .MsgsSimToClient.MsgSimToClient.Content message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSimToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 context = 1 [default = 0];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // required .MsgsSimToClient.MsgSimToClient.Content message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgSimToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSimToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSimToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSimToClient::MergeFrom(const MsgSimToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_message()->::MsgsSimToClient::MsgSimToClient_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSimToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSimToClient::CopyFrom(const MsgSimToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSimToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void MsgSimToClient::Swap(MsgSimToClient* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSimToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSimToClient_descriptor_;
  metadata.reflection = MsgSimToClient_reflection_;
  return metadata;
}


}  // namespace MsgsSimToClient

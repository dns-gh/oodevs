// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_DispatcherToClient_2eproto__INCLUDED
#define PROTOBUF_DispatcherToClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace MsgsDispatcherToClient {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DispatcherToClient_2eproto();
void protobuf_AssignDesc_DispatcherToClient_2eproto();
void protobuf_ShutdownFile_DispatcherToClient_2eproto();

class MsgServicesDescription;
class MsgDispatcherToClient;
class MsgDispatcherToClient_Content;

// ===================================================================

class MsgServicesDescription : public ::google::protobuf::Message {
 public:
  MsgServicesDescription();
  virtual ~MsgServicesDescription();
  
  MsgServicesDescription(const MsgServicesDescription& from);
  
  inline MsgServicesDescription& operator=(const MsgServicesDescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgServicesDescription& default_instance();
  void Swap(MsgServicesDescription* other);
  
  // implements Message ----------------------------------------------
  
  MsgServicesDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgServicesDescription& from);
  void MergeFrom(const MsgServicesDescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string services = 1;
  inline int services_size() const;
  inline void clear_services();
  static const int kServicesFieldNumber = 1;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& services() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_services();
  inline const ::std::string& services(int index) const;
  inline ::std::string* mutable_services(int index);
  inline void set_services(int index, const ::std::string& value);
  inline void set_services(int index, const char* value);
  inline void set_services(int index, const char* value, size_t size);
  inline ::std::string* add_services();
  inline void add_services(const ::std::string& value);
  inline void add_services(const char* value);
  inline void add_services(const char* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> services_;
  friend void  protobuf_AddDesc_DispatcherToClient_2eproto();
  friend void protobuf_AssignDesc_DispatcherToClient_2eproto();
  friend void protobuf_ShutdownFile_DispatcherToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgServicesDescription* default_instance_;
};
// -------------------------------------------------------------------

class MsgDispatcherToClient_Content : public ::google::protobuf::Message {
 public:
  MsgDispatcherToClient_Content();
  virtual ~MsgDispatcherToClient_Content();
  
  MsgDispatcherToClient_Content(const MsgDispatcherToClient_Content& from);
  
  inline MsgDispatcherToClient_Content& operator=(const MsgDispatcherToClient_Content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDispatcherToClient_Content& default_instance();
  void Swap(MsgDispatcherToClient_Content* other);
  
  // implements Message ----------------------------------------------
  
  MsgDispatcherToClient_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDispatcherToClient_Content& from);
  void MergeFrom(const MsgDispatcherToClient_Content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
  inline bool has_services_description() const;
  inline void clear_services_description();
  static const int kServicesDescriptionFieldNumber = 1;
  inline const ::MsgsDispatcherToClient::MsgServicesDescription& services_description() const;
  inline ::MsgsDispatcherToClient::MsgServicesDescription* mutable_services_description();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgsDispatcherToClient::MsgServicesDescription* services_description_;
  friend void  protobuf_AddDesc_DispatcherToClient_2eproto();
  friend void protobuf_AssignDesc_DispatcherToClient_2eproto();
  friend void protobuf_ShutdownFile_DispatcherToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgDispatcherToClient_Content* default_instance_;
};
// -------------------------------------------------------------------

class MsgDispatcherToClient : public ::google::protobuf::Message {
 public:
  MsgDispatcherToClient();
  virtual ~MsgDispatcherToClient();
  
  MsgDispatcherToClient(const MsgDispatcherToClient& from);
  
  inline MsgDispatcherToClient& operator=(const MsgDispatcherToClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDispatcherToClient& default_instance();
  void Swap(MsgDispatcherToClient* other);
  
  // implements Message ----------------------------------------------
  
  MsgDispatcherToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDispatcherToClient& from);
  void MergeFrom(const MsgDispatcherToClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgDispatcherToClient_Content Content;
  
  // accessors -------------------------------------------------------
  
  // required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::MsgsDispatcherToClient::MsgDispatcherToClient_Content& message() const;
  inline ::MsgsDispatcherToClient::MsgDispatcherToClient_Content* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgsDispatcherToClient::MsgDispatcherToClient_Content* message_;
  friend void  protobuf_AddDesc_DispatcherToClient_2eproto();
  friend void protobuf_AssignDesc_DispatcherToClient_2eproto();
  friend void protobuf_ShutdownFile_DispatcherToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgDispatcherToClient* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgServicesDescription

// repeated string services = 1;
inline int MsgServicesDescription::services_size() const {
  return services_.size();
}
inline void MsgServicesDescription::clear_services() {
  services_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgServicesDescription::services() const {
  return services_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgServicesDescription::mutable_services() {
  return &services_;
}
inline const ::std::string& MsgServicesDescription::services(int index) const {
  return services_.Get(index);
}
inline ::std::string* MsgServicesDescription::mutable_services(int index) {
  return services_.Mutable(index);
}
inline void MsgServicesDescription::set_services(int index, const ::std::string& value) {
  services_.Mutable(index)->assign(value);
}
inline void MsgServicesDescription::set_services(int index, const char* value) {
  services_.Mutable(index)->assign(value);
}
inline void MsgServicesDescription::set_services(int index, const char* value, size_t size) {
  services_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgServicesDescription::add_services() {
  return services_.Add();
}
inline void MsgServicesDescription::add_services(const ::std::string& value) {
  services_.Add()->assign(value);
}
inline void MsgServicesDescription::add_services(const char* value) {
  services_.Add()->assign(value);
}
inline void MsgServicesDescription::add_services(const char* value, size_t size) {
  services_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// MsgDispatcherToClient_Content

// optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
inline bool MsgDispatcherToClient_Content::has_services_description() const {
  return _has_bit(0);
}
inline void MsgDispatcherToClient_Content::clear_services_description() {
  if (services_description_ != NULL) services_description_->::MsgsDispatcherToClient::MsgServicesDescription::Clear();
  _clear_bit(0);
}
inline const ::MsgsDispatcherToClient::MsgServicesDescription& MsgDispatcherToClient_Content::services_description() const {
  return services_description_ != NULL ? *services_description_ : *default_instance_->services_description_;
}
inline ::MsgsDispatcherToClient::MsgServicesDescription* MsgDispatcherToClient_Content::mutable_services_description() {
  _set_bit(0);
  if (services_description_ == NULL) services_description_ = new ::MsgsDispatcherToClient::MsgServicesDescription;
  return services_description_;
}

// -------------------------------------------------------------------

// MsgDispatcherToClient

// required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
inline bool MsgDispatcherToClient::has_message() const {
  return _has_bit(0);
}
inline void MsgDispatcherToClient::clear_message() {
  if (message_ != NULL) message_->::MsgsDispatcherToClient::MsgDispatcherToClient_Content::Clear();
  _clear_bit(0);
}
inline const ::MsgsDispatcherToClient::MsgDispatcherToClient_Content& MsgDispatcherToClient::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::MsgsDispatcherToClient::MsgDispatcherToClient_Content* MsgDispatcherToClient::mutable_message() {
  _set_bit(0);
  if (message_ == NULL) message_ = new ::MsgsDispatcherToClient::MsgDispatcherToClient_Content;
  return message_;
}


}  // namespace MsgsDispatcherToClient

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_DispatcherToClient_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientToAar.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsClientToAar {

namespace {

const ::google::protobuf::Descriptor* MsgPlotRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlotRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientToAar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientToAar_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgClientToAar_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgClientToAar_Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientToAar_2eproto() {
  protobuf_AddDesc_ClientToAar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientToAar.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPlotRequest_descriptor_ = file->message_type(0);
  static const int MsgPlotRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotRequest, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotRequest, request_),
  };
  MsgPlotRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlotRequest_descriptor_,
      MsgPlotRequest::default_instance_,
      MsgPlotRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlotRequest));
  MsgClientToAar_descriptor_ = file->message_type(1);
  static const int MsgClientToAar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar, message_),
  };
  MsgClientToAar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientToAar_descriptor_,
      MsgClientToAar::default_instance_,
      MsgClientToAar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientToAar));
  MsgClientToAar_Content_descriptor_ = MsgClientToAar_descriptor_->nested_type(0);
  static const int MsgClientToAar_Content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar_Content, plot_request_),
  };
  MsgClientToAar_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgClientToAar_Content_descriptor_,
      MsgClientToAar_Content::default_instance_,
      MsgClientToAar_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgClientToAar_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgClientToAar_Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientToAar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlotRequest_descriptor_, &MsgPlotRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientToAar_descriptor_, &MsgClientToAar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgClientToAar_Content_descriptor_, &MsgClientToAar_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientToAar_2eproto() {
  delete MsgPlotRequest::default_instance_;
  delete MsgPlotRequest_reflection_;
  delete MsgClientToAar::default_instance_;
  delete MsgClientToAar_reflection_;
  delete MsgClientToAar_Content::default_instance_;
  delete MsgClientToAar_Content_reflection_;
}

void protobuf_AddDesc_ClientToAar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021ClientToAar.proto\022\017MsgsClientToAar\"5\n\016"
    "MsgPlotRequest\022\022\n\nidentifier\030\001 \002(\r\022\017\n\007re"
    "quest\030\002 \002(\t\"\235\001\n\016MsgClientToAar\022\017\n\007contex"
    "t\030\001 \001(\005\0228\n\007message\030\002 \002(\0132\'.MsgsClientToA"
    "ar.MsgClientToAar.Content\032@\n\007Content\0225\n\014"
    "plot_request\030\001 \001(\0132\037.MsgsClientToAar.Msg"
    "PlotRequest", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientToAar.proto", &protobuf_RegisterTypes);
  MsgPlotRequest::default_instance_ = new MsgPlotRequest();
  MsgClientToAar::default_instance_ = new MsgClientToAar();
  MsgClientToAar_Content::default_instance_ = new MsgClientToAar_Content();
  MsgPlotRequest::default_instance_->InitAsDefaultInstance();
  MsgClientToAar::default_instance_->InitAsDefaultInstance();
  MsgClientToAar_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientToAar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientToAar_2eproto {
  StaticDescriptorInitializer_ClientToAar_2eproto() {
    protobuf_AddDesc_ClientToAar_2eproto();
  }
} static_descriptor_initializer_ClientToAar_2eproto_;


// ===================================================================

const ::std::string MsgPlotRequest::_default_request_;
#ifndef _MSC_VER
const int MsgPlotRequest::kIdentifierFieldNumber;
const int MsgPlotRequest::kRequestFieldNumber;
#endif  // !_MSC_VER

MsgPlotRequest::MsgPlotRequest() {
  SharedCtor();
}

void MsgPlotRequest::InitAsDefaultInstance() {
}

MsgPlotRequest::MsgPlotRequest(const MsgPlotRequest& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlotRequest::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = 0u;
  request_ = const_cast< ::std::string*>(&_default_request_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlotRequest::~MsgPlotRequest() {
  SharedDtor();
}

void MsgPlotRequest::SharedDtor() {
  if (request_ != &_default_request_) {
    delete request_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlotRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlotRequest_descriptor_;
}

const MsgPlotRequest& MsgPlotRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToAar_2eproto();  return *default_instance_;
}

MsgPlotRequest* MsgPlotRequest::default_instance_ = NULL;

MsgPlotRequest* MsgPlotRequest::New() const {
  return new MsgPlotRequest;
}

void MsgPlotRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = 0u;
    if (_has_bit(1)) {
      if (request_ != &_default_request_) {
        request_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &identifier_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_request;
        break;
      }
      
      // required string request = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_request:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_request()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->request().data(), this->request().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlotRequest::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 identifier = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }
  
  // required string request = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlotRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 identifier = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }
  
  // required string request = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request().data(), this->request().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlotRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identifier());
    }
    
    // required string request = 2;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlotRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlotRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlotRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlotRequest::MergeFrom(const MsgPlotRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_identifier(from.identifier());
    }
    if (from._has_bit(1)) {
      set_request(from.request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlotRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlotRequest::CopyFrom(const MsgPlotRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlotRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPlotRequest::Swap(MsgPlotRequest* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    std::swap(request_, other->request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlotRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlotRequest_descriptor_;
  metadata.reflection = MsgPlotRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgClientToAar_Content::kPlotRequestFieldNumber;
#endif  // !_MSC_VER

MsgClientToAar_Content::MsgClientToAar_Content() {
  SharedCtor();
}

void MsgClientToAar_Content::InitAsDefaultInstance() {
  plot_request_ = const_cast< ::MsgsClientToAar::MsgPlotRequest*>(&::MsgsClientToAar::MsgPlotRequest::default_instance());
}

MsgClientToAar_Content::MsgClientToAar_Content(const MsgClientToAar_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgClientToAar_Content::SharedCtor() {
  _cached_size_ = 0;
  plot_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientToAar_Content::~MsgClientToAar_Content() {
  SharedDtor();
}

void MsgClientToAar_Content::SharedDtor() {
  if (this != default_instance_) {
    delete plot_request_;
  }
}

const ::google::protobuf::Descriptor* MsgClientToAar_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientToAar_Content_descriptor_;
}

const MsgClientToAar_Content& MsgClientToAar_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToAar_2eproto();  return *default_instance_;
}

MsgClientToAar_Content* MsgClientToAar_Content::default_instance_ = NULL;

MsgClientToAar_Content* MsgClientToAar_Content::New() const {
  return new MsgClientToAar_Content;
}

void MsgClientToAar_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (plot_request_ != NULL) plot_request_->::MsgsClientToAar::MsgPlotRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientToAar_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsClientToAar.MsgPlotRequest plot_request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plot_request()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgClientToAar_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgClientToAar_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsClientToAar.MsgPlotRequest plot_request = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->plot_request(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgClientToAar_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsClientToAar.MsgPlotRequest plot_request = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plot_request(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgClientToAar_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsClientToAar.MsgPlotRequest plot_request = 1;
    if (has_plot_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plot_request());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgClientToAar_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientToAar_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientToAar_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientToAar_Content::MergeFrom(const MsgClientToAar_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_plot_request()->::MsgsClientToAar::MsgPlotRequest::MergeFrom(from.plot_request());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientToAar_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientToAar_Content::CopyFrom(const MsgClientToAar_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientToAar_Content::IsInitialized() const {
  
  if (has_plot_request()) {
    if (!this->plot_request().IsInitialized()) return false;
  }
  return true;
}

void MsgClientToAar_Content::Swap(MsgClientToAar_Content* other) {
  if (other != this) {
    std::swap(plot_request_, other->plot_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientToAar_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientToAar_Content_descriptor_;
  metadata.reflection = MsgClientToAar_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgClientToAar::kContextFieldNumber;
const int MsgClientToAar::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgClientToAar::MsgClientToAar() {
  SharedCtor();
}

void MsgClientToAar::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsClientToAar::MsgClientToAar_Content*>(&::MsgsClientToAar::MsgClientToAar_Content::default_instance());
}

MsgClientToAar::MsgClientToAar(const MsgClientToAar& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgClientToAar::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgClientToAar::~MsgClientToAar() {
  SharedDtor();
}

void MsgClientToAar::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgClientToAar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgClientToAar_descriptor_;
}

const MsgClientToAar& MsgClientToAar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToAar_2eproto();  return *default_instance_;
}

MsgClientToAar* MsgClientToAar::default_instance_ = NULL;

MsgClientToAar* MsgClientToAar::New() const {
  return new MsgClientToAar;
}

void MsgClientToAar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::MsgsClientToAar::MsgClientToAar_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgClientToAar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 context = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .MsgsClientToAar.MsgClientToAar.Content message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgClientToAar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgClientToAar::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 context = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // required .MsgsClientToAar.MsgClientToAar.Content message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgClientToAar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 context = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // required .MsgsClientToAar.MsgClientToAar.Content message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgClientToAar::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 context = 1;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // required .MsgsClientToAar.MsgClientToAar.Content message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgClientToAar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgClientToAar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgClientToAar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgClientToAar::MergeFrom(const MsgClientToAar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_message()->::MsgsClientToAar::MsgClientToAar_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgClientToAar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgClientToAar::CopyFrom(const MsgClientToAar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgClientToAar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void MsgClientToAar::Swap(MsgClientToAar* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgClientToAar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgClientToAar_descriptor_;
  metadata.reflection = MsgClientToAar_reflection_;
  return metadata;
}


}  // namespace MsgsClientToAar

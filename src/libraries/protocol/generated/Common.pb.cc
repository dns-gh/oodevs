// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Common.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace Common {

namespace {

const ::google::protobuf::Descriptor* AutomatId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomatId_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutomatIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomatIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormationId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationId_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormationIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KnowledgeGroupId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KnowledgeGroupId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectKnowledgeIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectKnowledgeIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartyId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartyId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartyIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartyIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdConcentrationId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdConcentrationId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdConcentrationKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdConcentrationKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdFlowId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdFlowId_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdFlowKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdFlowKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitId_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitKnowledgeIdList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitKnowledgeIdList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UrbanObjectId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UrbanObjectId_reflection_ = NULL;
const ::google::protobuf::Descriptor* UrbanObjectKnowledgeId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UrbanObjectKnowledgeId_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tasker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tasker_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParentEntity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParentEntity_reflection_ = NULL;
const ::google::protobuf::Descriptor* DrawingId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DrawingId_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntelligenceId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntelligenceId_reflection_ = NULL;
const ::google::protobuf::Descriptor* TacticalLineId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TacticalLineId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkerId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkerId_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireId_reflection_ = NULL;
const ::google::protobuf::Descriptor* FireEffectId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FireEffectId_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportId_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeatherId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeatherId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaintenanceRequestId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaintenanceRequestId_reflection_ = NULL;
const ::google::protobuf::Descriptor* MedicalRequestId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MedicalRequestId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupplyRequestId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupplyRequestId_reflection_ = NULL;
const ::google::protobuf::Descriptor* AutomatType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AutomatType_reflection_ = NULL;
const ::google::protobuf::Descriptor* BreakdownType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BreakdownType_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* FragOrderType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FragOrderType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionType_reflection_ = NULL;
const ::google::protobuf::Descriptor* NBCAgentType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NBCAgentType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectType_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrowdType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrowdType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceType_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceNetworkType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceNetworkType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgHeading_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHeading_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDateTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDateTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDotationStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDotationStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfDotationStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfDotationStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDotationQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDotationQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeqOfDotationQuota_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeqOfDotationQuota_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeKnowledgeGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeKnowledgeGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeLogisticLinks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeLogisticLinks_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeSuperior_oid_superior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeSuperior_oid_superior_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatChangeSuperior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatChangeSuperior_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitChangeSuperior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitChangeSuperior_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlPause_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlPause_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlResume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlResume_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlChangeTimeFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlChangeTimeFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgExercise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgExercise_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNetworkAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNetworkAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCoordLatLong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCoordLatLong_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCoordLatLongList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCoordLatLongList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLocation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLocation_Geometry_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLocationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLocationList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPathList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPathList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPointList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPointList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPolygon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPolygon_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPolygonList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPolygonList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMedicalPriorities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMedicalPriorities_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObstacleType_DemolitionTargetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgPlannedWork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlannedWork_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlannedWorkList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlannedWorkList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLogMaintenancePriorities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLogMaintenancePriorities_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionObjective_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionObjective_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionObjectiveList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionObjectiveList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLimaOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLimaOrder_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLimaOrder_Function_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgLimasOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLimasOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgIntelligence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgIntelligence_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgIntelligenceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgIntelligenceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChangeDiplomacy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChangeDiplomacy_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAtlasNature_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAtlasNature_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgAtlasNature_AtlasNature_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionParameter_Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionParameter_Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgMissionParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgMissionParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgUnitOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgUnitOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAutomatOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAutomatOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgCrowdOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCrowdOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTacticalLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTacticalLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTacticalLine_Diffusion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTacticalLine_Diffusion_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgChatTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgChatTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgTextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgTextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceNetwork_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceNetwork_Link_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceNetwork_Link_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResourceNetwork_Link_TargetKind_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeResourceNetwork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeResourceNetwork_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeConstruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeConstruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeMine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeMine_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeLogistic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeLogistic_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeInteractionHeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeInteractionHeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeObstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeObstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeActivityTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeActivityTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeBypass_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeBypass_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeEffectDelay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeEffectDelay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeNBC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeNBC_reflection_ = NULL;
const ::google::protobuf::Descriptor* StockResource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StockResource_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeStock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeStock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeCrossingSite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeCrossingSite_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeSupplyRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeSupplyRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLocatedQuantity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLocatedQuantity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLocatedQuantityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLocatedQuantityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeToxicCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeToxicCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeMedicalTreatment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeMedicalTreatment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeNBCType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeNBCType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributeSealOff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributeSealOff_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObjectAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectAttributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgNote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgNote_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgWeatherAttributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgWeatherAttributes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumDotationFamily_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumAmmunitionFamily_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumPrecipitationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumFireEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitFireType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumLightingType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumLogMaintenanceHandlingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumLogMedicalHandlingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumUnitVisibility_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumSimulationState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumDispatcherState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumMeetingEngagementStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumOperationalStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumAutomatMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumCrowdAttitude_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumUnitTiredness_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumUnitMorale_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumUnitExperience_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumHumanRank_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumDiplomacy_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumHumanWound_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumLogMaintenanceRegimeTravail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EnumNatureLevel_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Common_2eproto() {
  protobuf_AddDesc_Common_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Common.proto");
  GOOGLE_CHECK(file != NULL);
  AutomatId_descriptor_ = file->message_type(0);
  static const int AutomatId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatId, id_),
  };
  AutomatId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomatId_descriptor_,
      AutomatId::default_instance_,
      AutomatId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomatId));
  AutomatIdList_descriptor_ = file->message_type(1);
  static const int AutomatIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatIdList, elem_),
  };
  AutomatIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomatIdList_descriptor_,
      AutomatIdList::default_instance_,
      AutomatIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomatIdList));
  FormationId_descriptor_ = file->message_type(2);
  static const int FormationId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationId, id_),
  };
  FormationId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationId_descriptor_,
      FormationId::default_instance_,
      FormationId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationId));
  FormationIdList_descriptor_ = file->message_type(3);
  static const int FormationIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationIdList, elem_),
  };
  FormationIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationIdList_descriptor_,
      FormationIdList::default_instance_,
      FormationIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationIdList));
  KnowledgeGroupId_descriptor_ = file->message_type(4);
  static const int KnowledgeGroupId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KnowledgeGroupId, id_),
  };
  KnowledgeGroupId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KnowledgeGroupId_descriptor_,
      KnowledgeGroupId::default_instance_,
      KnowledgeGroupId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KnowledgeGroupId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KnowledgeGroupId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KnowledgeGroupId));
  ObjectId_descriptor_ = file->message_type(5);
  static const int ObjectId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectId, id_),
  };
  ObjectId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectId_descriptor_,
      ObjectId::default_instance_,
      ObjectId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectId));
  ObjectKnowledgeId_descriptor_ = file->message_type(6);
  static const int ObjectKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeId, id_),
  };
  ObjectKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectKnowledgeId_descriptor_,
      ObjectKnowledgeId::default_instance_,
      ObjectKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectKnowledgeId));
  ObjectKnowledgeIdList_descriptor_ = file->message_type(7);
  static const int ObjectKnowledgeIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeIdList, elem_),
  };
  ObjectKnowledgeIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectKnowledgeIdList_descriptor_,
      ObjectKnowledgeIdList::default_instance_,
      ObjectKnowledgeIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectKnowledgeIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectKnowledgeIdList));
  PartyId_descriptor_ = file->message_type(8);
  static const int PartyId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyId, id_),
  };
  PartyId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartyId_descriptor_,
      PartyId::default_instance_,
      PartyId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartyId));
  PartyIdList_descriptor_ = file->message_type(9);
  static const int PartyIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyIdList, elem_),
  };
  PartyIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartyIdList_descriptor_,
      PartyIdList::default_instance_,
      PartyIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartyIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartyIdList));
  CrowdId_descriptor_ = file->message_type(10);
  static const int CrowdId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdId, id_),
  };
  CrowdId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdId_descriptor_,
      CrowdId::default_instance_,
      CrowdId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdId));
  CrowdIdList_descriptor_ = file->message_type(11);
  static const int CrowdIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdIdList, elem_),
  };
  CrowdIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdIdList_descriptor_,
      CrowdIdList::default_instance_,
      CrowdIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdIdList));
  CrowdKnowledgeId_descriptor_ = file->message_type(12);
  static const int CrowdKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdKnowledgeId, id_),
  };
  CrowdKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdKnowledgeId_descriptor_,
      CrowdKnowledgeId::default_instance_,
      CrowdKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdKnowledgeId));
  CrowdConcentrationId_descriptor_ = file->message_type(13);
  static const int CrowdConcentrationId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationId, id_),
  };
  CrowdConcentrationId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdConcentrationId_descriptor_,
      CrowdConcentrationId::default_instance_,
      CrowdConcentrationId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdConcentrationId));
  CrowdConcentrationKnowledgeId_descriptor_ = file->message_type(14);
  static const int CrowdConcentrationKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationKnowledgeId, id_),
  };
  CrowdConcentrationKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdConcentrationKnowledgeId_descriptor_,
      CrowdConcentrationKnowledgeId::default_instance_,
      CrowdConcentrationKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdConcentrationKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdConcentrationKnowledgeId));
  CrowdFlowId_descriptor_ = file->message_type(15);
  static const int CrowdFlowId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowId, id_),
  };
  CrowdFlowId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdFlowId_descriptor_,
      CrowdFlowId::default_instance_,
      CrowdFlowId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdFlowId));
  CrowdFlowKnowledgeId_descriptor_ = file->message_type(16);
  static const int CrowdFlowKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowKnowledgeId, id_),
  };
  CrowdFlowKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdFlowKnowledgeId_descriptor_,
      CrowdFlowKnowledgeId::default_instance_,
      CrowdFlowKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdFlowKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdFlowKnowledgeId));
  UnitId_descriptor_ = file->message_type(17);
  static const int UnitId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitId, id_),
  };
  UnitId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitId_descriptor_,
      UnitId::default_instance_,
      UnitId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitId));
  UnitIdList_descriptor_ = file->message_type(18);
  static const int UnitIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitIdList, elem_),
  };
  UnitIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitIdList_descriptor_,
      UnitIdList::default_instance_,
      UnitIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitIdList));
  UnitKnowledgeId_descriptor_ = file->message_type(19);
  static const int UnitKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeId, id_),
  };
  UnitKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitKnowledgeId_descriptor_,
      UnitKnowledgeId::default_instance_,
      UnitKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitKnowledgeId));
  UnitKnowledgeIdList_descriptor_ = file->message_type(20);
  static const int UnitKnowledgeIdList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeIdList, elem_),
  };
  UnitKnowledgeIdList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitKnowledgeIdList_descriptor_,
      UnitKnowledgeIdList::default_instance_,
      UnitKnowledgeIdList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeIdList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitKnowledgeIdList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitKnowledgeIdList));
  UrbanObjectId_descriptor_ = file->message_type(21);
  static const int UrbanObjectId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectId, id_),
  };
  UrbanObjectId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UrbanObjectId_descriptor_,
      UrbanObjectId::default_instance_,
      UrbanObjectId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UrbanObjectId));
  UrbanObjectKnowledgeId_descriptor_ = file->message_type(22);
  static const int UrbanObjectKnowledgeId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectKnowledgeId, id_),
  };
  UrbanObjectKnowledgeId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UrbanObjectKnowledgeId_descriptor_,
      UrbanObjectKnowledgeId::default_instance_,
      UrbanObjectKnowledgeId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectKnowledgeId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UrbanObjectKnowledgeId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UrbanObjectKnowledgeId));
  Tasker_descriptor_ = file->message_type(23);
  static const int Tasker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, crowd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, unit_),
  };
  Tasker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tasker_descriptor_,
      Tasker::default_instance_,
      Tasker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tasker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tasker));
  ParentEntity_descriptor_ = file->message_type(24);
  static const int ParentEntity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentEntity, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentEntity, formation_),
  };
  ParentEntity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParentEntity_descriptor_,
      ParentEntity::default_instance_,
      ParentEntity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentEntity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParentEntity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParentEntity));
  DrawingId_descriptor_ = file->message_type(25);
  static const int DrawingId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawingId, id_),
  };
  DrawingId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DrawingId_descriptor_,
      DrawingId::default_instance_,
      DrawingId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawingId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DrawingId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DrawingId));
  IntelligenceId_descriptor_ = file->message_type(26);
  static const int IntelligenceId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntelligenceId, id_),
  };
  IntelligenceId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntelligenceId_descriptor_,
      IntelligenceId::default_instance_,
      IntelligenceId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntelligenceId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntelligenceId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntelligenceId));
  TacticalLineId_descriptor_ = file->message_type(27);
  static const int TacticalLineId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacticalLineId, id_),
  };
  TacticalLineId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TacticalLineId_descriptor_,
      TacticalLineId::default_instance_,
      TacticalLineId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacticalLineId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TacticalLineId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TacticalLineId));
  MarkerId_descriptor_ = file->message_type(28);
  static const int MarkerId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerId, id_),
  };
  MarkerId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkerId_descriptor_,
      MarkerId::default_instance_,
      MarkerId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkerId));
  FireId_descriptor_ = file->message_type(29);
  static const int FireId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireId, id_),
  };
  FireId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireId_descriptor_,
      FireId::default_instance_,
      FireId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireId));
  FireEffectId_descriptor_ = file->message_type(30);
  static const int FireEffectId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireEffectId, id_),
  };
  FireEffectId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FireEffectId_descriptor_,
      FireEffectId::default_instance_,
      FireEffectId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireEffectId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FireEffectId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FireEffectId));
  ReportId_descriptor_ = file->message_type(31);
  static const int ReportId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportId, id_),
  };
  ReportId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportId_descriptor_,
      ReportId::default_instance_,
      ReportId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportId));
  WeatherId_descriptor_ = file->message_type(32);
  static const int WeatherId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherId, id_),
  };
  WeatherId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeatherId_descriptor_,
      WeatherId::default_instance_,
      WeatherId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeatherId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeatherId));
  MaintenanceRequestId_descriptor_ = file->message_type(33);
  static const int MaintenanceRequestId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceRequestId, id_),
  };
  MaintenanceRequestId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaintenanceRequestId_descriptor_,
      MaintenanceRequestId::default_instance_,
      MaintenanceRequestId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceRequestId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintenanceRequestId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaintenanceRequestId));
  MedicalRequestId_descriptor_ = file->message_type(34);
  static const int MedicalRequestId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicalRequestId, id_),
  };
  MedicalRequestId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MedicalRequestId_descriptor_,
      MedicalRequestId::default_instance_,
      MedicalRequestId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicalRequestId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MedicalRequestId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MedicalRequestId));
  SupplyRequestId_descriptor_ = file->message_type(35);
  static const int SupplyRequestId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplyRequestId, id_),
  };
  SupplyRequestId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SupplyRequestId_descriptor_,
      SupplyRequestId::default_instance_,
      SupplyRequestId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplyRequestId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupplyRequestId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SupplyRequestId));
  AutomatType_descriptor_ = file->message_type(36);
  static const int AutomatType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatType, id_),
  };
  AutomatType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AutomatType_descriptor_,
      AutomatType::default_instance_,
      AutomatType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AutomatType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AutomatType));
  BreakdownType_descriptor_ = file->message_type(37);
  static const int BreakdownType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakdownType, id_),
  };
  BreakdownType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BreakdownType_descriptor_,
      BreakdownType::default_instance_,
      BreakdownType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakdownType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakdownType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BreakdownType));
  EquipmentType_descriptor_ = file->message_type(38);
  static const int EquipmentType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentType, id_),
  };
  EquipmentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentType_descriptor_,
      EquipmentType::default_instance_,
      EquipmentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentType));
  FragOrderType_descriptor_ = file->message_type(39);
  static const int FragOrderType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragOrderType, id_),
  };
  FragOrderType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FragOrderType_descriptor_,
      FragOrderType::default_instance_,
      FragOrderType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragOrderType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FragOrderType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FragOrderType));
  MissionType_descriptor_ = file->message_type(40);
  static const int MissionType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionType, id_),
  };
  MissionType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionType_descriptor_,
      MissionType::default_instance_,
      MissionType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionType));
  NBCAgentType_descriptor_ = file->message_type(41);
  static const int NBCAgentType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NBCAgentType, id_),
  };
  NBCAgentType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NBCAgentType_descriptor_,
      NBCAgentType::default_instance_,
      NBCAgentType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NBCAgentType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NBCAgentType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NBCAgentType));
  ObjectType_descriptor_ = file->message_type(42);
  static const int ObjectType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectType, id_),
  };
  ObjectType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectType_descriptor_,
      ObjectType::default_instance_,
      ObjectType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectType));
  CrowdType_descriptor_ = file->message_type(43);
  static const int CrowdType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdType, id_),
  };
  CrowdType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrowdType_descriptor_,
      CrowdType::default_instance_,
      CrowdType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrowdType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrowdType));
  ReportType_descriptor_ = file->message_type(44);
  static const int ReportType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportType, id_),
  };
  ReportType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportType_descriptor_,
      ReportType::default_instance_,
      ReportType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportType));
  ResourceType_descriptor_ = file->message_type(45);
  static const int ResourceType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceType, id_),
  };
  ResourceType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceType_descriptor_,
      ResourceType::default_instance_,
      ResourceType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceType));
  UnitType_descriptor_ = file->message_type(46);
  static const int UnitType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, id_),
  };
  UnitType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitType_descriptor_,
      UnitType::default_instance_,
      UnitType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitType));
  ResourceNetworkType_descriptor_ = file->message_type(47);
  static const int ResourceNetworkType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetworkType, name_),
  };
  ResourceNetworkType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceNetworkType_descriptor_,
      ResourceNetworkType::default_instance_,
      ResourceNetworkType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetworkType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetworkType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceNetworkType));
  MsgHeading_descriptor_ = file->message_type(48);
  static const int MsgHeading_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeading, heading_),
  };
  MsgHeading_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgHeading_descriptor_,
      MsgHeading::default_instance_,
      MsgHeading_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeading, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHeading, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgHeading));
  MsgDateTime_descriptor_ = file->message_type(49);
  static const int MsgDateTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDateTime, data_),
  };
  MsgDateTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDateTime_descriptor_,
      MsgDateTime::default_instance_,
      MsgDateTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDateTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDateTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDateTime));
  MsgDotationStock_descriptor_ = file->message_type(50);
  static const int MsgDotationStock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationStock, ressource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationStock, quantite_disponible_),
  };
  MsgDotationStock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDotationStock_descriptor_,
      MsgDotationStock::default_instance_,
      MsgDotationStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationStock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationStock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDotationStock));
  SeqOfDotationStock_descriptor_ = file->message_type(51);
  static const int SeqOfDotationStock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationStock, elem_),
  };
  SeqOfDotationStock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfDotationStock_descriptor_,
      SeqOfDotationStock::default_instance_,
      SeqOfDotationStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationStock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationStock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfDotationStock));
  MsgDotationQuota_descriptor_ = file->message_type(52);
  static const int MsgDotationQuota_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuota, ressource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuota, quota_disponible_),
  };
  MsgDotationQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDotationQuota_descriptor_,
      MsgDotationQuota::default_instance_,
      MsgDotationQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDotationQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDotationQuota));
  SeqOfDotationQuota_descriptor_ = file->message_type(53);
  static const int SeqOfDotationQuota_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuota, elem_),
  };
  SeqOfDotationQuota_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeqOfDotationQuota_descriptor_,
      SeqOfDotationQuota::default_instance_,
      SeqOfDotationQuota_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuota, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeqOfDotationQuota, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeqOfDotationQuota));
  MsgAutomatChangeKnowledgeGroup_descriptor_ = file->message_type(54);
  static const int MsgAutomatChangeKnowledgeGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroup, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroup, party_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroup, knowledge_group_),
  };
  MsgAutomatChangeKnowledgeGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeKnowledgeGroup_descriptor_,
      MsgAutomatChangeKnowledgeGroup::default_instance_,
      MsgAutomatChangeKnowledgeGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeKnowledgeGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeKnowledgeGroup));
  MsgAutomatChangeLogisticLinks_descriptor_ = file->message_type(55);
  static const int MsgAutomatChangeLogisticLinks_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, tc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, maintenance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, supply_),
  };
  MsgAutomatChangeLogisticLinks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeLogisticLinks_descriptor_,
      MsgAutomatChangeLogisticLinks::default_instance_,
      MsgAutomatChangeLogisticLinks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeLogisticLinks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeLogisticLinks));
  MsgAutomatChangeSuperior_oid_superior_descriptor_ = file->message_type(56);
  static const int MsgAutomatChangeSuperior_oid_superior_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior_oid_superior, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior_oid_superior, automat_),
  };
  MsgAutomatChangeSuperior_oid_superior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeSuperior_oid_superior_descriptor_,
      MsgAutomatChangeSuperior_oid_superior::default_instance_,
      MsgAutomatChangeSuperior_oid_superior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior_oid_superior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior_oid_superior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeSuperior_oid_superior));
  MsgAutomatChangeSuperior_descriptor_ = file->message_type(57);
  static const int MsgAutomatChangeSuperior_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior, superior_),
  };
  MsgAutomatChangeSuperior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatChangeSuperior_descriptor_,
      MsgAutomatChangeSuperior::default_instance_,
      MsgAutomatChangeSuperior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatChangeSuperior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatChangeSuperior));
  MsgUnitChangeSuperior_descriptor_ = file->message_type(58);
  static const int MsgUnitChangeSuperior_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperior, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperior, parent_),
  };
  MsgUnitChangeSuperior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitChangeSuperior_descriptor_,
      MsgUnitChangeSuperior::default_instance_,
      MsgUnitChangeSuperior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitChangeSuperior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitChangeSuperior));
  MsgControlStop_descriptor_ = file->message_type(59);
  static const int MsgControlStop_offsets_[1] = {
  };
  MsgControlStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlStop_descriptor_,
      MsgControlStop::default_instance_,
      MsgControlStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlStop));
  MsgControlPause_descriptor_ = file->message_type(60);
  static const int MsgControlPause_offsets_[1] = {
  };
  MsgControlPause_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlPause_descriptor_,
      MsgControlPause::default_instance_,
      MsgControlPause_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlPause, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlPause, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlPause));
  MsgControlResume_descriptor_ = file->message_type(61);
  static const int MsgControlResume_offsets_[1] = {
  };
  MsgControlResume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlResume_descriptor_,
      MsgControlResume::default_instance_,
      MsgControlResume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlResume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlResume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlResume));
  MsgControlChangeTimeFactor_descriptor_ = file->message_type(62);
  static const int MsgControlChangeTimeFactor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactor, time_factor_),
  };
  MsgControlChangeTimeFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlChangeTimeFactor_descriptor_,
      MsgControlChangeTimeFactor::default_instance_,
      MsgControlChangeTimeFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlChangeTimeFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlChangeTimeFactor));
  MsgExercise_descriptor_ = file->message_type(63);
  static const int MsgExercise_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExercise, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExercise, running_),
  };
  MsgExercise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgExercise_descriptor_,
      MsgExercise::default_instance_,
      MsgExercise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExercise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgExercise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgExercise));
  MsgNetworkAddress_descriptor_ = file->message_type(64);
  static const int MsgNetworkAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNetworkAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNetworkAddress, port_),
  };
  MsgNetworkAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNetworkAddress_descriptor_,
      MsgNetworkAddress::default_instance_,
      MsgNetworkAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNetworkAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNetworkAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNetworkAddress));
  MsgCoordLatLong_descriptor_ = file->message_type(65);
  static const int MsgCoordLatLong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLong, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLong, longitude_),
  };
  MsgCoordLatLong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCoordLatLong_descriptor_,
      MsgCoordLatLong::default_instance_,
      MsgCoordLatLong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCoordLatLong));
  MsgCoordLatLongList_descriptor_ = file->message_type(66);
  static const int MsgCoordLatLongList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLongList, elem_),
  };
  MsgCoordLatLongList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCoordLatLongList_descriptor_,
      MsgCoordLatLongList::default_instance_,
      MsgCoordLatLongList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLongList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCoordLatLongList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCoordLatLongList));
  MsgLocation_descriptor_ = file->message_type(67);
  static const int MsgLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocation, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocation, coordinates_),
  };
  MsgLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLocation_descriptor_,
      MsgLocation::default_instance_,
      MsgLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLocation));
  MsgLocation_Geometry_descriptor_ = MsgLocation_descriptor_->enum_type(0);
  MsgLine_descriptor_ = file->message_type(68);
  static const int MsgLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLine, location_),
  };
  MsgLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLine_descriptor_,
      MsgLine::default_instance_,
      MsgLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLine));
  MsgLocationList_descriptor_ = file->message_type(69);
  static const int MsgLocationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocationList, elem_),
  };
  MsgLocationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLocationList_descriptor_,
      MsgLocationList::default_instance_,
      MsgLocationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLocationList));
  MsgPath_descriptor_ = file->message_type(70);
  static const int MsgPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPath, location_),
  };
  MsgPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPath_descriptor_,
      MsgPath::default_instance_,
      MsgPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPath));
  MsgPathList_descriptor_ = file->message_type(71);
  static const int MsgPathList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPathList, elem_),
  };
  MsgPathList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPathList_descriptor_,
      MsgPathList::default_instance_,
      MsgPathList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPathList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPathList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPathList));
  MsgPoint_descriptor_ = file->message_type(72);
  static const int MsgPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint, location_),
  };
  MsgPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPoint_descriptor_,
      MsgPoint::default_instance_,
      MsgPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPoint));
  MsgPointList_descriptor_ = file->message_type(73);
  static const int MsgPointList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPointList, elem_),
  };
  MsgPointList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPointList_descriptor_,
      MsgPointList::default_instance_,
      MsgPointList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPointList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPointList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPointList));
  MsgPolygon_descriptor_ = file->message_type(74);
  static const int MsgPolygon_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygon, location_),
  };
  MsgPolygon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPolygon_descriptor_,
      MsgPolygon::default_instance_,
      MsgPolygon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPolygon));
  MsgPolygonList_descriptor_ = file->message_type(75);
  static const int MsgPolygonList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygonList, elem_),
  };
  MsgPolygonList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPolygonList_descriptor_,
      MsgPolygonList::default_instance_,
      MsgPolygonList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygonList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPolygonList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPolygonList));
  MsgLogMedicalPriorities_descriptor_ = file->message_type(76);
  static const int MsgLogMedicalPriorities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalPriorities, elem_),
  };
  MsgLogMedicalPriorities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMedicalPriorities_descriptor_,
      MsgLogMedicalPriorities::default_instance_,
      MsgLogMedicalPriorities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalPriorities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMedicalPriorities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMedicalPriorities));
  ObstacleType_descriptor_ = file->message_type(77);
  static const int ObstacleType_offsets_[1] = {
  };
  ObstacleType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleType_descriptor_,
      ObstacleType::default_instance_,
      ObstacleType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleType));
  ObstacleType_DemolitionTargetType_descriptor_ = ObstacleType_descriptor_->enum_type(0);
  MsgPlannedWork_descriptor_ = file->message_type(78);
  static const int MsgPlannedWork_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, type_obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, densite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, tc2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, activity_time_),
  };
  MsgPlannedWork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlannedWork_descriptor_,
      MsgPlannedWork::default_instance_,
      MsgPlannedWork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlannedWork));
  MsgPlannedWorkList_descriptor_ = file->message_type(79);
  static const int MsgPlannedWorkList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWorkList, elem_),
  };
  MsgPlannedWorkList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlannedWorkList_descriptor_,
      MsgPlannedWorkList::default_instance_,
      MsgPlannedWorkList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWorkList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlannedWorkList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlannedWorkList));
  MsgLogMaintenancePriorities_descriptor_ = file->message_type(80);
  static const int MsgLogMaintenancePriorities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenancePriorities, elem_),
  };
  MsgLogMaintenancePriorities_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLogMaintenancePriorities_descriptor_,
      MsgLogMaintenancePriorities::default_instance_,
      MsgLogMaintenancePriorities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenancePriorities, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLogMaintenancePriorities, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLogMaintenancePriorities));
  MsgMissionObjective_descriptor_ = file->message_type(81);
  static const int MsgMissionObjective_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjective, localisation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjective, horaire_),
  };
  MsgMissionObjective_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionObjective_descriptor_,
      MsgMissionObjective::default_instance_,
      MsgMissionObjective_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjective, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjective, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionObjective));
  MsgMissionObjectiveList_descriptor_ = file->message_type(82);
  static const int MsgMissionObjectiveList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjectiveList, elem_),
  };
  MsgMissionObjectiveList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionObjectiveList_descriptor_,
      MsgMissionObjectiveList::default_instance_,
      MsgMissionObjectiveList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjectiveList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionObjectiveList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionObjectiveList));
  MsgLimaOrder_descriptor_ = file->message_type(83);
  static const int MsgLimaOrder_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimaOrder, lima_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimaOrder, horaire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimaOrder, fonctions_),
  };
  MsgLimaOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLimaOrder_descriptor_,
      MsgLimaOrder::default_instance_,
      MsgLimaOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimaOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimaOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLimaOrder));
  MsgLimaOrder_Function_descriptor_ = MsgLimaOrder_descriptor_->enum_type(0);
  MsgLimasOrder_descriptor_ = file->message_type(84);
  static const int MsgLimasOrder_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimasOrder, elem_),
  };
  MsgLimasOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLimasOrder_descriptor_,
      MsgLimasOrder::default_instance_,
      MsgLimasOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimasOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLimasOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLimasOrder));
  MsgIntelligence_descriptor_ = file->message_type(85);
  static const int MsgIntelligence_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, nature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, embarked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, diplomacy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, formation_),
  };
  MsgIntelligence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgIntelligence_descriptor_,
      MsgIntelligence::default_instance_,
      MsgIntelligence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgIntelligence));
  MsgIntelligenceList_descriptor_ = file->message_type(86);
  static const int MsgIntelligenceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligenceList, elem_),
  };
  MsgIntelligenceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgIntelligenceList_descriptor_,
      MsgIntelligenceList::default_instance_,
      MsgIntelligenceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligenceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIntelligenceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgIntelligenceList));
  MsgChangeDiplomacy_descriptor_ = file->message_type(87);
  static const int MsgChangeDiplomacy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacy, party1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacy, party2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacy, diplomatie_),
  };
  MsgChangeDiplomacy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChangeDiplomacy_descriptor_,
      MsgChangeDiplomacy::default_instance_,
      MsgChangeDiplomacy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChangeDiplomacy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChangeDiplomacy));
  MsgAtlasNature_descriptor_ = file->message_type(88);
  static const int MsgAtlasNature_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAtlasNature, nature_),
  };
  MsgAtlasNature_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAtlasNature_descriptor_,
      MsgAtlasNature::default_instance_,
      MsgAtlasNature_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAtlasNature, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAtlasNature, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAtlasNature));
  MsgAtlasNature_AtlasNature_descriptor_ = MsgAtlasNature_descriptor_->enum_type(0);
  MsgMissionParameter_descriptor_ = file->message_type(89);
  static const int MsgMissionParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter, null_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter, value_),
  };
  MsgMissionParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionParameter_descriptor_,
      MsgMissionParameter::default_instance_,
      MsgMissionParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionParameter));
  MsgMissionParameter_Value_descriptor_ = MsgMissionParameter_descriptor_->nested_type(0);
  static const int MsgMissionParameter_Value_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, abool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, areal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, enumeration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, pathlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, pointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, polygon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, polygonlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, locationlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, atlasnature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, unitlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, automatlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, unitknowledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, unitknowledgelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, objectknowledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, objectknowledgelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, crowdknowledge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, plannedwork_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, plannedworklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, resourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, equipmenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, tirindirect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, logmaintenancepriorities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, logmedicalpriorities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, acharstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, missionobjective_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, missionobjectivelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, limasorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, intelligencelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, urbanblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, party_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, knowledgegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, list_),
  };
  MsgMissionParameter_Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionParameter_Value_descriptor_,
      MsgMissionParameter_Value::default_instance_,
      MsgMissionParameter_Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameter_Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionParameter_Value));
  MsgMissionParameters_descriptor_ = file->message_type(90);
  static const int MsgMissionParameters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameters, elem_),
  };
  MsgMissionParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgMissionParameters_descriptor_,
      MsgMissionParameters::default_instance_,
      MsgMissionParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgMissionParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgMissionParameters));
  MsgUnitOrder_descriptor_ = file->message_type(91);
  static const int MsgUnitOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, tasker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, symbollocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, start_time_),
  };
  MsgUnitOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgUnitOrder_descriptor_,
      MsgUnitOrder::default_instance_,
      MsgUnitOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgUnitOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgUnitOrder));
  MsgAutomatOrder_descriptor_ = file->message_type(92);
  static const int MsgAutomatOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, tasker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, symbollocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, start_time_),
  };
  MsgAutomatOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAutomatOrder_descriptor_,
      MsgAutomatOrder::default_instance_,
      MsgAutomatOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAutomatOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAutomatOrder));
  MsgCrowdOrder_descriptor_ = file->message_type(93);
  static const int MsgCrowdOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, tasker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, symbollocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, start_time_),
  };
  MsgCrowdOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCrowdOrder_descriptor_,
      MsgCrowdOrder::default_instance_,
      MsgCrowdOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCrowdOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCrowdOrder));
  MsgTacticalLine_descriptor_ = file->message_type(94);
  static const int MsgTacticalLine_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine, diffusion_),
  };
  MsgTacticalLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTacticalLine_descriptor_,
      MsgTacticalLine::default_instance_,
      MsgTacticalLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTacticalLine));
  MsgTacticalLine_Diffusion_descriptor_ = MsgTacticalLine_descriptor_->nested_type(0);
  static const int MsgTacticalLine_Diffusion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine_Diffusion, automat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine_Diffusion, formation_),
  };
  MsgTacticalLine_Diffusion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTacticalLine_Diffusion_descriptor_,
      MsgTacticalLine_Diffusion::default_instance_,
      MsgTacticalLine_Diffusion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine_Diffusion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTacticalLine_Diffusion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTacticalLine_Diffusion));
  MsgShape_descriptor_ = file->message_type(95);
  static const int MsgShape_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, pattern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, points_),
  };
  MsgShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgShape_descriptor_,
      MsgShape::default_instance_,
      MsgShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgShape));
  MsgChatTarget_descriptor_ = file->message_type(96);
  static const int MsgChatTarget_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChatTarget, profile_),
  };
  MsgChatTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgChatTarget_descriptor_,
      MsgChatTarget::default_instance_,
      MsgChatTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChatTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgChatTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgChatTarget));
  MsgTextMessage_descriptor_ = file->message_type(97);
  static const int MsgTextMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTextMessage, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTextMessage, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTextMessage, message_),
  };
  MsgTextMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgTextMessage_descriptor_,
      MsgTextMessage::default_instance_,
      MsgTextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTextMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgTextMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgTextMessage));
  ResourceNetwork_descriptor_ = file->message_type(98);
  static const int ResourceNetwork_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, max_stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, production_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, consumption_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, critical_),
  };
  ResourceNetwork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceNetwork_descriptor_,
      ResourceNetwork::default_instance_,
      ResourceNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceNetwork));
  ResourceNetwork_Link_descriptor_ = ResourceNetwork_descriptor_->nested_type(0);
  static const int ResourceNetwork_Link_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, flow_),
  };
  ResourceNetwork_Link_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceNetwork_Link_descriptor_,
      ResourceNetwork_Link::default_instance_,
      ResourceNetwork_Link_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceNetwork_Link, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceNetwork_Link));
  ResourceNetwork_Link_TargetKind_descriptor_ = ResourceNetwork_Link_descriptor_->enum_type(0);
  ObjectAttributeResourceNetwork_descriptor_ = file->message_type(99);
  static const int ObjectAttributeResourceNetwork_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeResourceNetwork, network_),
  };
  ObjectAttributeResourceNetwork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeResourceNetwork_descriptor_,
      ObjectAttributeResourceNetwork::default_instance_,
      ObjectAttributeResourceNetwork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeResourceNetwork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeResourceNetwork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeResourceNetwork));
  ObjectAttributeConstruction_descriptor_ = file->message_type(100);
  static const int ObjectAttributeConstruction_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, dotation_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, percentage_),
  };
  ObjectAttributeConstruction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeConstruction_descriptor_,
      ObjectAttributeConstruction::default_instance_,
      ObjectAttributeConstruction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeConstruction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeConstruction));
  ObjectAttributeMine_descriptor_ = file->message_type(101);
  static const int ObjectAttributeMine_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, dotation_nbr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, percentage_),
  };
  ObjectAttributeMine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeMine_descriptor_,
      ObjectAttributeMine::default_instance_,
      ObjectAttributeMine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeMine));
  ObjectAttributeLogistic_descriptor_ = file->message_type(102);
  static const int ObjectAttributeLogistic_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeLogistic, tc2_),
  };
  ObjectAttributeLogistic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeLogistic_descriptor_,
      ObjectAttributeLogistic::default_instance_,
      ObjectAttributeLogistic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeLogistic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeLogistic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeLogistic));
  ObjectAttributeInteractionHeight_descriptor_ = file->message_type(103);
  static const int ObjectAttributeInteractionHeight_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeInteractionHeight, height_),
  };
  ObjectAttributeInteractionHeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeInteractionHeight_descriptor_,
      ObjectAttributeInteractionHeight::default_instance_,
      ObjectAttributeInteractionHeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeInteractionHeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeInteractionHeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeInteractionHeight));
  ObjectAttributeObstacle_descriptor_ = file->message_type(104);
  static const int ObjectAttributeObstacle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeObstacle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeObstacle, activated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeObstacle, activation_time_),
  };
  ObjectAttributeObstacle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeObstacle_descriptor_,
      ObjectAttributeObstacle::default_instance_,
      ObjectAttributeObstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeObstacle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeObstacle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeObstacle));
  ObjectAttributeActivityTime_descriptor_ = file->message_type(105);
  static const int ObjectAttributeActivityTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeActivityTime, value_),
  };
  ObjectAttributeActivityTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeActivityTime_descriptor_,
      ObjectAttributeActivityTime::default_instance_,
      ObjectAttributeActivityTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeActivityTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeActivityTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeActivityTime));
  ObjectAttributeBypass_descriptor_ = file->message_type(106);
  static const int ObjectAttributeBypass_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeBypass, percentage_),
  };
  ObjectAttributeBypass_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeBypass_descriptor_,
      ObjectAttributeBypass::default_instance_,
      ObjectAttributeBypass_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeBypass, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeBypass, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeBypass));
  ObjectAttributeEffectDelay_descriptor_ = file->message_type(107);
  static const int ObjectAttributeEffectDelay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeEffectDelay, value_),
  };
  ObjectAttributeEffectDelay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeEffectDelay_descriptor_,
      ObjectAttributeEffectDelay::default_instance_,
      ObjectAttributeEffectDelay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeEffectDelay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeEffectDelay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeEffectDelay));
  ObjectAttributeNBC_descriptor_ = file->message_type(108);
  static const int ObjectAttributeNBC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBC, danger_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBC, nbc_agents_),
  };
  ObjectAttributeNBC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeNBC_descriptor_,
      ObjectAttributeNBC::default_instance_,
      ObjectAttributeNBC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeNBC));
  StockResource_descriptor_ = file->message_type(109);
  static const int StockResource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockResource, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockResource, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockResource, maximum_),
  };
  StockResource_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StockResource_descriptor_,
      StockResource::default_instance_,
      StockResource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockResource, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StockResource, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StockResource));
  ObjectAttributeStock_descriptor_ = file->message_type(110);
  static const int ObjectAttributeStock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeStock, resources_),
  };
  ObjectAttributeStock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeStock_descriptor_,
      ObjectAttributeStock::default_instance_,
      ObjectAttributeStock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeStock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeStock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeStock));
  ObjectAttributeCrossingSite_descriptor_ = file->message_type(111);
  static const int ObjectAttributeCrossingSite_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, flow_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, banks_require_fitting_),
  };
  ObjectAttributeCrossingSite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeCrossingSite_descriptor_,
      ObjectAttributeCrossingSite::default_instance_,
      ObjectAttributeCrossingSite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeCrossingSite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeCrossingSite));
  ObjectAttributeSupplyRoute_descriptor_ = file->message_type(112);
  static const int ObjectAttributeSupplyRoute_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, equipped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, max_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, flow_rate_),
  };
  ObjectAttributeSupplyRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeSupplyRoute_descriptor_,
      ObjectAttributeSupplyRoute::default_instance_,
      ObjectAttributeSupplyRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSupplyRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeSupplyRoute));
  MsgLocatedQuantity_descriptor_ = file->message_type(113);
  static const int MsgLocatedQuantity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantity, coordinate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantity, quantity_),
  };
  MsgLocatedQuantity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLocatedQuantity_descriptor_,
      MsgLocatedQuantity::default_instance_,
      MsgLocatedQuantity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLocatedQuantity));
  MsgLocatedQuantityList_descriptor_ = file->message_type(114);
  static const int MsgLocatedQuantityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantityList, elem_),
  };
  MsgLocatedQuantityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLocatedQuantityList_descriptor_,
      MsgLocatedQuantityList::default_instance_,
      MsgLocatedQuantityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLocatedQuantityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLocatedQuantityList));
  ObjectAttributeToxicCloud_descriptor_ = file->message_type(115);
  static const int ObjectAttributeToxicCloud_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeToxicCloud, quantities_),
  };
  ObjectAttributeToxicCloud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeToxicCloud_descriptor_,
      ObjectAttributeToxicCloud::default_instance_,
      ObjectAttributeToxicCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeToxicCloud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeToxicCloud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeToxicCloud));
  ObjectAttributeFire_descriptor_ = file->message_type(116);
  static const int ObjectAttributeFire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeFire, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeFire, heat_),
  };
  ObjectAttributeFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeFire_descriptor_,
      ObjectAttributeFire::default_instance_,
      ObjectAttributeFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeFire));
  ObjectAttributeMedicalTreatment_descriptor_ = file->message_type(117);
  static const int ObjectAttributeMedicalTreatment_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, beds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, available_beds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, doctors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, available_doctors_),
  };
  ObjectAttributeMedicalTreatment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeMedicalTreatment_descriptor_,
      ObjectAttributeMedicalTreatment::default_instance_,
      ObjectAttributeMedicalTreatment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeMedicalTreatment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeMedicalTreatment));
  ObjectAttributeNBCType_descriptor_ = file->message_type(118);
  static const int ObjectAttributeNBCType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBCType, agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBCType, concentration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBCType, source_life_duration_),
  };
  ObjectAttributeNBCType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeNBCType_descriptor_,
      ObjectAttributeNBCType::default_instance_,
      ObjectAttributeNBCType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBCType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeNBCType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeNBCType));
  ObjectAttributeSealOff_descriptor_ = file->message_type(119);
  static const int ObjectAttributeSealOff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSealOff, level_),
  };
  ObjectAttributeSealOff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributeSealOff_descriptor_,
      ObjectAttributeSealOff::default_instance_,
      ObjectAttributeSealOff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSealOff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributeSealOff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributeSealOff));
  ObjectAttributes_descriptor_ = file->message_type(120);
  static const int ObjectAttributes_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, construction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, mine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, activity_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, bypass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, logistic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, nbc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, crossing_site_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, supply_route_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, toxic_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, fire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, medical_treatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, interaction_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, stock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, nbc_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, effect_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, seal_off_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, resource_networks_),
  };
  ObjectAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectAttributes_descriptor_,
      ObjectAttributes::default_instance_,
      ObjectAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectAttributes));
  MsgNote_descriptor_ = file->message_type(121);
  static const int MsgNote_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, parent_),
  };
  MsgNote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgNote_descriptor_,
      MsgNote::default_instance_,
      MsgNote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgNote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgNote));
  MsgWeatherAttributes_descriptor_ = file->message_type(122);
  static const int MsgWeatherAttributes_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, wind_direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, cloud_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, cloud_ceiling_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, cloud_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, precipitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, lighting_),
  };
  MsgWeatherAttributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgWeatherAttributes_descriptor_,
      MsgWeatherAttributes::default_instance_,
      MsgWeatherAttributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgWeatherAttributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgWeatherAttributes));
  EnumDotationFamily_descriptor_ = file->enum_type(0);
  EnumAmmunitionFamily_descriptor_ = file->enum_type(1);
  EnumPrecipitationType_descriptor_ = file->enum_type(2);
  EnumFireEffectType_descriptor_ = file->enum_type(3);
  UnitFireType_descriptor_ = file->enum_type(4);
  EnumLightingType_descriptor_ = file->enum_type(5);
  EnumLogMaintenanceHandlingStatus_descriptor_ = file->enum_type(6);
  EnumLogMedicalHandlingStatus_descriptor_ = file->enum_type(7);
  EnumUnitVisibility_descriptor_ = file->enum_type(8);
  EnumSimulationState_descriptor_ = file->enum_type(9);
  EnumDispatcherState_descriptor_ = file->enum_type(10);
  EnumMeetingEngagementStatus_descriptor_ = file->enum_type(11);
  EnumOperationalStatus_descriptor_ = file->enum_type(12);
  EnumAutomatMode_descriptor_ = file->enum_type(13);
  EnumCrowdAttitude_descriptor_ = file->enum_type(14);
  EnumUnitTiredness_descriptor_ = file->enum_type(15);
  EnumUnitMorale_descriptor_ = file->enum_type(16);
  EnumUnitExperience_descriptor_ = file->enum_type(17);
  EnumHumanRank_descriptor_ = file->enum_type(18);
  EnumDiplomacy_descriptor_ = file->enum_type(19);
  EnumHumanWound_descriptor_ = file->enum_type(20);
  EnumLogMaintenanceRegimeTravail_descriptor_ = file->enum_type(21);
  EnumNatureLevel_descriptor_ = file->enum_type(22);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Common_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomatId_descriptor_, &AutomatId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomatIdList_descriptor_, &AutomatIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationId_descriptor_, &FormationId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationIdList_descriptor_, &FormationIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KnowledgeGroupId_descriptor_, &KnowledgeGroupId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectId_descriptor_, &ObjectId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectKnowledgeId_descriptor_, &ObjectKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectKnowledgeIdList_descriptor_, &ObjectKnowledgeIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartyId_descriptor_, &PartyId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartyIdList_descriptor_, &PartyIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdId_descriptor_, &CrowdId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdIdList_descriptor_, &CrowdIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdKnowledgeId_descriptor_, &CrowdKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdConcentrationId_descriptor_, &CrowdConcentrationId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdConcentrationKnowledgeId_descriptor_, &CrowdConcentrationKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdFlowId_descriptor_, &CrowdFlowId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdFlowKnowledgeId_descriptor_, &CrowdFlowKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitId_descriptor_, &UnitId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitIdList_descriptor_, &UnitIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitKnowledgeId_descriptor_, &UnitKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitKnowledgeIdList_descriptor_, &UnitKnowledgeIdList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UrbanObjectId_descriptor_, &UrbanObjectId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UrbanObjectKnowledgeId_descriptor_, &UrbanObjectKnowledgeId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tasker_descriptor_, &Tasker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParentEntity_descriptor_, &ParentEntity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DrawingId_descriptor_, &DrawingId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntelligenceId_descriptor_, &IntelligenceId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TacticalLineId_descriptor_, &TacticalLineId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkerId_descriptor_, &MarkerId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireId_descriptor_, &FireId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FireEffectId_descriptor_, &FireEffectId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportId_descriptor_, &ReportId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeatherId_descriptor_, &WeatherId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaintenanceRequestId_descriptor_, &MaintenanceRequestId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MedicalRequestId_descriptor_, &MedicalRequestId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SupplyRequestId_descriptor_, &SupplyRequestId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AutomatType_descriptor_, &AutomatType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BreakdownType_descriptor_, &BreakdownType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentType_descriptor_, &EquipmentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FragOrderType_descriptor_, &FragOrderType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionType_descriptor_, &MissionType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NBCAgentType_descriptor_, &NBCAgentType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectType_descriptor_, &ObjectType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrowdType_descriptor_, &CrowdType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportType_descriptor_, &ReportType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceType_descriptor_, &ResourceType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitType_descriptor_, &UnitType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceNetworkType_descriptor_, &ResourceNetworkType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgHeading_descriptor_, &MsgHeading::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDateTime_descriptor_, &MsgDateTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDotationStock_descriptor_, &MsgDotationStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfDotationStock_descriptor_, &SeqOfDotationStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDotationQuota_descriptor_, &MsgDotationQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeqOfDotationQuota_descriptor_, &SeqOfDotationQuota::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeKnowledgeGroup_descriptor_, &MsgAutomatChangeKnowledgeGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeLogisticLinks_descriptor_, &MsgAutomatChangeLogisticLinks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeSuperior_oid_superior_descriptor_, &MsgAutomatChangeSuperior_oid_superior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatChangeSuperior_descriptor_, &MsgAutomatChangeSuperior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitChangeSuperior_descriptor_, &MsgUnitChangeSuperior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlStop_descriptor_, &MsgControlStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlPause_descriptor_, &MsgControlPause::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlResume_descriptor_, &MsgControlResume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlChangeTimeFactor_descriptor_, &MsgControlChangeTimeFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgExercise_descriptor_, &MsgExercise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNetworkAddress_descriptor_, &MsgNetworkAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCoordLatLong_descriptor_, &MsgCoordLatLong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCoordLatLongList_descriptor_, &MsgCoordLatLongList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLocation_descriptor_, &MsgLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLine_descriptor_, &MsgLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLocationList_descriptor_, &MsgLocationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPath_descriptor_, &MsgPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPathList_descriptor_, &MsgPathList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPoint_descriptor_, &MsgPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPointList_descriptor_, &MsgPointList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPolygon_descriptor_, &MsgPolygon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPolygonList_descriptor_, &MsgPolygonList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMedicalPriorities_descriptor_, &MsgLogMedicalPriorities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleType_descriptor_, &ObstacleType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlannedWork_descriptor_, &MsgPlannedWork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlannedWorkList_descriptor_, &MsgPlannedWorkList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLogMaintenancePriorities_descriptor_, &MsgLogMaintenancePriorities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionObjective_descriptor_, &MsgMissionObjective::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionObjectiveList_descriptor_, &MsgMissionObjectiveList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLimaOrder_descriptor_, &MsgLimaOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLimasOrder_descriptor_, &MsgLimasOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgIntelligence_descriptor_, &MsgIntelligence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgIntelligenceList_descriptor_, &MsgIntelligenceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChangeDiplomacy_descriptor_, &MsgChangeDiplomacy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAtlasNature_descriptor_, &MsgAtlasNature::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionParameter_descriptor_, &MsgMissionParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionParameter_Value_descriptor_, &MsgMissionParameter_Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgMissionParameters_descriptor_, &MsgMissionParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgUnitOrder_descriptor_, &MsgUnitOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAutomatOrder_descriptor_, &MsgAutomatOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCrowdOrder_descriptor_, &MsgCrowdOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTacticalLine_descriptor_, &MsgTacticalLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTacticalLine_Diffusion_descriptor_, &MsgTacticalLine_Diffusion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgShape_descriptor_, &MsgShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgChatTarget_descriptor_, &MsgChatTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgTextMessage_descriptor_, &MsgTextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceNetwork_descriptor_, &ResourceNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceNetwork_Link_descriptor_, &ResourceNetwork_Link::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeResourceNetwork_descriptor_, &ObjectAttributeResourceNetwork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeConstruction_descriptor_, &ObjectAttributeConstruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeMine_descriptor_, &ObjectAttributeMine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeLogistic_descriptor_, &ObjectAttributeLogistic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeInteractionHeight_descriptor_, &ObjectAttributeInteractionHeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeObstacle_descriptor_, &ObjectAttributeObstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeActivityTime_descriptor_, &ObjectAttributeActivityTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeBypass_descriptor_, &ObjectAttributeBypass::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeEffectDelay_descriptor_, &ObjectAttributeEffectDelay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeNBC_descriptor_, &ObjectAttributeNBC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StockResource_descriptor_, &StockResource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeStock_descriptor_, &ObjectAttributeStock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeCrossingSite_descriptor_, &ObjectAttributeCrossingSite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeSupplyRoute_descriptor_, &ObjectAttributeSupplyRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLocatedQuantity_descriptor_, &MsgLocatedQuantity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLocatedQuantityList_descriptor_, &MsgLocatedQuantityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeToxicCloud_descriptor_, &ObjectAttributeToxicCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeFire_descriptor_, &ObjectAttributeFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeMedicalTreatment_descriptor_, &ObjectAttributeMedicalTreatment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeNBCType_descriptor_, &ObjectAttributeNBCType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributeSealOff_descriptor_, &ObjectAttributeSealOff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectAttributes_descriptor_, &ObjectAttributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgNote_descriptor_, &MsgNote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgWeatherAttributes_descriptor_, &MsgWeatherAttributes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Common_2eproto() {
  delete AutomatId::default_instance_;
  delete AutomatId_reflection_;
  delete AutomatIdList::default_instance_;
  delete AutomatIdList_reflection_;
  delete FormationId::default_instance_;
  delete FormationId_reflection_;
  delete FormationIdList::default_instance_;
  delete FormationIdList_reflection_;
  delete KnowledgeGroupId::default_instance_;
  delete KnowledgeGroupId_reflection_;
  delete ObjectId::default_instance_;
  delete ObjectId_reflection_;
  delete ObjectKnowledgeId::default_instance_;
  delete ObjectKnowledgeId_reflection_;
  delete ObjectKnowledgeIdList::default_instance_;
  delete ObjectKnowledgeIdList_reflection_;
  delete PartyId::default_instance_;
  delete PartyId_reflection_;
  delete PartyIdList::default_instance_;
  delete PartyIdList_reflection_;
  delete CrowdId::default_instance_;
  delete CrowdId_reflection_;
  delete CrowdIdList::default_instance_;
  delete CrowdIdList_reflection_;
  delete CrowdKnowledgeId::default_instance_;
  delete CrowdKnowledgeId_reflection_;
  delete CrowdConcentrationId::default_instance_;
  delete CrowdConcentrationId_reflection_;
  delete CrowdConcentrationKnowledgeId::default_instance_;
  delete CrowdConcentrationKnowledgeId_reflection_;
  delete CrowdFlowId::default_instance_;
  delete CrowdFlowId_reflection_;
  delete CrowdFlowKnowledgeId::default_instance_;
  delete CrowdFlowKnowledgeId_reflection_;
  delete UnitId::default_instance_;
  delete UnitId_reflection_;
  delete UnitIdList::default_instance_;
  delete UnitIdList_reflection_;
  delete UnitKnowledgeId::default_instance_;
  delete UnitKnowledgeId_reflection_;
  delete UnitKnowledgeIdList::default_instance_;
  delete UnitKnowledgeIdList_reflection_;
  delete UrbanObjectId::default_instance_;
  delete UrbanObjectId_reflection_;
  delete UrbanObjectKnowledgeId::default_instance_;
  delete UrbanObjectKnowledgeId_reflection_;
  delete Tasker::default_instance_;
  delete Tasker_reflection_;
  delete ParentEntity::default_instance_;
  delete ParentEntity_reflection_;
  delete DrawingId::default_instance_;
  delete DrawingId_reflection_;
  delete IntelligenceId::default_instance_;
  delete IntelligenceId_reflection_;
  delete TacticalLineId::default_instance_;
  delete TacticalLineId_reflection_;
  delete MarkerId::default_instance_;
  delete MarkerId_reflection_;
  delete FireId::default_instance_;
  delete FireId_reflection_;
  delete FireEffectId::default_instance_;
  delete FireEffectId_reflection_;
  delete ReportId::default_instance_;
  delete ReportId_reflection_;
  delete WeatherId::default_instance_;
  delete WeatherId_reflection_;
  delete MaintenanceRequestId::default_instance_;
  delete MaintenanceRequestId_reflection_;
  delete MedicalRequestId::default_instance_;
  delete MedicalRequestId_reflection_;
  delete SupplyRequestId::default_instance_;
  delete SupplyRequestId_reflection_;
  delete AutomatType::default_instance_;
  delete AutomatType_reflection_;
  delete BreakdownType::default_instance_;
  delete BreakdownType_reflection_;
  delete EquipmentType::default_instance_;
  delete EquipmentType_reflection_;
  delete FragOrderType::default_instance_;
  delete FragOrderType_reflection_;
  delete MissionType::default_instance_;
  delete MissionType_reflection_;
  delete NBCAgentType::default_instance_;
  delete NBCAgentType_reflection_;
  delete ObjectType::default_instance_;
  delete ObjectType_reflection_;
  delete CrowdType::default_instance_;
  delete CrowdType_reflection_;
  delete ReportType::default_instance_;
  delete ReportType_reflection_;
  delete ResourceType::default_instance_;
  delete ResourceType_reflection_;
  delete UnitType::default_instance_;
  delete UnitType_reflection_;
  delete ResourceNetworkType::default_instance_;
  delete ResourceNetworkType_reflection_;
  delete MsgHeading::default_instance_;
  delete MsgHeading_reflection_;
  delete MsgDateTime::default_instance_;
  delete MsgDateTime_reflection_;
  delete MsgDotationStock::default_instance_;
  delete MsgDotationStock_reflection_;
  delete SeqOfDotationStock::default_instance_;
  delete SeqOfDotationStock_reflection_;
  delete MsgDotationQuota::default_instance_;
  delete MsgDotationQuota_reflection_;
  delete SeqOfDotationQuota::default_instance_;
  delete SeqOfDotationQuota_reflection_;
  delete MsgAutomatChangeKnowledgeGroup::default_instance_;
  delete MsgAutomatChangeKnowledgeGroup_reflection_;
  delete MsgAutomatChangeLogisticLinks::default_instance_;
  delete MsgAutomatChangeLogisticLinks_reflection_;
  delete MsgAutomatChangeSuperior_oid_superior::default_instance_;
  delete MsgAutomatChangeSuperior_oid_superior_reflection_;
  delete MsgAutomatChangeSuperior::default_instance_;
  delete MsgAutomatChangeSuperior_reflection_;
  delete MsgUnitChangeSuperior::default_instance_;
  delete MsgUnitChangeSuperior_reflection_;
  delete MsgControlStop::default_instance_;
  delete MsgControlStop_reflection_;
  delete MsgControlPause::default_instance_;
  delete MsgControlPause_reflection_;
  delete MsgControlResume::default_instance_;
  delete MsgControlResume_reflection_;
  delete MsgControlChangeTimeFactor::default_instance_;
  delete MsgControlChangeTimeFactor_reflection_;
  delete MsgExercise::default_instance_;
  delete MsgExercise_reflection_;
  delete MsgNetworkAddress::default_instance_;
  delete MsgNetworkAddress_reflection_;
  delete MsgCoordLatLong::default_instance_;
  delete MsgCoordLatLong_reflection_;
  delete MsgCoordLatLongList::default_instance_;
  delete MsgCoordLatLongList_reflection_;
  delete MsgLocation::default_instance_;
  delete MsgLocation_reflection_;
  delete MsgLine::default_instance_;
  delete MsgLine_reflection_;
  delete MsgLocationList::default_instance_;
  delete MsgLocationList_reflection_;
  delete MsgPath::default_instance_;
  delete MsgPath_reflection_;
  delete MsgPathList::default_instance_;
  delete MsgPathList_reflection_;
  delete MsgPoint::default_instance_;
  delete MsgPoint_reflection_;
  delete MsgPointList::default_instance_;
  delete MsgPointList_reflection_;
  delete MsgPolygon::default_instance_;
  delete MsgPolygon_reflection_;
  delete MsgPolygonList::default_instance_;
  delete MsgPolygonList_reflection_;
  delete MsgLogMedicalPriorities::default_instance_;
  delete MsgLogMedicalPriorities_reflection_;
  delete ObstacleType::default_instance_;
  delete ObstacleType_reflection_;
  delete MsgPlannedWork::default_instance_;
  delete MsgPlannedWork_reflection_;
  delete MsgPlannedWorkList::default_instance_;
  delete MsgPlannedWorkList_reflection_;
  delete MsgLogMaintenancePriorities::default_instance_;
  delete MsgLogMaintenancePriorities_reflection_;
  delete MsgMissionObjective::default_instance_;
  delete MsgMissionObjective_reflection_;
  delete MsgMissionObjectiveList::default_instance_;
  delete MsgMissionObjectiveList_reflection_;
  delete MsgLimaOrder::default_instance_;
  delete MsgLimaOrder_reflection_;
  delete MsgLimasOrder::default_instance_;
  delete MsgLimasOrder_reflection_;
  delete MsgIntelligence::default_instance_;
  delete MsgIntelligence_reflection_;
  delete MsgIntelligenceList::default_instance_;
  delete MsgIntelligenceList_reflection_;
  delete MsgChangeDiplomacy::default_instance_;
  delete MsgChangeDiplomacy_reflection_;
  delete MsgAtlasNature::default_instance_;
  delete MsgAtlasNature_reflection_;
  delete MsgMissionParameter::default_instance_;
  delete MsgMissionParameter_reflection_;
  delete MsgMissionParameter_Value::default_instance_;
  delete MsgMissionParameter_Value_reflection_;
  delete MsgMissionParameters::default_instance_;
  delete MsgMissionParameters_reflection_;
  delete MsgUnitOrder::default_instance_;
  delete MsgUnitOrder_reflection_;
  delete MsgAutomatOrder::default_instance_;
  delete MsgAutomatOrder_reflection_;
  delete MsgCrowdOrder::default_instance_;
  delete MsgCrowdOrder_reflection_;
  delete MsgTacticalLine::default_instance_;
  delete MsgTacticalLine_reflection_;
  delete MsgTacticalLine_Diffusion::default_instance_;
  delete MsgTacticalLine_Diffusion_reflection_;
  delete MsgShape::default_instance_;
  delete MsgShape_reflection_;
  delete MsgChatTarget::default_instance_;
  delete MsgChatTarget_reflection_;
  delete MsgTextMessage::default_instance_;
  delete MsgTextMessage_reflection_;
  delete ResourceNetwork::default_instance_;
  delete ResourceNetwork_reflection_;
  delete ResourceNetwork_Link::default_instance_;
  delete ResourceNetwork_Link_reflection_;
  delete ObjectAttributeResourceNetwork::default_instance_;
  delete ObjectAttributeResourceNetwork_reflection_;
  delete ObjectAttributeConstruction::default_instance_;
  delete ObjectAttributeConstruction_reflection_;
  delete ObjectAttributeMine::default_instance_;
  delete ObjectAttributeMine_reflection_;
  delete ObjectAttributeLogistic::default_instance_;
  delete ObjectAttributeLogistic_reflection_;
  delete ObjectAttributeInteractionHeight::default_instance_;
  delete ObjectAttributeInteractionHeight_reflection_;
  delete ObjectAttributeObstacle::default_instance_;
  delete ObjectAttributeObstacle_reflection_;
  delete ObjectAttributeActivityTime::default_instance_;
  delete ObjectAttributeActivityTime_reflection_;
  delete ObjectAttributeBypass::default_instance_;
  delete ObjectAttributeBypass_reflection_;
  delete ObjectAttributeEffectDelay::default_instance_;
  delete ObjectAttributeEffectDelay_reflection_;
  delete ObjectAttributeNBC::default_instance_;
  delete ObjectAttributeNBC_reflection_;
  delete StockResource::default_instance_;
  delete StockResource_reflection_;
  delete ObjectAttributeStock::default_instance_;
  delete ObjectAttributeStock_reflection_;
  delete ObjectAttributeCrossingSite::default_instance_;
  delete ObjectAttributeCrossingSite_reflection_;
  delete ObjectAttributeSupplyRoute::default_instance_;
  delete ObjectAttributeSupplyRoute_reflection_;
  delete MsgLocatedQuantity::default_instance_;
  delete MsgLocatedQuantity_reflection_;
  delete MsgLocatedQuantityList::default_instance_;
  delete MsgLocatedQuantityList_reflection_;
  delete ObjectAttributeToxicCloud::default_instance_;
  delete ObjectAttributeToxicCloud_reflection_;
  delete ObjectAttributeFire::default_instance_;
  delete ObjectAttributeFire_reflection_;
  delete ObjectAttributeMedicalTreatment::default_instance_;
  delete ObjectAttributeMedicalTreatment_reflection_;
  delete ObjectAttributeNBCType::default_instance_;
  delete ObjectAttributeNBCType_reflection_;
  delete ObjectAttributeSealOff::default_instance_;
  delete ObjectAttributeSealOff_reflection_;
  delete ObjectAttributes::default_instance_;
  delete ObjectAttributes_reflection_;
  delete MsgNote::default_instance_;
  delete MsgNote_reflection_;
  delete MsgWeatherAttributes::default_instance_;
  delete MsgWeatherAttributes_reflection_;
}

void protobuf_AddDesc_Common_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Common.proto\022\006Common\"\027\n\tAutomatId\022\n\n\002i"
    "d\030\001 \002(\r\"0\n\rAutomatIdList\022\037\n\004elem\030\001 \003(\0132\021"
    ".Common.AutomatId\"\031\n\013FormationId\022\n\n\002id\030\001"
    " \002(\r\"4\n\017FormationIdList\022!\n\004elem\030\001 \003(\0132\023."
    "Common.FormationId\"\036\n\020KnowledgeGroupId\022\n"
    "\n\002id\030\001 \002(\r\"\026\n\010ObjectId\022\n\n\002id\030\001 \002(\r\"\037\n\021Ob"
    "jectKnowledgeId\022\n\n\002id\030\001 \002(\r\"@\n\025ObjectKno"
    "wledgeIdList\022\'\n\004elem\030\001 \003(\0132\031.Common.Obje"
    "ctKnowledgeId\"\025\n\007PartyId\022\n\n\002id\030\001 \002(\r\",\n\013"
    "PartyIdList\022\035\n\004elem\030\001 \003(\0132\017.Common.Party"
    "Id\"\025\n\007CrowdId\022\n\n\002id\030\001 \002(\r\",\n\013CrowdIdList"
    "\022\035\n\004elem\030\001 \003(\0132\017.Common.CrowdId\"\036\n\020Crowd"
    "KnowledgeId\022\n\n\002id\030\001 \002(\r\"\"\n\024CrowdConcentr"
    "ationId\022\n\n\002id\030\001 \002(\r\"+\n\035CrowdConcentratio"
    "nKnowledgeId\022\n\n\002id\030\001 \002(\r\"\031\n\013CrowdFlowId\022"
    "\n\n\002id\030\001 \002(\r\"\"\n\024CrowdFlowKnowledgeId\022\n\n\002i"
    "d\030\001 \002(\r\"\024\n\006UnitId\022\n\n\002id\030\001 \002(\r\"*\n\nUnitIdL"
    "ist\022\034\n\004elem\030\001 \003(\0132\016.Common.UnitId\"\035\n\017Uni"
    "tKnowledgeId\022\n\n\002id\030\001 \002(\r\"<\n\023UnitKnowledg"
    "eIdList\022%\n\004elem\030\001 \003(\0132\027.Common.UnitKnowl"
    "edgeId\"\033\n\rUrbanObjectId\022\n\n\002id\030\001 \002(\r\"$\n\026U"
    "rbanObjectKnowledgeId\022\n\n\002id\030\001 \002(\r\"\222\001\n\006Ta"
    "sker\022\"\n\007automat\030\001 \001(\0132\021.Common.AutomatId"
    "\022&\n\tformation\030\002 \001(\0132\023.Common.FormationId"
    "\022\036\n\005crowd\030\003 \001(\0132\017.Common.CrowdId\022\034\n\004unit"
    "\030\004 \001(\0132\016.Common.UnitId\"Z\n\014ParentEntity\022\""
    "\n\007automat\030\001 \001(\0132\021.Common.AutomatId\022&\n\tfo"
    "rmation\030\002 \001(\0132\023.Common.FormationId\"\027\n\tDr"
    "awingId\022\n\n\002id\030\001 \002(\r\"\034\n\016IntelligenceId\022\n\n"
    "\002id\030\001 \002(\r\"\034\n\016TacticalLineId\022\n\n\002id\030\001 \002(\r\""
    "\026\n\010MarkerId\022\n\n\002id\030\001 \002(\r\"\024\n\006FireId\022\n\n\002id\030"
    "\001 \002(\r\"\032\n\014FireEffectId\022\n\n\002id\030\001 \002(\r\"\026\n\010Rep"
    "ortId\022\n\n\002id\030\001 \002(\r\"\027\n\tWeatherId\022\n\n\002id\030\001 \002"
    "(\r\"\"\n\024MaintenanceRequestId\022\n\n\002id\030\001 \002(\r\"\036"
    "\n\020MedicalRequestId\022\n\n\002id\030\001 \002(\r\"\035\n\017Supply"
    "RequestId\022\n\n\002id\030\001 \002(\r\"\031\n\013AutomatType\022\n\n\002"
    "id\030\001 \002(\r\"\033\n\rBreakdownType\022\n\n\002id\030\001 \002(\r\"\033\n"
    "\rEquipmentType\022\n\n\002id\030\001 \002(\r\"\033\n\rFragOrderT"
    "ype\022\n\n\002id\030\001 \002(\r\"\031\n\013MissionType\022\n\n\002id\030\001 \002"
    "(\r\"\032\n\014NBCAgentType\022\n\n\002id\030\001 \002(\r\"\030\n\nObject"
    "Type\022\n\n\002id\030\001 \002(\t\"\027\n\tCrowdType\022\n\n\002id\030\001 \002("
    "\r\"\030\n\nReportType\022\n\n\002id\030\001 \002(\r\"\032\n\014ResourceT"
    "ype\022\n\n\002id\030\001 \002(\r\"\026\n\010UnitType\022\n\n\002id\030\001 \002(\r\""
    "#\n\023ResourceNetworkType\022\014\n\004name\030\001 \002(\t\"\035\n\n"
    "MsgHeading\022\017\n\007heading\030\001 \002(\005\"\033\n\013MsgDateTi"
    "me\022\014\n\004data\030\001 \002(\t\"[\n\020MsgDotationStock\022*\n\014"
    "ressource_id\030\001 \002(\0132\024.Common.ResourceType"
    "\022\033\n\023quantite_disponible\030\002 \002(\005\"<\n\022SeqOfDo"
    "tationStock\022&\n\004elem\030\001 \003(\0132\030.Common.MsgDo"
    "tationStock\"X\n\020MsgDotationQuota\022*\n\014resso"
    "urce_id\030\001 \002(\0132\024.Common.ResourceType\022\030\n\020q"
    "uota_disponible\030\002 \002(\005\"<\n\022SeqOfDotationQu"
    "ota\022&\n\004elem\030\001 \003(\0132\030.Common.MsgDotationQu"
    "ota\"\227\001\n\036MsgAutomatChangeKnowledgeGroup\022\""
    "\n\007automat\030\001 \002(\0132\021.Common.AutomatId\022\036\n\005pa"
    "rty\030\002 \002(\0132\017.Common.PartyId\0221\n\017knowledge_"
    "group\030\003 \002(\0132\030.Common.KnowledgeGroupId\"\321\001"
    "\n\035MsgAutomatChangeLogisticLinks\022\"\n\007autom"
    "at\030\001 \002(\0132\021.Common.AutomatId\022\036\n\003tc2\030\002 \001(\013"
    "2\021.Common.AutomatId\022&\n\013maintenance\030\003 \001(\013"
    "2\021.Common.AutomatId\022!\n\006health\030\004 \001(\0132\021.Co"
    "mmon.AutomatId\022!\n\006supply\030\005 \001(\0132\021.Common."
    "AutomatId\"s\n%MsgAutomatChangeSuperior_oi"
    "d_superior\022&\n\tformation\030\001 \001(\0132\023.Common.F"
    "ormationId\022\"\n\007automat\030\002 \001(\0132\021.Common.Aut"
    "omatId\"\177\n\030MsgAutomatChangeSuperior\022\"\n\007au"
    "tomat\030\001 \002(\0132\021.Common.AutomatId\022?\n\010superi"
    "or\030\002 \002(\0132-.Common.MsgAutomatChangeSuperi"
    "or_oid_superior\"X\n\025MsgUnitChangeSuperior"
    "\022\034\n\004unit\030\001 \002(\0132\016.Common.UnitId\022!\n\006parent"
    "\030\002 \002(\0132\021.Common.AutomatId\"\020\n\016MsgControlS"
    "top\"\021\n\017MsgControlPause\"\022\n\020MsgControlResu"
    "me\"1\n\032MsgControlChangeTimeFactor\022\023\n\013time"
    "_factor\030\001 \002(\005\",\n\013MsgExercise\022\014\n\004name\030\001 \002"
    "(\t\022\017\n\007running\030\002 \001(\010\"3\n\021MsgNetworkAddress"
    "\022\n\n\002ip\030\001 \002(\t\022\022\n\004port\030\002 \002(\005:\0048080\"6\n\017MsgC"
    "oordLatLong\022\020\n\010latitude\030\001 \002(\001\022\021\n\tlongitu"
    "de\030\002 \002(\001\"<\n\023MsgCoordLatLongList\022%\n\004elem\030"
    "\002 \003(\0132\027.Common.MsgCoordLatLong\"\327\001\n\013MsgLo"
    "cation\022*\n\004type\030\001 \002(\0162\034.Common.MsgLocatio"
    "n.Geometry\0220\n\013coordinates\030\002 \001(\0132\033.Common"
    ".MsgCoordLatLongList\"j\n\010Geometry\022\n\n\006circ"
    "le\020\000\022\013\n\007ellipse\020\001\022\010\n\004line\020\002\022\r\n\trectangle"
    "\020\003\022\013\n\007polygon\020\004\022\t\n\005point\020\005\022\n\n\006sector\020\006\022\010"
    "\n\004none\020\007\"0\n\007MsgLine\022%\n\010location\030\001 \002(\0132\023."
    "Common.MsgLocation\"4\n\017MsgLocationList\022!\n"
    "\004elem\030\001 \003(\0132\023.Common.MsgLocation\"0\n\007MsgP"
    "ath\022%\n\010location\030\001 \002(\0132\023.Common.MsgLocati"
    "on\",\n\013MsgPathList\022\035\n\004elem\030\001 \003(\0132\017.Common"
    ".MsgPath\"1\n\010MsgPoint\022%\n\010location\030\001 \002(\0132\023"
    ".Common.MsgLocation\".\n\014MsgPointList\022\036\n\004e"
    "lem\030\001 \003(\0132\020.Common.MsgPoint\"3\n\nMsgPolygo"
    "n\022%\n\010location\030\001 \002(\0132\023.Common.MsgLocation"
    "\"2\n\016MsgPolygonList\022 \n\004elem\030\001 \003(\0132\022.Commo"
    "n.MsgPolygon\"?\n\027MsgLogMedicalPriorities\022"
    "$\n\004elem\030\001 \003(\0162\026.Common.EnumHumanWound\"E\n"
    "\014ObstacleType\"5\n\024DemolitionTargetType\022\017\n"
    "\013preliminary\020\000\022\014\n\010reserved\020\001\"\317\001\n\016MsgPlan"
    "nedWork\022\014\n\004type\030\001 \002(\t\022%\n\010position\030\002 \002(\0132"
    "\023.Common.MsgLocation\022@\n\rtype_obstacle\030\003 "
    "\001(\0162).Common.ObstacleType.DemolitionTarg"
    "etType\022\017\n\007densite\030\004 \001(\002\022\036\n\003tc2\030\005 \001(\0132\021.C"
    "ommon.AutomatId\022\025\n\ractivity_time\030\006 \001(\005\":"
    "\n\022MsgPlannedWorkList\022$\n\004elem\030\001 \003(\0132\026.Com"
    "mon.MsgPlannedWork\"B\n\033MsgLogMaintenanceP"
    "riorities\022#\n\004elem\030\001 \003(\0132\025.Common.Equipme"
    "ntType\"f\n\023MsgMissionObjective\022)\n\014localis"
    "ation\030\001 \002(\0132\023.Common.MsgLocation\022$\n\007hora"
    "ire\030\002 \002(\0132\023.Common.MsgDateTime\"D\n\027MsgMis"
    "sionObjectiveList\022)\n\004elem\030\001 \003(\0132\033.Common"
    ".MsgMissionObjective\"\201\003\n\014MsgLimaOrder\022\035\n"
    "\004lima\030\001 \002(\0132\017.Common.MsgLine\022$\n\007horaire\030"
    "\002 \002(\0132\023.Common.MsgDateTime\0220\n\tfonctions\030"
    "\003 \003(\0162\035.Common.MsgLimaOrder.Function\"\371\001\n"
    "\010Function\022\022\n\016ligne_debouche\020\000\022\035\n\031ligne_c"
    "hangement_attitude\020\001\022\026\n\022ligne_coordinati"
    "on\020\002\022\023\n\017ligne_interdire\020\003\022\022\n\016ligne_objec"
    "tif\020\004\022\024\n\020ligne_coup_arret\020\005\022\021\n\rligne_rec"
    "ueil\020\006\022\027\n\023ligne_debut_mission\020\007\022\025\n\021ligne"
    "_fin_mission\020\010\022 \n\034ligne_identification_a"
    "ccueil\020\t\"3\n\rMsgLimasOrder\022\"\n\004elem\030\001 \003(\0132"
    "\024.Common.MsgLimaOrder\"\346\001\n\017MsgIntelligenc"
    "e\022\014\n\004name\030\001 \002(\t\022\016\n\006nature\030\002 \002(\t\022&\n\005level"
    "\030\003 \002(\0162\027.Common.EnumNatureLevel\022\020\n\010embar"
    "ked\030\004 \002(\010\022)\n\010location\030\005 \002(\0132\027.Common.Msg"
    "CoordLatLong\022(\n\tdiplomacy\030\006 \002(\0162\025.Common"
    ".EnumDiplomacy\022&\n\tformation\030\007 \002(\0132\023.Comm"
    "on.FormationId\"<\n\023MsgIntelligenceList\022%\n"
    "\004elem\030\001 \003(\0132\027.Common.MsgIntelligence\"\201\001\n"
    "\022MsgChangeDiplomacy\022\037\n\006party1\030\001 \002(\0132\017.Co"
    "mmon.PartyId\022\037\n\006party2\030\002 \002(\0132\017.Common.Pa"
    "rtyId\022)\n\ndiplomatie\030\003 \002(\0162\025.Common.EnumD"
    "iplomacy\"\322\001\n\016MsgAtlasNature\022\016\n\006nature\030\001 "
    "\002(\005\"\257\001\n\013AtlasNature\022\n\n\006blinde\020\001\022\007\n\003ass\020\002"
    "\022\006\n\002pc\020\004\022\007\n\003log\020\010\022\013\n\007mortier\020\020\022\022\n\016lance_"
    "roquette\020 \022\014\n\010vehicule\020@\022\025\n\020personnel_a_"
    "pied\020\200\001\022\020\n\013helicoptere\020\200\002\022\r\n\010indefini\020\200\004"
    "\022\010\n\003asa\020\200\010\022\t\n\004none\020\200\020\"\323\016\n\023MsgMissionPara"
    "meter\022\022\n\nnull_value\030\001 \001(\010\0220\n\005value\030\002 \001(\013"
    "2!.Common.MsgMissionParameter.Value\032\365\r\n\005"
    "Value\022\r\n\005aBool\030\001 \001(\010\022\r\n\005aReal\030\002 \001(\002\022\023\n\013e"
    "numeration\030\003 \001(\005\022\035\n\004path\030\004 \001(\0132\017.Common."
    "MsgPath\022%\n\010pathList\030\005 \001(\0132\023.Common.MsgPa"
    "thList\022\037\n\005point\030\006 \001(\0132\020.Common.MsgPoint\022"
    "\'\n\tpointList\030\007 \001(\0132\024.Common.MsgPointList"
    "\022#\n\007polygon\030\010 \001(\0132\022.Common.MsgPolygon\022+\n"
    "\013polygonList\030\t \001(\0132\026.Common.MsgPolygonLi"
    "st\022%\n\010location\030\n \001(\0132\023.Common.MsgLocatio"
    "n\022-\n\014locationList\030\013 \001(\0132\027.Common.MsgLoca"
    "tionList\022#\n\007heading\030\014 \001(\0132\022.Common.MsgHe"
    "ading\022+\n\013atlasNature\030\r \001(\0132\026.Common.MsgA"
    "tlasNature\022\034\n\004unit\030\016 \001(\0132\016.Common.UnitId"
    "\022$\n\010unitList\030\017 \001(\0132\022.Common.UnitIdList\022\""
    "\n\007automat\030\020 \001(\0132\021.Common.AutomatId\022*\n\013au"
    "tomatList\030\021 \001(\0132\025.Common.AutomatIdList\022."
    "\n\runitKnowledge\030\022 \001(\0132\027.Common.UnitKnowl"
    "edgeId\0226\n\021unitKnowledgeList\030\023 \001(\0132\033.Comm"
    "on.UnitKnowledgeIdList\0222\n\017objectKnowledg"
    "e\030\024 \001(\0132\031.Common.ObjectKnowledgeId\022:\n\023ob"
    "jectKnowledgeList\030\025 \001(\0132\035.Common.ObjectK"
    "nowledgeIdList\0220\n\016crowdKnowledge\030\026 \001(\0132\030"
    ".Common.CrowdKnowledgeId\022+\n\013plannedWork\030"
    "\027 \001(\0132\026.Common.MsgPlannedWork\0223\n\017planned"
    "WorkList\030\030 \001(\0132\032.Common.MsgPlannedWorkLi"
    "st\022*\n\014resourceType\030\031 \001(\0132\024.Common.Resour"
    "ceType\022,\n\requipmentType\030\032 \001(\0132\025.Common.E"
    "quipmentType\022#\n\013tirIndirect\030\033 \001(\0132\016.Comm"
    "on.FireId\022%\n\010dateTime\030\034 \001(\0132\023.Common.Msg"
    "DateTime\022E\n\030logMaintenancePriorities\030\035 \001"
    "(\0132#.Common.MsgLogMaintenancePriorities\022"
    "=\n\024logMedicalPriorities\030\036 \001(\0132\037.Common.M"
    "sgLogMedicalPriorities\022\020\n\010aCharStr\030\037 \001(\t"
    "\0225\n\020missionObjective\030  \001(\0132\033.Common.MsgM"
    "issionObjective\022=\n\024missionObjectiveList\030"
    "! \001(\0132\037.Common.MsgMissionObjectiveList\022\035"
    "\n\004line\030\" \001(\0132\017.Common.MsgLine\022)\n\nlimasOr"
    "der\030# \001(\0132\025.Common.MsgLimasOrder\0225\n\020inte"
    "lligenceList\030$ \001(\0132\033.Common.MsgIntellige"
    "nceList\022)\n\nurbanBlock\030% \001(\0132\025.Common.Urb"
    "anObjectId\022\036\n\005party\030& \001(\0132\017.Common.Party"
    "Id\022&\n\tformation\030\' \001(\0132\023.Common.Formation"
    "Id\022\022\n\nidentifier\030( \001(\r\022\020\n\010quantity\030) \001(\005"
    "\0220\n\016knowledgeGroup\030* \001(\0132\030.Common.Knowle"
    "dgeGroupId\022/\n\004list\030+ \003(\0132!.Common.MsgMis"
    "sionParameter.Value\"A\n\024MsgMissionParamet"
    "ers\022)\n\004elem\030\001 \003(\0132\033.Common.MsgMissionPar"
    "ameter\"\350\001\n\014MsgUnitOrder\022\036\n\006tasker\030\001 \002(\0132"
    "\016.Common.UnitId\022!\n\004type\030\002 \002(\0132\023.Common.M"
    "issionType\0220\n\nparameters\030\003 \001(\0132\034.Common."
    "MsgMissionParameters\022\r\n\005label\030\004 \001(\t\022+\n\016s"
    "ymbolLocation\030\005 \001(\0132\023.Common.MsgLocation"
    "\022\'\n\nstart_time\030\006 \001(\0132\023.Common.MsgDateTim"
    "e\"\356\001\n\017MsgAutomatOrder\022!\n\006tasker\030\001 \002(\0132\021."
    "Common.AutomatId\022!\n\004type\030\002 \002(\0132\023.Common."
    "MissionType\0220\n\nparameters\030\003 \001(\0132\034.Common"
    ".MsgMissionParameters\022\r\n\005label\030\004 \001(\t\022+\n\016"
    "symbolLocation\030\005 \001(\0132\023.Common.MsgLocatio"
    "n\022\'\n\nstart_time\030\006 \001(\0132\023.Common.MsgDateTi"
    "me\"\352\001\n\rMsgCrowdOrder\022\037\n\006tasker\030\001 \002(\0132\017.C"
    "ommon.CrowdId\022!\n\004type\030\002 \002(\0132\023.Common.Mis"
    "sionType\0220\n\nparameters\030\003 \001(\0132\034.Common.Ms"
    "gMissionParameters\022\r\n\005label\030\004 \001(\t\022+\n\016sym"
    "bolLocation\030\005 \001(\0132\023.Common.MsgLocation\022\'"
    "\n\nstart_time\030\006 \001(\0132\023.Common.MsgDateTime\""
    "\325\001\n\017MsgTacticalLine\022\014\n\004name\030\001 \002(\t\022%\n\010geo"
    "metry\030\002 \002(\0132\023.Common.MsgLocation\0224\n\tdiff"
    "usion\030\003 \002(\0132!.Common.MsgTacticalLine.Dif"
    "fusion\032W\n\tDiffusion\022\"\n\007automat\030\001 \001(\0132\021.C"
    "ommon.AutomatId\022&\n\tformation\030\002 \001(\0132\023.Com"
    "mon.FormationId\"i\n\010MsgShape\022\020\n\010category\030"
    "\001 \002(\t\022\r\n\005color\030\002 \002(\t\022\017\n\007pattern\030\003 \002(\t\022+\n"
    "\006points\030\004 \002(\0132\033.Common.MsgCoordLatLongLi"
    "st\" \n\rMsgChatTarget\022\017\n\007profile\030\001 \002(\t\"o\n\016"
    "MsgTextMessage\022%\n\006source\030\001 \002(\0132\025.Common."
    "MsgChatTarget\022%\n\006target\030\002 \002(\0132\025.Common.M"
    "sgChatTarget\022\017\n\007message\030\003 \002(\t\"\362\002\n\017Resour"
    "ceNetwork\022-\n\010resource\030\001 \002(\0132\033.Common.Res"
    "ourceNetworkType\022*\n\004link\030\002 \003(\0132\034.Common."
    "ResourceNetwork.Link\022\017\n\007enabled\030\003 \002(\010\022\021\n"
    "\tmax_stock\030\004 \001(\r\022\r\n\005stock\030\005 \001(\r\022\022\n\nprodu"
    "ction\030\006 \001(\r\022\023\n\013consumption\030\007 \001(\r\022\020\n\010crit"
    "ical\030\010 \001(\010\032\225\001\n\004Link\0225\n\004kind\030\001 \002(\0162\'.Comm"
    "on.ResourceNetwork.Link.TargetKind\022\021\n\tta"
    "rget_id\030\002 \002(\r\022\020\n\010capacity\030\003 \002(\005\022\014\n\004flow\030"
    "\004 \002(\r\"#\n\nTargetKind\022\t\n\005urban\020\001\022\n\n\006object"
    "\020\002\"J\n\036ObjectAttributeResourceNetwork\022(\n\007"
    "network\030\001 \003(\0132\027.Common.ResourceNetwork\"\200"
    "\001\n\033ObjectAttributeConstruction\022&\n\010resour"
    "ce\030\001 \001(\0132\024.Common.ResourceType\022\024\n\014dotati"
    "on_nbr\030\002 \001(\005\022\017\n\007density\030\003 \001(\002\022\022\n\npercent"
    "age\030\004 \001(\005\"x\n\023ObjectAttributeMine\022&\n\010reso"
    "urce\030\001 \001(\0132\024.Common.ResourceType\022\024\n\014dota"
    "tion_nbr\030\002 \001(\005\022\017\n\007density\030\003 \001(\002\022\022\n\nperce"
    "ntage\030\004 \001(\005\"9\n\027ObjectAttributeLogistic\022\036"
    "\n\003tc2\030\001 \002(\0132\021.Common.AutomatId\"2\n Object"
    "AttributeInteractionHeight\022\016\n\006height\030\001 \002"
    "(\002\"~\n\027ObjectAttributeObstacle\0227\n\004type\030\001 "
    "\002(\0162).Common.ObstacleType.DemolitionTarg"
    "etType\022\021\n\tactivated\030\002 \001(\010\022\027\n\017activation_"
    "time\030\003 \001(\005\",\n\033ObjectAttributeActivityTim"
    "e\022\r\n\005value\030\001 \002(\005\"+\n\025ObjectAttributeBypas"
    "s\022\022\n\npercentage\030\001 \002(\005\"+\n\032ObjectAttribute"
    "EffectDelay\022\r\n\005value\030\001 \002(\005\"T\n\022ObjectAttr"
    "ibuteNBC\022\024\n\014danger_level\030\001 \002(\005\022(\n\nnbc_ag"
    "ents\030\002 \003(\0132\024.Common.NBCAgentType\"Y\n\rStoc"
    "kResource\022&\n\010resource\030\001 \002(\0132\024.Common.Res"
    "ourceType\022\017\n\007current\030\002 \002(\005\022\017\n\007maximum\030\003 "
    "\001(\005\"@\n\024ObjectAttributeStock\022(\n\tresources"
    "\030\001 \003(\0132\025.Common.StockResource\"m\n\033ObjectA"
    "ttributeCrossingSite\022\r\n\005width\030\001 \002(\005\022\r\n\005d"
    "epth\030\002 \002(\005\022\021\n\tflow_rate\030\003 \002(\005\022\035\n\025banks_r"
    "equire_fitting\030\004 \002(\010\"t\n\032ObjectAttributeS"
    "upplyRoute\022\020\n\010equipped\030\001 \002(\010\022\022\n\nmax_weig"
    "ht\030\002 \002(\005\022\r\n\005width\030\003 \002(\005\022\016\n\006length\030\004 \002(\005\022"
    "\021\n\tflow_rate\030\005 \002(\005\"S\n\022MsgLocatedQuantity"
    "\022+\n\ncoordinate\030\001 \002(\0132\027.Common.MsgCoordLa"
    "tLong\022\020\n\010quantity\030\002 \002(\002\"B\n\026MsgLocatedQua"
    "ntityList\022(\n\004elem\030\001 \003(\0132\032.Common.MsgLoca"
    "tedQuantity\"O\n\031ObjectAttributeToxicCloud"
    "\0222\n\nquantities\030\001 \002(\0132\036.Common.MsgLocated"
    "QuantityList\"5\n\023ObjectAttributeFire\022\020\n\010c"
    "lass_id\030\001 \002(\005\022\014\n\004heat\030\002 \002(\005\"\204\001\n\037ObjectAt"
    "tributeMedicalTreatment\022\017\n\007type_id\030\001 \003(\r"
    "\022\014\n\004beds\030\002 \002(\005\022\026\n\016available_beds\030\003 \002(\005\022\017"
    "\n\007doctors\030\004 \002(\005\022\031\n\021available_doctors\030\005 \002"
    "(\005\"r\n\026ObjectAttributeNBCType\022#\n\005agent\030\001 "
    "\002(\0132\024.Common.NBCAgentType\022\025\n\rconcentrati"
    "on\030\002 \002(\005\022\034\n\024source_life_duration\030\003 \002(\005\"\'"
    "\n\026ObjectAttributeSealOff\022\r\n\005level\030\001 \002(\005\""
    "\344\007\n\020ObjectAttributes\0229\n\014construction\030\001 \001"
    "(\0132#.Common.ObjectAttributeConstruction\022"
    "1\n\010obstacle\030\002 \001(\0132\037.Common.ObjectAttribu"
    "teObstacle\022)\n\004mine\030\003 \001(\0132\033.Common.Object"
    "AttributeMine\022:\n\ractivity_time\030\004 \001(\0132#.C"
    "ommon.ObjectAttributeActivityTime\022-\n\006byp"
    "ass\030\005 \001(\0132\035.Common.ObjectAttributeBypass"
    "\0221\n\010logistic\030\006 \001(\0132\037.Common.ObjectAttrib"
    "uteLogistic\022\'\n\003nbc\030\007 \001(\0132\032.Common.Object"
    "AttributeNBC\022:\n\rcrossing_site\030\010 \001(\0132#.Co"
    "mmon.ObjectAttributeCrossingSite\0228\n\014supp"
    "ly_route\030\t \001(\0132\".Common.ObjectAttributeS"
    "upplyRoute\0226\n\013toxic_cloud\030\n \001(\0132!.Common"
    ".ObjectAttributeToxicCloud\022)\n\004fire\030\013 \001(\013"
    "2\033.Common.ObjectAttributeFire\022B\n\021medical"
    "_treatment\030\014 \001(\0132\'.Common.ObjectAttribut"
    "eMedicalTreatment\022D\n\022interaction_height\030"
    "\r \001(\0132(.Common.ObjectAttributeInteractio"
    "nHeight\022+\n\005stock\030\016 \001(\0132\034.Common.ObjectAt"
    "tributeStock\0221\n\tnbc_agent\030\017 \001(\0132\036.Common"
    ".ObjectAttributeNBCType\0228\n\014effect_delay\030"
    "\020 \001(\0132\".Common.ObjectAttributeEffectDela"
    "y\0220\n\010seal_off\030\021 \001(\0132\036.Common.ObjectAttri"
    "buteSealOff\022A\n\021resource_networks\030\022 \001(\0132&"
    ".Common.ObjectAttributeResourceNetwork\"L"
    "\n\007MsgNote\022\014\n\004name\030\001 \002(\t\022\016\n\006number\030\002 \002(\t\022"
    "\023\n\013description\030\003 \002(\t\022\016\n\006parent\030\004 \002(\r\"\220\002\n"
    "\024MsgWeatherAttributes\022\023\n\013temperature\030\001 \002"
    "(\005\022\022\n\nwind_speed\030\002 \002(\005\022*\n\016wind_direction"
    "\030\003 \002(\0132\022.Common.MsgHeading\022\023\n\013cloud_floo"
    "r\030\004 \002(\005\022\025\n\rcloud_ceiling\030\005 \002(\005\022\025\n\rcloud_"
    "density\030\006 \002(\005\0224\n\rprecipitation\030\007 \002(\0162\035.C"
    "ommon.EnumPrecipitationType\022*\n\010lighting\030"
    "\010 \002(\0162\030.Common.EnumLightingType*m\n\022EnumD"
    "otationFamily\022\014\n\010munition\020\000\022\r\n\tcarburant"
    "\020\001\022\014\n\010explosif\020\002\022\010\n\004mine\020\003\022\013\n\007barbele\020\004\022"
    "\t\n\005piece\020\005\022\n\n\006ration\020\006*Q\n\024EnumAmmunition"
    "Family\022\010\n\004obus\020\000\022\017\n\013missile_sol\020\001\022\017\n\013mis"
    "sile_air\020\002\022\r\n\tmitraille\020\003*w\n\025EnumPrecipi"
    "tationType\022\030\n\024pas_de_precipitation\020\000\022\021\n\r"
    "tempete_sable\020\001\022\016\n\nbrouillard\020\002\022\013\n\007crach"
    "in\020\003\022\t\n\005pluie\020\004\022\t\n\005neige\020\005**\n\022EnumFireEf"
    "fectType\022\t\n\005smoke\020\000\022\t\n\005light\020\001*(\n\014UnitFi"
    "reType\022\n\n\006direct\020\000\022\014\n\010indirect\020\001*\245\002\n\020Enu"
    "mLightingType\022\023\n\017jour_sans_nuage\020\000\022\024\n\020jo"
    "ur_peu_nuageux\020\001\022\034\n\030jour_moyennement_nua"
    "geux\020\002\022\026\n\022jour_assez_nuageux\020\003\022\025\n\021jour_t"
    "res_nuageux\020\004\022\024\n\020nuit_pleine_lune\020\005\022\034\n\030n"
    "uit_trois_quart_de_lune\020\006\022\022\n\016nuit_demi_l"
    "une\020\007\022\026\n\022nuit_quart_de_lune\020\010\022\026\n\022nuit_no"
    "uvelle_lune\020\t\022\r\n\teclairant\020\n\022\022\n\016global_w"
    "eather\020\013*\264\003\n EnumLogMaintenanceHandlingS"
    "tatus\022\033\n\027deplacement_vers_chaine\020\000\022$\n at"
    "tente_disponibilite_remorqueur\020\001\022 \n\034remo"
    "rqueur_deplacement_aller\020\002\022\031\n\025remorqueur"
    "_chargement\020\003\022!\n\035remorqueur_deplacement_"
    "retour\020\004\022\033\n\027remorqueur_dechargement\020\005\022\034\n"
    "\030diagnostique_maintenance\020\006\0220\n,attente_p"
    "rise_en_charge_par_niveau_superieur\020\007\022 \n"
    "\034attente_disponibilite_pieces\020\010\022$\n atten"
    "te_disponibilite_reparateur\020\t\022\016\n\nreparat"
    "ion\020\n\022\017\n\013retour_pion\020\013\022\027\n\023termine_mainte"
    "nance\020\014*\364\005\n\034EnumLogMedicalHandlingStatus"
    "\022*\n&attente_disponibilite_ambulance_rele"
    "ve\020\000\022&\n\"ambulance_releve_deplacement_all"
    "er\020\001\022\037\n\033ambulance_releve_chargement\020\002\022/\n"
    "+attente_chargement_complet_ambulance_re"
    "leve\020\003\022\'\n#ambulance_releve_deplacement_r"
    "etour\020\004\022!\n\035ambulance_releve_dechargement"
    "\020\005\0223\n/attente_disponibilite_medecin_pour"
    "_diagnostique\020\006\022\020\n\014diagnostique\020\007\022\031\n\025rec"
    "herche_secteur_tri\020\010\022*\n&attente_disponib"
    "ilite_medecin_pour_tri\020\t\022\007\n\003tri\020\n\022\032\n\026rec"
    "herche_secteur_soin\020\013\022+\n\'attente_disponi"
    "bilite_medecin_pour_soin\020\014\022\010\n\004soin\020\r\022\023\n\017"
    "hospitalisation\020\016\022-\n)attente_disponibili"
    "te_ambulance_ramassage\020\017\022\"\n\036ambulance_ra"
    "massage_chargement\020\020\0222\n.attente_chargeme"
    "nt_complet_ambulance_ramassage\020\021\022)\n%ambu"
    "lance_ramassage_deplacement_aller\020\022\022$\n a"
    "mbulance_ramassage_dechargement\020\023\022\013\n\007ter"
    "mine\020\024*_\n\022EnumUnitVisibility\022\r\n\tinvisibl"
    "e\020\000\022\014\n\010detected\020\001\022\016\n\nrecognized\020\002\022\016\n\nide"
    "ntified\020\003\022\014\n\010recorded\020\004*H\n\023EnumSimulatio"
    "nState\022\013\n\007running\020\000\022\n\n\006paused\020\001\022\013\n\007stopp"
    "ed\020\002\022\013\n\007loading\020\003*5\n\023EnumDispatcherState"
    "\022\r\n\tavailable\020\000\022\017\n\013unavailable\020\001*l\n\033Enum"
    "MeetingEngagementStatus\022\020\n\014none_meeting\020"
    "\000\022\020\n\014etat_esquive\020\001\022\r\n\tetat_fixe\020\002\022\032\n\026et"
    "at_poursuite_mission\020\003*[\n\025EnumOperationa"
    "lStatus\022\026\n\022detruit_totalement\020\000\022\030\n\024detru"
    "it_tactiquement\020\001\022\020\n\014operationnel\020\002*+\n\017E"
    "numAutomatMode\022\013\n\007embraye\020\000\022\013\n\007debraye\020\001"
    "*F\n\021EnumCrowdAttitude\022\t\n\005calme\020\000\022\n\n\006agit"
    "ee\020\001\022\013\n\007excitee\020\002\022\r\n\tagressive\020\003*8\n\021Enum"
    "UnitTiredness\022\n\n\006normal\020\000\022\013\n\007fatigue\020\001\022\n"
    "\n\006epuise\020\002*@\n\016EnumUnitMorale\022\r\n\tfanatiqu"
    "e\020\000\022\007\n\003bon\020\001\022\t\n\005moyen\020\002\022\013\n\007mauvais\020\003*@\n\022"
    "EnumUnitExperience\022\013\n\007veteran\020\000\022\017\n\013exper"
    "imente\020\001\022\014\n\010conscrit\020\002*8\n\rEnumHumanRank\022"
    "\014\n\010officier\020\000\022\020\n\014sous_officer\020\001\022\007\n\003mdr\020\002"
    "*X\n\rEnumDiplomacy\022\021\n\runknown_diplo\020\000\022\020\n\014"
    "friend_diplo\020\001\022\017\n\013enemy_diplo\020\002\022\021\n\rneutr"
    "al_diplo\020\003*\210\001\n\016EnumHumanWound\022\016\n\nnon_ble"
    "sse\020\000\022\010\n\004mort\020\001\022\024\n\020blesse_urgence_1\020\002\022\024\n"
    "\020blesse_urgence_2\020\003\022\024\n\020blesse_urgence_3\020"
    "\004\022\032\n\026blesse_urgence_extreme\020\005*Y\n\037EnumLog"
    "MaintenanceRegimeTravail\022\014\n\010regime_1\020\000\022\014"
    "\n\010regime_2\020\001\022\014\n\010regime_3\020\002\022\014\n\010regime_4\020\003"
    "*\204\001\n\017EnumNatureLevel\022\024\n\020none_naturelevel"
    "\020\000\022\005\n\001o\020\001\022\006\n\002oo\020\002\022\007\n\003ooo\020\003\022\005\n\001i\020\004\022\006\n\002ii\020"
    "\005\022\007\n\003iii\020\006\022\005\n\001x\020\007\022\006\n\002xx\020\010\022\007\n\003xxx\020\t\022\010\n\004xx"
    "xx\020\n\022\t\n\005xxxxx\020\013", 15255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Common.proto", &protobuf_RegisterTypes);
  AutomatId::default_instance_ = new AutomatId();
  AutomatIdList::default_instance_ = new AutomatIdList();
  FormationId::default_instance_ = new FormationId();
  FormationIdList::default_instance_ = new FormationIdList();
  KnowledgeGroupId::default_instance_ = new KnowledgeGroupId();
  ObjectId::default_instance_ = new ObjectId();
  ObjectKnowledgeId::default_instance_ = new ObjectKnowledgeId();
  ObjectKnowledgeIdList::default_instance_ = new ObjectKnowledgeIdList();
  PartyId::default_instance_ = new PartyId();
  PartyIdList::default_instance_ = new PartyIdList();
  CrowdId::default_instance_ = new CrowdId();
  CrowdIdList::default_instance_ = new CrowdIdList();
  CrowdKnowledgeId::default_instance_ = new CrowdKnowledgeId();
  CrowdConcentrationId::default_instance_ = new CrowdConcentrationId();
  CrowdConcentrationKnowledgeId::default_instance_ = new CrowdConcentrationKnowledgeId();
  CrowdFlowId::default_instance_ = new CrowdFlowId();
  CrowdFlowKnowledgeId::default_instance_ = new CrowdFlowKnowledgeId();
  UnitId::default_instance_ = new UnitId();
  UnitIdList::default_instance_ = new UnitIdList();
  UnitKnowledgeId::default_instance_ = new UnitKnowledgeId();
  UnitKnowledgeIdList::default_instance_ = new UnitKnowledgeIdList();
  UrbanObjectId::default_instance_ = new UrbanObjectId();
  UrbanObjectKnowledgeId::default_instance_ = new UrbanObjectKnowledgeId();
  Tasker::default_instance_ = new Tasker();
  ParentEntity::default_instance_ = new ParentEntity();
  DrawingId::default_instance_ = new DrawingId();
  IntelligenceId::default_instance_ = new IntelligenceId();
  TacticalLineId::default_instance_ = new TacticalLineId();
  MarkerId::default_instance_ = new MarkerId();
  FireId::default_instance_ = new FireId();
  FireEffectId::default_instance_ = new FireEffectId();
  ReportId::default_instance_ = new ReportId();
  WeatherId::default_instance_ = new WeatherId();
  MaintenanceRequestId::default_instance_ = new MaintenanceRequestId();
  MedicalRequestId::default_instance_ = new MedicalRequestId();
  SupplyRequestId::default_instance_ = new SupplyRequestId();
  AutomatType::default_instance_ = new AutomatType();
  BreakdownType::default_instance_ = new BreakdownType();
  EquipmentType::default_instance_ = new EquipmentType();
  FragOrderType::default_instance_ = new FragOrderType();
  MissionType::default_instance_ = new MissionType();
  NBCAgentType::default_instance_ = new NBCAgentType();
  ObjectType::default_instance_ = new ObjectType();
  CrowdType::default_instance_ = new CrowdType();
  ReportType::default_instance_ = new ReportType();
  ResourceType::default_instance_ = new ResourceType();
  UnitType::default_instance_ = new UnitType();
  ResourceNetworkType::default_instance_ = new ResourceNetworkType();
  MsgHeading::default_instance_ = new MsgHeading();
  MsgDateTime::default_instance_ = new MsgDateTime();
  MsgDotationStock::default_instance_ = new MsgDotationStock();
  SeqOfDotationStock::default_instance_ = new SeqOfDotationStock();
  MsgDotationQuota::default_instance_ = new MsgDotationQuota();
  SeqOfDotationQuota::default_instance_ = new SeqOfDotationQuota();
  MsgAutomatChangeKnowledgeGroup::default_instance_ = new MsgAutomatChangeKnowledgeGroup();
  MsgAutomatChangeLogisticLinks::default_instance_ = new MsgAutomatChangeLogisticLinks();
  MsgAutomatChangeSuperior_oid_superior::default_instance_ = new MsgAutomatChangeSuperior_oid_superior();
  MsgAutomatChangeSuperior::default_instance_ = new MsgAutomatChangeSuperior();
  MsgUnitChangeSuperior::default_instance_ = new MsgUnitChangeSuperior();
  MsgControlStop::default_instance_ = new MsgControlStop();
  MsgControlPause::default_instance_ = new MsgControlPause();
  MsgControlResume::default_instance_ = new MsgControlResume();
  MsgControlChangeTimeFactor::default_instance_ = new MsgControlChangeTimeFactor();
  MsgExercise::default_instance_ = new MsgExercise();
  MsgNetworkAddress::default_instance_ = new MsgNetworkAddress();
  MsgCoordLatLong::default_instance_ = new MsgCoordLatLong();
  MsgCoordLatLongList::default_instance_ = new MsgCoordLatLongList();
  MsgLocation::default_instance_ = new MsgLocation();
  MsgLine::default_instance_ = new MsgLine();
  MsgLocationList::default_instance_ = new MsgLocationList();
  MsgPath::default_instance_ = new MsgPath();
  MsgPathList::default_instance_ = new MsgPathList();
  MsgPoint::default_instance_ = new MsgPoint();
  MsgPointList::default_instance_ = new MsgPointList();
  MsgPolygon::default_instance_ = new MsgPolygon();
  MsgPolygonList::default_instance_ = new MsgPolygonList();
  MsgLogMedicalPriorities::default_instance_ = new MsgLogMedicalPriorities();
  ObstacleType::default_instance_ = new ObstacleType();
  MsgPlannedWork::default_instance_ = new MsgPlannedWork();
  MsgPlannedWorkList::default_instance_ = new MsgPlannedWorkList();
  MsgLogMaintenancePriorities::default_instance_ = new MsgLogMaintenancePriorities();
  MsgMissionObjective::default_instance_ = new MsgMissionObjective();
  MsgMissionObjectiveList::default_instance_ = new MsgMissionObjectiveList();
  MsgLimaOrder::default_instance_ = new MsgLimaOrder();
  MsgLimasOrder::default_instance_ = new MsgLimasOrder();
  MsgIntelligence::default_instance_ = new MsgIntelligence();
  MsgIntelligenceList::default_instance_ = new MsgIntelligenceList();
  MsgChangeDiplomacy::default_instance_ = new MsgChangeDiplomacy();
  MsgAtlasNature::default_instance_ = new MsgAtlasNature();
  MsgMissionParameter::default_instance_ = new MsgMissionParameter();
  MsgMissionParameter_Value::default_instance_ = new MsgMissionParameter_Value();
  MsgMissionParameters::default_instance_ = new MsgMissionParameters();
  MsgUnitOrder::default_instance_ = new MsgUnitOrder();
  MsgAutomatOrder::default_instance_ = new MsgAutomatOrder();
  MsgCrowdOrder::default_instance_ = new MsgCrowdOrder();
  MsgTacticalLine::default_instance_ = new MsgTacticalLine();
  MsgTacticalLine_Diffusion::default_instance_ = new MsgTacticalLine_Diffusion();
  MsgShape::default_instance_ = new MsgShape();
  MsgChatTarget::default_instance_ = new MsgChatTarget();
  MsgTextMessage::default_instance_ = new MsgTextMessage();
  ResourceNetwork::default_instance_ = new ResourceNetwork();
  ResourceNetwork_Link::default_instance_ = new ResourceNetwork_Link();
  ObjectAttributeResourceNetwork::default_instance_ = new ObjectAttributeResourceNetwork();
  ObjectAttributeConstruction::default_instance_ = new ObjectAttributeConstruction();
  ObjectAttributeMine::default_instance_ = new ObjectAttributeMine();
  ObjectAttributeLogistic::default_instance_ = new ObjectAttributeLogistic();
  ObjectAttributeInteractionHeight::default_instance_ = new ObjectAttributeInteractionHeight();
  ObjectAttributeObstacle::default_instance_ = new ObjectAttributeObstacle();
  ObjectAttributeActivityTime::default_instance_ = new ObjectAttributeActivityTime();
  ObjectAttributeBypass::default_instance_ = new ObjectAttributeBypass();
  ObjectAttributeEffectDelay::default_instance_ = new ObjectAttributeEffectDelay();
  ObjectAttributeNBC::default_instance_ = new ObjectAttributeNBC();
  StockResource::default_instance_ = new StockResource();
  ObjectAttributeStock::default_instance_ = new ObjectAttributeStock();
  ObjectAttributeCrossingSite::default_instance_ = new ObjectAttributeCrossingSite();
  ObjectAttributeSupplyRoute::default_instance_ = new ObjectAttributeSupplyRoute();
  MsgLocatedQuantity::default_instance_ = new MsgLocatedQuantity();
  MsgLocatedQuantityList::default_instance_ = new MsgLocatedQuantityList();
  ObjectAttributeToxicCloud::default_instance_ = new ObjectAttributeToxicCloud();
  ObjectAttributeFire::default_instance_ = new ObjectAttributeFire();
  ObjectAttributeMedicalTreatment::default_instance_ = new ObjectAttributeMedicalTreatment();
  ObjectAttributeNBCType::default_instance_ = new ObjectAttributeNBCType();
  ObjectAttributeSealOff::default_instance_ = new ObjectAttributeSealOff();
  ObjectAttributes::default_instance_ = new ObjectAttributes();
  MsgNote::default_instance_ = new MsgNote();
  MsgWeatherAttributes::default_instance_ = new MsgWeatherAttributes();
  AutomatId::default_instance_->InitAsDefaultInstance();
  AutomatIdList::default_instance_->InitAsDefaultInstance();
  FormationId::default_instance_->InitAsDefaultInstance();
  FormationIdList::default_instance_->InitAsDefaultInstance();
  KnowledgeGroupId::default_instance_->InitAsDefaultInstance();
  ObjectId::default_instance_->InitAsDefaultInstance();
  ObjectKnowledgeId::default_instance_->InitAsDefaultInstance();
  ObjectKnowledgeIdList::default_instance_->InitAsDefaultInstance();
  PartyId::default_instance_->InitAsDefaultInstance();
  PartyIdList::default_instance_->InitAsDefaultInstance();
  CrowdId::default_instance_->InitAsDefaultInstance();
  CrowdIdList::default_instance_->InitAsDefaultInstance();
  CrowdKnowledgeId::default_instance_->InitAsDefaultInstance();
  CrowdConcentrationId::default_instance_->InitAsDefaultInstance();
  CrowdConcentrationKnowledgeId::default_instance_->InitAsDefaultInstance();
  CrowdFlowId::default_instance_->InitAsDefaultInstance();
  CrowdFlowKnowledgeId::default_instance_->InitAsDefaultInstance();
  UnitId::default_instance_->InitAsDefaultInstance();
  UnitIdList::default_instance_->InitAsDefaultInstance();
  UnitKnowledgeId::default_instance_->InitAsDefaultInstance();
  UnitKnowledgeIdList::default_instance_->InitAsDefaultInstance();
  UrbanObjectId::default_instance_->InitAsDefaultInstance();
  UrbanObjectKnowledgeId::default_instance_->InitAsDefaultInstance();
  Tasker::default_instance_->InitAsDefaultInstance();
  ParentEntity::default_instance_->InitAsDefaultInstance();
  DrawingId::default_instance_->InitAsDefaultInstance();
  IntelligenceId::default_instance_->InitAsDefaultInstance();
  TacticalLineId::default_instance_->InitAsDefaultInstance();
  MarkerId::default_instance_->InitAsDefaultInstance();
  FireId::default_instance_->InitAsDefaultInstance();
  FireEffectId::default_instance_->InitAsDefaultInstance();
  ReportId::default_instance_->InitAsDefaultInstance();
  WeatherId::default_instance_->InitAsDefaultInstance();
  MaintenanceRequestId::default_instance_->InitAsDefaultInstance();
  MedicalRequestId::default_instance_->InitAsDefaultInstance();
  SupplyRequestId::default_instance_->InitAsDefaultInstance();
  AutomatType::default_instance_->InitAsDefaultInstance();
  BreakdownType::default_instance_->InitAsDefaultInstance();
  EquipmentType::default_instance_->InitAsDefaultInstance();
  FragOrderType::default_instance_->InitAsDefaultInstance();
  MissionType::default_instance_->InitAsDefaultInstance();
  NBCAgentType::default_instance_->InitAsDefaultInstance();
  ObjectType::default_instance_->InitAsDefaultInstance();
  CrowdType::default_instance_->InitAsDefaultInstance();
  ReportType::default_instance_->InitAsDefaultInstance();
  ResourceType::default_instance_->InitAsDefaultInstance();
  UnitType::default_instance_->InitAsDefaultInstance();
  ResourceNetworkType::default_instance_->InitAsDefaultInstance();
  MsgHeading::default_instance_->InitAsDefaultInstance();
  MsgDateTime::default_instance_->InitAsDefaultInstance();
  MsgDotationStock::default_instance_->InitAsDefaultInstance();
  SeqOfDotationStock::default_instance_->InitAsDefaultInstance();
  MsgDotationQuota::default_instance_->InitAsDefaultInstance();
  SeqOfDotationQuota::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeKnowledgeGroup::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeLogisticLinks::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeSuperior_oid_superior::default_instance_->InitAsDefaultInstance();
  MsgAutomatChangeSuperior::default_instance_->InitAsDefaultInstance();
  MsgUnitChangeSuperior::default_instance_->InitAsDefaultInstance();
  MsgControlStop::default_instance_->InitAsDefaultInstance();
  MsgControlPause::default_instance_->InitAsDefaultInstance();
  MsgControlResume::default_instance_->InitAsDefaultInstance();
  MsgControlChangeTimeFactor::default_instance_->InitAsDefaultInstance();
  MsgExercise::default_instance_->InitAsDefaultInstance();
  MsgNetworkAddress::default_instance_->InitAsDefaultInstance();
  MsgCoordLatLong::default_instance_->InitAsDefaultInstance();
  MsgCoordLatLongList::default_instance_->InitAsDefaultInstance();
  MsgLocation::default_instance_->InitAsDefaultInstance();
  MsgLine::default_instance_->InitAsDefaultInstance();
  MsgLocationList::default_instance_->InitAsDefaultInstance();
  MsgPath::default_instance_->InitAsDefaultInstance();
  MsgPathList::default_instance_->InitAsDefaultInstance();
  MsgPoint::default_instance_->InitAsDefaultInstance();
  MsgPointList::default_instance_->InitAsDefaultInstance();
  MsgPolygon::default_instance_->InitAsDefaultInstance();
  MsgPolygonList::default_instance_->InitAsDefaultInstance();
  MsgLogMedicalPriorities::default_instance_->InitAsDefaultInstance();
  ObstacleType::default_instance_->InitAsDefaultInstance();
  MsgPlannedWork::default_instance_->InitAsDefaultInstance();
  MsgPlannedWorkList::default_instance_->InitAsDefaultInstance();
  MsgLogMaintenancePriorities::default_instance_->InitAsDefaultInstance();
  MsgMissionObjective::default_instance_->InitAsDefaultInstance();
  MsgMissionObjectiveList::default_instance_->InitAsDefaultInstance();
  MsgLimaOrder::default_instance_->InitAsDefaultInstance();
  MsgLimasOrder::default_instance_->InitAsDefaultInstance();
  MsgIntelligence::default_instance_->InitAsDefaultInstance();
  MsgIntelligenceList::default_instance_->InitAsDefaultInstance();
  MsgChangeDiplomacy::default_instance_->InitAsDefaultInstance();
  MsgAtlasNature::default_instance_->InitAsDefaultInstance();
  MsgMissionParameter::default_instance_->InitAsDefaultInstance();
  MsgMissionParameter_Value::default_instance_->InitAsDefaultInstance();
  MsgMissionParameters::default_instance_->InitAsDefaultInstance();
  MsgUnitOrder::default_instance_->InitAsDefaultInstance();
  MsgAutomatOrder::default_instance_->InitAsDefaultInstance();
  MsgCrowdOrder::default_instance_->InitAsDefaultInstance();
  MsgTacticalLine::default_instance_->InitAsDefaultInstance();
  MsgTacticalLine_Diffusion::default_instance_->InitAsDefaultInstance();
  MsgShape::default_instance_->InitAsDefaultInstance();
  MsgChatTarget::default_instance_->InitAsDefaultInstance();
  MsgTextMessage::default_instance_->InitAsDefaultInstance();
  ResourceNetwork::default_instance_->InitAsDefaultInstance();
  ResourceNetwork_Link::default_instance_->InitAsDefaultInstance();
  ObjectAttributeResourceNetwork::default_instance_->InitAsDefaultInstance();
  ObjectAttributeConstruction::default_instance_->InitAsDefaultInstance();
  ObjectAttributeMine::default_instance_->InitAsDefaultInstance();
  ObjectAttributeLogistic::default_instance_->InitAsDefaultInstance();
  ObjectAttributeInteractionHeight::default_instance_->InitAsDefaultInstance();
  ObjectAttributeObstacle::default_instance_->InitAsDefaultInstance();
  ObjectAttributeActivityTime::default_instance_->InitAsDefaultInstance();
  ObjectAttributeBypass::default_instance_->InitAsDefaultInstance();
  ObjectAttributeEffectDelay::default_instance_->InitAsDefaultInstance();
  ObjectAttributeNBC::default_instance_->InitAsDefaultInstance();
  StockResource::default_instance_->InitAsDefaultInstance();
  ObjectAttributeStock::default_instance_->InitAsDefaultInstance();
  ObjectAttributeCrossingSite::default_instance_->InitAsDefaultInstance();
  ObjectAttributeSupplyRoute::default_instance_->InitAsDefaultInstance();
  MsgLocatedQuantity::default_instance_->InitAsDefaultInstance();
  MsgLocatedQuantityList::default_instance_->InitAsDefaultInstance();
  ObjectAttributeToxicCloud::default_instance_->InitAsDefaultInstance();
  ObjectAttributeFire::default_instance_->InitAsDefaultInstance();
  ObjectAttributeMedicalTreatment::default_instance_->InitAsDefaultInstance();
  ObjectAttributeNBCType::default_instance_->InitAsDefaultInstance();
  ObjectAttributeSealOff::default_instance_->InitAsDefaultInstance();
  ObjectAttributes::default_instance_->InitAsDefaultInstance();
  MsgNote::default_instance_->InitAsDefaultInstance();
  MsgWeatherAttributes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Common_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Common_2eproto {
  StaticDescriptorInitializer_Common_2eproto() {
    protobuf_AddDesc_Common_2eproto();
  }
} static_descriptor_initializer_Common_2eproto_;

const ::google::protobuf::EnumDescriptor* EnumDotationFamily_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumDotationFamily_descriptor_;
}
bool EnumDotationFamily_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumAmmunitionFamily_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumAmmunitionFamily_descriptor_;
}
bool EnumAmmunitionFamily_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumPrecipitationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumPrecipitationType_descriptor_;
}
bool EnumPrecipitationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumFireEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumFireEffectType_descriptor_;
}
bool EnumFireEffectType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitFireType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitFireType_descriptor_;
}
bool UnitFireType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumLightingType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumLightingType_descriptor_;
}
bool EnumLightingType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumLogMaintenanceHandlingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumLogMaintenanceHandlingStatus_descriptor_;
}
bool EnumLogMaintenanceHandlingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumLogMedicalHandlingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumLogMedicalHandlingStatus_descriptor_;
}
bool EnumLogMedicalHandlingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumUnitVisibility_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumUnitVisibility_descriptor_;
}
bool EnumUnitVisibility_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumSimulationState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumSimulationState_descriptor_;
}
bool EnumSimulationState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumDispatcherState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumDispatcherState_descriptor_;
}
bool EnumDispatcherState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumMeetingEngagementStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumMeetingEngagementStatus_descriptor_;
}
bool EnumMeetingEngagementStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumOperationalStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumOperationalStatus_descriptor_;
}
bool EnumOperationalStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumAutomatMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumAutomatMode_descriptor_;
}
bool EnumAutomatMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumCrowdAttitude_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumCrowdAttitude_descriptor_;
}
bool EnumCrowdAttitude_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumUnitTiredness_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumUnitTiredness_descriptor_;
}
bool EnumUnitTiredness_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumUnitMorale_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumUnitMorale_descriptor_;
}
bool EnumUnitMorale_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumUnitExperience_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumUnitExperience_descriptor_;
}
bool EnumUnitExperience_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumHumanRank_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumHumanRank_descriptor_;
}
bool EnumHumanRank_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumDiplomacy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumDiplomacy_descriptor_;
}
bool EnumDiplomacy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumHumanWound_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumHumanWound_descriptor_;
}
bool EnumHumanWound_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumLogMaintenanceRegimeTravail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumLogMaintenanceRegimeTravail_descriptor_;
}
bool EnumLogMaintenanceRegimeTravail_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EnumNatureLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnumNatureLevel_descriptor_;
}
bool EnumNatureLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AutomatId::kIdFieldNumber;
#endif  // !_MSC_VER

AutomatId::AutomatId() {
  SharedCtor();
}

void AutomatId::InitAsDefaultInstance() {
}

AutomatId::AutomatId(const AutomatId& from) {
  SharedCtor();
  MergeFrom(from);
}

void AutomatId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomatId::~AutomatId() {
  SharedDtor();
}

void AutomatId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AutomatId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomatId_descriptor_;
}

const AutomatId& AutomatId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

AutomatId* AutomatId::default_instance_ = NULL;

AutomatId* AutomatId::New() const {
  return new AutomatId;
}

void AutomatId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomatId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomatId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AutomatId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomatId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomatId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AutomatId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomatId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomatId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomatId::MergeFrom(const AutomatId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomatId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatId::CopyFrom(const AutomatId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AutomatId::Swap(AutomatId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomatId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomatId_descriptor_;
  metadata.reflection = AutomatId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutomatIdList::kElemFieldNumber;
#endif  // !_MSC_VER

AutomatIdList::AutomatIdList() {
  SharedCtor();
}

void AutomatIdList::InitAsDefaultInstance() {
}

AutomatIdList::AutomatIdList(const AutomatIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void AutomatIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomatIdList::~AutomatIdList() {
  SharedDtor();
}

void AutomatIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AutomatIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomatIdList_descriptor_;
}

const AutomatIdList& AutomatIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

AutomatIdList* AutomatIdList::default_instance_ = NULL;

AutomatIdList* AutomatIdList::New() const {
  return new AutomatIdList;
}

void AutomatIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomatIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.AutomatId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomatIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AutomatIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.AutomatId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomatIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.AutomatId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomatIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.AutomatId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AutomatIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomatIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomatIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomatIdList::MergeFrom(const AutomatIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomatIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatIdList::CopyFrom(const AutomatIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void AutomatIdList::Swap(AutomatIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomatIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomatIdList_descriptor_;
  metadata.reflection = AutomatIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationId::kIdFieldNumber;
#endif  // !_MSC_VER

FormationId::FormationId() {
  SharedCtor();
}

void FormationId::InitAsDefaultInstance() {
}

FormationId::FormationId(const FormationId& from) {
  SharedCtor();
  MergeFrom(from);
}

void FormationId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationId::~FormationId() {
  SharedDtor();
}

void FormationId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FormationId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationId_descriptor_;
}

const FormationId& FormationId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

FormationId* FormationId::default_instance_ = NULL;

FormationId* FormationId::New() const {
  return new FormationId;
}

void FormationId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FormationId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FormationId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationId::MergeFrom(const FormationId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationId::CopyFrom(const FormationId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FormationId::Swap(FormationId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationId_descriptor_;
  metadata.reflection = FormationId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationIdList::kElemFieldNumber;
#endif  // !_MSC_VER

FormationIdList::FormationIdList() {
  SharedCtor();
}

void FormationIdList::InitAsDefaultInstance() {
}

FormationIdList::FormationIdList(const FormationIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void FormationIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationIdList::~FormationIdList() {
  SharedDtor();
}

void FormationIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FormationIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationIdList_descriptor_;
}

const FormationIdList& FormationIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

FormationIdList* FormationIdList::default_instance_ = NULL;

FormationIdList* FormationIdList::New() const {
  return new FormationIdList;
}

void FormationIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.FormationId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FormationIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.FormationId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.FormationId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.FormationId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FormationIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationIdList::MergeFrom(const FormationIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationIdList::CopyFrom(const FormationIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void FormationIdList::Swap(FormationIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationIdList_descriptor_;
  metadata.reflection = FormationIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KnowledgeGroupId::kIdFieldNumber;
#endif  // !_MSC_VER

KnowledgeGroupId::KnowledgeGroupId() {
  SharedCtor();
}

void KnowledgeGroupId::InitAsDefaultInstance() {
}

KnowledgeGroupId::KnowledgeGroupId(const KnowledgeGroupId& from) {
  SharedCtor();
  MergeFrom(from);
}

void KnowledgeGroupId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KnowledgeGroupId::~KnowledgeGroupId() {
  SharedDtor();
}

void KnowledgeGroupId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* KnowledgeGroupId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KnowledgeGroupId_descriptor_;
}

const KnowledgeGroupId& KnowledgeGroupId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

KnowledgeGroupId* KnowledgeGroupId::default_instance_ = NULL;

KnowledgeGroupId* KnowledgeGroupId::New() const {
  return new KnowledgeGroupId;
}

void KnowledgeGroupId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KnowledgeGroupId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KnowledgeGroupId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    KnowledgeGroupId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KnowledgeGroupId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KnowledgeGroupId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void KnowledgeGroupId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KnowledgeGroupId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KnowledgeGroupId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KnowledgeGroupId::MergeFrom(const KnowledgeGroupId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KnowledgeGroupId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnowledgeGroupId::CopyFrom(const KnowledgeGroupId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnowledgeGroupId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KnowledgeGroupId::Swap(KnowledgeGroupId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KnowledgeGroupId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KnowledgeGroupId_descriptor_;
  metadata.reflection = KnowledgeGroupId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectId::kIdFieldNumber;
#endif  // !_MSC_VER

ObjectId::ObjectId() {
  SharedCtor();
}

void ObjectId::InitAsDefaultInstance() {
}

ObjectId::ObjectId(const ObjectId& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectId::~ObjectId() {
  SharedDtor();
}

void ObjectId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectId_descriptor_;
}

const ObjectId& ObjectId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectId* ObjectId::default_instance_ = NULL;

ObjectId* ObjectId::New() const {
  return new ObjectId;
}

void ObjectId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectId::MergeFrom(const ObjectId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectId::CopyFrom(const ObjectId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectId::Swap(ObjectId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectId_descriptor_;
  metadata.reflection = ObjectId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

ObjectKnowledgeId::ObjectKnowledgeId() {
  SharedCtor();
}

void ObjectKnowledgeId::InitAsDefaultInstance() {
}

ObjectKnowledgeId::ObjectKnowledgeId(const ObjectKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectKnowledgeId::~ObjectKnowledgeId() {
  SharedDtor();
}

void ObjectKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectKnowledgeId_descriptor_;
}

const ObjectKnowledgeId& ObjectKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectKnowledgeId* ObjectKnowledgeId::default_instance_ = NULL;

ObjectKnowledgeId* ObjectKnowledgeId::New() const {
  return new ObjectKnowledgeId;
}

void ObjectKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectKnowledgeId::MergeFrom(const ObjectKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectKnowledgeId::CopyFrom(const ObjectKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectKnowledgeId::Swap(ObjectKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectKnowledgeId_descriptor_;
  metadata.reflection = ObjectKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectKnowledgeIdList::kElemFieldNumber;
#endif  // !_MSC_VER

ObjectKnowledgeIdList::ObjectKnowledgeIdList() {
  SharedCtor();
}

void ObjectKnowledgeIdList::InitAsDefaultInstance() {
}

ObjectKnowledgeIdList::ObjectKnowledgeIdList(const ObjectKnowledgeIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectKnowledgeIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectKnowledgeIdList::~ObjectKnowledgeIdList() {
  SharedDtor();
}

void ObjectKnowledgeIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectKnowledgeIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectKnowledgeIdList_descriptor_;
}

const ObjectKnowledgeIdList& ObjectKnowledgeIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectKnowledgeIdList* ObjectKnowledgeIdList::default_instance_ = NULL;

ObjectKnowledgeIdList* ObjectKnowledgeIdList::New() const {
  return new ObjectKnowledgeIdList;
}

void ObjectKnowledgeIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectKnowledgeIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.ObjectKnowledgeId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectKnowledgeIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectKnowledgeIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.ObjectKnowledgeId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectKnowledgeIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.ObjectKnowledgeId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectKnowledgeIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.ObjectKnowledgeId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectKnowledgeIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectKnowledgeIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectKnowledgeIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectKnowledgeIdList::MergeFrom(const ObjectKnowledgeIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectKnowledgeIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectKnowledgeIdList::CopyFrom(const ObjectKnowledgeIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectKnowledgeIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectKnowledgeIdList::Swap(ObjectKnowledgeIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectKnowledgeIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectKnowledgeIdList_descriptor_;
  metadata.reflection = ObjectKnowledgeIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartyId::kIdFieldNumber;
#endif  // !_MSC_VER

PartyId::PartyId() {
  SharedCtor();
}

void PartyId::InitAsDefaultInstance() {
}

PartyId::PartyId(const PartyId& from) {
  SharedCtor();
  MergeFrom(from);
}

void PartyId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartyId::~PartyId() {
  SharedDtor();
}

void PartyId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PartyId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartyId_descriptor_;
}

const PartyId& PartyId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

PartyId* PartyId::default_instance_ = NULL;

PartyId* PartyId::New() const {
  return new PartyId;
}

void PartyId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartyId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartyId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PartyId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartyId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartyId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PartyId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartyId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartyId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartyId::MergeFrom(const PartyId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartyId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyId::CopyFrom(const PartyId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PartyId::Swap(PartyId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartyId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartyId_descriptor_;
  metadata.reflection = PartyId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartyIdList::kElemFieldNumber;
#endif  // !_MSC_VER

PartyIdList::PartyIdList() {
  SharedCtor();
}

void PartyIdList::InitAsDefaultInstance() {
}

PartyIdList::PartyIdList(const PartyIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void PartyIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartyIdList::~PartyIdList() {
  SharedDtor();
}

void PartyIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* PartyIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartyIdList_descriptor_;
}

const PartyIdList& PartyIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

PartyIdList* PartyIdList::default_instance_ = NULL;

PartyIdList* PartyIdList::New() const {
  return new PartyIdList;
}

void PartyIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartyIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.PartyId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartyIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    PartyIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.PartyId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartyIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.PartyId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartyIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.PartyId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void PartyIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartyIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartyIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartyIdList::MergeFrom(const PartyIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartyIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartyIdList::CopyFrom(const PartyIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartyIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void PartyIdList::Swap(PartyIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartyIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartyIdList_descriptor_;
  metadata.reflection = PartyIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdId::CrowdId() {
  SharedCtor();
}

void CrowdId::InitAsDefaultInstance() {
}

CrowdId::CrowdId(const CrowdId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdId::~CrowdId() {
  SharedDtor();
}

void CrowdId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdId_descriptor_;
}

const CrowdId& CrowdId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdId* CrowdId::default_instance_ = NULL;

CrowdId* CrowdId::New() const {
  return new CrowdId;
}

void CrowdId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdId::MergeFrom(const CrowdId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdId::CopyFrom(const CrowdId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdId::Swap(CrowdId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdId_descriptor_;
  metadata.reflection = CrowdId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdIdList::kElemFieldNumber;
#endif  // !_MSC_VER

CrowdIdList::CrowdIdList() {
  SharedCtor();
}

void CrowdIdList::InitAsDefaultInstance() {
}

CrowdIdList::CrowdIdList(const CrowdIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdIdList::~CrowdIdList() {
  SharedDtor();
}

void CrowdIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdIdList_descriptor_;
}

const CrowdIdList& CrowdIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdIdList* CrowdIdList::default_instance_ = NULL;

CrowdIdList* CrowdIdList::New() const {
  return new CrowdIdList;
}

void CrowdIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.CrowdId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.CrowdId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.CrowdId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.CrowdId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdIdList::MergeFrom(const CrowdIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdIdList::CopyFrom(const CrowdIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void CrowdIdList::Swap(CrowdIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdIdList_descriptor_;
  metadata.reflection = CrowdIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdKnowledgeId::CrowdKnowledgeId() {
  SharedCtor();
}

void CrowdKnowledgeId::InitAsDefaultInstance() {
}

CrowdKnowledgeId::CrowdKnowledgeId(const CrowdKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdKnowledgeId::~CrowdKnowledgeId() {
  SharedDtor();
}

void CrowdKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdKnowledgeId_descriptor_;
}

const CrowdKnowledgeId& CrowdKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdKnowledgeId* CrowdKnowledgeId::default_instance_ = NULL;

CrowdKnowledgeId* CrowdKnowledgeId::New() const {
  return new CrowdKnowledgeId;
}

void CrowdKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdKnowledgeId::MergeFrom(const CrowdKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdKnowledgeId::CopyFrom(const CrowdKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdKnowledgeId::Swap(CrowdKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdKnowledgeId_descriptor_;
  metadata.reflection = CrowdKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdConcentrationId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdConcentrationId::CrowdConcentrationId() {
  SharedCtor();
}

void CrowdConcentrationId::InitAsDefaultInstance() {
}

CrowdConcentrationId::CrowdConcentrationId(const CrowdConcentrationId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdConcentrationId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdConcentrationId::~CrowdConcentrationId() {
  SharedDtor();
}

void CrowdConcentrationId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdConcentrationId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdConcentrationId_descriptor_;
}

const CrowdConcentrationId& CrowdConcentrationId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdConcentrationId* CrowdConcentrationId::default_instance_ = NULL;

CrowdConcentrationId* CrowdConcentrationId::New() const {
  return new CrowdConcentrationId;
}

void CrowdConcentrationId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdConcentrationId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdConcentrationId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdConcentrationId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdConcentrationId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdConcentrationId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdConcentrationId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdConcentrationId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdConcentrationId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdConcentrationId::MergeFrom(const CrowdConcentrationId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdConcentrationId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdConcentrationId::CopyFrom(const CrowdConcentrationId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdConcentrationId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdConcentrationId::Swap(CrowdConcentrationId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdConcentrationId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdConcentrationId_descriptor_;
  metadata.reflection = CrowdConcentrationId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdConcentrationKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdConcentrationKnowledgeId::CrowdConcentrationKnowledgeId() {
  SharedCtor();
}

void CrowdConcentrationKnowledgeId::InitAsDefaultInstance() {
}

CrowdConcentrationKnowledgeId::CrowdConcentrationKnowledgeId(const CrowdConcentrationKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdConcentrationKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdConcentrationKnowledgeId::~CrowdConcentrationKnowledgeId() {
  SharedDtor();
}

void CrowdConcentrationKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdConcentrationKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdConcentrationKnowledgeId_descriptor_;
}

const CrowdConcentrationKnowledgeId& CrowdConcentrationKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdConcentrationKnowledgeId* CrowdConcentrationKnowledgeId::default_instance_ = NULL;

CrowdConcentrationKnowledgeId* CrowdConcentrationKnowledgeId::New() const {
  return new CrowdConcentrationKnowledgeId;
}

void CrowdConcentrationKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdConcentrationKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdConcentrationKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdConcentrationKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdConcentrationKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdConcentrationKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdConcentrationKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdConcentrationKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdConcentrationKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdConcentrationKnowledgeId::MergeFrom(const CrowdConcentrationKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdConcentrationKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdConcentrationKnowledgeId::CopyFrom(const CrowdConcentrationKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdConcentrationKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdConcentrationKnowledgeId::Swap(CrowdConcentrationKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdConcentrationKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdConcentrationKnowledgeId_descriptor_;
  metadata.reflection = CrowdConcentrationKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdFlowId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdFlowId::CrowdFlowId() {
  SharedCtor();
}

void CrowdFlowId::InitAsDefaultInstance() {
}

CrowdFlowId::CrowdFlowId(const CrowdFlowId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdFlowId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdFlowId::~CrowdFlowId() {
  SharedDtor();
}

void CrowdFlowId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdFlowId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdFlowId_descriptor_;
}

const CrowdFlowId& CrowdFlowId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdFlowId* CrowdFlowId::default_instance_ = NULL;

CrowdFlowId* CrowdFlowId::New() const {
  return new CrowdFlowId;
}

void CrowdFlowId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdFlowId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdFlowId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdFlowId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdFlowId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdFlowId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdFlowId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdFlowId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdFlowId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdFlowId::MergeFrom(const CrowdFlowId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdFlowId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdFlowId::CopyFrom(const CrowdFlowId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdFlowId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdFlowId::Swap(CrowdFlowId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdFlowId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdFlowId_descriptor_;
  metadata.reflection = CrowdFlowId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdFlowKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdFlowKnowledgeId::CrowdFlowKnowledgeId() {
  SharedCtor();
}

void CrowdFlowKnowledgeId::InitAsDefaultInstance() {
}

CrowdFlowKnowledgeId::CrowdFlowKnowledgeId(const CrowdFlowKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdFlowKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdFlowKnowledgeId::~CrowdFlowKnowledgeId() {
  SharedDtor();
}

void CrowdFlowKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdFlowKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdFlowKnowledgeId_descriptor_;
}

const CrowdFlowKnowledgeId& CrowdFlowKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdFlowKnowledgeId* CrowdFlowKnowledgeId::default_instance_ = NULL;

CrowdFlowKnowledgeId* CrowdFlowKnowledgeId::New() const {
  return new CrowdFlowKnowledgeId;
}

void CrowdFlowKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdFlowKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdFlowKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdFlowKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdFlowKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdFlowKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdFlowKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdFlowKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdFlowKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdFlowKnowledgeId::MergeFrom(const CrowdFlowKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdFlowKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdFlowKnowledgeId::CopyFrom(const CrowdFlowKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdFlowKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdFlowKnowledgeId::Swap(CrowdFlowKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdFlowKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdFlowKnowledgeId_descriptor_;
  metadata.reflection = CrowdFlowKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitId::kIdFieldNumber;
#endif  // !_MSC_VER

UnitId::UnitId() {
  SharedCtor();
}

void UnitId::InitAsDefaultInstance() {
}

UnitId::UnitId(const UnitId& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitId::~UnitId() {
  SharedDtor();
}

void UnitId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitId_descriptor_;
}

const UnitId& UnitId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UnitId* UnitId::default_instance_ = NULL;

UnitId* UnitId::New() const {
  return new UnitId;
}

void UnitId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitId::MergeFrom(const UnitId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitId::CopyFrom(const UnitId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnitId::Swap(UnitId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitId_descriptor_;
  metadata.reflection = UnitId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitIdList::kElemFieldNumber;
#endif  // !_MSC_VER

UnitIdList::UnitIdList() {
  SharedCtor();
}

void UnitIdList::InitAsDefaultInstance() {
}

UnitIdList::UnitIdList(const UnitIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitIdList::~UnitIdList() {
  SharedDtor();
}

void UnitIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitIdList_descriptor_;
}

const UnitIdList& UnitIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UnitIdList* UnitIdList::default_instance_ = NULL;

UnitIdList* UnitIdList::New() const {
  return new UnitIdList;
}

void UnitIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.UnitId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.UnitId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.UnitId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.UnitId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitIdList::MergeFrom(const UnitIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitIdList::CopyFrom(const UnitIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void UnitIdList::Swap(UnitIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitIdList_descriptor_;
  metadata.reflection = UnitIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

UnitKnowledgeId::UnitKnowledgeId() {
  SharedCtor();
}

void UnitKnowledgeId::InitAsDefaultInstance() {
}

UnitKnowledgeId::UnitKnowledgeId(const UnitKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitKnowledgeId::~UnitKnowledgeId() {
  SharedDtor();
}

void UnitKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitKnowledgeId_descriptor_;
}

const UnitKnowledgeId& UnitKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UnitKnowledgeId* UnitKnowledgeId::default_instance_ = NULL;

UnitKnowledgeId* UnitKnowledgeId::New() const {
  return new UnitKnowledgeId;
}

void UnitKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitKnowledgeId::MergeFrom(const UnitKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitKnowledgeId::CopyFrom(const UnitKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnitKnowledgeId::Swap(UnitKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitKnowledgeId_descriptor_;
  metadata.reflection = UnitKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitKnowledgeIdList::kElemFieldNumber;
#endif  // !_MSC_VER

UnitKnowledgeIdList::UnitKnowledgeIdList() {
  SharedCtor();
}

void UnitKnowledgeIdList::InitAsDefaultInstance() {
}

UnitKnowledgeIdList::UnitKnowledgeIdList(const UnitKnowledgeIdList& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitKnowledgeIdList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitKnowledgeIdList::~UnitKnowledgeIdList() {
  SharedDtor();
}

void UnitKnowledgeIdList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitKnowledgeIdList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitKnowledgeIdList_descriptor_;
}

const UnitKnowledgeIdList& UnitKnowledgeIdList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UnitKnowledgeIdList* UnitKnowledgeIdList::default_instance_ = NULL;

UnitKnowledgeIdList* UnitKnowledgeIdList::New() const {
  return new UnitKnowledgeIdList;
}

void UnitKnowledgeIdList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitKnowledgeIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.UnitKnowledgeId elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitKnowledgeIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitKnowledgeIdList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.UnitKnowledgeId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitKnowledgeIdList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.UnitKnowledgeId elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitKnowledgeIdList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.UnitKnowledgeId elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitKnowledgeIdList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitKnowledgeIdList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitKnowledgeIdList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitKnowledgeIdList::MergeFrom(const UnitKnowledgeIdList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitKnowledgeIdList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitKnowledgeIdList::CopyFrom(const UnitKnowledgeIdList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitKnowledgeIdList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void UnitKnowledgeIdList::Swap(UnitKnowledgeIdList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitKnowledgeIdList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitKnowledgeIdList_descriptor_;
  metadata.reflection = UnitKnowledgeIdList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UrbanObjectId::kIdFieldNumber;
#endif  // !_MSC_VER

UrbanObjectId::UrbanObjectId() {
  SharedCtor();
}

void UrbanObjectId::InitAsDefaultInstance() {
}

UrbanObjectId::UrbanObjectId(const UrbanObjectId& from) {
  SharedCtor();
  MergeFrom(from);
}

void UrbanObjectId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UrbanObjectId::~UrbanObjectId() {
  SharedDtor();
}

void UrbanObjectId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UrbanObjectId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UrbanObjectId_descriptor_;
}

const UrbanObjectId& UrbanObjectId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UrbanObjectId* UrbanObjectId::default_instance_ = NULL;

UrbanObjectId* UrbanObjectId::New() const {
  return new UrbanObjectId;
}

void UrbanObjectId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UrbanObjectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UrbanObjectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UrbanObjectId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UrbanObjectId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UrbanObjectId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UrbanObjectId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UrbanObjectId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UrbanObjectId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UrbanObjectId::MergeFrom(const UrbanObjectId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UrbanObjectId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrbanObjectId::CopyFrom(const UrbanObjectId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrbanObjectId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UrbanObjectId::Swap(UrbanObjectId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UrbanObjectId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UrbanObjectId_descriptor_;
  metadata.reflection = UrbanObjectId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UrbanObjectKnowledgeId::kIdFieldNumber;
#endif  // !_MSC_VER

UrbanObjectKnowledgeId::UrbanObjectKnowledgeId() {
  SharedCtor();
}

void UrbanObjectKnowledgeId::InitAsDefaultInstance() {
}

UrbanObjectKnowledgeId::UrbanObjectKnowledgeId(const UrbanObjectKnowledgeId& from) {
  SharedCtor();
  MergeFrom(from);
}

void UrbanObjectKnowledgeId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UrbanObjectKnowledgeId::~UrbanObjectKnowledgeId() {
  SharedDtor();
}

void UrbanObjectKnowledgeId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UrbanObjectKnowledgeId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UrbanObjectKnowledgeId_descriptor_;
}

const UrbanObjectKnowledgeId& UrbanObjectKnowledgeId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UrbanObjectKnowledgeId* UrbanObjectKnowledgeId::default_instance_ = NULL;

UrbanObjectKnowledgeId* UrbanObjectKnowledgeId::New() const {
  return new UrbanObjectKnowledgeId;
}

void UrbanObjectKnowledgeId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UrbanObjectKnowledgeId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UrbanObjectKnowledgeId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UrbanObjectKnowledgeId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UrbanObjectKnowledgeId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UrbanObjectKnowledgeId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UrbanObjectKnowledgeId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UrbanObjectKnowledgeId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UrbanObjectKnowledgeId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UrbanObjectKnowledgeId::MergeFrom(const UrbanObjectKnowledgeId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UrbanObjectKnowledgeId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrbanObjectKnowledgeId::CopyFrom(const UrbanObjectKnowledgeId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrbanObjectKnowledgeId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UrbanObjectKnowledgeId::Swap(UrbanObjectKnowledgeId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UrbanObjectKnowledgeId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UrbanObjectKnowledgeId_descriptor_;
  metadata.reflection = UrbanObjectKnowledgeId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tasker::kAutomatFieldNumber;
const int Tasker::kFormationFieldNumber;
const int Tasker::kCrowdFieldNumber;
const int Tasker::kUnitFieldNumber;
#endif  // !_MSC_VER

Tasker::Tasker() {
  SharedCtor();
}

void Tasker::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
  crowd_ = const_cast< ::Common::CrowdId*>(&::Common::CrowdId::default_instance());
  unit_ = const_cast< ::Common::UnitId*>(&::Common::UnitId::default_instance());
}

Tasker::Tasker(const Tasker& from) {
  SharedCtor();
  MergeFrom(from);
}

void Tasker::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  formation_ = NULL;
  crowd_ = NULL;
  unit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tasker::~Tasker() {
  SharedDtor();
}

void Tasker::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete formation_;
    delete crowd_;
    delete unit_;
  }
}

const ::google::protobuf::Descriptor* Tasker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tasker_descriptor_;
}

const Tasker& Tasker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

Tasker* Tasker::default_instance_ = NULL;

Tasker* Tasker::New() const {
  return new Tasker;
}

void Tasker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
    if (_has_bit(2)) {
      if (crowd_ != NULL) crowd_->::Common::CrowdId::Clear();
    }
    if (_has_bit(3)) {
      if (unit_ != NULL) unit_->::Common::UnitId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tasker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_formation;
        break;
      }
      
      // optional .Common.FormationId formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectTag(26)) goto parse_crowd;
        break;
      }
      
      // optional .Common.CrowdId crowd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_crowd:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_crowd()));
        if (input->ExpectTag(34)) goto parse_unit;
        break;
      }
      
      // optional .Common.UnitId unit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tasker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Tasker::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->formation(), output);
  }
  
  // optional .Common.CrowdId crowd = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->crowd(), output);
  }
  
  // optional .Common.UnitId unit = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->unit(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tasker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formation(), target);
  }
  
  // optional .Common.CrowdId crowd = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->crowd(), target);
  }
  
  // optional .Common.UnitId unit = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->unit(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tasker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // optional .Common.FormationId formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
    // optional .Common.CrowdId crowd = 3;
    if (has_crowd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crowd());
    }
    
    // optional .Common.UnitId unit = 4;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Tasker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tasker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tasker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tasker::MergeFrom(const Tasker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
    if (from._has_bit(2)) {
      mutable_crowd()->::Common::CrowdId::MergeFrom(from.crowd());
    }
    if (from._has_bit(3)) {
      mutable_unit()->::Common::UnitId::MergeFrom(from.unit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tasker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tasker::CopyFrom(const Tasker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tasker::IsInitialized() const {
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  if (has_crowd()) {
    if (!this->crowd().IsInitialized()) return false;
  }
  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  return true;
}

void Tasker::Swap(Tasker* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(formation_, other->formation_);
    std::swap(crowd_, other->crowd_);
    std::swap(unit_, other->unit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tasker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tasker_descriptor_;
  metadata.reflection = Tasker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParentEntity::kAutomatFieldNumber;
const int ParentEntity::kFormationFieldNumber;
#endif  // !_MSC_VER

ParentEntity::ParentEntity() {
  SharedCtor();
}

void ParentEntity::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
}

ParentEntity::ParentEntity(const ParentEntity& from) {
  SharedCtor();
  MergeFrom(from);
}

void ParentEntity::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  formation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParentEntity::~ParentEntity() {
  SharedDtor();
}

void ParentEntity::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete formation_;
  }
}

const ::google::protobuf::Descriptor* ParentEntity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParentEntity_descriptor_;
}

const ParentEntity& ParentEntity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ParentEntity* ParentEntity::default_instance_ = NULL;

ParentEntity* ParentEntity::New() const {
  return new ParentEntity;
}

void ParentEntity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParentEntity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_formation;
        break;
      }
      
      // optional .Common.FormationId formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParentEntity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ParentEntity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->formation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParentEntity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParentEntity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // optional .Common.FormationId formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ParentEntity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParentEntity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParentEntity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParentEntity::MergeFrom(const ParentEntity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParentEntity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParentEntity::CopyFrom(const ParentEntity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParentEntity::IsInitialized() const {
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  return true;
}

void ParentEntity::Swap(ParentEntity* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParentEntity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParentEntity_descriptor_;
  metadata.reflection = ParentEntity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DrawingId::kIdFieldNumber;
#endif  // !_MSC_VER

DrawingId::DrawingId() {
  SharedCtor();
}

void DrawingId::InitAsDefaultInstance() {
}

DrawingId::DrawingId(const DrawingId& from) {
  SharedCtor();
  MergeFrom(from);
}

void DrawingId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DrawingId::~DrawingId() {
  SharedDtor();
}

void DrawingId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* DrawingId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DrawingId_descriptor_;
}

const DrawingId& DrawingId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

DrawingId* DrawingId::default_instance_ = NULL;

DrawingId* DrawingId::New() const {
  return new DrawingId;
}

void DrawingId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DrawingId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DrawingId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    DrawingId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DrawingId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DrawingId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void DrawingId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DrawingId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DrawingId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DrawingId::MergeFrom(const DrawingId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DrawingId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DrawingId::CopyFrom(const DrawingId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawingId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DrawingId::Swap(DrawingId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DrawingId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DrawingId_descriptor_;
  metadata.reflection = DrawingId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntelligenceId::kIdFieldNumber;
#endif  // !_MSC_VER

IntelligenceId::IntelligenceId() {
  SharedCtor();
}

void IntelligenceId::InitAsDefaultInstance() {
}

IntelligenceId::IntelligenceId(const IntelligenceId& from) {
  SharedCtor();
  MergeFrom(from);
}

void IntelligenceId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntelligenceId::~IntelligenceId() {
  SharedDtor();
}

void IntelligenceId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* IntelligenceId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntelligenceId_descriptor_;
}

const IntelligenceId& IntelligenceId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

IntelligenceId* IntelligenceId::default_instance_ = NULL;

IntelligenceId* IntelligenceId::New() const {
  return new IntelligenceId;
}

void IntelligenceId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntelligenceId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntelligenceId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    IntelligenceId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntelligenceId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntelligenceId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void IntelligenceId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntelligenceId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntelligenceId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntelligenceId::MergeFrom(const IntelligenceId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntelligenceId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntelligenceId::CopyFrom(const IntelligenceId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntelligenceId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void IntelligenceId::Swap(IntelligenceId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntelligenceId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntelligenceId_descriptor_;
  metadata.reflection = IntelligenceId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TacticalLineId::kIdFieldNumber;
#endif  // !_MSC_VER

TacticalLineId::TacticalLineId() {
  SharedCtor();
}

void TacticalLineId::InitAsDefaultInstance() {
}

TacticalLineId::TacticalLineId(const TacticalLineId& from) {
  SharedCtor();
  MergeFrom(from);
}

void TacticalLineId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TacticalLineId::~TacticalLineId() {
  SharedDtor();
}

void TacticalLineId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* TacticalLineId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TacticalLineId_descriptor_;
}

const TacticalLineId& TacticalLineId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

TacticalLineId* TacticalLineId::default_instance_ = NULL;

TacticalLineId* TacticalLineId::New() const {
  return new TacticalLineId;
}

void TacticalLineId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TacticalLineId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TacticalLineId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    TacticalLineId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TacticalLineId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TacticalLineId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void TacticalLineId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TacticalLineId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TacticalLineId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TacticalLineId::MergeFrom(const TacticalLineId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TacticalLineId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TacticalLineId::CopyFrom(const TacticalLineId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TacticalLineId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TacticalLineId::Swap(TacticalLineId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TacticalLineId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TacticalLineId_descriptor_;
  metadata.reflection = TacticalLineId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarkerId::kIdFieldNumber;
#endif  // !_MSC_VER

MarkerId::MarkerId() {
  SharedCtor();
}

void MarkerId::InitAsDefaultInstance() {
}

MarkerId::MarkerId(const MarkerId& from) {
  SharedCtor();
  MergeFrom(from);
}

void MarkerId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkerId::~MarkerId() {
  SharedDtor();
}

void MarkerId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MarkerId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkerId_descriptor_;
}

const MarkerId& MarkerId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MarkerId* MarkerId::default_instance_ = NULL;

MarkerId* MarkerId::New() const {
  return new MarkerId;
}

void MarkerId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarkerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MarkerId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarkerId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarkerId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MarkerId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkerId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkerId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkerId::MergeFrom(const MarkerId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkerId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerId::CopyFrom(const MarkerId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MarkerId::Swap(MarkerId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarkerId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkerId_descriptor_;
  metadata.reflection = MarkerId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireId::kIdFieldNumber;
#endif  // !_MSC_VER

FireId::FireId() {
  SharedCtor();
}

void FireId::InitAsDefaultInstance() {
}

FireId::FireId(const FireId& from) {
  SharedCtor();
  MergeFrom(from);
}

void FireId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireId::~FireId() {
  SharedDtor();
}

void FireId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FireId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireId_descriptor_;
}

const FireId& FireId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

FireId* FireId::default_instance_ = NULL;

FireId* FireId::New() const {
  return new FireId;
}

void FireId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FireId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FireId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireId::MergeFrom(const FireId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireId::CopyFrom(const FireId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FireId::Swap(FireId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireId_descriptor_;
  metadata.reflection = FireId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FireEffectId::kIdFieldNumber;
#endif  // !_MSC_VER

FireEffectId::FireEffectId() {
  SharedCtor();
}

void FireEffectId::InitAsDefaultInstance() {
}

FireEffectId::FireEffectId(const FireEffectId& from) {
  SharedCtor();
  MergeFrom(from);
}

void FireEffectId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FireEffectId::~FireEffectId() {
  SharedDtor();
}

void FireEffectId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FireEffectId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FireEffectId_descriptor_;
}

const FireEffectId& FireEffectId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

FireEffectId* FireEffectId::default_instance_ = NULL;

FireEffectId* FireEffectId::New() const {
  return new FireEffectId;
}

void FireEffectId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FireEffectId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FireEffectId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FireEffectId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FireEffectId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FireEffectId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FireEffectId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FireEffectId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FireEffectId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FireEffectId::MergeFrom(const FireEffectId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FireEffectId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FireEffectId::CopyFrom(const FireEffectId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FireEffectId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FireEffectId::Swap(FireEffectId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FireEffectId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FireEffectId_descriptor_;
  metadata.reflection = FireEffectId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportId::kIdFieldNumber;
#endif  // !_MSC_VER

ReportId::ReportId() {
  SharedCtor();
}

void ReportId::InitAsDefaultInstance() {
}

ReportId::ReportId(const ReportId& from) {
  SharedCtor();
  MergeFrom(from);
}

void ReportId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportId::~ReportId() {
  SharedDtor();
}

void ReportId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ReportId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportId_descriptor_;
}

const ReportId& ReportId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ReportId* ReportId::default_instance_ = NULL;

ReportId* ReportId::New() const {
  return new ReportId;
}

void ReportId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ReportId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ReportId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportId::MergeFrom(const ReportId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportId::CopyFrom(const ReportId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReportId::Swap(ReportId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportId_descriptor_;
  metadata.reflection = ReportId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeatherId::kIdFieldNumber;
#endif  // !_MSC_VER

WeatherId::WeatherId() {
  SharedCtor();
}

void WeatherId::InitAsDefaultInstance() {
}

WeatherId::WeatherId(const WeatherId& from) {
  SharedCtor();
  MergeFrom(from);
}

void WeatherId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeatherId::~WeatherId() {
  SharedDtor();
}

void WeatherId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* WeatherId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeatherId_descriptor_;
}

const WeatherId& WeatherId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

WeatherId* WeatherId::default_instance_ = NULL;

WeatherId* WeatherId::New() const {
  return new WeatherId;
}

void WeatherId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeatherId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeatherId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    WeatherId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeatherId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeatherId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void WeatherId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeatherId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeatherId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeatherId::MergeFrom(const WeatherId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeatherId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeatherId::CopyFrom(const WeatherId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeatherId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WeatherId::Swap(WeatherId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeatherId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeatherId_descriptor_;
  metadata.reflection = WeatherId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaintenanceRequestId::kIdFieldNumber;
#endif  // !_MSC_VER

MaintenanceRequestId::MaintenanceRequestId() {
  SharedCtor();
}

void MaintenanceRequestId::InitAsDefaultInstance() {
}

MaintenanceRequestId::MaintenanceRequestId(const MaintenanceRequestId& from) {
  SharedCtor();
  MergeFrom(from);
}

void MaintenanceRequestId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaintenanceRequestId::~MaintenanceRequestId() {
  SharedDtor();
}

void MaintenanceRequestId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MaintenanceRequestId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaintenanceRequestId_descriptor_;
}

const MaintenanceRequestId& MaintenanceRequestId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MaintenanceRequestId* MaintenanceRequestId::default_instance_ = NULL;

MaintenanceRequestId* MaintenanceRequestId::New() const {
  return new MaintenanceRequestId;
}

void MaintenanceRequestId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaintenanceRequestId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaintenanceRequestId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MaintenanceRequestId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaintenanceRequestId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaintenanceRequestId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MaintenanceRequestId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaintenanceRequestId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaintenanceRequestId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaintenanceRequestId::MergeFrom(const MaintenanceRequestId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaintenanceRequestId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintenanceRequestId::CopyFrom(const MaintenanceRequestId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintenanceRequestId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MaintenanceRequestId::Swap(MaintenanceRequestId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaintenanceRequestId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaintenanceRequestId_descriptor_;
  metadata.reflection = MaintenanceRequestId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MedicalRequestId::kIdFieldNumber;
#endif  // !_MSC_VER

MedicalRequestId::MedicalRequestId() {
  SharedCtor();
}

void MedicalRequestId::InitAsDefaultInstance() {
}

MedicalRequestId::MedicalRequestId(const MedicalRequestId& from) {
  SharedCtor();
  MergeFrom(from);
}

void MedicalRequestId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MedicalRequestId::~MedicalRequestId() {
  SharedDtor();
}

void MedicalRequestId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MedicalRequestId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MedicalRequestId_descriptor_;
}

const MedicalRequestId& MedicalRequestId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MedicalRequestId* MedicalRequestId::default_instance_ = NULL;

MedicalRequestId* MedicalRequestId::New() const {
  return new MedicalRequestId;
}

void MedicalRequestId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MedicalRequestId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MedicalRequestId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MedicalRequestId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MedicalRequestId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MedicalRequestId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MedicalRequestId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MedicalRequestId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MedicalRequestId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MedicalRequestId::MergeFrom(const MedicalRequestId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MedicalRequestId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MedicalRequestId::CopyFrom(const MedicalRequestId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MedicalRequestId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MedicalRequestId::Swap(MedicalRequestId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MedicalRequestId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MedicalRequestId_descriptor_;
  metadata.reflection = MedicalRequestId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SupplyRequestId::kIdFieldNumber;
#endif  // !_MSC_VER

SupplyRequestId::SupplyRequestId() {
  SharedCtor();
}

void SupplyRequestId::InitAsDefaultInstance() {
}

SupplyRequestId::SupplyRequestId(const SupplyRequestId& from) {
  SharedCtor();
  MergeFrom(from);
}

void SupplyRequestId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SupplyRequestId::~SupplyRequestId() {
  SharedDtor();
}

void SupplyRequestId::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SupplyRequestId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupplyRequestId_descriptor_;
}

const SupplyRequestId& SupplyRequestId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

SupplyRequestId* SupplyRequestId::default_instance_ = NULL;

SupplyRequestId* SupplyRequestId::New() const {
  return new SupplyRequestId;
}

void SupplyRequestId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SupplyRequestId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SupplyRequestId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SupplyRequestId::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SupplyRequestId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SupplyRequestId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SupplyRequestId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SupplyRequestId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SupplyRequestId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupplyRequestId::MergeFrom(const SupplyRequestId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SupplyRequestId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupplyRequestId::CopyFrom(const SupplyRequestId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupplyRequestId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SupplyRequestId::Swap(SupplyRequestId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SupplyRequestId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupplyRequestId_descriptor_;
  metadata.reflection = SupplyRequestId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AutomatType::kIdFieldNumber;
#endif  // !_MSC_VER

AutomatType::AutomatType() {
  SharedCtor();
}

void AutomatType::InitAsDefaultInstance() {
}

AutomatType::AutomatType(const AutomatType& from) {
  SharedCtor();
  MergeFrom(from);
}

void AutomatType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AutomatType::~AutomatType() {
  SharedDtor();
}

void AutomatType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* AutomatType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AutomatType_descriptor_;
}

const AutomatType& AutomatType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

AutomatType* AutomatType::default_instance_ = NULL;

AutomatType* AutomatType::New() const {
  return new AutomatType;
}

void AutomatType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AutomatType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AutomatType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    AutomatType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AutomatType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AutomatType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void AutomatType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AutomatType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AutomatType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AutomatType::MergeFrom(const AutomatType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AutomatType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AutomatType::CopyFrom(const AutomatType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutomatType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AutomatType::Swap(AutomatType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AutomatType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AutomatType_descriptor_;
  metadata.reflection = AutomatType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BreakdownType::kIdFieldNumber;
#endif  // !_MSC_VER

BreakdownType::BreakdownType() {
  SharedCtor();
}

void BreakdownType::InitAsDefaultInstance() {
}

BreakdownType::BreakdownType(const BreakdownType& from) {
  SharedCtor();
  MergeFrom(from);
}

void BreakdownType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreakdownType::~BreakdownType() {
  SharedDtor();
}

void BreakdownType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* BreakdownType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BreakdownType_descriptor_;
}

const BreakdownType& BreakdownType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

BreakdownType* BreakdownType::default_instance_ = NULL;

BreakdownType* BreakdownType::New() const {
  return new BreakdownType;
}

void BreakdownType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BreakdownType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BreakdownType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    BreakdownType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BreakdownType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BreakdownType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void BreakdownType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BreakdownType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BreakdownType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BreakdownType::MergeFrom(const BreakdownType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BreakdownType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakdownType::CopyFrom(const BreakdownType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakdownType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void BreakdownType::Swap(BreakdownType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BreakdownType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BreakdownType_descriptor_;
  metadata.reflection = BreakdownType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentType::kIdFieldNumber;
#endif  // !_MSC_VER

EquipmentType::EquipmentType() {
  SharedCtor();
}

void EquipmentType::InitAsDefaultInstance() {
}

EquipmentType::EquipmentType(const EquipmentType& from) {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentType::~EquipmentType() {
  SharedDtor();
}

void EquipmentType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* EquipmentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentType_descriptor_;
}

const EquipmentType& EquipmentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

EquipmentType* EquipmentType::default_instance_ = NULL;

EquipmentType* EquipmentType::New() const {
  return new EquipmentType;
}

void EquipmentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    EquipmentType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void EquipmentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentType::MergeFrom(const EquipmentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentType::CopyFrom(const EquipmentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void EquipmentType::Swap(EquipmentType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentType_descriptor_;
  metadata.reflection = EquipmentType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FragOrderType::kIdFieldNumber;
#endif  // !_MSC_VER

FragOrderType::FragOrderType() {
  SharedCtor();
}

void FragOrderType::InitAsDefaultInstance() {
}

FragOrderType::FragOrderType(const FragOrderType& from) {
  SharedCtor();
  MergeFrom(from);
}

void FragOrderType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FragOrderType::~FragOrderType() {
  SharedDtor();
}

void FragOrderType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FragOrderType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FragOrderType_descriptor_;
}

const FragOrderType& FragOrderType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

FragOrderType* FragOrderType::default_instance_ = NULL;

FragOrderType* FragOrderType::New() const {
  return new FragOrderType;
}

void FragOrderType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FragOrderType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FragOrderType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FragOrderType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FragOrderType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FragOrderType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FragOrderType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FragOrderType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FragOrderType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FragOrderType::MergeFrom(const FragOrderType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FragOrderType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FragOrderType::CopyFrom(const FragOrderType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FragOrderType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FragOrderType::Swap(FragOrderType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FragOrderType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FragOrderType_descriptor_;
  metadata.reflection = FragOrderType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionType::kIdFieldNumber;
#endif  // !_MSC_VER

MissionType::MissionType() {
  SharedCtor();
}

void MissionType::InitAsDefaultInstance() {
}

MissionType::MissionType(const MissionType& from) {
  SharedCtor();
  MergeFrom(from);
}

void MissionType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionType::~MissionType() {
  SharedDtor();
}

void MissionType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MissionType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionType_descriptor_;
}

const MissionType& MissionType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MissionType* MissionType::default_instance_ = NULL;

MissionType* MissionType::New() const {
  return new MissionType;
}

void MissionType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MissionType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MissionType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionType::MergeFrom(const MissionType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionType::CopyFrom(const MissionType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MissionType::Swap(MissionType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionType_descriptor_;
  metadata.reflection = MissionType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NBCAgentType::kIdFieldNumber;
#endif  // !_MSC_VER

NBCAgentType::NBCAgentType() {
  SharedCtor();
}

void NBCAgentType::InitAsDefaultInstance() {
}

NBCAgentType::NBCAgentType(const NBCAgentType& from) {
  SharedCtor();
  MergeFrom(from);
}

void NBCAgentType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NBCAgentType::~NBCAgentType() {
  SharedDtor();
}

void NBCAgentType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* NBCAgentType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NBCAgentType_descriptor_;
}

const NBCAgentType& NBCAgentType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

NBCAgentType* NBCAgentType::default_instance_ = NULL;

NBCAgentType* NBCAgentType::New() const {
  return new NBCAgentType;
}

void NBCAgentType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NBCAgentType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NBCAgentType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    NBCAgentType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NBCAgentType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NBCAgentType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void NBCAgentType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NBCAgentType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NBCAgentType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NBCAgentType::MergeFrom(const NBCAgentType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NBCAgentType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NBCAgentType::CopyFrom(const NBCAgentType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NBCAgentType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void NBCAgentType::Swap(NBCAgentType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NBCAgentType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NBCAgentType_descriptor_;
  metadata.reflection = NBCAgentType_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ObjectType::_default_id_;
#ifndef _MSC_VER
const int ObjectType::kIdFieldNumber;
#endif  // !_MSC_VER

ObjectType::ObjectType() {
  SharedCtor();
}

void ObjectType::InitAsDefaultInstance() {
}

ObjectType::ObjectType(const ObjectType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectType::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&_default_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectType::~ObjectType() {
  SharedDtor();
}

void ObjectType::SharedDtor() {
  if (id_ != &_default_id_) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectType_descriptor_;
}

const ObjectType& ObjectType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectType* ObjectType::default_instance_ = NULL;

ObjectType* ObjectType::New() const {
  return new ObjectType;
}

void ObjectType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (id_ != &_default_id_) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_id()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->id().data(), this->id().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectType::MergeFrom(const ObjectType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectType::CopyFrom(const ObjectType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectType::Swap(ObjectType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectType_descriptor_;
  metadata.reflection = ObjectType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrowdType::kIdFieldNumber;
#endif  // !_MSC_VER

CrowdType::CrowdType() {
  SharedCtor();
}

void CrowdType::InitAsDefaultInstance() {
}

CrowdType::CrowdType(const CrowdType& from) {
  SharedCtor();
  MergeFrom(from);
}

void CrowdType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrowdType::~CrowdType() {
  SharedDtor();
}

void CrowdType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CrowdType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrowdType_descriptor_;
}

const CrowdType& CrowdType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

CrowdType* CrowdType::default_instance_ = NULL;

CrowdType* CrowdType::New() const {
  return new CrowdType;
}

void CrowdType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrowdType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrowdType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CrowdType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrowdType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrowdType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CrowdType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrowdType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrowdType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrowdType::MergeFrom(const CrowdType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrowdType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrowdType::CopyFrom(const CrowdType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowdType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CrowdType::Swap(CrowdType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrowdType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrowdType_descriptor_;
  metadata.reflection = CrowdType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportType::kIdFieldNumber;
#endif  // !_MSC_VER

ReportType::ReportType() {
  SharedCtor();
}

void ReportType::InitAsDefaultInstance() {
}

ReportType::ReportType(const ReportType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ReportType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportType::~ReportType() {
  SharedDtor();
}

void ReportType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ReportType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportType_descriptor_;
}

const ReportType& ReportType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ReportType* ReportType::default_instance_ = NULL;

ReportType* ReportType::New() const {
  return new ReportType;
}

void ReportType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReportType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ReportType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReportType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReportType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ReportType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportType::MergeFrom(const ReportType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportType::CopyFrom(const ReportType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReportType::Swap(ReportType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportType_descriptor_;
  metadata.reflection = ReportType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceType::kIdFieldNumber;
#endif  // !_MSC_VER

ResourceType::ResourceType() {
  SharedCtor();
}

void ResourceType::InitAsDefaultInstance() {
}

ResourceType::ResourceType(const ResourceType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceType::~ResourceType() {
  SharedDtor();
}

void ResourceType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ResourceType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceType_descriptor_;
}

const ResourceType& ResourceType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ResourceType* ResourceType::default_instance_ = NULL;

ResourceType* ResourceType::New() const {
  return new ResourceType;
}

void ResourceType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceType::MergeFrom(const ResourceType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceType::CopyFrom(const ResourceType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResourceType::Swap(ResourceType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceType_descriptor_;
  metadata.reflection = ResourceType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitType::kIdFieldNumber;
#endif  // !_MSC_VER

UnitType::UnitType() {
  SharedCtor();
}

void UnitType::InitAsDefaultInstance() {
}

UnitType::UnitType(const UnitType& from) {
  SharedCtor();
  MergeFrom(from);
}

void UnitType::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitType::~UnitType() {
  SharedDtor();
}

void UnitType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* UnitType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitType_descriptor_;
}

const UnitType& UnitType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

UnitType* UnitType::default_instance_ = NULL;

UnitType* UnitType::New() const {
  return new UnitType;
}

void UnitType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &id_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    UnitType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnitType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnitType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void UnitType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitType::MergeFrom(const UnitType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitType::CopyFrom(const UnitType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnitType::Swap(UnitType* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitType_descriptor_;
  metadata.reflection = UnitType_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ResourceNetworkType::_default_name_;
#ifndef _MSC_VER
const int ResourceNetworkType::kNameFieldNumber;
#endif  // !_MSC_VER

ResourceNetworkType::ResourceNetworkType() {
  SharedCtor();
}

void ResourceNetworkType::InitAsDefaultInstance() {
}

ResourceNetworkType::ResourceNetworkType(const ResourceNetworkType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceNetworkType::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceNetworkType::~ResourceNetworkType() {
  SharedDtor();
}

void ResourceNetworkType::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ResourceNetworkType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceNetworkType_descriptor_;
}

const ResourceNetworkType& ResourceNetworkType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ResourceNetworkType* ResourceNetworkType::default_instance_ = NULL;

ResourceNetworkType* ResourceNetworkType::New() const {
  return new ResourceNetworkType;
}

void ResourceNetworkType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceNetworkType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceNetworkType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceNetworkType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceNetworkType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceNetworkType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceNetworkType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceNetworkType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceNetworkType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceNetworkType::MergeFrom(const ResourceNetworkType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceNetworkType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceNetworkType::CopyFrom(const ResourceNetworkType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceNetworkType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ResourceNetworkType::Swap(ResourceNetworkType* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceNetworkType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceNetworkType_descriptor_;
  metadata.reflection = ResourceNetworkType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgHeading::kHeadingFieldNumber;
#endif  // !_MSC_VER

MsgHeading::MsgHeading() {
  SharedCtor();
}

void MsgHeading::InitAsDefaultInstance() {
}

MsgHeading::MsgHeading(const MsgHeading& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgHeading::SharedCtor() {
  _cached_size_ = 0;
  heading_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHeading::~MsgHeading() {
  SharedDtor();
}

void MsgHeading::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgHeading::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHeading_descriptor_;
}

const MsgHeading& MsgHeading::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgHeading* MsgHeading::default_instance_ = NULL;

MsgHeading* MsgHeading::New() const {
  return new MsgHeading;
}

void MsgHeading::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heading_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgHeading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 heading = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heading_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgHeading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgHeading::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 heading = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->heading(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgHeading::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 heading = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->heading(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgHeading::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 heading = 1;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heading());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgHeading::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgHeading* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgHeading*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgHeading::MergeFrom(const MsgHeading& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_heading(from.heading());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgHeading::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHeading::CopyFrom(const MsgHeading& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHeading::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgHeading::Swap(MsgHeading* other) {
  if (other != this) {
    std::swap(heading_, other->heading_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgHeading::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHeading_descriptor_;
  metadata.reflection = MsgHeading_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgDateTime::_default_data_;
#ifndef _MSC_VER
const int MsgDateTime::kDataFieldNumber;
#endif  // !_MSC_VER

MsgDateTime::MsgDateTime() {
  SharedCtor();
}

void MsgDateTime::InitAsDefaultInstance() {
}

MsgDateTime::MsgDateTime(const MsgDateTime& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDateTime::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&_default_data_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDateTime::~MsgDateTime() {
  SharedDtor();
}

void MsgDateTime::SharedDtor() {
  if (data_ != &_default_data_) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgDateTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDateTime_descriptor_;
}

const MsgDateTime& MsgDateTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgDateTime* MsgDateTime::default_instance_ = NULL;

MsgDateTime* MsgDateTime::New() const {
  return new MsgDateTime;
}

void MsgDateTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (data_ != &_default_data_) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDateTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_data()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->data().data(), this->data().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDateTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDateTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDateTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDateTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDateTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDateTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDateTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDateTime::MergeFrom(const MsgDateTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDateTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDateTime::CopyFrom(const MsgDateTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDateTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgDateTime::Swap(MsgDateTime* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDateTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDateTime_descriptor_;
  metadata.reflection = MsgDateTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDotationStock::kRessourceIdFieldNumber;
const int MsgDotationStock::kQuantiteDisponibleFieldNumber;
#endif  // !_MSC_VER

MsgDotationStock::MsgDotationStock() {
  SharedCtor();
}

void MsgDotationStock::InitAsDefaultInstance() {
  ressource_id_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
}

MsgDotationStock::MsgDotationStock(const MsgDotationStock& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDotationStock::SharedCtor() {
  _cached_size_ = 0;
  ressource_id_ = NULL;
  quantite_disponible_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDotationStock::~MsgDotationStock() {
  SharedDtor();
}

void MsgDotationStock::SharedDtor() {
  if (this != default_instance_) {
    delete ressource_id_;
  }
}

const ::google::protobuf::Descriptor* MsgDotationStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDotationStock_descriptor_;
}

const MsgDotationStock& MsgDotationStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgDotationStock* MsgDotationStock::default_instance_ = NULL;

MsgDotationStock* MsgDotationStock::New() const {
  return new MsgDotationStock;
}

void MsgDotationStock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ressource_id_ != NULL) ressource_id_->::Common::ResourceType::Clear();
    }
    quantite_disponible_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDotationStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ResourceType ressource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ressource_id()));
        if (input->ExpectTag(16)) goto parse_quantite_disponible;
        break;
      }
      
      // required int32 quantite_disponible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantite_disponible:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantite_disponible_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDotationStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDotationStock::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ResourceType ressource_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->ressource_id(), output);
  }
  
  // required int32 quantite_disponible = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantite_disponible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDotationStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ResourceType ressource_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ressource_id(), target);
  }
  
  // required int32 quantite_disponible = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantite_disponible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDotationStock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ResourceType ressource_id = 1;
    if (has_ressource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ressource_id());
    }
    
    // required int32 quantite_disponible = 2;
    if (has_quantite_disponible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantite_disponible());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDotationStock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDotationStock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDotationStock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDotationStock::MergeFrom(const MsgDotationStock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_ressource_id()->::Common::ResourceType::MergeFrom(from.ressource_id());
    }
    if (from._has_bit(1)) {
      set_quantite_disponible(from.quantite_disponible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDotationStock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDotationStock::CopyFrom(const MsgDotationStock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDotationStock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_ressource_id()) {
    if (!this->ressource_id().IsInitialized()) return false;
  }
  return true;
}

void MsgDotationStock::Swap(MsgDotationStock* other) {
  if (other != this) {
    std::swap(ressource_id_, other->ressource_id_);
    std::swap(quantite_disponible_, other->quantite_disponible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDotationStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDotationStock_descriptor_;
  metadata.reflection = MsgDotationStock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfDotationStock::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfDotationStock::SeqOfDotationStock() {
  SharedCtor();
}

void SeqOfDotationStock::InitAsDefaultInstance() {
}

SeqOfDotationStock::SeqOfDotationStock(const SeqOfDotationStock& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfDotationStock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfDotationStock::~SeqOfDotationStock() {
  SharedDtor();
}

void SeqOfDotationStock::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfDotationStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfDotationStock_descriptor_;
}

const SeqOfDotationStock& SeqOfDotationStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

SeqOfDotationStock* SeqOfDotationStock::default_instance_ = NULL;

SeqOfDotationStock* SeqOfDotationStock::New() const {
  return new SeqOfDotationStock;
}

void SeqOfDotationStock::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfDotationStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgDotationStock elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfDotationStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfDotationStock::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgDotationStock elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfDotationStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgDotationStock elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfDotationStock::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgDotationStock elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfDotationStock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfDotationStock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfDotationStock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfDotationStock::MergeFrom(const SeqOfDotationStock& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfDotationStock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfDotationStock::CopyFrom(const SeqOfDotationStock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfDotationStock::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfDotationStock::Swap(SeqOfDotationStock* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfDotationStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfDotationStock_descriptor_;
  metadata.reflection = SeqOfDotationStock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDotationQuota::kRessourceIdFieldNumber;
const int MsgDotationQuota::kQuotaDisponibleFieldNumber;
#endif  // !_MSC_VER

MsgDotationQuota::MsgDotationQuota() {
  SharedCtor();
}

void MsgDotationQuota::InitAsDefaultInstance() {
  ressource_id_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
}

MsgDotationQuota::MsgDotationQuota(const MsgDotationQuota& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDotationQuota::SharedCtor() {
  _cached_size_ = 0;
  ressource_id_ = NULL;
  quota_disponible_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDotationQuota::~MsgDotationQuota() {
  SharedDtor();
}

void MsgDotationQuota::SharedDtor() {
  if (this != default_instance_) {
    delete ressource_id_;
  }
}

const ::google::protobuf::Descriptor* MsgDotationQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDotationQuota_descriptor_;
}

const MsgDotationQuota& MsgDotationQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgDotationQuota* MsgDotationQuota::default_instance_ = NULL;

MsgDotationQuota* MsgDotationQuota::New() const {
  return new MsgDotationQuota;
}

void MsgDotationQuota::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ressource_id_ != NULL) ressource_id_->::Common::ResourceType::Clear();
    }
    quota_disponible_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDotationQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ResourceType ressource_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_ressource_id()));
        if (input->ExpectTag(16)) goto parse_quota_disponible;
        break;
      }
      
      // required int32 quota_disponible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quota_disponible:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quota_disponible_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDotationQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDotationQuota::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ResourceType ressource_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->ressource_id(), output);
  }
  
  // required int32 quota_disponible = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quota_disponible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDotationQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ResourceType ressource_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ressource_id(), target);
  }
  
  // required int32 quota_disponible = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quota_disponible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDotationQuota::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ResourceType ressource_id = 1;
    if (has_ressource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ressource_id());
    }
    
    // required int32 quota_disponible = 2;
    if (has_quota_disponible()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quota_disponible());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDotationQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDotationQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDotationQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDotationQuota::MergeFrom(const MsgDotationQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_ressource_id()->::Common::ResourceType::MergeFrom(from.ressource_id());
    }
    if (from._has_bit(1)) {
      set_quota_disponible(from.quota_disponible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDotationQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDotationQuota::CopyFrom(const MsgDotationQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDotationQuota::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_ressource_id()) {
    if (!this->ressource_id().IsInitialized()) return false;
  }
  return true;
}

void MsgDotationQuota::Swap(MsgDotationQuota* other) {
  if (other != this) {
    std::swap(ressource_id_, other->ressource_id_);
    std::swap(quota_disponible_, other->quota_disponible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDotationQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDotationQuota_descriptor_;
  metadata.reflection = MsgDotationQuota_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeqOfDotationQuota::kElemFieldNumber;
#endif  // !_MSC_VER

SeqOfDotationQuota::SeqOfDotationQuota() {
  SharedCtor();
}

void SeqOfDotationQuota::InitAsDefaultInstance() {
}

SeqOfDotationQuota::SeqOfDotationQuota(const SeqOfDotationQuota& from) {
  SharedCtor();
  MergeFrom(from);
}

void SeqOfDotationQuota::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeqOfDotationQuota::~SeqOfDotationQuota() {
  SharedDtor();
}

void SeqOfDotationQuota::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* SeqOfDotationQuota::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeqOfDotationQuota_descriptor_;
}

const SeqOfDotationQuota& SeqOfDotationQuota::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

SeqOfDotationQuota* SeqOfDotationQuota::default_instance_ = NULL;

SeqOfDotationQuota* SeqOfDotationQuota::New() const {
  return new SeqOfDotationQuota;
}

void SeqOfDotationQuota::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeqOfDotationQuota::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgDotationQuota elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeqOfDotationQuota::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    SeqOfDotationQuota::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgDotationQuota elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeqOfDotationQuota::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgDotationQuota elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeqOfDotationQuota::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgDotationQuota elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void SeqOfDotationQuota::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeqOfDotationQuota* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeqOfDotationQuota*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeqOfDotationQuota::MergeFrom(const SeqOfDotationQuota& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeqOfDotationQuota::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqOfDotationQuota::CopyFrom(const SeqOfDotationQuota& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqOfDotationQuota::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void SeqOfDotationQuota::Swap(SeqOfDotationQuota* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeqOfDotationQuota::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeqOfDotationQuota_descriptor_;
  metadata.reflection = SeqOfDotationQuota_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeKnowledgeGroup::kAutomatFieldNumber;
const int MsgAutomatChangeKnowledgeGroup::kPartyFieldNumber;
const int MsgAutomatChangeKnowledgeGroup::kKnowledgeGroupFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeKnowledgeGroup::MsgAutomatChangeKnowledgeGroup() {
  SharedCtor();
}

void MsgAutomatChangeKnowledgeGroup::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  party_ = const_cast< ::Common::PartyId*>(&::Common::PartyId::default_instance());
  knowledge_group_ = const_cast< ::Common::KnowledgeGroupId*>(&::Common::KnowledgeGroupId::default_instance());
}

MsgAutomatChangeKnowledgeGroup::MsgAutomatChangeKnowledgeGroup(const MsgAutomatChangeKnowledgeGroup& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeKnowledgeGroup::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  party_ = NULL;
  knowledge_group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeKnowledgeGroup::~MsgAutomatChangeKnowledgeGroup() {
  SharedDtor();
}

void MsgAutomatChangeKnowledgeGroup::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete party_;
    delete knowledge_group_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeKnowledgeGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeKnowledgeGroup_descriptor_;
}

const MsgAutomatChangeKnowledgeGroup& MsgAutomatChangeKnowledgeGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAutomatChangeKnowledgeGroup* MsgAutomatChangeKnowledgeGroup::default_instance_ = NULL;

MsgAutomatChangeKnowledgeGroup* MsgAutomatChangeKnowledgeGroup::New() const {
  return new MsgAutomatChangeKnowledgeGroup;
}

void MsgAutomatChangeKnowledgeGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (party_ != NULL) party_->::Common::PartyId::Clear();
    }
    if (_has_bit(2)) {
      if (knowledge_group_ != NULL) knowledge_group_->::Common::KnowledgeGroupId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeKnowledgeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_party;
        break;
      }
      
      // required .Common.PartyId party = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_party:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_party()));
        if (input->ExpectTag(26)) goto parse_knowledge_group;
        break;
      }
      
      // required .Common.KnowledgeGroupId knowledge_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledge_group:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledge_group()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeKnowledgeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeKnowledgeGroup::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // required .Common.PartyId party = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->party(), output);
  }
  
  // required .Common.KnowledgeGroupId knowledge_group = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->knowledge_group(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeKnowledgeGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // required .Common.PartyId party = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->party(), target);
  }
  
  // required .Common.KnowledgeGroupId knowledge_group = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->knowledge_group(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeKnowledgeGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // required .Common.PartyId party = 2;
    if (has_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->party());
    }
    
    // required .Common.KnowledgeGroupId knowledge_group = 3;
    if (has_knowledge_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledge_group());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeKnowledgeGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeKnowledgeGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeKnowledgeGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeKnowledgeGroup::MergeFrom(const MsgAutomatChangeKnowledgeGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_party()->::Common::PartyId::MergeFrom(from.party());
    }
    if (from._has_bit(2)) {
      mutable_knowledge_group()->::Common::KnowledgeGroupId::MergeFrom(from.knowledge_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeKnowledgeGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeKnowledgeGroup::CopyFrom(const MsgAutomatChangeKnowledgeGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeKnowledgeGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_party()) {
    if (!this->party().IsInitialized()) return false;
  }
  if (has_knowledge_group()) {
    if (!this->knowledge_group().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatChangeKnowledgeGroup::Swap(MsgAutomatChangeKnowledgeGroup* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(party_, other->party_);
    std::swap(knowledge_group_, other->knowledge_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeKnowledgeGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeKnowledgeGroup_descriptor_;
  metadata.reflection = MsgAutomatChangeKnowledgeGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeLogisticLinks::kAutomatFieldNumber;
const int MsgAutomatChangeLogisticLinks::kTc2FieldNumber;
const int MsgAutomatChangeLogisticLinks::kMaintenanceFieldNumber;
const int MsgAutomatChangeLogisticLinks::kHealthFieldNumber;
const int MsgAutomatChangeLogisticLinks::kSupplyFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeLogisticLinks::MsgAutomatChangeLogisticLinks() {
  SharedCtor();
}

void MsgAutomatChangeLogisticLinks::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  tc2_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  maintenance_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  health_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  supply_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
}

MsgAutomatChangeLogisticLinks::MsgAutomatChangeLogisticLinks(const MsgAutomatChangeLogisticLinks& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeLogisticLinks::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  tc2_ = NULL;
  maintenance_ = NULL;
  health_ = NULL;
  supply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeLogisticLinks::~MsgAutomatChangeLogisticLinks() {
  SharedDtor();
}

void MsgAutomatChangeLogisticLinks::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete tc2_;
    delete maintenance_;
    delete health_;
    delete supply_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeLogisticLinks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeLogisticLinks_descriptor_;
}

const MsgAutomatChangeLogisticLinks& MsgAutomatChangeLogisticLinks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAutomatChangeLogisticLinks* MsgAutomatChangeLogisticLinks::default_instance_ = NULL;

MsgAutomatChangeLogisticLinks* MsgAutomatChangeLogisticLinks::New() const {
  return new MsgAutomatChangeLogisticLinks;
}

void MsgAutomatChangeLogisticLinks::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (tc2_ != NULL) tc2_->::Common::AutomatId::Clear();
    }
    if (_has_bit(2)) {
      if (maintenance_ != NULL) maintenance_->::Common::AutomatId::Clear();
    }
    if (_has_bit(3)) {
      if (health_ != NULL) health_->::Common::AutomatId::Clear();
    }
    if (_has_bit(4)) {
      if (supply_ != NULL) supply_->::Common::AutomatId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeLogisticLinks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_tc2;
        break;
      }
      
      // optional .Common.AutomatId tc2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tc2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tc2()));
        if (input->ExpectTag(26)) goto parse_maintenance;
        break;
      }
      
      // optional .Common.AutomatId maintenance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_maintenance:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_maintenance()));
        if (input->ExpectTag(34)) goto parse_health;
        break;
      }
      
      // optional .Common.AutomatId health = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_health:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_health()));
        if (input->ExpectTag(42)) goto parse_supply;
        break;
      }
      
      // optional .Common.AutomatId supply = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_supply:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_supply()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeLogisticLinks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeLogisticLinks::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // optional .Common.AutomatId tc2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->tc2(), output);
  }
  
  // optional .Common.AutomatId maintenance = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->maintenance(), output);
  }
  
  // optional .Common.AutomatId health = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->health(), output);
  }
  
  // optional .Common.AutomatId supply = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->supply(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeLogisticLinks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // optional .Common.AutomatId tc2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tc2(), target);
  }
  
  // optional .Common.AutomatId maintenance = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->maintenance(), target);
  }
  
  // optional .Common.AutomatId health = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->health(), target);
  }
  
  // optional .Common.AutomatId supply = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->supply(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeLogisticLinks::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // optional .Common.AutomatId tc2 = 2;
    if (has_tc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tc2());
    }
    
    // optional .Common.AutomatId maintenance = 3;
    if (has_maintenance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->maintenance());
    }
    
    // optional .Common.AutomatId health = 4;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->health());
    }
    
    // optional .Common.AutomatId supply = 5;
    if (has_supply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supply());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeLogisticLinks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeLogisticLinks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeLogisticLinks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeLogisticLinks::MergeFrom(const MsgAutomatChangeLogisticLinks& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_tc2()->::Common::AutomatId::MergeFrom(from.tc2());
    }
    if (from._has_bit(2)) {
      mutable_maintenance()->::Common::AutomatId::MergeFrom(from.maintenance());
    }
    if (from._has_bit(3)) {
      mutable_health()->::Common::AutomatId::MergeFrom(from.health());
    }
    if (from._has_bit(4)) {
      mutable_supply()->::Common::AutomatId::MergeFrom(from.supply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeLogisticLinks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeLogisticLinks::CopyFrom(const MsgAutomatChangeLogisticLinks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeLogisticLinks::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_tc2()) {
    if (!this->tc2().IsInitialized()) return false;
  }
  if (has_maintenance()) {
    if (!this->maintenance().IsInitialized()) return false;
  }
  if (has_health()) {
    if (!this->health().IsInitialized()) return false;
  }
  if (has_supply()) {
    if (!this->supply().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatChangeLogisticLinks::Swap(MsgAutomatChangeLogisticLinks* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(tc2_, other->tc2_);
    std::swap(maintenance_, other->maintenance_);
    std::swap(health_, other->health_);
    std::swap(supply_, other->supply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeLogisticLinks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeLogisticLinks_descriptor_;
  metadata.reflection = MsgAutomatChangeLogisticLinks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeSuperior_oid_superior::kFormationFieldNumber;
const int MsgAutomatChangeSuperior_oid_superior::kAutomatFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeSuperior_oid_superior::MsgAutomatChangeSuperior_oid_superior() {
  SharedCtor();
}

void MsgAutomatChangeSuperior_oid_superior::InitAsDefaultInstance() {
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
}

MsgAutomatChangeSuperior_oid_superior::MsgAutomatChangeSuperior_oid_superior(const MsgAutomatChangeSuperior_oid_superior& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeSuperior_oid_superior::SharedCtor() {
  _cached_size_ = 0;
  formation_ = NULL;
  automat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeSuperior_oid_superior::~MsgAutomatChangeSuperior_oid_superior() {
  SharedDtor();
}

void MsgAutomatChangeSuperior_oid_superior::SharedDtor() {
  if (this != default_instance_) {
    delete formation_;
    delete automat_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeSuperior_oid_superior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeSuperior_oid_superior_descriptor_;
}

const MsgAutomatChangeSuperior_oid_superior& MsgAutomatChangeSuperior_oid_superior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAutomatChangeSuperior_oid_superior* MsgAutomatChangeSuperior_oid_superior::default_instance_ = NULL;

MsgAutomatChangeSuperior_oid_superior* MsgAutomatChangeSuperior_oid_superior::New() const {
  return new MsgAutomatChangeSuperior_oid_superior;
}

void MsgAutomatChangeSuperior_oid_superior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
    if (_has_bit(1)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeSuperior_oid_superior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.FormationId formation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectTag(18)) goto parse_automat;
        break;
      }
      
      // optional .Common.AutomatId automat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeSuperior_oid_superior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeSuperior_oid_superior::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.FormationId formation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->formation(), output);
  }
  
  // optional .Common.AutomatId automat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->automat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeSuperior_oid_superior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.FormationId formation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formation(), target);
  }
  
  // optional .Common.AutomatId automat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->automat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeSuperior_oid_superior::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.FormationId formation = 1;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
    // optional .Common.AutomatId automat = 2;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeSuperior_oid_superior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeSuperior_oid_superior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeSuperior_oid_superior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeSuperior_oid_superior::MergeFrom(const MsgAutomatChangeSuperior_oid_superior& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
    if (from._has_bit(1)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeSuperior_oid_superior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeSuperior_oid_superior::CopyFrom(const MsgAutomatChangeSuperior_oid_superior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeSuperior_oid_superior::IsInitialized() const {
  
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatChangeSuperior_oid_superior::Swap(MsgAutomatChangeSuperior_oid_superior* other) {
  if (other != this) {
    std::swap(formation_, other->formation_);
    std::swap(automat_, other->automat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeSuperior_oid_superior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeSuperior_oid_superior_descriptor_;
  metadata.reflection = MsgAutomatChangeSuperior_oid_superior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAutomatChangeSuperior::kAutomatFieldNumber;
const int MsgAutomatChangeSuperior::kSuperiorFieldNumber;
#endif  // !_MSC_VER

MsgAutomatChangeSuperior::MsgAutomatChangeSuperior() {
  SharedCtor();
}

void MsgAutomatChangeSuperior::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  superior_ = const_cast< ::Common::MsgAutomatChangeSuperior_oid_superior*>(&::Common::MsgAutomatChangeSuperior_oid_superior::default_instance());
}

MsgAutomatChangeSuperior::MsgAutomatChangeSuperior(const MsgAutomatChangeSuperior& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatChangeSuperior::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  superior_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatChangeSuperior::~MsgAutomatChangeSuperior() {
  SharedDtor();
}

void MsgAutomatChangeSuperior::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete superior_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatChangeSuperior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatChangeSuperior_descriptor_;
}

const MsgAutomatChangeSuperior& MsgAutomatChangeSuperior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAutomatChangeSuperior* MsgAutomatChangeSuperior::default_instance_ = NULL;

MsgAutomatChangeSuperior* MsgAutomatChangeSuperior::New() const {
  return new MsgAutomatChangeSuperior;
}

void MsgAutomatChangeSuperior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (superior_ != NULL) superior_->::Common::MsgAutomatChangeSuperior_oid_superior::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatChangeSuperior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_superior;
        break;
      }
      
      // required .Common.MsgAutomatChangeSuperior_oid_superior superior = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_superior:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_superior()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatChangeSuperior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatChangeSuperior::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // required .Common.MsgAutomatChangeSuperior_oid_superior superior = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->superior(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatChangeSuperior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // required .Common.MsgAutomatChangeSuperior_oid_superior superior = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->superior(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatChangeSuperior::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // required .Common.MsgAutomatChangeSuperior_oid_superior superior = 2;
    if (has_superior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->superior());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatChangeSuperior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatChangeSuperior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatChangeSuperior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatChangeSuperior::MergeFrom(const MsgAutomatChangeSuperior& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_superior()->::Common::MsgAutomatChangeSuperior_oid_superior::MergeFrom(from.superior());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatChangeSuperior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatChangeSuperior::CopyFrom(const MsgAutomatChangeSuperior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatChangeSuperior::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_superior()) {
    if (!this->superior().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatChangeSuperior::Swap(MsgAutomatChangeSuperior* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(superior_, other->superior_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatChangeSuperior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatChangeSuperior_descriptor_;
  metadata.reflection = MsgAutomatChangeSuperior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgUnitChangeSuperior::kUnitFieldNumber;
const int MsgUnitChangeSuperior::kParentFieldNumber;
#endif  // !_MSC_VER

MsgUnitChangeSuperior::MsgUnitChangeSuperior() {
  SharedCtor();
}

void MsgUnitChangeSuperior::InitAsDefaultInstance() {
  unit_ = const_cast< ::Common::UnitId*>(&::Common::UnitId::default_instance());
  parent_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
}

MsgUnitChangeSuperior::MsgUnitChangeSuperior(const MsgUnitChangeSuperior& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitChangeSuperior::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  parent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitChangeSuperior::~MsgUnitChangeSuperior() {
  SharedDtor();
}

void MsgUnitChangeSuperior::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
    delete parent_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitChangeSuperior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitChangeSuperior_descriptor_;
}

const MsgUnitChangeSuperior& MsgUnitChangeSuperior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgUnitChangeSuperior* MsgUnitChangeSuperior::default_instance_ = NULL;

MsgUnitChangeSuperior* MsgUnitChangeSuperior::New() const {
  return new MsgUnitChangeSuperior;
}

void MsgUnitChangeSuperior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (unit_ != NULL) unit_->::Common::UnitId::Clear();
    }
    if (_has_bit(1)) {
      if (parent_ != NULL) parent_->::Common::AutomatId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitChangeSuperior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.UnitId unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit()));
        if (input->ExpectTag(18)) goto parse_parent;
        break;
      }
      
      // required .Common.AutomatId parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_parent()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitChangeSuperior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitChangeSuperior::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.UnitId unit = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->unit(), output);
  }
  
  // required .Common.AutomatId parent = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->parent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitChangeSuperior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.UnitId unit = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unit(), target);
  }
  
  // required .Common.AutomatId parent = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->parent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitChangeSuperior::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.UnitId unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }
    
    // required .Common.AutomatId parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitChangeSuperior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitChangeSuperior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitChangeSuperior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitChangeSuperior::MergeFrom(const MsgUnitChangeSuperior& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_unit()->::Common::UnitId::MergeFrom(from.unit());
    }
    if (from._has_bit(1)) {
      mutable_parent()->::Common::AutomatId::MergeFrom(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitChangeSuperior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitChangeSuperior::CopyFrom(const MsgUnitChangeSuperior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitChangeSuperior::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitChangeSuperior::Swap(MsgUnitChangeSuperior* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitChangeSuperior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitChangeSuperior_descriptor_;
  metadata.reflection = MsgUnitChangeSuperior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlStop::MsgControlStop() {
  SharedCtor();
}

void MsgControlStop::InitAsDefaultInstance() {
}

MsgControlStop::MsgControlStop(const MsgControlStop& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlStop::~MsgControlStop() {
  SharedDtor();
}

void MsgControlStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlStop_descriptor_;
}

const MsgControlStop& MsgControlStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgControlStop* MsgControlStop::default_instance_ = NULL;

MsgControlStop* MsgControlStop::New() const {
  return new MsgControlStop;
}

void MsgControlStop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlStop::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlStop::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlStop::MergeFrom(const MsgControlStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlStop::CopyFrom(const MsgControlStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlStop::IsInitialized() const {
  
  return true;
}

void MsgControlStop::Swap(MsgControlStop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlStop_descriptor_;
  metadata.reflection = MsgControlStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlPause::MsgControlPause() {
  SharedCtor();
}

void MsgControlPause::InitAsDefaultInstance() {
}

MsgControlPause::MsgControlPause(const MsgControlPause& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlPause::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlPause::~MsgControlPause() {
  SharedDtor();
}

void MsgControlPause::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlPause::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlPause_descriptor_;
}

const MsgControlPause& MsgControlPause::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgControlPause* MsgControlPause::default_instance_ = NULL;

MsgControlPause* MsgControlPause::New() const {
  return new MsgControlPause;
}

void MsgControlPause::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlPause::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlPause::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlPause::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlPause::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlPause::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlPause::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlPause* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlPause*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlPause::MergeFrom(const MsgControlPause& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlPause::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlPause::CopyFrom(const MsgControlPause& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlPause::IsInitialized() const {
  
  return true;
}

void MsgControlPause::Swap(MsgControlPause* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlPause::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlPause_descriptor_;
  metadata.reflection = MsgControlPause_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MsgControlResume::MsgControlResume() {
  SharedCtor();
}

void MsgControlResume::InitAsDefaultInstance() {
}

MsgControlResume::MsgControlResume(const MsgControlResume& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlResume::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlResume::~MsgControlResume() {
  SharedDtor();
}

void MsgControlResume::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlResume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlResume_descriptor_;
}

const MsgControlResume& MsgControlResume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgControlResume* MsgControlResume::default_instance_ = NULL;

MsgControlResume* MsgControlResume::New() const {
  return new MsgControlResume;
}

void MsgControlResume::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlResume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MsgControlResume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlResume::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlResume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlResume::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlResume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlResume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlResume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlResume::MergeFrom(const MsgControlResume& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlResume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlResume::CopyFrom(const MsgControlResume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlResume::IsInitialized() const {
  
  return true;
}

void MsgControlResume::Swap(MsgControlResume* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlResume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlResume_descriptor_;
  metadata.reflection = MsgControlResume_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlChangeTimeFactor::kTimeFactorFieldNumber;
#endif  // !_MSC_VER

MsgControlChangeTimeFactor::MsgControlChangeTimeFactor() {
  SharedCtor();
}

void MsgControlChangeTimeFactor::InitAsDefaultInstance() {
}

MsgControlChangeTimeFactor::MsgControlChangeTimeFactor(const MsgControlChangeTimeFactor& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlChangeTimeFactor::SharedCtor() {
  _cached_size_ = 0;
  time_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlChangeTimeFactor::~MsgControlChangeTimeFactor() {
  SharedDtor();
}

void MsgControlChangeTimeFactor::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlChangeTimeFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlChangeTimeFactor_descriptor_;
}

const MsgControlChangeTimeFactor& MsgControlChangeTimeFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgControlChangeTimeFactor* MsgControlChangeTimeFactor::default_instance_ = NULL;

MsgControlChangeTimeFactor* MsgControlChangeTimeFactor::New() const {
  return new MsgControlChangeTimeFactor;
}

void MsgControlChangeTimeFactor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_factor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlChangeTimeFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 time_factor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_factor_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlChangeTimeFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlChangeTimeFactor::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 time_factor = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->time_factor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlChangeTimeFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 time_factor = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->time_factor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlChangeTimeFactor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 time_factor = 1;
    if (has_time_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_factor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlChangeTimeFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlChangeTimeFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlChangeTimeFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlChangeTimeFactor::MergeFrom(const MsgControlChangeTimeFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_time_factor(from.time_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlChangeTimeFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlChangeTimeFactor::CopyFrom(const MsgControlChangeTimeFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlChangeTimeFactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgControlChangeTimeFactor::Swap(MsgControlChangeTimeFactor* other) {
  if (other != this) {
    std::swap(time_factor_, other->time_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlChangeTimeFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlChangeTimeFactor_descriptor_;
  metadata.reflection = MsgControlChangeTimeFactor_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgExercise::_default_name_;
#ifndef _MSC_VER
const int MsgExercise::kNameFieldNumber;
const int MsgExercise::kRunningFieldNumber;
#endif  // !_MSC_VER

MsgExercise::MsgExercise() {
  SharedCtor();
}

void MsgExercise::InitAsDefaultInstance() {
}

MsgExercise::MsgExercise(const MsgExercise& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgExercise::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  running_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgExercise::~MsgExercise() {
  SharedDtor();
}

void MsgExercise::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgExercise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgExercise_descriptor_;
}

const MsgExercise& MsgExercise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgExercise* MsgExercise::default_instance_ = NULL;

MsgExercise* MsgExercise::New() const {
  return new MsgExercise;
}

void MsgExercise::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    running_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgExercise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_running;
        break;
      }
      
      // optional bool running = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_running:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &running_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgExercise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgExercise::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional bool running = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->running(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgExercise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional bool running = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->running(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgExercise::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool running = 2;
    if (has_running()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgExercise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgExercise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgExercise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgExercise::MergeFrom(const MsgExercise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_running(from.running());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgExercise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgExercise::CopyFrom(const MsgExercise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgExercise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgExercise::Swap(MsgExercise* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(running_, other->running_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgExercise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgExercise_descriptor_;
  metadata.reflection = MsgExercise_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgNetworkAddress::_default_ip_;
#ifndef _MSC_VER
const int MsgNetworkAddress::kIpFieldNumber;
const int MsgNetworkAddress::kPortFieldNumber;
#endif  // !_MSC_VER

MsgNetworkAddress::MsgNetworkAddress() {
  SharedCtor();
}

void MsgNetworkAddress::InitAsDefaultInstance() {
}

MsgNetworkAddress::MsgNetworkAddress(const MsgNetworkAddress& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgNetworkAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&_default_ip_);
  port_ = 8080;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNetworkAddress::~MsgNetworkAddress() {
  SharedDtor();
}

void MsgNetworkAddress::SharedDtor() {
  if (ip_ != &_default_ip_) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgNetworkAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNetworkAddress_descriptor_;
}

const MsgNetworkAddress& MsgNetworkAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgNetworkAddress* MsgNetworkAddress::default_instance_ = NULL;

MsgNetworkAddress* MsgNetworkAddress::New() const {
  return new MsgNetworkAddress;
}

void MsgNetworkAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (ip_ != &_default_ip_) {
        ip_->clear();
      }
    }
    port_ = 8080;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNetworkAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_ip()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->ip().data(), this->ip().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2 [default = 8080];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_port:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &port_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNetworkAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgNetworkAddress::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // required int32 port = 2 [default = 8080];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNetworkAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // required int32 port = 2 [default = 8080];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNetworkAddress::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // required int32 port = 2 [default = 8080];
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgNetworkAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNetworkAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNetworkAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNetworkAddress::MergeFrom(const MsgNetworkAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_ip(from.ip());
    }
    if (from._has_bit(1)) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNetworkAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNetworkAddress::CopyFrom(const MsgNetworkAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNetworkAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgNetworkAddress::Swap(MsgNetworkAddress* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNetworkAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNetworkAddress_descriptor_;
  metadata.reflection = MsgNetworkAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCoordLatLong::kLatitudeFieldNumber;
const int MsgCoordLatLong::kLongitudeFieldNumber;
#endif  // !_MSC_VER

MsgCoordLatLong::MsgCoordLatLong() {
  SharedCtor();
}

void MsgCoordLatLong::InitAsDefaultInstance() {
}

MsgCoordLatLong::MsgCoordLatLong(const MsgCoordLatLong& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCoordLatLong::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCoordLatLong::~MsgCoordLatLong() {
  SharedDtor();
}

void MsgCoordLatLong::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCoordLatLong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCoordLatLong_descriptor_;
}

const MsgCoordLatLong& MsgCoordLatLong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgCoordLatLong* MsgCoordLatLong::default_instance_ = NULL;

MsgCoordLatLong* MsgCoordLatLong::New() const {
  return new MsgCoordLatLong;
}

void MsgCoordLatLong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCoordLatLong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &latitude_));
        _set_bit(0);
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }
      
      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          goto handle_uninterpreted;
        }
       parse_longitude:
        DO_(::google::protobuf::internal::WireFormatLite::ReadDouble(
              input, &longitude_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCoordLatLong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCoordLatLong::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required double latitude = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }
  
  // required double longitude = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCoordLatLong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double latitude = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }
  
  // required double longitude = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCoordLatLong::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCoordLatLong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCoordLatLong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCoordLatLong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCoordLatLong::MergeFrom(const MsgCoordLatLong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_latitude(from.latitude());
    }
    if (from._has_bit(1)) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCoordLatLong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCoordLatLong::CopyFrom(const MsgCoordLatLong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCoordLatLong::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgCoordLatLong::Swap(MsgCoordLatLong* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCoordLatLong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCoordLatLong_descriptor_;
  metadata.reflection = MsgCoordLatLong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCoordLatLongList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgCoordLatLongList::MsgCoordLatLongList() {
  SharedCtor();
}

void MsgCoordLatLongList::InitAsDefaultInstance() {
}

MsgCoordLatLongList::MsgCoordLatLongList(const MsgCoordLatLongList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCoordLatLongList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCoordLatLongList::~MsgCoordLatLongList() {
  SharedDtor();
}

void MsgCoordLatLongList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgCoordLatLongList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCoordLatLongList_descriptor_;
}

const MsgCoordLatLongList& MsgCoordLatLongList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgCoordLatLongList* MsgCoordLatLongList::default_instance_ = NULL;

MsgCoordLatLongList* MsgCoordLatLongList::New() const {
  return new MsgCoordLatLongList;
}

void MsgCoordLatLongList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCoordLatLongList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgCoordLatLong elem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(18)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCoordLatLongList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCoordLatLongList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgCoordLatLong elem = 2;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCoordLatLongList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgCoordLatLong elem = 2;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCoordLatLongList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgCoordLatLong elem = 2;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCoordLatLongList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCoordLatLongList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCoordLatLongList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCoordLatLongList::MergeFrom(const MsgCoordLatLongList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCoordLatLongList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCoordLatLongList::CopyFrom(const MsgCoordLatLongList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCoordLatLongList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgCoordLatLongList::Swap(MsgCoordLatLongList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCoordLatLongList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCoordLatLongList_descriptor_;
  metadata.reflection = MsgCoordLatLongList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgLocation_Geometry_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLocation_Geometry_descriptor_;
}
bool MsgLocation_Geometry_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgLocation_Geometry MsgLocation::circle;
const MsgLocation_Geometry MsgLocation::ellipse;
const MsgLocation_Geometry MsgLocation::line;
const MsgLocation_Geometry MsgLocation::rectangle;
const MsgLocation_Geometry MsgLocation::polygon;
const MsgLocation_Geometry MsgLocation::point;
const MsgLocation_Geometry MsgLocation::sector;
const MsgLocation_Geometry MsgLocation::none;
const MsgLocation_Geometry MsgLocation::Geometry_MIN;
const MsgLocation_Geometry MsgLocation::Geometry_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgLocation::kTypeFieldNumber;
const int MsgLocation::kCoordinatesFieldNumber;
#endif  // !_MSC_VER

MsgLocation::MsgLocation() {
  SharedCtor();
}

void MsgLocation::InitAsDefaultInstance() {
  coordinates_ = const_cast< ::Common::MsgCoordLatLongList*>(&::Common::MsgCoordLatLongList::default_instance());
}

MsgLocation::MsgLocation(const MsgLocation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLocation::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  coordinates_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLocation::~MsgLocation() {
  SharedDtor();
}

void MsgLocation::SharedDtor() {
  if (this != default_instance_) {
    delete coordinates_;
  }
}

const ::google::protobuf::Descriptor* MsgLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLocation_descriptor_;
}

const MsgLocation& MsgLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLocation* MsgLocation::default_instance_ = NULL;

MsgLocation* MsgLocation::New() const {
  return new MsgLocation;
}

void MsgLocation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (_has_bit(1)) {
      if (coordinates_ != NULL) coordinates_->::Common::MsgCoordLatLongList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation.Geometry type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Common::MsgLocation_Geometry_IsValid(value)) {
          set_type(static_cast< ::Common::MsgLocation_Geometry >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(18)) goto parse_coordinates;
        break;
      }
      
      // optional .Common.MsgCoordLatLongList coordinates = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_coordinates:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_coordinates()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLocation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation.Geometry type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .Common.MsgCoordLatLongList coordinates = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->coordinates(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation.Geometry type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .Common.MsgCoordLatLongList coordinates = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->coordinates(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLocation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation.Geometry type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .Common.MsgCoordLatLongList coordinates = 2;
    if (has_coordinates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinates());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLocation::MergeFrom(const MsgLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      mutable_coordinates()->::Common::MsgCoordLatLongList::MergeFrom(from.coordinates());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLocation::CopyFrom(const MsgLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_coordinates()) {
    if (!this->coordinates().IsInitialized()) return false;
  }
  return true;
}

void MsgLocation::Swap(MsgLocation* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(coordinates_, other->coordinates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLocation_descriptor_;
  metadata.reflection = MsgLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLine::kLocationFieldNumber;
#endif  // !_MSC_VER

MsgLine::MsgLine() {
  SharedCtor();
}

void MsgLine::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgLine::MsgLine(const MsgLine& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLine::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLine::~MsgLine() {
  SharedDtor();
}

void MsgLine::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLine_descriptor_;
}

const MsgLine& MsgLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLine* MsgLine::default_instance_ = NULL;

MsgLine* MsgLine::New() const {
  return new MsgLine;
}

void MsgLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLine::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLine::MergeFrom(const MsgLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLine::CopyFrom(const MsgLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgLine::Swap(MsgLine* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLine_descriptor_;
  metadata.reflection = MsgLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLocationList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgLocationList::MsgLocationList() {
  SharedCtor();
}

void MsgLocationList::InitAsDefaultInstance() {
}

MsgLocationList::MsgLocationList(const MsgLocationList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLocationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLocationList::~MsgLocationList() {
  SharedDtor();
}

void MsgLocationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLocationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLocationList_descriptor_;
}

const MsgLocationList& MsgLocationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLocationList* MsgLocationList::default_instance_ = NULL;

MsgLocationList* MsgLocationList::New() const {
  return new MsgLocationList;
}

void MsgLocationList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLocationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgLocation elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLocationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLocationList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgLocation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLocationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgLocation elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLocationList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgLocation elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLocationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLocationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLocationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLocationList::MergeFrom(const MsgLocationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLocationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLocationList::CopyFrom(const MsgLocationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLocationList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgLocationList::Swap(MsgLocationList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLocationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLocationList_descriptor_;
  metadata.reflection = MsgLocationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPath::kLocationFieldNumber;
#endif  // !_MSC_VER

MsgPath::MsgPath() {
  SharedCtor();
}

void MsgPath::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgPath::MsgPath(const MsgPath& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPath::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPath::~MsgPath() {
  SharedDtor();
}

void MsgPath::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPath_descriptor_;
}

const MsgPath& MsgPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPath* MsgPath::default_instance_ = NULL;

MsgPath* MsgPath::New() const {
  return new MsgPath;
}

void MsgPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPath::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPath::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPath::MergeFrom(const MsgPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPath::CopyFrom(const MsgPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgPath::Swap(MsgPath* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPath_descriptor_;
  metadata.reflection = MsgPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPathList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgPathList::MsgPathList() {
  SharedCtor();
}

void MsgPathList::InitAsDefaultInstance() {
}

MsgPathList::MsgPathList(const MsgPathList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPathList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPathList::~MsgPathList() {
  SharedDtor();
}

void MsgPathList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPathList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPathList_descriptor_;
}

const MsgPathList& MsgPathList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPathList* MsgPathList::default_instance_ = NULL;

MsgPathList* MsgPathList::New() const {
  return new MsgPathList;
}

void MsgPathList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPathList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgPath elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPathList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPathList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgPath elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPathList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgPath elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPathList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgPath elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPathList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPathList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPathList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPathList::MergeFrom(const MsgPathList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPathList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPathList::CopyFrom(const MsgPathList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPathList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgPathList::Swap(MsgPathList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPathList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPathList_descriptor_;
  metadata.reflection = MsgPathList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPoint::kLocationFieldNumber;
#endif  // !_MSC_VER

MsgPoint::MsgPoint() {
  SharedCtor();
}

void MsgPoint::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgPoint::MsgPoint(const MsgPoint& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPoint::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPoint::~MsgPoint() {
  SharedDtor();
}

void MsgPoint::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPoint_descriptor_;
}

const MsgPoint& MsgPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPoint* MsgPoint::default_instance_ = NULL;

MsgPoint* MsgPoint::New() const {
  return new MsgPoint;
}

void MsgPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPoint::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPoint::MergeFrom(const MsgPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPoint::CopyFrom(const MsgPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgPoint::Swap(MsgPoint* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPoint_descriptor_;
  metadata.reflection = MsgPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPointList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgPointList::MsgPointList() {
  SharedCtor();
}

void MsgPointList::InitAsDefaultInstance() {
}

MsgPointList::MsgPointList(const MsgPointList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPointList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPointList::~MsgPointList() {
  SharedDtor();
}

void MsgPointList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPointList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPointList_descriptor_;
}

const MsgPointList& MsgPointList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPointList* MsgPointList::default_instance_ = NULL;

MsgPointList* MsgPointList::New() const {
  return new MsgPointList;
}

void MsgPointList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPointList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgPoint elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPointList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPointList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgPoint elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPointList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgPoint elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPointList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgPoint elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPointList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPointList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPointList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPointList::MergeFrom(const MsgPointList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPointList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPointList::CopyFrom(const MsgPointList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPointList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgPointList::Swap(MsgPointList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPointList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPointList_descriptor_;
  metadata.reflection = MsgPointList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPolygon::kLocationFieldNumber;
#endif  // !_MSC_VER

MsgPolygon::MsgPolygon() {
  SharedCtor();
}

void MsgPolygon::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
}

MsgPolygon::MsgPolygon(const MsgPolygon& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPolygon::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPolygon::~MsgPolygon() {
  SharedDtor();
}

void MsgPolygon::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

const ::google::protobuf::Descriptor* MsgPolygon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPolygon_descriptor_;
}

const MsgPolygon& MsgPolygon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPolygon* MsgPolygon::default_instance_ = NULL;

MsgPolygon* MsgPolygon::New() const {
  return new MsgPolygon;
}

void MsgPolygon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPolygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPolygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPolygon::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPolygon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation location = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPolygon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPolygon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPolygon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPolygon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPolygon::MergeFrom(const MsgPolygon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPolygon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPolygon::CopyFrom(const MsgPolygon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPolygon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void MsgPolygon::Swap(MsgPolygon* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPolygon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPolygon_descriptor_;
  metadata.reflection = MsgPolygon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPolygonList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgPolygonList::MsgPolygonList() {
  SharedCtor();
}

void MsgPolygonList::InitAsDefaultInstance() {
}

MsgPolygonList::MsgPolygonList(const MsgPolygonList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPolygonList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPolygonList::~MsgPolygonList() {
  SharedDtor();
}

void MsgPolygonList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPolygonList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPolygonList_descriptor_;
}

const MsgPolygonList& MsgPolygonList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPolygonList* MsgPolygonList::default_instance_ = NULL;

MsgPolygonList* MsgPolygonList::New() const {
  return new MsgPolygonList;
}

void MsgPolygonList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPolygonList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgPolygon elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPolygonList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPolygonList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgPolygon elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPolygonList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgPolygon elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPolygonList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgPolygon elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPolygonList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPolygonList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPolygonList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPolygonList::MergeFrom(const MsgPolygonList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPolygonList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPolygonList::CopyFrom(const MsgPolygonList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPolygonList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgPolygonList::Swap(MsgPolygonList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPolygonList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPolygonList_descriptor_;
  metadata.reflection = MsgPolygonList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMedicalPriorities::kElemFieldNumber;
#endif  // !_MSC_VER

MsgLogMedicalPriorities::MsgLogMedicalPriorities() {
  SharedCtor();
}

void MsgLogMedicalPriorities::InitAsDefaultInstance() {
}

MsgLogMedicalPriorities::MsgLogMedicalPriorities(const MsgLogMedicalPriorities& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMedicalPriorities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMedicalPriorities::~MsgLogMedicalPriorities() {
  SharedDtor();
}

void MsgLogMedicalPriorities::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMedicalPriorities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMedicalPriorities_descriptor_;
}

const MsgLogMedicalPriorities& MsgLogMedicalPriorities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLogMedicalPriorities* MsgLogMedicalPriorities::default_instance_ = NULL;

MsgLogMedicalPriorities* MsgLogMedicalPriorities::New() const {
  return new MsgLogMedicalPriorities;
}

void MsgLogMedicalPriorities::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMedicalPriorities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.EnumHumanWound elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_elem:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumHumanWound_IsValid(value)) {
          add_elem(static_cast< Common::EnumHumanWound >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(8)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMedicalPriorities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMedicalPriorities::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.EnumHumanWound elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMedicalPriorities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.EnumHumanWound elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMedicalPriorities::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.EnumHumanWound elem = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->elem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->elem(i));
    }
    total_size += 1 * this->elem_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMedicalPriorities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMedicalPriorities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMedicalPriorities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMedicalPriorities::MergeFrom(const MsgLogMedicalPriorities& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMedicalPriorities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMedicalPriorities::CopyFrom(const MsgLogMedicalPriorities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMedicalPriorities::IsInitialized() const {
  
  return true;
}

void MsgLogMedicalPriorities::Swap(MsgLogMedicalPriorities* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMedicalPriorities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMedicalPriorities_descriptor_;
  metadata.reflection = MsgLogMedicalPriorities_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ObstacleType_DemolitionTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleType_DemolitionTargetType_descriptor_;
}
bool ObstacleType_DemolitionTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ObstacleType_DemolitionTargetType ObstacleType::preliminary;
const ObstacleType_DemolitionTargetType ObstacleType::reserved;
const ObstacleType_DemolitionTargetType ObstacleType::DemolitionTargetType_MIN;
const ObstacleType_DemolitionTargetType ObstacleType::DemolitionTargetType_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ObstacleType::ObstacleType() {
  SharedCtor();
}

void ObstacleType::InitAsDefaultInstance() {
}

ObstacleType::ObstacleType(const ObstacleType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObstacleType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleType::~ObstacleType() {
  SharedDtor();
}

void ObstacleType::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObstacleType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleType_descriptor_;
}

const ObstacleType& ObstacleType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObstacleType* ObstacleType::default_instance_ = NULL;

ObstacleType* ObstacleType::New() const {
  return new ObstacleType;
}

void ObstacleType::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ObstacleType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObstacleType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObstacleType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObstacleType::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObstacleType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleType::MergeFrom(const ObstacleType& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleType::CopyFrom(const ObstacleType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleType::IsInitialized() const {
  
  return true;
}

void ObstacleType::Swap(ObstacleType* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleType_descriptor_;
  metadata.reflection = ObstacleType_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgPlannedWork::_default_type_;
#ifndef _MSC_VER
const int MsgPlannedWork::kTypeFieldNumber;
const int MsgPlannedWork::kPositionFieldNumber;
const int MsgPlannedWork::kTypeObstacleFieldNumber;
const int MsgPlannedWork::kDensiteFieldNumber;
const int MsgPlannedWork::kTc2FieldNumber;
const int MsgPlannedWork::kActivityTimeFieldNumber;
#endif  // !_MSC_VER

MsgPlannedWork::MsgPlannedWork() {
  SharedCtor();
}

void MsgPlannedWork::InitAsDefaultInstance() {
  position_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  tc2_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
}

MsgPlannedWork::MsgPlannedWork(const MsgPlannedWork& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlannedWork::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&_default_type_);
  position_ = NULL;
  type_obstacle_ = 0;
  densite_ = 0;
  tc2_ = NULL;
  activity_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlannedWork::~MsgPlannedWork() {
  SharedDtor();
}

void MsgPlannedWork::SharedDtor() {
  if (type_ != &_default_type_) {
    delete type_;
  }
  if (this != default_instance_) {
    delete position_;
    delete tc2_;
  }
}

const ::google::protobuf::Descriptor* MsgPlannedWork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlannedWork_descriptor_;
}

const MsgPlannedWork& MsgPlannedWork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPlannedWork* MsgPlannedWork::default_instance_ = NULL;

MsgPlannedWork* MsgPlannedWork::New() const {
  return new MsgPlannedWork;
}

void MsgPlannedWork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (type_ != &_default_type_) {
        type_->clear();
      }
    }
    if (_has_bit(1)) {
      if (position_ != NULL) position_->::Common::MsgLocation::Clear();
    }
    type_obstacle_ = 0;
    densite_ = 0;
    if (_has_bit(4)) {
      if (tc2_ != NULL) tc2_->::Common::AutomatId::Clear();
    }
    activity_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlannedWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_type()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->type().data(), this->type().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // required .Common.MsgLocation position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_position:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_position()));
        if (input->ExpectTag(24)) goto parse_type_obstacle;
        break;
      }
      
      // optional .Common.ObstacleType.DemolitionTargetType type_obstacle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_obstacle:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Common::ObstacleType_DemolitionTargetType_IsValid(value)) {
          set_type_obstacle(static_cast< ::Common::ObstacleType_DemolitionTargetType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(37)) goto parse_densite;
        break;
      }
      
      // optional float densite = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_densite:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &densite_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_tc2;
        break;
      }
      
      // optional .Common.AutomatId tc2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tc2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tc2()));
        if (input->ExpectTag(48)) goto parse_activity_time;
        break;
      }
      
      // optional int32 activity_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activity_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activity_time_));
        _set_bit(5);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlannedWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlannedWork::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }
  
  // required .Common.MsgLocation position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->position(), output);
  }
  
  // optional .Common.ObstacleType.DemolitionTargetType type_obstacle = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type_obstacle(), output);
  }
  
  // optional float densite = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->densite(), output);
  }
  
  // optional .Common.AutomatId tc2 = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->tc2(), output);
  }
  
  // optional int32 activity_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activity_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlannedWork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }
  
  // required .Common.MsgLocation position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // optional .Common.ObstacleType.DemolitionTargetType type_obstacle = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type_obstacle(), target);
  }
  
  // optional float densite = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->densite(), target);
  }
  
  // optional .Common.AutomatId tc2 = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tc2(), target);
  }
  
  // optional int32 activity_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activity_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlannedWork::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
    // required .Common.MsgLocation position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .Common.ObstacleType.DemolitionTargetType type_obstacle = 3;
    if (has_type_obstacle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_obstacle());
    }
    
    // optional float densite = 4;
    if (has_densite()) {
      total_size += 1 + 4;
    }
    
    // optional .Common.AutomatId tc2 = 5;
    if (has_tc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tc2());
    }
    
    // optional int32 activity_time = 6;
    if (has_activity_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlannedWork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlannedWork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlannedWork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlannedWork::MergeFrom(const MsgPlannedWork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      mutable_position()->::Common::MsgLocation::MergeFrom(from.position());
    }
    if (from._has_bit(2)) {
      set_type_obstacle(from.type_obstacle());
    }
    if (from._has_bit(3)) {
      set_densite(from.densite());
    }
    if (from._has_bit(4)) {
      mutable_tc2()->::Common::AutomatId::MergeFrom(from.tc2());
    }
    if (from._has_bit(5)) {
      set_activity_time(from.activity_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlannedWork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlannedWork::CopyFrom(const MsgPlannedWork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlannedWork::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_tc2()) {
    if (!this->tc2().IsInitialized()) return false;
  }
  return true;
}

void MsgPlannedWork::Swap(MsgPlannedWork* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(position_, other->position_);
    std::swap(type_obstacle_, other->type_obstacle_);
    std::swap(densite_, other->densite_);
    std::swap(tc2_, other->tc2_);
    std::swap(activity_time_, other->activity_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlannedWork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlannedWork_descriptor_;
  metadata.reflection = MsgPlannedWork_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPlannedWorkList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgPlannedWorkList::MsgPlannedWorkList() {
  SharedCtor();
}

void MsgPlannedWorkList::InitAsDefaultInstance() {
}

MsgPlannedWorkList::MsgPlannedWorkList(const MsgPlannedWorkList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlannedWorkList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlannedWorkList::~MsgPlannedWorkList() {
  SharedDtor();
}

void MsgPlannedWorkList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlannedWorkList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlannedWorkList_descriptor_;
}

const MsgPlannedWorkList& MsgPlannedWorkList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgPlannedWorkList* MsgPlannedWorkList::default_instance_ = NULL;

MsgPlannedWorkList* MsgPlannedWorkList::New() const {
  return new MsgPlannedWorkList;
}

void MsgPlannedWorkList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlannedWorkList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgPlannedWork elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlannedWorkList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlannedWorkList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgPlannedWork elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlannedWorkList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgPlannedWork elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlannedWorkList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgPlannedWork elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlannedWorkList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlannedWorkList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlannedWorkList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlannedWorkList::MergeFrom(const MsgPlannedWorkList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlannedWorkList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlannedWorkList::CopyFrom(const MsgPlannedWorkList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlannedWorkList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgPlannedWorkList::Swap(MsgPlannedWorkList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlannedWorkList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlannedWorkList_descriptor_;
  metadata.reflection = MsgPlannedWorkList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLogMaintenancePriorities::kElemFieldNumber;
#endif  // !_MSC_VER

MsgLogMaintenancePriorities::MsgLogMaintenancePriorities() {
  SharedCtor();
}

void MsgLogMaintenancePriorities::InitAsDefaultInstance() {
}

MsgLogMaintenancePriorities::MsgLogMaintenancePriorities(const MsgLogMaintenancePriorities& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLogMaintenancePriorities::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLogMaintenancePriorities::~MsgLogMaintenancePriorities() {
  SharedDtor();
}

void MsgLogMaintenancePriorities::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLogMaintenancePriorities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLogMaintenancePriorities_descriptor_;
}

const MsgLogMaintenancePriorities& MsgLogMaintenancePriorities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLogMaintenancePriorities* MsgLogMaintenancePriorities::default_instance_ = NULL;

MsgLogMaintenancePriorities* MsgLogMaintenancePriorities::New() const {
  return new MsgLogMaintenancePriorities;
}

void MsgLogMaintenancePriorities::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLogMaintenancePriorities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.EquipmentType elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLogMaintenancePriorities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLogMaintenancePriorities::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.EquipmentType elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLogMaintenancePriorities::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.EquipmentType elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLogMaintenancePriorities::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.EquipmentType elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLogMaintenancePriorities::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLogMaintenancePriorities* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLogMaintenancePriorities*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLogMaintenancePriorities::MergeFrom(const MsgLogMaintenancePriorities& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLogMaintenancePriorities::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLogMaintenancePriorities::CopyFrom(const MsgLogMaintenancePriorities& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogMaintenancePriorities::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgLogMaintenancePriorities::Swap(MsgLogMaintenancePriorities* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLogMaintenancePriorities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLogMaintenancePriorities_descriptor_;
  metadata.reflection = MsgLogMaintenancePriorities_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionObjective::kLocalisationFieldNumber;
const int MsgMissionObjective::kHoraireFieldNumber;
#endif  // !_MSC_VER

MsgMissionObjective::MsgMissionObjective() {
  SharedCtor();
}

void MsgMissionObjective::InitAsDefaultInstance() {
  localisation_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  horaire_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgMissionObjective::MsgMissionObjective(const MsgMissionObjective& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMissionObjective::SharedCtor() {
  _cached_size_ = 0;
  localisation_ = NULL;
  horaire_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionObjective::~MsgMissionObjective() {
  SharedDtor();
}

void MsgMissionObjective::SharedDtor() {
  if (this != default_instance_) {
    delete localisation_;
    delete horaire_;
  }
}

const ::google::protobuf::Descriptor* MsgMissionObjective::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionObjective_descriptor_;
}

const MsgMissionObjective& MsgMissionObjective::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgMissionObjective* MsgMissionObjective::default_instance_ = NULL;

MsgMissionObjective* MsgMissionObjective::New() const {
  return new MsgMissionObjective;
}

void MsgMissionObjective::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (localisation_ != NULL) localisation_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(1)) {
      if (horaire_ != NULL) horaire_->::Common::MsgDateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionObjective::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocation localisation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_localisation()));
        if (input->ExpectTag(18)) goto parse_horaire;
        break;
      }
      
      // required .Common.MsgDateTime horaire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_horaire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_horaire()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMissionObjective::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMissionObjective::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocation localisation = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->localisation(), output);
  }
  
  // required .Common.MsgDateTime horaire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->horaire(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMissionObjective::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocation localisation = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->localisation(), target);
  }
  
  // required .Common.MsgDateTime horaire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horaire(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMissionObjective::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocation localisation = 1;
    if (has_localisation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->localisation());
    }
    
    // required .Common.MsgDateTime horaire = 2;
    if (has_horaire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horaire());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMissionObjective::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionObjective* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionObjective*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionObjective::MergeFrom(const MsgMissionObjective& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_localisation()->::Common::MsgLocation::MergeFrom(from.localisation());
    }
    if (from._has_bit(1)) {
      mutable_horaire()->::Common::MsgDateTime::MergeFrom(from.horaire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionObjective::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionObjective::CopyFrom(const MsgMissionObjective& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionObjective::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_localisation()) {
    if (!this->localisation().IsInitialized()) return false;
  }
  if (has_horaire()) {
    if (!this->horaire().IsInitialized()) return false;
  }
  return true;
}

void MsgMissionObjective::Swap(MsgMissionObjective* other) {
  if (other != this) {
    std::swap(localisation_, other->localisation_);
    std::swap(horaire_, other->horaire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionObjective::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionObjective_descriptor_;
  metadata.reflection = MsgMissionObjective_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionObjectiveList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgMissionObjectiveList::MsgMissionObjectiveList() {
  SharedCtor();
}

void MsgMissionObjectiveList::InitAsDefaultInstance() {
}

MsgMissionObjectiveList::MsgMissionObjectiveList(const MsgMissionObjectiveList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMissionObjectiveList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionObjectiveList::~MsgMissionObjectiveList() {
  SharedDtor();
}

void MsgMissionObjectiveList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMissionObjectiveList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionObjectiveList_descriptor_;
}

const MsgMissionObjectiveList& MsgMissionObjectiveList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgMissionObjectiveList* MsgMissionObjectiveList::default_instance_ = NULL;

MsgMissionObjectiveList* MsgMissionObjectiveList::New() const {
  return new MsgMissionObjectiveList;
}

void MsgMissionObjectiveList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionObjectiveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgMissionObjective elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMissionObjectiveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMissionObjectiveList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgMissionObjective elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMissionObjectiveList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgMissionObjective elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMissionObjectiveList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgMissionObjective elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMissionObjectiveList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionObjectiveList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionObjectiveList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionObjectiveList::MergeFrom(const MsgMissionObjectiveList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionObjectiveList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionObjectiveList::CopyFrom(const MsgMissionObjectiveList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionObjectiveList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgMissionObjectiveList::Swap(MsgMissionObjectiveList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionObjectiveList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionObjectiveList_descriptor_;
  metadata.reflection = MsgMissionObjectiveList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgLimaOrder_Function_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLimaOrder_Function_descriptor_;
}
bool MsgLimaOrder_Function_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgLimaOrder_Function MsgLimaOrder::ligne_debouche;
const MsgLimaOrder_Function MsgLimaOrder::ligne_changement_attitude;
const MsgLimaOrder_Function MsgLimaOrder::ligne_coordination;
const MsgLimaOrder_Function MsgLimaOrder::ligne_interdire;
const MsgLimaOrder_Function MsgLimaOrder::ligne_objectif;
const MsgLimaOrder_Function MsgLimaOrder::ligne_coup_arret;
const MsgLimaOrder_Function MsgLimaOrder::ligne_recueil;
const MsgLimaOrder_Function MsgLimaOrder::ligne_debut_mission;
const MsgLimaOrder_Function MsgLimaOrder::ligne_fin_mission;
const MsgLimaOrder_Function MsgLimaOrder::ligne_identification_accueil;
const MsgLimaOrder_Function MsgLimaOrder::Function_MIN;
const MsgLimaOrder_Function MsgLimaOrder::Function_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgLimaOrder::kLimaFieldNumber;
const int MsgLimaOrder::kHoraireFieldNumber;
const int MsgLimaOrder::kFonctionsFieldNumber;
#endif  // !_MSC_VER

MsgLimaOrder::MsgLimaOrder() {
  SharedCtor();
}

void MsgLimaOrder::InitAsDefaultInstance() {
  lima_ = const_cast< ::Common::MsgLine*>(&::Common::MsgLine::default_instance());
  horaire_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgLimaOrder::MsgLimaOrder(const MsgLimaOrder& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLimaOrder::SharedCtor() {
  _cached_size_ = 0;
  lima_ = NULL;
  horaire_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLimaOrder::~MsgLimaOrder() {
  SharedDtor();
}

void MsgLimaOrder::SharedDtor() {
  if (this != default_instance_) {
    delete lima_;
    delete horaire_;
  }
}

const ::google::protobuf::Descriptor* MsgLimaOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLimaOrder_descriptor_;
}

const MsgLimaOrder& MsgLimaOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLimaOrder* MsgLimaOrder::default_instance_ = NULL;

MsgLimaOrder* MsgLimaOrder::New() const {
  return new MsgLimaOrder;
}

void MsgLimaOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (lima_ != NULL) lima_->::Common::MsgLine::Clear();
    }
    if (_has_bit(1)) {
      if (horaire_ != NULL) horaire_->::Common::MsgDateTime::Clear();
    }
  }
  fonctions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLimaOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLine lima = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_lima()));
        if (input->ExpectTag(18)) goto parse_horaire;
        break;
      }
      
      // required .Common.MsgDateTime horaire = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_horaire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_horaire()));
        if (input->ExpectTag(24)) goto parse_fonctions;
        break;
      }
      
      // repeated .Common.MsgLimaOrder.Function fonctions = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_fonctions:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Common::MsgLimaOrder_Function_IsValid(value)) {
          add_fonctions(static_cast< ::Common::MsgLimaOrder_Function >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(24)) goto parse_fonctions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLimaOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLimaOrder::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLine lima = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->lima(), output);
  }
  
  // required .Common.MsgDateTime horaire = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->horaire(), output);
  }
  
  // repeated .Common.MsgLimaOrder.Function fonctions = 3;
  for (int i = 0; i < this->fonctions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fonctions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLimaOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLine lima = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lima(), target);
  }
  
  // required .Common.MsgDateTime horaire = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horaire(), target);
  }
  
  // repeated .Common.MsgLimaOrder.Function fonctions = 3;
  for (int i = 0; i < this->fonctions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->fonctions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLimaOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLine lima = 1;
    if (has_lima()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lima());
    }
    
    // required .Common.MsgDateTime horaire = 2;
    if (has_horaire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horaire());
    }
    
  }
  // repeated .Common.MsgLimaOrder.Function fonctions = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->fonctions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->fonctions(i));
    }
    total_size += 1 * this->fonctions_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLimaOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLimaOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLimaOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLimaOrder::MergeFrom(const MsgLimaOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  fonctions_.MergeFrom(from.fonctions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_lima()->::Common::MsgLine::MergeFrom(from.lima());
    }
    if (from._has_bit(1)) {
      mutable_horaire()->::Common::MsgDateTime::MergeFrom(from.horaire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLimaOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLimaOrder::CopyFrom(const MsgLimaOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLimaOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_lima()) {
    if (!this->lima().IsInitialized()) return false;
  }
  if (has_horaire()) {
    if (!this->horaire().IsInitialized()) return false;
  }
  return true;
}

void MsgLimaOrder::Swap(MsgLimaOrder* other) {
  if (other != this) {
    std::swap(lima_, other->lima_);
    std::swap(horaire_, other->horaire_);
    fonctions_.Swap(&other->fonctions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLimaOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLimaOrder_descriptor_;
  metadata.reflection = MsgLimaOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLimasOrder::kElemFieldNumber;
#endif  // !_MSC_VER

MsgLimasOrder::MsgLimasOrder() {
  SharedCtor();
}

void MsgLimasOrder::InitAsDefaultInstance() {
}

MsgLimasOrder::MsgLimasOrder(const MsgLimasOrder& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLimasOrder::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLimasOrder::~MsgLimasOrder() {
  SharedDtor();
}

void MsgLimasOrder::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLimasOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLimasOrder_descriptor_;
}

const MsgLimasOrder& MsgLimasOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLimasOrder* MsgLimasOrder::default_instance_ = NULL;

MsgLimasOrder* MsgLimasOrder::New() const {
  return new MsgLimasOrder;
}

void MsgLimasOrder::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLimasOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgLimaOrder elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLimasOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLimasOrder::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgLimaOrder elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLimasOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgLimaOrder elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLimasOrder::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgLimaOrder elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLimasOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLimasOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLimasOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLimasOrder::MergeFrom(const MsgLimasOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLimasOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLimasOrder::CopyFrom(const MsgLimasOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLimasOrder::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgLimasOrder::Swap(MsgLimasOrder* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLimasOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLimasOrder_descriptor_;
  metadata.reflection = MsgLimasOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgIntelligence::_default_name_;
const ::std::string MsgIntelligence::_default_nature_;
#ifndef _MSC_VER
const int MsgIntelligence::kNameFieldNumber;
const int MsgIntelligence::kNatureFieldNumber;
const int MsgIntelligence::kLevelFieldNumber;
const int MsgIntelligence::kEmbarkedFieldNumber;
const int MsgIntelligence::kLocationFieldNumber;
const int MsgIntelligence::kDiplomacyFieldNumber;
const int MsgIntelligence::kFormationFieldNumber;
#endif  // !_MSC_VER

MsgIntelligence::MsgIntelligence() {
  SharedCtor();
}

void MsgIntelligence::InitAsDefaultInstance() {
  location_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
}

MsgIntelligence::MsgIntelligence(const MsgIntelligence& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgIntelligence::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  nature_ = const_cast< ::std::string*>(&_default_nature_);
  level_ = 0;
  embarked_ = false;
  location_ = NULL;
  diplomacy_ = 0;
  formation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgIntelligence::~MsgIntelligence() {
  SharedDtor();
}

void MsgIntelligence::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (nature_ != &_default_nature_) {
    delete nature_;
  }
  if (this != default_instance_) {
    delete location_;
    delete formation_;
  }
}

const ::google::protobuf::Descriptor* MsgIntelligence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgIntelligence_descriptor_;
}

const MsgIntelligence& MsgIntelligence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgIntelligence* MsgIntelligence::default_instance_ = NULL;

MsgIntelligence* MsgIntelligence::New() const {
  return new MsgIntelligence;
}

void MsgIntelligence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (nature_ != &_default_nature_) {
        nature_->clear();
      }
    }
    level_ = 0;
    embarked_ = false;
    if (_has_bit(4)) {
      if (location_ != NULL) location_->::Common::MsgCoordLatLong::Clear();
    }
    diplomacy_ = 0;
    if (_has_bit(6)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgIntelligence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_nature;
        break;
      }
      
      // required string nature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nature:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_nature()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->nature().data(), this->nature().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }
      
      // required .Common.EnumNatureLevel level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_level:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumNatureLevel_IsValid(value)) {
          set_level(static_cast< Common::EnumNatureLevel >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectTag(32)) goto parse_embarked;
        break;
      }
      
      // required bool embarked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_embarked:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &embarked_));
        _set_bit(3);
        if (input->ExpectTag(42)) goto parse_location;
        break;
      }
      
      // required .Common.MsgCoordLatLong location = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(48)) goto parse_diplomacy;
        break;
      }
      
      // required .Common.EnumDiplomacy diplomacy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diplomacy:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumDiplomacy_IsValid(value)) {
          set_diplomacy(static_cast< Common::EnumDiplomacy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectTag(58)) goto parse_formation;
        break;
      }
      
      // required .Common.FormationId formation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgIntelligence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgIntelligence::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string nature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nature().data(), this->nature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nature(), output);
  }
  
  // required .Common.EnumNatureLevel level = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->level(), output);
  }
  
  // required bool embarked = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->embarked(), output);
  }
  
  // required .Common.MsgCoordLatLong location = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->location(), output);
  }
  
  // required .Common.EnumDiplomacy diplomacy = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->diplomacy(), output);
  }
  
  // required .Common.FormationId formation = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->formation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgIntelligence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string nature = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nature().data(), this->nature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nature(), target);
  }
  
  // required .Common.EnumNatureLevel level = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->level(), target);
  }
  
  // required bool embarked = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->embarked(), target);
  }
  
  // required .Common.MsgCoordLatLong location = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->location(), target);
  }
  
  // required .Common.EnumDiplomacy diplomacy = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->diplomacy(), target);
  }
  
  // required .Common.FormationId formation = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->formation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgIntelligence::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string nature = 2;
    if (has_nature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nature());
    }
    
    // required .Common.EnumNatureLevel level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
    }
    
    // required bool embarked = 4;
    if (has_embarked()) {
      total_size += 1 + 1;
    }
    
    // required .Common.MsgCoordLatLong location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // required .Common.EnumDiplomacy diplomacy = 6;
    if (has_diplomacy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->diplomacy());
    }
    
    // required .Common.FormationId formation = 7;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgIntelligence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgIntelligence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgIntelligence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgIntelligence::MergeFrom(const MsgIntelligence& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_nature(from.nature());
    }
    if (from._has_bit(2)) {
      set_level(from.level());
    }
    if (from._has_bit(3)) {
      set_embarked(from.embarked());
    }
    if (from._has_bit(4)) {
      mutable_location()->::Common::MsgCoordLatLong::MergeFrom(from.location());
    }
    if (from._has_bit(5)) {
      set_diplomacy(from.diplomacy());
    }
    if (from._has_bit(6)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgIntelligence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIntelligence::CopyFrom(const MsgIntelligence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIntelligence::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  return true;
}

void MsgIntelligence::Swap(MsgIntelligence* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(nature_, other->nature_);
    std::swap(level_, other->level_);
    std::swap(embarked_, other->embarked_);
    std::swap(location_, other->location_);
    std::swap(diplomacy_, other->diplomacy_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgIntelligence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgIntelligence_descriptor_;
  metadata.reflection = MsgIntelligence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgIntelligenceList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgIntelligenceList::MsgIntelligenceList() {
  SharedCtor();
}

void MsgIntelligenceList::InitAsDefaultInstance() {
}

MsgIntelligenceList::MsgIntelligenceList(const MsgIntelligenceList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgIntelligenceList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgIntelligenceList::~MsgIntelligenceList() {
  SharedDtor();
}

void MsgIntelligenceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgIntelligenceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgIntelligenceList_descriptor_;
}

const MsgIntelligenceList& MsgIntelligenceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgIntelligenceList* MsgIntelligenceList::default_instance_ = NULL;

MsgIntelligenceList* MsgIntelligenceList::New() const {
  return new MsgIntelligenceList;
}

void MsgIntelligenceList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgIntelligenceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgIntelligence elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgIntelligenceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgIntelligenceList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgIntelligence elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgIntelligenceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgIntelligence elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgIntelligenceList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgIntelligence elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgIntelligenceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgIntelligenceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgIntelligenceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgIntelligenceList::MergeFrom(const MsgIntelligenceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgIntelligenceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIntelligenceList::CopyFrom(const MsgIntelligenceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIntelligenceList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgIntelligenceList::Swap(MsgIntelligenceList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgIntelligenceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgIntelligenceList_descriptor_;
  metadata.reflection = MsgIntelligenceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgChangeDiplomacy::kParty1FieldNumber;
const int MsgChangeDiplomacy::kParty2FieldNumber;
const int MsgChangeDiplomacy::kDiplomatieFieldNumber;
#endif  // !_MSC_VER

MsgChangeDiplomacy::MsgChangeDiplomacy() {
  SharedCtor();
}

void MsgChangeDiplomacy::InitAsDefaultInstance() {
  party1_ = const_cast< ::Common::PartyId*>(&::Common::PartyId::default_instance());
  party2_ = const_cast< ::Common::PartyId*>(&::Common::PartyId::default_instance());
}

MsgChangeDiplomacy::MsgChangeDiplomacy(const MsgChangeDiplomacy& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChangeDiplomacy::SharedCtor() {
  _cached_size_ = 0;
  party1_ = NULL;
  party2_ = NULL;
  diplomatie_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChangeDiplomacy::~MsgChangeDiplomacy() {
  SharedDtor();
}

void MsgChangeDiplomacy::SharedDtor() {
  if (this != default_instance_) {
    delete party1_;
    delete party2_;
  }
}

const ::google::protobuf::Descriptor* MsgChangeDiplomacy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChangeDiplomacy_descriptor_;
}

const MsgChangeDiplomacy& MsgChangeDiplomacy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgChangeDiplomacy* MsgChangeDiplomacy::default_instance_ = NULL;

MsgChangeDiplomacy* MsgChangeDiplomacy::New() const {
  return new MsgChangeDiplomacy;
}

void MsgChangeDiplomacy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (party1_ != NULL) party1_->::Common::PartyId::Clear();
    }
    if (_has_bit(1)) {
      if (party2_ != NULL) party2_->::Common::PartyId::Clear();
    }
    diplomatie_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChangeDiplomacy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.PartyId party1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_party1()));
        if (input->ExpectTag(18)) goto parse_party2;
        break;
      }
      
      // required .Common.PartyId party2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_party2:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_party2()));
        if (input->ExpectTag(24)) goto parse_diplomatie;
        break;
      }
      
      // required .Common.EnumDiplomacy diplomatie = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_diplomatie:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumDiplomacy_IsValid(value)) {
          set_diplomatie(static_cast< Common::EnumDiplomacy >(value));
        } else {
          mutable_unknown_fields()->AddVarint(3, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChangeDiplomacy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChangeDiplomacy::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.PartyId party1 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->party1(), output);
  }
  
  // required .Common.PartyId party2 = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->party2(), output);
  }
  
  // required .Common.EnumDiplomacy diplomatie = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->diplomatie(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChangeDiplomacy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.PartyId party1 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->party1(), target);
  }
  
  // required .Common.PartyId party2 = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->party2(), target);
  }
  
  // required .Common.EnumDiplomacy diplomatie = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->diplomatie(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChangeDiplomacy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.PartyId party1 = 1;
    if (has_party1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->party1());
    }
    
    // required .Common.PartyId party2 = 2;
    if (has_party2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->party2());
    }
    
    // required .Common.EnumDiplomacy diplomatie = 3;
    if (has_diplomatie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->diplomatie());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChangeDiplomacy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChangeDiplomacy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChangeDiplomacy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChangeDiplomacy::MergeFrom(const MsgChangeDiplomacy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_party1()->::Common::PartyId::MergeFrom(from.party1());
    }
    if (from._has_bit(1)) {
      mutable_party2()->::Common::PartyId::MergeFrom(from.party2());
    }
    if (from._has_bit(2)) {
      set_diplomatie(from.diplomatie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChangeDiplomacy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChangeDiplomacy::CopyFrom(const MsgChangeDiplomacy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChangeDiplomacy::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_party1()) {
    if (!this->party1().IsInitialized()) return false;
  }
  if (has_party2()) {
    if (!this->party2().IsInitialized()) return false;
  }
  return true;
}

void MsgChangeDiplomacy::Swap(MsgChangeDiplomacy* other) {
  if (other != this) {
    std::swap(party1_, other->party1_);
    std::swap(party2_, other->party2_);
    std::swap(diplomatie_, other->diplomatie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChangeDiplomacy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChangeDiplomacy_descriptor_;
  metadata.reflection = MsgChangeDiplomacy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgAtlasNature_AtlasNature_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAtlasNature_AtlasNature_descriptor_;
}
bool MsgAtlasNature_AtlasNature_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgAtlasNature_AtlasNature MsgAtlasNature::blinde;
const MsgAtlasNature_AtlasNature MsgAtlasNature::ass;
const MsgAtlasNature_AtlasNature MsgAtlasNature::pc;
const MsgAtlasNature_AtlasNature MsgAtlasNature::log;
const MsgAtlasNature_AtlasNature MsgAtlasNature::mortier;
const MsgAtlasNature_AtlasNature MsgAtlasNature::lance_roquette;
const MsgAtlasNature_AtlasNature MsgAtlasNature::vehicule;
const MsgAtlasNature_AtlasNature MsgAtlasNature::personnel_a_pied;
const MsgAtlasNature_AtlasNature MsgAtlasNature::helicoptere;
const MsgAtlasNature_AtlasNature MsgAtlasNature::indefini;
const MsgAtlasNature_AtlasNature MsgAtlasNature::asa;
const MsgAtlasNature_AtlasNature MsgAtlasNature::none;
const MsgAtlasNature_AtlasNature MsgAtlasNature::AtlasNature_MIN;
const MsgAtlasNature_AtlasNature MsgAtlasNature::AtlasNature_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgAtlasNature::kNatureFieldNumber;
#endif  // !_MSC_VER

MsgAtlasNature::MsgAtlasNature() {
  SharedCtor();
}

void MsgAtlasNature::InitAsDefaultInstance() {
}

MsgAtlasNature::MsgAtlasNature(const MsgAtlasNature& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAtlasNature::SharedCtor() {
  _cached_size_ = 0;
  nature_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAtlasNature::~MsgAtlasNature() {
  SharedDtor();
}

void MsgAtlasNature::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAtlasNature::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAtlasNature_descriptor_;
}

const MsgAtlasNature& MsgAtlasNature::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAtlasNature* MsgAtlasNature::default_instance_ = NULL;

MsgAtlasNature* MsgAtlasNature::New() const {
  return new MsgAtlasNature;
}

void MsgAtlasNature::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nature_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAtlasNature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 nature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &nature_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAtlasNature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAtlasNature::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 nature = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nature(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAtlasNature::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 nature = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nature(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAtlasNature::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 nature = 1;
    if (has_nature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nature());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAtlasNature::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAtlasNature* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAtlasNature*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAtlasNature::MergeFrom(const MsgAtlasNature& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_nature(from.nature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAtlasNature::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAtlasNature::CopyFrom(const MsgAtlasNature& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAtlasNature::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAtlasNature::Swap(MsgAtlasNature* other) {
  if (other != this) {
    std::swap(nature_, other->nature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAtlasNature::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAtlasNature_descriptor_;
  metadata.reflection = MsgAtlasNature_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgMissionParameter_Value::_default_acharstr_;
#ifndef _MSC_VER
const int MsgMissionParameter_Value::kABoolFieldNumber;
const int MsgMissionParameter_Value::kARealFieldNumber;
const int MsgMissionParameter_Value::kEnumerationFieldNumber;
const int MsgMissionParameter_Value::kPathFieldNumber;
const int MsgMissionParameter_Value::kPathListFieldNumber;
const int MsgMissionParameter_Value::kPointFieldNumber;
const int MsgMissionParameter_Value::kPointListFieldNumber;
const int MsgMissionParameter_Value::kPolygonFieldNumber;
const int MsgMissionParameter_Value::kPolygonListFieldNumber;
const int MsgMissionParameter_Value::kLocationFieldNumber;
const int MsgMissionParameter_Value::kLocationListFieldNumber;
const int MsgMissionParameter_Value::kHeadingFieldNumber;
const int MsgMissionParameter_Value::kAtlasNatureFieldNumber;
const int MsgMissionParameter_Value::kUnitFieldNumber;
const int MsgMissionParameter_Value::kUnitListFieldNumber;
const int MsgMissionParameter_Value::kAutomatFieldNumber;
const int MsgMissionParameter_Value::kAutomatListFieldNumber;
const int MsgMissionParameter_Value::kUnitKnowledgeFieldNumber;
const int MsgMissionParameter_Value::kUnitKnowledgeListFieldNumber;
const int MsgMissionParameter_Value::kObjectKnowledgeFieldNumber;
const int MsgMissionParameter_Value::kObjectKnowledgeListFieldNumber;
const int MsgMissionParameter_Value::kCrowdKnowledgeFieldNumber;
const int MsgMissionParameter_Value::kPlannedWorkFieldNumber;
const int MsgMissionParameter_Value::kPlannedWorkListFieldNumber;
const int MsgMissionParameter_Value::kResourceTypeFieldNumber;
const int MsgMissionParameter_Value::kEquipmentTypeFieldNumber;
const int MsgMissionParameter_Value::kTirIndirectFieldNumber;
const int MsgMissionParameter_Value::kDateTimeFieldNumber;
const int MsgMissionParameter_Value::kLogMaintenancePrioritiesFieldNumber;
const int MsgMissionParameter_Value::kLogMedicalPrioritiesFieldNumber;
const int MsgMissionParameter_Value::kACharStrFieldNumber;
const int MsgMissionParameter_Value::kMissionObjectiveFieldNumber;
const int MsgMissionParameter_Value::kMissionObjectiveListFieldNumber;
const int MsgMissionParameter_Value::kLineFieldNumber;
const int MsgMissionParameter_Value::kLimasOrderFieldNumber;
const int MsgMissionParameter_Value::kIntelligenceListFieldNumber;
const int MsgMissionParameter_Value::kUrbanBlockFieldNumber;
const int MsgMissionParameter_Value::kPartyFieldNumber;
const int MsgMissionParameter_Value::kFormationFieldNumber;
const int MsgMissionParameter_Value::kIdentifierFieldNumber;
const int MsgMissionParameter_Value::kQuantityFieldNumber;
const int MsgMissionParameter_Value::kKnowledgeGroupFieldNumber;
const int MsgMissionParameter_Value::kListFieldNumber;
#endif  // !_MSC_VER

MsgMissionParameter_Value::MsgMissionParameter_Value() {
  SharedCtor();
}

void MsgMissionParameter_Value::InitAsDefaultInstance() {
  path_ = const_cast< ::Common::MsgPath*>(&::Common::MsgPath::default_instance());
  pathlist_ = const_cast< ::Common::MsgPathList*>(&::Common::MsgPathList::default_instance());
  point_ = const_cast< ::Common::MsgPoint*>(&::Common::MsgPoint::default_instance());
  pointlist_ = const_cast< ::Common::MsgPointList*>(&::Common::MsgPointList::default_instance());
  polygon_ = const_cast< ::Common::MsgPolygon*>(&::Common::MsgPolygon::default_instance());
  polygonlist_ = const_cast< ::Common::MsgPolygonList*>(&::Common::MsgPolygonList::default_instance());
  location_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  locationlist_ = const_cast< ::Common::MsgLocationList*>(&::Common::MsgLocationList::default_instance());
  heading_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
  atlasnature_ = const_cast< ::Common::MsgAtlasNature*>(&::Common::MsgAtlasNature::default_instance());
  unit_ = const_cast< ::Common::UnitId*>(&::Common::UnitId::default_instance());
  unitlist_ = const_cast< ::Common::UnitIdList*>(&::Common::UnitIdList::default_instance());
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  automatlist_ = const_cast< ::Common::AutomatIdList*>(&::Common::AutomatIdList::default_instance());
  unitknowledge_ = const_cast< ::Common::UnitKnowledgeId*>(&::Common::UnitKnowledgeId::default_instance());
  unitknowledgelist_ = const_cast< ::Common::UnitKnowledgeIdList*>(&::Common::UnitKnowledgeIdList::default_instance());
  objectknowledge_ = const_cast< ::Common::ObjectKnowledgeId*>(&::Common::ObjectKnowledgeId::default_instance());
  objectknowledgelist_ = const_cast< ::Common::ObjectKnowledgeIdList*>(&::Common::ObjectKnowledgeIdList::default_instance());
  crowdknowledge_ = const_cast< ::Common::CrowdKnowledgeId*>(&::Common::CrowdKnowledgeId::default_instance());
  plannedwork_ = const_cast< ::Common::MsgPlannedWork*>(&::Common::MsgPlannedWork::default_instance());
  plannedworklist_ = const_cast< ::Common::MsgPlannedWorkList*>(&::Common::MsgPlannedWorkList::default_instance());
  resourcetype_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
  equipmenttype_ = const_cast< ::Common::EquipmentType*>(&::Common::EquipmentType::default_instance());
  tirindirect_ = const_cast< ::Common::FireId*>(&::Common::FireId::default_instance());
  datetime_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
  logmaintenancepriorities_ = const_cast< ::Common::MsgLogMaintenancePriorities*>(&::Common::MsgLogMaintenancePriorities::default_instance());
  logmedicalpriorities_ = const_cast< ::Common::MsgLogMedicalPriorities*>(&::Common::MsgLogMedicalPriorities::default_instance());
  missionobjective_ = const_cast< ::Common::MsgMissionObjective*>(&::Common::MsgMissionObjective::default_instance());
  missionobjectivelist_ = const_cast< ::Common::MsgMissionObjectiveList*>(&::Common::MsgMissionObjectiveList::default_instance());
  line_ = const_cast< ::Common::MsgLine*>(&::Common::MsgLine::default_instance());
  limasorder_ = const_cast< ::Common::MsgLimasOrder*>(&::Common::MsgLimasOrder::default_instance());
  intelligencelist_ = const_cast< ::Common::MsgIntelligenceList*>(&::Common::MsgIntelligenceList::default_instance());
  urbanblock_ = const_cast< ::Common::UrbanObjectId*>(&::Common::UrbanObjectId::default_instance());
  party_ = const_cast< ::Common::PartyId*>(&::Common::PartyId::default_instance());
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
  knowledgegroup_ = const_cast< ::Common::KnowledgeGroupId*>(&::Common::KnowledgeGroupId::default_instance());
}

MsgMissionParameter_Value::MsgMissionParameter_Value(const MsgMissionParameter_Value& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMissionParameter_Value::SharedCtor() {
  _cached_size_ = 0;
  abool_ = false;
  areal_ = 0;
  enumeration_ = 0;
  path_ = NULL;
  pathlist_ = NULL;
  point_ = NULL;
  pointlist_ = NULL;
  polygon_ = NULL;
  polygonlist_ = NULL;
  location_ = NULL;
  locationlist_ = NULL;
  heading_ = NULL;
  atlasnature_ = NULL;
  unit_ = NULL;
  unitlist_ = NULL;
  automat_ = NULL;
  automatlist_ = NULL;
  unitknowledge_ = NULL;
  unitknowledgelist_ = NULL;
  objectknowledge_ = NULL;
  objectknowledgelist_ = NULL;
  crowdknowledge_ = NULL;
  plannedwork_ = NULL;
  plannedworklist_ = NULL;
  resourcetype_ = NULL;
  equipmenttype_ = NULL;
  tirindirect_ = NULL;
  datetime_ = NULL;
  logmaintenancepriorities_ = NULL;
  logmedicalpriorities_ = NULL;
  acharstr_ = const_cast< ::std::string*>(&_default_acharstr_);
  missionobjective_ = NULL;
  missionobjectivelist_ = NULL;
  line_ = NULL;
  limasorder_ = NULL;
  intelligencelist_ = NULL;
  urbanblock_ = NULL;
  party_ = NULL;
  formation_ = NULL;
  identifier_ = 0u;
  quantity_ = 0;
  knowledgegroup_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionParameter_Value::~MsgMissionParameter_Value() {
  SharedDtor();
}

void MsgMissionParameter_Value::SharedDtor() {
  if (acharstr_ != &_default_acharstr_) {
    delete acharstr_;
  }
  if (this != default_instance_) {
    delete path_;
    delete pathlist_;
    delete point_;
    delete pointlist_;
    delete polygon_;
    delete polygonlist_;
    delete location_;
    delete locationlist_;
    delete heading_;
    delete atlasnature_;
    delete unit_;
    delete unitlist_;
    delete automat_;
    delete automatlist_;
    delete unitknowledge_;
    delete unitknowledgelist_;
    delete objectknowledge_;
    delete objectknowledgelist_;
    delete crowdknowledge_;
    delete plannedwork_;
    delete plannedworklist_;
    delete resourcetype_;
    delete equipmenttype_;
    delete tirindirect_;
    delete datetime_;
    delete logmaintenancepriorities_;
    delete logmedicalpriorities_;
    delete missionobjective_;
    delete missionobjectivelist_;
    delete line_;
    delete limasorder_;
    delete intelligencelist_;
    delete urbanblock_;
    delete party_;
    delete formation_;
    delete knowledgegroup_;
  }
}

const ::google::protobuf::Descriptor* MsgMissionParameter_Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionParameter_Value_descriptor_;
}

const MsgMissionParameter_Value& MsgMissionParameter_Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgMissionParameter_Value* MsgMissionParameter_Value::default_instance_ = NULL;

MsgMissionParameter_Value* MsgMissionParameter_Value::New() const {
  return new MsgMissionParameter_Value;
}

void MsgMissionParameter_Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    abool_ = false;
    areal_ = 0;
    enumeration_ = 0;
    if (_has_bit(3)) {
      if (path_ != NULL) path_->::Common::MsgPath::Clear();
    }
    if (_has_bit(4)) {
      if (pathlist_ != NULL) pathlist_->::Common::MsgPathList::Clear();
    }
    if (_has_bit(5)) {
      if (point_ != NULL) point_->::Common::MsgPoint::Clear();
    }
    if (_has_bit(6)) {
      if (pointlist_ != NULL) pointlist_->::Common::MsgPointList::Clear();
    }
    if (_has_bit(7)) {
      if (polygon_ != NULL) polygon_->::Common::MsgPolygon::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (polygonlist_ != NULL) polygonlist_->::Common::MsgPolygonList::Clear();
    }
    if (_has_bit(9)) {
      if (location_ != NULL) location_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(10)) {
      if (locationlist_ != NULL) locationlist_->::Common::MsgLocationList::Clear();
    }
    if (_has_bit(11)) {
      if (heading_ != NULL) heading_->::Common::MsgHeading::Clear();
    }
    if (_has_bit(12)) {
      if (atlasnature_ != NULL) atlasnature_->::Common::MsgAtlasNature::Clear();
    }
    if (_has_bit(13)) {
      if (unit_ != NULL) unit_->::Common::UnitId::Clear();
    }
    if (_has_bit(14)) {
      if (unitlist_ != NULL) unitlist_->::Common::UnitIdList::Clear();
    }
    if (_has_bit(15)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (automatlist_ != NULL) automatlist_->::Common::AutomatIdList::Clear();
    }
    if (_has_bit(17)) {
      if (unitknowledge_ != NULL) unitknowledge_->::Common::UnitKnowledgeId::Clear();
    }
    if (_has_bit(18)) {
      if (unitknowledgelist_ != NULL) unitknowledgelist_->::Common::UnitKnowledgeIdList::Clear();
    }
    if (_has_bit(19)) {
      if (objectknowledge_ != NULL) objectknowledge_->::Common::ObjectKnowledgeId::Clear();
    }
    if (_has_bit(20)) {
      if (objectknowledgelist_ != NULL) objectknowledgelist_->::Common::ObjectKnowledgeIdList::Clear();
    }
    if (_has_bit(21)) {
      if (crowdknowledge_ != NULL) crowdknowledge_->::Common::CrowdKnowledgeId::Clear();
    }
    if (_has_bit(22)) {
      if (plannedwork_ != NULL) plannedwork_->::Common::MsgPlannedWork::Clear();
    }
    if (_has_bit(23)) {
      if (plannedworklist_ != NULL) plannedworklist_->::Common::MsgPlannedWorkList::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (_has_bit(24)) {
      if (resourcetype_ != NULL) resourcetype_->::Common::ResourceType::Clear();
    }
    if (_has_bit(25)) {
      if (equipmenttype_ != NULL) equipmenttype_->::Common::EquipmentType::Clear();
    }
    if (_has_bit(26)) {
      if (tirindirect_ != NULL) tirindirect_->::Common::FireId::Clear();
    }
    if (_has_bit(27)) {
      if (datetime_ != NULL) datetime_->::Common::MsgDateTime::Clear();
    }
    if (_has_bit(28)) {
      if (logmaintenancepriorities_ != NULL) logmaintenancepriorities_->::Common::MsgLogMaintenancePriorities::Clear();
    }
    if (_has_bit(29)) {
      if (logmedicalpriorities_ != NULL) logmedicalpriorities_->::Common::MsgLogMedicalPriorities::Clear();
    }
    if (_has_bit(30)) {
      if (acharstr_ != &_default_acharstr_) {
        acharstr_->clear();
      }
    }
    if (_has_bit(31)) {
      if (missionobjective_ != NULL) missionobjective_->::Common::MsgMissionObjective::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (_has_bit(32)) {
      if (missionobjectivelist_ != NULL) missionobjectivelist_->::Common::MsgMissionObjectiveList::Clear();
    }
    if (_has_bit(33)) {
      if (line_ != NULL) line_->::Common::MsgLine::Clear();
    }
    if (_has_bit(34)) {
      if (limasorder_ != NULL) limasorder_->::Common::MsgLimasOrder::Clear();
    }
    if (_has_bit(35)) {
      if (intelligencelist_ != NULL) intelligencelist_->::Common::MsgIntelligenceList::Clear();
    }
    if (_has_bit(36)) {
      if (urbanblock_ != NULL) urbanblock_->::Common::UrbanObjectId::Clear();
    }
    if (_has_bit(37)) {
      if (party_ != NULL) party_->::Common::PartyId::Clear();
    }
    if (_has_bit(38)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
    identifier_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    quantity_ = 0;
    if (_has_bit(41)) {
      if (knowledgegroup_ != NULL) knowledgegroup_->::Common::KnowledgeGroupId::Clear();
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionParameter_Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool aBool = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &abool_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_aReal;
        break;
      }
      
      // optional float aReal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_aReal:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &areal_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_enumeration;
        break;
      }
      
      // optional int32 enumeration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_enumeration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &enumeration_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_path;
        break;
      }
      
      // optional .Common.MsgPath path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_path:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_path()));
        if (input->ExpectTag(42)) goto parse_pathList;
        break;
      }
      
      // optional .Common.MsgPathList pathList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pathList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pathlist()));
        if (input->ExpectTag(50)) goto parse_point;
        break;
      }
      
      // optional .Common.MsgPoint point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_point:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_point()));
        if (input->ExpectTag(58)) goto parse_pointList;
        break;
      }
      
      // optional .Common.MsgPointList pointList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pointList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_pointlist()));
        if (input->ExpectTag(66)) goto parse_polygon;
        break;
      }
      
      // optional .Common.MsgPolygon polygon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_polygon:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_polygon()));
        if (input->ExpectTag(74)) goto parse_polygonList;
        break;
      }
      
      // optional .Common.MsgPolygonList polygonList = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_polygonList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_polygonlist()));
        if (input->ExpectTag(82)) goto parse_location;
        break;
      }
      
      // optional .Common.MsgLocation location = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_location:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_location()));
        if (input->ExpectTag(90)) goto parse_locationList;
        break;
      }
      
      // optional .Common.MsgLocationList locationList = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_locationList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_locationlist()));
        if (input->ExpectTag(98)) goto parse_heading;
        break;
      }
      
      // optional .Common.MsgHeading heading = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_heading:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_heading()));
        if (input->ExpectTag(106)) goto parse_atlasNature;
        break;
      }
      
      // optional .Common.MsgAtlasNature atlasNature = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_atlasNature:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_atlasnature()));
        if (input->ExpectTag(114)) goto parse_unit;
        break;
      }
      
      // optional .Common.UnitId unit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unit:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unit()));
        if (input->ExpectTag(122)) goto parse_unitList;
        break;
      }
      
      // optional .Common.UnitIdList unitList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unitlist()));
        if (input->ExpectTag(130)) goto parse_automat;
        break;
      }
      
      // optional .Common.AutomatId automat = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(138)) goto parse_automatList;
        break;
      }
      
      // optional .Common.AutomatIdList automatList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_automatList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automatlist()));
        if (input->ExpectTag(146)) goto parse_unitKnowledge;
        break;
      }
      
      // optional .Common.UnitKnowledgeId unitKnowledge = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitKnowledge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unitknowledge()));
        if (input->ExpectTag(154)) goto parse_unitKnowledgeList;
        break;
      }
      
      // optional .Common.UnitKnowledgeIdList unitKnowledgeList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_unitKnowledgeList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_unitknowledgelist()));
        if (input->ExpectTag(162)) goto parse_objectKnowledge;
        break;
      }
      
      // optional .Common.ObjectKnowledgeId objectKnowledge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_objectKnowledge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_objectknowledge()));
        if (input->ExpectTag(170)) goto parse_objectKnowledgeList;
        break;
      }
      
      // optional .Common.ObjectKnowledgeIdList objectKnowledgeList = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_objectKnowledgeList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_objectknowledgelist()));
        if (input->ExpectTag(178)) goto parse_crowdKnowledge;
        break;
      }
      
      // optional .Common.CrowdKnowledgeId crowdKnowledge = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_crowdKnowledge:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_crowdknowledge()));
        if (input->ExpectTag(186)) goto parse_plannedWork;
        break;
      }
      
      // optional .Common.MsgPlannedWork plannedWork = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plannedWork:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plannedwork()));
        if (input->ExpectTag(194)) goto parse_plannedWorkList;
        break;
      }
      
      // optional .Common.MsgPlannedWorkList plannedWorkList = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plannedWorkList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plannedworklist()));
        if (input->ExpectTag(202)) goto parse_resourceType;
        break;
      }
      
      // optional .Common.ResourceType resourceType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_resourceType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resourcetype()));
        if (input->ExpectTag(210)) goto parse_equipmentType;
        break;
      }
      
      // optional .Common.EquipmentType equipmentType = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_equipmentType:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_equipmenttype()));
        if (input->ExpectTag(218)) goto parse_tirIndirect;
        break;
      }
      
      // optional .Common.FireId tirIndirect = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_tirIndirect:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tirindirect()));
        if (input->ExpectTag(226)) goto parse_dateTime;
        break;
      }
      
      // optional .Common.MsgDateTime dateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_dateTime:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_datetime()));
        if (input->ExpectTag(234)) goto parse_logMaintenancePriorities;
        break;
      }
      
      // optional .Common.MsgLogMaintenancePriorities logMaintenancePriorities = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_logMaintenancePriorities:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_logmaintenancepriorities()));
        if (input->ExpectTag(242)) goto parse_logMedicalPriorities;
        break;
      }
      
      // optional .Common.MsgLogMedicalPriorities logMedicalPriorities = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_logMedicalPriorities:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_logmedicalpriorities()));
        if (input->ExpectTag(250)) goto parse_aCharStr;
        break;
      }
      
      // optional string aCharStr = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_aCharStr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_acharstr()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->acharstr().data(), this->acharstr().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(258)) goto parse_missionObjective;
        break;
      }
      
      // optional .Common.MsgMissionObjective missionObjective = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_missionObjective:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_missionobjective()));
        if (input->ExpectTag(266)) goto parse_missionObjectiveList;
        break;
      }
      
      // optional .Common.MsgMissionObjectiveList missionObjectiveList = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_missionObjectiveList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_missionobjectivelist()));
        if (input->ExpectTag(274)) goto parse_line;
        break;
      }
      
      // optional .Common.MsgLine line = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_line:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_line()));
        if (input->ExpectTag(282)) goto parse_limasOrder;
        break;
      }
      
      // optional .Common.MsgLimasOrder limasOrder = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_limasOrder:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_limasorder()));
        if (input->ExpectTag(290)) goto parse_intelligenceList;
        break;
      }
      
      // optional .Common.MsgIntelligenceList intelligenceList = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_intelligenceList:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_intelligencelist()));
        if (input->ExpectTag(298)) goto parse_urbanBlock;
        break;
      }
      
      // optional .Common.UrbanObjectId urbanBlock = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_urbanBlock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_urbanblock()));
        if (input->ExpectTag(306)) goto parse_party;
        break;
      }
      
      // optional .Common.PartyId party = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_party:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_party()));
        if (input->ExpectTag(314)) goto parse_formation;
        break;
      }
      
      // optional .Common.FormationId formation = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectTag(320)) goto parse_identifier;
        break;
      }
      
      // optional uint32 identifier = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_identifier:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &identifier_));
        _set_bit(39);
        if (input->ExpectTag(328)) goto parse_quantity;
        break;
      }
      
      // optional int32 quantity = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_quantity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &quantity_));
        _set_bit(40);
        if (input->ExpectTag(338)) goto parse_knowledgeGroup;
        break;
      }
      
      // optional .Common.KnowledgeGroupId knowledgeGroup = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_knowledgeGroup:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_knowledgegroup()));
        if (input->ExpectTag(346)) goto parse_list;
        break;
      }
      
      // repeated .Common.MsgMissionParameter.Value list = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_list:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_list()));
        if (input->ExpectTag(346)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMissionParameter_Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMissionParameter_Value::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool aBool = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->abool(), output);
  }
  
  // optional float aReal = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->areal(), output);
  }
  
  // optional int32 enumeration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enumeration(), output);
  }
  
  // optional .Common.MsgPath path = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->path(), output);
  }
  
  // optional .Common.MsgPathList pathList = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->pathlist(), output);
  }
  
  // optional .Common.MsgPoint point = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->point(), output);
  }
  
  // optional .Common.MsgPointList pointList = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->pointlist(), output);
  }
  
  // optional .Common.MsgPolygon polygon = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->polygon(), output);
  }
  
  // optional .Common.MsgPolygonList polygonList = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->polygonlist(), output);
  }
  
  // optional .Common.MsgLocation location = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->location(), output);
  }
  
  // optional .Common.MsgLocationList locationList = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->locationlist(), output);
  }
  
  // optional .Common.MsgHeading heading = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->heading(), output);
  }
  
  // optional .Common.MsgAtlasNature atlasNature = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->atlasnature(), output);
  }
  
  // optional .Common.UnitId unit = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->unit(), output);
  }
  
  // optional .Common.UnitIdList unitList = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->unitlist(), output);
  }
  
  // optional .Common.AutomatId automat = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->automat(), output);
  }
  
  // optional .Common.AutomatIdList automatList = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      17, this->automatlist(), output);
  }
  
  // optional .Common.UnitKnowledgeId unitKnowledge = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->unitknowledge(), output);
  }
  
  // optional .Common.UnitKnowledgeIdList unitKnowledgeList = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      19, this->unitknowledgelist(), output);
  }
  
  // optional .Common.ObjectKnowledgeId objectKnowledge = 20;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      20, this->objectknowledge(), output);
  }
  
  // optional .Common.ObjectKnowledgeIdList objectKnowledgeList = 21;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      21, this->objectknowledgelist(), output);
  }
  
  // optional .Common.CrowdKnowledgeId crowdKnowledge = 22;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      22, this->crowdknowledge(), output);
  }
  
  // optional .Common.MsgPlannedWork plannedWork = 23;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      23, this->plannedwork(), output);
  }
  
  // optional .Common.MsgPlannedWorkList plannedWorkList = 24;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      24, this->plannedworklist(), output);
  }
  
  // optional .Common.ResourceType resourceType = 25;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      25, this->resourcetype(), output);
  }
  
  // optional .Common.EquipmentType equipmentType = 26;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      26, this->equipmenttype(), output);
  }
  
  // optional .Common.FireId tirIndirect = 27;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      27, this->tirindirect(), output);
  }
  
  // optional .Common.MsgDateTime dateTime = 28;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      28, this->datetime(), output);
  }
  
  // optional .Common.MsgLogMaintenancePriorities logMaintenancePriorities = 29;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      29, this->logmaintenancepriorities(), output);
  }
  
  // optional .Common.MsgLogMedicalPriorities logMedicalPriorities = 30;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      30, this->logmedicalpriorities(), output);
  }
  
  // optional string aCharStr = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acharstr().data(), this->acharstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->acharstr(), output);
  }
  
  // optional .Common.MsgMissionObjective missionObjective = 32;
  if (_has_bit(31)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      32, this->missionobjective(), output);
  }
  
  // optional .Common.MsgMissionObjectiveList missionObjectiveList = 33;
  if (_has_bit(32)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      33, this->missionobjectivelist(), output);
  }
  
  // optional .Common.MsgLine line = 34;
  if (_has_bit(33)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      34, this->line(), output);
  }
  
  // optional .Common.MsgLimasOrder limasOrder = 35;
  if (_has_bit(34)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      35, this->limasorder(), output);
  }
  
  // optional .Common.MsgIntelligenceList intelligenceList = 36;
  if (_has_bit(35)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      36, this->intelligencelist(), output);
  }
  
  // optional .Common.UrbanObjectId urbanBlock = 37;
  if (_has_bit(36)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      37, this->urbanblock(), output);
  }
  
  // optional .Common.PartyId party = 38;
  if (_has_bit(37)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      38, this->party(), output);
  }
  
  // optional .Common.FormationId formation = 39;
  if (_has_bit(38)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      39, this->formation(), output);
  }
  
  // optional uint32 identifier = 40;
  if (_has_bit(39)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->identifier(), output);
  }
  
  // optional int32 quantity = 41;
  if (_has_bit(40)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->quantity(), output);
  }
  
  // optional .Common.KnowledgeGroupId knowledgeGroup = 42;
  if (_has_bit(41)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      42, this->knowledgegroup(), output);
  }
  
  // repeated .Common.MsgMissionParameter.Value list = 43;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      43, this->list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMissionParameter_Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool aBool = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->abool(), target);
  }
  
  // optional float aReal = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->areal(), target);
  }
  
  // optional int32 enumeration = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enumeration(), target);
  }
  
  // optional .Common.MsgPath path = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->path(), target);
  }
  
  // optional .Common.MsgPathList pathList = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pathlist(), target);
  }
  
  // optional .Common.MsgPoint point = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->point(), target);
  }
  
  // optional .Common.MsgPointList pointList = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pointlist(), target);
  }
  
  // optional .Common.MsgPolygon polygon = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->polygon(), target);
  }
  
  // optional .Common.MsgPolygonList polygonList = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->polygonlist(), target);
  }
  
  // optional .Common.MsgLocation location = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->location(), target);
  }
  
  // optional .Common.MsgLocationList locationList = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->locationlist(), target);
  }
  
  // optional .Common.MsgHeading heading = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->heading(), target);
  }
  
  // optional .Common.MsgAtlasNature atlasNature = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->atlasnature(), target);
  }
  
  // optional .Common.UnitId unit = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->unit(), target);
  }
  
  // optional .Common.UnitIdList unitList = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->unitlist(), target);
  }
  
  // optional .Common.AutomatId automat = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->automat(), target);
  }
  
  // optional .Common.AutomatIdList automatList = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->automatlist(), target);
  }
  
  // optional .Common.UnitKnowledgeId unitKnowledge = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->unitknowledge(), target);
  }
  
  // optional .Common.UnitKnowledgeIdList unitKnowledgeList = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->unitknowledgelist(), target);
  }
  
  // optional .Common.ObjectKnowledgeId objectKnowledge = 20;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->objectknowledge(), target);
  }
  
  // optional .Common.ObjectKnowledgeIdList objectKnowledgeList = 21;
  if (_has_bit(20)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->objectknowledgelist(), target);
  }
  
  // optional .Common.CrowdKnowledgeId crowdKnowledge = 22;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->crowdknowledge(), target);
  }
  
  // optional .Common.MsgPlannedWork plannedWork = 23;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->plannedwork(), target);
  }
  
  // optional .Common.MsgPlannedWorkList plannedWorkList = 24;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->plannedworklist(), target);
  }
  
  // optional .Common.ResourceType resourceType = 25;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->resourcetype(), target);
  }
  
  // optional .Common.EquipmentType equipmentType = 26;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->equipmenttype(), target);
  }
  
  // optional .Common.FireId tirIndirect = 27;
  if (_has_bit(26)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->tirindirect(), target);
  }
  
  // optional .Common.MsgDateTime dateTime = 28;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->datetime(), target);
  }
  
  // optional .Common.MsgLogMaintenancePriorities logMaintenancePriorities = 29;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->logmaintenancepriorities(), target);
  }
  
  // optional .Common.MsgLogMedicalPriorities logMedicalPriorities = 30;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->logmedicalpriorities(), target);
  }
  
  // optional string aCharStr = 31;
  if (_has_bit(30)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acharstr().data(), this->acharstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->acharstr(), target);
  }
  
  // optional .Common.MsgMissionObjective missionObjective = 32;
  if (_has_bit(31)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->missionobjective(), target);
  }
  
  // optional .Common.MsgMissionObjectiveList missionObjectiveList = 33;
  if (_has_bit(32)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->missionobjectivelist(), target);
  }
  
  // optional .Common.MsgLine line = 34;
  if (_has_bit(33)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->line(), target);
  }
  
  // optional .Common.MsgLimasOrder limasOrder = 35;
  if (_has_bit(34)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->limasorder(), target);
  }
  
  // optional .Common.MsgIntelligenceList intelligenceList = 36;
  if (_has_bit(35)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->intelligencelist(), target);
  }
  
  // optional .Common.UrbanObjectId urbanBlock = 37;
  if (_has_bit(36)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->urbanblock(), target);
  }
  
  // optional .Common.PartyId party = 38;
  if (_has_bit(37)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->party(), target);
  }
  
  // optional .Common.FormationId formation = 39;
  if (_has_bit(38)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->formation(), target);
  }
  
  // optional uint32 identifier = 40;
  if (_has_bit(39)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->identifier(), target);
  }
  
  // optional int32 quantity = 41;
  if (_has_bit(40)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->quantity(), target);
  }
  
  // optional .Common.KnowledgeGroupId knowledgeGroup = 42;
  if (_has_bit(41)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->knowledgegroup(), target);
  }
  
  // repeated .Common.MsgMissionParameter.Value list = 43;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMissionParameter_Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool aBool = 1;
    if (has_abool()) {
      total_size += 1 + 1;
    }
    
    // optional float aReal = 2;
    if (has_areal()) {
      total_size += 1 + 4;
    }
    
    // optional int32 enumeration = 3;
    if (has_enumeration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enumeration());
    }
    
    // optional .Common.MsgPath path = 4;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }
    
    // optional .Common.MsgPathList pathList = 5;
    if (has_pathlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pathlist());
    }
    
    // optional .Common.MsgPoint point = 6;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point());
    }
    
    // optional .Common.MsgPointList pointList = 7;
    if (has_pointlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pointlist());
    }
    
    // optional .Common.MsgPolygon polygon = 8;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.MsgPolygonList polygonList = 9;
    if (has_polygonlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygonlist());
    }
    
    // optional .Common.MsgLocation location = 10;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional .Common.MsgLocationList locationList = 11;
    if (has_locationlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->locationlist());
    }
    
    // optional .Common.MsgHeading heading = 12;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heading());
    }
    
    // optional .Common.MsgAtlasNature atlasNature = 13;
    if (has_atlasnature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atlasnature());
    }
    
    // optional .Common.UnitId unit = 14;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unit());
    }
    
    // optional .Common.UnitIdList unitList = 15;
    if (has_unitlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitlist());
    }
    
    // optional .Common.AutomatId automat = 16;
    if (has_automat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Common.AutomatIdList automatList = 17;
    if (has_automatlist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automatlist());
    }
    
    // optional .Common.UnitKnowledgeId unitKnowledge = 18;
    if (has_unitknowledge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitknowledge());
    }
    
    // optional .Common.UnitKnowledgeIdList unitKnowledgeList = 19;
    if (has_unitknowledgelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitknowledgelist());
    }
    
    // optional .Common.ObjectKnowledgeId objectKnowledge = 20;
    if (has_objectknowledge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectknowledge());
    }
    
    // optional .Common.ObjectKnowledgeIdList objectKnowledgeList = 21;
    if (has_objectknowledgelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->objectknowledgelist());
    }
    
    // optional .Common.CrowdKnowledgeId crowdKnowledge = 22;
    if (has_crowdknowledge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crowdknowledge());
    }
    
    // optional .Common.MsgPlannedWork plannedWork = 23;
    if (has_plannedwork()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannedwork());
    }
    
    // optional .Common.MsgPlannedWorkList plannedWorkList = 24;
    if (has_plannedworklist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plannedworklist());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .Common.ResourceType resourceType = 25;
    if (has_resourcetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resourcetype());
    }
    
    // optional .Common.EquipmentType equipmentType = 26;
    if (has_equipmenttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipmenttype());
    }
    
    // optional .Common.FireId tirIndirect = 27;
    if (has_tirindirect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tirindirect());
    }
    
    // optional .Common.MsgDateTime dateTime = 28;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datetime());
    }
    
    // optional .Common.MsgLogMaintenancePriorities logMaintenancePriorities = 29;
    if (has_logmaintenancepriorities()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logmaintenancepriorities());
    }
    
    // optional .Common.MsgLogMedicalPriorities logMedicalPriorities = 30;
    if (has_logmedicalpriorities()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logmedicalpriorities());
    }
    
    // optional string aCharStr = 31;
    if (has_acharstr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acharstr());
    }
    
    // optional .Common.MsgMissionObjective missionObjective = 32;
    if (has_missionobjective()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionobjective());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .Common.MsgMissionObjectiveList missionObjectiveList = 33;
    if (has_missionobjectivelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missionobjectivelist());
    }
    
    // optional .Common.MsgLine line = 34;
    if (has_line()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line());
    }
    
    // optional .Common.MsgLimasOrder limasOrder = 35;
    if (has_limasorder()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limasorder());
    }
    
    // optional .Common.MsgIntelligenceList intelligenceList = 36;
    if (has_intelligencelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intelligencelist());
    }
    
    // optional .Common.UrbanObjectId urbanBlock = 37;
    if (has_urbanblock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->urbanblock());
    }
    
    // optional .Common.PartyId party = 38;
    if (has_party()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->party());
    }
    
    // optional .Common.FormationId formation = 39;
    if (has_formation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
    // optional uint32 identifier = 40;
    if (has_identifier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identifier());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 quantity = 41;
    if (has_quantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }
    
    // optional .Common.KnowledgeGroupId knowledgeGroup = 42;
    if (has_knowledgegroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->knowledgegroup());
    }
    
  }
  // repeated .Common.MsgMissionParameter.Value list = 43;
  total_size += 2 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMissionParameter_Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionParameter_Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionParameter_Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionParameter_Value::MergeFrom(const MsgMissionParameter_Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_abool(from.abool());
    }
    if (from._has_bit(1)) {
      set_areal(from.areal());
    }
    if (from._has_bit(2)) {
      set_enumeration(from.enumeration());
    }
    if (from._has_bit(3)) {
      mutable_path()->::Common::MsgPath::MergeFrom(from.path());
    }
    if (from._has_bit(4)) {
      mutable_pathlist()->::Common::MsgPathList::MergeFrom(from.pathlist());
    }
    if (from._has_bit(5)) {
      mutable_point()->::Common::MsgPoint::MergeFrom(from.point());
    }
    if (from._has_bit(6)) {
      mutable_pointlist()->::Common::MsgPointList::MergeFrom(from.pointlist());
    }
    if (from._has_bit(7)) {
      mutable_polygon()->::Common::MsgPolygon::MergeFrom(from.polygon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_polygonlist()->::Common::MsgPolygonList::MergeFrom(from.polygonlist());
    }
    if (from._has_bit(9)) {
      mutable_location()->::Common::MsgLocation::MergeFrom(from.location());
    }
    if (from._has_bit(10)) {
      mutable_locationlist()->::Common::MsgLocationList::MergeFrom(from.locationlist());
    }
    if (from._has_bit(11)) {
      mutable_heading()->::Common::MsgHeading::MergeFrom(from.heading());
    }
    if (from._has_bit(12)) {
      mutable_atlasnature()->::Common::MsgAtlasNature::MergeFrom(from.atlasnature());
    }
    if (from._has_bit(13)) {
      mutable_unit()->::Common::UnitId::MergeFrom(from.unit());
    }
    if (from._has_bit(14)) {
      mutable_unitlist()->::Common::UnitIdList::MergeFrom(from.unitlist());
    }
    if (from._has_bit(15)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_automatlist()->::Common::AutomatIdList::MergeFrom(from.automatlist());
    }
    if (from._has_bit(17)) {
      mutable_unitknowledge()->::Common::UnitKnowledgeId::MergeFrom(from.unitknowledge());
    }
    if (from._has_bit(18)) {
      mutable_unitknowledgelist()->::Common::UnitKnowledgeIdList::MergeFrom(from.unitknowledgelist());
    }
    if (from._has_bit(19)) {
      mutable_objectknowledge()->::Common::ObjectKnowledgeId::MergeFrom(from.objectknowledge());
    }
    if (from._has_bit(20)) {
      mutable_objectknowledgelist()->::Common::ObjectKnowledgeIdList::MergeFrom(from.objectknowledgelist());
    }
    if (from._has_bit(21)) {
      mutable_crowdknowledge()->::Common::CrowdKnowledgeId::MergeFrom(from.crowdknowledge());
    }
    if (from._has_bit(22)) {
      mutable_plannedwork()->::Common::MsgPlannedWork::MergeFrom(from.plannedwork());
    }
    if (from._has_bit(23)) {
      mutable_plannedworklist()->::Common::MsgPlannedWorkList::MergeFrom(from.plannedworklist());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      mutable_resourcetype()->::Common::ResourceType::MergeFrom(from.resourcetype());
    }
    if (from._has_bit(25)) {
      mutable_equipmenttype()->::Common::EquipmentType::MergeFrom(from.equipmenttype());
    }
    if (from._has_bit(26)) {
      mutable_tirindirect()->::Common::FireId::MergeFrom(from.tirindirect());
    }
    if (from._has_bit(27)) {
      mutable_datetime()->::Common::MsgDateTime::MergeFrom(from.datetime());
    }
    if (from._has_bit(28)) {
      mutable_logmaintenancepriorities()->::Common::MsgLogMaintenancePriorities::MergeFrom(from.logmaintenancepriorities());
    }
    if (from._has_bit(29)) {
      mutable_logmedicalpriorities()->::Common::MsgLogMedicalPriorities::MergeFrom(from.logmedicalpriorities());
    }
    if (from._has_bit(30)) {
      set_acharstr(from.acharstr());
    }
    if (from._has_bit(31)) {
      mutable_missionobjective()->::Common::MsgMissionObjective::MergeFrom(from.missionobjective());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from._has_bit(32)) {
      mutable_missionobjectivelist()->::Common::MsgMissionObjectiveList::MergeFrom(from.missionobjectivelist());
    }
    if (from._has_bit(33)) {
      mutable_line()->::Common::MsgLine::MergeFrom(from.line());
    }
    if (from._has_bit(34)) {
      mutable_limasorder()->::Common::MsgLimasOrder::MergeFrom(from.limasorder());
    }
    if (from._has_bit(35)) {
      mutable_intelligencelist()->::Common::MsgIntelligenceList::MergeFrom(from.intelligencelist());
    }
    if (from._has_bit(36)) {
      mutable_urbanblock()->::Common::UrbanObjectId::MergeFrom(from.urbanblock());
    }
    if (from._has_bit(37)) {
      mutable_party()->::Common::PartyId::MergeFrom(from.party());
    }
    if (from._has_bit(38)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
    if (from._has_bit(39)) {
      set_identifier(from.identifier());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from._has_bit(40)) {
      set_quantity(from.quantity());
    }
    if (from._has_bit(41)) {
      mutable_knowledgegroup()->::Common::KnowledgeGroupId::MergeFrom(from.knowledgegroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionParameter_Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionParameter_Value::CopyFrom(const MsgMissionParameter_Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionParameter_Value::IsInitialized() const {
  
  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  if (has_pathlist()) {
    if (!this->pathlist().IsInitialized()) return false;
  }
  if (has_point()) {
    if (!this->point().IsInitialized()) return false;
  }
  if (has_pointlist()) {
    if (!this->pointlist().IsInitialized()) return false;
  }
  if (has_polygon()) {
    if (!this->polygon().IsInitialized()) return false;
  }
  if (has_polygonlist()) {
    if (!this->polygonlist().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_locationlist()) {
    if (!this->locationlist().IsInitialized()) return false;
  }
  if (has_heading()) {
    if (!this->heading().IsInitialized()) return false;
  }
  if (has_atlasnature()) {
    if (!this->atlasnature().IsInitialized()) return false;
  }
  if (has_unit()) {
    if (!this->unit().IsInitialized()) return false;
  }
  if (has_unitlist()) {
    if (!this->unitlist().IsInitialized()) return false;
  }
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_automatlist()) {
    if (!this->automatlist().IsInitialized()) return false;
  }
  if (has_unitknowledge()) {
    if (!this->unitknowledge().IsInitialized()) return false;
  }
  if (has_unitknowledgelist()) {
    if (!this->unitknowledgelist().IsInitialized()) return false;
  }
  if (has_objectknowledge()) {
    if (!this->objectknowledge().IsInitialized()) return false;
  }
  if (has_objectknowledgelist()) {
    if (!this->objectknowledgelist().IsInitialized()) return false;
  }
  if (has_crowdknowledge()) {
    if (!this->crowdknowledge().IsInitialized()) return false;
  }
  if (has_plannedwork()) {
    if (!this->plannedwork().IsInitialized()) return false;
  }
  if (has_plannedworklist()) {
    if (!this->plannedworklist().IsInitialized()) return false;
  }
  if (has_resourcetype()) {
    if (!this->resourcetype().IsInitialized()) return false;
  }
  if (has_equipmenttype()) {
    if (!this->equipmenttype().IsInitialized()) return false;
  }
  if (has_tirindirect()) {
    if (!this->tirindirect().IsInitialized()) return false;
  }
  if (has_datetime()) {
    if (!this->datetime().IsInitialized()) return false;
  }
  if (has_logmaintenancepriorities()) {
    if (!this->logmaintenancepriorities().IsInitialized()) return false;
  }
  if (has_missionobjective()) {
    if (!this->missionobjective().IsInitialized()) return false;
  }
  if (has_missionobjectivelist()) {
    if (!this->missionobjectivelist().IsInitialized()) return false;
  }
  if (has_line()) {
    if (!this->line().IsInitialized()) return false;
  }
  if (has_limasorder()) {
    if (!this->limasorder().IsInitialized()) return false;
  }
  if (has_intelligencelist()) {
    if (!this->intelligencelist().IsInitialized()) return false;
  }
  if (has_urbanblock()) {
    if (!this->urbanblock().IsInitialized()) return false;
  }
  if (has_party()) {
    if (!this->party().IsInitialized()) return false;
  }
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  if (has_knowledgegroup()) {
    if (!this->knowledgegroup().IsInitialized()) return false;
  }
  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void MsgMissionParameter_Value::Swap(MsgMissionParameter_Value* other) {
  if (other != this) {
    std::swap(abool_, other->abool_);
    std::swap(areal_, other->areal_);
    std::swap(enumeration_, other->enumeration_);
    std::swap(path_, other->path_);
    std::swap(pathlist_, other->pathlist_);
    std::swap(point_, other->point_);
    std::swap(pointlist_, other->pointlist_);
    std::swap(polygon_, other->polygon_);
    std::swap(polygonlist_, other->polygonlist_);
    std::swap(location_, other->location_);
    std::swap(locationlist_, other->locationlist_);
    std::swap(heading_, other->heading_);
    std::swap(atlasnature_, other->atlasnature_);
    std::swap(unit_, other->unit_);
    std::swap(unitlist_, other->unitlist_);
    std::swap(automat_, other->automat_);
    std::swap(automatlist_, other->automatlist_);
    std::swap(unitknowledge_, other->unitknowledge_);
    std::swap(unitknowledgelist_, other->unitknowledgelist_);
    std::swap(objectknowledge_, other->objectknowledge_);
    std::swap(objectknowledgelist_, other->objectknowledgelist_);
    std::swap(crowdknowledge_, other->crowdknowledge_);
    std::swap(plannedwork_, other->plannedwork_);
    std::swap(plannedworklist_, other->plannedworklist_);
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(equipmenttype_, other->equipmenttype_);
    std::swap(tirindirect_, other->tirindirect_);
    std::swap(datetime_, other->datetime_);
    std::swap(logmaintenancepriorities_, other->logmaintenancepriorities_);
    std::swap(logmedicalpriorities_, other->logmedicalpriorities_);
    std::swap(acharstr_, other->acharstr_);
    std::swap(missionobjective_, other->missionobjective_);
    std::swap(missionobjectivelist_, other->missionobjectivelist_);
    std::swap(line_, other->line_);
    std::swap(limasorder_, other->limasorder_);
    std::swap(intelligencelist_, other->intelligencelist_);
    std::swap(urbanblock_, other->urbanblock_);
    std::swap(party_, other->party_);
    std::swap(formation_, other->formation_);
    std::swap(identifier_, other->identifier_);
    std::swap(quantity_, other->quantity_);
    std::swap(knowledgegroup_, other->knowledgegroup_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionParameter_Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionParameter_Value_descriptor_;
  metadata.reflection = MsgMissionParameter_Value_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgMissionParameter::kNullValueFieldNumber;
const int MsgMissionParameter::kValueFieldNumber;
#endif  // !_MSC_VER

MsgMissionParameter::MsgMissionParameter() {
  SharedCtor();
}

void MsgMissionParameter::InitAsDefaultInstance() {
  value_ = const_cast< ::Common::MsgMissionParameter_Value*>(&::Common::MsgMissionParameter_Value::default_instance());
}

MsgMissionParameter::MsgMissionParameter(const MsgMissionParameter& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMissionParameter::SharedCtor() {
  _cached_size_ = 0;
  null_value_ = false;
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionParameter::~MsgMissionParameter() {
  SharedDtor();
}

void MsgMissionParameter::SharedDtor() {
  if (this != default_instance_) {
    delete value_;
  }
}

const ::google::protobuf::Descriptor* MsgMissionParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionParameter_descriptor_;
}

const MsgMissionParameter& MsgMissionParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgMissionParameter* MsgMissionParameter::default_instance_ = NULL;

MsgMissionParameter* MsgMissionParameter::New() const {
  return new MsgMissionParameter;
}

void MsgMissionParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    null_value_ = false;
    if (_has_bit(1)) {
      if (value_ != NULL) value_->::Common::MsgMissionParameter_Value::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool null_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &null_value_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional .Common.MsgMissionParameter.Value value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_value()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMissionParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMissionParameter::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional bool null_value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->null_value(), output);
  }
  
  // optional .Common.MsgMissionParameter.Value value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMissionParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool null_value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->null_value(), target);
  }
  
  // optional .Common.MsgMissionParameter.Value value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMissionParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool null_value = 1;
    if (has_null_value()) {
      total_size += 1 + 1;
    }
    
    // optional .Common.MsgMissionParameter.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMissionParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionParameter::MergeFrom(const MsgMissionParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_null_value(from.null_value());
    }
    if (from._has_bit(1)) {
      mutable_value()->::Common::MsgMissionParameter_Value::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionParameter::CopyFrom(const MsgMissionParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionParameter::IsInitialized() const {
  
  if (has_value()) {
    if (!this->value().IsInitialized()) return false;
  }
  return true;
}

void MsgMissionParameter::Swap(MsgMissionParameter* other) {
  if (other != this) {
    std::swap(null_value_, other->null_value_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionParameter_descriptor_;
  metadata.reflection = MsgMissionParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgMissionParameters::kElemFieldNumber;
#endif  // !_MSC_VER

MsgMissionParameters::MsgMissionParameters() {
  SharedCtor();
}

void MsgMissionParameters::InitAsDefaultInstance() {
}

MsgMissionParameters::MsgMissionParameters(const MsgMissionParameters& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgMissionParameters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgMissionParameters::~MsgMissionParameters() {
  SharedDtor();
}

void MsgMissionParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgMissionParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgMissionParameters_descriptor_;
}

const MsgMissionParameters& MsgMissionParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgMissionParameters* MsgMissionParameters::default_instance_ = NULL;

MsgMissionParameters* MsgMissionParameters::New() const {
  return new MsgMissionParameters;
}

void MsgMissionParameters::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgMissionParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgMissionParameter elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgMissionParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgMissionParameters::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgMissionParameter elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgMissionParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgMissionParameter elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgMissionParameters::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgMissionParameter elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgMissionParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgMissionParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgMissionParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgMissionParameters::MergeFrom(const MsgMissionParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgMissionParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgMissionParameters::CopyFrom(const MsgMissionParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgMissionParameters::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgMissionParameters::Swap(MsgMissionParameters* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgMissionParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgMissionParameters_descriptor_;
  metadata.reflection = MsgMissionParameters_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgUnitOrder::_default_label_;
#ifndef _MSC_VER
const int MsgUnitOrder::kTaskerFieldNumber;
const int MsgUnitOrder::kTypeFieldNumber;
const int MsgUnitOrder::kParametersFieldNumber;
const int MsgUnitOrder::kLabelFieldNumber;
const int MsgUnitOrder::kSymbolLocationFieldNumber;
const int MsgUnitOrder::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgUnitOrder::MsgUnitOrder() {
  SharedCtor();
}

void MsgUnitOrder::InitAsDefaultInstance() {
  tasker_ = const_cast< ::Common::UnitId*>(&::Common::UnitId::default_instance());
  type_ = const_cast< ::Common::MissionType*>(&::Common::MissionType::default_instance());
  parameters_ = const_cast< ::Common::MsgMissionParameters*>(&::Common::MsgMissionParameters::default_instance());
  symbollocation_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  start_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgUnitOrder::MsgUnitOrder(const MsgUnitOrder& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgUnitOrder::SharedCtor() {
  _cached_size_ = 0;
  tasker_ = NULL;
  type_ = NULL;
  parameters_ = NULL;
  label_ = const_cast< ::std::string*>(&_default_label_);
  symbollocation_ = NULL;
  start_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgUnitOrder::~MsgUnitOrder() {
  SharedDtor();
}

void MsgUnitOrder::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
    delete tasker_;
    delete type_;
    delete parameters_;
    delete symbollocation_;
    delete start_time_;
  }
}

const ::google::protobuf::Descriptor* MsgUnitOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgUnitOrder_descriptor_;
}

const MsgUnitOrder& MsgUnitOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgUnitOrder* MsgUnitOrder::default_instance_ = NULL;

MsgUnitOrder* MsgUnitOrder::New() const {
  return new MsgUnitOrder;
}

void MsgUnitOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tasker_ != NULL) tasker_->::Common::UnitId::Clear();
    }
    if (_has_bit(1)) {
      if (type_ != NULL) type_->::Common::MissionType::Clear();
    }
    if (_has_bit(2)) {
      if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
    }
    if (_has_bit(3)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    if (_has_bit(4)) {
      if (symbollocation_ != NULL) symbollocation_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(5)) {
      if (start_time_ != NULL) start_time_->::Common::MsgDateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgUnitOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.UnitId tasker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tasker()));
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .Common.MissionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_type()));
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }
      
      // optional .Common.MsgMissionParameters parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parameters:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_parameters()));
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }
      
      // optional string label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_symbolLocation;
        break;
      }
      
      // optional .Common.MsgLocation symbolLocation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_symbolLocation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_symbollocation()));
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional .Common.MsgDateTime start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgUnitOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgUnitOrder::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.UnitId tasker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->tasker(), output);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->type(), output);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->parameters(), output);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->label(), output);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->symbollocation(), output);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->start_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgUnitOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.UnitId tasker = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasker(), target);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(), target);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->label(), target);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->symbollocation(), target);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->start_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgUnitOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.UnitId tasker = 1;
    if (has_tasker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasker());
    }
    
    // required .Common.MissionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .Common.MsgMissionParameters parameters = 3;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters());
    }
    
    // optional string label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // optional .Common.MsgLocation symbolLocation = 5;
    if (has_symbollocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbollocation());
    }
    
    // optional .Common.MsgDateTime start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgUnitOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgUnitOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgUnitOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgUnitOrder::MergeFrom(const MsgUnitOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_tasker()->::Common::UnitId::MergeFrom(from.tasker());
    }
    if (from._has_bit(1)) {
      mutable_type()->::Common::MissionType::MergeFrom(from.type());
    }
    if (from._has_bit(2)) {
      mutable_parameters()->::Common::MsgMissionParameters::MergeFrom(from.parameters());
    }
    if (from._has_bit(3)) {
      set_label(from.label());
    }
    if (from._has_bit(4)) {
      mutable_symbollocation()->::Common::MsgLocation::MergeFrom(from.symbollocation());
    }
    if (from._has_bit(5)) {
      mutable_start_time()->::Common::MsgDateTime::MergeFrom(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgUnitOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgUnitOrder::CopyFrom(const MsgUnitOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUnitOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_tasker()) {
    if (!this->tasker().IsInitialized()) return false;
  }
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_parameters()) {
    if (!this->parameters().IsInitialized()) return false;
  }
  if (has_symbollocation()) {
    if (!this->symbollocation().IsInitialized()) return false;
  }
  if (has_start_time()) {
    if (!this->start_time().IsInitialized()) return false;
  }
  return true;
}

void MsgUnitOrder::Swap(MsgUnitOrder* other) {
  if (other != this) {
    std::swap(tasker_, other->tasker_);
    std::swap(type_, other->type_);
    std::swap(parameters_, other->parameters_);
    std::swap(label_, other->label_);
    std::swap(symbollocation_, other->symbollocation_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgUnitOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgUnitOrder_descriptor_;
  metadata.reflection = MsgUnitOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgAutomatOrder::_default_label_;
#ifndef _MSC_VER
const int MsgAutomatOrder::kTaskerFieldNumber;
const int MsgAutomatOrder::kTypeFieldNumber;
const int MsgAutomatOrder::kParametersFieldNumber;
const int MsgAutomatOrder::kLabelFieldNumber;
const int MsgAutomatOrder::kSymbolLocationFieldNumber;
const int MsgAutomatOrder::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgAutomatOrder::MsgAutomatOrder() {
  SharedCtor();
}

void MsgAutomatOrder::InitAsDefaultInstance() {
  tasker_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  type_ = const_cast< ::Common::MissionType*>(&::Common::MissionType::default_instance());
  parameters_ = const_cast< ::Common::MsgMissionParameters*>(&::Common::MsgMissionParameters::default_instance());
  symbollocation_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  start_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgAutomatOrder::MsgAutomatOrder(const MsgAutomatOrder& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAutomatOrder::SharedCtor() {
  _cached_size_ = 0;
  tasker_ = NULL;
  type_ = NULL;
  parameters_ = NULL;
  label_ = const_cast< ::std::string*>(&_default_label_);
  symbollocation_ = NULL;
  start_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAutomatOrder::~MsgAutomatOrder() {
  SharedDtor();
}

void MsgAutomatOrder::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
    delete tasker_;
    delete type_;
    delete parameters_;
    delete symbollocation_;
    delete start_time_;
  }
}

const ::google::protobuf::Descriptor* MsgAutomatOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAutomatOrder_descriptor_;
}

const MsgAutomatOrder& MsgAutomatOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgAutomatOrder* MsgAutomatOrder::default_instance_ = NULL;

MsgAutomatOrder* MsgAutomatOrder::New() const {
  return new MsgAutomatOrder;
}

void MsgAutomatOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tasker_ != NULL) tasker_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (type_ != NULL) type_->::Common::MissionType::Clear();
    }
    if (_has_bit(2)) {
      if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
    }
    if (_has_bit(3)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    if (_has_bit(4)) {
      if (symbollocation_ != NULL) symbollocation_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(5)) {
      if (start_time_ != NULL) start_time_->::Common::MsgDateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAutomatOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.AutomatId tasker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tasker()));
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .Common.MissionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_type()));
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }
      
      // optional .Common.MsgMissionParameters parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parameters:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_parameters()));
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }
      
      // optional string label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_symbolLocation;
        break;
      }
      
      // optional .Common.MsgLocation symbolLocation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_symbolLocation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_symbollocation()));
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional .Common.MsgDateTime start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAutomatOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAutomatOrder::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.AutomatId tasker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->tasker(), output);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->type(), output);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->parameters(), output);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->label(), output);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->symbollocation(), output);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->start_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAutomatOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.AutomatId tasker = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasker(), target);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(), target);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->label(), target);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->symbollocation(), target);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->start_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAutomatOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.AutomatId tasker = 1;
    if (has_tasker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasker());
    }
    
    // required .Common.MissionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .Common.MsgMissionParameters parameters = 3;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters());
    }
    
    // optional string label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // optional .Common.MsgLocation symbolLocation = 5;
    if (has_symbollocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbollocation());
    }
    
    // optional .Common.MsgDateTime start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAutomatOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAutomatOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAutomatOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAutomatOrder::MergeFrom(const MsgAutomatOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_tasker()->::Common::AutomatId::MergeFrom(from.tasker());
    }
    if (from._has_bit(1)) {
      mutable_type()->::Common::MissionType::MergeFrom(from.type());
    }
    if (from._has_bit(2)) {
      mutable_parameters()->::Common::MsgMissionParameters::MergeFrom(from.parameters());
    }
    if (from._has_bit(3)) {
      set_label(from.label());
    }
    if (from._has_bit(4)) {
      mutable_symbollocation()->::Common::MsgLocation::MergeFrom(from.symbollocation());
    }
    if (from._has_bit(5)) {
      mutable_start_time()->::Common::MsgDateTime::MergeFrom(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAutomatOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAutomatOrder::CopyFrom(const MsgAutomatOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAutomatOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_tasker()) {
    if (!this->tasker().IsInitialized()) return false;
  }
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_parameters()) {
    if (!this->parameters().IsInitialized()) return false;
  }
  if (has_symbollocation()) {
    if (!this->symbollocation().IsInitialized()) return false;
  }
  if (has_start_time()) {
    if (!this->start_time().IsInitialized()) return false;
  }
  return true;
}

void MsgAutomatOrder::Swap(MsgAutomatOrder* other) {
  if (other != this) {
    std::swap(tasker_, other->tasker_);
    std::swap(type_, other->type_);
    std::swap(parameters_, other->parameters_);
    std::swap(label_, other->label_);
    std::swap(symbollocation_, other->symbollocation_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAutomatOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAutomatOrder_descriptor_;
  metadata.reflection = MsgAutomatOrder_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgCrowdOrder::_default_label_;
#ifndef _MSC_VER
const int MsgCrowdOrder::kTaskerFieldNumber;
const int MsgCrowdOrder::kTypeFieldNumber;
const int MsgCrowdOrder::kParametersFieldNumber;
const int MsgCrowdOrder::kLabelFieldNumber;
const int MsgCrowdOrder::kSymbolLocationFieldNumber;
const int MsgCrowdOrder::kStartTimeFieldNumber;
#endif  // !_MSC_VER

MsgCrowdOrder::MsgCrowdOrder() {
  SharedCtor();
}

void MsgCrowdOrder::InitAsDefaultInstance() {
  tasker_ = const_cast< ::Common::CrowdId*>(&::Common::CrowdId::default_instance());
  type_ = const_cast< ::Common::MissionType*>(&::Common::MissionType::default_instance());
  parameters_ = const_cast< ::Common::MsgMissionParameters*>(&::Common::MsgMissionParameters::default_instance());
  symbollocation_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  start_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgCrowdOrder::MsgCrowdOrder(const MsgCrowdOrder& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgCrowdOrder::SharedCtor() {
  _cached_size_ = 0;
  tasker_ = NULL;
  type_ = NULL;
  parameters_ = NULL;
  label_ = const_cast< ::std::string*>(&_default_label_);
  symbollocation_ = NULL;
  start_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCrowdOrder::~MsgCrowdOrder() {
  SharedDtor();
}

void MsgCrowdOrder::SharedDtor() {
  if (label_ != &_default_label_) {
    delete label_;
  }
  if (this != default_instance_) {
    delete tasker_;
    delete type_;
    delete parameters_;
    delete symbollocation_;
    delete start_time_;
  }
}

const ::google::protobuf::Descriptor* MsgCrowdOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCrowdOrder_descriptor_;
}

const MsgCrowdOrder& MsgCrowdOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgCrowdOrder* MsgCrowdOrder::default_instance_ = NULL;

MsgCrowdOrder* MsgCrowdOrder::New() const {
  return new MsgCrowdOrder;
}

void MsgCrowdOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tasker_ != NULL) tasker_->::Common::CrowdId::Clear();
    }
    if (_has_bit(1)) {
      if (type_ != NULL) type_->::Common::MissionType::Clear();
    }
    if (_has_bit(2)) {
      if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
    }
    if (_has_bit(3)) {
      if (label_ != &_default_label_) {
        label_->clear();
      }
    }
    if (_has_bit(4)) {
      if (symbollocation_ != NULL) symbollocation_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(5)) {
      if (start_time_ != NULL) start_time_->::Common::MsgDateTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCrowdOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.CrowdId tasker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tasker()));
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required .Common.MissionType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_type:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_type()));
        if (input->ExpectTag(26)) goto parse_parameters;
        break;
      }
      
      // optional .Common.MsgMissionParameters parameters = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_parameters:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_parameters()));
        if (input->ExpectTag(34)) goto parse_label;
        break;
      }
      
      // optional string label = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_label:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_label()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->label().data(), this->label().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(42)) goto parse_symbolLocation;
        break;
      }
      
      // optional .Common.MsgLocation symbolLocation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_symbolLocation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_symbollocation()));
        if (input->ExpectTag(50)) goto parse_start_time;
        break;
      }
      
      // optional .Common.MsgDateTime start_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_start_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_start_time()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCrowdOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgCrowdOrder::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.CrowdId tasker = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->tasker(), output);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->type(), output);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->parameters(), output);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->label(), output);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->symbollocation(), output);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->start_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCrowdOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.CrowdId tasker = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasker(), target);
  }
  
  // required .Common.MissionType type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->type(), target);
  }
  
  // optional .Common.MsgMissionParameters parameters = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameters(), target);
  }
  
  // optional string label = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->label().data(), this->label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->label(), target);
  }
  
  // optional .Common.MsgLocation symbolLocation = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->symbollocation(), target);
  }
  
  // optional .Common.MsgDateTime start_time = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->start_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCrowdOrder::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.CrowdId tasker = 1;
    if (has_tasker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasker());
    }
    
    // required .Common.MissionType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type());
    }
    
    // optional .Common.MsgMissionParameters parameters = 3;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parameters());
    }
    
    // optional string label = 4;
    if (has_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->label());
    }
    
    // optional .Common.MsgLocation symbolLocation = 5;
    if (has_symbollocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbollocation());
    }
    
    // optional .Common.MsgDateTime start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgCrowdOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCrowdOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCrowdOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCrowdOrder::MergeFrom(const MsgCrowdOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_tasker()->::Common::CrowdId::MergeFrom(from.tasker());
    }
    if (from._has_bit(1)) {
      mutable_type()->::Common::MissionType::MergeFrom(from.type());
    }
    if (from._has_bit(2)) {
      mutable_parameters()->::Common::MsgMissionParameters::MergeFrom(from.parameters());
    }
    if (from._has_bit(3)) {
      set_label(from.label());
    }
    if (from._has_bit(4)) {
      mutable_symbollocation()->::Common::MsgLocation::MergeFrom(from.symbollocation());
    }
    if (from._has_bit(5)) {
      mutable_start_time()->::Common::MsgDateTime::MergeFrom(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCrowdOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCrowdOrder::CopyFrom(const MsgCrowdOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCrowdOrder::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_tasker()) {
    if (!this->tasker().IsInitialized()) return false;
  }
  if (has_type()) {
    if (!this->type().IsInitialized()) return false;
  }
  if (has_parameters()) {
    if (!this->parameters().IsInitialized()) return false;
  }
  if (has_symbollocation()) {
    if (!this->symbollocation().IsInitialized()) return false;
  }
  if (has_start_time()) {
    if (!this->start_time().IsInitialized()) return false;
  }
  return true;
}

void MsgCrowdOrder::Swap(MsgCrowdOrder* other) {
  if (other != this) {
    std::swap(tasker_, other->tasker_);
    std::swap(type_, other->type_);
    std::swap(parameters_, other->parameters_);
    std::swap(label_, other->label_);
    std::swap(symbollocation_, other->symbollocation_);
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCrowdOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCrowdOrder_descriptor_;
  metadata.reflection = MsgCrowdOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgTacticalLine_Diffusion::kAutomatFieldNumber;
const int MsgTacticalLine_Diffusion::kFormationFieldNumber;
#endif  // !_MSC_VER

MsgTacticalLine_Diffusion::MsgTacticalLine_Diffusion() {
  SharedCtor();
}

void MsgTacticalLine_Diffusion::InitAsDefaultInstance() {
  automat_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
  formation_ = const_cast< ::Common::FormationId*>(&::Common::FormationId::default_instance());
}

MsgTacticalLine_Diffusion::MsgTacticalLine_Diffusion(const MsgTacticalLine_Diffusion& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTacticalLine_Diffusion::SharedCtor() {
  _cached_size_ = 0;
  automat_ = NULL;
  formation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTacticalLine_Diffusion::~MsgTacticalLine_Diffusion() {
  SharedDtor();
}

void MsgTacticalLine_Diffusion::SharedDtor() {
  if (this != default_instance_) {
    delete automat_;
    delete formation_;
  }
}

const ::google::protobuf::Descriptor* MsgTacticalLine_Diffusion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTacticalLine_Diffusion_descriptor_;
}

const MsgTacticalLine_Diffusion& MsgTacticalLine_Diffusion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgTacticalLine_Diffusion* MsgTacticalLine_Diffusion::default_instance_ = NULL;

MsgTacticalLine_Diffusion* MsgTacticalLine_Diffusion::New() const {
  return new MsgTacticalLine_Diffusion;
}

void MsgTacticalLine_Diffusion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (automat_ != NULL) automat_->::Common::AutomatId::Clear();
    }
    if (_has_bit(1)) {
      if (formation_ != NULL) formation_->::Common::FormationId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTacticalLine_Diffusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.AutomatId automat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_automat()));
        if (input->ExpectTag(18)) goto parse_formation;
        break;
      }
      
      // optional .Common.FormationId formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_formation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_formation()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTacticalLine_Diffusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTacticalLine_Diffusion::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->automat(), output);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->formation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTacticalLine_Diffusion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.AutomatId automat = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->automat(), target);
  }
  
  // optional .Common.FormationId formation = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->formation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTacticalLine_Diffusion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.AutomatId automat = 1;
    if (has_automat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->automat());
    }
    
    // optional .Common.FormationId formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->formation());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTacticalLine_Diffusion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTacticalLine_Diffusion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTacticalLine_Diffusion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTacticalLine_Diffusion::MergeFrom(const MsgTacticalLine_Diffusion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_automat()->::Common::AutomatId::MergeFrom(from.automat());
    }
    if (from._has_bit(1)) {
      mutable_formation()->::Common::FormationId::MergeFrom(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTacticalLine_Diffusion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTacticalLine_Diffusion::CopyFrom(const MsgTacticalLine_Diffusion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTacticalLine_Diffusion::IsInitialized() const {
  
  if (has_automat()) {
    if (!this->automat().IsInitialized()) return false;
  }
  if (has_formation()) {
    if (!this->formation().IsInitialized()) return false;
  }
  return true;
}

void MsgTacticalLine_Diffusion::Swap(MsgTacticalLine_Diffusion* other) {
  if (other != this) {
    std::swap(automat_, other->automat_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTacticalLine_Diffusion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTacticalLine_Diffusion_descriptor_;
  metadata.reflection = MsgTacticalLine_Diffusion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::std::string MsgTacticalLine::_default_name_;
#ifndef _MSC_VER
const int MsgTacticalLine::kNameFieldNumber;
const int MsgTacticalLine::kGeometryFieldNumber;
const int MsgTacticalLine::kDiffusionFieldNumber;
#endif  // !_MSC_VER

MsgTacticalLine::MsgTacticalLine() {
  SharedCtor();
}

void MsgTacticalLine::InitAsDefaultInstance() {
  geometry_ = const_cast< ::Common::MsgLocation*>(&::Common::MsgLocation::default_instance());
  diffusion_ = const_cast< ::Common::MsgTacticalLine_Diffusion*>(&::Common::MsgTacticalLine_Diffusion::default_instance());
}

MsgTacticalLine::MsgTacticalLine(const MsgTacticalLine& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTacticalLine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  geometry_ = NULL;
  diffusion_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTacticalLine::~MsgTacticalLine() {
  SharedDtor();
}

void MsgTacticalLine::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
    delete geometry_;
    delete diffusion_;
  }
}

const ::google::protobuf::Descriptor* MsgTacticalLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTacticalLine_descriptor_;
}

const MsgTacticalLine& MsgTacticalLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgTacticalLine* MsgTacticalLine::default_instance_ = NULL;

MsgTacticalLine* MsgTacticalLine::New() const {
  return new MsgTacticalLine;
}

void MsgTacticalLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (geometry_ != NULL) geometry_->::Common::MsgLocation::Clear();
    }
    if (_has_bit(2)) {
      if (diffusion_ != NULL) diffusion_->::Common::MsgTacticalLine_Diffusion::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTacticalLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_geometry;
        break;
      }
      
      // required .Common.MsgLocation geometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_geometry:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_geometry()));
        if (input->ExpectTag(26)) goto parse_diffusion;
        break;
      }
      
      // required .Common.MsgTacticalLine.Diffusion diffusion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_diffusion:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_diffusion()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTacticalLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTacticalLine::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .Common.MsgLocation geometry = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->geometry(), output);
  }
  
  // required .Common.MsgTacticalLine.Diffusion diffusion = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->diffusion(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTacticalLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .Common.MsgLocation geometry = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geometry(), target);
  }
  
  // required .Common.MsgTacticalLine.Diffusion diffusion = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->diffusion(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTacticalLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .Common.MsgLocation geometry = 2;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }
    
    // required .Common.MsgTacticalLine.Diffusion diffusion = 3;
    if (has_diffusion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diffusion());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTacticalLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTacticalLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTacticalLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTacticalLine::MergeFrom(const MsgTacticalLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      mutable_geometry()->::Common::MsgLocation::MergeFrom(from.geometry());
    }
    if (from._has_bit(2)) {
      mutable_diffusion()->::Common::MsgTacticalLine_Diffusion::MergeFrom(from.diffusion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTacticalLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTacticalLine::CopyFrom(const MsgTacticalLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTacticalLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_diffusion()) {
    if (!this->diffusion().IsInitialized()) return false;
  }
  return true;
}

void MsgTacticalLine::Swap(MsgTacticalLine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(geometry_, other->geometry_);
    std::swap(diffusion_, other->diffusion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTacticalLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTacticalLine_descriptor_;
  metadata.reflection = MsgTacticalLine_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgShape::_default_category_;
const ::std::string MsgShape::_default_color_;
const ::std::string MsgShape::_default_pattern_;
#ifndef _MSC_VER
const int MsgShape::kCategoryFieldNumber;
const int MsgShape::kColorFieldNumber;
const int MsgShape::kPatternFieldNumber;
const int MsgShape::kPointsFieldNumber;
#endif  // !_MSC_VER

MsgShape::MsgShape() {
  SharedCtor();
}

void MsgShape::InitAsDefaultInstance() {
  points_ = const_cast< ::Common::MsgCoordLatLongList*>(&::Common::MsgCoordLatLongList::default_instance());
}

MsgShape::MsgShape(const MsgShape& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgShape::SharedCtor() {
  _cached_size_ = 0;
  category_ = const_cast< ::std::string*>(&_default_category_);
  color_ = const_cast< ::std::string*>(&_default_color_);
  pattern_ = const_cast< ::std::string*>(&_default_pattern_);
  points_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgShape::~MsgShape() {
  SharedDtor();
}

void MsgShape::SharedDtor() {
  if (category_ != &_default_category_) {
    delete category_;
  }
  if (color_ != &_default_color_) {
    delete color_;
  }
  if (pattern_ != &_default_pattern_) {
    delete pattern_;
  }
  if (this != default_instance_) {
    delete points_;
  }
}

const ::google::protobuf::Descriptor* MsgShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgShape_descriptor_;
}

const MsgShape& MsgShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgShape* MsgShape::default_instance_ = NULL;

MsgShape* MsgShape::New() const {
  return new MsgShape;
}

void MsgShape::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (category_ != &_default_category_) {
        category_->clear();
      }
    }
    if (_has_bit(1)) {
      if (color_ != &_default_color_) {
        color_->clear();
      }
    }
    if (_has_bit(2)) {
      if (pattern_ != &_default_pattern_) {
        pattern_->clear();
      }
    }
    if (_has_bit(3)) {
      if (points_ != NULL) points_->::Common::MsgCoordLatLongList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string category = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_category()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->category().data(), this->category().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }
      
      // required string color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_color:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_color()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->color().data(), this->color().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_pattern;
        break;
      }
      
      // required string pattern = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_pattern:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_pattern()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->pattern().data(), this->pattern().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }
      
      // required .Common.MsgCoordLatLongList points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_points:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_points()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgShape::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string category = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->category(), output);
  }
  
  // required string color = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->color(), output);
  }
  
  // required string pattern = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pattern(), output);
  }
  
  // required .Common.MsgCoordLatLongList points = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->points(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string category = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->category().data(), this->category().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->category(), target);
  }
  
  // required string color = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }
  
  // required string pattern = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pattern().data(), this->pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pattern(), target);
  }
  
  // required .Common.MsgCoordLatLongList points = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgShape::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string category = 1;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->category());
    }
    
    // required string color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->color());
    }
    
    // required string pattern = 3;
    if (has_pattern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pattern());
    }
    
    // required .Common.MsgCoordLatLongList points = 4;
    if (has_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgShape::MergeFrom(const MsgShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_category(from.category());
    }
    if (from._has_bit(1)) {
      set_color(from.color());
    }
    if (from._has_bit(2)) {
      set_pattern(from.pattern());
    }
    if (from._has_bit(3)) {
      mutable_points()->::Common::MsgCoordLatLongList::MergeFrom(from.points());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgShape::CopyFrom(const MsgShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgShape::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_points()) {
    if (!this->points().IsInitialized()) return false;
  }
  return true;
}

void MsgShape::Swap(MsgShape* other) {
  if (other != this) {
    std::swap(category_, other->category_);
    std::swap(color_, other->color_);
    std::swap(pattern_, other->pattern_);
    std::swap(points_, other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgShape_descriptor_;
  metadata.reflection = MsgShape_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgChatTarget::_default_profile_;
#ifndef _MSC_VER
const int MsgChatTarget::kProfileFieldNumber;
#endif  // !_MSC_VER

MsgChatTarget::MsgChatTarget() {
  SharedCtor();
}

void MsgChatTarget::InitAsDefaultInstance() {
}

MsgChatTarget::MsgChatTarget(const MsgChatTarget& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgChatTarget::SharedCtor() {
  _cached_size_ = 0;
  profile_ = const_cast< ::std::string*>(&_default_profile_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgChatTarget::~MsgChatTarget() {
  SharedDtor();
}

void MsgChatTarget::SharedDtor() {
  if (profile_ != &_default_profile_) {
    delete profile_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgChatTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgChatTarget_descriptor_;
}

const MsgChatTarget& MsgChatTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgChatTarget* MsgChatTarget::default_instance_ = NULL;

MsgChatTarget* MsgChatTarget::New() const {
  return new MsgChatTarget;
}

void MsgChatTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (profile_ != &_default_profile_) {
        profile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgChatTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string profile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_profile()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->profile().data(), this->profile().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgChatTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgChatTarget::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string profile = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->profile(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgChatTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string profile = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profile().data(), this->profile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->profile(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgChatTarget::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string profile = 1;
    if (has_profile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profile());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgChatTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgChatTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgChatTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgChatTarget::MergeFrom(const MsgChatTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_profile(from.profile());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgChatTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgChatTarget::CopyFrom(const MsgChatTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgChatTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgChatTarget::Swap(MsgChatTarget* other) {
  if (other != this) {
    std::swap(profile_, other->profile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgChatTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgChatTarget_descriptor_;
  metadata.reflection = MsgChatTarget_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgTextMessage::_default_message_;
#ifndef _MSC_VER
const int MsgTextMessage::kSourceFieldNumber;
const int MsgTextMessage::kTargetFieldNumber;
const int MsgTextMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgTextMessage::MsgTextMessage() {
  SharedCtor();
}

void MsgTextMessage::InitAsDefaultInstance() {
  source_ = const_cast< ::Common::MsgChatTarget*>(&::Common::MsgChatTarget::default_instance());
  target_ = const_cast< ::Common::MsgChatTarget*>(&::Common::MsgChatTarget::default_instance());
}

MsgTextMessage::MsgTextMessage(const MsgTextMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgTextMessage::SharedCtor() {
  _cached_size_ = 0;
  source_ = NULL;
  target_ = NULL;
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgTextMessage::~MsgTextMessage() {
  SharedDtor();
}

void MsgTextMessage::SharedDtor() {
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
    delete source_;
    delete target_;
  }
}

const ::google::protobuf::Descriptor* MsgTextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTextMessage_descriptor_;
}

const MsgTextMessage& MsgTextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgTextMessage* MsgTextMessage::default_instance_ = NULL;

MsgTextMessage* MsgTextMessage::New() const {
  return new MsgTextMessage;
}

void MsgTextMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (source_ != NULL) source_->::Common::MsgChatTarget::Clear();
    }
    if (_has_bit(1)) {
      if (target_ != NULL) target_->::Common::MsgChatTarget::Clear();
    }
    if (_has_bit(2)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgTextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgChatTarget source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_source()));
        if (input->ExpectTag(18)) goto parse_target;
        break;
      }
      
      // required .Common.MsgChatTarget target = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_target:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_target()));
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }
      
      // required string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_message()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgTextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgTextMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgChatTarget source = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->source(), output);
  }
  
  // required .Common.MsgChatTarget target = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->target(), output);
  }
  
  // required string message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgTextMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgChatTarget source = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->source(), target);
  }
  
  // required .Common.MsgChatTarget target = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target(), target);
  }
  
  // required string message = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgTextMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgChatTarget source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
    // required .Common.MsgChatTarget target = 2;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }
    
    // required string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgTextMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgTextMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgTextMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgTextMessage::MergeFrom(const MsgTextMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_source()->::Common::MsgChatTarget::MergeFrom(from.source());
    }
    if (from._has_bit(1)) {
      mutable_target()->::Common::MsgChatTarget::MergeFrom(from.target());
    }
    if (from._has_bit(2)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgTextMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgTextMessage::CopyFrom(const MsgTextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  return true;
}

void MsgTextMessage::Swap(MsgTextMessage* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(target_, other->target_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgTextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgTextMessage_descriptor_;
  metadata.reflection = MsgTextMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResourceNetwork_Link_TargetKind_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceNetwork_Link_TargetKind_descriptor_;
}
bool ResourceNetwork_Link_TargetKind_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ResourceNetwork_Link_TargetKind ResourceNetwork_Link::urban;
const ResourceNetwork_Link_TargetKind ResourceNetwork_Link::object;
const ResourceNetwork_Link_TargetKind ResourceNetwork_Link::TargetKind_MIN;
const ResourceNetwork_Link_TargetKind ResourceNetwork_Link::TargetKind_MAX;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ResourceNetwork_Link::kKindFieldNumber;
const int ResourceNetwork_Link::kTargetIdFieldNumber;
const int ResourceNetwork_Link::kCapacityFieldNumber;
const int ResourceNetwork_Link::kFlowFieldNumber;
#endif  // !_MSC_VER

ResourceNetwork_Link::ResourceNetwork_Link() {
  SharedCtor();
}

void ResourceNetwork_Link::InitAsDefaultInstance() {
}

ResourceNetwork_Link::ResourceNetwork_Link(const ResourceNetwork_Link& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceNetwork_Link::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 1;
  target_id_ = 0u;
  capacity_ = 0;
  flow_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceNetwork_Link::~ResourceNetwork_Link() {
  SharedDtor();
}

void ResourceNetwork_Link::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ResourceNetwork_Link::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceNetwork_Link_descriptor_;
}

const ResourceNetwork_Link& ResourceNetwork_Link::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ResourceNetwork_Link* ResourceNetwork_Link::default_instance_ = NULL;

ResourceNetwork_Link* ResourceNetwork_Link::New() const {
  return new ResourceNetwork_Link;
}

void ResourceNetwork_Link::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 1;
    target_id_ = 0u;
    capacity_ = 0;
    flow_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceNetwork_Link::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ResourceNetwork.Link.TargetKind kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Common::ResourceNetwork_Link_TargetKind_IsValid(value)) {
          set_kind(static_cast< ::Common::ResourceNetwork_Link_TargetKind >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_target_id;
        break;
      }
      
      // required uint32 target_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_target_id:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &target_id_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_capacity;
        break;
      }
      
      // required int32 capacity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_capacity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &capacity_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_flow;
        break;
      }
      
      // required uint32 flow = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flow:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &flow_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceNetwork_Link::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceNetwork_Link::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ResourceNetwork.Link.TargetKind kind = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }
  
  // required uint32 target_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_id(), output);
  }
  
  // required int32 capacity = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->capacity(), output);
  }
  
  // required uint32 flow = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceNetwork_Link::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ResourceNetwork.Link.TargetKind kind = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }
  
  // required uint32 target_id = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_id(), target);
  }
  
  // required int32 capacity = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->capacity(), target);
  }
  
  // required uint32 flow = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceNetwork_Link::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ResourceNetwork.Link.TargetKind kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
    }
    
    // required uint32 target_id = 2;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }
    
    // required int32 capacity = 3;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }
    
    // required uint32 flow = 4;
    if (has_flow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flow());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceNetwork_Link::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceNetwork_Link* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceNetwork_Link*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceNetwork_Link::MergeFrom(const ResourceNetwork_Link& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_kind(from.kind());
    }
    if (from._has_bit(1)) {
      set_target_id(from.target_id());
    }
    if (from._has_bit(2)) {
      set_capacity(from.capacity());
    }
    if (from._has_bit(3)) {
      set_flow(from.flow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceNetwork_Link::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceNetwork_Link::CopyFrom(const ResourceNetwork_Link& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceNetwork_Link::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ResourceNetwork_Link::Swap(ResourceNetwork_Link* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(target_id_, other->target_id_);
    std::swap(capacity_, other->capacity_);
    std::swap(flow_, other->flow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceNetwork_Link::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceNetwork_Link_descriptor_;
  metadata.reflection = ResourceNetwork_Link_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ResourceNetwork::kResourceFieldNumber;
const int ResourceNetwork::kLinkFieldNumber;
const int ResourceNetwork::kEnabledFieldNumber;
const int ResourceNetwork::kMaxStockFieldNumber;
const int ResourceNetwork::kStockFieldNumber;
const int ResourceNetwork::kProductionFieldNumber;
const int ResourceNetwork::kConsumptionFieldNumber;
const int ResourceNetwork::kCriticalFieldNumber;
#endif  // !_MSC_VER

ResourceNetwork::ResourceNetwork() {
  SharedCtor();
}

void ResourceNetwork::InitAsDefaultInstance() {
  resource_ = const_cast< ::Common::ResourceNetworkType*>(&::Common::ResourceNetworkType::default_instance());
}

ResourceNetwork::ResourceNetwork(const ResourceNetwork& from) {
  SharedCtor();
  MergeFrom(from);
}

void ResourceNetwork::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  enabled_ = false;
  max_stock_ = 0u;
  stock_ = 0u;
  production_ = 0u;
  consumption_ = 0u;
  critical_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceNetwork::~ResourceNetwork() {
  SharedDtor();
}

void ResourceNetwork::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
  }
}

const ::google::protobuf::Descriptor* ResourceNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceNetwork_descriptor_;
}

const ResourceNetwork& ResourceNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ResourceNetwork* ResourceNetwork::default_instance_ = NULL;

ResourceNetwork* ResourceNetwork::New() const {
  return new ResourceNetwork;
}

void ResourceNetwork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (resource_ != NULL) resource_->::Common::ResourceNetworkType::Clear();
    }
    enabled_ = false;
    max_stock_ = 0u;
    stock_ = 0u;
    production_ = 0u;
    consumption_ = 0u;
    critical_ = false;
  }
  link_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ResourceNetworkType resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resource()));
        if (input->ExpectTag(18)) goto parse_link;
        break;
      }
      
      // repeated .Common.ResourceNetwork.Link link = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_link:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_link()));
        if (input->ExpectTag(18)) goto parse_link;
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }
      
      // required bool enabled = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_enabled:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &enabled_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_max_stock;
        break;
      }
      
      // optional uint32 max_stock = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_stock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &max_stock_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_stock;
        break;
      }
      
      // optional uint32 stock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_stock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &stock_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_production;
        break;
      }
      
      // optional uint32 production = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_production:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &production_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_consumption;
        break;
      }
      
      // optional uint32 consumption = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_consumption:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &consumption_));
        _set_bit(6);
        if (input->ExpectTag(64)) goto parse_critical;
        break;
      }
      
      // optional bool critical = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_critical:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &critical_));
        _set_bit(7);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ResourceNetwork::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ResourceNetworkType resource = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->resource(), output);
  }
  
  // repeated .Common.ResourceNetwork.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->link(i), output);
  }
  
  // required bool enabled = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }
  
  // optional uint32 max_stock = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_stock(), output);
  }
  
  // optional uint32 stock = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stock(), output);
  }
  
  // optional uint32 production = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->production(), output);
  }
  
  // optional uint32 consumption = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->consumption(), output);
  }
  
  // optional bool critical = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->critical(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ResourceNetworkType resource = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }
  
  // repeated .Common.ResourceNetwork.Link link = 2;
  for (int i = 0; i < this->link_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->link(i), target);
  }
  
  // required bool enabled = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }
  
  // optional uint32 max_stock = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_stock(), target);
  }
  
  // optional uint32 stock = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stock(), target);
  }
  
  // optional uint32 production = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->production(), target);
  }
  
  // optional uint32 consumption = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->consumption(), target);
  }
  
  // optional bool critical = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->critical(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceNetwork::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ResourceNetworkType resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
    // required bool enabled = 3;
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 max_stock = 4;
    if (has_max_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_stock());
    }
    
    // optional uint32 stock = 5;
    if (has_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stock());
    }
    
    // optional uint32 production = 6;
    if (has_production()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->production());
    }
    
    // optional uint32 consumption = 7;
    if (has_consumption()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumption());
    }
    
    // optional bool critical = 8;
    if (has_critical()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .Common.ResourceNetwork.Link link = 2;
  total_size += 1 * this->link_size();
  for (int i = 0; i < this->link_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->link(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ResourceNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceNetwork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceNetwork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceNetwork::MergeFrom(const ResourceNetwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  link_.MergeFrom(from.link_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_resource()->::Common::ResourceNetworkType::MergeFrom(from.resource());
    }
    if (from._has_bit(2)) {
      set_enabled(from.enabled());
    }
    if (from._has_bit(3)) {
      set_max_stock(from.max_stock());
    }
    if (from._has_bit(4)) {
      set_stock(from.stock());
    }
    if (from._has_bit(5)) {
      set_production(from.production());
    }
    if (from._has_bit(6)) {
      set_consumption(from.consumption());
    }
    if (from._has_bit(7)) {
      set_critical(from.critical());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceNetwork::CopyFrom(const ResourceNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceNetwork::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  for (int i = 0; i < link_size(); i++) {
    if (!this->link(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceNetwork::Swap(ResourceNetwork* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    link_.Swap(&other->link_);
    std::swap(enabled_, other->enabled_);
    std::swap(max_stock_, other->max_stock_);
    std::swap(stock_, other->stock_);
    std::swap(production_, other->production_);
    std::swap(consumption_, other->consumption_);
    std::swap(critical_, other->critical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceNetwork_descriptor_;
  metadata.reflection = ResourceNetwork_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeResourceNetwork::kNetworkFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeResourceNetwork::ObjectAttributeResourceNetwork() {
  SharedCtor();
}

void ObjectAttributeResourceNetwork::InitAsDefaultInstance() {
}

ObjectAttributeResourceNetwork::ObjectAttributeResourceNetwork(const ObjectAttributeResourceNetwork& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeResourceNetwork::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeResourceNetwork::~ObjectAttributeResourceNetwork() {
  SharedDtor();
}

void ObjectAttributeResourceNetwork::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeResourceNetwork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeResourceNetwork_descriptor_;
}

const ObjectAttributeResourceNetwork& ObjectAttributeResourceNetwork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeResourceNetwork* ObjectAttributeResourceNetwork::default_instance_ = NULL;

ObjectAttributeResourceNetwork* ObjectAttributeResourceNetwork::New() const {
  return new ObjectAttributeResourceNetwork;
}

void ObjectAttributeResourceNetwork::Clear() {
  network_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeResourceNetwork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.ResourceNetwork network = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_network:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_network()));
        if (input->ExpectTag(10)) goto parse_network;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeResourceNetwork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeResourceNetwork::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.ResourceNetwork network = 1;
  for (int i = 0; i < this->network_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->network(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeResourceNetwork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.ResourceNetwork network = 1;
  for (int i = 0; i < this->network_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->network(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeResourceNetwork::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.ResourceNetwork network = 1;
  total_size += 1 * this->network_size();
  for (int i = 0; i < this->network_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeResourceNetwork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeResourceNetwork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeResourceNetwork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeResourceNetwork::MergeFrom(const ObjectAttributeResourceNetwork& from) {
  GOOGLE_CHECK_NE(&from, this);
  network_.MergeFrom(from.network_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeResourceNetwork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeResourceNetwork::CopyFrom(const ObjectAttributeResourceNetwork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeResourceNetwork::IsInitialized() const {
  
  for (int i = 0; i < network_size(); i++) {
    if (!this->network(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeResourceNetwork::Swap(ObjectAttributeResourceNetwork* other) {
  if (other != this) {
    network_.Swap(&other->network_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeResourceNetwork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeResourceNetwork_descriptor_;
  metadata.reflection = ObjectAttributeResourceNetwork_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeConstruction::kResourceFieldNumber;
const int ObjectAttributeConstruction::kDotationNbrFieldNumber;
const int ObjectAttributeConstruction::kDensityFieldNumber;
const int ObjectAttributeConstruction::kPercentageFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeConstruction::ObjectAttributeConstruction() {
  SharedCtor();
}

void ObjectAttributeConstruction::InitAsDefaultInstance() {
  resource_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
}

ObjectAttributeConstruction::ObjectAttributeConstruction(const ObjectAttributeConstruction& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeConstruction::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  dotation_nbr_ = 0;
  density_ = 0;
  percentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeConstruction::~ObjectAttributeConstruction() {
  SharedDtor();
}

void ObjectAttributeConstruction::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeConstruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeConstruction_descriptor_;
}

const ObjectAttributeConstruction& ObjectAttributeConstruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeConstruction* ObjectAttributeConstruction::default_instance_ = NULL;

ObjectAttributeConstruction* ObjectAttributeConstruction::New() const {
  return new ObjectAttributeConstruction;
}

void ObjectAttributeConstruction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (resource_ != NULL) resource_->::Common::ResourceType::Clear();
    }
    dotation_nbr_ = 0;
    density_ = 0;
    percentage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeConstruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.ResourceType resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resource()));
        if (input->ExpectTag(16)) goto parse_dotation_nbr;
        break;
      }
      
      // optional int32 dotation_nbr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dotation_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dotation_nbr_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_density;
        break;
      }
      
      // optional float density = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &density_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_percentage;
        break;
      }
      
      // optional int32 percentage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_percentage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &percentage_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeConstruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeConstruction::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->resource(), output);
  }
  
  // optional int32 dotation_nbr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dotation_nbr(), output);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->density(), output);
  }
  
  // optional int32 percentage = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeConstruction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }
  
  // optional int32 dotation_nbr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dotation_nbr(), target);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->density(), target);
  }
  
  // optional int32 percentage = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeConstruction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.ResourceType resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
    // optional int32 dotation_nbr = 2;
    if (has_dotation_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotation_nbr());
    }
    
    // optional float density = 3;
    if (has_density()) {
      total_size += 1 + 4;
    }
    
    // optional int32 percentage = 4;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeConstruction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeConstruction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeConstruction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeConstruction::MergeFrom(const ObjectAttributeConstruction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_resource()->::Common::ResourceType::MergeFrom(from.resource());
    }
    if (from._has_bit(1)) {
      set_dotation_nbr(from.dotation_nbr());
    }
    if (from._has_bit(2)) {
      set_density(from.density());
    }
    if (from._has_bit(3)) {
      set_percentage(from.percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeConstruction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeConstruction::CopyFrom(const ObjectAttributeConstruction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeConstruction::IsInitialized() const {
  
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeConstruction::Swap(ObjectAttributeConstruction* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(dotation_nbr_, other->dotation_nbr_);
    std::swap(density_, other->density_);
    std::swap(percentage_, other->percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeConstruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeConstruction_descriptor_;
  metadata.reflection = ObjectAttributeConstruction_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeMine::kResourceFieldNumber;
const int ObjectAttributeMine::kDotationNbrFieldNumber;
const int ObjectAttributeMine::kDensityFieldNumber;
const int ObjectAttributeMine::kPercentageFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeMine::ObjectAttributeMine() {
  SharedCtor();
}

void ObjectAttributeMine::InitAsDefaultInstance() {
  resource_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
}

ObjectAttributeMine::ObjectAttributeMine(const ObjectAttributeMine& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeMine::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  dotation_nbr_ = 0;
  density_ = 0;
  percentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeMine::~ObjectAttributeMine() {
  SharedDtor();
}

void ObjectAttributeMine::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeMine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeMine_descriptor_;
}

const ObjectAttributeMine& ObjectAttributeMine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeMine* ObjectAttributeMine::default_instance_ = NULL;

ObjectAttributeMine* ObjectAttributeMine::New() const {
  return new ObjectAttributeMine;
}

void ObjectAttributeMine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (resource_ != NULL) resource_->::Common::ResourceType::Clear();
    }
    dotation_nbr_ = 0;
    density_ = 0;
    percentage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeMine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.ResourceType resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resource()));
        if (input->ExpectTag(16)) goto parse_dotation_nbr;
        break;
      }
      
      // optional int32 dotation_nbr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_dotation_nbr:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &dotation_nbr_));
        _set_bit(1);
        if (input->ExpectTag(29)) goto parse_density;
        break;
      }
      
      // optional float density = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &density_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_percentage;
        break;
      }
      
      // optional int32 percentage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_percentage:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &percentage_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeMine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeMine::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->resource(), output);
  }
  
  // optional int32 dotation_nbr = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dotation_nbr(), output);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->density(), output);
  }
  
  // optional int32 percentage = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->percentage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeMine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }
  
  // optional int32 dotation_nbr = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dotation_nbr(), target);
  }
  
  // optional float density = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->density(), target);
  }
  
  // optional int32 percentage = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->percentage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeMine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.ResourceType resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
    // optional int32 dotation_nbr = 2;
    if (has_dotation_nbr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotation_nbr());
    }
    
    // optional float density = 3;
    if (has_density()) {
      total_size += 1 + 4;
    }
    
    // optional int32 percentage = 4;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeMine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeMine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeMine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeMine::MergeFrom(const ObjectAttributeMine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_resource()->::Common::ResourceType::MergeFrom(from.resource());
    }
    if (from._has_bit(1)) {
      set_dotation_nbr(from.dotation_nbr());
    }
    if (from._has_bit(2)) {
      set_density(from.density());
    }
    if (from._has_bit(3)) {
      set_percentage(from.percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeMine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeMine::CopyFrom(const ObjectAttributeMine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeMine::IsInitialized() const {
  
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeMine::Swap(ObjectAttributeMine* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(dotation_nbr_, other->dotation_nbr_);
    std::swap(density_, other->density_);
    std::swap(percentage_, other->percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeMine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeMine_descriptor_;
  metadata.reflection = ObjectAttributeMine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeLogistic::kTc2FieldNumber;
#endif  // !_MSC_VER

ObjectAttributeLogistic::ObjectAttributeLogistic() {
  SharedCtor();
}

void ObjectAttributeLogistic::InitAsDefaultInstance() {
  tc2_ = const_cast< ::Common::AutomatId*>(&::Common::AutomatId::default_instance());
}

ObjectAttributeLogistic::ObjectAttributeLogistic(const ObjectAttributeLogistic& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeLogistic::SharedCtor() {
  _cached_size_ = 0;
  tc2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeLogistic::~ObjectAttributeLogistic() {
  SharedDtor();
}

void ObjectAttributeLogistic::SharedDtor() {
  if (this != default_instance_) {
    delete tc2_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeLogistic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeLogistic_descriptor_;
}

const ObjectAttributeLogistic& ObjectAttributeLogistic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeLogistic* ObjectAttributeLogistic::default_instance_ = NULL;

ObjectAttributeLogistic* ObjectAttributeLogistic::New() const {
  return new ObjectAttributeLogistic;
}

void ObjectAttributeLogistic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (tc2_ != NULL) tc2_->::Common::AutomatId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeLogistic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.AutomatId tc2 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_tc2()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeLogistic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeLogistic::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.AutomatId tc2 = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->tc2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeLogistic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.AutomatId tc2 = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tc2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeLogistic::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.AutomatId tc2 = 1;
    if (has_tc2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tc2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeLogistic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeLogistic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeLogistic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeLogistic::MergeFrom(const ObjectAttributeLogistic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_tc2()->::Common::AutomatId::MergeFrom(from.tc2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeLogistic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeLogistic::CopyFrom(const ObjectAttributeLogistic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeLogistic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_tc2()) {
    if (!this->tc2().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeLogistic::Swap(ObjectAttributeLogistic* other) {
  if (other != this) {
    std::swap(tc2_, other->tc2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeLogistic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeLogistic_descriptor_;
  metadata.reflection = ObjectAttributeLogistic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeInteractionHeight::kHeightFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeInteractionHeight::ObjectAttributeInteractionHeight() {
  SharedCtor();
}

void ObjectAttributeInteractionHeight::InitAsDefaultInstance() {
}

ObjectAttributeInteractionHeight::ObjectAttributeInteractionHeight(const ObjectAttributeInteractionHeight& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeInteractionHeight::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeInteractionHeight::~ObjectAttributeInteractionHeight() {
  SharedDtor();
}

void ObjectAttributeInteractionHeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeInteractionHeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeInteractionHeight_descriptor_;
}

const ObjectAttributeInteractionHeight& ObjectAttributeInteractionHeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeInteractionHeight* ObjectAttributeInteractionHeight::default_instance_ = NULL;

ObjectAttributeInteractionHeight* ObjectAttributeInteractionHeight::New() const {
  return new ObjectAttributeInteractionHeight;
}

void ObjectAttributeInteractionHeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeInteractionHeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float height = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &height_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeInteractionHeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeInteractionHeight::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required float height = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeInteractionHeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float height = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeInteractionHeight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float height = 1;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeInteractionHeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeInteractionHeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeInteractionHeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeInteractionHeight::MergeFrom(const ObjectAttributeInteractionHeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeInteractionHeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeInteractionHeight::CopyFrom(const ObjectAttributeInteractionHeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeInteractionHeight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeInteractionHeight::Swap(ObjectAttributeInteractionHeight* other) {
  if (other != this) {
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeInteractionHeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeInteractionHeight_descriptor_;
  metadata.reflection = ObjectAttributeInteractionHeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeObstacle::kTypeFieldNumber;
const int ObjectAttributeObstacle::kActivatedFieldNumber;
const int ObjectAttributeObstacle::kActivationTimeFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeObstacle::ObjectAttributeObstacle() {
  SharedCtor();
}

void ObjectAttributeObstacle::InitAsDefaultInstance() {
}

ObjectAttributeObstacle::ObjectAttributeObstacle(const ObjectAttributeObstacle& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeObstacle::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  activated_ = false;
  activation_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeObstacle::~ObjectAttributeObstacle() {
  SharedDtor();
}

void ObjectAttributeObstacle::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeObstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeObstacle_descriptor_;
}

const ObjectAttributeObstacle& ObjectAttributeObstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeObstacle* ObjectAttributeObstacle::default_instance_ = NULL;

ObjectAttributeObstacle* ObjectAttributeObstacle::New() const {
  return new ObjectAttributeObstacle;
}

void ObjectAttributeObstacle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    activated_ = false;
    activation_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ObstacleType.DemolitionTargetType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::Common::ObstacleType_DemolitionTargetType_IsValid(value)) {
          set_type(static_cast< ::Common::ObstacleType_DemolitionTargetType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(1, value);
        }
        if (input->ExpectTag(16)) goto parse_activated;
        break;
      }
      
      // optional bool activated = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activated:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &activated_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_activation_time;
        break;
      }
      
      // optional int32 activation_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_activation_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &activation_time_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeObstacle::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ObstacleType.DemolitionTargetType type = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional bool activated = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->activated(), output);
  }
  
  // optional int32 activation_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activation_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeObstacle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ObstacleType.DemolitionTargetType type = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional bool activated = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->activated(), target);
  }
  
  // optional int32 activation_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activation_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeObstacle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ObstacleType.DemolitionTargetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional bool activated = 2;
    if (has_activated()) {
      total_size += 1 + 1;
    }
    
    // optional int32 activation_time = 3;
    if (has_activation_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activation_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeObstacle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeObstacle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeObstacle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeObstacle::MergeFrom(const ObjectAttributeObstacle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_type(from.type());
    }
    if (from._has_bit(1)) {
      set_activated(from.activated());
    }
    if (from._has_bit(2)) {
      set_activation_time(from.activation_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeObstacle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeObstacle::CopyFrom(const ObjectAttributeObstacle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeObstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeObstacle::Swap(ObjectAttributeObstacle* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(activated_, other->activated_);
    std::swap(activation_time_, other->activation_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeObstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeObstacle_descriptor_;
  metadata.reflection = ObjectAttributeObstacle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeActivityTime::kValueFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeActivityTime::ObjectAttributeActivityTime() {
  SharedCtor();
}

void ObjectAttributeActivityTime::InitAsDefaultInstance() {
}

ObjectAttributeActivityTime::ObjectAttributeActivityTime(const ObjectAttributeActivityTime& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeActivityTime::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeActivityTime::~ObjectAttributeActivityTime() {
  SharedDtor();
}

void ObjectAttributeActivityTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeActivityTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeActivityTime_descriptor_;
}

const ObjectAttributeActivityTime& ObjectAttributeActivityTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeActivityTime* ObjectAttributeActivityTime::default_instance_ = NULL;

ObjectAttributeActivityTime* ObjectAttributeActivityTime::New() const {
  return new ObjectAttributeActivityTime;
}

void ObjectAttributeActivityTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeActivityTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeActivityTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeActivityTime::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeActivityTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeActivityTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeActivityTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeActivityTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeActivityTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeActivityTime::MergeFrom(const ObjectAttributeActivityTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeActivityTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeActivityTime::CopyFrom(const ObjectAttributeActivityTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeActivityTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeActivityTime::Swap(ObjectAttributeActivityTime* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeActivityTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeActivityTime_descriptor_;
  metadata.reflection = ObjectAttributeActivityTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeBypass::kPercentageFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeBypass::ObjectAttributeBypass() {
  SharedCtor();
}

void ObjectAttributeBypass::InitAsDefaultInstance() {
}

ObjectAttributeBypass::ObjectAttributeBypass(const ObjectAttributeBypass& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeBypass::SharedCtor() {
  _cached_size_ = 0;
  percentage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeBypass::~ObjectAttributeBypass() {
  SharedDtor();
}

void ObjectAttributeBypass::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeBypass::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeBypass_descriptor_;
}

const ObjectAttributeBypass& ObjectAttributeBypass::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeBypass* ObjectAttributeBypass::default_instance_ = NULL;

ObjectAttributeBypass* ObjectAttributeBypass::New() const {
  return new ObjectAttributeBypass;
}

void ObjectAttributeBypass::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    percentage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeBypass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 percentage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &percentage_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeBypass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeBypass::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 percentage = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->percentage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeBypass::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 percentage = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->percentage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeBypass::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 percentage = 1;
    if (has_percentage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeBypass::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeBypass* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeBypass*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeBypass::MergeFrom(const ObjectAttributeBypass& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_percentage(from.percentage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeBypass::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeBypass::CopyFrom(const ObjectAttributeBypass& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeBypass::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeBypass::Swap(ObjectAttributeBypass* other) {
  if (other != this) {
    std::swap(percentage_, other->percentage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeBypass::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeBypass_descriptor_;
  metadata.reflection = ObjectAttributeBypass_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeEffectDelay::kValueFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeEffectDelay::ObjectAttributeEffectDelay() {
  SharedCtor();
}

void ObjectAttributeEffectDelay::InitAsDefaultInstance() {
}

ObjectAttributeEffectDelay::ObjectAttributeEffectDelay(const ObjectAttributeEffectDelay& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeEffectDelay::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeEffectDelay::~ObjectAttributeEffectDelay() {
  SharedDtor();
}

void ObjectAttributeEffectDelay::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeEffectDelay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeEffectDelay_descriptor_;
}

const ObjectAttributeEffectDelay& ObjectAttributeEffectDelay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeEffectDelay* ObjectAttributeEffectDelay::default_instance_ = NULL;

ObjectAttributeEffectDelay* ObjectAttributeEffectDelay::New() const {
  return new ObjectAttributeEffectDelay;
}

void ObjectAttributeEffectDelay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeEffectDelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &value_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeEffectDelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeEffectDelay::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeEffectDelay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 value = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeEffectDelay::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeEffectDelay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeEffectDelay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeEffectDelay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeEffectDelay::MergeFrom(const ObjectAttributeEffectDelay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeEffectDelay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeEffectDelay::CopyFrom(const ObjectAttributeEffectDelay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeEffectDelay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeEffectDelay::Swap(ObjectAttributeEffectDelay* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeEffectDelay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeEffectDelay_descriptor_;
  metadata.reflection = ObjectAttributeEffectDelay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeNBC::kDangerLevelFieldNumber;
const int ObjectAttributeNBC::kNbcAgentsFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeNBC::ObjectAttributeNBC() {
  SharedCtor();
}

void ObjectAttributeNBC::InitAsDefaultInstance() {
}

ObjectAttributeNBC::ObjectAttributeNBC(const ObjectAttributeNBC& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeNBC::SharedCtor() {
  _cached_size_ = 0;
  danger_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeNBC::~ObjectAttributeNBC() {
  SharedDtor();
}

void ObjectAttributeNBC::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeNBC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeNBC_descriptor_;
}

const ObjectAttributeNBC& ObjectAttributeNBC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeNBC* ObjectAttributeNBC::default_instance_ = NULL;

ObjectAttributeNBC* ObjectAttributeNBC::New() const {
  return new ObjectAttributeNBC;
}

void ObjectAttributeNBC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    danger_level_ = 0;
  }
  nbc_agents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeNBC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 danger_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &danger_level_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_nbc_agents;
        break;
      }
      
      // repeated .Common.NBCAgentType nbc_agents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nbc_agents:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_nbc_agents()));
        if (input->ExpectTag(18)) goto parse_nbc_agents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeNBC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeNBC::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 danger_level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->danger_level(), output);
  }
  
  // repeated .Common.NBCAgentType nbc_agents = 2;
  for (int i = 0; i < this->nbc_agents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->nbc_agents(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeNBC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 danger_level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->danger_level(), target);
  }
  
  // repeated .Common.NBCAgentType nbc_agents = 2;
  for (int i = 0; i < this->nbc_agents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nbc_agents(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeNBC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 danger_level = 1;
    if (has_danger_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->danger_level());
    }
    
  }
  // repeated .Common.NBCAgentType nbc_agents = 2;
  total_size += 1 * this->nbc_agents_size();
  for (int i = 0; i < this->nbc_agents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nbc_agents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeNBC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeNBC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeNBC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeNBC::MergeFrom(const ObjectAttributeNBC& from) {
  GOOGLE_CHECK_NE(&from, this);
  nbc_agents_.MergeFrom(from.nbc_agents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_danger_level(from.danger_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeNBC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeNBC::CopyFrom(const ObjectAttributeNBC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeNBC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < nbc_agents_size(); i++) {
    if (!this->nbc_agents(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeNBC::Swap(ObjectAttributeNBC* other) {
  if (other != this) {
    std::swap(danger_level_, other->danger_level_);
    nbc_agents_.Swap(&other->nbc_agents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeNBC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeNBC_descriptor_;
  metadata.reflection = ObjectAttributeNBC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StockResource::kResourceFieldNumber;
const int StockResource::kCurrentFieldNumber;
const int StockResource::kMaximumFieldNumber;
#endif  // !_MSC_VER

StockResource::StockResource() {
  SharedCtor();
}

void StockResource::InitAsDefaultInstance() {
  resource_ = const_cast< ::Common::ResourceType*>(&::Common::ResourceType::default_instance());
}

StockResource::StockResource(const StockResource& from) {
  SharedCtor();
  MergeFrom(from);
}

void StockResource::SharedCtor() {
  _cached_size_ = 0;
  resource_ = NULL;
  current_ = 0;
  maximum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StockResource::~StockResource() {
  SharedDtor();
}

void StockResource::SharedDtor() {
  if (this != default_instance_) {
    delete resource_;
  }
}

const ::google::protobuf::Descriptor* StockResource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StockResource_descriptor_;
}

const StockResource& StockResource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

StockResource* StockResource::default_instance_ = NULL;

StockResource* StockResource::New() const {
  return new StockResource;
}

void StockResource::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (resource_ != NULL) resource_->::Common::ResourceType::Clear();
    }
    current_ = 0;
    maximum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StockResource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.ResourceType resource = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resource()));
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }
      
      // required int32 current = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_current:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_maximum;
        break;
      }
      
      // optional int32 maximum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_maximum:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &maximum_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StockResource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    StockResource::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->resource(), output);
  }
  
  // required int32 current = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current(), output);
  }
  
  // optional int32 maximum = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maximum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StockResource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.ResourceType resource = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource(), target);
  }
  
  // required int32 current = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current(), target);
  }
  
  // optional int32 maximum = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maximum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StockResource::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.ResourceType resource = 1;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource());
    }
    
    // required int32 current = 2;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current());
    }
    
    // optional int32 maximum = 3;
    if (has_maximum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maximum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void StockResource::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StockResource* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StockResource*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StockResource::MergeFrom(const StockResource& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_resource()->::Common::ResourceType::MergeFrom(from.resource());
    }
    if (from._has_bit(1)) {
      set_current(from.current());
    }
    if (from._has_bit(2)) {
      set_maximum(from.maximum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StockResource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StockResource::CopyFrom(const StockResource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockResource::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_resource()) {
    if (!this->resource().IsInitialized()) return false;
  }
  return true;
}

void StockResource::Swap(StockResource* other) {
  if (other != this) {
    std::swap(resource_, other->resource_);
    std::swap(current_, other->current_);
    std::swap(maximum_, other->maximum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StockResource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StockResource_descriptor_;
  metadata.reflection = StockResource_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeStock::kResourcesFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeStock::ObjectAttributeStock() {
  SharedCtor();
}

void ObjectAttributeStock::InitAsDefaultInstance() {
}

ObjectAttributeStock::ObjectAttributeStock(const ObjectAttributeStock& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeStock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeStock::~ObjectAttributeStock() {
  SharedDtor();
}

void ObjectAttributeStock::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeStock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeStock_descriptor_;
}

const ObjectAttributeStock& ObjectAttributeStock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeStock* ObjectAttributeStock::default_instance_ = NULL;

ObjectAttributeStock* ObjectAttributeStock::New() const {
  return new ObjectAttributeStock;
}

void ObjectAttributeStock::Clear() {
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeStock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.StockResource resources = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_resources:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_resources()));
        if (input->ExpectTag(10)) goto parse_resources;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeStock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeStock::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.StockResource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->resources(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeStock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.StockResource resources = 1;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resources(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeStock::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.StockResource resources = 1;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeStock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeStock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeStock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeStock::MergeFrom(const ObjectAttributeStock& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeStock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeStock::CopyFrom(const ObjectAttributeStock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeStock::IsInitialized() const {
  
  for (int i = 0; i < resources_size(); i++) {
    if (!this->resources(i).IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeStock::Swap(ObjectAttributeStock* other) {
  if (other != this) {
    resources_.Swap(&other->resources_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeStock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeStock_descriptor_;
  metadata.reflection = ObjectAttributeStock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeCrossingSite::kWidthFieldNumber;
const int ObjectAttributeCrossingSite::kDepthFieldNumber;
const int ObjectAttributeCrossingSite::kFlowRateFieldNumber;
const int ObjectAttributeCrossingSite::kBanksRequireFittingFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeCrossingSite::ObjectAttributeCrossingSite() {
  SharedCtor();
}

void ObjectAttributeCrossingSite::InitAsDefaultInstance() {
}

ObjectAttributeCrossingSite::ObjectAttributeCrossingSite(const ObjectAttributeCrossingSite& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeCrossingSite::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  depth_ = 0;
  flow_rate_ = 0;
  banks_require_fitting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeCrossingSite::~ObjectAttributeCrossingSite() {
  SharedDtor();
}

void ObjectAttributeCrossingSite::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeCrossingSite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeCrossingSite_descriptor_;
}

const ObjectAttributeCrossingSite& ObjectAttributeCrossingSite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeCrossingSite* ObjectAttributeCrossingSite::default_instance_ = NULL;

ObjectAttributeCrossingSite* ObjectAttributeCrossingSite::New() const {
  return new ObjectAttributeCrossingSite;
}

void ObjectAttributeCrossingSite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0;
    depth_ = 0;
    flow_rate_ = 0;
    banks_require_fitting_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeCrossingSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &width_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_depth;
        break;
      }
      
      // required int32 depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_depth:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &depth_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_flow_rate;
        break;
      }
      
      // required int32 flow_rate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flow_rate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flow_rate_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_banks_require_fitting;
        break;
      }
      
      // required bool banks_require_fitting = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_banks_require_fitting:
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &banks_require_fitting_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeCrossingSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeCrossingSite::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 width = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }
  
  // required int32 depth = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->depth(), output);
  }
  
  // required int32 flow_rate = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flow_rate(), output);
  }
  
  // required bool banks_require_fitting = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->banks_require_fitting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeCrossingSite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 width = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }
  
  // required int32 depth = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->depth(), target);
  }
  
  // required int32 flow_rate = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flow_rate(), target);
  }
  
  // required bool banks_require_fitting = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->banks_require_fitting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeCrossingSite::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 depth = 2;
    if (has_depth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->depth());
    }
    
    // required int32 flow_rate = 3;
    if (has_flow_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow_rate());
    }
    
    // required bool banks_require_fitting = 4;
    if (has_banks_require_fitting()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeCrossingSite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeCrossingSite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeCrossingSite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeCrossingSite::MergeFrom(const ObjectAttributeCrossingSite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_width(from.width());
    }
    if (from._has_bit(1)) {
      set_depth(from.depth());
    }
    if (from._has_bit(2)) {
      set_flow_rate(from.flow_rate());
    }
    if (from._has_bit(3)) {
      set_banks_require_fitting(from.banks_require_fitting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeCrossingSite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeCrossingSite::CopyFrom(const ObjectAttributeCrossingSite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeCrossingSite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void ObjectAttributeCrossingSite::Swap(ObjectAttributeCrossingSite* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(depth_, other->depth_);
    std::swap(flow_rate_, other->flow_rate_);
    std::swap(banks_require_fitting_, other->banks_require_fitting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeCrossingSite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeCrossingSite_descriptor_;
  metadata.reflection = ObjectAttributeCrossingSite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeSupplyRoute::kEquippedFieldNumber;
const int ObjectAttributeSupplyRoute::kMaxWeightFieldNumber;
const int ObjectAttributeSupplyRoute::kWidthFieldNumber;
const int ObjectAttributeSupplyRoute::kLengthFieldNumber;
const int ObjectAttributeSupplyRoute::kFlowRateFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeSupplyRoute::ObjectAttributeSupplyRoute() {
  SharedCtor();
}

void ObjectAttributeSupplyRoute::InitAsDefaultInstance() {
}

ObjectAttributeSupplyRoute::ObjectAttributeSupplyRoute(const ObjectAttributeSupplyRoute& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeSupplyRoute::SharedCtor() {
  _cached_size_ = 0;
  equipped_ = false;
  max_weight_ = 0;
  width_ = 0;
  length_ = 0;
  flow_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeSupplyRoute::~ObjectAttributeSupplyRoute() {
  SharedDtor();
}

void ObjectAttributeSupplyRoute::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeSupplyRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeSupplyRoute_descriptor_;
}

const ObjectAttributeSupplyRoute& ObjectAttributeSupplyRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeSupplyRoute* ObjectAttributeSupplyRoute::default_instance_ = NULL;

ObjectAttributeSupplyRoute* ObjectAttributeSupplyRoute::New() const {
  return new ObjectAttributeSupplyRoute;
}

void ObjectAttributeSupplyRoute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipped_ = false;
    max_weight_ = 0;
    width_ = 0;
    length_ = 0;
    flow_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeSupplyRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool equipped = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadBool(
              input, &equipped_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_max_weight;
        break;
      }
      
      // required int32 max_weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_max_weight:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &max_weight_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }
      
      // required int32 width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_width:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &width_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }
      
      // required int32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_length:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &length_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_flow_rate;
        break;
      }
      
      // required int32 flow_rate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_flow_rate:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &flow_rate_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeSupplyRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeSupplyRoute::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required bool equipped = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->equipped(), output);
  }
  
  // required int32 max_weight = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_weight(), output);
  }
  
  // required int32 width = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }
  
  // required int32 length = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }
  
  // required int32 flow_rate = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flow_rate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeSupplyRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool equipped = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->equipped(), target);
  }
  
  // required int32 max_weight = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_weight(), target);
  }
  
  // required int32 width = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }
  
  // required int32 length = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }
  
  // required int32 flow_rate = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flow_rate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeSupplyRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool equipped = 1;
    if (has_equipped()) {
      total_size += 1 + 1;
    }
    
    // required int32 max_weight = 2;
    if (has_max_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_weight());
    }
    
    // required int32 width = 3;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
    // required int32 flow_rate = 5;
    if (has_flow_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flow_rate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeSupplyRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeSupplyRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeSupplyRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeSupplyRoute::MergeFrom(const ObjectAttributeSupplyRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_equipped(from.equipped());
    }
    if (from._has_bit(1)) {
      set_max_weight(from.max_weight());
    }
    if (from._has_bit(2)) {
      set_width(from.width());
    }
    if (from._has_bit(3)) {
      set_length(from.length());
    }
    if (from._has_bit(4)) {
      set_flow_rate(from.flow_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeSupplyRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeSupplyRoute::CopyFrom(const ObjectAttributeSupplyRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeSupplyRoute::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void ObjectAttributeSupplyRoute::Swap(ObjectAttributeSupplyRoute* other) {
  if (other != this) {
    std::swap(equipped_, other->equipped_);
    std::swap(max_weight_, other->max_weight_);
    std::swap(width_, other->width_);
    std::swap(length_, other->length_);
    std::swap(flow_rate_, other->flow_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeSupplyRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeSupplyRoute_descriptor_;
  metadata.reflection = ObjectAttributeSupplyRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLocatedQuantity::kCoordinateFieldNumber;
const int MsgLocatedQuantity::kQuantityFieldNumber;
#endif  // !_MSC_VER

MsgLocatedQuantity::MsgLocatedQuantity() {
  SharedCtor();
}

void MsgLocatedQuantity::InitAsDefaultInstance() {
  coordinate_ = const_cast< ::Common::MsgCoordLatLong*>(&::Common::MsgCoordLatLong::default_instance());
}

MsgLocatedQuantity::MsgLocatedQuantity(const MsgLocatedQuantity& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLocatedQuantity::SharedCtor() {
  _cached_size_ = 0;
  coordinate_ = NULL;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLocatedQuantity::~MsgLocatedQuantity() {
  SharedDtor();
}

void MsgLocatedQuantity::SharedDtor() {
  if (this != default_instance_) {
    delete coordinate_;
  }
}

const ::google::protobuf::Descriptor* MsgLocatedQuantity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLocatedQuantity_descriptor_;
}

const MsgLocatedQuantity& MsgLocatedQuantity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLocatedQuantity* MsgLocatedQuantity::default_instance_ = NULL;

MsgLocatedQuantity* MsgLocatedQuantity::New() const {
  return new MsgLocatedQuantity;
}

void MsgLocatedQuantity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (coordinate_ != NULL) coordinate_->::Common::MsgCoordLatLong::Clear();
    }
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLocatedQuantity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgCoordLatLong coordinate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_coordinate()));
        if (input->ExpectTag(21)) goto parse_quantity;
        break;
      }
      
      // required float quantity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_quantity:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &quantity_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLocatedQuantity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLocatedQuantity::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgCoordLatLong coordinate = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->coordinate(), output);
  }
  
  // required float quantity = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->quantity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLocatedQuantity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgCoordLatLong coordinate = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->coordinate(), target);
  }
  
  // required float quantity = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->quantity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLocatedQuantity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgCoordLatLong coordinate = 1;
    if (has_coordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->coordinate());
    }
    
    // required float quantity = 2;
    if (has_quantity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLocatedQuantity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLocatedQuantity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLocatedQuantity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLocatedQuantity::MergeFrom(const MsgLocatedQuantity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_coordinate()->::Common::MsgCoordLatLong::MergeFrom(from.coordinate());
    }
    if (from._has_bit(1)) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLocatedQuantity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLocatedQuantity::CopyFrom(const MsgLocatedQuantity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLocatedQuantity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_coordinate()) {
    if (!this->coordinate().IsInitialized()) return false;
  }
  return true;
}

void MsgLocatedQuantity::Swap(MsgLocatedQuantity* other) {
  if (other != this) {
    std::swap(coordinate_, other->coordinate_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLocatedQuantity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLocatedQuantity_descriptor_;
  metadata.reflection = MsgLocatedQuantity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLocatedQuantityList::kElemFieldNumber;
#endif  // !_MSC_VER

MsgLocatedQuantityList::MsgLocatedQuantityList() {
  SharedCtor();
}

void MsgLocatedQuantityList::InitAsDefaultInstance() {
}

MsgLocatedQuantityList::MsgLocatedQuantityList(const MsgLocatedQuantityList& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgLocatedQuantityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLocatedQuantityList::~MsgLocatedQuantityList() {
  SharedDtor();
}

void MsgLocatedQuantityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgLocatedQuantityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLocatedQuantityList_descriptor_;
}

const MsgLocatedQuantityList& MsgLocatedQuantityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgLocatedQuantityList* MsgLocatedQuantityList::default_instance_ = NULL;

MsgLocatedQuantityList* MsgLocatedQuantityList::New() const {
  return new MsgLocatedQuantityList;
}

void MsgLocatedQuantityList::Clear() {
  elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLocatedQuantityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Common.MsgLocatedQuantity elem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_elem:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, add_elem()));
        if (input->ExpectTag(10)) goto parse_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgLocatedQuantityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgLocatedQuantityList::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated .Common.MsgLocatedQuantity elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->elem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgLocatedQuantityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Common.MsgLocatedQuantity elem = 1;
  for (int i = 0; i < this->elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->elem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgLocatedQuantityList::ByteSize() const {
  int total_size = 0;
  
  // repeated .Common.MsgLocatedQuantity elem = 1;
  total_size += 1 * this->elem_size();
  for (int i = 0; i < this->elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgLocatedQuantityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLocatedQuantityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLocatedQuantityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLocatedQuantityList::MergeFrom(const MsgLocatedQuantityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  elem_.MergeFrom(from.elem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLocatedQuantityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLocatedQuantityList::CopyFrom(const MsgLocatedQuantityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLocatedQuantityList::IsInitialized() const {
  
  for (int i = 0; i < elem_size(); i++) {
    if (!this->elem(i).IsInitialized()) return false;
  }
  return true;
}

void MsgLocatedQuantityList::Swap(MsgLocatedQuantityList* other) {
  if (other != this) {
    elem_.Swap(&other->elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLocatedQuantityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLocatedQuantityList_descriptor_;
  metadata.reflection = MsgLocatedQuantityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeToxicCloud::kQuantitiesFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeToxicCloud::ObjectAttributeToxicCloud() {
  SharedCtor();
}

void ObjectAttributeToxicCloud::InitAsDefaultInstance() {
  quantities_ = const_cast< ::Common::MsgLocatedQuantityList*>(&::Common::MsgLocatedQuantityList::default_instance());
}

ObjectAttributeToxicCloud::ObjectAttributeToxicCloud(const ObjectAttributeToxicCloud& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeToxicCloud::SharedCtor() {
  _cached_size_ = 0;
  quantities_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeToxicCloud::~ObjectAttributeToxicCloud() {
  SharedDtor();
}

void ObjectAttributeToxicCloud::SharedDtor() {
  if (this != default_instance_) {
    delete quantities_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeToxicCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeToxicCloud_descriptor_;
}

const ObjectAttributeToxicCloud& ObjectAttributeToxicCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeToxicCloud* ObjectAttributeToxicCloud::default_instance_ = NULL;

ObjectAttributeToxicCloud* ObjectAttributeToxicCloud::New() const {
  return new ObjectAttributeToxicCloud;
}

void ObjectAttributeToxicCloud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (quantities_ != NULL) quantities_->::Common::MsgLocatedQuantityList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeToxicCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.MsgLocatedQuantityList quantities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_quantities()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeToxicCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeToxicCloud::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.MsgLocatedQuantityList quantities = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->quantities(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeToxicCloud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.MsgLocatedQuantityList quantities = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quantities(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeToxicCloud::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.MsgLocatedQuantityList quantities = 1;
    if (has_quantities()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quantities());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeToxicCloud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeToxicCloud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeToxicCloud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeToxicCloud::MergeFrom(const ObjectAttributeToxicCloud& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_quantities()->::Common::MsgLocatedQuantityList::MergeFrom(from.quantities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeToxicCloud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeToxicCloud::CopyFrom(const ObjectAttributeToxicCloud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeToxicCloud::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_quantities()) {
    if (!this->quantities().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeToxicCloud::Swap(ObjectAttributeToxicCloud* other) {
  if (other != this) {
    std::swap(quantities_, other->quantities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeToxicCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeToxicCloud_descriptor_;
  metadata.reflection = ObjectAttributeToxicCloud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeFire::kClassIdFieldNumber;
const int ObjectAttributeFire::kHeatFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeFire::ObjectAttributeFire() {
  SharedCtor();
}

void ObjectAttributeFire::InitAsDefaultInstance() {
}

ObjectAttributeFire::ObjectAttributeFire(const ObjectAttributeFire& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeFire::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  heat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeFire::~ObjectAttributeFire() {
  SharedDtor();
}

void ObjectAttributeFire::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeFire_descriptor_;
}

const ObjectAttributeFire& ObjectAttributeFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeFire* ObjectAttributeFire::default_instance_ = NULL;

ObjectAttributeFire* ObjectAttributeFire::New() const {
  return new ObjectAttributeFire;
}

void ObjectAttributeFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
    heat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &class_id_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_heat;
        break;
      }
      
      // required int32 heat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_heat:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &heat_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeFire::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 class_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }
  
  // required int32 heat = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->heat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 class_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }
  
  // required int32 heat = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->heat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeFire::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
    // required int32 heat = 2;
    if (has_heat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heat());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeFire::MergeFrom(const ObjectAttributeFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_class_id(from.class_id());
    }
    if (from._has_bit(1)) {
      set_heat(from.heat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeFire::CopyFrom(const ObjectAttributeFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeFire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ObjectAttributeFire::Swap(ObjectAttributeFire* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(heat_, other->heat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeFire_descriptor_;
  metadata.reflection = ObjectAttributeFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeMedicalTreatment::kTypeIdFieldNumber;
const int ObjectAttributeMedicalTreatment::kBedsFieldNumber;
const int ObjectAttributeMedicalTreatment::kAvailableBedsFieldNumber;
const int ObjectAttributeMedicalTreatment::kDoctorsFieldNumber;
const int ObjectAttributeMedicalTreatment::kAvailableDoctorsFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeMedicalTreatment::ObjectAttributeMedicalTreatment() {
  SharedCtor();
}

void ObjectAttributeMedicalTreatment::InitAsDefaultInstance() {
}

ObjectAttributeMedicalTreatment::ObjectAttributeMedicalTreatment(const ObjectAttributeMedicalTreatment& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeMedicalTreatment::SharedCtor() {
  _cached_size_ = 0;
  beds_ = 0;
  available_beds_ = 0;
  doctors_ = 0;
  available_doctors_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeMedicalTreatment::~ObjectAttributeMedicalTreatment() {
  SharedDtor();
}

void ObjectAttributeMedicalTreatment::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeMedicalTreatment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeMedicalTreatment_descriptor_;
}

const ObjectAttributeMedicalTreatment& ObjectAttributeMedicalTreatment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeMedicalTreatment* ObjectAttributeMedicalTreatment::default_instance_ = NULL;

ObjectAttributeMedicalTreatment* ObjectAttributeMedicalTreatment::New() const {
  return new ObjectAttributeMedicalTreatment;
}

void ObjectAttributeMedicalTreatment::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    beds_ = 0;
    available_beds_ = 0;
    doctors_ = 0;
    available_doctors_ = 0;
  }
  type_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeMedicalTreatment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_type_id:
        ::google::protobuf::uint32 value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &value));
        add_type_id(value);
        if (input->ExpectTag(8)) goto parse_type_id;
        if (input->ExpectTag(16)) goto parse_beds;
        break;
      }
      
      // required int32 beds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_beds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &beds_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_available_beds;
        break;
      }
      
      // required int32 available_beds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_available_beds:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &available_beds_));
        _set_bit(2);
        if (input->ExpectTag(32)) goto parse_doctors;
        break;
      }
      
      // required int32 doctors = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_doctors:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &doctors_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_available_doctors;
        break;
      }
      
      // required int32 available_doctors = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_available_doctors:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &available_doctors_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeMedicalTreatment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeMedicalTreatment::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated uint32 type_id = 1;
  for (int i = 0; i < this->type_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->type_id(i), output);
  }
  
  // required int32 beds = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beds(), output);
  }
  
  // required int32 available_beds = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->available_beds(), output);
  }
  
  // required int32 doctors = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->doctors(), output);
  }
  
  // required int32 available_doctors = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->available_doctors(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeMedicalTreatment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 type_id = 1;
  for (int i = 0; i < this->type_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->type_id(i), target);
  }
  
  // required int32 beds = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beds(), target);
  }
  
  // required int32 available_beds = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->available_beds(), target);
  }
  
  // required int32 doctors = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->doctors(), target);
  }
  
  // required int32 available_doctors = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->available_doctors(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeMedicalTreatment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 beds = 2;
    if (has_beds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beds());
    }
    
    // required int32 available_beds = 3;
    if (has_available_beds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_beds());
    }
    
    // required int32 doctors = 4;
    if (has_doctors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doctors());
    }
    
    // required int32 available_doctors = 5;
    if (has_available_doctors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->available_doctors());
    }
    
  }
  // repeated uint32 type_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->type_id(i));
    }
    total_size += 1 * this->type_id_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeMedicalTreatment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeMedicalTreatment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeMedicalTreatment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeMedicalTreatment::MergeFrom(const ObjectAttributeMedicalTreatment& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_id_.MergeFrom(from.type_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_beds(from.beds());
    }
    if (from._has_bit(2)) {
      set_available_beds(from.available_beds());
    }
    if (from._has_bit(3)) {
      set_doctors(from.doctors());
    }
    if (from._has_bit(4)) {
      set_available_doctors(from.available_doctors());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeMedicalTreatment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeMedicalTreatment::CopyFrom(const ObjectAttributeMedicalTreatment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeMedicalTreatment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  
  return true;
}

void ObjectAttributeMedicalTreatment::Swap(ObjectAttributeMedicalTreatment* other) {
  if (other != this) {
    type_id_.Swap(&other->type_id_);
    std::swap(beds_, other->beds_);
    std::swap(available_beds_, other->available_beds_);
    std::swap(doctors_, other->doctors_);
    std::swap(available_doctors_, other->available_doctors_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeMedicalTreatment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeMedicalTreatment_descriptor_;
  metadata.reflection = ObjectAttributeMedicalTreatment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeNBCType::kAgentFieldNumber;
const int ObjectAttributeNBCType::kConcentrationFieldNumber;
const int ObjectAttributeNBCType::kSourceLifeDurationFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeNBCType::ObjectAttributeNBCType() {
  SharedCtor();
}

void ObjectAttributeNBCType::InitAsDefaultInstance() {
  agent_ = const_cast< ::Common::NBCAgentType*>(&::Common::NBCAgentType::default_instance());
}

ObjectAttributeNBCType::ObjectAttributeNBCType(const ObjectAttributeNBCType& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeNBCType::SharedCtor() {
  _cached_size_ = 0;
  agent_ = NULL;
  concentration_ = 0;
  source_life_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeNBCType::~ObjectAttributeNBCType() {
  SharedDtor();
}

void ObjectAttributeNBCType::SharedDtor() {
  if (this != default_instance_) {
    delete agent_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeNBCType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeNBCType_descriptor_;
}

const ObjectAttributeNBCType& ObjectAttributeNBCType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeNBCType* ObjectAttributeNBCType::default_instance_ = NULL;

ObjectAttributeNBCType* ObjectAttributeNBCType::New() const {
  return new ObjectAttributeNBCType;
}

void ObjectAttributeNBCType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (agent_ != NULL) agent_->::Common::NBCAgentType::Clear();
    }
    concentration_ = 0;
    source_life_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeNBCType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Common.NBCAgentType agent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_agent()));
        if (input->ExpectTag(16)) goto parse_concentration;
        break;
      }
      
      // required int32 concentration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_concentration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &concentration_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_source_life_duration;
        break;
      }
      
      // required int32 source_life_duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_source_life_duration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &source_life_duration_));
        _set_bit(2);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeNBCType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeNBCType::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .Common.NBCAgentType agent = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->agent(), output);
  }
  
  // required int32 concentration = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->concentration(), output);
  }
  
  // required int32 source_life_duration = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_life_duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeNBCType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Common.NBCAgentType agent = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->agent(), target);
  }
  
  // required int32 concentration = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->concentration(), target);
  }
  
  // required int32 source_life_duration = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_life_duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeNBCType::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Common.NBCAgentType agent = 1;
    if (has_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->agent());
    }
    
    // required int32 concentration = 2;
    if (has_concentration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concentration());
    }
    
    // required int32 source_life_duration = 3;
    if (has_source_life_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_life_duration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeNBCType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeNBCType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeNBCType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeNBCType::MergeFrom(const ObjectAttributeNBCType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_agent()->::Common::NBCAgentType::MergeFrom(from.agent());
    }
    if (from._has_bit(1)) {
      set_concentration(from.concentration());
    }
    if (from._has_bit(2)) {
      set_source_life_duration(from.source_life_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeNBCType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeNBCType::CopyFrom(const ObjectAttributeNBCType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeNBCType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_agent()) {
    if (!this->agent().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributeNBCType::Swap(ObjectAttributeNBCType* other) {
  if (other != this) {
    std::swap(agent_, other->agent_);
    std::swap(concentration_, other->concentration_);
    std::swap(source_life_duration_, other->source_life_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeNBCType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeNBCType_descriptor_;
  metadata.reflection = ObjectAttributeNBCType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributeSealOff::kLevelFieldNumber;
#endif  // !_MSC_VER

ObjectAttributeSealOff::ObjectAttributeSealOff() {
  SharedCtor();
}

void ObjectAttributeSealOff::InitAsDefaultInstance() {
}

ObjectAttributeSealOff::ObjectAttributeSealOff(const ObjectAttributeSealOff& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributeSealOff::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributeSealOff::~ObjectAttributeSealOff() {
  SharedDtor();
}

void ObjectAttributeSealOff::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* ObjectAttributeSealOff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributeSealOff_descriptor_;
}

const ObjectAttributeSealOff& ObjectAttributeSealOff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributeSealOff* ObjectAttributeSealOff::default_instance_ = NULL;

ObjectAttributeSealOff* ObjectAttributeSealOff::New() const {
  return new ObjectAttributeSealOff;
}

void ObjectAttributeSealOff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributeSealOff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &level_));
        _set_bit(0);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributeSealOff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributeSealOff::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 level = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributeSealOff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributeSealOff::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributeSealOff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributeSealOff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributeSealOff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributeSealOff::MergeFrom(const ObjectAttributeSealOff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributeSealOff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributeSealOff::CopyFrom(const ObjectAttributeSealOff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributeSealOff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ObjectAttributeSealOff::Swap(ObjectAttributeSealOff* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributeSealOff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributeSealOff_descriptor_;
  metadata.reflection = ObjectAttributeSealOff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectAttributes::kConstructionFieldNumber;
const int ObjectAttributes::kObstacleFieldNumber;
const int ObjectAttributes::kMineFieldNumber;
const int ObjectAttributes::kActivityTimeFieldNumber;
const int ObjectAttributes::kBypassFieldNumber;
const int ObjectAttributes::kLogisticFieldNumber;
const int ObjectAttributes::kNbcFieldNumber;
const int ObjectAttributes::kCrossingSiteFieldNumber;
const int ObjectAttributes::kSupplyRouteFieldNumber;
const int ObjectAttributes::kToxicCloudFieldNumber;
const int ObjectAttributes::kFireFieldNumber;
const int ObjectAttributes::kMedicalTreatmentFieldNumber;
const int ObjectAttributes::kInteractionHeightFieldNumber;
const int ObjectAttributes::kStockFieldNumber;
const int ObjectAttributes::kNbcAgentFieldNumber;
const int ObjectAttributes::kEffectDelayFieldNumber;
const int ObjectAttributes::kSealOffFieldNumber;
const int ObjectAttributes::kResourceNetworksFieldNumber;
#endif  // !_MSC_VER

ObjectAttributes::ObjectAttributes() {
  SharedCtor();
}

void ObjectAttributes::InitAsDefaultInstance() {
  construction_ = const_cast< ::Common::ObjectAttributeConstruction*>(&::Common::ObjectAttributeConstruction::default_instance());
  obstacle_ = const_cast< ::Common::ObjectAttributeObstacle*>(&::Common::ObjectAttributeObstacle::default_instance());
  mine_ = const_cast< ::Common::ObjectAttributeMine*>(&::Common::ObjectAttributeMine::default_instance());
  activity_time_ = const_cast< ::Common::ObjectAttributeActivityTime*>(&::Common::ObjectAttributeActivityTime::default_instance());
  bypass_ = const_cast< ::Common::ObjectAttributeBypass*>(&::Common::ObjectAttributeBypass::default_instance());
  logistic_ = const_cast< ::Common::ObjectAttributeLogistic*>(&::Common::ObjectAttributeLogistic::default_instance());
  nbc_ = const_cast< ::Common::ObjectAttributeNBC*>(&::Common::ObjectAttributeNBC::default_instance());
  crossing_site_ = const_cast< ::Common::ObjectAttributeCrossingSite*>(&::Common::ObjectAttributeCrossingSite::default_instance());
  supply_route_ = const_cast< ::Common::ObjectAttributeSupplyRoute*>(&::Common::ObjectAttributeSupplyRoute::default_instance());
  toxic_cloud_ = const_cast< ::Common::ObjectAttributeToxicCloud*>(&::Common::ObjectAttributeToxicCloud::default_instance());
  fire_ = const_cast< ::Common::ObjectAttributeFire*>(&::Common::ObjectAttributeFire::default_instance());
  medical_treatment_ = const_cast< ::Common::ObjectAttributeMedicalTreatment*>(&::Common::ObjectAttributeMedicalTreatment::default_instance());
  interaction_height_ = const_cast< ::Common::ObjectAttributeInteractionHeight*>(&::Common::ObjectAttributeInteractionHeight::default_instance());
  stock_ = const_cast< ::Common::ObjectAttributeStock*>(&::Common::ObjectAttributeStock::default_instance());
  nbc_agent_ = const_cast< ::Common::ObjectAttributeNBCType*>(&::Common::ObjectAttributeNBCType::default_instance());
  effect_delay_ = const_cast< ::Common::ObjectAttributeEffectDelay*>(&::Common::ObjectAttributeEffectDelay::default_instance());
  seal_off_ = const_cast< ::Common::ObjectAttributeSealOff*>(&::Common::ObjectAttributeSealOff::default_instance());
  resource_networks_ = const_cast< ::Common::ObjectAttributeResourceNetwork*>(&::Common::ObjectAttributeResourceNetwork::default_instance());
}

ObjectAttributes::ObjectAttributes(const ObjectAttributes& from) {
  SharedCtor();
  MergeFrom(from);
}

void ObjectAttributes::SharedCtor() {
  _cached_size_ = 0;
  construction_ = NULL;
  obstacle_ = NULL;
  mine_ = NULL;
  activity_time_ = NULL;
  bypass_ = NULL;
  logistic_ = NULL;
  nbc_ = NULL;
  crossing_site_ = NULL;
  supply_route_ = NULL;
  toxic_cloud_ = NULL;
  fire_ = NULL;
  medical_treatment_ = NULL;
  interaction_height_ = NULL;
  stock_ = NULL;
  nbc_agent_ = NULL;
  effect_delay_ = NULL;
  seal_off_ = NULL;
  resource_networks_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectAttributes::~ObjectAttributes() {
  SharedDtor();
}

void ObjectAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete construction_;
    delete obstacle_;
    delete mine_;
    delete activity_time_;
    delete bypass_;
    delete logistic_;
    delete nbc_;
    delete crossing_site_;
    delete supply_route_;
    delete toxic_cloud_;
    delete fire_;
    delete medical_treatment_;
    delete interaction_height_;
    delete stock_;
    delete nbc_agent_;
    delete effect_delay_;
    delete seal_off_;
    delete resource_networks_;
  }
}

const ::google::protobuf::Descriptor* ObjectAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectAttributes_descriptor_;
}

const ObjectAttributes& ObjectAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

ObjectAttributes* ObjectAttributes::default_instance_ = NULL;

ObjectAttributes* ObjectAttributes::New() const {
  return new ObjectAttributes;
}

void ObjectAttributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (construction_ != NULL) construction_->::Common::ObjectAttributeConstruction::Clear();
    }
    if (_has_bit(1)) {
      if (obstacle_ != NULL) obstacle_->::Common::ObjectAttributeObstacle::Clear();
    }
    if (_has_bit(2)) {
      if (mine_ != NULL) mine_->::Common::ObjectAttributeMine::Clear();
    }
    if (_has_bit(3)) {
      if (activity_time_ != NULL) activity_time_->::Common::ObjectAttributeActivityTime::Clear();
    }
    if (_has_bit(4)) {
      if (bypass_ != NULL) bypass_->::Common::ObjectAttributeBypass::Clear();
    }
    if (_has_bit(5)) {
      if (logistic_ != NULL) logistic_->::Common::ObjectAttributeLogistic::Clear();
    }
    if (_has_bit(6)) {
      if (nbc_ != NULL) nbc_->::Common::ObjectAttributeNBC::Clear();
    }
    if (_has_bit(7)) {
      if (crossing_site_ != NULL) crossing_site_->::Common::ObjectAttributeCrossingSite::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (supply_route_ != NULL) supply_route_->::Common::ObjectAttributeSupplyRoute::Clear();
    }
    if (_has_bit(9)) {
      if (toxic_cloud_ != NULL) toxic_cloud_->::Common::ObjectAttributeToxicCloud::Clear();
    }
    if (_has_bit(10)) {
      if (fire_ != NULL) fire_->::Common::ObjectAttributeFire::Clear();
    }
    if (_has_bit(11)) {
      if (medical_treatment_ != NULL) medical_treatment_->::Common::ObjectAttributeMedicalTreatment::Clear();
    }
    if (_has_bit(12)) {
      if (interaction_height_ != NULL) interaction_height_->::Common::ObjectAttributeInteractionHeight::Clear();
    }
    if (_has_bit(13)) {
      if (stock_ != NULL) stock_->::Common::ObjectAttributeStock::Clear();
    }
    if (_has_bit(14)) {
      if (nbc_agent_ != NULL) nbc_agent_->::Common::ObjectAttributeNBCType::Clear();
    }
    if (_has_bit(15)) {
      if (effect_delay_ != NULL) effect_delay_->::Common::ObjectAttributeEffectDelay::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (seal_off_ != NULL) seal_off_->::Common::ObjectAttributeSealOff::Clear();
    }
    if (_has_bit(17)) {
      if (resource_networks_ != NULL) resource_networks_->::Common::ObjectAttributeResourceNetwork::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Common.ObjectAttributeConstruction construction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_construction()));
        if (input->ExpectTag(18)) goto parse_obstacle;
        break;
      }
      
      // optional .Common.ObjectAttributeObstacle obstacle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_obstacle:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_obstacle()));
        if (input->ExpectTag(26)) goto parse_mine;
        break;
      }
      
      // optional .Common.ObjectAttributeMine mine = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_mine:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_mine()));
        if (input->ExpectTag(34)) goto parse_activity_time;
        break;
      }
      
      // optional .Common.ObjectAttributeActivityTime activity_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_activity_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_activity_time()));
        if (input->ExpectTag(42)) goto parse_bypass;
        break;
      }
      
      // optional .Common.ObjectAttributeBypass bypass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_bypass:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_bypass()));
        if (input->ExpectTag(50)) goto parse_logistic;
        break;
      }
      
      // optional .Common.ObjectAttributeLogistic logistic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_logistic:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_logistic()));
        if (input->ExpectTag(58)) goto parse_nbc;
        break;
      }
      
      // optional .Common.ObjectAttributeNBC nbc = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nbc:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_nbc()));
        if (input->ExpectTag(66)) goto parse_crossing_site;
        break;
      }
      
      // optional .Common.ObjectAttributeCrossingSite crossing_site = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_crossing_site:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_crossing_site()));
        if (input->ExpectTag(74)) goto parse_supply_route;
        break;
      }
      
      // optional .Common.ObjectAttributeSupplyRoute supply_route = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_supply_route:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_supply_route()));
        if (input->ExpectTag(82)) goto parse_toxic_cloud;
        break;
      }
      
      // optional .Common.ObjectAttributeToxicCloud toxic_cloud = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_toxic_cloud:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_toxic_cloud()));
        if (input->ExpectTag(90)) goto parse_fire;
        break;
      }
      
      // optional .Common.ObjectAttributeFire fire = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_fire:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_fire()));
        if (input->ExpectTag(98)) goto parse_medical_treatment;
        break;
      }
      
      // optional .Common.ObjectAttributeMedicalTreatment medical_treatment = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_medical_treatment:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_medical_treatment()));
        if (input->ExpectTag(106)) goto parse_interaction_height;
        break;
      }
      
      // optional .Common.ObjectAttributeInteractionHeight interaction_height = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_interaction_height:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_interaction_height()));
        if (input->ExpectTag(114)) goto parse_stock;
        break;
      }
      
      // optional .Common.ObjectAttributeStock stock = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_stock:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_stock()));
        if (input->ExpectTag(122)) goto parse_nbc_agent;
        break;
      }
      
      // optional .Common.ObjectAttributeNBCType nbc_agent = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_nbc_agent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_nbc_agent()));
        if (input->ExpectTag(130)) goto parse_effect_delay;
        break;
      }
      
      // optional .Common.ObjectAttributeEffectDelay effect_delay = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_effect_delay:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_effect_delay()));
        if (input->ExpectTag(138)) goto parse_seal_off;
        break;
      }
      
      // optional .Common.ObjectAttributeSealOff seal_off = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_seal_off:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_seal_off()));
        if (input->ExpectTag(146)) goto parse_resource_networks;
        break;
      }
      
      // optional .Common.ObjectAttributeResourceNetwork resource_networks = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_resource_networks:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_resource_networks()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ObjectAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    ObjectAttributes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .Common.ObjectAttributeConstruction construction = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->construction(), output);
  }
  
  // optional .Common.ObjectAttributeObstacle obstacle = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->obstacle(), output);
  }
  
  // optional .Common.ObjectAttributeMine mine = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->mine(), output);
  }
  
  // optional .Common.ObjectAttributeActivityTime activity_time = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->activity_time(), output);
  }
  
  // optional .Common.ObjectAttributeBypass bypass = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->bypass(), output);
  }
  
  // optional .Common.ObjectAttributeLogistic logistic = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->logistic(), output);
  }
  
  // optional .Common.ObjectAttributeNBC nbc = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->nbc(), output);
  }
  
  // optional .Common.ObjectAttributeCrossingSite crossing_site = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      8, this->crossing_site(), output);
  }
  
  // optional .Common.ObjectAttributeSupplyRoute supply_route = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      9, this->supply_route(), output);
  }
  
  // optional .Common.ObjectAttributeToxicCloud toxic_cloud = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      10, this->toxic_cloud(), output);
  }
  
  // optional .Common.ObjectAttributeFire fire = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      11, this->fire(), output);
  }
  
  // optional .Common.ObjectAttributeMedicalTreatment medical_treatment = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      12, this->medical_treatment(), output);
  }
  
  // optional .Common.ObjectAttributeInteractionHeight interaction_height = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      13, this->interaction_height(), output);
  }
  
  // optional .Common.ObjectAttributeStock stock = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      14, this->stock(), output);
  }
  
  // optional .Common.ObjectAttributeNBCType nbc_agent = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      15, this->nbc_agent(), output);
  }
  
  // optional .Common.ObjectAttributeEffectDelay effect_delay = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      16, this->effect_delay(), output);
  }
  
  // optional .Common.ObjectAttributeSealOff seal_off = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      17, this->seal_off(), output);
  }
  
  // optional .Common.ObjectAttributeResourceNetwork resource_networks = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      18, this->resource_networks(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ObjectAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Common.ObjectAttributeConstruction construction = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->construction(), target);
  }
  
  // optional .Common.ObjectAttributeObstacle obstacle = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->obstacle(), target);
  }
  
  // optional .Common.ObjectAttributeMine mine = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mine(), target);
  }
  
  // optional .Common.ObjectAttributeActivityTime activity_time = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activity_time(), target);
  }
  
  // optional .Common.ObjectAttributeBypass bypass = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bypass(), target);
  }
  
  // optional .Common.ObjectAttributeLogistic logistic = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->logistic(), target);
  }
  
  // optional .Common.ObjectAttributeNBC nbc = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nbc(), target);
  }
  
  // optional .Common.ObjectAttributeCrossingSite crossing_site = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->crossing_site(), target);
  }
  
  // optional .Common.ObjectAttributeSupplyRoute supply_route = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->supply_route(), target);
  }
  
  // optional .Common.ObjectAttributeToxicCloud toxic_cloud = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->toxic_cloud(), target);
  }
  
  // optional .Common.ObjectAttributeFire fire = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fire(), target);
  }
  
  // optional .Common.ObjectAttributeMedicalTreatment medical_treatment = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->medical_treatment(), target);
  }
  
  // optional .Common.ObjectAttributeInteractionHeight interaction_height = 13;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->interaction_height(), target);
  }
  
  // optional .Common.ObjectAttributeStock stock = 14;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->stock(), target);
  }
  
  // optional .Common.ObjectAttributeNBCType nbc_agent = 15;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->nbc_agent(), target);
  }
  
  // optional .Common.ObjectAttributeEffectDelay effect_delay = 16;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->effect_delay(), target);
  }
  
  // optional .Common.ObjectAttributeSealOff seal_off = 17;
  if (_has_bit(16)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->seal_off(), target);
  }
  
  // optional .Common.ObjectAttributeResourceNetwork resource_networks = 18;
  if (_has_bit(17)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->resource_networks(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ObjectAttributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Common.ObjectAttributeConstruction construction = 1;
    if (has_construction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->construction());
    }
    
    // optional .Common.ObjectAttributeObstacle obstacle = 2;
    if (has_obstacle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obstacle());
    }
    
    // optional .Common.ObjectAttributeMine mine = 3;
    if (has_mine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mine());
    }
    
    // optional .Common.ObjectAttributeActivityTime activity_time = 4;
    if (has_activity_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_time());
    }
    
    // optional .Common.ObjectAttributeBypass bypass = 5;
    if (has_bypass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bypass());
    }
    
    // optional .Common.ObjectAttributeLogistic logistic = 6;
    if (has_logistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->logistic());
    }
    
    // optional .Common.ObjectAttributeNBC nbc = 7;
    if (has_nbc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nbc());
    }
    
    // optional .Common.ObjectAttributeCrossingSite crossing_site = 8;
    if (has_crossing_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crossing_site());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Common.ObjectAttributeSupplyRoute supply_route = 9;
    if (has_supply_route()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->supply_route());
    }
    
    // optional .Common.ObjectAttributeToxicCloud toxic_cloud = 10;
    if (has_toxic_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toxic_cloud());
    }
    
    // optional .Common.ObjectAttributeFire fire = 11;
    if (has_fire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fire());
    }
    
    // optional .Common.ObjectAttributeMedicalTreatment medical_treatment = 12;
    if (has_medical_treatment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->medical_treatment());
    }
    
    // optional .Common.ObjectAttributeInteractionHeight interaction_height = 13;
    if (has_interaction_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->interaction_height());
    }
    
    // optional .Common.ObjectAttributeStock stock = 14;
    if (has_stock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stock());
    }
    
    // optional .Common.ObjectAttributeNBCType nbc_agent = 15;
    if (has_nbc_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nbc_agent());
    }
    
    // optional .Common.ObjectAttributeEffectDelay effect_delay = 16;
    if (has_effect_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effect_delay());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Common.ObjectAttributeSealOff seal_off = 17;
    if (has_seal_off()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seal_off());
    }
    
    // optional .Common.ObjectAttributeResourceNetwork resource_networks = 18;
    if (has_resource_networks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_networks());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void ObjectAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectAttributes::MergeFrom(const ObjectAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_construction()->::Common::ObjectAttributeConstruction::MergeFrom(from.construction());
    }
    if (from._has_bit(1)) {
      mutable_obstacle()->::Common::ObjectAttributeObstacle::MergeFrom(from.obstacle());
    }
    if (from._has_bit(2)) {
      mutable_mine()->::Common::ObjectAttributeMine::MergeFrom(from.mine());
    }
    if (from._has_bit(3)) {
      mutable_activity_time()->::Common::ObjectAttributeActivityTime::MergeFrom(from.activity_time());
    }
    if (from._has_bit(4)) {
      mutable_bypass()->::Common::ObjectAttributeBypass::MergeFrom(from.bypass());
    }
    if (from._has_bit(5)) {
      mutable_logistic()->::Common::ObjectAttributeLogistic::MergeFrom(from.logistic());
    }
    if (from._has_bit(6)) {
      mutable_nbc()->::Common::ObjectAttributeNBC::MergeFrom(from.nbc());
    }
    if (from._has_bit(7)) {
      mutable_crossing_site()->::Common::ObjectAttributeCrossingSite::MergeFrom(from.crossing_site());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_supply_route()->::Common::ObjectAttributeSupplyRoute::MergeFrom(from.supply_route());
    }
    if (from._has_bit(9)) {
      mutable_toxic_cloud()->::Common::ObjectAttributeToxicCloud::MergeFrom(from.toxic_cloud());
    }
    if (from._has_bit(10)) {
      mutable_fire()->::Common::ObjectAttributeFire::MergeFrom(from.fire());
    }
    if (from._has_bit(11)) {
      mutable_medical_treatment()->::Common::ObjectAttributeMedicalTreatment::MergeFrom(from.medical_treatment());
    }
    if (from._has_bit(12)) {
      mutable_interaction_height()->::Common::ObjectAttributeInteractionHeight::MergeFrom(from.interaction_height());
    }
    if (from._has_bit(13)) {
      mutable_stock()->::Common::ObjectAttributeStock::MergeFrom(from.stock());
    }
    if (from._has_bit(14)) {
      mutable_nbc_agent()->::Common::ObjectAttributeNBCType::MergeFrom(from.nbc_agent());
    }
    if (from._has_bit(15)) {
      mutable_effect_delay()->::Common::ObjectAttributeEffectDelay::MergeFrom(from.effect_delay());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      mutable_seal_off()->::Common::ObjectAttributeSealOff::MergeFrom(from.seal_off());
    }
    if (from._has_bit(17)) {
      mutable_resource_networks()->::Common::ObjectAttributeResourceNetwork::MergeFrom(from.resource_networks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectAttributes::CopyFrom(const ObjectAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectAttributes::IsInitialized() const {
  
  if (has_construction()) {
    if (!this->construction().IsInitialized()) return false;
  }
  if (has_obstacle()) {
    if (!this->obstacle().IsInitialized()) return false;
  }
  if (has_mine()) {
    if (!this->mine().IsInitialized()) return false;
  }
  if (has_activity_time()) {
    if (!this->activity_time().IsInitialized()) return false;
  }
  if (has_bypass()) {
    if (!this->bypass().IsInitialized()) return false;
  }
  if (has_logistic()) {
    if (!this->logistic().IsInitialized()) return false;
  }
  if (has_nbc()) {
    if (!this->nbc().IsInitialized()) return false;
  }
  if (has_crossing_site()) {
    if (!this->crossing_site().IsInitialized()) return false;
  }
  if (has_supply_route()) {
    if (!this->supply_route().IsInitialized()) return false;
  }
  if (has_toxic_cloud()) {
    if (!this->toxic_cloud().IsInitialized()) return false;
  }
  if (has_fire()) {
    if (!this->fire().IsInitialized()) return false;
  }
  if (has_medical_treatment()) {
    if (!this->medical_treatment().IsInitialized()) return false;
  }
  if (has_interaction_height()) {
    if (!this->interaction_height().IsInitialized()) return false;
  }
  if (has_stock()) {
    if (!this->stock().IsInitialized()) return false;
  }
  if (has_nbc_agent()) {
    if (!this->nbc_agent().IsInitialized()) return false;
  }
  if (has_effect_delay()) {
    if (!this->effect_delay().IsInitialized()) return false;
  }
  if (has_seal_off()) {
    if (!this->seal_off().IsInitialized()) return false;
  }
  if (has_resource_networks()) {
    if (!this->resource_networks().IsInitialized()) return false;
  }
  return true;
}

void ObjectAttributes::Swap(ObjectAttributes* other) {
  if (other != this) {
    std::swap(construction_, other->construction_);
    std::swap(obstacle_, other->obstacle_);
    std::swap(mine_, other->mine_);
    std::swap(activity_time_, other->activity_time_);
    std::swap(bypass_, other->bypass_);
    std::swap(logistic_, other->logistic_);
    std::swap(nbc_, other->nbc_);
    std::swap(crossing_site_, other->crossing_site_);
    std::swap(supply_route_, other->supply_route_);
    std::swap(toxic_cloud_, other->toxic_cloud_);
    std::swap(fire_, other->fire_);
    std::swap(medical_treatment_, other->medical_treatment_);
    std::swap(interaction_height_, other->interaction_height_);
    std::swap(stock_, other->stock_);
    std::swap(nbc_agent_, other->nbc_agent_);
    std::swap(effect_delay_, other->effect_delay_);
    std::swap(seal_off_, other->seal_off_);
    std::swap(resource_networks_, other->resource_networks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectAttributes_descriptor_;
  metadata.reflection = ObjectAttributes_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgNote::_default_name_;
const ::std::string MsgNote::_default_number_;
const ::std::string MsgNote::_default_description_;
#ifndef _MSC_VER
const int MsgNote::kNameFieldNumber;
const int MsgNote::kNumberFieldNumber;
const int MsgNote::kDescriptionFieldNumber;
const int MsgNote::kParentFieldNumber;
#endif  // !_MSC_VER

MsgNote::MsgNote() {
  SharedCtor();
}

void MsgNote::InitAsDefaultInstance() {
}

MsgNote::MsgNote(const MsgNote& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgNote::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  number_ = const_cast< ::std::string*>(&_default_number_);
  description_ = const_cast< ::std::string*>(&_default_description_);
  parent_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgNote::~MsgNote() {
  SharedDtor();
}

void MsgNote::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (number_ != &_default_number_) {
    delete number_;
  }
  if (description_ != &_default_description_) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgNote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgNote_descriptor_;
}

const MsgNote& MsgNote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgNote* MsgNote::default_instance_ = NULL;

MsgNote* MsgNote::New() const {
  return new MsgNote;
}

void MsgNote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    if (_has_bit(1)) {
      if (number_ != &_default_number_) {
        number_->clear();
      }
    }
    if (_has_bit(2)) {
      if (description_ != &_default_description_) {
        description_->clear();
      }
    }
    parent_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgNote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_number;
        break;
      }
      
      // required string number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_number:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_number()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->number().data(), this->number().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // required string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_description:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_description()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->description().data(), this->description().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(32)) goto parse_parent;
        break;
      }
      
      // required uint32 parent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_parent:
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &parent_));
        _set_bit(3);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgNote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgNote::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->number(), output);
  }
  
  // required string description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required uint32 parent = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parent(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgNote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string number = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->number(), target);
  }
  
  // required string description = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required uint32 parent = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->parent(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgNote::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->number());
    }
    
    // required string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required uint32 parent = 4;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgNote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgNote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgNote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgNote::MergeFrom(const MsgNote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_number(from.number());
    }
    if (from._has_bit(2)) {
      set_description(from.description());
    }
    if (from._has_bit(3)) {
      set_parent(from.parent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgNote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgNote::CopyFrom(const MsgNote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgNote::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void MsgNote::Swap(MsgNote* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(number_, other->number_);
    std::swap(description_, other->description_);
    std::swap(parent_, other->parent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgNote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgNote_descriptor_;
  metadata.reflection = MsgNote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgWeatherAttributes::kTemperatureFieldNumber;
const int MsgWeatherAttributes::kWindSpeedFieldNumber;
const int MsgWeatherAttributes::kWindDirectionFieldNumber;
const int MsgWeatherAttributes::kCloudFloorFieldNumber;
const int MsgWeatherAttributes::kCloudCeilingFieldNumber;
const int MsgWeatherAttributes::kCloudDensityFieldNumber;
const int MsgWeatherAttributes::kPrecipitationFieldNumber;
const int MsgWeatherAttributes::kLightingFieldNumber;
#endif  // !_MSC_VER

MsgWeatherAttributes::MsgWeatherAttributes() {
  SharedCtor();
}

void MsgWeatherAttributes::InitAsDefaultInstance() {
  wind_direction_ = const_cast< ::Common::MsgHeading*>(&::Common::MsgHeading::default_instance());
}

MsgWeatherAttributes::MsgWeatherAttributes(const MsgWeatherAttributes& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgWeatherAttributes::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 0;
  wind_speed_ = 0;
  wind_direction_ = NULL;
  cloud_floor_ = 0;
  cloud_ceiling_ = 0;
  cloud_density_ = 0;
  precipitation_ = 0;
  lighting_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgWeatherAttributes::~MsgWeatherAttributes() {
  SharedDtor();
}

void MsgWeatherAttributes::SharedDtor() {
  if (this != default_instance_) {
    delete wind_direction_;
  }
}

const ::google::protobuf::Descriptor* MsgWeatherAttributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgWeatherAttributes_descriptor_;
}

const MsgWeatherAttributes& MsgWeatherAttributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Common_2eproto();  return *default_instance_;
}

MsgWeatherAttributes* MsgWeatherAttributes::default_instance_ = NULL;

MsgWeatherAttributes* MsgWeatherAttributes::New() const {
  return new MsgWeatherAttributes;
}

void MsgWeatherAttributes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    temperature_ = 0;
    wind_speed_ = 0;
    if (_has_bit(2)) {
      if (wind_direction_ != NULL) wind_direction_->::Common::MsgHeading::Clear();
    }
    cloud_floor_ = 0;
    cloud_ceiling_ = 0;
    cloud_density_ = 0;
    precipitation_ = 0;
    lighting_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgWeatherAttributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 temperature = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &temperature_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_wind_speed;
        break;
      }
      
      // required int32 wind_speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_wind_speed:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &wind_speed_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_wind_direction;
        break;
      }
      
      // required .Common.MsgHeading wind_direction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_wind_direction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_wind_direction()));
        if (input->ExpectTag(32)) goto parse_cloud_floor;
        break;
      }
      
      // required int32 cloud_floor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cloud_floor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cloud_floor_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_cloud_ceiling;
        break;
      }
      
      // required int32 cloud_ceiling = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cloud_ceiling:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cloud_ceiling_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_cloud_density;
        break;
      }
      
      // required int32 cloud_density = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_cloud_density:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &cloud_density_));
        _set_bit(5);
        if (input->ExpectTag(56)) goto parse_precipitation;
        break;
      }
      
      // required .Common.EnumPrecipitationType precipitation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_precipitation:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumPrecipitationType_IsValid(value)) {
          set_precipitation(static_cast< Common::EnumPrecipitationType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(7, value);
        }
        if (input->ExpectTag(64)) goto parse_lighting;
        break;
      }
      
      // required .Common.EnumLightingType lighting = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_lighting:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumLightingType_IsValid(value)) {
          set_lighting(static_cast< Common::EnumLightingType >(value));
        } else {
          mutable_unknown_fields()->AddVarint(8, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgWeatherAttributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgWeatherAttributes::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 temperature = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->temperature(), output);
  }
  
  // required int32 wind_speed = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wind_speed(), output);
  }
  
  // required .Common.MsgHeading wind_direction = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->wind_direction(), output);
  }
  
  // required int32 cloud_floor = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cloud_floor(), output);
  }
  
  // required int32 cloud_ceiling = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cloud_ceiling(), output);
  }
  
  // required int32 cloud_density = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cloud_density(), output);
  }
  
  // required .Common.EnumPrecipitationType precipitation = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->precipitation(), output);
  }
  
  // required .Common.EnumLightingType lighting = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->lighting(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgWeatherAttributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 temperature = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temperature(), target);
  }
  
  // required int32 wind_speed = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wind_speed(), target);
  }
  
  // required .Common.MsgHeading wind_direction = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wind_direction(), target);
  }
  
  // required int32 cloud_floor = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cloud_floor(), target);
  }
  
  // required int32 cloud_ceiling = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cloud_ceiling(), target);
  }
  
  // required int32 cloud_density = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cloud_density(), target);
  }
  
  // required .Common.EnumPrecipitationType precipitation = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->precipitation(), target);
  }
  
  // required .Common.EnumLightingType lighting = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->lighting(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgWeatherAttributes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 temperature = 1;
    if (has_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature());
    }
    
    // required int32 wind_speed = 2;
    if (has_wind_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind_speed());
    }
    
    // required .Common.MsgHeading wind_direction = 3;
    if (has_wind_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wind_direction());
    }
    
    // required int32 cloud_floor = 4;
    if (has_cloud_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_floor());
    }
    
    // required int32 cloud_ceiling = 5;
    if (has_cloud_ceiling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_ceiling());
    }
    
    // required int32 cloud_density = 6;
    if (has_cloud_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloud_density());
    }
    
    // required .Common.EnumPrecipitationType precipitation = 7;
    if (has_precipitation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->precipitation());
    }
    
    // required .Common.EnumLightingType lighting = 8;
    if (has_lighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lighting());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgWeatherAttributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgWeatherAttributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgWeatherAttributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgWeatherAttributes::MergeFrom(const MsgWeatherAttributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_temperature(from.temperature());
    }
    if (from._has_bit(1)) {
      set_wind_speed(from.wind_speed());
    }
    if (from._has_bit(2)) {
      mutable_wind_direction()->::Common::MsgHeading::MergeFrom(from.wind_direction());
    }
    if (from._has_bit(3)) {
      set_cloud_floor(from.cloud_floor());
    }
    if (from._has_bit(4)) {
      set_cloud_ceiling(from.cloud_ceiling());
    }
    if (from._has_bit(5)) {
      set_cloud_density(from.cloud_density());
    }
    if (from._has_bit(6)) {
      set_precipitation(from.precipitation());
    }
    if (from._has_bit(7)) {
      set_lighting(from.lighting());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgWeatherAttributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgWeatherAttributes::CopyFrom(const MsgWeatherAttributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgWeatherAttributes::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  if (has_wind_direction()) {
    if (!this->wind_direction().IsInitialized()) return false;
  }
  return true;
}

void MsgWeatherAttributes::Swap(MsgWeatherAttributes* other) {
  if (other != this) {
    std::swap(temperature_, other->temperature_);
    std::swap(wind_speed_, other->wind_speed_);
    std::swap(wind_direction_, other->wind_direction_);
    std::swap(cloud_floor_, other->cloud_floor_);
    std::swap(cloud_ceiling_, other->cloud_ceiling_);
    std::swap(cloud_density_, other->cloud_density_);
    std::swap(precipitation_, other->precipitation_);
    std::swap(lighting_, other->lighting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgWeatherAttributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgWeatherAttributes_descriptor_;
  metadata.reflection = MsgWeatherAttributes_reflection_;
  return metadata;
}


}  // namespace Common

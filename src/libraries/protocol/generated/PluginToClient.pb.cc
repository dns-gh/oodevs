// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PluginToClient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsPluginToClient {

namespace {

const ::google::protobuf::Descriptor* MsgPluginTextMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPluginTextMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPluginToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPluginToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPluginToClient_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPluginToClient_Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PluginToClient_2eproto() {
  protobuf_AddDesc_PluginToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PluginToClient.proto");
  GOOGLE_CHECK(file != NULL);
  MsgPluginTextMessage_descriptor_ = file->message_type(0);
  static const int MsgPluginTextMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginTextMessage, destinataire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginTextMessage, message_),
  };
  MsgPluginTextMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPluginTextMessage_descriptor_,
      MsgPluginTextMessage::default_instance_,
      MsgPluginTextMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginTextMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginTextMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPluginTextMessage));
  MsgPluginToClient_descriptor_ = file->message_type(1);
  static const int MsgPluginToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient, message_),
  };
  MsgPluginToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPluginToClient_descriptor_,
      MsgPluginToClient::default_instance_,
      MsgPluginToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPluginToClient));
  MsgPluginToClient_Content_descriptor_ = MsgPluginToClient_descriptor_->nested_type(0);
  static const int MsgPluginToClient_Content_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_text_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_intelligence_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_intelligence_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_intelligence_destruction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_limit_creation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_limit_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, plugin_limit_destruction_),
  };
  MsgPluginToClient_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPluginToClient_Content_descriptor_,
      MsgPluginToClient_Content::default_instance_,
      MsgPluginToClient_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPluginToClient_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPluginToClient_Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PluginToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPluginTextMessage_descriptor_, &MsgPluginTextMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPluginToClient_descriptor_, &MsgPluginToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPluginToClient_Content_descriptor_, &MsgPluginToClient_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PluginToClient_2eproto() {
  delete MsgPluginTextMessage::default_instance_;
  delete MsgPluginTextMessage_reflection_;
  delete MsgPluginToClient::default_instance_;
  delete MsgPluginToClient_reflection_;
  delete MsgPluginToClient_Content::default_instance_;
  delete MsgPluginToClient_Content_reflection_;
}

void protobuf_AddDesc_PluginToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MsgsMessengerToClient::protobuf_AddDesc_MessengerToClient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024PluginToClient.proto\022\022MsgsPluginToClie"
    "nt\032\027MessengerToClient.proto\"=\n\024MsgPlugin"
    "TextMessage\022\024\n\014destinataire\030\001 \002(\t\022\017\n\007mes"
    "sage\030\002 \002(\t\"\230\005\n\021MsgPluginToClient\022\022\n\007cont"
    "ext\030\001 \001(\005:\0010\022>\n\007message\030\002 \002(\0132-.MsgsPlug"
    "inToClient.MsgPluginToClient.Content\032\256\004\n"
    "\007Content\022E\n\023plugin_text_message\030\001 \001(\0132(."
    "MsgsPluginToClient.MsgPluginTextMessage\022"
    "T\n\034plugin_intelligence_creation\030\002 \001(\0132.."
    "MsgsMessengerToClient.MsgIntelligenceCre"
    "ation\022P\n\032plugin_intelligence_update\030\003 \001("
    "\0132,.MsgsMessengerToClient.MsgIntelligenc"
    "eUpdate\022Z\n\037plugin_intelligence_destructi"
    "on\030\004 \001(\01321.MsgsMessengerToClient.MsgInte"
    "lligenceDestruction\022F\n\025plugin_limit_crea"
    "tion\030\005 \001(\0132\'.MsgsMessengerToClient.MsgLi"
    "mitCreation\022B\n\023plugin_limit_update\030\006 \001(\013"
    "2%.MsgsMessengerToClient.MsgLimitUpdate\022"
    "L\n\030plugin_limit_destruction\030\007 \001(\0132*.Msgs"
    "MessengerToClient.MsgLimitDestruction", 797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PluginToClient.proto", &protobuf_RegisterTypes);
  MsgPluginTextMessage::default_instance_ = new MsgPluginTextMessage();
  MsgPluginToClient::default_instance_ = new MsgPluginToClient();
  MsgPluginToClient_Content::default_instance_ = new MsgPluginToClient_Content();
  MsgPluginTextMessage::default_instance_->InitAsDefaultInstance();
  MsgPluginToClient::default_instance_->InitAsDefaultInstance();
  MsgPluginToClient_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PluginToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PluginToClient_2eproto {
  StaticDescriptorInitializer_PluginToClient_2eproto() {
    protobuf_AddDesc_PluginToClient_2eproto();
  }
} static_descriptor_initializer_PluginToClient_2eproto_;


// ===================================================================

const ::std::string MsgPluginTextMessage::_default_destinataire_;
const ::std::string MsgPluginTextMessage::_default_message_;
#ifndef _MSC_VER
const int MsgPluginTextMessage::kDestinataireFieldNumber;
const int MsgPluginTextMessage::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgPluginTextMessage::MsgPluginTextMessage() {
  SharedCtor();
}

void MsgPluginTextMessage::InitAsDefaultInstance() {
}

MsgPluginTextMessage::MsgPluginTextMessage(const MsgPluginTextMessage& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPluginTextMessage::SharedCtor() {
  _cached_size_ = 0;
  destinataire_ = const_cast< ::std::string*>(&_default_destinataire_);
  message_ = const_cast< ::std::string*>(&_default_message_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPluginTextMessage::~MsgPluginTextMessage() {
  SharedDtor();
}

void MsgPluginTextMessage::SharedDtor() {
  if (destinataire_ != &_default_destinataire_) {
    delete destinataire_;
  }
  if (message_ != &_default_message_) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPluginTextMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPluginTextMessage_descriptor_;
}

const MsgPluginTextMessage& MsgPluginTextMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PluginToClient_2eproto();  return *default_instance_;
}

MsgPluginTextMessage* MsgPluginTextMessage::default_instance_ = NULL;

MsgPluginTextMessage* MsgPluginTextMessage::New() const {
  return new MsgPluginTextMessage;
}

void MsgPluginTextMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (destinataire_ != &_default_destinataire_) {
        destinataire_->clear();
      }
    }
    if (_has_bit(1)) {
      if (message_ != &_default_message_) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPluginTextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string destinataire = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_destinataire()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->destinataire().data(), this->destinataire().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required string message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_message()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->message().data(), this->message().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPluginTextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPluginTextMessage::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string destinataire = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destinataire().data(), this->destinataire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->destinataire(), output);
  }
  
  // required string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPluginTextMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string destinataire = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->destinataire().data(), this->destinataire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->destinataire(), target);
  }
  
  // required string message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPluginTextMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string destinataire = 1;
    if (has_destinataire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->destinataire());
    }
    
    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPluginTextMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPluginTextMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPluginTextMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPluginTextMessage::MergeFrom(const MsgPluginTextMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_destinataire(from.destinataire());
    }
    if (from._has_bit(1)) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPluginTextMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPluginTextMessage::CopyFrom(const MsgPluginTextMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPluginTextMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgPluginTextMessage::Swap(MsgPluginTextMessage* other) {
  if (other != this) {
    std::swap(destinataire_, other->destinataire_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPluginTextMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPluginTextMessage_descriptor_;
  metadata.reflection = MsgPluginTextMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgPluginToClient_Content::kPluginTextMessageFieldNumber;
const int MsgPluginToClient_Content::kPluginIntelligenceCreationFieldNumber;
const int MsgPluginToClient_Content::kPluginIntelligenceUpdateFieldNumber;
const int MsgPluginToClient_Content::kPluginIntelligenceDestructionFieldNumber;
const int MsgPluginToClient_Content::kPluginLimitCreationFieldNumber;
const int MsgPluginToClient_Content::kPluginLimitUpdateFieldNumber;
const int MsgPluginToClient_Content::kPluginLimitDestructionFieldNumber;
#endif  // !_MSC_VER

MsgPluginToClient_Content::MsgPluginToClient_Content() {
  SharedCtor();
}

void MsgPluginToClient_Content::InitAsDefaultInstance() {
  plugin_text_message_ = const_cast< ::MsgsPluginToClient::MsgPluginTextMessage*>(&::MsgsPluginToClient::MsgPluginTextMessage::default_instance());
  plugin_intelligence_creation_ = const_cast< ::MsgsMessengerToClient::MsgIntelligenceCreation*>(&::MsgsMessengerToClient::MsgIntelligenceCreation::default_instance());
  plugin_intelligence_update_ = const_cast< ::MsgsMessengerToClient::MsgIntelligenceUpdate*>(&::MsgsMessengerToClient::MsgIntelligenceUpdate::default_instance());
  plugin_intelligence_destruction_ = const_cast< ::MsgsMessengerToClient::MsgIntelligenceDestruction*>(&::MsgsMessengerToClient::MsgIntelligenceDestruction::default_instance());
  plugin_limit_creation_ = const_cast< ::MsgsMessengerToClient::MsgLimitCreation*>(&::MsgsMessengerToClient::MsgLimitCreation::default_instance());
  plugin_limit_update_ = const_cast< ::MsgsMessengerToClient::MsgLimitUpdate*>(&::MsgsMessengerToClient::MsgLimitUpdate::default_instance());
  plugin_limit_destruction_ = const_cast< ::MsgsMessengerToClient::MsgLimitDestruction*>(&::MsgsMessengerToClient::MsgLimitDestruction::default_instance());
}

MsgPluginToClient_Content::MsgPluginToClient_Content(const MsgPluginToClient_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPluginToClient_Content::SharedCtor() {
  _cached_size_ = 0;
  plugin_text_message_ = NULL;
  plugin_intelligence_creation_ = NULL;
  plugin_intelligence_update_ = NULL;
  plugin_intelligence_destruction_ = NULL;
  plugin_limit_creation_ = NULL;
  plugin_limit_update_ = NULL;
  plugin_limit_destruction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPluginToClient_Content::~MsgPluginToClient_Content() {
  SharedDtor();
}

void MsgPluginToClient_Content::SharedDtor() {
  if (this != default_instance_) {
    delete plugin_text_message_;
    delete plugin_intelligence_creation_;
    delete plugin_intelligence_update_;
    delete plugin_intelligence_destruction_;
    delete plugin_limit_creation_;
    delete plugin_limit_update_;
    delete plugin_limit_destruction_;
  }
}

const ::google::protobuf::Descriptor* MsgPluginToClient_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPluginToClient_Content_descriptor_;
}

const MsgPluginToClient_Content& MsgPluginToClient_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PluginToClient_2eproto();  return *default_instance_;
}

MsgPluginToClient_Content* MsgPluginToClient_Content::default_instance_ = NULL;

MsgPluginToClient_Content* MsgPluginToClient_Content::New() const {
  return new MsgPluginToClient_Content;
}

void MsgPluginToClient_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (plugin_text_message_ != NULL) plugin_text_message_->::MsgsPluginToClient::MsgPluginTextMessage::Clear();
    }
    if (_has_bit(1)) {
      if (plugin_intelligence_creation_ != NULL) plugin_intelligence_creation_->::MsgsMessengerToClient::MsgIntelligenceCreation::Clear();
    }
    if (_has_bit(2)) {
      if (plugin_intelligence_update_ != NULL) plugin_intelligence_update_->::MsgsMessengerToClient::MsgIntelligenceUpdate::Clear();
    }
    if (_has_bit(3)) {
      if (plugin_intelligence_destruction_ != NULL) plugin_intelligence_destruction_->::MsgsMessengerToClient::MsgIntelligenceDestruction::Clear();
    }
    if (_has_bit(4)) {
      if (plugin_limit_creation_ != NULL) plugin_limit_creation_->::MsgsMessengerToClient::MsgLimitCreation::Clear();
    }
    if (_has_bit(5)) {
      if (plugin_limit_update_ != NULL) plugin_limit_update_->::MsgsMessengerToClient::MsgLimitUpdate::Clear();
    }
    if (_has_bit(6)) {
      if (plugin_limit_destruction_ != NULL) plugin_limit_destruction_->::MsgsMessengerToClient::MsgLimitDestruction::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPluginToClient_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsPluginToClient.MsgPluginTextMessage plugin_text_message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_text_message()));
        if (input->ExpectTag(18)) goto parse_plugin_intelligence_creation;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgIntelligenceCreation plugin_intelligence_creation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_intelligence_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_intelligence_creation()));
        if (input->ExpectTag(26)) goto parse_plugin_intelligence_update;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgIntelligenceUpdate plugin_intelligence_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_intelligence_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_intelligence_update()));
        if (input->ExpectTag(34)) goto parse_plugin_intelligence_destruction;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgIntelligenceDestruction plugin_intelligence_destruction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_intelligence_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_intelligence_destruction()));
        if (input->ExpectTag(42)) goto parse_plugin_limit_creation;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgLimitCreation plugin_limit_creation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_limit_creation:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_limit_creation()));
        if (input->ExpectTag(50)) goto parse_plugin_limit_update;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgLimitUpdate plugin_limit_update = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_limit_update:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_limit_update()));
        if (input->ExpectTag(58)) goto parse_plugin_limit_destruction;
        break;
      }
      
      // optional .MsgsMessengerToClient.MsgLimitDestruction plugin_limit_destruction = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plugin_limit_destruction:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plugin_limit_destruction()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPluginToClient_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPluginToClient_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsPluginToClient.MsgPluginTextMessage plugin_text_message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->plugin_text_message(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceCreation plugin_intelligence_creation = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->plugin_intelligence_creation(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceUpdate plugin_intelligence_update = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->plugin_intelligence_update(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceDestruction plugin_intelligence_destruction = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->plugin_intelligence_destruction(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitCreation plugin_limit_creation = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->plugin_limit_creation(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitUpdate plugin_limit_update = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->plugin_limit_update(), output);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitDestruction plugin_limit_destruction = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      7, this->plugin_limit_destruction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPluginToClient_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsPluginToClient.MsgPluginTextMessage plugin_text_message = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->plugin_text_message(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceCreation plugin_intelligence_creation = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plugin_intelligence_creation(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceUpdate plugin_intelligence_update = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->plugin_intelligence_update(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgIntelligenceDestruction plugin_intelligence_destruction = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->plugin_intelligence_destruction(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitCreation plugin_limit_creation = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->plugin_limit_creation(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitUpdate plugin_limit_update = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->plugin_limit_update(), target);
  }
  
  // optional .MsgsMessengerToClient.MsgLimitDestruction plugin_limit_destruction = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->plugin_limit_destruction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPluginToClient_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsPluginToClient.MsgPluginTextMessage plugin_text_message = 1;
    if (has_plugin_text_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_text_message());
    }
    
    // optional .MsgsMessengerToClient.MsgIntelligenceCreation plugin_intelligence_creation = 2;
    if (has_plugin_intelligence_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_intelligence_creation());
    }
    
    // optional .MsgsMessengerToClient.MsgIntelligenceUpdate plugin_intelligence_update = 3;
    if (has_plugin_intelligence_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_intelligence_update());
    }
    
    // optional .MsgsMessengerToClient.MsgIntelligenceDestruction plugin_intelligence_destruction = 4;
    if (has_plugin_intelligence_destruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_intelligence_destruction());
    }
    
    // optional .MsgsMessengerToClient.MsgLimitCreation plugin_limit_creation = 5;
    if (has_plugin_limit_creation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_limit_creation());
    }
    
    // optional .MsgsMessengerToClient.MsgLimitUpdate plugin_limit_update = 6;
    if (has_plugin_limit_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_limit_update());
    }
    
    // optional .MsgsMessengerToClient.MsgLimitDestruction plugin_limit_destruction = 7;
    if (has_plugin_limit_destruction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plugin_limit_destruction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPluginToClient_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPluginToClient_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPluginToClient_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPluginToClient_Content::MergeFrom(const MsgPluginToClient_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_plugin_text_message()->::MsgsPluginToClient::MsgPluginTextMessage::MergeFrom(from.plugin_text_message());
    }
    if (from._has_bit(1)) {
      mutable_plugin_intelligence_creation()->::MsgsMessengerToClient::MsgIntelligenceCreation::MergeFrom(from.plugin_intelligence_creation());
    }
    if (from._has_bit(2)) {
      mutable_plugin_intelligence_update()->::MsgsMessengerToClient::MsgIntelligenceUpdate::MergeFrom(from.plugin_intelligence_update());
    }
    if (from._has_bit(3)) {
      mutable_plugin_intelligence_destruction()->::MsgsMessengerToClient::MsgIntelligenceDestruction::MergeFrom(from.plugin_intelligence_destruction());
    }
    if (from._has_bit(4)) {
      mutable_plugin_limit_creation()->::MsgsMessengerToClient::MsgLimitCreation::MergeFrom(from.plugin_limit_creation());
    }
    if (from._has_bit(5)) {
      mutable_plugin_limit_update()->::MsgsMessengerToClient::MsgLimitUpdate::MergeFrom(from.plugin_limit_update());
    }
    if (from._has_bit(6)) {
      mutable_plugin_limit_destruction()->::MsgsMessengerToClient::MsgLimitDestruction::MergeFrom(from.plugin_limit_destruction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPluginToClient_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPluginToClient_Content::CopyFrom(const MsgPluginToClient_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPluginToClient_Content::IsInitialized() const {
  
  if (has_plugin_text_message()) {
    if (!this->plugin_text_message().IsInitialized()) return false;
  }
  if (has_plugin_intelligence_creation()) {
    if (!this->plugin_intelligence_creation().IsInitialized()) return false;
  }
  if (has_plugin_intelligence_update()) {
    if (!this->plugin_intelligence_update().IsInitialized()) return false;
  }
  if (has_plugin_intelligence_destruction()) {
    if (!this->plugin_intelligence_destruction().IsInitialized()) return false;
  }
  if (has_plugin_limit_creation()) {
    if (!this->plugin_limit_creation().IsInitialized()) return false;
  }
  if (has_plugin_limit_update()) {
    if (!this->plugin_limit_update().IsInitialized()) return false;
  }
  return true;
}

void MsgPluginToClient_Content::Swap(MsgPluginToClient_Content* other) {
  if (other != this) {
    std::swap(plugin_text_message_, other->plugin_text_message_);
    std::swap(plugin_intelligence_creation_, other->plugin_intelligence_creation_);
    std::swap(plugin_intelligence_update_, other->plugin_intelligence_update_);
    std::swap(plugin_intelligence_destruction_, other->plugin_intelligence_destruction_);
    std::swap(plugin_limit_creation_, other->plugin_limit_creation_);
    std::swap(plugin_limit_update_, other->plugin_limit_update_);
    std::swap(plugin_limit_destruction_, other->plugin_limit_destruction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPluginToClient_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPluginToClient_Content_descriptor_;
  metadata.reflection = MsgPluginToClient_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgPluginToClient::kContextFieldNumber;
const int MsgPluginToClient::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgPluginToClient::MsgPluginToClient() {
  SharedCtor();
}

void MsgPluginToClient::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsPluginToClient::MsgPluginToClient_Content*>(&::MsgsPluginToClient::MsgPluginToClient_Content::default_instance());
}

MsgPluginToClient::MsgPluginToClient(const MsgPluginToClient& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPluginToClient::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPluginToClient::~MsgPluginToClient() {
  SharedDtor();
}

void MsgPluginToClient::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgPluginToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPluginToClient_descriptor_;
}

const MsgPluginToClient& MsgPluginToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PluginToClient_2eproto();  return *default_instance_;
}

MsgPluginToClient* MsgPluginToClient::default_instance_ = NULL;

MsgPluginToClient* MsgPluginToClient::New() const {
  return new MsgPluginToClient;
}

void MsgPluginToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::MsgsPluginToClient::MsgPluginToClient_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPluginToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 context = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .MsgsPluginToClient.MsgPluginToClient.Content message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPluginToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPluginToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // required .MsgsPluginToClient.MsgPluginToClient.Content message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPluginToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // required .MsgsPluginToClient.MsgPluginToClient.Content message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPluginToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 context = 1 [default = 0];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // required .MsgsPluginToClient.MsgPluginToClient.Content message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPluginToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPluginToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPluginToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPluginToClient::MergeFrom(const MsgPluginToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_message()->::MsgsPluginToClient::MsgPluginToClient_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPluginToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPluginToClient::CopyFrom(const MsgPluginToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPluginToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void MsgPluginToClient::Swap(MsgPluginToClient* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPluginToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPluginToClient_descriptor_;
  metadata.reflection = MsgPluginToClient_reflection_;
  return metadata;
}


}  // namespace MsgsPluginToClient

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_ReplayToClient_2eproto__INCLUDED
#define PROTOBUF_ReplayToClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Common.pb.h"
#include "SimToClient.pb.h"

namespace MsgsReplayToClient {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ReplayToClient_2eproto();
void protobuf_AssignDesc_ReplayToClient_2eproto();
void protobuf_ShutdownFile_ReplayToClient_2eproto();

class MsgControlReplayInformation;
class MsgControlSkipToTickAck;
class MsgReplayToClient;
class MsgReplayToClient_Content;

// ===================================================================

class MsgControlReplayInformation : public ::google::protobuf::Message {
 public:
  MsgControlReplayInformation();
  virtual ~MsgControlReplayInformation();
  
  MsgControlReplayInformation(const MsgControlReplayInformation& from);
  
  inline MsgControlReplayInformation& operator=(const MsgControlReplayInformation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlReplayInformation& default_instance();
  void Swap(MsgControlReplayInformation* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlReplayInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlReplayInformation& from);
  void MergeFrom(const MsgControlReplayInformation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 current_tick = 1;
  inline bool has_current_tick() const;
  inline void clear_current_tick();
  static const int kCurrentTickFieldNumber = 1;
  inline ::google::protobuf::int32 current_tick() const;
  inline void set_current_tick(::google::protobuf::int32 value);
  
  // required .Common.MsgDateTime initial_date_time = 2;
  inline bool has_initial_date_time() const;
  inline void clear_initial_date_time();
  static const int kInitialDateTimeFieldNumber = 2;
  inline const ::Common::MsgDateTime& initial_date_time() const;
  inline ::Common::MsgDateTime* mutable_initial_date_time();
  
  // required .Common.MsgDateTime date_time = 3;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 3;
  inline const ::Common::MsgDateTime& date_time() const;
  inline ::Common::MsgDateTime* mutable_date_time();
  
  // required int32 tick_duration = 4;
  inline bool has_tick_duration() const;
  inline void clear_tick_duration();
  static const int kTickDurationFieldNumber = 4;
  inline ::google::protobuf::int32 tick_duration() const;
  inline void set_tick_duration(::google::protobuf::int32 value);
  
  // required int32 time_factor = 5;
  inline bool has_time_factor() const;
  inline void clear_time_factor();
  static const int kTimeFactorFieldNumber = 5;
  inline ::google::protobuf::int32 time_factor() const;
  inline void set_time_factor(::google::protobuf::int32 value);
  
  // required .Common.EnumSimulationState status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline Common::EnumSimulationState status() const;
  inline void set_status(Common::EnumSimulationState value);
  
  // required int32 tick_count = 7;
  inline bool has_tick_count() const;
  inline void clear_tick_count();
  static const int kTickCountFieldNumber = 7;
  inline ::google::protobuf::int32 tick_count() const;
  inline void set_tick_count(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 current_tick_;
  ::Common::MsgDateTime* initial_date_time_;
  ::Common::MsgDateTime* date_time_;
  ::google::protobuf::int32 tick_duration_;
  ::google::protobuf::int32 time_factor_;
  int status_;
  ::google::protobuf::int32 tick_count_;
  friend void  protobuf_AddDesc_ReplayToClient_2eproto();
  friend void protobuf_AssignDesc_ReplayToClient_2eproto();
  friend void protobuf_ShutdownFile_ReplayToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlReplayInformation* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlSkipToTickAck : public ::google::protobuf::Message {
 public:
  MsgControlSkipToTickAck();
  virtual ~MsgControlSkipToTickAck();
  
  MsgControlSkipToTickAck(const MsgControlSkipToTickAck& from);
  
  inline MsgControlSkipToTickAck& operator=(const MsgControlSkipToTickAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlSkipToTickAck& default_instance();
  void Swap(MsgControlSkipToTickAck* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlSkipToTickAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlSkipToTickAck& from);
  void MergeFrom(const MsgControlSkipToTickAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 tick = 1;
  inline bool has_tick() const;
  inline void clear_tick();
  static const int kTickFieldNumber = 1;
  inline ::google::protobuf::int32 tick() const;
  inline void set_tick(::google::protobuf::int32 value);
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::MsgsSimToClient::ControlAck_ErrorCode error_code() const;
  inline void set_error_code(::MsgsSimToClient::ControlAck_ErrorCode value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 tick_;
  int error_code_;
  friend void  protobuf_AddDesc_ReplayToClient_2eproto();
  friend void protobuf_AssignDesc_ReplayToClient_2eproto();
  friend void protobuf_ShutdownFile_ReplayToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlSkipToTickAck* default_instance_;
};
// -------------------------------------------------------------------

class MsgReplayToClient_Content : public ::google::protobuf::Message {
 public:
  MsgReplayToClient_Content();
  virtual ~MsgReplayToClient_Content();
  
  MsgReplayToClient_Content(const MsgReplayToClient_Content& from);
  
  inline MsgReplayToClient_Content& operator=(const MsgReplayToClient_Content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgReplayToClient_Content& default_instance();
  void Swap(MsgReplayToClient_Content* other);
  
  // implements Message ----------------------------------------------
  
  MsgReplayToClient_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgReplayToClient_Content& from);
  void MergeFrom(const MsgReplayToClient_Content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
  inline bool has_control_replay_information() const;
  inline void clear_control_replay_information();
  static const int kControlReplayInformationFieldNumber = 1;
  inline const ::MsgsReplayToClient::MsgControlReplayInformation& control_replay_information() const;
  inline ::MsgsReplayToClient::MsgControlReplayInformation* mutable_control_replay_information();
  
  // optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
  inline bool has_control_skip_to_tick_ack() const;
  inline void clear_control_skip_to_tick_ack();
  static const int kControlSkipToTickAckFieldNumber = 2;
  inline const ::MsgsReplayToClient::MsgControlSkipToTickAck& control_skip_to_tick_ack() const;
  inline ::MsgsReplayToClient::MsgControlSkipToTickAck* mutable_control_skip_to_tick_ack();
  
  // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
  inline bool has_control_stop_ack() const;
  inline void clear_control_stop_ack();
  static const int kControlStopAckFieldNumber = 3;
  inline const ::MsgsSimToClient::MsgControlStopAck& control_stop_ack() const;
  inline ::MsgsSimToClient::MsgControlStopAck* mutable_control_stop_ack();
  
  // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
  inline bool has_control_pause_ack() const;
  inline void clear_control_pause_ack();
  static const int kControlPauseAckFieldNumber = 4;
  inline const ::MsgsSimToClient::MsgControlPauseAck& control_pause_ack() const;
  inline ::MsgsSimToClient::MsgControlPauseAck* mutable_control_pause_ack();
  
  // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
  inline bool has_control_resume_ack() const;
  inline void clear_control_resume_ack();
  static const int kControlResumeAckFieldNumber = 5;
  inline const ::MsgsSimToClient::MsgControlResumeAck& control_resume_ack() const;
  inline ::MsgsSimToClient::MsgControlResumeAck* mutable_control_resume_ack();
  
  // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
  inline bool has_control_change_time_factor_ack() const;
  inline void clear_control_change_time_factor_ack();
  static const int kControlChangeTimeFactorAckFieldNumber = 6;
  inline const ::MsgsSimToClient::MsgControlChangeTimeFactorAck& control_change_time_factor_ack() const;
  inline ::MsgsSimToClient::MsgControlChangeTimeFactorAck* mutable_control_change_time_factor_ack();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgsReplayToClient::MsgControlReplayInformation* control_replay_information_;
  ::MsgsReplayToClient::MsgControlSkipToTickAck* control_skip_to_tick_ack_;
  ::MsgsSimToClient::MsgControlStopAck* control_stop_ack_;
  ::MsgsSimToClient::MsgControlPauseAck* control_pause_ack_;
  ::MsgsSimToClient::MsgControlResumeAck* control_resume_ack_;
  ::MsgsSimToClient::MsgControlChangeTimeFactorAck* control_change_time_factor_ack_;
  friend void  protobuf_AddDesc_ReplayToClient_2eproto();
  friend void protobuf_AssignDesc_ReplayToClient_2eproto();
  friend void protobuf_ShutdownFile_ReplayToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgReplayToClient_Content* default_instance_;
};
// -------------------------------------------------------------------

class MsgReplayToClient : public ::google::protobuf::Message {
 public:
  MsgReplayToClient();
  virtual ~MsgReplayToClient();
  
  MsgReplayToClient(const MsgReplayToClient& from);
  
  inline MsgReplayToClient& operator=(const MsgReplayToClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgReplayToClient& default_instance();
  void Swap(MsgReplayToClient* other);
  
  // implements Message ----------------------------------------------
  
  MsgReplayToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgReplayToClient& from);
  void MergeFrom(const MsgReplayToClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgReplayToClient_Content Content;
  
  // accessors -------------------------------------------------------
  
  // optional int32 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::int32 context() const;
  inline void set_context(::google::protobuf::int32 value);
  
  // required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::MsgsReplayToClient::MsgReplayToClient_Content& message() const;
  inline ::MsgsReplayToClient::MsgReplayToClient_Content* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 context_;
  ::MsgsReplayToClient::MsgReplayToClient_Content* message_;
  friend void  protobuf_AddDesc_ReplayToClient_2eproto();
  friend void protobuf_AssignDesc_ReplayToClient_2eproto();
  friend void protobuf_ShutdownFile_ReplayToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgReplayToClient* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgControlReplayInformation

// required int32 current_tick = 1;
inline bool MsgControlReplayInformation::has_current_tick() const {
  return _has_bit(0);
}
inline void MsgControlReplayInformation::clear_current_tick() {
  current_tick_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgControlReplayInformation::current_tick() const {
  return current_tick_;
}
inline void MsgControlReplayInformation::set_current_tick(::google::protobuf::int32 value) {
  _set_bit(0);
  current_tick_ = value;
}

// required .Common.MsgDateTime initial_date_time = 2;
inline bool MsgControlReplayInformation::has_initial_date_time() const {
  return _has_bit(1);
}
inline void MsgControlReplayInformation::clear_initial_date_time() {
  if (initial_date_time_ != NULL) initial_date_time_->::Common::MsgDateTime::Clear();
  _clear_bit(1);
}
inline const ::Common::MsgDateTime& MsgControlReplayInformation::initial_date_time() const {
  return initial_date_time_ != NULL ? *initial_date_time_ : *default_instance_->initial_date_time_;
}
inline ::Common::MsgDateTime* MsgControlReplayInformation::mutable_initial_date_time() {
  _set_bit(1);
  if (initial_date_time_ == NULL) initial_date_time_ = new ::Common::MsgDateTime;
  return initial_date_time_;
}

// required .Common.MsgDateTime date_time = 3;
inline bool MsgControlReplayInformation::has_date_time() const {
  return _has_bit(2);
}
inline void MsgControlReplayInformation::clear_date_time() {
  if (date_time_ != NULL) date_time_->::Common::MsgDateTime::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgDateTime& MsgControlReplayInformation::date_time() const {
  return date_time_ != NULL ? *date_time_ : *default_instance_->date_time_;
}
inline ::Common::MsgDateTime* MsgControlReplayInformation::mutable_date_time() {
  _set_bit(2);
  if (date_time_ == NULL) date_time_ = new ::Common::MsgDateTime;
  return date_time_;
}

// required int32 tick_duration = 4;
inline bool MsgControlReplayInformation::has_tick_duration() const {
  return _has_bit(3);
}
inline void MsgControlReplayInformation::clear_tick_duration() {
  tick_duration_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 MsgControlReplayInformation::tick_duration() const {
  return tick_duration_;
}
inline void MsgControlReplayInformation::set_tick_duration(::google::protobuf::int32 value) {
  _set_bit(3);
  tick_duration_ = value;
}

// required int32 time_factor = 5;
inline bool MsgControlReplayInformation::has_time_factor() const {
  return _has_bit(4);
}
inline void MsgControlReplayInformation::clear_time_factor() {
  time_factor_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 MsgControlReplayInformation::time_factor() const {
  return time_factor_;
}
inline void MsgControlReplayInformation::set_time_factor(::google::protobuf::int32 value) {
  _set_bit(4);
  time_factor_ = value;
}

// required .Common.EnumSimulationState status = 6;
inline bool MsgControlReplayInformation::has_status() const {
  return _has_bit(5);
}
inline void MsgControlReplayInformation::clear_status() {
  status_ = 0;
  _clear_bit(5);
}
inline Common::EnumSimulationState MsgControlReplayInformation::status() const {
  return static_cast< Common::EnumSimulationState >(status_);
}
inline void MsgControlReplayInformation::set_status(Common::EnumSimulationState value) {
  GOOGLE_DCHECK(Common::EnumSimulationState_IsValid(value));
  _set_bit(5);
  status_ = value;
}

// required int32 tick_count = 7;
inline bool MsgControlReplayInformation::has_tick_count() const {
  return _has_bit(6);
}
inline void MsgControlReplayInformation::clear_tick_count() {
  tick_count_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 MsgControlReplayInformation::tick_count() const {
  return tick_count_;
}
inline void MsgControlReplayInformation::set_tick_count(::google::protobuf::int32 value) {
  _set_bit(6);
  tick_count_ = value;
}

// -------------------------------------------------------------------

// MsgControlSkipToTickAck

// required int32 tick = 1;
inline bool MsgControlSkipToTickAck::has_tick() const {
  return _has_bit(0);
}
inline void MsgControlSkipToTickAck::clear_tick() {
  tick_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgControlSkipToTickAck::tick() const {
  return tick_;
}
inline void MsgControlSkipToTickAck::set_tick(::google::protobuf::int32 value) {
  _set_bit(0);
  tick_ = value;
}

// required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
inline bool MsgControlSkipToTickAck::has_error_code() const {
  return _has_bit(1);
}
inline void MsgControlSkipToTickAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(1);
}
inline ::MsgsSimToClient::ControlAck_ErrorCode MsgControlSkipToTickAck::error_code() const {
  return static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(error_code_);
}
inline void MsgControlSkipToTickAck::set_error_code(::MsgsSimToClient::ControlAck_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value));
  _set_bit(1);
  error_code_ = value;
}

// -------------------------------------------------------------------

// MsgReplayToClient_Content

// optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
inline bool MsgReplayToClient_Content::has_control_replay_information() const {
  return _has_bit(0);
}
inline void MsgReplayToClient_Content::clear_control_replay_information() {
  if (control_replay_information_ != NULL) control_replay_information_->::MsgsReplayToClient::MsgControlReplayInformation::Clear();
  _clear_bit(0);
}
inline const ::MsgsReplayToClient::MsgControlReplayInformation& MsgReplayToClient_Content::control_replay_information() const {
  return control_replay_information_ != NULL ? *control_replay_information_ : *default_instance_->control_replay_information_;
}
inline ::MsgsReplayToClient::MsgControlReplayInformation* MsgReplayToClient_Content::mutable_control_replay_information() {
  _set_bit(0);
  if (control_replay_information_ == NULL) control_replay_information_ = new ::MsgsReplayToClient::MsgControlReplayInformation;
  return control_replay_information_;
}

// optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
inline bool MsgReplayToClient_Content::has_control_skip_to_tick_ack() const {
  return _has_bit(1);
}
inline void MsgReplayToClient_Content::clear_control_skip_to_tick_ack() {
  if (control_skip_to_tick_ack_ != NULL) control_skip_to_tick_ack_->::MsgsReplayToClient::MsgControlSkipToTickAck::Clear();
  _clear_bit(1);
}
inline const ::MsgsReplayToClient::MsgControlSkipToTickAck& MsgReplayToClient_Content::control_skip_to_tick_ack() const {
  return control_skip_to_tick_ack_ != NULL ? *control_skip_to_tick_ack_ : *default_instance_->control_skip_to_tick_ack_;
}
inline ::MsgsReplayToClient::MsgControlSkipToTickAck* MsgReplayToClient_Content::mutable_control_skip_to_tick_ack() {
  _set_bit(1);
  if (control_skip_to_tick_ack_ == NULL) control_skip_to_tick_ack_ = new ::MsgsReplayToClient::MsgControlSkipToTickAck;
  return control_skip_to_tick_ack_;
}

// optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
inline bool MsgReplayToClient_Content::has_control_stop_ack() const {
  return _has_bit(2);
}
inline void MsgReplayToClient_Content::clear_control_stop_ack() {
  if (control_stop_ack_ != NULL) control_stop_ack_->::MsgsSimToClient::MsgControlStopAck::Clear();
  _clear_bit(2);
}
inline const ::MsgsSimToClient::MsgControlStopAck& MsgReplayToClient_Content::control_stop_ack() const {
  return control_stop_ack_ != NULL ? *control_stop_ack_ : *default_instance_->control_stop_ack_;
}
inline ::MsgsSimToClient::MsgControlStopAck* MsgReplayToClient_Content::mutable_control_stop_ack() {
  _set_bit(2);
  if (control_stop_ack_ == NULL) control_stop_ack_ = new ::MsgsSimToClient::MsgControlStopAck;
  return control_stop_ack_;
}

// optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
inline bool MsgReplayToClient_Content::has_control_pause_ack() const {
  return _has_bit(3);
}
inline void MsgReplayToClient_Content::clear_control_pause_ack() {
  if (control_pause_ack_ != NULL) control_pause_ack_->::MsgsSimToClient::MsgControlPauseAck::Clear();
  _clear_bit(3);
}
inline const ::MsgsSimToClient::MsgControlPauseAck& MsgReplayToClient_Content::control_pause_ack() const {
  return control_pause_ack_ != NULL ? *control_pause_ack_ : *default_instance_->control_pause_ack_;
}
inline ::MsgsSimToClient::MsgControlPauseAck* MsgReplayToClient_Content::mutable_control_pause_ack() {
  _set_bit(3);
  if (control_pause_ack_ == NULL) control_pause_ack_ = new ::MsgsSimToClient::MsgControlPauseAck;
  return control_pause_ack_;
}

// optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
inline bool MsgReplayToClient_Content::has_control_resume_ack() const {
  return _has_bit(4);
}
inline void MsgReplayToClient_Content::clear_control_resume_ack() {
  if (control_resume_ack_ != NULL) control_resume_ack_->::MsgsSimToClient::MsgControlResumeAck::Clear();
  _clear_bit(4);
}
inline const ::MsgsSimToClient::MsgControlResumeAck& MsgReplayToClient_Content::control_resume_ack() const {
  return control_resume_ack_ != NULL ? *control_resume_ack_ : *default_instance_->control_resume_ack_;
}
inline ::MsgsSimToClient::MsgControlResumeAck* MsgReplayToClient_Content::mutable_control_resume_ack() {
  _set_bit(4);
  if (control_resume_ack_ == NULL) control_resume_ack_ = new ::MsgsSimToClient::MsgControlResumeAck;
  return control_resume_ack_;
}

// optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
inline bool MsgReplayToClient_Content::has_control_change_time_factor_ack() const {
  return _has_bit(5);
}
inline void MsgReplayToClient_Content::clear_control_change_time_factor_ack() {
  if (control_change_time_factor_ack_ != NULL) control_change_time_factor_ack_->::MsgsSimToClient::MsgControlChangeTimeFactorAck::Clear();
  _clear_bit(5);
}
inline const ::MsgsSimToClient::MsgControlChangeTimeFactorAck& MsgReplayToClient_Content::control_change_time_factor_ack() const {
  return control_change_time_factor_ack_ != NULL ? *control_change_time_factor_ack_ : *default_instance_->control_change_time_factor_ack_;
}
inline ::MsgsSimToClient::MsgControlChangeTimeFactorAck* MsgReplayToClient_Content::mutable_control_change_time_factor_ack() {
  _set_bit(5);
  if (control_change_time_factor_ack_ == NULL) control_change_time_factor_ack_ = new ::MsgsSimToClient::MsgControlChangeTimeFactorAck;
  return control_change_time_factor_ack_;
}

// -------------------------------------------------------------------

// MsgReplayToClient

// optional int32 context = 1;
inline bool MsgReplayToClient::has_context() const {
  return _has_bit(0);
}
inline void MsgReplayToClient::clear_context() {
  context_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgReplayToClient::context() const {
  return context_;
}
inline void MsgReplayToClient::set_context(::google::protobuf::int32 value) {
  _set_bit(0);
  context_ = value;
}

// required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
inline bool MsgReplayToClient::has_message() const {
  return _has_bit(1);
}
inline void MsgReplayToClient::clear_message() {
  if (message_ != NULL) message_->::MsgsReplayToClient::MsgReplayToClient_Content::Clear();
  _clear_bit(1);
}
inline const ::MsgsReplayToClient::MsgReplayToClient_Content& MsgReplayToClient::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::MsgsReplayToClient::MsgReplayToClient_Content* MsgReplayToClient::mutable_message() {
  _set_bit(1);
  if (message_ == NULL) message_ = new ::MsgsReplayToClient::MsgReplayToClient_Content;
  return message_;
}


}  // namespace MsgsReplayToClient

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_ReplayToClient_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_AarToClient_2eproto__INCLUDED
#define PROTOBUF_AarToClient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>

namespace MsgsAarToClient {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AarToClient_2eproto();
void protobuf_AssignDesc_AarToClient_2eproto();
void protobuf_ShutdownFile_AarToClient_2eproto();

class MsgAarInformation;
class MsgPlotResult;
class MsgIndicator;
class MsgAarToClient;
class MsgAarToClient_Content;

// ===================================================================

class MsgAarInformation : public ::google::protobuf::Message {
 public:
  MsgAarInformation();
  virtual ~MsgAarInformation();
  
  MsgAarInformation(const MsgAarInformation& from);
  
  inline MsgAarInformation& operator=(const MsgAarInformation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAarInformation& default_instance();
  void Swap(MsgAarInformation* other);
  
  // implements Message ----------------------------------------------
  
  MsgAarInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAarInformation& from);
  void MergeFrom(const MsgAarInformation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string information = 1;
  inline bool has_information() const;
  inline void clear_information();
  static const int kInformationFieldNumber = 1;
  inline const ::std::string& information() const;
  inline void set_information(const ::std::string& value);
  inline void set_information(const char* value);
  inline void set_information(const char* value, size_t size);
  inline ::std::string* mutable_information();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* information_;
  static const ::std::string _default_information_;
  friend void  protobuf_AddDesc_AarToClient_2eproto();
  friend void protobuf_AssignDesc_AarToClient_2eproto();
  friend void protobuf_ShutdownFile_AarToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgAarInformation* default_instance_;
};
// -------------------------------------------------------------------

class MsgPlotResult : public ::google::protobuf::Message {
 public:
  MsgPlotResult();
  virtual ~MsgPlotResult();
  
  MsgPlotResult(const MsgPlotResult& from);
  
  inline MsgPlotResult& operator=(const MsgPlotResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgPlotResult& default_instance();
  void Swap(MsgPlotResult* other);
  
  // implements Message ----------------------------------------------
  
  MsgPlotResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgPlotResult& from);
  void MergeFrom(const MsgPlotResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline ::google::protobuf::uint32 identifier() const;
  inline void set_identifier(::google::protobuf::uint32 value);
  
  // repeated float values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::google::protobuf::RepeatedField< float >& values() const
      ;
  inline ::google::protobuf::RepeatedField< float >* mutable_values();
  inline float values(int index) const;
  inline void set_values(int index, float value);
  inline void add_values(float value);
  
  // required string error = 3;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 3;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 identifier_;
  ::google::protobuf::RepeatedField< float > values_;
  ::std::string* error_;
  static const ::std::string _default_error_;
  friend void  protobuf_AddDesc_AarToClient_2eproto();
  friend void protobuf_AssignDesc_AarToClient_2eproto();
  friend void protobuf_ShutdownFile_AarToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgPlotResult* default_instance_;
};
// -------------------------------------------------------------------

class MsgIndicator : public ::google::protobuf::Message {
 public:
  MsgIndicator();
  virtual ~MsgIndicator();
  
  MsgIndicator(const MsgIndicator& from);
  
  inline MsgIndicator& operator=(const MsgIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgIndicator& default_instance();
  void Swap(MsgIndicator* other);
  
  // implements Message ----------------------------------------------
  
  MsgIndicator* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgIndicator& from);
  void MergeFrom(const MsgIndicator& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
  // required float value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline float value() const;
  inline void set_value(float value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  float value_;
  friend void  protobuf_AddDesc_AarToClient_2eproto();
  friend void protobuf_AssignDesc_AarToClient_2eproto();
  friend void protobuf_ShutdownFile_AarToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgIndicator* default_instance_;
};
// -------------------------------------------------------------------

class MsgAarToClient_Content : public ::google::protobuf::Message {
 public:
  MsgAarToClient_Content();
  virtual ~MsgAarToClient_Content();
  
  MsgAarToClient_Content(const MsgAarToClient_Content& from);
  
  inline MsgAarToClient_Content& operator=(const MsgAarToClient_Content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAarToClient_Content& default_instance();
  void Swap(MsgAarToClient_Content* other);
  
  // implements Message ----------------------------------------------
  
  MsgAarToClient_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAarToClient_Content& from);
  void MergeFrom(const MsgAarToClient_Content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
  inline bool has_aar_information() const;
  inline void clear_aar_information();
  static const int kAarInformationFieldNumber = 1;
  inline const ::MsgsAarToClient::MsgAarInformation& aar_information() const;
  inline ::MsgsAarToClient::MsgAarInformation* mutable_aar_information();
  
  // optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
  inline bool has_plot_result() const;
  inline void clear_plot_result();
  static const int kPlotResultFieldNumber = 2;
  inline const ::MsgsAarToClient::MsgPlotResult& plot_result() const;
  inline ::MsgsAarToClient::MsgPlotResult* mutable_plot_result();
  
  // optional .MsgsAarToClient.MsgIndicator indicator = 3;
  inline bool has_indicator() const;
  inline void clear_indicator();
  static const int kIndicatorFieldNumber = 3;
  inline const ::MsgsAarToClient::MsgIndicator& indicator() const;
  inline ::MsgsAarToClient::MsgIndicator* mutable_indicator();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::MsgsAarToClient::MsgAarInformation* aar_information_;
  ::MsgsAarToClient::MsgPlotResult* plot_result_;
  ::MsgsAarToClient::MsgIndicator* indicator_;
  friend void  protobuf_AddDesc_AarToClient_2eproto();
  friend void protobuf_AssignDesc_AarToClient_2eproto();
  friend void protobuf_ShutdownFile_AarToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgAarToClient_Content* default_instance_;
};
// -------------------------------------------------------------------

class MsgAarToClient : public ::google::protobuf::Message {
 public:
  MsgAarToClient();
  virtual ~MsgAarToClient();
  
  MsgAarToClient(const MsgAarToClient& from);
  
  inline MsgAarToClient& operator=(const MsgAarToClient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgAarToClient& default_instance();
  void Swap(MsgAarToClient* other);
  
  // implements Message ----------------------------------------------
  
  MsgAarToClient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgAarToClient& from);
  void MergeFrom(const MsgAarToClient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgAarToClient_Content Content;
  
  // accessors -------------------------------------------------------
  
  // optional int32 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::int32 context() const;
  inline void set_context(::google::protobuf::int32 value);
  
  // optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::MsgsAarToClient::MsgAarToClient_Content& message() const;
  inline ::MsgsAarToClient::MsgAarToClient_Content* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 context_;
  ::MsgsAarToClient::MsgAarToClient_Content* message_;
  friend void  protobuf_AddDesc_AarToClient_2eproto();
  friend void protobuf_AssignDesc_AarToClient_2eproto();
  friend void protobuf_ShutdownFile_AarToClient_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgAarToClient* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgAarInformation

// required string information = 1;
inline bool MsgAarInformation::has_information() const {
  return _has_bit(0);
}
inline void MsgAarInformation::clear_information() {
  if (information_ != &_default_information_) {
    information_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgAarInformation::information() const {
  return *information_;
}
inline void MsgAarInformation::set_information(const ::std::string& value) {
  _set_bit(0);
  if (information_ == &_default_information_) {
    information_ = new ::std::string;
  }
  information_->assign(value);
}
inline void MsgAarInformation::set_information(const char* value) {
  _set_bit(0);
  if (information_ == &_default_information_) {
    information_ = new ::std::string;
  }
  information_->assign(value);
}
inline void MsgAarInformation::set_information(const char* value, size_t size) {
  _set_bit(0);
  if (information_ == &_default_information_) {
    information_ = new ::std::string;
  }
  information_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgAarInformation::mutable_information() {
  _set_bit(0);
  if (information_ == &_default_information_) {
    information_ = new ::std::string;
  }
  return information_;
}

// -------------------------------------------------------------------

// MsgPlotResult

// required uint32 identifier = 1;
inline bool MsgPlotResult::has_identifier() const {
  return _has_bit(0);
}
inline void MsgPlotResult::clear_identifier() {
  identifier_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 MsgPlotResult::identifier() const {
  return identifier_;
}
inline void MsgPlotResult::set_identifier(::google::protobuf::uint32 value) {
  _set_bit(0);
  identifier_ = value;
}

// repeated float values = 2;
inline int MsgPlotResult::values_size() const {
  return values_.size();
}
inline void MsgPlotResult::clear_values() {
  values_.Clear();
}
inline const ::google::protobuf::RepeatedField< float >&
MsgPlotResult::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< float >*
MsgPlotResult::mutable_values() {
  return &values_;
}
inline float MsgPlotResult::values(int index) const {
  return values_.Get(index);
}
inline void MsgPlotResult::set_values(int index, float value) {
  values_.Set(index, value);
}
inline void MsgPlotResult::add_values(float value) {
  values_.Add(value);
}

// required string error = 3;
inline bool MsgPlotResult::has_error() const {
  return _has_bit(2);
}
inline void MsgPlotResult::clear_error() {
  if (error_ != &_default_error_) {
    error_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& MsgPlotResult::error() const {
  return *error_;
}
inline void MsgPlotResult::set_error(const ::std::string& value) {
  _set_bit(2);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void MsgPlotResult::set_error(const char* value) {
  _set_bit(2);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void MsgPlotResult::set_error(const char* value, size_t size) {
  _set_bit(2);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgPlotResult::mutable_error() {
  _set_bit(2);
  if (error_ == &_default_error_) {
    error_ = new ::std::string;
  }
  return error_;
}

// -------------------------------------------------------------------

// MsgIndicator

// required string name = 1;
inline bool MsgIndicator::has_name() const {
  return _has_bit(0);
}
inline void MsgIndicator::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgIndicator::name() const {
  return *name_;
}
inline void MsgIndicator::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgIndicator::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgIndicator::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgIndicator::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// required float value = 2;
inline bool MsgIndicator::has_value() const {
  return _has_bit(1);
}
inline void MsgIndicator::clear_value() {
  value_ = 0;
  _clear_bit(1);
}
inline float MsgIndicator::value() const {
  return value_;
}
inline void MsgIndicator::set_value(float value) {
  _set_bit(1);
  value_ = value;
}

// -------------------------------------------------------------------

// MsgAarToClient_Content

// optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
inline bool MsgAarToClient_Content::has_aar_information() const {
  return _has_bit(0);
}
inline void MsgAarToClient_Content::clear_aar_information() {
  if (aar_information_ != NULL) aar_information_->::MsgsAarToClient::MsgAarInformation::Clear();
  _clear_bit(0);
}
inline const ::MsgsAarToClient::MsgAarInformation& MsgAarToClient_Content::aar_information() const {
  return aar_information_ != NULL ? *aar_information_ : *default_instance_->aar_information_;
}
inline ::MsgsAarToClient::MsgAarInformation* MsgAarToClient_Content::mutable_aar_information() {
  _set_bit(0);
  if (aar_information_ == NULL) aar_information_ = new ::MsgsAarToClient::MsgAarInformation;
  return aar_information_;
}

// optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
inline bool MsgAarToClient_Content::has_plot_result() const {
  return _has_bit(1);
}
inline void MsgAarToClient_Content::clear_plot_result() {
  if (plot_result_ != NULL) plot_result_->::MsgsAarToClient::MsgPlotResult::Clear();
  _clear_bit(1);
}
inline const ::MsgsAarToClient::MsgPlotResult& MsgAarToClient_Content::plot_result() const {
  return plot_result_ != NULL ? *plot_result_ : *default_instance_->plot_result_;
}
inline ::MsgsAarToClient::MsgPlotResult* MsgAarToClient_Content::mutable_plot_result() {
  _set_bit(1);
  if (plot_result_ == NULL) plot_result_ = new ::MsgsAarToClient::MsgPlotResult;
  return plot_result_;
}

// optional .MsgsAarToClient.MsgIndicator indicator = 3;
inline bool MsgAarToClient_Content::has_indicator() const {
  return _has_bit(2);
}
inline void MsgAarToClient_Content::clear_indicator() {
  if (indicator_ != NULL) indicator_->::MsgsAarToClient::MsgIndicator::Clear();
  _clear_bit(2);
}
inline const ::MsgsAarToClient::MsgIndicator& MsgAarToClient_Content::indicator() const {
  return indicator_ != NULL ? *indicator_ : *default_instance_->indicator_;
}
inline ::MsgsAarToClient::MsgIndicator* MsgAarToClient_Content::mutable_indicator() {
  _set_bit(2);
  if (indicator_ == NULL) indicator_ = new ::MsgsAarToClient::MsgIndicator;
  return indicator_;
}

// -------------------------------------------------------------------

// MsgAarToClient

// optional int32 context = 1;
inline bool MsgAarToClient::has_context() const {
  return _has_bit(0);
}
inline void MsgAarToClient::clear_context() {
  context_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgAarToClient::context() const {
  return context_;
}
inline void MsgAarToClient::set_context(::google::protobuf::int32 value) {
  _set_bit(0);
  context_ = value;
}

// optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
inline bool MsgAarToClient::has_message() const {
  return _has_bit(1);
}
inline void MsgAarToClient::clear_message() {
  if (message_ != NULL) message_->::MsgsAarToClient::MsgAarToClient_Content::Clear();
  _clear_bit(1);
}
inline const ::MsgsAarToClient::MsgAarToClient_Content& MsgAarToClient::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::MsgsAarToClient::MsgAarToClient_Content* MsgAarToClient::mutable_message() {
  _set_bit(1);
  if (message_ == NULL) message_ = new ::MsgsAarToClient::MsgAarToClient_Content;
  return message_;
}


}  // namespace MsgsAarToClient

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_AarToClient_2eproto__INCLUDED

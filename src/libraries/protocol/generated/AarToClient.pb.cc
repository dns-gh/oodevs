// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AarToClient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsAarToClient {

namespace {

const ::google::protobuf::Descriptor* MsgAarInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAarInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgPlotResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgPlotResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgIndicator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgIndicator_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAarToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAarToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgAarToClient_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgAarToClient_Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_AarToClient_2eproto() {
  protobuf_AddDesc_AarToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AarToClient.proto");
  GOOGLE_CHECK(file != NULL);
  MsgAarInformation_descriptor_ = file->message_type(0);
  static const int MsgAarInformation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarInformation, information_),
  };
  MsgAarInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAarInformation_descriptor_,
      MsgAarInformation::default_instance_,
      MsgAarInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAarInformation));
  MsgPlotResult_descriptor_ = file->message_type(1);
  static const int MsgPlotResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotResult, identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotResult, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotResult, error_),
  };
  MsgPlotResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgPlotResult_descriptor_,
      MsgPlotResult::default_instance_,
      MsgPlotResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgPlotResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgPlotResult));
  MsgIndicator_descriptor_ = file->message_type(2);
  static const int MsgIndicator_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIndicator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIndicator, value_),
  };
  MsgIndicator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgIndicator_descriptor_,
      MsgIndicator::default_instance_,
      MsgIndicator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIndicator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgIndicator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgIndicator));
  MsgAarToClient_descriptor_ = file->message_type(3);
  static const int MsgAarToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient, message_),
  };
  MsgAarToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAarToClient_descriptor_,
      MsgAarToClient::default_instance_,
      MsgAarToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAarToClient));
  MsgAarToClient_Content_descriptor_ = MsgAarToClient_descriptor_->nested_type(0);
  static const int MsgAarToClient_Content_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient_Content, aar_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient_Content, plot_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient_Content, indicator_),
  };
  MsgAarToClient_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgAarToClient_Content_descriptor_,
      MsgAarToClient_Content::default_instance_,
      MsgAarToClient_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgAarToClient_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgAarToClient_Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AarToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAarInformation_descriptor_, &MsgAarInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgPlotResult_descriptor_, &MsgPlotResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgIndicator_descriptor_, &MsgIndicator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAarToClient_descriptor_, &MsgAarToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgAarToClient_Content_descriptor_, &MsgAarToClient_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AarToClient_2eproto() {
  delete MsgAarInformation::default_instance_;
  delete MsgAarInformation_reflection_;
  delete MsgPlotResult::default_instance_;
  delete MsgPlotResult_reflection_;
  delete MsgIndicator::default_instance_;
  delete MsgIndicator_reflection_;
  delete MsgAarToClient::default_instance_;
  delete MsgAarToClient_reflection_;
  delete MsgAarToClient_Content::default_instance_;
  delete MsgAarToClient_Content_reflection_;
}

void protobuf_AddDesc_AarToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021AarToClient.proto\022\017MsgsAarToClient\"(\n\021"
    "MsgAarInformation\022\023\n\013information\030\001 \002(\t\"B"
    "\n\rMsgPlotResult\022\022\n\nidentifier\030\001 \002(\r\022\016\n\006v"
    "alues\030\002 \003(\002\022\r\n\005error\030\003 \002(\t\"+\n\014MsgIndicat"
    "or\022\014\n\004name\030\001 \002(\t\022\r\n\005value\030\002 \002(\002\"\216\002\n\016MsgA"
    "arToClient\022\022\n\007context\030\001 \001(\005:\0010\0228\n\007messag"
    "e\030\002 \001(\0132\'.MsgsAarToClient.MsgAarToClient"
    ".Content\032\255\001\n\007Content\022;\n\017aar_information\030"
    "\001 \001(\0132\".MsgsAarToClient.MsgAarInformatio"
    "n\0223\n\013plot_result\030\002 \001(\0132\036.MsgsAarToClient"
    ".MsgPlotResult\0220\n\tindicator\030\003 \001(\0132\035.Msgs"
    "AarToClient.MsgIndicator", 464);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AarToClient.proto", &protobuf_RegisterTypes);
  MsgAarInformation::default_instance_ = new MsgAarInformation();
  MsgPlotResult::default_instance_ = new MsgPlotResult();
  MsgIndicator::default_instance_ = new MsgIndicator();
  MsgAarToClient::default_instance_ = new MsgAarToClient();
  MsgAarToClient_Content::default_instance_ = new MsgAarToClient_Content();
  MsgAarInformation::default_instance_->InitAsDefaultInstance();
  MsgPlotResult::default_instance_->InitAsDefaultInstance();
  MsgIndicator::default_instance_->InitAsDefaultInstance();
  MsgAarToClient::default_instance_->InitAsDefaultInstance();
  MsgAarToClient_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AarToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AarToClient_2eproto {
  StaticDescriptorInitializer_AarToClient_2eproto() {
    protobuf_AddDesc_AarToClient_2eproto();
  }
} static_descriptor_initializer_AarToClient_2eproto_;


// ===================================================================

const ::std::string MsgAarInformation::_default_information_;
#ifndef _MSC_VER
const int MsgAarInformation::kInformationFieldNumber;
#endif  // !_MSC_VER

MsgAarInformation::MsgAarInformation() {
  SharedCtor();
}

void MsgAarInformation::InitAsDefaultInstance() {
}

MsgAarInformation::MsgAarInformation(const MsgAarInformation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAarInformation::SharedCtor() {
  _cached_size_ = 0;
  information_ = const_cast< ::std::string*>(&_default_information_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAarInformation::~MsgAarInformation() {
  SharedDtor();
}

void MsgAarInformation::SharedDtor() {
  if (information_ != &_default_information_) {
    delete information_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgAarInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAarInformation_descriptor_;
}

const MsgAarInformation& MsgAarInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AarToClient_2eproto();  return *default_instance_;
}

MsgAarInformation* MsgAarInformation::default_instance_ = NULL;

MsgAarInformation* MsgAarInformation::New() const {
  return new MsgAarInformation;
}

void MsgAarInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (information_ != &_default_information_) {
        information_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAarInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string information = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_information()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->information().data(), this->information().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAarInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAarInformation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string information = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->information(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAarInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string information = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->information().data(), this->information().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->information(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAarInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string information = 1;
    if (has_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->information());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAarInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAarInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAarInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAarInformation::MergeFrom(const MsgAarInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_information(from.information());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAarInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAarInformation::CopyFrom(const MsgAarInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAarInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgAarInformation::Swap(MsgAarInformation* other) {
  if (other != this) {
    std::swap(information_, other->information_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAarInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAarInformation_descriptor_;
  metadata.reflection = MsgAarInformation_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgPlotResult::_default_error_;
#ifndef _MSC_VER
const int MsgPlotResult::kIdentifierFieldNumber;
const int MsgPlotResult::kValuesFieldNumber;
const int MsgPlotResult::kErrorFieldNumber;
#endif  // !_MSC_VER

MsgPlotResult::MsgPlotResult() {
  SharedCtor();
}

void MsgPlotResult::InitAsDefaultInstance() {
}

MsgPlotResult::MsgPlotResult(const MsgPlotResult& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgPlotResult::SharedCtor() {
  _cached_size_ = 0;
  identifier_ = 0u;
  error_ = const_cast< ::std::string*>(&_default_error_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgPlotResult::~MsgPlotResult() {
  SharedDtor();
}

void MsgPlotResult::SharedDtor() {
  if (error_ != &_default_error_) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgPlotResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgPlotResult_descriptor_;
}

const MsgPlotResult& MsgPlotResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AarToClient_2eproto();  return *default_instance_;
}

MsgPlotResult* MsgPlotResult::default_instance_ = NULL;

MsgPlotResult* MsgPlotResult::New() const {
  return new MsgPlotResult;
}

void MsgPlotResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    identifier_ = 0u;
    if (_has_bit(2)) {
      if (error_ != &_default_error_) {
        error_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgPlotResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 identifier = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadUInt32(
              input, &identifier_));
        _set_bit(0);
        if (input->ExpectTag(21)) goto parse_values;
        break;
      }
      
      // repeated float values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_values:
        float value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &value));
        add_values(value);
        if (input->ExpectTag(21)) goto parse_values;
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }
      
      // required string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_error:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_error()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->error().data(), this->error().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgPlotResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgPlotResult::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required uint32 identifier = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->identifier(), output);
  }
  
  // repeated float values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->values(i), output);
  }
  
  // required string error = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgPlotResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 identifier = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->identifier(), target);
  }
  
  // repeated float values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->values(i), target);
  }
  
  // required string error = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgPlotResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 identifier = 1;
    if (has_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->identifier());
    }
    
    // required string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  // repeated float values = 2;
  {
    int data_size = 0;
    data_size = 4 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgPlotResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgPlotResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgPlotResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgPlotResult::MergeFrom(const MsgPlotResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_identifier(from.identifier());
    }
    if (from._has_bit(2)) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgPlotResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgPlotResult::CopyFrom(const MsgPlotResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPlotResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void MsgPlotResult::Swap(MsgPlotResult* other) {
  if (other != this) {
    std::swap(identifier_, other->identifier_);
    values_.Swap(&other->values_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgPlotResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgPlotResult_descriptor_;
  metadata.reflection = MsgPlotResult_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string MsgIndicator::_default_name_;
#ifndef _MSC_VER
const int MsgIndicator::kNameFieldNumber;
const int MsgIndicator::kValueFieldNumber;
#endif  // !_MSC_VER

MsgIndicator::MsgIndicator() {
  SharedCtor();
}

void MsgIndicator::InitAsDefaultInstance() {
}

MsgIndicator::MsgIndicator(const MsgIndicator& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgIndicator::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&_default_name_);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgIndicator::~MsgIndicator() {
  SharedDtor();
}

void MsgIndicator::SharedDtor() {
  if (name_ != &_default_name_) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgIndicator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgIndicator_descriptor_;
}

const MsgIndicator& MsgIndicator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AarToClient_2eproto();  return *default_instance_;
}

MsgIndicator* MsgIndicator::default_instance_ = NULL;

MsgIndicator* MsgIndicator::New() const {
  return new MsgIndicator;
}

void MsgIndicator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (name_ != &_default_name_) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->mutable_name()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->name().data(), this->name().length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }
      
      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          goto handle_uninterpreted;
        }
       parse_value:
        DO_(::google::protobuf::internal::WireFormatLite::ReadFloat(
              input, &value_));
        _set_bit(1);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgIndicator::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required float value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgIndicator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required float value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgIndicator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgIndicator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgIndicator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgIndicator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgIndicator::MergeFrom(const MsgIndicator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_name(from.name());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgIndicator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgIndicator::CopyFrom(const MsgIndicator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgIndicator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgIndicator::Swap(MsgIndicator* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgIndicator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgIndicator_descriptor_;
  metadata.reflection = MsgIndicator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgAarToClient_Content::kAarInformationFieldNumber;
const int MsgAarToClient_Content::kPlotResultFieldNumber;
const int MsgAarToClient_Content::kIndicatorFieldNumber;
#endif  // !_MSC_VER

MsgAarToClient_Content::MsgAarToClient_Content() {
  SharedCtor();
}

void MsgAarToClient_Content::InitAsDefaultInstance() {
  aar_information_ = const_cast< ::MsgsAarToClient::MsgAarInformation*>(&::MsgsAarToClient::MsgAarInformation::default_instance());
  plot_result_ = const_cast< ::MsgsAarToClient::MsgPlotResult*>(&::MsgsAarToClient::MsgPlotResult::default_instance());
  indicator_ = const_cast< ::MsgsAarToClient::MsgIndicator*>(&::MsgsAarToClient::MsgIndicator::default_instance());
}

MsgAarToClient_Content::MsgAarToClient_Content(const MsgAarToClient_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAarToClient_Content::SharedCtor() {
  _cached_size_ = 0;
  aar_information_ = NULL;
  plot_result_ = NULL;
  indicator_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAarToClient_Content::~MsgAarToClient_Content() {
  SharedDtor();
}

void MsgAarToClient_Content::SharedDtor() {
  if (this != default_instance_) {
    delete aar_information_;
    delete plot_result_;
    delete indicator_;
  }
}

const ::google::protobuf::Descriptor* MsgAarToClient_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAarToClient_Content_descriptor_;
}

const MsgAarToClient_Content& MsgAarToClient_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AarToClient_2eproto();  return *default_instance_;
}

MsgAarToClient_Content* MsgAarToClient_Content::default_instance_ = NULL;

MsgAarToClient_Content* MsgAarToClient_Content::New() const {
  return new MsgAarToClient_Content;
}

void MsgAarToClient_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (aar_information_ != NULL) aar_information_->::MsgsAarToClient::MsgAarInformation::Clear();
    }
    if (_has_bit(1)) {
      if (plot_result_ != NULL) plot_result_->::MsgsAarToClient::MsgPlotResult::Clear();
    }
    if (_has_bit(2)) {
      if (indicator_ != NULL) indicator_->::MsgsAarToClient::MsgIndicator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAarToClient_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_aar_information()));
        if (input->ExpectTag(18)) goto parse_plot_result;
        break;
      }
      
      // optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_plot_result:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_plot_result()));
        if (input->ExpectTag(26)) goto parse_indicator;
        break;
      }
      
      // optional .MsgsAarToClient.MsgIndicator indicator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_indicator:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_indicator()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAarToClient_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAarToClient_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->aar_information(), output);
  }
  
  // optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->plot_result(), output);
  }
  
  // optional .MsgsAarToClient.MsgIndicator indicator = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->indicator(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAarToClient_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aar_information(), target);
  }
  
  // optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plot_result(), target);
  }
  
  // optional .MsgsAarToClient.MsgIndicator indicator = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->indicator(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAarToClient_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsAarToClient.MsgAarInformation aar_information = 1;
    if (has_aar_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aar_information());
    }
    
    // optional .MsgsAarToClient.MsgPlotResult plot_result = 2;
    if (has_plot_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plot_result());
    }
    
    // optional .MsgsAarToClient.MsgIndicator indicator = 3;
    if (has_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->indicator());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAarToClient_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAarToClient_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAarToClient_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAarToClient_Content::MergeFrom(const MsgAarToClient_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_aar_information()->::MsgsAarToClient::MsgAarInformation::MergeFrom(from.aar_information());
    }
    if (from._has_bit(1)) {
      mutable_plot_result()->::MsgsAarToClient::MsgPlotResult::MergeFrom(from.plot_result());
    }
    if (from._has_bit(2)) {
      mutable_indicator()->::MsgsAarToClient::MsgIndicator::MergeFrom(from.indicator());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAarToClient_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAarToClient_Content::CopyFrom(const MsgAarToClient_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAarToClient_Content::IsInitialized() const {
  
  if (has_aar_information()) {
    if (!this->aar_information().IsInitialized()) return false;
  }
  if (has_plot_result()) {
    if (!this->plot_result().IsInitialized()) return false;
  }
  if (has_indicator()) {
    if (!this->indicator().IsInitialized()) return false;
  }
  return true;
}

void MsgAarToClient_Content::Swap(MsgAarToClient_Content* other) {
  if (other != this) {
    std::swap(aar_information_, other->aar_information_);
    std::swap(plot_result_, other->plot_result_);
    std::swap(indicator_, other->indicator_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAarToClient_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAarToClient_Content_descriptor_;
  metadata.reflection = MsgAarToClient_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgAarToClient::kContextFieldNumber;
const int MsgAarToClient::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgAarToClient::MsgAarToClient() {
  SharedCtor();
}

void MsgAarToClient::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsAarToClient::MsgAarToClient_Content*>(&::MsgsAarToClient::MsgAarToClient_Content::default_instance());
}

MsgAarToClient::MsgAarToClient(const MsgAarToClient& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgAarToClient::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgAarToClient::~MsgAarToClient() {
  SharedDtor();
}

void MsgAarToClient::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgAarToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgAarToClient_descriptor_;
}

const MsgAarToClient& MsgAarToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AarToClient_2eproto();  return *default_instance_;
}

MsgAarToClient* MsgAarToClient::default_instance_ = NULL;

MsgAarToClient* MsgAarToClient::New() const {
  return new MsgAarToClient;
}

void MsgAarToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::MsgsAarToClient::MsgAarToClient_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgAarToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 context = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgAarToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgAarToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgAarToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgAarToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 context = 1 [default = 0];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // optional .MsgsAarToClient.MsgAarToClient.Content message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgAarToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgAarToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgAarToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgAarToClient::MergeFrom(const MsgAarToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_message()->::MsgsAarToClient::MsgAarToClient_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgAarToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgAarToClient::CopyFrom(const MsgAarToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgAarToClient::IsInitialized() const {
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void MsgAarToClient::Swap(MsgAarToClient* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgAarToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgAarToClient_descriptor_;
  metadata.reflection = MsgAarToClient_reflection_;
  return metadata;
}


}  // namespace MsgsAarToClient

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReplayToClient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsReplayToClient {

namespace {

const ::google::protobuf::Descriptor* MsgControlReplayInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlReplayInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControlSkipToTickAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControlSkipToTickAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReplayToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReplayToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgReplayToClient_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgReplayToClient_Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ReplayToClient_2eproto() {
  protobuf_AddDesc_ReplayToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ReplayToClient.proto");
  GOOGLE_CHECK(file != NULL);
  MsgControlReplayInformation_descriptor_ = file->message_type(0);
  static const int MsgControlReplayInformation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, current_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, initial_date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, tick_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, time_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, tick_count_),
  };
  MsgControlReplayInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlReplayInformation_descriptor_,
      MsgControlReplayInformation::default_instance_,
      MsgControlReplayInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlReplayInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlReplayInformation));
  MsgControlSkipToTickAck_descriptor_ = file->message_type(1);
  static const int MsgControlSkipToTickAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSkipToTickAck, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSkipToTickAck, error_code_),
  };
  MsgControlSkipToTickAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControlSkipToTickAck_descriptor_,
      MsgControlSkipToTickAck::default_instance_,
      MsgControlSkipToTickAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSkipToTickAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControlSkipToTickAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControlSkipToTickAck));
  MsgReplayToClient_descriptor_ = file->message_type(2);
  static const int MsgReplayToClient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient, message_),
  };
  MsgReplayToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReplayToClient_descriptor_,
      MsgReplayToClient::default_instance_,
      MsgReplayToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReplayToClient));
  MsgReplayToClient_Content_descriptor_ = MsgReplayToClient_descriptor_->nested_type(0);
  static const int MsgReplayToClient_Content_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_replay_information_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_skip_to_tick_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_stop_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_pause_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_resume_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, control_change_time_factor_ack_),
  };
  MsgReplayToClient_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgReplayToClient_Content_descriptor_,
      MsgReplayToClient_Content::default_instance_,
      MsgReplayToClient_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgReplayToClient_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgReplayToClient_Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ReplayToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlReplayInformation_descriptor_, &MsgControlReplayInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControlSkipToTickAck_descriptor_, &MsgControlSkipToTickAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReplayToClient_descriptor_, &MsgReplayToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgReplayToClient_Content_descriptor_, &MsgReplayToClient_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ReplayToClient_2eproto() {
  delete MsgControlReplayInformation::default_instance_;
  delete MsgControlReplayInformation_reflection_;
  delete MsgControlSkipToTickAck::default_instance_;
  delete MsgControlSkipToTickAck_reflection_;
  delete MsgReplayToClient::default_instance_;
  delete MsgReplayToClient_reflection_;
  delete MsgReplayToClient_Content::default_instance_;
  delete MsgReplayToClient_Content_reflection_;
}

void protobuf_AddDesc_ReplayToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Common::protobuf_AddDesc_Common_2eproto();
  ::MsgsSimToClient::protobuf_AddDesc_SimToClient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ReplayToClient.proto\022\022MsgsReplayToClie"
    "nt\032\014Common.proto\032\021SimToClient.proto\"\370\001\n\033"
    "MsgControlReplayInformation\022\024\n\014current_t"
    "ick\030\001 \002(\005\022.\n\021initial_date_time\030\002 \002(\0132\023.C"
    "ommon.MsgDateTime\022&\n\tdate_time\030\003 \002(\0132\023.C"
    "ommon.MsgDateTime\022\025\n\rtick_duration\030\004 \002(\005"
    "\022\023\n\013time_factor\030\005 \002(\005\022+\n\006status\030\006 \002(\0162\033."
    "Common.EnumSimulationState\022\022\n\ntick_count"
    "\030\007 \002(\005\"b\n\027MsgControlSkipToTickAck\022\014\n\004tic"
    "k\030\001 \002(\005\0229\n\nerror_code\030\002 \002(\0162%.MsgsSimToC"
    "lient.ControlAck.ErrorCode\"\257\004\n\021MsgReplay"
    "ToClient\022\022\n\007context\030\001 \001(\005:\0010\022>\n\007message\030"
    "\002 \002(\0132-.MsgsReplayToClient.MsgReplayToCl"
    "ient.Content\032\305\003\n\007Content\022S\n\032control_repl"
    "ay_information\030\001 \001(\0132/.MsgsReplayToClien"
    "t.MsgControlReplayInformation\022M\n\030control"
    "_skip_to_tick_ack\030\002 \001(\0132+.MsgsReplayToCl"
    "ient.MsgControlSkipToTickAck\022<\n\020control_"
    "stop_ack\030\003 \001(\0132\".MsgsSimToClient.MsgCont"
    "rolStopAck\022>\n\021control_pause_ack\030\004 \001(\0132#."
    "MsgsSimToClient.MsgControlPauseAck\022@\n\022co"
    "ntrol_resume_ack\030\005 \001(\0132$.MsgsSimToClient"
    ".MsgControlResumeAck\022V\n\036control_change_t"
    "ime_factor_ack\030\006 \001(\0132..MsgsSimToClient.M"
    "sgControlChangeTimeFactorAck", 988);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReplayToClient.proto", &protobuf_RegisterTypes);
  MsgControlReplayInformation::default_instance_ = new MsgControlReplayInformation();
  MsgControlSkipToTickAck::default_instance_ = new MsgControlSkipToTickAck();
  MsgReplayToClient::default_instance_ = new MsgReplayToClient();
  MsgReplayToClient_Content::default_instance_ = new MsgReplayToClient_Content();
  MsgControlReplayInformation::default_instance_->InitAsDefaultInstance();
  MsgControlSkipToTickAck::default_instance_->InitAsDefaultInstance();
  MsgReplayToClient::default_instance_->InitAsDefaultInstance();
  MsgReplayToClient_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ReplayToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ReplayToClient_2eproto {
  StaticDescriptorInitializer_ReplayToClient_2eproto() {
    protobuf_AddDesc_ReplayToClient_2eproto();
  }
} static_descriptor_initializer_ReplayToClient_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MsgControlReplayInformation::kCurrentTickFieldNumber;
const int MsgControlReplayInformation::kInitialDateTimeFieldNumber;
const int MsgControlReplayInformation::kDateTimeFieldNumber;
const int MsgControlReplayInformation::kTickDurationFieldNumber;
const int MsgControlReplayInformation::kTimeFactorFieldNumber;
const int MsgControlReplayInformation::kStatusFieldNumber;
const int MsgControlReplayInformation::kTickCountFieldNumber;
#endif  // !_MSC_VER

MsgControlReplayInformation::MsgControlReplayInformation() {
  SharedCtor();
}

void MsgControlReplayInformation::InitAsDefaultInstance() {
  initial_date_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
  date_time_ = const_cast< ::Common::MsgDateTime*>(&::Common::MsgDateTime::default_instance());
}

MsgControlReplayInformation::MsgControlReplayInformation(const MsgControlReplayInformation& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlReplayInformation::SharedCtor() {
  _cached_size_ = 0;
  current_tick_ = 0;
  initial_date_time_ = NULL;
  date_time_ = NULL;
  tick_duration_ = 0;
  time_factor_ = 0;
  status_ = 0;
  tick_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlReplayInformation::~MsgControlReplayInformation() {
  SharedDtor();
}

void MsgControlReplayInformation::SharedDtor() {
  if (this != default_instance_) {
    delete initial_date_time_;
    delete date_time_;
  }
}

const ::google::protobuf::Descriptor* MsgControlReplayInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlReplayInformation_descriptor_;
}

const MsgControlReplayInformation& MsgControlReplayInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReplayToClient_2eproto();  return *default_instance_;
}

MsgControlReplayInformation* MsgControlReplayInformation::default_instance_ = NULL;

MsgControlReplayInformation* MsgControlReplayInformation::New() const {
  return new MsgControlReplayInformation;
}

void MsgControlReplayInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_tick_ = 0;
    if (_has_bit(1)) {
      if (initial_date_time_ != NULL) initial_date_time_->::Common::MsgDateTime::Clear();
    }
    if (_has_bit(2)) {
      if (date_time_ != NULL) date_time_->::Common::MsgDateTime::Clear();
    }
    tick_duration_ = 0;
    time_factor_ = 0;
    status_ = 0;
    tick_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlReplayInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &current_tick_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_initial_date_time;
        break;
      }
      
      // required .Common.MsgDateTime initial_date_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_initial_date_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_initial_date_time()));
        if (input->ExpectTag(26)) goto parse_date_time;
        break;
      }
      
      // required .Common.MsgDateTime date_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_date_time:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_date_time()));
        if (input->ExpectTag(32)) goto parse_tick_duration;
        break;
      }
      
      // required int32 tick_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_duration:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_duration_));
        _set_bit(3);
        if (input->ExpectTag(40)) goto parse_time_factor;
        break;
      }
      
      // required int32 time_factor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_time_factor:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &time_factor_));
        _set_bit(4);
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }
      
      // required .Common.EnumSimulationState status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_status:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (Common::EnumSimulationState_IsValid(value)) {
          set_status(static_cast< Common::EnumSimulationState >(value));
        } else {
          mutable_unknown_fields()->AddVarint(6, value);
        }
        if (input->ExpectTag(56)) goto parse_tick_count;
        break;
      }
      
      // required int32 tick_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_tick_count:
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_count_));
        _set_bit(6);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlReplayInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlReplayInformation::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_tick(), output);
  }
  
  // required .Common.MsgDateTime initial_date_time = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->initial_date_time(), output);
  }
  
  // required .Common.MsgDateTime date_time = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->date_time(), output);
  }
  
  // required int32 tick_duration = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tick_duration(), output);
  }
  
  // required int32 time_factor = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_factor(), output);
  }
  
  // required .Common.EnumSimulationState status = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }
  
  // required int32 tick_count = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tick_count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlReplayInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 current_tick = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_tick(), target);
  }
  
  // required .Common.MsgDateTime initial_date_time = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->initial_date_time(), target);
  }
  
  // required .Common.MsgDateTime date_time = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->date_time(), target);
  }
  
  // required int32 tick_duration = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tick_duration(), target);
  }
  
  // required int32 time_factor = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_factor(), target);
  }
  
  // required .Common.EnumSimulationState status = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }
  
  // required int32 tick_count = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tick_count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlReplayInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_tick = 1;
    if (has_current_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_tick());
    }
    
    // required .Common.MsgDateTime initial_date_time = 2;
    if (has_initial_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial_date_time());
    }
    
    // required .Common.MsgDateTime date_time = 3;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->date_time());
    }
    
    // required int32 tick_duration = 4;
    if (has_tick_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_duration());
    }
    
    // required int32 time_factor = 5;
    if (has_time_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_factor());
    }
    
    // required .Common.EnumSimulationState status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // required int32 tick_count = 7;
    if (has_tick_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick_count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlReplayInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlReplayInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlReplayInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlReplayInformation::MergeFrom(const MsgControlReplayInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_current_tick(from.current_tick());
    }
    if (from._has_bit(1)) {
      mutable_initial_date_time()->::Common::MsgDateTime::MergeFrom(from.initial_date_time());
    }
    if (from._has_bit(2)) {
      mutable_date_time()->::Common::MsgDateTime::MergeFrom(from.date_time());
    }
    if (from._has_bit(3)) {
      set_tick_duration(from.tick_duration());
    }
    if (from._has_bit(4)) {
      set_time_factor(from.time_factor());
    }
    if (from._has_bit(5)) {
      set_status(from.status());
    }
    if (from._has_bit(6)) {
      set_tick_count(from.tick_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlReplayInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlReplayInformation::CopyFrom(const MsgControlReplayInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlReplayInformation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  if (has_initial_date_time()) {
    if (!this->initial_date_time().IsInitialized()) return false;
  }
  if (has_date_time()) {
    if (!this->date_time().IsInitialized()) return false;
  }
  return true;
}

void MsgControlReplayInformation::Swap(MsgControlReplayInformation* other) {
  if (other != this) {
    std::swap(current_tick_, other->current_tick_);
    std::swap(initial_date_time_, other->initial_date_time_);
    std::swap(date_time_, other->date_time_);
    std::swap(tick_duration_, other->tick_duration_);
    std::swap(time_factor_, other->time_factor_);
    std::swap(status_, other->status_);
    std::swap(tick_count_, other->tick_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlReplayInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlReplayInformation_descriptor_;
  metadata.reflection = MsgControlReplayInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControlSkipToTickAck::kTickFieldNumber;
const int MsgControlSkipToTickAck::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

MsgControlSkipToTickAck::MsgControlSkipToTickAck() {
  SharedCtor();
}

void MsgControlSkipToTickAck::InitAsDefaultInstance() {
}

MsgControlSkipToTickAck::MsgControlSkipToTickAck(const MsgControlSkipToTickAck& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgControlSkipToTickAck::SharedCtor() {
  _cached_size_ = 0;
  tick_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControlSkipToTickAck::~MsgControlSkipToTickAck() {
  SharedDtor();
}

void MsgControlSkipToTickAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgControlSkipToTickAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControlSkipToTickAck_descriptor_;
}

const MsgControlSkipToTickAck& MsgControlSkipToTickAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReplayToClient_2eproto();  return *default_instance_;
}

MsgControlSkipToTickAck* MsgControlSkipToTickAck::default_instance_ = NULL;

MsgControlSkipToTickAck* MsgControlSkipToTickAck::New() const {
  return new MsgControlSkipToTickAck;
}

void MsgControlSkipToTickAck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tick_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControlSkipToTickAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &tick_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }
      
      // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_error_code:
        int value;
        DO_(::google::protobuf::internal::WireFormatLite::ReadEnum(input, &value));
        if (::MsgsSimToClient::ControlAck_ErrorCode_IsValid(value)) {
          set_error_code(static_cast< ::MsgsSimToClient::ControlAck_ErrorCode >(value));
        } else {
          mutable_unknown_fields()->AddVarint(2, value);
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControlSkipToTickAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgControlSkipToTickAck::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 tick = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tick(), output);
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControlSkipToTickAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tick = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tick(), target);
  }
  
  // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error_code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControlSkipToTickAck::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tick = 1;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
    // required .MsgsSimToClient.ControlAck.ErrorCode error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgControlSkipToTickAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControlSkipToTickAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControlSkipToTickAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControlSkipToTickAck::MergeFrom(const MsgControlSkipToTickAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_tick(from.tick());
    }
    if (from._has_bit(1)) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControlSkipToTickAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControlSkipToTickAck::CopyFrom(const MsgControlSkipToTickAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControlSkipToTickAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MsgControlSkipToTickAck::Swap(MsgControlSkipToTickAck* other) {
  if (other != this) {
    std::swap(tick_, other->tick_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControlSkipToTickAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControlSkipToTickAck_descriptor_;
  metadata.reflection = MsgControlSkipToTickAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgReplayToClient_Content::kControlReplayInformationFieldNumber;
const int MsgReplayToClient_Content::kControlSkipToTickAckFieldNumber;
const int MsgReplayToClient_Content::kControlStopAckFieldNumber;
const int MsgReplayToClient_Content::kControlPauseAckFieldNumber;
const int MsgReplayToClient_Content::kControlResumeAckFieldNumber;
const int MsgReplayToClient_Content::kControlChangeTimeFactorAckFieldNumber;
#endif  // !_MSC_VER

MsgReplayToClient_Content::MsgReplayToClient_Content() {
  SharedCtor();
}

void MsgReplayToClient_Content::InitAsDefaultInstance() {
  control_replay_information_ = const_cast< ::MsgsReplayToClient::MsgControlReplayInformation*>(&::MsgsReplayToClient::MsgControlReplayInformation::default_instance());
  control_skip_to_tick_ack_ = const_cast< ::MsgsReplayToClient::MsgControlSkipToTickAck*>(&::MsgsReplayToClient::MsgControlSkipToTickAck::default_instance());
  control_stop_ack_ = const_cast< ::MsgsSimToClient::MsgControlStopAck*>(&::MsgsSimToClient::MsgControlStopAck::default_instance());
  control_pause_ack_ = const_cast< ::MsgsSimToClient::MsgControlPauseAck*>(&::MsgsSimToClient::MsgControlPauseAck::default_instance());
  control_resume_ack_ = const_cast< ::MsgsSimToClient::MsgControlResumeAck*>(&::MsgsSimToClient::MsgControlResumeAck::default_instance());
  control_change_time_factor_ack_ = const_cast< ::MsgsSimToClient::MsgControlChangeTimeFactorAck*>(&::MsgsSimToClient::MsgControlChangeTimeFactorAck::default_instance());
}

MsgReplayToClient_Content::MsgReplayToClient_Content(const MsgReplayToClient_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReplayToClient_Content::SharedCtor() {
  _cached_size_ = 0;
  control_replay_information_ = NULL;
  control_skip_to_tick_ack_ = NULL;
  control_stop_ack_ = NULL;
  control_pause_ack_ = NULL;
  control_resume_ack_ = NULL;
  control_change_time_factor_ack_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReplayToClient_Content::~MsgReplayToClient_Content() {
  SharedDtor();
}

void MsgReplayToClient_Content::SharedDtor() {
  if (this != default_instance_) {
    delete control_replay_information_;
    delete control_skip_to_tick_ack_;
    delete control_stop_ack_;
    delete control_pause_ack_;
    delete control_resume_ack_;
    delete control_change_time_factor_ack_;
  }
}

const ::google::protobuf::Descriptor* MsgReplayToClient_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReplayToClient_Content_descriptor_;
}

const MsgReplayToClient_Content& MsgReplayToClient_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReplayToClient_2eproto();  return *default_instance_;
}

MsgReplayToClient_Content* MsgReplayToClient_Content::default_instance_ = NULL;

MsgReplayToClient_Content* MsgReplayToClient_Content::New() const {
  return new MsgReplayToClient_Content;
}

void MsgReplayToClient_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (control_replay_information_ != NULL) control_replay_information_->::MsgsReplayToClient::MsgControlReplayInformation::Clear();
    }
    if (_has_bit(1)) {
      if (control_skip_to_tick_ack_ != NULL) control_skip_to_tick_ack_->::MsgsReplayToClient::MsgControlSkipToTickAck::Clear();
    }
    if (_has_bit(2)) {
      if (control_stop_ack_ != NULL) control_stop_ack_->::MsgsSimToClient::MsgControlStopAck::Clear();
    }
    if (_has_bit(3)) {
      if (control_pause_ack_ != NULL) control_pause_ack_->::MsgsSimToClient::MsgControlPauseAck::Clear();
    }
    if (_has_bit(4)) {
      if (control_resume_ack_ != NULL) control_resume_ack_->::MsgsSimToClient::MsgControlResumeAck::Clear();
    }
    if (_has_bit(5)) {
      if (control_change_time_factor_ack_ != NULL) control_change_time_factor_ack_->::MsgsSimToClient::MsgControlChangeTimeFactorAck::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReplayToClient_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_replay_information()));
        if (input->ExpectTag(18)) goto parse_control_skip_to_tick_ack;
        break;
      }
      
      // optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_skip_to_tick_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_skip_to_tick_ack()));
        if (input->ExpectTag(26)) goto parse_control_stop_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_stop_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_stop_ack()));
        if (input->ExpectTag(34)) goto parse_control_pause_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_pause_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_pause_ack()));
        if (input->ExpectTag(42)) goto parse_control_resume_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_resume_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_resume_ack()));
        if (input->ExpectTag(50)) goto parse_control_change_time_factor_ack;
        break;
      }
      
      // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_control_change_time_factor_ack:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_control_change_time_factor_ack()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReplayToClient_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReplayToClient_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->control_replay_information(), output);
  }
  
  // optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->control_skip_to_tick_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      3, this->control_stop_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      4, this->control_pause_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      5, this->control_resume_ack(), output);
  }
  
  // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      6, this->control_change_time_factor_ack(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReplayToClient_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->control_replay_information(), target);
  }
  
  // optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->control_skip_to_tick_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->control_stop_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->control_pause_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->control_resume_ack(), target);
  }
  
  // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->control_change_time_factor_ack(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReplayToClient_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsReplayToClient.MsgControlReplayInformation control_replay_information = 1;
    if (has_control_replay_information()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_replay_information());
    }
    
    // optional .MsgsReplayToClient.MsgControlSkipToTickAck control_skip_to_tick_ack = 2;
    if (has_control_skip_to_tick_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_skip_to_tick_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlStopAck control_stop_ack = 3;
    if (has_control_stop_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_stop_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlPauseAck control_pause_ack = 4;
    if (has_control_pause_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_pause_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlResumeAck control_resume_ack = 5;
    if (has_control_resume_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_resume_ack());
    }
    
    // optional .MsgsSimToClient.MsgControlChangeTimeFactorAck control_change_time_factor_ack = 6;
    if (has_control_change_time_factor_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_change_time_factor_ack());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReplayToClient_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReplayToClient_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReplayToClient_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReplayToClient_Content::MergeFrom(const MsgReplayToClient_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_control_replay_information()->::MsgsReplayToClient::MsgControlReplayInformation::MergeFrom(from.control_replay_information());
    }
    if (from._has_bit(1)) {
      mutable_control_skip_to_tick_ack()->::MsgsReplayToClient::MsgControlSkipToTickAck::MergeFrom(from.control_skip_to_tick_ack());
    }
    if (from._has_bit(2)) {
      mutable_control_stop_ack()->::MsgsSimToClient::MsgControlStopAck::MergeFrom(from.control_stop_ack());
    }
    if (from._has_bit(3)) {
      mutable_control_pause_ack()->::MsgsSimToClient::MsgControlPauseAck::MergeFrom(from.control_pause_ack());
    }
    if (from._has_bit(4)) {
      mutable_control_resume_ack()->::MsgsSimToClient::MsgControlResumeAck::MergeFrom(from.control_resume_ack());
    }
    if (from._has_bit(5)) {
      mutable_control_change_time_factor_ack()->::MsgsSimToClient::MsgControlChangeTimeFactorAck::MergeFrom(from.control_change_time_factor_ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReplayToClient_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReplayToClient_Content::CopyFrom(const MsgReplayToClient_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReplayToClient_Content::IsInitialized() const {
  
  if (has_control_replay_information()) {
    if (!this->control_replay_information().IsInitialized()) return false;
  }
  if (has_control_skip_to_tick_ack()) {
    if (!this->control_skip_to_tick_ack().IsInitialized()) return false;
  }
  if (has_control_stop_ack()) {
    if (!this->control_stop_ack().IsInitialized()) return false;
  }
  if (has_control_pause_ack()) {
    if (!this->control_pause_ack().IsInitialized()) return false;
  }
  if (has_control_resume_ack()) {
    if (!this->control_resume_ack().IsInitialized()) return false;
  }
  if (has_control_change_time_factor_ack()) {
    if (!this->control_change_time_factor_ack().IsInitialized()) return false;
  }
  return true;
}

void MsgReplayToClient_Content::Swap(MsgReplayToClient_Content* other) {
  if (other != this) {
    std::swap(control_replay_information_, other->control_replay_information_);
    std::swap(control_skip_to_tick_ack_, other->control_skip_to_tick_ack_);
    std::swap(control_stop_ack_, other->control_stop_ack_);
    std::swap(control_pause_ack_, other->control_pause_ack_);
    std::swap(control_resume_ack_, other->control_resume_ack_);
    std::swap(control_change_time_factor_ack_, other->control_change_time_factor_ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReplayToClient_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReplayToClient_Content_descriptor_;
  metadata.reflection = MsgReplayToClient_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgReplayToClient::kContextFieldNumber;
const int MsgReplayToClient::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgReplayToClient::MsgReplayToClient() {
  SharedCtor();
}

void MsgReplayToClient::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsReplayToClient::MsgReplayToClient_Content*>(&::MsgsReplayToClient::MsgReplayToClient_Content::default_instance());
}

MsgReplayToClient::MsgReplayToClient(const MsgReplayToClient& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgReplayToClient::SharedCtor() {
  _cached_size_ = 0;
  context_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgReplayToClient::~MsgReplayToClient() {
  SharedDtor();
}

void MsgReplayToClient::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgReplayToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgReplayToClient_descriptor_;
}

const MsgReplayToClient& MsgReplayToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ReplayToClient_2eproto();  return *default_instance_;
}

MsgReplayToClient* MsgReplayToClient::default_instance_ = NULL;

MsgReplayToClient* MsgReplayToClient::New() const {
  return new MsgReplayToClient;
}

void MsgReplayToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    context_ = 0;
    if (_has_bit(1)) {
      if (message_ != NULL) message_->::MsgsReplayToClient::MsgReplayToClient_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgReplayToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 context = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadInt32(
              input, &context_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }
      
      // required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_message:
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgReplayToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgReplayToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->context(), output);
  }
  
  // required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      2, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgReplayToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 context = 1 [default = 0];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->context(), target);
  }
  
  // required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgReplayToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 context = 1 [default = 0];
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context());
    }
    
    // required .MsgsReplayToClient.MsgReplayToClient.Content message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgReplayToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgReplayToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgReplayToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgReplayToClient::MergeFrom(const MsgReplayToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_context(from.context());
    }
    if (from._has_bit(1)) {
      mutable_message()->::MsgsReplayToClient::MsgReplayToClient_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgReplayToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgReplayToClient::CopyFrom(const MsgReplayToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgReplayToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  if (has_message()) {
    if (!this->message().IsInitialized()) return false;
  }
  return true;
}

void MsgReplayToClient::Swap(MsgReplayToClient* other) {
  if (other != this) {
    std::swap(context_, other->context_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgReplayToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgReplayToClient_descriptor_;
  metadata.reflection = MsgReplayToClient_reflection_;
  return metadata;
}


}  // namespace MsgsReplayToClient

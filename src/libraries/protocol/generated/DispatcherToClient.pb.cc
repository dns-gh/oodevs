// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DispatcherToClient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>

namespace MsgsDispatcherToClient {

namespace {

const ::google::protobuf::Descriptor* MsgServicesDescription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgServicesDescription_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDispatcherToClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDispatcherToClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDispatcherToClient_Content_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDispatcherToClient_Content_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DispatcherToClient_2eproto() {
  protobuf_AddDesc_DispatcherToClient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DispatcherToClient.proto");
  GOOGLE_CHECK(file != NULL);
  MsgServicesDescription_descriptor_ = file->message_type(0);
  static const int MsgServicesDescription_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServicesDescription, services_),
  };
  MsgServicesDescription_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgServicesDescription_descriptor_,
      MsgServicesDescription::default_instance_,
      MsgServicesDescription_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServicesDescription, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgServicesDescription, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgServicesDescription));
  MsgDispatcherToClient_descriptor_ = file->message_type(1);
  static const int MsgDispatcherToClient_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient, message_),
  };
  MsgDispatcherToClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDispatcherToClient_descriptor_,
      MsgDispatcherToClient::default_instance_,
      MsgDispatcherToClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDispatcherToClient));
  MsgDispatcherToClient_Content_descriptor_ = MsgDispatcherToClient_descriptor_->nested_type(0);
  static const int MsgDispatcherToClient_Content_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient_Content, services_description_),
  };
  MsgDispatcherToClient_Content_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDispatcherToClient_Content_descriptor_,
      MsgDispatcherToClient_Content::default_instance_,
      MsgDispatcherToClient_Content_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient_Content, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDispatcherToClient_Content, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDispatcherToClient_Content));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DispatcherToClient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgServicesDescription_descriptor_, &MsgServicesDescription::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDispatcherToClient_descriptor_, &MsgDispatcherToClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDispatcherToClient_Content_descriptor_, &MsgDispatcherToClient_Content::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DispatcherToClient_2eproto() {
  delete MsgServicesDescription::default_instance_;
  delete MsgServicesDescription_reflection_;
  delete MsgDispatcherToClient::default_instance_;
  delete MsgDispatcherToClient_reflection_;
  delete MsgDispatcherToClient_Content::default_instance_;
  delete MsgDispatcherToClient_Content_reflection_;
}

void protobuf_AddDesc_DispatcherToClient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030DispatcherToClient.proto\022\026MsgsDispatch"
    "erToClient\"*\n\026MsgServicesDescription\022\020\n\010"
    "services\030\001 \003(\t\"\270\001\n\025MsgDispatcherToClient"
    "\022F\n\007message\030\001 \002(\01325.MsgsDispatcherToClie"
    "nt.MsgDispatcherToClient.Content\032W\n\007Cont"
    "ent\022L\n\024services_description\030\001 \001(\0132..Msgs"
    "DispatcherToClient.MsgServicesDescriptio"
    "n", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DispatcherToClient.proto", &protobuf_RegisterTypes);
  MsgServicesDescription::default_instance_ = new MsgServicesDescription();
  MsgDispatcherToClient::default_instance_ = new MsgDispatcherToClient();
  MsgDispatcherToClient_Content::default_instance_ = new MsgDispatcherToClient_Content();
  MsgServicesDescription::default_instance_->InitAsDefaultInstance();
  MsgDispatcherToClient::default_instance_->InitAsDefaultInstance();
  MsgDispatcherToClient_Content::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DispatcherToClient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DispatcherToClient_2eproto {
  StaticDescriptorInitializer_DispatcherToClient_2eproto() {
    protobuf_AddDesc_DispatcherToClient_2eproto();
  }
} static_descriptor_initializer_DispatcherToClient_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MsgServicesDescription::kServicesFieldNumber;
#endif  // !_MSC_VER

MsgServicesDescription::MsgServicesDescription() {
  SharedCtor();
}

void MsgServicesDescription::InitAsDefaultInstance() {
}

MsgServicesDescription::MsgServicesDescription(const MsgServicesDescription& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgServicesDescription::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgServicesDescription::~MsgServicesDescription() {
  SharedDtor();
}

void MsgServicesDescription::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* MsgServicesDescription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgServicesDescription_descriptor_;
}

const MsgServicesDescription& MsgServicesDescription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DispatcherToClient_2eproto();  return *default_instance_;
}

MsgServicesDescription* MsgServicesDescription::default_instance_ = NULL;

MsgServicesDescription* MsgServicesDescription::New() const {
  return new MsgServicesDescription;
}

void MsgServicesDescription::Clear() {
  services_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgServicesDescription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string services = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_services:
        DO_(::google::protobuf::internal::WireFormatLite::ReadString(
              input, this->add_services()));
        ::google::protobuf::internal::WireFormat::VerifyUTF8String(
          this->services(0).data(), this->services(0).length(),
          ::google::protobuf::internal::WireFormat::PARSE);
        if (input->ExpectTag(10)) goto parse_services;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgServicesDescription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgServicesDescription::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->services(i).data(), this->services(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->services(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgServicesDescription::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string services = 1;
  for (int i = 0; i < this->services_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->services(i).data(), this->services(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->services(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgServicesDescription::ByteSize() const {
  int total_size = 0;
  
  // repeated string services = 1;
  total_size += 1 * this->services_size();
  for (int i = 0; i < this->services_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->services(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgServicesDescription::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgServicesDescription* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgServicesDescription*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgServicesDescription::MergeFrom(const MsgServicesDescription& from) {
  GOOGLE_CHECK_NE(&from, this);
  services_.MergeFrom(from.services_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgServicesDescription::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgServicesDescription::CopyFrom(const MsgServicesDescription& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgServicesDescription::IsInitialized() const {
  
  return true;
}

void MsgServicesDescription::Swap(MsgServicesDescription* other) {
  if (other != this) {
    services_.Swap(&other->services_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgServicesDescription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgServicesDescription_descriptor_;
  metadata.reflection = MsgServicesDescription_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgDispatcherToClient_Content::kServicesDescriptionFieldNumber;
#endif  // !_MSC_VER

MsgDispatcherToClient_Content::MsgDispatcherToClient_Content() {
  SharedCtor();
}

void MsgDispatcherToClient_Content::InitAsDefaultInstance() {
  services_description_ = const_cast< ::MsgsDispatcherToClient::MsgServicesDescription*>(&::MsgsDispatcherToClient::MsgServicesDescription::default_instance());
}

MsgDispatcherToClient_Content::MsgDispatcherToClient_Content(const MsgDispatcherToClient_Content& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDispatcherToClient_Content::SharedCtor() {
  _cached_size_ = 0;
  services_description_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDispatcherToClient_Content::~MsgDispatcherToClient_Content() {
  SharedDtor();
}

void MsgDispatcherToClient_Content::SharedDtor() {
  if (this != default_instance_) {
    delete services_description_;
  }
}

const ::google::protobuf::Descriptor* MsgDispatcherToClient_Content::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDispatcherToClient_Content_descriptor_;
}

const MsgDispatcherToClient_Content& MsgDispatcherToClient_Content::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DispatcherToClient_2eproto();  return *default_instance_;
}

MsgDispatcherToClient_Content* MsgDispatcherToClient_Content::default_instance_ = NULL;

MsgDispatcherToClient_Content* MsgDispatcherToClient_Content::New() const {
  return new MsgDispatcherToClient_Content;
}

void MsgDispatcherToClient_Content::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (services_description_ != NULL) services_description_->::MsgsDispatcherToClient::MsgServicesDescription::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDispatcherToClient_Content::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_services_description()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDispatcherToClient_Content::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDispatcherToClient_Content::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->services_description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDispatcherToClient_Content::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->services_description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDispatcherToClient_Content::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgsDispatcherToClient.MsgServicesDescription services_description = 1;
    if (has_services_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services_description());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDispatcherToClient_Content::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDispatcherToClient_Content* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDispatcherToClient_Content*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDispatcherToClient_Content::MergeFrom(const MsgDispatcherToClient_Content& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_services_description()->::MsgsDispatcherToClient::MsgServicesDescription::MergeFrom(from.services_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDispatcherToClient_Content::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDispatcherToClient_Content::CopyFrom(const MsgDispatcherToClient_Content& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDispatcherToClient_Content::IsInitialized() const {
  
  return true;
}

void MsgDispatcherToClient_Content::Swap(MsgDispatcherToClient_Content* other) {
  if (other != this) {
    std::swap(services_description_, other->services_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDispatcherToClient_Content::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDispatcherToClient_Content_descriptor_;
  metadata.reflection = MsgDispatcherToClient_Content_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgDispatcherToClient::kMessageFieldNumber;
#endif  // !_MSC_VER

MsgDispatcherToClient::MsgDispatcherToClient() {
  SharedCtor();
}

void MsgDispatcherToClient::InitAsDefaultInstance() {
  message_ = const_cast< ::MsgsDispatcherToClient::MsgDispatcherToClient_Content*>(&::MsgsDispatcherToClient::MsgDispatcherToClient_Content::default_instance());
}

MsgDispatcherToClient::MsgDispatcherToClient(const MsgDispatcherToClient& from) {
  SharedCtor();
  MergeFrom(from);
}

void MsgDispatcherToClient::SharedCtor() {
  _cached_size_ = 0;
  message_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDispatcherToClient::~MsgDispatcherToClient() {
  SharedDtor();
}

void MsgDispatcherToClient::SharedDtor() {
  if (this != default_instance_) {
    delete message_;
  }
}

const ::google::protobuf::Descriptor* MsgDispatcherToClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDispatcherToClient_descriptor_;
}

const MsgDispatcherToClient& MsgDispatcherToClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DispatcherToClient_2eproto();  return *default_instance_;
}

MsgDispatcherToClient* MsgDispatcherToClient::default_instance_ = NULL;

MsgDispatcherToClient* MsgDispatcherToClient::New() const {
  return new MsgDispatcherToClient;
}

void MsgDispatcherToClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (message_ != NULL) message_->::MsgsDispatcherToClient::MsgDispatcherToClient_Content::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDispatcherToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
             input, mutable_message()));
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDispatcherToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    MsgDispatcherToClient::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageNoVirtual(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDispatcherToClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDispatcherToClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MsgsDispatcherToClient.MsgDispatcherToClient.Content message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void MsgDispatcherToClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDispatcherToClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDispatcherToClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDispatcherToClient::MergeFrom(const MsgDispatcherToClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_message()->::MsgsDispatcherToClient::MsgDispatcherToClient_Content::MergeFrom(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDispatcherToClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDispatcherToClient::CopyFrom(const MsgDispatcherToClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDispatcherToClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MsgDispatcherToClient::Swap(MsgDispatcherToClient* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDispatcherToClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDispatcherToClient_descriptor_;
  metadata.reflection = MsgDispatcherToClient_reflection_;
  return metadata;
}


}  // namespace MsgsDispatcherToClient

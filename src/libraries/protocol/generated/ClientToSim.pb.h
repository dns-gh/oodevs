// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_ClientToSim_2eproto__INCLUDED
#define PROTOBUF_ClientToSim_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Common.pb.h"

namespace MsgsClientToSim {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientToSim_2eproto();
void protobuf_AssignDesc_ClientToSim_2eproto();
void protobuf_ShutdownFile_ClientToSim_2eproto();

class MsgControlDatetimeChange;
class MsgControlCheckPointSaveNow;
class MsgFragOrder;
class MsgSetAutomatMode;
class MsgUnitCreationRequest;
class MsgUnitMagicAction;
class MsgKnowledgeMagicAction;
class MsgObjectMagicAction;
class MsgMagicAction;
class MsgControlCheckPointSetFrequency;
class MsgControlCheckPointDeleteRequest;
class MsgControlCheckPointListRequest;
class MsgControlEnableVisionCones;
class MsgClientToSim;
class MsgClientToSim_Content;

enum MsgUnitMagicAction_Type {
  MsgUnitMagicAction_Type_move_to = 0,
  MsgUnitMagicAction_Type_surrender_to = 1,
  MsgUnitMagicAction_Type_cancel_surrender = 2,
  MsgUnitMagicAction_Type_recover_transporters = 3,
  MsgUnitMagicAction_Type_destroy_component = 4,
  MsgUnitMagicAction_Type_recover_all = 5,
  MsgUnitMagicAction_Type_recover_troops = 6,
  MsgUnitMagicAction_Type_recover_equipments = 7,
  MsgUnitMagicAction_Type_recover_resources = 8,
  MsgUnitMagicAction_Type_destroy_all = 9,
  MsgUnitMagicAction_Type_change_human_factors = 10,
  MsgUnitMagicAction_Type_partial_recovery = 11,
  MsgUnitMagicAction_Type_unit_creation = 12,
  MsgUnitMagicAction_Type_create_fire_order = 13,
  MsgUnitMagicAction_Type_crowd_total_destruction = 14,
  MsgUnitMagicAction_Type_crowd_kill = 15,
  MsgUnitMagicAction_Type_crowd_resurrect = 16,
  MsgUnitMagicAction_Type_crowd_change_attitude = 17,
  MsgUnitMagicAction_Type_change_knowledge_group = 18,
  MsgUnitMagicAction_Type_change_logistic_links = 19,
  MsgUnitMagicAction_Type_unit_change_superior = 20,
  MsgUnitMagicAction_Type_change_automat_superior = 21,
  MsgUnitMagicAction_Type_change_formation_superior = 22,
  MsgUnitMagicAction_Type_knowledge_group_update = 23,
  MsgUnitMagicAction_Type_log_supply_push_flow = 24,
  MsgUnitMagicAction_Type_log_supply_change_quotas = 25,
  MsgUnitMagicAction_Type_automat_creation = 26,
  MsgUnitMagicAction_Type_formation_creation = 27,
  MsgUnitMagicAction_Type_crowd_creation = 28,
  MsgUnitMagicAction_Type_log_supply_pull_flow = 29,
  MsgUnitMagicAction_Type_create_wound = 30
};
bool MsgUnitMagicAction_Type_IsValid(int value);
const MsgUnitMagicAction_Type MsgUnitMagicAction_Type_Type_MIN = MsgUnitMagicAction_Type_move_to;
const MsgUnitMagicAction_Type MsgUnitMagicAction_Type_Type_MAX = MsgUnitMagicAction_Type_create_wound;

const ::google::protobuf::EnumDescriptor* MsgUnitMagicAction_Type_descriptor();
inline const ::std::string& MsgUnitMagicAction_Type_Name(MsgUnitMagicAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgUnitMagicAction_Type_descriptor(), value);
}
inline bool MsgUnitMagicAction_Type_Parse(
    const ::std::string& name, MsgUnitMagicAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgUnitMagicAction_Type>(
    MsgUnitMagicAction_Type_descriptor(), name, value);
}
enum MsgKnowledgeMagicAction_Type {
  MsgKnowledgeMagicAction_Type_enable = 0,
  MsgKnowledgeMagicAction_Type_update_party = 1,
  MsgKnowledgeMagicAction_Type_update_party_parent = 2,
  MsgKnowledgeMagicAction_Type_update_type = 3
};
bool MsgKnowledgeMagicAction_Type_IsValid(int value);
const MsgKnowledgeMagicAction_Type MsgKnowledgeMagicAction_Type_Type_MIN = MsgKnowledgeMagicAction_Type_enable;
const MsgKnowledgeMagicAction_Type MsgKnowledgeMagicAction_Type_Type_MAX = MsgKnowledgeMagicAction_Type_update_type;

const ::google::protobuf::EnumDescriptor* MsgKnowledgeMagicAction_Type_descriptor();
inline const ::std::string& MsgKnowledgeMagicAction_Type_Name(MsgKnowledgeMagicAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgKnowledgeMagicAction_Type_descriptor(), value);
}
inline bool MsgKnowledgeMagicAction_Type_Parse(
    const ::std::string& name, MsgKnowledgeMagicAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgKnowledgeMagicAction_Type>(
    MsgKnowledgeMagicAction_Type_descriptor(), name, value);
}
enum MsgObjectMagicAction_Type {
  MsgObjectMagicAction_Type_create = 0,
  MsgObjectMagicAction_Type_update = 1,
  MsgObjectMagicAction_Type_destroy = 2
};
bool MsgObjectMagicAction_Type_IsValid(int value);
const MsgObjectMagicAction_Type MsgObjectMagicAction_Type_Type_MIN = MsgObjectMagicAction_Type_create;
const MsgObjectMagicAction_Type MsgObjectMagicAction_Type_Type_MAX = MsgObjectMagicAction_Type_destroy;

const ::google::protobuf::EnumDescriptor* MsgObjectMagicAction_Type_descriptor();
inline const ::std::string& MsgObjectMagicAction_Type_Name(MsgObjectMagicAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgObjectMagicAction_Type_descriptor(), value);
}
inline bool MsgObjectMagicAction_Type_Parse(
    const ::std::string& name, MsgObjectMagicAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgObjectMagicAction_Type>(
    MsgObjectMagicAction_Type_descriptor(), name, value);
}
enum MsgObjectMagicAction_Attribute {
  MsgObjectMagicAction_Attribute_construction = 0,
  MsgObjectMagicAction_Attribute_obstacle = 1,
  MsgObjectMagicAction_Attribute_mine = 2,
  MsgObjectMagicAction_Attribute_activity_time = 3,
  MsgObjectMagicAction_Attribute_bypass = 4,
  MsgObjectMagicAction_Attribute_logistic = 5,
  MsgObjectMagicAction_Attribute_nbc = 6,
  MsgObjectMagicAction_Attribute_crossing_site = 7,
  MsgObjectMagicAction_Attribute_supply_route = 8,
  MsgObjectMagicAction_Attribute_toxic_cloud = 9,
  MsgObjectMagicAction_Attribute_fire = 10,
  MsgObjectMagicAction_Attribute_medical_treatment = 11,
  MsgObjectMagicAction_Attribute_interaction_height = 12,
  MsgObjectMagicAction_Attribute_stock = 13,
  MsgObjectMagicAction_Attribute_nbc_agent = 14,
  MsgObjectMagicAction_Attribute_effect_delay = 15
};
bool MsgObjectMagicAction_Attribute_IsValid(int value);
const MsgObjectMagicAction_Attribute MsgObjectMagicAction_Attribute_Attribute_MIN = MsgObjectMagicAction_Attribute_construction;
const MsgObjectMagicAction_Attribute MsgObjectMagicAction_Attribute_Attribute_MAX = MsgObjectMagicAction_Attribute_effect_delay;

const ::google::protobuf::EnumDescriptor* MsgObjectMagicAction_Attribute_descriptor();
inline const ::std::string& MsgObjectMagicAction_Attribute_Name(MsgObjectMagicAction_Attribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgObjectMagicAction_Attribute_descriptor(), value);
}
inline bool MsgObjectMagicAction_Attribute_Parse(
    const ::std::string& name, MsgObjectMagicAction_Attribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgObjectMagicAction_Attribute>(
    MsgObjectMagicAction_Attribute_descriptor(), name, value);
}
enum MsgMagicAction_Type {
  MsgMagicAction_Type_global_weather = 0,
  MsgMagicAction_Type_local_weather = 1,
  MsgMagicAction_Type_change_diplomacy = 2,
  MsgMagicAction_Type_create_knowledge_group = 3,
  MsgMagicAction_Type_change_resource_network_properties = 4
};
bool MsgMagicAction_Type_IsValid(int value);
const MsgMagicAction_Type MsgMagicAction_Type_Type_MIN = MsgMagicAction_Type_global_weather;
const MsgMagicAction_Type MsgMagicAction_Type_Type_MAX = MsgMagicAction_Type_change_resource_network_properties;

const ::google::protobuf::EnumDescriptor* MsgMagicAction_Type_descriptor();
inline const ::std::string& MsgMagicAction_Type_Name(MsgMagicAction_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgMagicAction_Type_descriptor(), value);
}
inline bool MsgMagicAction_Type_Parse(
    const ::std::string& name, MsgMagicAction_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgMagicAction_Type>(
    MsgMagicAction_Type_descriptor(), name, value);
}
// ===================================================================

class MsgControlDatetimeChange : public ::google::protobuf::Message {
 public:
  MsgControlDatetimeChange();
  virtual ~MsgControlDatetimeChange();
  
  MsgControlDatetimeChange(const MsgControlDatetimeChange& from);
  
  inline MsgControlDatetimeChange& operator=(const MsgControlDatetimeChange& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlDatetimeChange& default_instance();
  void Swap(MsgControlDatetimeChange* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlDatetimeChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlDatetimeChange& from);
  void MergeFrom(const MsgControlDatetimeChange& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Common.MsgDateTime date_time = 1;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 1;
  inline const ::Common::MsgDateTime& date_time() const;
  inline ::Common::MsgDateTime* mutable_date_time();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::MsgDateTime* date_time_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlDatetimeChange* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlCheckPointSaveNow : public ::google::protobuf::Message {
 public:
  MsgControlCheckPointSaveNow();
  virtual ~MsgControlCheckPointSaveNow();
  
  MsgControlCheckPointSaveNow(const MsgControlCheckPointSaveNow& from);
  
  inline MsgControlCheckPointSaveNow& operator=(const MsgControlCheckPointSaveNow& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlCheckPointSaveNow& default_instance();
  void Swap(MsgControlCheckPointSaveNow* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlCheckPointSaveNow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlCheckPointSaveNow& from);
  void MergeFrom(const MsgControlCheckPointSaveNow& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlCheckPointSaveNow* default_instance_;
};
// -------------------------------------------------------------------

class MsgFragOrder : public ::google::protobuf::Message {
 public:
  MsgFragOrder();
  virtual ~MsgFragOrder();
  
  MsgFragOrder(const MsgFragOrder& from);
  
  inline MsgFragOrder& operator=(const MsgFragOrder& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFragOrder& default_instance();
  void Swap(MsgFragOrder* other);
  
  // implements Message ----------------------------------------------
  
  MsgFragOrder* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFragOrder& from);
  void MergeFrom(const MsgFragOrder& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Common.Tasker tasker = 1;
  inline bool has_tasker() const;
  inline void clear_tasker();
  static const int kTaskerFieldNumber = 1;
  inline const ::Common::Tasker& tasker() const;
  inline ::Common::Tasker* mutable_tasker();
  
  // required .Common.FragOrderType frag_order = 2;
  inline bool has_frag_order() const;
  inline void clear_frag_order();
  static const int kFragOrderFieldNumber = 2;
  inline const ::Common::FragOrderType& frag_order() const;
  inline ::Common::FragOrderType* mutable_frag_order();
  
  // optional .Common.MsgMissionParameters parameters = 3;
  inline bool has_parameters() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::Common::MsgMissionParameters& parameters() const;
  inline ::Common::MsgMissionParameters* mutable_parameters();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::Tasker* tasker_;
  ::Common::FragOrderType* frag_order_;
  ::Common::MsgMissionParameters* parameters_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgFragOrder* default_instance_;
};
// -------------------------------------------------------------------

class MsgSetAutomatMode : public ::google::protobuf::Message {
 public:
  MsgSetAutomatMode();
  virtual ~MsgSetAutomatMode();
  
  MsgSetAutomatMode(const MsgSetAutomatMode& from);
  
  inline MsgSetAutomatMode& operator=(const MsgSetAutomatMode& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSetAutomatMode& default_instance();
  void Swap(MsgSetAutomatMode* other);
  
  // implements Message ----------------------------------------------
  
  MsgSetAutomatMode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSetAutomatMode& from);
  void MergeFrom(const MsgSetAutomatMode& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Common.AutomatId automate = 1;
  inline bool has_automate() const;
  inline void clear_automate();
  static const int kAutomateFieldNumber = 1;
  inline const ::Common::AutomatId& automate() const;
  inline ::Common::AutomatId* mutable_automate();
  
  // required .Common.EnumAutomatMode mode = 2;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 2;
  inline Common::EnumAutomatMode mode() const;
  inline void set_mode(Common::EnumAutomatMode value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::AutomatId* automate_;
  int mode_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgSetAutomatMode* default_instance_;
};
// -------------------------------------------------------------------

class MsgUnitCreationRequest : public ::google::protobuf::Message {
 public:
  MsgUnitCreationRequest();
  virtual ~MsgUnitCreationRequest();
  
  MsgUnitCreationRequest(const MsgUnitCreationRequest& from);
  
  inline MsgUnitCreationRequest& operator=(const MsgUnitCreationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgUnitCreationRequest& default_instance();
  void Swap(MsgUnitCreationRequest* other);
  
  // implements Message ----------------------------------------------
  
  MsgUnitCreationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgUnitCreationRequest& from);
  void MergeFrom(const MsgUnitCreationRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Common.UnitType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::Common::UnitType& type() const;
  inline ::Common::UnitType* mutable_type();
  
  // required .Common.AutomatId superior = 2;
  inline bool has_superior() const;
  inline void clear_superior();
  static const int kSuperiorFieldNumber = 2;
  inline const ::Common::AutomatId& superior() const;
  inline ::Common::AutomatId* mutable_superior();
  
  // required .Common.MsgCoordLatLong position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::Common::MsgCoordLatLong& position() const;
  inline ::Common::MsgCoordLatLong* mutable_position();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::UnitType* type_;
  ::Common::AutomatId* superior_;
  ::Common::MsgCoordLatLong* position_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgUnitCreationRequest* default_instance_;
};
// -------------------------------------------------------------------

class MsgUnitMagicAction : public ::google::protobuf::Message {
 public:
  MsgUnitMagicAction();
  virtual ~MsgUnitMagicAction();
  
  MsgUnitMagicAction(const MsgUnitMagicAction& from);
  
  inline MsgUnitMagicAction& operator=(const MsgUnitMagicAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgUnitMagicAction& default_instance();
  void Swap(MsgUnitMagicAction* other);
  
  // implements Message ----------------------------------------------
  
  MsgUnitMagicAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgUnitMagicAction& from);
  void MergeFrom(const MsgUnitMagicAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgUnitMagicAction_Type Type;
  static const Type move_to = MsgUnitMagicAction_Type_move_to;
  static const Type surrender_to = MsgUnitMagicAction_Type_surrender_to;
  static const Type cancel_surrender = MsgUnitMagicAction_Type_cancel_surrender;
  static const Type recover_transporters = MsgUnitMagicAction_Type_recover_transporters;
  static const Type destroy_component = MsgUnitMagicAction_Type_destroy_component;
  static const Type recover_all = MsgUnitMagicAction_Type_recover_all;
  static const Type recover_troops = MsgUnitMagicAction_Type_recover_troops;
  static const Type recover_equipments = MsgUnitMagicAction_Type_recover_equipments;
  static const Type recover_resources = MsgUnitMagicAction_Type_recover_resources;
  static const Type destroy_all = MsgUnitMagicAction_Type_destroy_all;
  static const Type change_human_factors = MsgUnitMagicAction_Type_change_human_factors;
  static const Type partial_recovery = MsgUnitMagicAction_Type_partial_recovery;
  static const Type unit_creation = MsgUnitMagicAction_Type_unit_creation;
  static const Type create_fire_order = MsgUnitMagicAction_Type_create_fire_order;
  static const Type crowd_total_destruction = MsgUnitMagicAction_Type_crowd_total_destruction;
  static const Type crowd_kill = MsgUnitMagicAction_Type_crowd_kill;
  static const Type crowd_resurrect = MsgUnitMagicAction_Type_crowd_resurrect;
  static const Type crowd_change_attitude = MsgUnitMagicAction_Type_crowd_change_attitude;
  static const Type change_knowledge_group = MsgUnitMagicAction_Type_change_knowledge_group;
  static const Type change_logistic_links = MsgUnitMagicAction_Type_change_logistic_links;
  static const Type unit_change_superior = MsgUnitMagicAction_Type_unit_change_superior;
  static const Type change_automat_superior = MsgUnitMagicAction_Type_change_automat_superior;
  static const Type change_formation_superior = MsgUnitMagicAction_Type_change_formation_superior;
  static const Type knowledge_group_update = MsgUnitMagicAction_Type_knowledge_group_update;
  static const Type log_supply_push_flow = MsgUnitMagicAction_Type_log_supply_push_flow;
  static const Type log_supply_change_quotas = MsgUnitMagicAction_Type_log_supply_change_quotas;
  static const Type automat_creation = MsgUnitMagicAction_Type_automat_creation;
  static const Type formation_creation = MsgUnitMagicAction_Type_formation_creation;
  static const Type crowd_creation = MsgUnitMagicAction_Type_crowd_creation;
  static const Type log_supply_pull_flow = MsgUnitMagicAction_Type_log_supply_pull_flow;
  static const Type create_wound = MsgUnitMagicAction_Type_create_wound;
  static inline bool Type_IsValid(int value) {
    return MsgUnitMagicAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgUnitMagicAction_Type_Type_MIN;
  static const Type Type_MAX =
    MsgUnitMagicAction_Type_Type_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MsgUnitMagicAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MsgUnitMagicAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MsgUnitMagicAction_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Common.Tasker tasker = 1;
  inline bool has_tasker() const;
  inline void clear_tasker();
  static const int kTaskerFieldNumber = 1;
  inline const ::Common::Tasker& tasker() const;
  inline ::Common::Tasker* mutable_tasker();
  
  // required .MsgsClientToSim.MsgUnitMagicAction.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MsgsClientToSim::MsgUnitMagicAction_Type type() const;
  inline void set_type(::MsgsClientToSim::MsgUnitMagicAction_Type value);
  
  // required .Common.MsgMissionParameters parameters = 3;
  inline bool has_parameters() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::Common::MsgMissionParameters& parameters() const;
  inline ::Common::MsgMissionParameters* mutable_parameters();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::Tasker* tasker_;
  int type_;
  ::Common::MsgMissionParameters* parameters_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgUnitMagicAction* default_instance_;
};
// -------------------------------------------------------------------

class MsgKnowledgeMagicAction : public ::google::protobuf::Message {
 public:
  MsgKnowledgeMagicAction();
  virtual ~MsgKnowledgeMagicAction();
  
  MsgKnowledgeMagicAction(const MsgKnowledgeMagicAction& from);
  
  inline MsgKnowledgeMagicAction& operator=(const MsgKnowledgeMagicAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgKnowledgeMagicAction& default_instance();
  void Swap(MsgKnowledgeMagicAction* other);
  
  // implements Message ----------------------------------------------
  
  MsgKnowledgeMagicAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgKnowledgeMagicAction& from);
  void MergeFrom(const MsgKnowledgeMagicAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgKnowledgeMagicAction_Type Type;
  static const Type enable = MsgKnowledgeMagicAction_Type_enable;
  static const Type update_party = MsgKnowledgeMagicAction_Type_update_party;
  static const Type update_party_parent = MsgKnowledgeMagicAction_Type_update_party_parent;
  static const Type update_type = MsgKnowledgeMagicAction_Type_update_type;
  static inline bool Type_IsValid(int value) {
    return MsgKnowledgeMagicAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgKnowledgeMagicAction_Type_Type_MIN;
  static const Type Type_MAX =
    MsgKnowledgeMagicAction_Type_Type_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MsgKnowledgeMagicAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MsgKnowledgeMagicAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MsgKnowledgeMagicAction_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Common.KnowledgeGroupId knowledge_group = 1;
  inline bool has_knowledge_group() const;
  inline void clear_knowledge_group();
  static const int kKnowledgeGroupFieldNumber = 1;
  inline const ::Common::KnowledgeGroupId& knowledge_group() const;
  inline ::Common::KnowledgeGroupId* mutable_knowledge_group();
  
  // required .MsgsClientToSim.MsgKnowledgeMagicAction.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MsgsClientToSim::MsgKnowledgeMagicAction_Type type() const;
  inline void set_type(::MsgsClientToSim::MsgKnowledgeMagicAction_Type value);
  
  // required .Common.MsgMissionParameters parameters = 3;
  inline bool has_parameters() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::Common::MsgMissionParameters& parameters() const;
  inline ::Common::MsgMissionParameters* mutable_parameters();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::KnowledgeGroupId* knowledge_group_;
  int type_;
  ::Common::MsgMissionParameters* parameters_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgKnowledgeMagicAction* default_instance_;
};
// -------------------------------------------------------------------

class MsgObjectMagicAction : public ::google::protobuf::Message {
 public:
  MsgObjectMagicAction();
  virtual ~MsgObjectMagicAction();
  
  MsgObjectMagicAction(const MsgObjectMagicAction& from);
  
  inline MsgObjectMagicAction& operator=(const MsgObjectMagicAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgObjectMagicAction& default_instance();
  void Swap(MsgObjectMagicAction* other);
  
  // implements Message ----------------------------------------------
  
  MsgObjectMagicAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgObjectMagicAction& from);
  void MergeFrom(const MsgObjectMagicAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgObjectMagicAction_Type Type;
  static const Type create = MsgObjectMagicAction_Type_create;
  static const Type update = MsgObjectMagicAction_Type_update;
  static const Type destroy = MsgObjectMagicAction_Type_destroy;
  static inline bool Type_IsValid(int value) {
    return MsgObjectMagicAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgObjectMagicAction_Type_Type_MIN;
  static const Type Type_MAX =
    MsgObjectMagicAction_Type_Type_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MsgObjectMagicAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MsgObjectMagicAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MsgObjectMagicAction_Type_Parse(name, value);
  }
  
  typedef MsgObjectMagicAction_Attribute Attribute;
  static const Attribute construction = MsgObjectMagicAction_Attribute_construction;
  static const Attribute obstacle = MsgObjectMagicAction_Attribute_obstacle;
  static const Attribute mine = MsgObjectMagicAction_Attribute_mine;
  static const Attribute activity_time = MsgObjectMagicAction_Attribute_activity_time;
  static const Attribute bypass = MsgObjectMagicAction_Attribute_bypass;
  static const Attribute logistic = MsgObjectMagicAction_Attribute_logistic;
  static const Attribute nbc = MsgObjectMagicAction_Attribute_nbc;
  static const Attribute crossing_site = MsgObjectMagicAction_Attribute_crossing_site;
  static const Attribute supply_route = MsgObjectMagicAction_Attribute_supply_route;
  static const Attribute toxic_cloud = MsgObjectMagicAction_Attribute_toxic_cloud;
  static const Attribute fire = MsgObjectMagicAction_Attribute_fire;
  static const Attribute medical_treatment = MsgObjectMagicAction_Attribute_medical_treatment;
  static const Attribute interaction_height = MsgObjectMagicAction_Attribute_interaction_height;
  static const Attribute stock = MsgObjectMagicAction_Attribute_stock;
  static const Attribute nbc_agent = MsgObjectMagicAction_Attribute_nbc_agent;
  static const Attribute effect_delay = MsgObjectMagicAction_Attribute_effect_delay;
  static inline bool Attribute_IsValid(int value) {
    return MsgObjectMagicAction_Attribute_IsValid(value);
  }
  static const Attribute Attribute_MIN =
    MsgObjectMagicAction_Attribute_Attribute_MIN;
  static const Attribute Attribute_MAX =
    MsgObjectMagicAction_Attribute_Attribute_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Attribute_descriptor() {
    return MsgObjectMagicAction_Attribute_descriptor();
  }
  static inline const ::std::string& Attribute_Name(Attribute value) {
    return MsgObjectMagicAction_Attribute_Name(value);
  }
  static inline bool Attribute_Parse(const ::std::string& name,
      Attribute* value) {
    return MsgObjectMagicAction_Attribute_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .Common.ObjectId object = 1;
  inline bool has_object() const;
  inline void clear_object();
  static const int kObjectFieldNumber = 1;
  inline const ::Common::ObjectId& object() const;
  inline ::Common::ObjectId* mutable_object();
  
  // required .MsgsClientToSim.MsgObjectMagicAction.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::MsgsClientToSim::MsgObjectMagicAction_Type type() const;
  inline void set_type(::MsgsClientToSim::MsgObjectMagicAction_Type value);
  
  // required .Common.MsgMissionParameters parameters = 3;
  inline bool has_parameters() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 3;
  inline const ::Common::MsgMissionParameters& parameters() const;
  inline ::Common::MsgMissionParameters* mutable_parameters();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::ObjectId* object_;
  int type_;
  ::Common::MsgMissionParameters* parameters_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgObjectMagicAction* default_instance_;
};
// -------------------------------------------------------------------

class MsgMagicAction : public ::google::protobuf::Message {
 public:
  MsgMagicAction();
  virtual ~MsgMagicAction();
  
  MsgMagicAction(const MsgMagicAction& from);
  
  inline MsgMagicAction& operator=(const MsgMagicAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgMagicAction& default_instance();
  void Swap(MsgMagicAction* other);
  
  // implements Message ----------------------------------------------
  
  MsgMagicAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgMagicAction& from);
  void MergeFrom(const MsgMagicAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgMagicAction_Type Type;
  static const Type global_weather = MsgMagicAction_Type_global_weather;
  static const Type local_weather = MsgMagicAction_Type_local_weather;
  static const Type change_diplomacy = MsgMagicAction_Type_change_diplomacy;
  static const Type create_knowledge_group = MsgMagicAction_Type_create_knowledge_group;
  static const Type change_resource_network_properties = MsgMagicAction_Type_change_resource_network_properties;
  static inline bool Type_IsValid(int value) {
    return MsgMagicAction_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgMagicAction_Type_Type_MIN;
  static const Type Type_MAX =
    MsgMagicAction_Type_Type_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MsgMagicAction_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MsgMagicAction_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MsgMagicAction_Type_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsClientToSim.MsgMagicAction.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::MsgsClientToSim::MsgMagicAction_Type type() const;
  inline void set_type(::MsgsClientToSim::MsgMagicAction_Type value);
  
  // required .Common.MsgMissionParameters parameters = 2;
  inline bool has_parameters() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 2;
  inline const ::Common::MsgMissionParameters& parameters() const;
  inline ::Common::MsgMissionParameters* mutable_parameters();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int type_;
  ::Common::MsgMissionParameters* parameters_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgMagicAction* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlCheckPointSetFrequency : public ::google::protobuf::Message {
 public:
  MsgControlCheckPointSetFrequency();
  virtual ~MsgControlCheckPointSetFrequency();
  
  MsgControlCheckPointSetFrequency(const MsgControlCheckPointSetFrequency& from);
  
  inline MsgControlCheckPointSetFrequency& operator=(const MsgControlCheckPointSetFrequency& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlCheckPointSetFrequency& default_instance();
  void Swap(MsgControlCheckPointSetFrequency* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlCheckPointSetFrequency* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlCheckPointSetFrequency& from);
  void MergeFrom(const MsgControlCheckPointSetFrequency& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 frequency = 1;
  inline bool has_frequency() const;
  inline void clear_frequency();
  static const int kFrequencyFieldNumber = 1;
  inline ::google::protobuf::int32 frequency() const;
  inline void set_frequency(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 frequency_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlCheckPointSetFrequency* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlCheckPointDeleteRequest : public ::google::protobuf::Message {
 public:
  MsgControlCheckPointDeleteRequest();
  virtual ~MsgControlCheckPointDeleteRequest();
  
  MsgControlCheckPointDeleteRequest(const MsgControlCheckPointDeleteRequest& from);
  
  inline MsgControlCheckPointDeleteRequest& operator=(const MsgControlCheckPointDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlCheckPointDeleteRequest& default_instance();
  void Swap(MsgControlCheckPointDeleteRequest* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlCheckPointDeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlCheckPointDeleteRequest& from);
  void MergeFrom(const MsgControlCheckPointDeleteRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string checkpoint = 1;
  inline bool has_checkpoint() const;
  inline void clear_checkpoint();
  static const int kCheckpointFieldNumber = 1;
  inline const ::std::string& checkpoint() const;
  inline void set_checkpoint(const ::std::string& value);
  inline void set_checkpoint(const char* value);
  inline void set_checkpoint(const char* value, size_t size);
  inline ::std::string* mutable_checkpoint();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* checkpoint_;
  static const ::std::string _default_checkpoint_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlCheckPointDeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlCheckPointListRequest : public ::google::protobuf::Message {
 public:
  MsgControlCheckPointListRequest();
  virtual ~MsgControlCheckPointListRequest();
  
  MsgControlCheckPointListRequest(const MsgControlCheckPointListRequest& from);
  
  inline MsgControlCheckPointListRequest& operator=(const MsgControlCheckPointListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlCheckPointListRequest& default_instance();
  void Swap(MsgControlCheckPointListRequest* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlCheckPointListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlCheckPointListRequest& from);
  void MergeFrom(const MsgControlCheckPointListRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlCheckPointListRequest* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlEnableVisionCones : public ::google::protobuf::Message {
 public:
  MsgControlEnableVisionCones();
  virtual ~MsgControlEnableVisionCones();
  
  MsgControlEnableVisionCones(const MsgControlEnableVisionCones& from);
  
  inline MsgControlEnableVisionCones& operator=(const MsgControlEnableVisionCones& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlEnableVisionCones& default_instance();
  void Swap(MsgControlEnableVisionCones* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlEnableVisionCones* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlEnableVisionCones& from);
  void MergeFrom(const MsgControlEnableVisionCones& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool vision_cones = 1;
  inline bool has_vision_cones() const;
  inline void clear_vision_cones();
  static const int kVisionConesFieldNumber = 1;
  inline bool vision_cones() const;
  inline void set_vision_cones(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool vision_cones_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlEnableVisionCones* default_instance_;
};
// -------------------------------------------------------------------

class MsgClientToSim_Content : public ::google::protobuf::Message {
 public:
  MsgClientToSim_Content();
  virtual ~MsgClientToSim_Content();
  
  MsgClientToSim_Content(const MsgClientToSim_Content& from);
  
  inline MsgClientToSim_Content& operator=(const MsgClientToSim_Content& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgClientToSim_Content& default_instance();
  void Swap(MsgClientToSim_Content* other);
  
  // implements Message ----------------------------------------------
  
  MsgClientToSim_Content* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgClientToSim_Content& from);
  void MergeFrom(const MsgClientToSim_Content& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Common.MsgControlStop control_stop = 1;
  inline bool has_control_stop() const;
  inline void clear_control_stop();
  static const int kControlStopFieldNumber = 1;
  inline const ::Common::MsgControlStop& control_stop() const;
  inline ::Common::MsgControlStop* mutable_control_stop();
  
  // optional .Common.MsgControlPause control_pause = 2;
  inline bool has_control_pause() const;
  inline void clear_control_pause();
  static const int kControlPauseFieldNumber = 2;
  inline const ::Common::MsgControlPause& control_pause() const;
  inline ::Common::MsgControlPause* mutable_control_pause();
  
  // optional .Common.MsgControlResume control_resume = 3;
  inline bool has_control_resume() const;
  inline void clear_control_resume();
  static const int kControlResumeFieldNumber = 3;
  inline const ::Common::MsgControlResume& control_resume() const;
  inline ::Common::MsgControlResume* mutable_control_resume();
  
  // optional .Common.MsgControlChangeTimeFactor control_change_time_factor = 4;
  inline bool has_control_change_time_factor() const;
  inline void clear_control_change_time_factor();
  static const int kControlChangeTimeFactorFieldNumber = 4;
  inline const ::Common::MsgControlChangeTimeFactor& control_change_time_factor() const;
  inline ::Common::MsgControlChangeTimeFactor* mutable_control_change_time_factor();
  
  // optional .MsgsClientToSim.MsgControlDatetimeChange control_date_time_change = 5;
  inline bool has_control_date_time_change() const;
  inline void clear_control_date_time_change();
  static const int kControlDateTimeChangeFieldNumber = 5;
  inline const ::MsgsClientToSim::MsgControlDatetimeChange& control_date_time_change() const;
  inline ::MsgsClientToSim::MsgControlDatetimeChange* mutable_control_date_time_change();
  
  // optional .MsgsClientToSim.MsgControlCheckPointSaveNow control_checkpoint_save_now = 6;
  inline bool has_control_checkpoint_save_now() const;
  inline void clear_control_checkpoint_save_now();
  static const int kControlCheckpointSaveNowFieldNumber = 6;
  inline const ::MsgsClientToSim::MsgControlCheckPointSaveNow& control_checkpoint_save_now() const;
  inline ::MsgsClientToSim::MsgControlCheckPointSaveNow* mutable_control_checkpoint_save_now();
  
  // optional .MsgsClientToSim.MsgControlCheckPointSetFrequency control_checkpoint_set_frequency = 7;
  inline bool has_control_checkpoint_set_frequency() const;
  inline void clear_control_checkpoint_set_frequency();
  static const int kControlCheckpointSetFrequencyFieldNumber = 7;
  inline const ::MsgsClientToSim::MsgControlCheckPointSetFrequency& control_checkpoint_set_frequency() const;
  inline ::MsgsClientToSim::MsgControlCheckPointSetFrequency* mutable_control_checkpoint_set_frequency();
  
  // optional .MsgsClientToSim.MsgControlEnableVisionCones control_toggle_vision_cones = 8;
  inline bool has_control_toggle_vision_cones() const;
  inline void clear_control_toggle_vision_cones();
  static const int kControlToggleVisionConesFieldNumber = 8;
  inline const ::MsgsClientToSim::MsgControlEnableVisionCones& control_toggle_vision_cones() const;
  inline ::MsgsClientToSim::MsgControlEnableVisionCones* mutable_control_toggle_vision_cones();
  
  // optional .Common.MsgUnitOrder unit_order = 9;
  inline bool has_unit_order() const;
  inline void clear_unit_order();
  static const int kUnitOrderFieldNumber = 9;
  inline const ::Common::MsgUnitOrder& unit_order() const;
  inline ::Common::MsgUnitOrder* mutable_unit_order();
  
  // optional .Common.MsgAutomatOrder automat_order = 10;
  inline bool has_automat_order() const;
  inline void clear_automat_order();
  static const int kAutomatOrderFieldNumber = 10;
  inline const ::Common::MsgAutomatOrder& automat_order() const;
  inline ::Common::MsgAutomatOrder* mutable_automat_order();
  
  // optional .Common.MsgCrowdOrder crowd_order = 11;
  inline bool has_crowd_order() const;
  inline void clear_crowd_order();
  static const int kCrowdOrderFieldNumber = 11;
  inline const ::Common::MsgCrowdOrder& crowd_order() const;
  inline ::Common::MsgCrowdOrder* mutable_crowd_order();
  
  // optional .MsgsClientToSim.MsgFragOrder frag_order = 12;
  inline bool has_frag_order() const;
  inline void clear_frag_order();
  static const int kFragOrderFieldNumber = 12;
  inline const ::MsgsClientToSim::MsgFragOrder& frag_order() const;
  inline ::MsgsClientToSim::MsgFragOrder* mutable_frag_order();
  
  // optional .MsgsClientToSim.MsgSetAutomatMode set_automat_mode = 13;
  inline bool has_set_automat_mode() const;
  inline void clear_set_automat_mode();
  static const int kSetAutomatModeFieldNumber = 13;
  inline const ::MsgsClientToSim::MsgSetAutomatMode& set_automat_mode() const;
  inline ::MsgsClientToSim::MsgSetAutomatMode* mutable_set_automat_mode();
  
  // optional .MsgsClientToSim.MsgUnitCreationRequest unit_creation_request = 14;
  inline bool has_unit_creation_request() const;
  inline void clear_unit_creation_request();
  static const int kUnitCreationRequestFieldNumber = 14;
  inline const ::MsgsClientToSim::MsgUnitCreationRequest& unit_creation_request() const;
  inline ::MsgsClientToSim::MsgUnitCreationRequest* mutable_unit_creation_request();
  
  // optional .MsgsClientToSim.MsgUnitMagicAction unit_magic_action = 15;
  inline bool has_unit_magic_action() const;
  inline void clear_unit_magic_action();
  static const int kUnitMagicActionFieldNumber = 15;
  inline const ::MsgsClientToSim::MsgUnitMagicAction& unit_magic_action() const;
  inline ::MsgsClientToSim::MsgUnitMagicAction* mutable_unit_magic_action();
  
  // optional .MsgsClientToSim.MsgObjectMagicAction object_magic_action = 16;
  inline bool has_object_magic_action() const;
  inline void clear_object_magic_action();
  static const int kObjectMagicActionFieldNumber = 16;
  inline const ::MsgsClientToSim::MsgObjectMagicAction& object_magic_action() const;
  inline ::MsgsClientToSim::MsgObjectMagicAction* mutable_object_magic_action();
  
  // optional .MsgsClientToSim.MsgKnowledgeMagicAction knowledge_magic_action = 17;
  inline bool has_knowledge_magic_action() const;
  inline void clear_knowledge_magic_action();
  static const int kKnowledgeMagicActionFieldNumber = 17;
  inline const ::MsgsClientToSim::MsgKnowledgeMagicAction& knowledge_magic_action() const;
  inline ::MsgsClientToSim::MsgKnowledgeMagicAction* mutable_knowledge_magic_action();
  
  // optional .MsgsClientToSim.MsgMagicAction magic_action = 18;
  inline bool has_magic_action() const;
  inline void clear_magic_action();
  static const int kMagicActionFieldNumber = 18;
  inline const ::MsgsClientToSim::MsgMagicAction& magic_action() const;
  inline ::MsgsClientToSim::MsgMagicAction* mutable_magic_action();
  
  // optional .MsgsClientToSim.MsgControlCheckPointListRequest control_checkpoint_list_request = 19;
  inline bool has_control_checkpoint_list_request() const;
  inline void clear_control_checkpoint_list_request();
  static const int kControlCheckpointListRequestFieldNumber = 19;
  inline const ::MsgsClientToSim::MsgControlCheckPointListRequest& control_checkpoint_list_request() const;
  inline ::MsgsClientToSim::MsgControlCheckPointListRequest* mutable_control_checkpoint_list_request();
  
  // optional .MsgsClientToSim.MsgControlCheckPointDeleteRequest control_checkpoint_delete_request = 20;
  inline bool has_control_checkpoint_delete_request() const;
  inline void clear_control_checkpoint_delete_request();
  static const int kControlCheckpointDeleteRequestFieldNumber = 20;
  inline const ::MsgsClientToSim::MsgControlCheckPointDeleteRequest& control_checkpoint_delete_request() const;
  inline ::MsgsClientToSim::MsgControlCheckPointDeleteRequest* mutable_control_checkpoint_delete_request();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::Common::MsgControlStop* control_stop_;
  ::Common::MsgControlPause* control_pause_;
  ::Common::MsgControlResume* control_resume_;
  ::Common::MsgControlChangeTimeFactor* control_change_time_factor_;
  ::MsgsClientToSim::MsgControlDatetimeChange* control_date_time_change_;
  ::MsgsClientToSim::MsgControlCheckPointSaveNow* control_checkpoint_save_now_;
  ::MsgsClientToSim::MsgControlCheckPointSetFrequency* control_checkpoint_set_frequency_;
  ::MsgsClientToSim::MsgControlEnableVisionCones* control_toggle_vision_cones_;
  ::Common::MsgUnitOrder* unit_order_;
  ::Common::MsgAutomatOrder* automat_order_;
  ::Common::MsgCrowdOrder* crowd_order_;
  ::MsgsClientToSim::MsgFragOrder* frag_order_;
  ::MsgsClientToSim::MsgSetAutomatMode* set_automat_mode_;
  ::MsgsClientToSim::MsgUnitCreationRequest* unit_creation_request_;
  ::MsgsClientToSim::MsgUnitMagicAction* unit_magic_action_;
  ::MsgsClientToSim::MsgObjectMagicAction* object_magic_action_;
  ::MsgsClientToSim::MsgKnowledgeMagicAction* knowledge_magic_action_;
  ::MsgsClientToSim::MsgMagicAction* magic_action_;
  ::MsgsClientToSim::MsgControlCheckPointListRequest* control_checkpoint_list_request_;
  ::MsgsClientToSim::MsgControlCheckPointDeleteRequest* control_checkpoint_delete_request_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgClientToSim_Content* default_instance_;
};
// -------------------------------------------------------------------

class MsgClientToSim : public ::google::protobuf::Message {
 public:
  MsgClientToSim();
  virtual ~MsgClientToSim();
  
  MsgClientToSim(const MsgClientToSim& from);
  
  inline MsgClientToSim& operator=(const MsgClientToSim& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgClientToSim& default_instance();
  void Swap(MsgClientToSim* other);
  
  // implements Message ----------------------------------------------
  
  MsgClientToSim* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgClientToSim& from);
  void MergeFrom(const MsgClientToSim& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgClientToSim_Content Content;
  
  // accessors -------------------------------------------------------
  
  // optional int32 context = 1;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 1;
  inline ::google::protobuf::int32 context() const;
  inline void set_context(::google::protobuf::int32 value);
  
  // required .MsgsClientToSim.MsgClientToSim.Content message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::MsgsClientToSim::MsgClientToSim_Content& message() const;
  inline ::MsgsClientToSim::MsgClientToSim_Content* mutable_message();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 context_;
  ::MsgsClientToSim::MsgClientToSim_Content* message_;
  friend void  protobuf_AddDesc_ClientToSim_2eproto();
  friend void protobuf_AssignDesc_ClientToSim_2eproto();
  friend void protobuf_ShutdownFile_ClientToSim_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgClientToSim* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgControlDatetimeChange

// required .Common.MsgDateTime date_time = 1;
inline bool MsgControlDatetimeChange::has_date_time() const {
  return _has_bit(0);
}
inline void MsgControlDatetimeChange::clear_date_time() {
  if (date_time_ != NULL) date_time_->::Common::MsgDateTime::Clear();
  _clear_bit(0);
}
inline const ::Common::MsgDateTime& MsgControlDatetimeChange::date_time() const {
  return date_time_ != NULL ? *date_time_ : *default_instance_->date_time_;
}
inline ::Common::MsgDateTime* MsgControlDatetimeChange::mutable_date_time() {
  _set_bit(0);
  if (date_time_ == NULL) date_time_ = new ::Common::MsgDateTime;
  return date_time_;
}

// -------------------------------------------------------------------

// MsgControlCheckPointSaveNow

// optional string name = 1;
inline bool MsgControlCheckPointSaveNow::has_name() const {
  return _has_bit(0);
}
inline void MsgControlCheckPointSaveNow::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgControlCheckPointSaveNow::name() const {
  return *name_;
}
inline void MsgControlCheckPointSaveNow::set_name(const ::std::string& value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgControlCheckPointSaveNow::set_name(const char* value) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MsgControlCheckPointSaveNow::set_name(const char* value, size_t size) {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgControlCheckPointSaveNow::mutable_name() {
  _set_bit(0);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// MsgFragOrder

// required .Common.Tasker tasker = 1;
inline bool MsgFragOrder::has_tasker() const {
  return _has_bit(0);
}
inline void MsgFragOrder::clear_tasker() {
  if (tasker_ != NULL) tasker_->::Common::Tasker::Clear();
  _clear_bit(0);
}
inline const ::Common::Tasker& MsgFragOrder::tasker() const {
  return tasker_ != NULL ? *tasker_ : *default_instance_->tasker_;
}
inline ::Common::Tasker* MsgFragOrder::mutable_tasker() {
  _set_bit(0);
  if (tasker_ == NULL) tasker_ = new ::Common::Tasker;
  return tasker_;
}

// required .Common.FragOrderType frag_order = 2;
inline bool MsgFragOrder::has_frag_order() const {
  return _has_bit(1);
}
inline void MsgFragOrder::clear_frag_order() {
  if (frag_order_ != NULL) frag_order_->::Common::FragOrderType::Clear();
  _clear_bit(1);
}
inline const ::Common::FragOrderType& MsgFragOrder::frag_order() const {
  return frag_order_ != NULL ? *frag_order_ : *default_instance_->frag_order_;
}
inline ::Common::FragOrderType* MsgFragOrder::mutable_frag_order() {
  _set_bit(1);
  if (frag_order_ == NULL) frag_order_ = new ::Common::FragOrderType;
  return frag_order_;
}

// optional .Common.MsgMissionParameters parameters = 3;
inline bool MsgFragOrder::has_parameters() const {
  return _has_bit(2);
}
inline void MsgFragOrder::clear_parameters() {
  if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgMissionParameters& MsgFragOrder::parameters() const {
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::Common::MsgMissionParameters* MsgFragOrder::mutable_parameters() {
  _set_bit(2);
  if (parameters_ == NULL) parameters_ = new ::Common::MsgMissionParameters;
  return parameters_;
}

// -------------------------------------------------------------------

// MsgSetAutomatMode

// required .Common.AutomatId automate = 1;
inline bool MsgSetAutomatMode::has_automate() const {
  return _has_bit(0);
}
inline void MsgSetAutomatMode::clear_automate() {
  if (automate_ != NULL) automate_->::Common::AutomatId::Clear();
  _clear_bit(0);
}
inline const ::Common::AutomatId& MsgSetAutomatMode::automate() const {
  return automate_ != NULL ? *automate_ : *default_instance_->automate_;
}
inline ::Common::AutomatId* MsgSetAutomatMode::mutable_automate() {
  _set_bit(0);
  if (automate_ == NULL) automate_ = new ::Common::AutomatId;
  return automate_;
}

// required .Common.EnumAutomatMode mode = 2;
inline bool MsgSetAutomatMode::has_mode() const {
  return _has_bit(1);
}
inline void MsgSetAutomatMode::clear_mode() {
  mode_ = 0;
  _clear_bit(1);
}
inline Common::EnumAutomatMode MsgSetAutomatMode::mode() const {
  return static_cast< Common::EnumAutomatMode >(mode_);
}
inline void MsgSetAutomatMode::set_mode(Common::EnumAutomatMode value) {
  GOOGLE_DCHECK(Common::EnumAutomatMode_IsValid(value));
  _set_bit(1);
  mode_ = value;
}

// -------------------------------------------------------------------

// MsgUnitCreationRequest

// required .Common.UnitType type = 1;
inline bool MsgUnitCreationRequest::has_type() const {
  return _has_bit(0);
}
inline void MsgUnitCreationRequest::clear_type() {
  if (type_ != NULL) type_->::Common::UnitType::Clear();
  _clear_bit(0);
}
inline const ::Common::UnitType& MsgUnitCreationRequest::type() const {
  return type_ != NULL ? *type_ : *default_instance_->type_;
}
inline ::Common::UnitType* MsgUnitCreationRequest::mutable_type() {
  _set_bit(0);
  if (type_ == NULL) type_ = new ::Common::UnitType;
  return type_;
}

// required .Common.AutomatId superior = 2;
inline bool MsgUnitCreationRequest::has_superior() const {
  return _has_bit(1);
}
inline void MsgUnitCreationRequest::clear_superior() {
  if (superior_ != NULL) superior_->::Common::AutomatId::Clear();
  _clear_bit(1);
}
inline const ::Common::AutomatId& MsgUnitCreationRequest::superior() const {
  return superior_ != NULL ? *superior_ : *default_instance_->superior_;
}
inline ::Common::AutomatId* MsgUnitCreationRequest::mutable_superior() {
  _set_bit(1);
  if (superior_ == NULL) superior_ = new ::Common::AutomatId;
  return superior_;
}

// required .Common.MsgCoordLatLong position = 3;
inline bool MsgUnitCreationRequest::has_position() const {
  return _has_bit(2);
}
inline void MsgUnitCreationRequest::clear_position() {
  if (position_ != NULL) position_->::Common::MsgCoordLatLong::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgCoordLatLong& MsgUnitCreationRequest::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::Common::MsgCoordLatLong* MsgUnitCreationRequest::mutable_position() {
  _set_bit(2);
  if (position_ == NULL) position_ = new ::Common::MsgCoordLatLong;
  return position_;
}

// -------------------------------------------------------------------

// MsgUnitMagicAction

// required .Common.Tasker tasker = 1;
inline bool MsgUnitMagicAction::has_tasker() const {
  return _has_bit(0);
}
inline void MsgUnitMagicAction::clear_tasker() {
  if (tasker_ != NULL) tasker_->::Common::Tasker::Clear();
  _clear_bit(0);
}
inline const ::Common::Tasker& MsgUnitMagicAction::tasker() const {
  return tasker_ != NULL ? *tasker_ : *default_instance_->tasker_;
}
inline ::Common::Tasker* MsgUnitMagicAction::mutable_tasker() {
  _set_bit(0);
  if (tasker_ == NULL) tasker_ = new ::Common::Tasker;
  return tasker_;
}

// required .MsgsClientToSim.MsgUnitMagicAction.Type type = 2;
inline bool MsgUnitMagicAction::has_type() const {
  return _has_bit(1);
}
inline void MsgUnitMagicAction::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::MsgsClientToSim::MsgUnitMagicAction_Type MsgUnitMagicAction::type() const {
  return static_cast< ::MsgsClientToSim::MsgUnitMagicAction_Type >(type_);
}
inline void MsgUnitMagicAction::set_type(::MsgsClientToSim::MsgUnitMagicAction_Type value) {
  GOOGLE_DCHECK(::MsgsClientToSim::MsgUnitMagicAction_Type_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// required .Common.MsgMissionParameters parameters = 3;
inline bool MsgUnitMagicAction::has_parameters() const {
  return _has_bit(2);
}
inline void MsgUnitMagicAction::clear_parameters() {
  if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgMissionParameters& MsgUnitMagicAction::parameters() const {
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::Common::MsgMissionParameters* MsgUnitMagicAction::mutable_parameters() {
  _set_bit(2);
  if (parameters_ == NULL) parameters_ = new ::Common::MsgMissionParameters;
  return parameters_;
}

// -------------------------------------------------------------------

// MsgKnowledgeMagicAction

// required .Common.KnowledgeGroupId knowledge_group = 1;
inline bool MsgKnowledgeMagicAction::has_knowledge_group() const {
  return _has_bit(0);
}
inline void MsgKnowledgeMagicAction::clear_knowledge_group() {
  if (knowledge_group_ != NULL) knowledge_group_->::Common::KnowledgeGroupId::Clear();
  _clear_bit(0);
}
inline const ::Common::KnowledgeGroupId& MsgKnowledgeMagicAction::knowledge_group() const {
  return knowledge_group_ != NULL ? *knowledge_group_ : *default_instance_->knowledge_group_;
}
inline ::Common::KnowledgeGroupId* MsgKnowledgeMagicAction::mutable_knowledge_group() {
  _set_bit(0);
  if (knowledge_group_ == NULL) knowledge_group_ = new ::Common::KnowledgeGroupId;
  return knowledge_group_;
}

// required .MsgsClientToSim.MsgKnowledgeMagicAction.Type type = 2;
inline bool MsgKnowledgeMagicAction::has_type() const {
  return _has_bit(1);
}
inline void MsgKnowledgeMagicAction::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::MsgsClientToSim::MsgKnowledgeMagicAction_Type MsgKnowledgeMagicAction::type() const {
  return static_cast< ::MsgsClientToSim::MsgKnowledgeMagicAction_Type >(type_);
}
inline void MsgKnowledgeMagicAction::set_type(::MsgsClientToSim::MsgKnowledgeMagicAction_Type value) {
  GOOGLE_DCHECK(::MsgsClientToSim::MsgKnowledgeMagicAction_Type_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// required .Common.MsgMissionParameters parameters = 3;
inline bool MsgKnowledgeMagicAction::has_parameters() const {
  return _has_bit(2);
}
inline void MsgKnowledgeMagicAction::clear_parameters() {
  if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgMissionParameters& MsgKnowledgeMagicAction::parameters() const {
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::Common::MsgMissionParameters* MsgKnowledgeMagicAction::mutable_parameters() {
  _set_bit(2);
  if (parameters_ == NULL) parameters_ = new ::Common::MsgMissionParameters;
  return parameters_;
}

// -------------------------------------------------------------------

// MsgObjectMagicAction

// required .Common.ObjectId object = 1;
inline bool MsgObjectMagicAction::has_object() const {
  return _has_bit(0);
}
inline void MsgObjectMagicAction::clear_object() {
  if (object_ != NULL) object_->::Common::ObjectId::Clear();
  _clear_bit(0);
}
inline const ::Common::ObjectId& MsgObjectMagicAction::object() const {
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
inline ::Common::ObjectId* MsgObjectMagicAction::mutable_object() {
  _set_bit(0);
  if (object_ == NULL) object_ = new ::Common::ObjectId;
  return object_;
}

// required .MsgsClientToSim.MsgObjectMagicAction.Type type = 2;
inline bool MsgObjectMagicAction::has_type() const {
  return _has_bit(1);
}
inline void MsgObjectMagicAction::clear_type() {
  type_ = 0;
  _clear_bit(1);
}
inline ::MsgsClientToSim::MsgObjectMagicAction_Type MsgObjectMagicAction::type() const {
  return static_cast< ::MsgsClientToSim::MsgObjectMagicAction_Type >(type_);
}
inline void MsgObjectMagicAction::set_type(::MsgsClientToSim::MsgObjectMagicAction_Type value) {
  GOOGLE_DCHECK(::MsgsClientToSim::MsgObjectMagicAction_Type_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// required .Common.MsgMissionParameters parameters = 3;
inline bool MsgObjectMagicAction::has_parameters() const {
  return _has_bit(2);
}
inline void MsgObjectMagicAction::clear_parameters() {
  if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgMissionParameters& MsgObjectMagicAction::parameters() const {
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::Common::MsgMissionParameters* MsgObjectMagicAction::mutable_parameters() {
  _set_bit(2);
  if (parameters_ == NULL) parameters_ = new ::Common::MsgMissionParameters;
  return parameters_;
}

// -------------------------------------------------------------------

// MsgMagicAction

// required .MsgsClientToSim.MsgMagicAction.Type type = 1;
inline bool MsgMagicAction::has_type() const {
  return _has_bit(0);
}
inline void MsgMagicAction::clear_type() {
  type_ = 0;
  _clear_bit(0);
}
inline ::MsgsClientToSim::MsgMagicAction_Type MsgMagicAction::type() const {
  return static_cast< ::MsgsClientToSim::MsgMagicAction_Type >(type_);
}
inline void MsgMagicAction::set_type(::MsgsClientToSim::MsgMagicAction_Type value) {
  GOOGLE_DCHECK(::MsgsClientToSim::MsgMagicAction_Type_IsValid(value));
  _set_bit(0);
  type_ = value;
}

// required .Common.MsgMissionParameters parameters = 2;
inline bool MsgMagicAction::has_parameters() const {
  return _has_bit(1);
}
inline void MsgMagicAction::clear_parameters() {
  if (parameters_ != NULL) parameters_->::Common::MsgMissionParameters::Clear();
  _clear_bit(1);
}
inline const ::Common::MsgMissionParameters& MsgMagicAction::parameters() const {
  return parameters_ != NULL ? *parameters_ : *default_instance_->parameters_;
}
inline ::Common::MsgMissionParameters* MsgMagicAction::mutable_parameters() {
  _set_bit(1);
  if (parameters_ == NULL) parameters_ = new ::Common::MsgMissionParameters;
  return parameters_;
}

// -------------------------------------------------------------------

// MsgControlCheckPointSetFrequency

// required int32 frequency = 1;
inline bool MsgControlCheckPointSetFrequency::has_frequency() const {
  return _has_bit(0);
}
inline void MsgControlCheckPointSetFrequency::clear_frequency() {
  frequency_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgControlCheckPointSetFrequency::frequency() const {
  return frequency_;
}
inline void MsgControlCheckPointSetFrequency::set_frequency(::google::protobuf::int32 value) {
  _set_bit(0);
  frequency_ = value;
}

// -------------------------------------------------------------------

// MsgControlCheckPointDeleteRequest

// required string checkpoint = 1;
inline bool MsgControlCheckPointDeleteRequest::has_checkpoint() const {
  return _has_bit(0);
}
inline void MsgControlCheckPointDeleteRequest::clear_checkpoint() {
  if (checkpoint_ != &_default_checkpoint_) {
    checkpoint_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& MsgControlCheckPointDeleteRequest::checkpoint() const {
  return *checkpoint_;
}
inline void MsgControlCheckPointDeleteRequest::set_checkpoint(const ::std::string& value) {
  _set_bit(0);
  if (checkpoint_ == &_default_checkpoint_) {
    checkpoint_ = new ::std::string;
  }
  checkpoint_->assign(value);
}
inline void MsgControlCheckPointDeleteRequest::set_checkpoint(const char* value) {
  _set_bit(0);
  if (checkpoint_ == &_default_checkpoint_) {
    checkpoint_ = new ::std::string;
  }
  checkpoint_->assign(value);
}
inline void MsgControlCheckPointDeleteRequest::set_checkpoint(const char* value, size_t size) {
  _set_bit(0);
  if (checkpoint_ == &_default_checkpoint_) {
    checkpoint_ = new ::std::string;
  }
  checkpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgControlCheckPointDeleteRequest::mutable_checkpoint() {
  _set_bit(0);
  if (checkpoint_ == &_default_checkpoint_) {
    checkpoint_ = new ::std::string;
  }
  return checkpoint_;
}

// -------------------------------------------------------------------

// MsgControlCheckPointListRequest

// -------------------------------------------------------------------

// MsgControlEnableVisionCones

// required bool vision_cones = 1;
inline bool MsgControlEnableVisionCones::has_vision_cones() const {
  return _has_bit(0);
}
inline void MsgControlEnableVisionCones::clear_vision_cones() {
  vision_cones_ = false;
  _clear_bit(0);
}
inline bool MsgControlEnableVisionCones::vision_cones() const {
  return vision_cones_;
}
inline void MsgControlEnableVisionCones::set_vision_cones(bool value) {
  _set_bit(0);
  vision_cones_ = value;
}

// -------------------------------------------------------------------

// MsgClientToSim_Content

// optional .Common.MsgControlStop control_stop = 1;
inline bool MsgClientToSim_Content::has_control_stop() const {
  return _has_bit(0);
}
inline void MsgClientToSim_Content::clear_control_stop() {
  if (control_stop_ != NULL) control_stop_->::Common::MsgControlStop::Clear();
  _clear_bit(0);
}
inline const ::Common::MsgControlStop& MsgClientToSim_Content::control_stop() const {
  return control_stop_ != NULL ? *control_stop_ : *default_instance_->control_stop_;
}
inline ::Common::MsgControlStop* MsgClientToSim_Content::mutable_control_stop() {
  _set_bit(0);
  if (control_stop_ == NULL) control_stop_ = new ::Common::MsgControlStop;
  return control_stop_;
}

// optional .Common.MsgControlPause control_pause = 2;
inline bool MsgClientToSim_Content::has_control_pause() const {
  return _has_bit(1);
}
inline void MsgClientToSim_Content::clear_control_pause() {
  if (control_pause_ != NULL) control_pause_->::Common::MsgControlPause::Clear();
  _clear_bit(1);
}
inline const ::Common::MsgControlPause& MsgClientToSim_Content::control_pause() const {
  return control_pause_ != NULL ? *control_pause_ : *default_instance_->control_pause_;
}
inline ::Common::MsgControlPause* MsgClientToSim_Content::mutable_control_pause() {
  _set_bit(1);
  if (control_pause_ == NULL) control_pause_ = new ::Common::MsgControlPause;
  return control_pause_;
}

// optional .Common.MsgControlResume control_resume = 3;
inline bool MsgClientToSim_Content::has_control_resume() const {
  return _has_bit(2);
}
inline void MsgClientToSim_Content::clear_control_resume() {
  if (control_resume_ != NULL) control_resume_->::Common::MsgControlResume::Clear();
  _clear_bit(2);
}
inline const ::Common::MsgControlResume& MsgClientToSim_Content::control_resume() const {
  return control_resume_ != NULL ? *control_resume_ : *default_instance_->control_resume_;
}
inline ::Common::MsgControlResume* MsgClientToSim_Content::mutable_control_resume() {
  _set_bit(2);
  if (control_resume_ == NULL) control_resume_ = new ::Common::MsgControlResume;
  return control_resume_;
}

// optional .Common.MsgControlChangeTimeFactor control_change_time_factor = 4;
inline bool MsgClientToSim_Content::has_control_change_time_factor() const {
  return _has_bit(3);
}
inline void MsgClientToSim_Content::clear_control_change_time_factor() {
  if (control_change_time_factor_ != NULL) control_change_time_factor_->::Common::MsgControlChangeTimeFactor::Clear();
  _clear_bit(3);
}
inline const ::Common::MsgControlChangeTimeFactor& MsgClientToSim_Content::control_change_time_factor() const {
  return control_change_time_factor_ != NULL ? *control_change_time_factor_ : *default_instance_->control_change_time_factor_;
}
inline ::Common::MsgControlChangeTimeFactor* MsgClientToSim_Content::mutable_control_change_time_factor() {
  _set_bit(3);
  if (control_change_time_factor_ == NULL) control_change_time_factor_ = new ::Common::MsgControlChangeTimeFactor;
  return control_change_time_factor_;
}

// optional .MsgsClientToSim.MsgControlDatetimeChange control_date_time_change = 5;
inline bool MsgClientToSim_Content::has_control_date_time_change() const {
  return _has_bit(4);
}
inline void MsgClientToSim_Content::clear_control_date_time_change() {
  if (control_date_time_change_ != NULL) control_date_time_change_->::MsgsClientToSim::MsgControlDatetimeChange::Clear();
  _clear_bit(4);
}
inline const ::MsgsClientToSim::MsgControlDatetimeChange& MsgClientToSim_Content::control_date_time_change() const {
  return control_date_time_change_ != NULL ? *control_date_time_change_ : *default_instance_->control_date_time_change_;
}
inline ::MsgsClientToSim::MsgControlDatetimeChange* MsgClientToSim_Content::mutable_control_date_time_change() {
  _set_bit(4);
  if (control_date_time_change_ == NULL) control_date_time_change_ = new ::MsgsClientToSim::MsgControlDatetimeChange;
  return control_date_time_change_;
}

// optional .MsgsClientToSim.MsgControlCheckPointSaveNow control_checkpoint_save_now = 6;
inline bool MsgClientToSim_Content::has_control_checkpoint_save_now() const {
  return _has_bit(5);
}
inline void MsgClientToSim_Content::clear_control_checkpoint_save_now() {
  if (control_checkpoint_save_now_ != NULL) control_checkpoint_save_now_->::MsgsClientToSim::MsgControlCheckPointSaveNow::Clear();
  _clear_bit(5);
}
inline const ::MsgsClientToSim::MsgControlCheckPointSaveNow& MsgClientToSim_Content::control_checkpoint_save_now() const {
  return control_checkpoint_save_now_ != NULL ? *control_checkpoint_save_now_ : *default_instance_->control_checkpoint_save_now_;
}
inline ::MsgsClientToSim::MsgControlCheckPointSaveNow* MsgClientToSim_Content::mutable_control_checkpoint_save_now() {
  _set_bit(5);
  if (control_checkpoint_save_now_ == NULL) control_checkpoint_save_now_ = new ::MsgsClientToSim::MsgControlCheckPointSaveNow;
  return control_checkpoint_save_now_;
}

// optional .MsgsClientToSim.MsgControlCheckPointSetFrequency control_checkpoint_set_frequency = 7;
inline bool MsgClientToSim_Content::has_control_checkpoint_set_frequency() const {
  return _has_bit(6);
}
inline void MsgClientToSim_Content::clear_control_checkpoint_set_frequency() {
  if (control_checkpoint_set_frequency_ != NULL) control_checkpoint_set_frequency_->::MsgsClientToSim::MsgControlCheckPointSetFrequency::Clear();
  _clear_bit(6);
}
inline const ::MsgsClientToSim::MsgControlCheckPointSetFrequency& MsgClientToSim_Content::control_checkpoint_set_frequency() const {
  return control_checkpoint_set_frequency_ != NULL ? *control_checkpoint_set_frequency_ : *default_instance_->control_checkpoint_set_frequency_;
}
inline ::MsgsClientToSim::MsgControlCheckPointSetFrequency* MsgClientToSim_Content::mutable_control_checkpoint_set_frequency() {
  _set_bit(6);
  if (control_checkpoint_set_frequency_ == NULL) control_checkpoint_set_frequency_ = new ::MsgsClientToSim::MsgControlCheckPointSetFrequency;
  return control_checkpoint_set_frequency_;
}

// optional .MsgsClientToSim.MsgControlEnableVisionCones control_toggle_vision_cones = 8;
inline bool MsgClientToSim_Content::has_control_toggle_vision_cones() const {
  return _has_bit(7);
}
inline void MsgClientToSim_Content::clear_control_toggle_vision_cones() {
  if (control_toggle_vision_cones_ != NULL) control_toggle_vision_cones_->::MsgsClientToSim::MsgControlEnableVisionCones::Clear();
  _clear_bit(7);
}
inline const ::MsgsClientToSim::MsgControlEnableVisionCones& MsgClientToSim_Content::control_toggle_vision_cones() const {
  return control_toggle_vision_cones_ != NULL ? *control_toggle_vision_cones_ : *default_instance_->control_toggle_vision_cones_;
}
inline ::MsgsClientToSim::MsgControlEnableVisionCones* MsgClientToSim_Content::mutable_control_toggle_vision_cones() {
  _set_bit(7);
  if (control_toggle_vision_cones_ == NULL) control_toggle_vision_cones_ = new ::MsgsClientToSim::MsgControlEnableVisionCones;
  return control_toggle_vision_cones_;
}

// optional .Common.MsgUnitOrder unit_order = 9;
inline bool MsgClientToSim_Content::has_unit_order() const {
  return _has_bit(8);
}
inline void MsgClientToSim_Content::clear_unit_order() {
  if (unit_order_ != NULL) unit_order_->::Common::MsgUnitOrder::Clear();
  _clear_bit(8);
}
inline const ::Common::MsgUnitOrder& MsgClientToSim_Content::unit_order() const {
  return unit_order_ != NULL ? *unit_order_ : *default_instance_->unit_order_;
}
inline ::Common::MsgUnitOrder* MsgClientToSim_Content::mutable_unit_order() {
  _set_bit(8);
  if (unit_order_ == NULL) unit_order_ = new ::Common::MsgUnitOrder;
  return unit_order_;
}

// optional .Common.MsgAutomatOrder automat_order = 10;
inline bool MsgClientToSim_Content::has_automat_order() const {
  return _has_bit(9);
}
inline void MsgClientToSim_Content::clear_automat_order() {
  if (automat_order_ != NULL) automat_order_->::Common::MsgAutomatOrder::Clear();
  _clear_bit(9);
}
inline const ::Common::MsgAutomatOrder& MsgClientToSim_Content::automat_order() const {
  return automat_order_ != NULL ? *automat_order_ : *default_instance_->automat_order_;
}
inline ::Common::MsgAutomatOrder* MsgClientToSim_Content::mutable_automat_order() {
  _set_bit(9);
  if (automat_order_ == NULL) automat_order_ = new ::Common::MsgAutomatOrder;
  return automat_order_;
}

// optional .Common.MsgCrowdOrder crowd_order = 11;
inline bool MsgClientToSim_Content::has_crowd_order() const {
  return _has_bit(10);
}
inline void MsgClientToSim_Content::clear_crowd_order() {
  if (crowd_order_ != NULL) crowd_order_->::Common::MsgCrowdOrder::Clear();
  _clear_bit(10);
}
inline const ::Common::MsgCrowdOrder& MsgClientToSim_Content::crowd_order() const {
  return crowd_order_ != NULL ? *crowd_order_ : *default_instance_->crowd_order_;
}
inline ::Common::MsgCrowdOrder* MsgClientToSim_Content::mutable_crowd_order() {
  _set_bit(10);
  if (crowd_order_ == NULL) crowd_order_ = new ::Common::MsgCrowdOrder;
  return crowd_order_;
}

// optional .MsgsClientToSim.MsgFragOrder frag_order = 12;
inline bool MsgClientToSim_Content::has_frag_order() const {
  return _has_bit(11);
}
inline void MsgClientToSim_Content::clear_frag_order() {
  if (frag_order_ != NULL) frag_order_->::MsgsClientToSim::MsgFragOrder::Clear();
  _clear_bit(11);
}
inline const ::MsgsClientToSim::MsgFragOrder& MsgClientToSim_Content::frag_order() const {
  return frag_order_ != NULL ? *frag_order_ : *default_instance_->frag_order_;
}
inline ::MsgsClientToSim::MsgFragOrder* MsgClientToSim_Content::mutable_frag_order() {
  _set_bit(11);
  if (frag_order_ == NULL) frag_order_ = new ::MsgsClientToSim::MsgFragOrder;
  return frag_order_;
}

// optional .MsgsClientToSim.MsgSetAutomatMode set_automat_mode = 13;
inline bool MsgClientToSim_Content::has_set_automat_mode() const {
  return _has_bit(12);
}
inline void MsgClientToSim_Content::clear_set_automat_mode() {
  if (set_automat_mode_ != NULL) set_automat_mode_->::MsgsClientToSim::MsgSetAutomatMode::Clear();
  _clear_bit(12);
}
inline const ::MsgsClientToSim::MsgSetAutomatMode& MsgClientToSim_Content::set_automat_mode() const {
  return set_automat_mode_ != NULL ? *set_automat_mode_ : *default_instance_->set_automat_mode_;
}
inline ::MsgsClientToSim::MsgSetAutomatMode* MsgClientToSim_Content::mutable_set_automat_mode() {
  _set_bit(12);
  if (set_automat_mode_ == NULL) set_automat_mode_ = new ::MsgsClientToSim::MsgSetAutomatMode;
  return set_automat_mode_;
}

// optional .MsgsClientToSim.MsgUnitCreationRequest unit_creation_request = 14;
inline bool MsgClientToSim_Content::has_unit_creation_request() const {
  return _has_bit(13);
}
inline void MsgClientToSim_Content::clear_unit_creation_request() {
  if (unit_creation_request_ != NULL) unit_creation_request_->::MsgsClientToSim::MsgUnitCreationRequest::Clear();
  _clear_bit(13);
}
inline const ::MsgsClientToSim::MsgUnitCreationRequest& MsgClientToSim_Content::unit_creation_request() const {
  return unit_creation_request_ != NULL ? *unit_creation_request_ : *default_instance_->unit_creation_request_;
}
inline ::MsgsClientToSim::MsgUnitCreationRequest* MsgClientToSim_Content::mutable_unit_creation_request() {
  _set_bit(13);
  if (unit_creation_request_ == NULL) unit_creation_request_ = new ::MsgsClientToSim::MsgUnitCreationRequest;
  return unit_creation_request_;
}

// optional .MsgsClientToSim.MsgUnitMagicAction unit_magic_action = 15;
inline bool MsgClientToSim_Content::has_unit_magic_action() const {
  return _has_bit(14);
}
inline void MsgClientToSim_Content::clear_unit_magic_action() {
  if (unit_magic_action_ != NULL) unit_magic_action_->::MsgsClientToSim::MsgUnitMagicAction::Clear();
  _clear_bit(14);
}
inline const ::MsgsClientToSim::MsgUnitMagicAction& MsgClientToSim_Content::unit_magic_action() const {
  return unit_magic_action_ != NULL ? *unit_magic_action_ : *default_instance_->unit_magic_action_;
}
inline ::MsgsClientToSim::MsgUnitMagicAction* MsgClientToSim_Content::mutable_unit_magic_action() {
  _set_bit(14);
  if (unit_magic_action_ == NULL) unit_magic_action_ = new ::MsgsClientToSim::MsgUnitMagicAction;
  return unit_magic_action_;
}

// optional .MsgsClientToSim.MsgObjectMagicAction object_magic_action = 16;
inline bool MsgClientToSim_Content::has_object_magic_action() const {
  return _has_bit(15);
}
inline void MsgClientToSim_Content::clear_object_magic_action() {
  if (object_magic_action_ != NULL) object_magic_action_->::MsgsClientToSim::MsgObjectMagicAction::Clear();
  _clear_bit(15);
}
inline const ::MsgsClientToSim::MsgObjectMagicAction& MsgClientToSim_Content::object_magic_action() const {
  return object_magic_action_ != NULL ? *object_magic_action_ : *default_instance_->object_magic_action_;
}
inline ::MsgsClientToSim::MsgObjectMagicAction* MsgClientToSim_Content::mutable_object_magic_action() {
  _set_bit(15);
  if (object_magic_action_ == NULL) object_magic_action_ = new ::MsgsClientToSim::MsgObjectMagicAction;
  return object_magic_action_;
}

// optional .MsgsClientToSim.MsgKnowledgeMagicAction knowledge_magic_action = 17;
inline bool MsgClientToSim_Content::has_knowledge_magic_action() const {
  return _has_bit(16);
}
inline void MsgClientToSim_Content::clear_knowledge_magic_action() {
  if (knowledge_magic_action_ != NULL) knowledge_magic_action_->::MsgsClientToSim::MsgKnowledgeMagicAction::Clear();
  _clear_bit(16);
}
inline const ::MsgsClientToSim::MsgKnowledgeMagicAction& MsgClientToSim_Content::knowledge_magic_action() const {
  return knowledge_magic_action_ != NULL ? *knowledge_magic_action_ : *default_instance_->knowledge_magic_action_;
}
inline ::MsgsClientToSim::MsgKnowledgeMagicAction* MsgClientToSim_Content::mutable_knowledge_magic_action() {
  _set_bit(16);
  if (knowledge_magic_action_ == NULL) knowledge_magic_action_ = new ::MsgsClientToSim::MsgKnowledgeMagicAction;
  return knowledge_magic_action_;
}

// optional .MsgsClientToSim.MsgMagicAction magic_action = 18;
inline bool MsgClientToSim_Content::has_magic_action() const {
  return _has_bit(17);
}
inline void MsgClientToSim_Content::clear_magic_action() {
  if (magic_action_ != NULL) magic_action_->::MsgsClientToSim::MsgMagicAction::Clear();
  _clear_bit(17);
}
inline const ::MsgsClientToSim::MsgMagicAction& MsgClientToSim_Content::magic_action() const {
  return magic_action_ != NULL ? *magic_action_ : *default_instance_->magic_action_;
}
inline ::MsgsClientToSim::MsgMagicAction* MsgClientToSim_Content::mutable_magic_action() {
  _set_bit(17);
  if (magic_action_ == NULL) magic_action_ = new ::MsgsClientToSim::MsgMagicAction;
  return magic_action_;
}

// optional .MsgsClientToSim.MsgControlCheckPointListRequest control_checkpoint_list_request = 19;
inline bool MsgClientToSim_Content::has_control_checkpoint_list_request() const {
  return _has_bit(18);
}
inline void MsgClientToSim_Content::clear_control_checkpoint_list_request() {
  if (control_checkpoint_list_request_ != NULL) control_checkpoint_list_request_->::MsgsClientToSim::MsgControlCheckPointListRequest::Clear();
  _clear_bit(18);
}
inline const ::MsgsClientToSim::MsgControlCheckPointListRequest& MsgClientToSim_Content::control_checkpoint_list_request() const {
  return control_checkpoint_list_request_ != NULL ? *control_checkpoint_list_request_ : *default_instance_->control_checkpoint_list_request_;
}
inline ::MsgsClientToSim::MsgControlCheckPointListRequest* MsgClientToSim_Content::mutable_control_checkpoint_list_request() {
  _set_bit(18);
  if (control_checkpoint_list_request_ == NULL) control_checkpoint_list_request_ = new ::MsgsClientToSim::MsgControlCheckPointListRequest;
  return control_checkpoint_list_request_;
}

// optional .MsgsClientToSim.MsgControlCheckPointDeleteRequest control_checkpoint_delete_request = 20;
inline bool MsgClientToSim_Content::has_control_checkpoint_delete_request() const {
  return _has_bit(19);
}
inline void MsgClientToSim_Content::clear_control_checkpoint_delete_request() {
  if (control_checkpoint_delete_request_ != NULL) control_checkpoint_delete_request_->::MsgsClientToSim::MsgControlCheckPointDeleteRequest::Clear();
  _clear_bit(19);
}
inline const ::MsgsClientToSim::MsgControlCheckPointDeleteRequest& MsgClientToSim_Content::control_checkpoint_delete_request() const {
  return control_checkpoint_delete_request_ != NULL ? *control_checkpoint_delete_request_ : *default_instance_->control_checkpoint_delete_request_;
}
inline ::MsgsClientToSim::MsgControlCheckPointDeleteRequest* MsgClientToSim_Content::mutable_control_checkpoint_delete_request() {
  _set_bit(19);
  if (control_checkpoint_delete_request_ == NULL) control_checkpoint_delete_request_ = new ::MsgsClientToSim::MsgControlCheckPointDeleteRequest;
  return control_checkpoint_delete_request_;
}

// -------------------------------------------------------------------

// MsgClientToSim

// optional int32 context = 1;
inline bool MsgClientToSim::has_context() const {
  return _has_bit(0);
}
inline void MsgClientToSim::clear_context() {
  context_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 MsgClientToSim::context() const {
  return context_;
}
inline void MsgClientToSim::set_context(::google::protobuf::int32 value) {
  _set_bit(0);
  context_ = value;
}

// required .MsgsClientToSim.MsgClientToSim.Content message = 2;
inline bool MsgClientToSim::has_message() const {
  return _has_bit(1);
}
inline void MsgClientToSim::clear_message() {
  if (message_ != NULL) message_->::MsgsClientToSim::MsgClientToSim_Content::Clear();
  _clear_bit(1);
}
inline const ::MsgsClientToSim::MsgClientToSim_Content& MsgClientToSim::message() const {
  return message_ != NULL ? *message_ : *default_instance_->message_;
}
inline ::MsgsClientToSim::MsgClientToSim_Content* MsgClientToSim::mutable_message() {
  _set_bit(1);
  if (message_ == NULL) message_ = new ::MsgsClientToSim::MsgClientToSim_Content;
  return message_;
}


}  // namespace MsgsClientToSim

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsClientToSim::MsgUnitMagicAction_Type>() {
  return ::MsgsClientToSim::MsgUnitMagicAction_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsClientToSim::MsgKnowledgeMagicAction_Type>() {
  return ::MsgsClientToSim::MsgKnowledgeMagicAction_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsClientToSim::MsgObjectMagicAction_Type>() {
  return ::MsgsClientToSim::MsgObjectMagicAction_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsClientToSim::MsgObjectMagicAction_Attribute>() {
  return ::MsgsClientToSim::MsgObjectMagicAction_Attribute_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsClientToSim::MsgMagicAction_Type>() {
  return ::MsgsClientToSim::MsgMagicAction_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_ClientToSim_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_LauncherToAdmin_2eproto__INCLUDED
#define PROTOBUF_LauncherToAdmin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Common.pb.h"

namespace MsgsLauncherToAdmin {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LauncherToAdmin_2eproto();
void protobuf_AssignDesc_LauncherToAdmin_2eproto();
void protobuf_ShutdownFile_LauncherToAdmin_2eproto();

class MsgConnectionAck;
class MsgExercicesListResponse;
class MsgControlStartAck;
class MsgControlPauseAck;
class MsgControlStopAck;

enum MsgConnectionAck_ErrorCode {
  MsgConnectionAck_ErrorCode_success = 0,
  MsgConnectionAck_ErrorCode_invalid_connection = 1,
  MsgConnectionAck_ErrorCode_incompatible_protocol_version = 2
};
bool MsgConnectionAck_ErrorCode_IsValid(int value);
const MsgConnectionAck_ErrorCode MsgConnectionAck_ErrorCode_ErrorCode_MIN = MsgConnectionAck_ErrorCode_success;
const MsgConnectionAck_ErrorCode MsgConnectionAck_ErrorCode_ErrorCode_MAX = MsgConnectionAck_ErrorCode_incompatible_protocol_version;

const ::google::protobuf::EnumDescriptor* MsgConnectionAck_ErrorCode_descriptor();
inline const ::std::string& MsgConnectionAck_ErrorCode_Name(MsgConnectionAck_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgConnectionAck_ErrorCode_descriptor(), value);
}
inline bool MsgConnectionAck_ErrorCode_Parse(
    const ::std::string& name, MsgConnectionAck_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgConnectionAck_ErrorCode>(
    MsgConnectionAck_ErrorCode_descriptor(), name, value);
}
enum MsgExercicesListResponse_ErrorCode {
  MsgExercicesListResponse_ErrorCode_success = 0,
  MsgExercicesListResponse_ErrorCode_failure = 1
};
bool MsgExercicesListResponse_ErrorCode_IsValid(int value);
const MsgExercicesListResponse_ErrorCode MsgExercicesListResponse_ErrorCode_ErrorCode_MIN = MsgExercicesListResponse_ErrorCode_success;
const MsgExercicesListResponse_ErrorCode MsgExercicesListResponse_ErrorCode_ErrorCode_MAX = MsgExercicesListResponse_ErrorCode_failure;

const ::google::protobuf::EnumDescriptor* MsgExercicesListResponse_ErrorCode_descriptor();
inline const ::std::string& MsgExercicesListResponse_ErrorCode_Name(MsgExercicesListResponse_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgExercicesListResponse_ErrorCode_descriptor(), value);
}
inline bool MsgExercicesListResponse_ErrorCode_Parse(
    const ::std::string& name, MsgExercicesListResponse_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgExercicesListResponse_ErrorCode>(
    MsgExercicesListResponse_ErrorCode_descriptor(), name, value);
}
enum MsgControlStartAck_ErrorCode {
  MsgControlStartAck_ErrorCode_success = 0,
  MsgControlStartAck_ErrorCode_bad_exercise_name = 1
};
bool MsgControlStartAck_ErrorCode_IsValid(int value);
const MsgControlStartAck_ErrorCode MsgControlStartAck_ErrorCode_ErrorCode_MIN = MsgControlStartAck_ErrorCode_success;
const MsgControlStartAck_ErrorCode MsgControlStartAck_ErrorCode_ErrorCode_MAX = MsgControlStartAck_ErrorCode_bad_exercise_name;

const ::google::protobuf::EnumDescriptor* MsgControlStartAck_ErrorCode_descriptor();
inline const ::std::string& MsgControlStartAck_ErrorCode_Name(MsgControlStartAck_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgControlStartAck_ErrorCode_descriptor(), value);
}
inline bool MsgControlStartAck_ErrorCode_Parse(
    const ::std::string& name, MsgControlStartAck_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgControlStartAck_ErrorCode>(
    MsgControlStartAck_ErrorCode_descriptor(), name, value);
}
enum MsgControlPauseAck_ErrorCode {
  MsgControlPauseAck_ErrorCode_success = 0,
  MsgControlPauseAck_ErrorCode_bad_exercise_name = 1
};
bool MsgControlPauseAck_ErrorCode_IsValid(int value);
const MsgControlPauseAck_ErrorCode MsgControlPauseAck_ErrorCode_ErrorCode_MIN = MsgControlPauseAck_ErrorCode_success;
const MsgControlPauseAck_ErrorCode MsgControlPauseAck_ErrorCode_ErrorCode_MAX = MsgControlPauseAck_ErrorCode_bad_exercise_name;

const ::google::protobuf::EnumDescriptor* MsgControlPauseAck_ErrorCode_descriptor();
inline const ::std::string& MsgControlPauseAck_ErrorCode_Name(MsgControlPauseAck_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgControlPauseAck_ErrorCode_descriptor(), value);
}
inline bool MsgControlPauseAck_ErrorCode_Parse(
    const ::std::string& name, MsgControlPauseAck_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgControlPauseAck_ErrorCode>(
    MsgControlPauseAck_ErrorCode_descriptor(), name, value);
}
enum MsgControlStopAck_ErrorCode {
  MsgControlStopAck_ErrorCode_success = 0,
  MsgControlStopAck_ErrorCode_bad_exercise_name = 1
};
bool MsgControlStopAck_ErrorCode_IsValid(int value);
const MsgControlStopAck_ErrorCode MsgControlStopAck_ErrorCode_ErrorCode_MIN = MsgControlStopAck_ErrorCode_success;
const MsgControlStopAck_ErrorCode MsgControlStopAck_ErrorCode_ErrorCode_MAX = MsgControlStopAck_ErrorCode_bad_exercise_name;

const ::google::protobuf::EnumDescriptor* MsgControlStopAck_ErrorCode_descriptor();
inline const ::std::string& MsgControlStopAck_ErrorCode_Name(MsgControlStopAck_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgControlStopAck_ErrorCode_descriptor(), value);
}
inline bool MsgControlStopAck_ErrorCode_Parse(
    const ::std::string& name, MsgControlStopAck_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgControlStopAck_ErrorCode>(
    MsgControlStopAck_ErrorCode_descriptor(), name, value);
}
// ===================================================================

class MsgConnectionAck : public ::google::protobuf::Message {
 public:
  MsgConnectionAck();
  virtual ~MsgConnectionAck();
  
  MsgConnectionAck(const MsgConnectionAck& from);
  
  inline MsgConnectionAck& operator=(const MsgConnectionAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgConnectionAck& default_instance();
  void Swap(MsgConnectionAck* other);
  
  // implements Message ----------------------------------------------
  
  MsgConnectionAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgConnectionAck& from);
  void MergeFrom(const MsgConnectionAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgConnectionAck_ErrorCode ErrorCode;
  static const ErrorCode success = MsgConnectionAck_ErrorCode_success;
  static const ErrorCode invalid_connection = MsgConnectionAck_ErrorCode_invalid_connection;
  static const ErrorCode incompatible_protocol_version = MsgConnectionAck_ErrorCode_incompatible_protocol_version;
  static inline bool ErrorCode_IsValid(int value) {
    return MsgConnectionAck_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    MsgConnectionAck_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    MsgConnectionAck_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return MsgConnectionAck_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return MsgConnectionAck_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return MsgConnectionAck_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsLauncherToAdmin.MsgConnectionAck.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode error_code() const;
  inline void set_error_code(::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode value);
  
  // optional int32 context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline ::google::protobuf::int32 context() const;
  inline void set_context(::google::protobuf::int32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::google::protobuf::int32 context_;
  friend void  protobuf_AddDesc_LauncherToAdmin_2eproto();
  friend void protobuf_AssignDesc_LauncherToAdmin_2eproto();
  friend void protobuf_ShutdownFile_LauncherToAdmin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgConnectionAck* default_instance_;
};
// -------------------------------------------------------------------

class MsgExercicesListResponse : public ::google::protobuf::Message {
 public:
  MsgExercicesListResponse();
  virtual ~MsgExercicesListResponse();
  
  MsgExercicesListResponse(const MsgExercicesListResponse& from);
  
  inline MsgExercicesListResponse& operator=(const MsgExercicesListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgExercicesListResponse& default_instance();
  void Swap(MsgExercicesListResponse* other);
  
  // implements Message ----------------------------------------------
  
  MsgExercicesListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgExercicesListResponse& from);
  void MergeFrom(const MsgExercicesListResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgExercicesListResponse_ErrorCode ErrorCode;
  static const ErrorCode success = MsgExercicesListResponse_ErrorCode_success;
  static const ErrorCode failure = MsgExercicesListResponse_ErrorCode_failure;
  static inline bool ErrorCode_IsValid(int value) {
    return MsgExercicesListResponse_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    MsgExercicesListResponse_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    MsgExercicesListResponse_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return MsgExercicesListResponse_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return MsgExercicesListResponse_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return MsgExercicesListResponse_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsLauncherToAdmin.MsgExercicesListResponse.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode error_code() const;
  inline void set_error_code(::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode value);
  
  // repeated string exercise_name = 2;
  inline int exercise_name_size() const;
  inline void clear_exercise_name();
  static const int kExerciseNameFieldNumber = 2;
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& exercise_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_exercise_name();
  inline const ::std::string& exercise_name(int index) const;
  inline ::std::string* mutable_exercise_name(int index);
  inline void set_exercise_name(int index, const ::std::string& value);
  inline void set_exercise_name(int index, const char* value);
  inline void set_exercise_name(int index, const char* value, size_t size);
  inline ::std::string* add_exercise_name();
  inline void add_exercise_name(const ::std::string& value);
  inline void add_exercise_name(const char* value);
  inline void add_exercise_name(const char* value, size_t size);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::google::protobuf::RepeatedPtrField< ::std::string> exercise_name_;
  friend void  protobuf_AddDesc_LauncherToAdmin_2eproto();
  friend void protobuf_AssignDesc_LauncherToAdmin_2eproto();
  friend void protobuf_ShutdownFile_LauncherToAdmin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgExercicesListResponse* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlStartAck : public ::google::protobuf::Message {
 public:
  MsgControlStartAck();
  virtual ~MsgControlStartAck();
  
  MsgControlStartAck(const MsgControlStartAck& from);
  
  inline MsgControlStartAck& operator=(const MsgControlStartAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlStartAck& default_instance();
  void Swap(MsgControlStartAck* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlStartAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlStartAck& from);
  void MergeFrom(const MsgControlStartAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgControlStartAck_ErrorCode ErrorCode;
  static const ErrorCode success = MsgControlStartAck_ErrorCode_success;
  static const ErrorCode bad_exercise_name = MsgControlStartAck_ErrorCode_bad_exercise_name;
  static inline bool ErrorCode_IsValid(int value) {
    return MsgControlStartAck_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    MsgControlStartAck_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    MsgControlStartAck_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return MsgControlStartAck_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return MsgControlStartAck_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return MsgControlStartAck_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsLauncherToAdmin.MsgControlStartAck.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode error_code() const;
  inline void set_error_code(::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode value);
  
  // required string exercise_name = 2;
  inline bool has_exercise_name() const;
  inline void clear_exercise_name();
  static const int kExerciseNameFieldNumber = 2;
  inline const ::std::string& exercise_name() const;
  inline void set_exercise_name(const ::std::string& value);
  inline void set_exercise_name(const char* value);
  inline void set_exercise_name(const char* value, size_t size);
  inline ::std::string* mutable_exercise_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::std::string* exercise_name_;
  static const ::std::string _default_exercise_name_;
  friend void  protobuf_AddDesc_LauncherToAdmin_2eproto();
  friend void protobuf_AssignDesc_LauncherToAdmin_2eproto();
  friend void protobuf_ShutdownFile_LauncherToAdmin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlStartAck* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlPauseAck : public ::google::protobuf::Message {
 public:
  MsgControlPauseAck();
  virtual ~MsgControlPauseAck();
  
  MsgControlPauseAck(const MsgControlPauseAck& from);
  
  inline MsgControlPauseAck& operator=(const MsgControlPauseAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlPauseAck& default_instance();
  void Swap(MsgControlPauseAck* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlPauseAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlPauseAck& from);
  void MergeFrom(const MsgControlPauseAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgControlPauseAck_ErrorCode ErrorCode;
  static const ErrorCode success = MsgControlPauseAck_ErrorCode_success;
  static const ErrorCode bad_exercise_name = MsgControlPauseAck_ErrorCode_bad_exercise_name;
  static inline bool ErrorCode_IsValid(int value) {
    return MsgControlPauseAck_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    MsgControlPauseAck_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    MsgControlPauseAck_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return MsgControlPauseAck_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return MsgControlPauseAck_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return MsgControlPauseAck_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsLauncherToAdmin.MsgControlPauseAck.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode error_code() const;
  inline void set_error_code(::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode value);
  
  // required string exercise_name = 2;
  inline bool has_exercise_name() const;
  inline void clear_exercise_name();
  static const int kExerciseNameFieldNumber = 2;
  inline const ::std::string& exercise_name() const;
  inline void set_exercise_name(const ::std::string& value);
  inline void set_exercise_name(const char* value);
  inline void set_exercise_name(const char* value, size_t size);
  inline ::std::string* mutable_exercise_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::std::string* exercise_name_;
  static const ::std::string _default_exercise_name_;
  friend void  protobuf_AddDesc_LauncherToAdmin_2eproto();
  friend void protobuf_AssignDesc_LauncherToAdmin_2eproto();
  friend void protobuf_ShutdownFile_LauncherToAdmin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlPauseAck* default_instance_;
};
// -------------------------------------------------------------------

class MsgControlStopAck : public ::google::protobuf::Message {
 public:
  MsgControlStopAck();
  virtual ~MsgControlStopAck();
  
  MsgControlStopAck(const MsgControlStopAck& from);
  
  inline MsgControlStopAck& operator=(const MsgControlStopAck& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControlStopAck& default_instance();
  void Swap(MsgControlStopAck* other);
  
  // implements Message ----------------------------------------------
  
  MsgControlStopAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControlStopAck& from);
  void MergeFrom(const MsgControlStopAck& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MsgControlStopAck_ErrorCode ErrorCode;
  static const ErrorCode success = MsgControlStopAck_ErrorCode_success;
  static const ErrorCode bad_exercise_name = MsgControlStopAck_ErrorCode_bad_exercise_name;
  static inline bool ErrorCode_IsValid(int value) {
    return MsgControlStopAck_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    MsgControlStopAck_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    MsgControlStopAck_ErrorCode_ErrorCode_MAX;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return MsgControlStopAck_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return MsgControlStopAck_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return MsgControlStopAck_ErrorCode_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required .MsgsLauncherToAdmin.MsgControlStopAck.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode error_code() const;
  inline void set_error_code(::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode value);
  
  // required string exercise_name = 2;
  inline bool has_exercise_name() const;
  inline void clear_exercise_name();
  static const int kExerciseNameFieldNumber = 2;
  inline const ::std::string& exercise_name() const;
  inline void set_exercise_name(const ::std::string& value);
  inline void set_exercise_name(const char* value);
  inline void set_exercise_name(const char* value, size_t size);
  inline ::std::string* mutable_exercise_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  int error_code_;
  ::std::string* exercise_name_;
  static const ::std::string _default_exercise_name_;
  friend void  protobuf_AddDesc_LauncherToAdmin_2eproto();
  friend void protobuf_AssignDesc_LauncherToAdmin_2eproto();
  friend void protobuf_ShutdownFile_LauncherToAdmin_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MsgControlStopAck* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// MsgConnectionAck

// required .MsgsLauncherToAdmin.MsgConnectionAck.ErrorCode error_code = 1;
inline bool MsgConnectionAck::has_error_code() const {
  return _has_bit(0);
}
inline void MsgConnectionAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode MsgConnectionAck::error_code() const {
  return static_cast< ::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode >(error_code_);
}
inline void MsgConnectionAck::set_error_code(::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// optional int32 context = 2;
inline bool MsgConnectionAck::has_context() const {
  return _has_bit(1);
}
inline void MsgConnectionAck::clear_context() {
  context_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 MsgConnectionAck::context() const {
  return context_;
}
inline void MsgConnectionAck::set_context(::google::protobuf::int32 value) {
  _set_bit(1);
  context_ = value;
}

// -------------------------------------------------------------------

// MsgExercicesListResponse

// required .MsgsLauncherToAdmin.MsgExercicesListResponse.ErrorCode error_code = 1;
inline bool MsgExercicesListResponse::has_error_code() const {
  return _has_bit(0);
}
inline void MsgExercicesListResponse::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode MsgExercicesListResponse::error_code() const {
  return static_cast< ::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode >(error_code_);
}
inline void MsgExercicesListResponse::set_error_code(::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// repeated string exercise_name = 2;
inline int MsgExercicesListResponse::exercise_name_size() const {
  return exercise_name_.size();
}
inline void MsgExercicesListResponse::clear_exercise_name() {
  exercise_name_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgExercicesListResponse::exercise_name() const {
  return exercise_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgExercicesListResponse::mutable_exercise_name() {
  return &exercise_name_;
}
inline const ::std::string& MsgExercicesListResponse::exercise_name(int index) const {
  return exercise_name_.Get(index);
}
inline ::std::string* MsgExercicesListResponse::mutable_exercise_name(int index) {
  return exercise_name_.Mutable(index);
}
inline void MsgExercicesListResponse::set_exercise_name(int index, const ::std::string& value) {
  exercise_name_.Mutable(index)->assign(value);
}
inline void MsgExercicesListResponse::set_exercise_name(int index, const char* value) {
  exercise_name_.Mutable(index)->assign(value);
}
inline void MsgExercicesListResponse::set_exercise_name(int index, const char* value, size_t size) {
  exercise_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgExercicesListResponse::add_exercise_name() {
  return exercise_name_.Add();
}
inline void MsgExercicesListResponse::add_exercise_name(const ::std::string& value) {
  exercise_name_.Add()->assign(value);
}
inline void MsgExercicesListResponse::add_exercise_name(const char* value) {
  exercise_name_.Add()->assign(value);
}
inline void MsgExercicesListResponse::add_exercise_name(const char* value, size_t size) {
  exercise_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}

// -------------------------------------------------------------------

// MsgControlStartAck

// required .MsgsLauncherToAdmin.MsgControlStartAck.ErrorCode error_code = 1;
inline bool MsgControlStartAck::has_error_code() const {
  return _has_bit(0);
}
inline void MsgControlStartAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode MsgControlStartAck::error_code() const {
  return static_cast< ::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode >(error_code_);
}
inline void MsgControlStartAck::set_error_code(::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// required string exercise_name = 2;
inline bool MsgControlStartAck::has_exercise_name() const {
  return _has_bit(1);
}
inline void MsgControlStartAck::clear_exercise_name() {
  if (exercise_name_ != &_default_exercise_name_) {
    exercise_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MsgControlStartAck::exercise_name() const {
  return *exercise_name_;
}
inline void MsgControlStartAck::set_exercise_name(const ::std::string& value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlStartAck::set_exercise_name(const char* value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlStartAck::set_exercise_name(const char* value, size_t size) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgControlStartAck::mutable_exercise_name() {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  return exercise_name_;
}

// -------------------------------------------------------------------

// MsgControlPauseAck

// required .MsgsLauncherToAdmin.MsgControlPauseAck.ErrorCode error_code = 1;
inline bool MsgControlPauseAck::has_error_code() const {
  return _has_bit(0);
}
inline void MsgControlPauseAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode MsgControlPauseAck::error_code() const {
  return static_cast< ::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode >(error_code_);
}
inline void MsgControlPauseAck::set_error_code(::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// required string exercise_name = 2;
inline bool MsgControlPauseAck::has_exercise_name() const {
  return _has_bit(1);
}
inline void MsgControlPauseAck::clear_exercise_name() {
  if (exercise_name_ != &_default_exercise_name_) {
    exercise_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MsgControlPauseAck::exercise_name() const {
  return *exercise_name_;
}
inline void MsgControlPauseAck::set_exercise_name(const ::std::string& value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlPauseAck::set_exercise_name(const char* value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlPauseAck::set_exercise_name(const char* value, size_t size) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgControlPauseAck::mutable_exercise_name() {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  return exercise_name_;
}

// -------------------------------------------------------------------

// MsgControlStopAck

// required .MsgsLauncherToAdmin.MsgControlStopAck.ErrorCode error_code = 1;
inline bool MsgControlStopAck::has_error_code() const {
  return _has_bit(0);
}
inline void MsgControlStopAck::clear_error_code() {
  error_code_ = 0;
  _clear_bit(0);
}
inline ::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode MsgControlStopAck::error_code() const {
  return static_cast< ::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode >(error_code_);
}
inline void MsgControlStopAck::set_error_code(::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode value) {
  GOOGLE_DCHECK(::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode_IsValid(value));
  _set_bit(0);
  error_code_ = value;
}

// required string exercise_name = 2;
inline bool MsgControlStopAck::has_exercise_name() const {
  return _has_bit(1);
}
inline void MsgControlStopAck::clear_exercise_name() {
  if (exercise_name_ != &_default_exercise_name_) {
    exercise_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& MsgControlStopAck::exercise_name() const {
  return *exercise_name_;
}
inline void MsgControlStopAck::set_exercise_name(const ::std::string& value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlStopAck::set_exercise_name(const char* value) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(value);
}
inline void MsgControlStopAck::set_exercise_name(const char* value, size_t size) {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  exercise_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgControlStopAck::mutable_exercise_name() {
  _set_bit(1);
  if (exercise_name_ == &_default_exercise_name_) {
    exercise_name_ = new ::std::string;
  }
  return exercise_name_;
}


}  // namespace MsgsLauncherToAdmin

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode>() {
  return ::MsgsLauncherToAdmin::MsgConnectionAck_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode>() {
  return ::MsgsLauncherToAdmin::MsgExercicesListResponse_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode>() {
  return ::MsgsLauncherToAdmin::MsgControlStartAck_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode>() {
  return ::MsgsLauncherToAdmin::MsgControlPauseAck_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode>() {
  return ::MsgsLauncherToAdmin::MsgControlStopAck_ErrorCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

#endif  // PROTOBUF_LauncherToAdmin_2eproto__INCLUDED

// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";
import "simulation_client.proto";
import "authentication_client.proto";
import "version.proto";

package sword;

/** @internal
 *  @addtogroup Launcher
 *  @{
 */

/** @struct ConnectionResponse
    @brief response to connection request
*/
message ConnectionResponse {
    enum ErrorCode {
        //! connection successful
        success                       = 0;
        //! connection failed because of incompatible protocol version
        incompatible_protocol_version = 1;
    }
    //! operation return code
    required ErrorCode                error_code     = 1 [ default = success ];
    //! server protocol version
    required ProtocolVersion          server_version = 2;
}

/** @struct ExerciseListResponse
    @brief response to exercise list request, returns available exercises
*/
message ExerciseListResponse {
    //! list of exercise names (with subdirectories if any)
    repeated string exercise = 1;
}

/** @struct SessionStatus
    @brief pushed session status
*/
message SessionStatus {
    enum Status {
        starting    = 0;
        running     = 1;
        paused      = 2;
        not_running = 3;
        breakdown   = 4;
    }
    required string     exercise              = 1;
    required string     session               = 2;
    required Status     status                = 3;
    optional string     breakdown_information = 4;
}

/** @struct SessionNotification
    @brief notification from specified exercise/session
*/
message SessionNotification {
    message UnitUpdate {
        required Id        unit       = 1;
        optional Extension extensions = 2;
    }
    message FormationUpdate {
        required Id          formation  = 1;
        optional Extension   extensions = 2;
    }
    message ProfileCreation {
        required Profile profile = 1;
    }
    message ProfileUpdate {
        required Profile    profile = 1;
    }
    message Notification {
        optional UnitUpdate      unit_update        = 1;
        optional FormationUpdate formation_update   = 2;
        optional ProfileCreation profile_creation     = 3;
        optional ProfileUpdate   profile_update       = 4;
    }
    required string         exercise = 1;
    required string         session  = 2;
    required Notification   notification  = 3;
}

/** @struct ClientConnectionNotification
    @brief connection notification from client
*/
message ClientConnectionNotification {
    message ClientConnection {
        required string login = 1;
        required bool   connected = 2;
    }
    required string           exercise   = 1;
    required string           session    = 2;
    repeated ClientConnection connection = 3;
}

/** @struct TickInformation
    @brief tick information from client
*/
message TickInformation {
    required int32 current_tick                   = 1;
    required int32 tick_duration                  = 2;
    required int32 time_factor                    = 3;
    required int32 pathfind_request_number        = 4;
    optional int32 last_checkpoint_build_duration = 5;
}

/** @struct LauncherToAdmin
    @brief Lancher to admin protocol messages
*/
message LauncherToAdmin {
    message Content {
        optional ConnectionResponse           connection_response        = 1;
        optional ExerciseListResponse         exercise_list_response     = 2;
        optional SessionStatus                session_status             = 9;
        optional SessionNotification          session_notification       = 14;
        optional TickInformation              tick_information           = 15;
        optional ClientConnectionNotification connected_clients_update   = 16;
    }
    optional int32   context = 1;
    required Content message = 2;
}

/** @}*/

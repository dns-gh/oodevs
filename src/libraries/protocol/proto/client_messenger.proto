// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @file
 *  @brief Messages from clients to the messenger module
 *  @addtogroup Messenger
 *  @{
 */

/** @struct PhaseLineCreationRequest
    @brief A message to request the creation of a phase line

    @see PhaseLineCreationAck
    @see PhaseLineCreation
*/
message PhaseLineCreationRequest {
    required TacticalLine tactical_line = 1; //!< The phase line data to use for creation @see TacticalLine
    optional int32 context = 2; //!< This context allows the client application to put an unique identifier, thus allowing to track response    
}

/** @struct PhaseLineUpdateRequest
    @brief A message to request the update of a phase line

    @see PhaseLineUpdateRequestAck
    @see PhaseLineUpdate
*/
message PhaseLineUpdateRequest {
    required TacticalLineId id            = 1; //!< The identifier of the phase line to update @see TacticalLineId
    optional TacticalLine   tactical_line = 2; //!< Specifies the phase line data to use for update @see TacticalLine @bug should not be optional
}

/** @struct PhaseLineDestructionRequest
    @brief A message to request the destruction of a phase line

    @see PhaseLineDestructionRequestAck
    @see PhaseLineDestruction
*/
message PhaseLineDestructionRequest {
    required TacticalLineId id = 1; //!< The identifier of the phase line to destroy @see TacticalLineId
}

/** @struct LimitCreationRequest
    @brief A message to request the creation of a limit

    @see LimitCreationRequestAck
    @see LimitCreation
*/
message LimitCreationRequest {
    required TacticalLine tactical_line = 1; //!< The limit data to use for creation @see TacticalLine
    optional int32 context = 2; //!< This context allows the client application to put an unique identifier, thus allowing to track response    
}

/** @struct LimitUpdateRequest
    @brief A message to request the update of a limit

    @see LimitUpdateRequestAck
    @see LimitUpdate
*/
message LimitUpdateRequest {
    required TacticalLineId  id            = 1; //!< The identifier of the limit to update @see TacticalLineId
    optional TacticalLine    tactical_line = 2; //!< Specifies the limit data to use for update @see TacticalLine @bug should not be optional
}

/** @struct LimitDestructionRequest
    @brief A message to request the destruction of a limit

    @see LimitDestructionRequestAck
    @see LimitDestruction
*/
message LimitDestructionRequest {
    required TacticalLineId id = 1; //!< The identifier of the limit to destroy @see TacticalLineId
}

/** @struct IntelligenceCreationRequest
    @brief A message to request the creation of an intelligence

    @see IntelligenceCreationRequestAck
    @see IntelligenceCreation
*/
message IntelligenceCreationRequest {
    required Intelligence intelligence = 1; //!< The intelligence data to use for creation @see Intelligence
}

/** @struct IntelligenceUpdateRequest
    @brief A message to request the update of an intelligence

    Only data to update need to be sent.

    @see IntelligenceUpdateRequestAck
    @see IntelligenceUpdate
*/
message IntelligenceUpdateRequest {
    required IntelligenceId  intelligence = 1; //!< The identifier of the intelligence to update @see IntelligenceId @todo should be named "id" instead of "intelligence" (coherence)
    optional FormationId     formation    = 2; //!< The new identifier of the parent formation of the intelligence
    optional string          name         = 3; //!< The new name of the intelligence
    optional string          nature       = 4; //!< The new nature (MIL2525B APP-6 string) of the intelligence
    optional EnumNatureLevel level        = 5; //!< The new hierarchical level/echelon of the intelligence
    optional bool            embarked     = 6; //!< The new embarkment state of the intelligence @note Only needs to be set if data has changed.
    optional CoordLatLong    location     = 7; //!< The new location of the intelligence
    optional EnumDiplomacy   diplomacy    = 8; //!< The new diplomacy/alignment of the intelligence
}

/** @struct IntelligenceDestructionRequest
    @brief A message to request the destruction of an intelligence

    @see IntelligenceDestructionRequestAck
    @see IntelligenceDestruction
*/
message IntelligenceDestructionRequest {
    required IntelligenceId id = 1; //!< The identifier of the intelligence to destroy @see IntelligenceId
}

/** @struct ShapeCreationRequest
    @brief A message to request the creation of a shape

    @see ShapeCreationRequestAck
    @see ShapeCreation
    @todo rename into Drawing/Graphics
*/
message ShapeCreationRequest {
    required Shape shape = 1; //!< The shape data to use for creation @see Shape
    optional int32 context = 2; //!< This context allows the client application to put an unique identifier, thus allowing to track response      
}

/** @struct ShapeUpdateRequest
    @brief A message to request the update of a shape

    Optional fields need only be set if the data needs to be updated.

    @see ShapeUpdateRequestAck
    @see ShapeUpdate
    @todo rename into Drawing/Graphics
*/
message ShapeUpdateRequest {
    required DrawingId        shape    = 1; //!< The identifier of the shape to update @see DrawingId @todo should be named "id" instead of "shape" (coherence)
    optional string           category = 2; //!< The new category of the shape
    optional RgbColor         color    = 3; //!< The new color of the shape
    optional string           pattern  = 4; //!< The new template of the shape
    optional CoordLatLongList points   = 5; //!< The new points of the shape @see CoordLatLongList
}

/** @struct ShapeDestructionRequest
    @brief A message to request the destruction of a shape

    @see ShapeDestructionRequestAck
    @see ShapeDestruction
    @todo rename into Drawing/Graphics
*/
message ShapeDestructionRequest {
    required DrawingId id = 1; //!< The identifier of the shape to destroy @see DrawingId
}

/** @struct MarkerCreationRequest
    @brief A message to request the creation of a marker

    @see MarkerCreationRequestAck
    @see MarkerCreation
*/
message MarkerCreationRequest {
    required Marker marker = 1; //!< The marker data to use for creation @see Marker
    optional int32 context = 2; //!< This context allows the client application to put an unique identifier, thus allowing to track response    
}

/** @struct MarkerUpdateRequest
    @brief A message to request the update of a marker

    @see MarkerUpdateRequestAck
    @see MarkerUpdate
*/
message MarkerUpdateRequest {
    /** @property marker
        @brief The identifier of the marker to update.
        @see MarkerId
        @todo should be named "id" instead of "marker" (coherence)
    */
    required MarkerId marker      = 1;
    /** @property name
        @brief The new name of the marker.
        @note Only needs to be set if data has changed.
    */
    optional string   name        = 2;
    /** @property number
        @brief The new number of the marker. This is a user defined identifier.
        @note Only needs to be set if data has changed.
        @todo remove/rename/generalize for user defined marker data
    */
    optional string   number      = 3;
    /** @property description
        @brief The new description of the marker.
        @note Only needs to be set if data has changed.
    */
    optional string   description = 4;
    /** @property parent
        @brief The identifier of the new parent marker (for nested markers).
        @note Only needs to be set if data has changed.
    */
    optional MarkerId parent      = 5;
}

/** @struct MarkerDestructionRequest
    @brief A message to request marker destruction.

    This message requests the destruction of an existing marker.
    @li A MarkerDestructionRequestAck message is sent to acknowledge the marker destruction.
    @li A MarkerDestruction message is sent to all clients to notify the actual destruction of the marker.
*/
message MarkerDestructionRequest {
    /** @property marker
        @brief The identifier of the marker to destroy.
        @see MarkerId
        @todo should be named "id" instead of "marker" (coherence)
    */
    required MarkerId marker     = 1;
    /** @property delete_all
        @brief Flag used to request recursive destruction of any child marker.
        @todo should be named "cascade" or "recursive" instead of "delete_all"
              which tends to imply that all markers (not only specified/children)
              are going to be deleted.
    */
    required bool     delete_all = 2;
}

/** @struct ClientObjectCreationRequest
    @brief A message to request client object creation.

    This message requests the creation of a client object.
    @li A ClientObjectCreationRequestAck message is sent to acknowledge the client object creation.
    @li A ClientObjectCreation message is sent to all clients to notify the actual creation of the client object.
*/
message ClientObjectCreationRequest {
    /** @property name
        @brief The name of the client object to create.
    */
    optional string               name       = 1;
    /** @property properties
        @brief The list of properties of the client object.
        @see ClientObjectProperty
    */
    repeated ClientObjectProperty properties = 2;
    /** @property persistent
        @brief Flag used to toggle client object persistence.

        If set to "true", this flag enables client object persistence on simulation checkpoints.
    */
    optional bool                 persistent = 3;
}

/** @struct ClientObjectUpdateRequest
    @brief A message to request client object update.

    This message requests the update of an existing client object.
    @li A ClientObjectUpdateRequestAck message is sent to acknowledge the client object update.
    @li A ClientObjectUpdate message is sent to all clients to notify the actual update of the client object.
*/
message ClientObjectUpdateRequest {
    /** @property object
        @brief The identifier of the client object to update.
        @see ClientObjectId
        @todo should be named "id" instead of "object" (coherence)
    */
    required ClientObjectId       object     = 1;
    /** @property name
        @brief The new name of the client object.
        @note Only needs to be set if data has changed.
    */
    optional string               name       = 2;
    /** @property properties
        @brief The new properties values of the client object.
        @see ClientObjectProperty
        @note Only needs to be set if data has changed.
    */
    repeated ClientObjectProperty properties = 3;
}

/** @struct ClientObjectDestructionRequest
    @brief A message to request client object destruction.

    This message requests the destruction of an existing client object.
    @li A ClientObjectDestructionRequestAck message is sent to acknowledge the client object destruction.
    @li A ClientObjectDestruction message is sent to all clients to notify the actual destruction of the client object.
*/
message ClientObjectDestructionRequest {
    /** @property object
        @brief The identifier of the client object to destroy.
        @see ClientObjectId
        @todo should be named "id" instead of "object" (coherence)
    */
    required ClientObjectId object = 1;
}

/** @struct ClientToMessenger
    @brief Wraps available messages going from client to messenger.

    This is the actual message sent over the network.
*/
message ClientToMessenger {
    /** @struct Content
        @brief The possible messages contained in a client to messenger message.
        @warning Each Content message must contain exactly one of the possible messages.
    */
    message Content {
        optional LimitCreationRequest           limit_creation_request            = 1;  //!< @copybrief LimitCreationRequest @see LimitCreationRequest
        optional LimitDestructionRequest        limit_destruction_request         = 2;  //!< @copybrief LimitDestructionRequest @see LimitDestructionRequest
        optional LimitUpdateRequest             limit_update_request              = 3;  //!< @copybrief LimitUpdateRequest @see LimitUpdateRequest
        optional PhaseLineCreationRequest       phase_line_creation_request       = 4;  //!< @copybrief PhaseLineCreationRequest @see PhaseLineCreationRequest
        optional PhaseLineDestructionRequest    phase_line_destruction_request    = 5;  //!< @copybrief PhaseLineDestructionRequest @see PhaseLineDestructionRequest
        optional PhaseLineUpdateRequest         phase_line_update_request         = 6;  //!< @copybrief PhaseLineUpdateRequest @see PhaseLineUpdateRequest
        optional IntelligenceCreationRequest    intelligence_creation_request     = 7;  //!< @copybrief IntelligenceCreationRequest @see IntelligenceCreationRequest
        optional IntelligenceUpdateRequest      intelligence_update_request       = 8;  //!< @copybrief IntelligenceUpdateRequest @see IntelligenceUpdateRequest
        optional IntelligenceDestructionRequest intelligence_destruction_request  = 9;  //!< @copybrief IntelligenceDestructionRequest @see IntelligenceDestructionRequest
        optional ShapeCreationRequest           shape_creation_request            = 10; //!< @copybrief ShapeCreationRequest @see ShapeCreationRequest @todo rename into drawings/graphics_creation_request
        optional ShapeDestructionRequest        shape_destruction_request         = 11; //!< @copybrief ShapeDestructionRequest @see ShapeDestructionRequest @todo rename into drawings/graphics_destruction_request
        optional ShapeUpdateRequest             shape_update_request              = 12; //!< @copybrief ShapeUpdateRequest @see ShapeUpdateRequest @todo rename into drawings/graphics_update_request
        optional TextMessage                    text_message                      = 13; //!< @copybrief TextMessage @see TextMessage
        optional MarkerCreationRequest          marker_creation_request           = 14; //!< @copybrief MarkerCreationRequest @see MarkerCreationRequest
        optional MarkerUpdateRequest            marker_update_request             = 15; //!< @copybrief MarkerUpdateRequest @see MarkerUpdateRequest
        optional MarkerDestructionRequest       marker_destruction_request        = 16; //!< @copybrief MarkerDestructionRequest @see MarkerDestructionRequest
        optional ClientObjectCreationRequest    client_object_creation_request    = 17; //!< @copybrief ClientObjectCreationRequest @see ClientObjectCreationRequest
        optional ClientObjectUpdateRequest      client_object_update_request      = 18; //!< @copybrief ClientObjectUpdateRequest @see ClientObjectUpdateRequest
        optional ClientObjectDestructionRequest client_object_destruction_request = 19; //!< @copybrief ClientObjectDestructionRequest @see ClientObjectDestructionRequest
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is used to fill the "context" fields in the response message.

        This context allows the client application to put an unique identifier
        (based for instance on MAC address), thus allowing to track response
        message matching a specific request emitted by the client.

        @see MessengerToClient
    */
    optional int32   context = 1;
    /** @property message
        @brief A field containing one of the messages to be sent.
    */
    required Content message = 2;
}

/** @}*/

// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package Common;

// Entity Id types
message AutomatId                          { required uint32              id = 1; }
message AutomatIdList                      { repeated AutomatId         elem = 1; }
message FormationId                        { required uint32              id = 1; }
message FormationIdList                    { repeated FormationId       elem = 1; }
message KnowledgeGroupId                   { required uint32              id = 1; }
message ObjectId                           { required uint32              id = 1; }
message ObjectKnowledgeId                  { required uint32              id = 1; }
message ObjectKnowledgeIdList              { repeated ObjectKnowledgeId elem = 1; }
message PartyId                            { required uint32              id = 1; }
message PartyIdList                        { repeated PartyId           elem = 1; }
message CrowdId                            { required uint32              id = 1; }
message CrowdIdList                        { repeated CrowdId           elem = 1; }
message CrowdKnowledgeId                   { required uint32              id = 1; }
message CrowdConcentrationId               { required uint32              id = 1; }
message CrowdConcentrationKnowledgeId      { required uint32              id = 1; }
message CrowdFlowId                        { required uint32              id = 1; }
message CrowdFlowKnowledgeId               { required uint32              id = 1; }
message UnitId                             { required uint32              id = 1; }
message UnitIdList                         { repeated UnitId            elem = 1; }
message UnitKnowledgeId                    { required uint32              id = 1; }
message UnitKnowledgeIdList                { repeated UnitKnowledgeId   elem = 1; }
message UrbanObjectId                      { required uint32              id = 1; }
message UrbanObjectKnowledgeId             { required uint32              id = 1; }

message Tasker {
    optional AutomatId    automat    = 1;
    optional FormationId  formation  = 2;
    optional CrowdId      crowd      = 3;
    optional UnitId       unit       = 4;
}

message ParentEntity {
    optional AutomatId    automat    = 1;
    optional FormationId  formation  = 2;
}

// messenger entities
message DrawingId             { required uint32  id = 1; }
message IntelligenceId        { required uint32  id = 1; }
message TacticalLineId        { required uint32  id = 1; }
message MarkerId              { required uint32  id = 1; }

// reports
message FireId                { required uint32 id = 1; }
message FireEffectId          { required uint32 id = 1; }
message ReportId              { required uint32 id = 1; }
message WeatherId             { required uint32 id = 1; }

// logistics requests
message MaintenanceRequestId  { required uint32 id = 1; }
message MedicalRequestId      { required uint32 id = 1; }
message SupplyRequestId       { required uint32 id = 1; }

// Static types
message AutomatType           { required uint32 id = 1; }
message BreakdownType         { required uint32 id = 1; }
message EquipmentType         { required uint32 id = 1; }
message FragOrderType         { required uint32 id = 1; }
message MissionType           { required uint32 id = 1; }
message NBCAgentType          { required uint32 id = 1; }
message ObjectType            { required string id = 1; } // should be an integer
message CrowdType             { required uint32 id = 1; }
message ReportType            { required uint32 id = 1; }
message ResourceType          { required uint32 id = 1; }
message UnitType              { required uint32 id = 1; }
message ResourceNetworkType   { required string name = 1; }

// Helpers
message MsgHeading {
   required int32 heading = 1;
}

message MsgDateTime {
   required string data = 1;
}

// Enumerations
///////////// begin <not used by protocol> /////////////
enum EnumDotationFamily {
   munition                                         = 0;
   carburant                                        = 1;
   explosif                                         = 2;
   mine                                             = 3;
   barbele                                          = 4;
   piece                                            = 5;
   ration                                           = 6;
}

enum EnumAmmunitionFamily {
   obus                                             = 0;
   missile_sol                                      = 1;
   missile_air                                      = 2;
   mitraille                                        = 3;
}
///////////// end <not used by protocol> /////////////

///////////// begin <only used by SimToClient> /////////////

enum EnumPrecipitationType {
   pas_de_precipitation                             = 0;
   tempete_sable                                    = 1;
   brouillard                                       = 2;
   crachin                                          = 3;
   pluie                                            = 4;
   neige                                            = 5;
}

enum EnumFireEffectType {
   smoke                                            = 0;
   light                                            = 1;
}

enum UnitFireType {
   direct                                           = 0;
   indirect                                         = 1;
}

message MsgDotationStock {
   required ResourceType ressource_id        = 1;
   required int32        quantite_disponible = 2;
}

message SeqOfDotationStock {
   repeated MsgDotationStock elem = 1;
}

message MsgDotationQuota {
   required ResourceType ressource_id        = 1;
   required int32        quota_disponible    = 2;
}

message SeqOfDotationQuota {
   repeated MsgDotationQuota            elem                = 1;
}

enum EnumLightingType {
   jour_sans_nuage                                 = 0;
   jour_peu_nuageux                                = 1;
   jour_moyennement_nuageux                        = 2;
   jour_assez_nuageux                              = 3;
   jour_tres_nuageux                               = 4;
   nuit_pleine_lune                                = 5;
   nuit_trois_quart_de_lune                        = 6;
   nuit_demi_lune                                  = 7;
   nuit_quart_de_lune                              = 8;
   nuit_nouvelle_lune                              = 9;
   eclairant                                       = 10;
   global_weather                                  = 11;
}

message MsgAutomatChangeKnowledgeGroup {
   required AutomatId        automat         = 1;
   required PartyId          party           = 2;
   required KnowledgeGroupId knowledge_group = 3;
}

message MsgAutomatChangeLogisticLinks {
   required AutomatId automat     = 1;
   optional AutomatId tc2         = 2;
   optional AutomatId maintenance = 3;
   optional AutomatId health      = 4;
   optional AutomatId supply      = 5;
}

message MsgAutomatChangeSuperior_oid_superior {
   optional FormationId  formation = 1;
   optional AutomatId    automat   = 2;
}

message MsgAutomatChangeSuperior {
   required AutomatId                               automat  = 1;
   required MsgAutomatChangeSuperior_oid_superior   superior = 2;
}

message MsgUnitChangeSuperior {
   required UnitId    unit   = 1;
   required AutomatId parent = 2;
}

///////////// end <only used by SimToClient> /////////////

enum EnumLogMaintenanceHandlingStatus {
   deplacement_vers_chaine                          = 0;
   attente_disponibilite_remorqueur                 = 1;
   remorqueur_deplacement_aller                     = 2;
   remorqueur_chargement                            = 3;
   remorqueur_deplacement_retour                    = 4;
   remorqueur_dechargement                          = 5;
   diagnostique_maintenance                         = 6;
   attente_prise_en_charge_par_niveau_superieur     = 7;
   attente_disponibilite_pieces                     = 8;
   attente_disponibilite_reparateur                 = 9;
   reparation                                       = 10;
   retour_pion                                      = 11;
   termine_maintenance                              = 12;
}

enum EnumLogMedicalHandlingStatus {
   attente_disponibilite_ambulance_releve           = 0;
   ambulance_releve_deplacement_aller               = 1;
   ambulance_releve_chargement                      = 2;
   attente_chargement_complet_ambulance_releve      = 3;
   ambulance_releve_deplacement_retour              = 4;
   ambulance_releve_dechargement                    = 5;
   attente_disponibilite_medecin_pour_diagnostique  = 6;
   diagnostique                                     = 7;
   recherche_secteur_tri                            = 8;
   attente_disponibilite_medecin_pour_tri           = 9;
   tri                                              = 10;
   recherche_secteur_soin                           = 11;
   attente_disponibilite_medecin_pour_soin          = 12;
   soin                                             = 13;
   hospitalisation                                  = 14;
   attente_disponibilite_ambulance_ramassage        = 15;
   ambulance_ramassage_chargement                   = 16;
   attente_chargement_complet_ambulance_ramassage   = 17;
   ambulance_ramassage_deplacement_aller            = 18;
   ambulance_ramassage_dechargement                 = 19;
   termine                                          = 20;
}

enum EnumUnitVisibility {
   invisible                                        = 0;
   detected                                         = 1;
   recognized                                       = 2;
   identified                                       = 3;
   recorded                                         = 4;
}

enum EnumSimulationState {
   running                                          = 0;
   paused                                           = 1;
   stopped                                          = 2;
   loading                                          = 3;
}

enum EnumDispatcherState {
    available                                       = 0;
    unavailable                                     = 1;
}

enum EnumMeetingEngagementStatus {
   none_meeting                                     = 0;
   etat_esquive                                     = 1;
   etat_fixe                                        = 2;
   etat_poursuite_mission                           = 3;
}

enum EnumOperationalStatus {
   detruit_totalement                               = 0;
   detruit_tactiquement                             = 1;
   operationnel                                     = 2;
}

enum EnumAutomatMode {
   embraye                                          = 0;
   debraye                                          = 1;
}

enum EnumCrowdAttitude{
   calme                                            = 0;
   agitee                                           = 1;
   excitee                                          = 2;
   agressive                                        = 3;
}

enum EnumUnitTiredness {
   normal                                           = 0;
   fatigue                                          = 1;
   epuise                                           = 2;
}

enum EnumUnitMorale {
   fanatique                                        = 0;
   bon                                              = 1;
   moyen                                            = 2;
   mauvais                                          = 3;
}

enum EnumUnitExperience {
   veteran                                          = 0;
   experimente                                      = 1;
   conscrit                                         = 2;
}

enum EnumHumanRank {
   officier                                         = 0;
   sous_officer                                     = 1;
   mdr                                              = 2;
}

enum EnumDiplomacy {
   unknown_diplo                                    = 0;
   friend_diplo                                     = 1;
   enemy_diplo                                      = 2;
   neutral_diplo                                    = 3;
}

enum EnumHumanWound {
   non_blesse             = 0;
   mort                   = 1;
   blesse_urgence_1       = 2;
   blesse_urgence_2       = 3;
   blesse_urgence_3       = 4;
   blesse_urgence_extreme = 5;
}

enum EnumLogMaintenanceRegimeTravail {
   regime_1 = 0;
   regime_2 = 1;
   regime_3 = 2;
   regime_4 = 3;
}

enum EnumNatureLevel {
   none_naturelevel = 0;
   o                = 1;
   oo               = 2;
   ooo              = 3;
   i                = 4;
   ii               = 5;
   iii              = 6;
   x                = 7;
   xx               = 8;
   xxx              = 9;
   xxxx             = 10;
   xxxxx            = 11;
}

// Control messages
message MsgControlStop   {}
message MsgControlPause  {}
message MsgControlResume {}
message MsgControlChangeTimeFactor {
   required int32 time_factor = 1;
}

message MsgExercise  {
   required string  name     = 1; 
   optional bool    running  = 2; 
}

message MsgNetworkAddress  {
   required string  ip      = 1; 
   required int32   port    = 2 [default = 8080]; 
}

// Color
message RgbColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;	
}

message RgbaColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
    required float alpha = 4;	
}
    
// Geometry
message MsgCoordLatLong {
    required double latitude  = 1;
    required double longitude = 2;
}

message MsgCoordLatLongList {
    repeated MsgCoordLatLong elem = 2;
}

message MsgLocation {
   enum Geometry {
        circle  = 0;
        ellipse = 1;
        line    = 2;
        rectangle = 3;
        polygon = 4;
        point   = 5;
        sector  = 6;
        none    = 7;
    }
   required Geometry            type        = 1;
   optional MsgCoordLatLongList coordinates = 2;
}

message MsgLine         { required MsgLocation location = 1; }
message MsgLocationList { repeated MsgLocation     elem = 1; }
message MsgPath         { required MsgLocation location = 1; }
message MsgPathList     { repeated MsgPath         elem = 1; }
message MsgPoint        { required MsgLocation location = 1; }
message MsgPointList    { repeated MsgPoint        elem = 1; }
message MsgPolygon      { required MsgLocation location = 1; }
message MsgPolygonList  { repeated MsgPolygon      elem = 1; }

// Order parameters
message MsgLogMedicalPriorities {
   repeated EnumHumanWound elem = 1;
}

message ObstacleType
{
    enum DemolitionTargetType {
       preliminary = 0;
       reserved    = 1;
    }
}

message MsgPlannedWork {
   required string                            type                = 1;
   required MsgLocation                       position            = 2;
   optional ObstacleType.DemolitionTargetType type_obstacle       = 3;
   optional float                             densite             = 4;
   optional AutomatId                         tc2                 = 5;
   optional int32                             activity_time       = 6;
}

message MsgPlannedWorkList {
   repeated MsgPlannedWork   elem = 1;
}

message MsgLogMaintenancePriorities {
   repeated EquipmentType elem = 1;
}

message MsgMissionObjective {
   required MsgLocation localisation = 1;
   required MsgDateTime horaire      = 2;
}

message MsgMissionObjectiveList {
   repeated MsgMissionObjective elem = 1;
}

message MsgLimaOrder {
    enum Function {
        ligne_debouche               = 0;
        ligne_changement_attitude    = 1;
        ligne_coordination           = 2;
        ligne_interdire              = 3;
        ligne_objectif               = 4;
        ligne_coup_arret             = 5;
        ligne_recueil                = 6;
        ligne_debut_mission          = 7;
        ligne_fin_mission            = 8;
        ligne_identification_accueil = 9;
    }
    required MsgLine     lima      = 1;
    required MsgDateTime horaire   = 2;
    repeated Function    fonctions = 3;
}

message MsgLimasOrder {
   repeated MsgLimaOrder elem = 1;
}

message MsgIntelligence {
   required string          name      = 1;
   required string          nature    = 2;
   required EnumNatureLevel level     = 3;
   required bool            embarked  = 4;
   required MsgCoordLatLong location  = 5;
   required EnumDiplomacy   diplomacy = 6;
   required FormationId     formation = 7;
}

message MsgIntelligenceList {
   repeated MsgIntelligence elem = 1;
}

message MsgChangeDiplomacy {
   required PartyId       party1     = 1;
   required PartyId       party2     = 2;
   required EnumDiplomacy diplomatie = 3;
}

message MsgAtlasNature {
   enum AtlasNature
   {
        blinde           = 1;
        ass              = 2;
        pc               = 4;
        log              = 8;
        mortier          = 16;
        lance_roquette   = 32;
        vehicule         = 64;
        personnel_a_pied = 128;
        helicoptere      = 256;
        indefini         = 512;
        asa              = 1024;
        none             = 2048;
   }
   // repeated AtlasNature nature = 1;
   required int32 nature = 1;
}

message MsgMissionParameter {
    message Value {
        optional bool                        aBool                       = 1;
        optional float                       aReal                       = 2;
        optional int32                       enumeration                 = 3;
        optional MsgPath                     path                        = 4;
        optional MsgPathList                 pathList                    = 5;
        optional MsgPoint                    point                       = 6;
        optional MsgPointList                pointList                   = 7;
        optional MsgPolygon                  polygon                     = 8;
        optional MsgPolygonList              polygonList                 = 9;
        optional MsgLocation                 location                    = 10;
        optional MsgLocationList             locationList                = 11;
        optional MsgHeading                  heading                     = 12;
        optional MsgAtlasNature              atlasNature                 = 13;
        optional UnitId                      unit                        = 14;
        optional UnitIdList                  unitList                    = 15;
        optional AutomatId                   automat                     = 16;
        optional AutomatIdList               automatList                 = 17;
        optional UnitKnowledgeId             unitKnowledge               = 18;
        optional UnitKnowledgeIdList         unitKnowledgeList           = 19;
        optional ObjectKnowledgeId           objectKnowledge             = 20;
        optional ObjectKnowledgeIdList       objectKnowledgeList         = 21;
        optional CrowdKnowledgeId            crowdKnowledge              = 22;
        optional MsgPlannedWork              plannedWork                 = 23;
        optional MsgPlannedWorkList          plannedWorkList             = 24;
        optional ResourceType                resourceType                = 25;
        optional EquipmentType               equipmentType               = 26;
        optional FireId                      tirIndirect                 = 27;
        optional MsgDateTime                 dateTime                    = 28;
        optional MsgLogMaintenancePriorities logMaintenancePriorities    = 29;
        optional MsgLogMedicalPriorities     logMedicalPriorities        = 30;
        optional string                      aCharStr                    = 31;
        optional MsgMissionObjective         missionObjective            = 32;
        optional MsgMissionObjectiveList     missionObjectiveList        = 33;
        optional MsgLine                     line                        = 34;
        optional MsgLimasOrder               limasOrder                  = 35;
        optional MsgIntelligenceList         intelligenceList            = 36;
        optional UrbanObjectId               urbanBlock                  = 37;
        optional PartyId                     party                        = 38;
        optional FormationId                 formation                   = 39;
        optional uint32                      identifier                  = 40;
        optional int32                       quantity                    = 41;
        optional KnowledgeGroupId            knowledgeGroup              = 42;
        repeated Value                       list                        = 43;
    }
    optional bool  null_value = 1;
    optional Value value      = 2;
}

message MsgMissionParameters {
   repeated MsgMissionParameter elem = 1;
}

message MsgUnitOrder {
    required UnitId               tasker         = 1;
    required MissionType          type           = 2;
    optional MsgMissionParameters parameters     = 3;
    optional string               label          = 4;
    optional MsgLocation          symbolLocation = 5;
    optional MsgDateTime          start_time     = 6;
}

message MsgAutomatOrder {
    required AutomatId            tasker         = 1;
    required MissionType          type           = 2;
    optional MsgMissionParameters parameters     = 3;
    optional string               label          = 4;
    optional MsgLocation          symbolLocation = 5;
    optional MsgDateTime          start_time     = 6;
}

message MsgCrowdOrder {
    required CrowdId              tasker         = 1;
    required MissionType          type           = 2;
    optional MsgMissionParameters parameters     = 3;
    optional string               label          = 4;
    optional MsgLocation          symbolLocation = 5;
    optional MsgDateTime          start_time     = 6;
}

// Messenger common types
message MsgTacticalLine {
    message Diffusion {
       optional AutomatId   automat   = 1;
       optional FormationId formation = 2;
    }
    required string      name      = 1;
    required MsgLocation geometry  = 2;
    required Diffusion   diffusion = 3;
}

message MsgShape {
   required string              category  = 1;
   required string              color     = 2;
   required string              pattern   = 3;
   required MsgCoordLatLongList points    = 4;
}

message MsgChatTarget {
   required string                      profile             = 1;
}

message MsgTextMessage {
    required MsgChatTarget source  = 1;
    required MsgChatTarget target  = 2;
    required string        message = 3;
}

// Object attributes

message ResourceNetwork
{
    message Link
    {
        enum TargetKind
        {
            urban  = 1;
            object = 2;
        }
        required TargetKind kind  = 1;
        required uint32 target_id = 2;
        required int32  capacity  = 3;
        required uint32 flow      = 4;
    }
    required ResourceNetworkType resource    = 1;
    repeated Link                link        = 2;
    required bool                enabled     = 3;
    optional uint32              max_stock   = 4;
    optional uint32              stock       = 5;
    optional uint32              production  = 6;
    optional uint32              consumption = 7;
    optional bool                critical    = 8;
}

message ObjectAttributeResourceNetwork {
   repeated ResourceNetwork network = 1;
}

message ObjectAttributeConstruction {
   optional ResourceType resource       = 1;
   optional int32        dotation_nbr   = 2;
   optional float        density        = 3;
   optional int32        percentage     = 4;
}

message ObjectAttributeMine {
   optional ResourceType resource       = 1;
   optional int32        dotation_nbr   = 2;
   optional float        density        = 3;
   optional int32        percentage     = 4;
}

message ObjectAttributeLogistic {
   required AutomatId tc2 = 1;
}

message ObjectAttributeInteractionHeight {
   required float                       height              = 1;
}

message ObjectAttributeObstacle {
   required ObstacleType.DemolitionTargetType type            = 1;
   optional bool                              activated       = 2;
   optional int32                             activation_time = 3;
}

message ObjectAttributeActivityTime {
   required int32                       value               = 1;
}

message ObjectAttributeBypass {
   required int32                       percentage          = 1;
}

message ObjectAttributeEffectDelay {
   required int32                       value               = 1;
}

message ObjectAttributeNBC {
   required int32                danger_level        = 1;
   repeated NBCAgentType         nbc_agents          = 2;
}

message StockResource {
   required ResourceType         resource = 1;
   required int32                current  = 2;
   optional int32                maximum  = 3;
}

message ObjectAttributeStock {
   repeated StockResource               resources           = 1;
}

message ObjectAttributeCrossingSite {
   required int32                       width                   = 1;
   required int32                       depth                   = 2;
   required int32                       flow_rate               = 3;
   required bool                        banks_require_fitting   = 4;
}

message ObjectAttributeSupplyRoute {
   required bool                        equipped            = 1;
   required int32                       max_weight          = 2;
   required int32                       width               = 3;
   required int32                       length              = 4;
   required int32                       flow_rate           = 5;
}

message MsgLocatedQuantity{
   required Common.MsgCoordLatLong      coordinate          = 1;
   required float                       quantity            = 2;
}

message MsgLocatedQuantityList {
   repeated MsgLocatedQuantity          elem                = 1;
}

message ObjectAttributeToxicCloud {
   required MsgLocatedQuantityList      quantities          = 1;
}

message ObjectAttributeFire {
   required int32                       class_id            = 1;
   required int32                       heat                = 2;
}

message ObjectAttributeMedicalTreatment {
   repeated uint32 type_id           = 1;
   required int32  beds              = 2;
   required int32  available_beds    = 3;
   required int32  doctors           = 4;
   required int32  available_doctors = 5;
}

message ObjectAttributeNBCType {
   required NBCAgentType agent = 1;
   required int32        concentration = 2;
   required int32        source_life_duration = 3;
}

message ObjectAttributeSealOff {
   required int32 level = 1;
}

message ObjectAttributes {
   optional ObjectAttributeConstruction      construction        = 1;
   optional ObjectAttributeObstacle          obstacle            = 2;
   optional ObjectAttributeMine              mine                = 3;
   optional ObjectAttributeActivityTime      activity_time       = 4;
   optional ObjectAttributeBypass            bypass              = 5;
   optional ObjectAttributeLogistic          logistic            = 6;
   optional ObjectAttributeNBC               nbc                 = 7;
   optional ObjectAttributeCrossingSite      crossing_site       = 8;
   optional ObjectAttributeSupplyRoute       supply_route        = 9;
   optional ObjectAttributeToxicCloud        toxic_cloud         = 10;
   optional ObjectAttributeFire              fire                = 11;
   optional ObjectAttributeMedicalTreatment  medical_treatment   = 12;
   optional ObjectAttributeInteractionHeight interaction_height  = 13;
   optional ObjectAttributeStock             stock               = 14;
   optional ObjectAttributeNBCType           nbc_agent           = 15;   
   optional ObjectAttributeEffectDelay       effect_delay        = 16;
   optional ObjectAttributeSealOff           seal_off            = 17;
   optional ObjectAttributeResourceNetwork   resource_networks   = 18;     //not in scipio V1.stab
}


// LTO Begin
message MsgNote {
    required string                             name                = 1;
    required string                             number	            = 2;
    required string                             description         = 3;
    required uint32                             parent              = 4;
}

// LTO end

// weather
message MsgWeatherAttributes {
   required int32                 temperature     = 1;
   required int32                 wind_speed      = 2;
   required MsgHeading            wind_direction  = 3;
   required int32                 cloud_floor     = 4;
   required int32                 cloud_ceiling   = 5;
   required int32                 cloud_density   = 6;
   required EnumPrecipitationType precipitation   = 7;
   required EnumLightingType      lighting        = 8;
}

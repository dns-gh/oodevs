package MsgsMessengerToClient;

import "Common.proto";

message TacticalLineAck {
    enum ErrorCode {
        no_error                    = 0;
        error_invalid_id            = 1;
        error_invalid_geometry      = 2;
        error_invalid_lima_function = 3;
        error_invalid_diffusion     = 4;
    }
}

// Limits
message MsgLimitCreation {
   required uint32                 oid           = 1;
   required Common.MsgTacticalLine tactical_line = 2;
}
message MsgLimitUpdate {
   required uint32                 oid           = 1;
   required Common.MsgTacticalLine tactical_line = 2;
}
message MsgLimitDestruction {
    optional uint32 oid = 1;
}
message MsgLimitCreationRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}
message MsgLimitUpdateRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}
message MsgLimitDestructionRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}

// Phase lines
message MsgLimaCreation {
   required uint32                 oid           = 1;
   required Common.MsgTacticalLine tactical_line = 2;
}
message MsgLimaDestruction {
   required uint32 oid = 1;
}
message MsgLimaUpdate {
    required uint32 oid = 1;
    required Common.MsgTacticalLine tactical_line = 2;
}
message MsgLimaCreationRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}
message MsgLimaUpdateRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}
message MsgLimaDestructionRequestAck {
    optional TacticalLineAck.ErrorCode error_code = 1;
}

// Intelligences
message MsgIntelligenceCreation {
   required uint32                 oid          = 1;
   required Common.MsgIntelligence intelligence = 2;
}
message MsgIntelligenceUpdate {
   required uint32                 oid       = 1;
   optional uint32                 formation = 2;
   optional string                 name      = 3;
   optional string                 nature    = 4;
   optional Common.EnumNatureLevel level     = 5;
   optional bool                   embarked  = 6;
   optional Common.MsgCoordLatLong location  = 7;
   optional Common.EnumDiplomacy   diplomacy = 8;
}
message MsgIntelligenceDestruction {
   required uint32 oid = 1;
}
message IntelligenceRequestAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_oid       = 1;
        error_invalid_geometry  = 2;
        error_invalid_formation = 3;
    }
}
message MsgIntelligenceCreationRequestAck {
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}
message MsgIntelligenceUpdateRequestAck {
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}
message MsgIntelligenceDestructionRequestAck {
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}

// Drawing/shapes
message MsgShapeCreation {
   required uint32          oid   = 1;
   required Common.MsgShape shape = 2;
}

message MsgShapeUpdate {
   required uint32                     oid       = 1;
   optional string                     category  = 2;
   optional string                     color     = 3;
   optional string                     template_ = 4;
   optional Common.MsgCoordLatLongList points    = 5;
}
message MsgShapeDestruction {
   required uint32 oid = 1;
}
message ShapeRequestAck {
    enum ErrorCode {
        no_error               = 0;
        error_invalid_oid      = 1;
        error_invalid_geometry = 2;
    }
}
message MsgShapeCreationRequestAck {
    required ShapeRequestAck.ErrorCode error_code = 1;
}

message MsgShapeUpdateRequestAck {
    optional ShapeRequestAck.ErrorCode error_code = 1;
}

message MsgShapeDestructionRequestAck {
    required ShapeRequestAck.ErrorCode error_code = 1;
}


// LTO begin
message MsgNoteCreation {
    required uint32                     id          = 1;
	required Common.MsgNote             note        = 2;
	required string						date		= 3;
}

message MsgNoteUpdate {
    required uint32                     id          = 1;
    required string                     date        = 2;
    optional string                     name        = 3; 
    optional string                     number	    = 4;
    optional string                     description = 5;
    optional uint32                     parent      = 6;
    
}

message MsgNoteDestruction {
	required uint32                     id          = 1;
}
// LTO end

// message container
message MsgMessengerToClient {
    message Content {
        optional MsgLimitCreation                       limit_creation                          = 1;
        optional MsgLimitUpdate                         limit_update                            = 2;
        optional MsgLimitDestruction                    limit_destruction                       = 3;
        optional MsgLimitCreationRequestAck             limit_creation_request_ack              = 4;
        optional MsgLimitDestructionRequestAck          limit_destruction_request_ack           = 5;
        optional MsgLimitUpdateRequestAck               limit_update_request_ack                = 6;
        optional MsgLimaCreation                        lima_creation                           = 7;
        optional MsgLimaUpdate                          lima_update                             = 8;
        optional MsgLimaDestruction                     lima_destruction                        = 9;
        optional MsgLimaCreationRequestAck              lima_creation_request_ack               = 10;
        optional MsgLimaDestructionRequestAck           lima_destruction_request_ack            = 11;
        optional MsgLimaUpdateRequestAck                lima_update_request_ack                 = 12;
        optional MsgIntelligenceCreation                intelligence_creation                   = 13;
        optional MsgIntelligenceUpdate                  intelligence_update                     = 14;
        optional MsgIntelligenceDestruction             intelligence_destruction                = 15;
        optional MsgIntelligenceCreationRequestAck      intelligence_creation_request_ack       = 16;
        optional MsgIntelligenceUpdateRequestAck        intelligence_update_request_ack         = 17;
        optional MsgIntelligenceDestructionRequestAck   intelligence_destruction_request_ack    = 18;
        optional MsgShapeCreation                       shape_creation                          = 19;
        optional MsgShapeUpdate                         shape_update                            = 20;
        optional MsgShapeDestruction                    shape_destruction                       = 21;
        optional MsgShapeCreationRequestAck             shape_creation_request_ack              = 22;
        optional MsgShapeDestructionRequestAck          shape_destruction_request_ack           = 23;
        optional MsgShapeUpdateRequestAck               shape_update_request_ack                = 24;
        optional Common.MsgTextMessage                  text_message                            = 25;
        optional MsgNoteCreation                        note_creation                           = 26;
        optional MsgNoteUpdate                          note_update                             = 27;
        optional MsgNoteDestruction                     note_destruction                        = 28;                
    }
    optional int32   context = 1 [default = 0];
    required Content message = 2;
}

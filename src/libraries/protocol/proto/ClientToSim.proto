package MsgsClientToSim;

import "Common.proto"; 

message MsgControlDatetimeChange {
   required Common.MsgDateTime date_time = 1;
}

message MsgControlMeteo {
   required Common.MsgMissionParameters parametres = 1;
}

message MsgControlCheckPointSaveNow {
   optional string name = 1;
}

message MsgFragOrder {
   required uint32                      oid        = 1;
   required uint32                      frag_order = 2;
   optional Common.MsgMissionParameters parametres = 3;
}

message MsgSetAutomatMode {
   required int32                  oid  = 1;
   required Common.EnumAutomatMode mode = 2;
}

message MsgUnitCreationRequest {
   required uint32                 type_pion    = 1;
   required uint32                 oid_automate = 2;
   required Common.MsgCoordLatLong position     = 3;
}

// Magic Action
message MagicActionChangeHumanFactors {
   optional Common.EnumUnitTiredness    fatigue    = 1;
   optional Common.EnumUnitMorale       moral      = 2;
   optional Common.EnumUnitExperience   experience = 3;
}

message MsgMagicActionPartialRecovery {
    message SeqOfEquipmentRecovery {
        message EquipmentRecovery {
           required Common.MsgEquipmentType type_equipement   = 1;
           required int32                   nombre_disponible = 2;
        }
        repeated EquipmentRecovery elem = 1;
    }
    message SeqOfHumanRecovery {
        message HumanRecovery {
           required Common.EnumHumanRank rang              = 1;
           required int32                nombre_disponible = 2;
        }
        repeated HumanRecovery elem = 1;
    }
    message SeqOfDotationRecovery {
        message DotationRecovery {
           required Common.EnumDotationFamily   famille_dotation    = 1;
           required int32                       pourcentage         = 2;
        }
        repeated DotationRecovery elem = 1;
    }
    message SeqOfAmmunitionDotationRecovery {
        message AmmunitionDotationRecovery {
           required Common.EnumAmmunitionFamily famille_munition = 1;
           required uint32                      pourcentage      = 2;
        }
        repeated AmmunitionDotationRecovery elem = 1;
    }
    message SeqOfStockRecovery {
        message StockRecovery {
           required uint32 ressource_id        = 1;
           required int32  quantite_disponible = 2;
        }
        repeated StockRecovery elem = 1;
    }
    optional SeqOfEquipmentRecovery          equipements = 1;
    optional SeqOfHumanRecovery              personnels  = 2;
    optional SeqOfDotationRecovery           dotations   = 3;
    optional SeqOfAmmunitionDotationRecovery munitions   = 4;
    optional SeqOfStockRecovery              stocks      = 5;
}

message MsgUnitMagicAction {
   enum Type {
        move_to              = 0;
        surrender_to         = 1;
        cancel_surrender     = 2;
        recover_transporters = 3;
        destroy_component    = 4;
        recover_all          = 5;
        recover_troops       = 6;
        recover_equipments   = 7;
        recover_resources    = 8;
        destroy_all          = 9;
        change_human_factors = 10;
        partial_recovery     = 11;
    }
   required uint32                      oid        = 1;
   required Type                        type       = 2;
   required Common.MsgMissionParameters parametres = 3;
}

message MsgMagicActionCreateObject {
   required string                     type       = 1;
   required Common.MsgLocation         location   = 2;
   required string                     name       = 3;
   required int32                      team       = 4;
   required Common.MsgObjectAttributes attributes = 5;
}

message MsgMagicActionUpdateObject {
   required int32                      oid        = 1;
   required Common.MsgObjectAttributes attributes = 2;
}

message MsgObjectMagicAction_action {
   optional MsgMagicActionCreateObject create_object  = 1;
   optional MsgMagicActionUpdateObject update_object  = 2;
   optional int32                      destroy_object = 3;
}

message MsgObjectMagicAction {
   required MsgObjectMagicAction_action  action             = 1;
}

message MsgMagicActionCreateFireOrder {
   required int32                      oid_targetKnowledge = 1;
   required int32                      oid_agentForCr      = 2;
   required int32                      munition            = 3;
   required int32                      it                  = 4;
}

message MsgPopulationMagicAction_action {
   optional Common.MsgMagicActionPopulationChangeAttitude   change_attitude     = 1;
   optional bool                                            destruction_totale  = 2;
   optional Common.MsgMagicActionPopulationKill             tuer                = 3;
   optional Common.MsgMagicActionPopulationResurrect        ressusciter         = 4;
}

message MsgPopulationMagicAction {
   required uint32                          oid    = 1;
   required MsgPopulationMagicAction_action action = 2;
}

message MsgLogSupplyPushFlow {
   required uint32                    oid_donneur  = 1;
   required uint32                    oid_receveur = 2;
   required Common.SeqOfDotationStock stocks       = 3;
}

message MsgLogSupplyChangeQuotas {
   required uint32                    oid_donneur  = 1;
   required uint32                    oid_receveur = 2;
   required Common.SeqOfDotationQuota quotas       = 3;
}

message MsgControlCheckPointSetFrequency {
   required int32 frequency = 1;
}

message MsgControlToggleVisionCones {
   required bool vision_cones = 1;
}

message MsgKnowledgeGroupCreationRequest {
   required uint32 oid_camp    = 1;
   optional uint32 oid_parent  = 2;
   required string type        = 3;
}

message MsgKnowledgeGroupUpdateRequest {
   required uint32 oid        = 1;
   optional uint32 oid_camp   = 2;
   optional uint32 oid_parent = 3;
   optional bool   enabled    = 4;
   optional string type       = 5;
}


message MsgClientToSim {
    message Content {
       optional Common.MsgControlStop                  control_stop                         = 1;
       optional Common.MsgControlPause                 control_pause                        = 2;
       optional Common.MsgControlResume                control_resume                       = 3;
       optional Common.MsgControlChangeTimeFactor      control_change_time_factor           = 4;
       optional MsgControlDatetimeChange               control_date_time_change             = 5;
       optional MsgControlMeteo                        control_meteo                        = 6;
       optional MsgControlCheckPointSaveNow            control_checkpoint_save_now          = 7;
       optional MsgControlCheckPointSetFrequency       control_checkpoint_set_frequency     = 8;
       optional MsgControlToggleVisionCones            control_toggle_vision_cones          = 9;
       optional Common.MsgUnitOrder                    unit_order                           = 10;
       optional Common.MsgAutomatOrder                 automat_order                        = 11;
       optional Common.MsgPopulationOrder              population_order                     = 12;
       optional MsgFragOrder                           frag_order                           = 13;
       optional MsgSetAutomatMode                      set_automat_mode                     = 14;
       optional MsgUnitCreationRequest                 unit_creation_request                = 15;
       optional MsgUnitMagicAction                     unit_magic_action                    = 17;
       optional MsgObjectMagicAction                   object_magic_action                  = 18;
       optional MsgPopulationMagicAction               population_magic_action              = 19;
       optional Common.MsgChangeDiplomacy              change_diplomacy                     = 20;
       optional Common.MsgAutomatChangeKnowledgeGroup  automat_change_knowledge_group       = 21;
       optional Common.MsgAutomatChangeLogisticLinks   automat_change_logistic_links        = 22;
       optional Common.MsgAutomatChangeSuperior        automat_change_superior              = 23;
       optional Common.MsgUnitChangeSuperior           unit_change_superior                 = 24;
       optional MsgLogSupplyPushFlow                   log_supply_push_flow                 = 25;
       optional MsgLogSupplyChangeQuotas               log_supply_change_quotas             = 26;   
       optional MsgKnowledgeGroupCreationRequest       knowledge_group_creation_request     = 27;   
       optional MsgKnowledgeGroupUpdateRequest         knowledge_group_update_request       = 28;
       optional MsgMagicActionCreateFireOrder          create_fire_order                    = 29;   
    }
    optional int32   context = 1 [default = 0];
    required Content message = 2;
}
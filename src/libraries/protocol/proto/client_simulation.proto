// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @struct ControlDatetimeChange
    @brief A date and/or time change request.
    
    This message is sent by a client to change the current date and/or time.
    
    @see ControlDatetimeChangeAck 
*/
message ControlDatetimeChange {
    /** @property date_time
        @brief The new date and/or time.
        @see DateTime
    */
   required DateTime date_time = 1;
}

/** @struct ControlCheckPointSaveNow
    @brief A checkpoint save request.
    
    This message is sent by a client to trigger a checkpoint save.
    
    @see ControlCheckPointSaveEnd 
*/
message ControlCheckPointSaveNow {
    /** @property name
        @brief The checkpoint name.
    */
   optional string name = 1;
}

/** @struct SetAutomatMode
    @brief An automate mode change request.
    
    This message is sent by a client to activate or deactivate an automate.
    
    @see SetAutomatModeAck
*/
message SetAutomatMode {
    /** @property automate
        @brief The automate identifier.
        @see AutomatId
    */
    required AutomatId       automate = 1;
    /** @property mode
        @brief The new mode.
        @see EnumAutomatMode
    */
    required EnumAutomatMode mode     = 2;
}

/** @struct UnitCreationRequest
    @brief An agent creation request.
    
    This message is sent by a client to create an agent.
    
    @see UnitCreationRequestAck
    @todo rename into AgentCreationRequest
    @todo no clue what the fields are exactly...
*/
message UnitCreationRequest {
    /** @property type
        @brief The agent type.
        @see UnitType
    */
    required UnitType     type     = 1;
    /** @property superior
        @brief The superior identifier.
        @see AutomatId
    */
    required AutomatId    superior = 2;
    /** @property position
        @brief The position.
        @see CoordLatLong
    */
    required CoordLatLong position = 3;
}

/** @struct UnitMagicAction
    @brief An agent magic action request.
    
    This message is sent by a client to perform a magic action.
    
    @see UnitMagicActionAck
    @todo rename into AgentMagicAction
*/
message UnitMagicAction {
    /** @enum Type
        @brief The type of magic action.
        
        Specific parameters are expected for each type.

        @todo Explain what parameters are expected for each type
    */
   enum Type {
        /** @brief A move to magic action.
        */
        move_to                   = 0;
        /** @brief A surrender to magic action.
        */
        surrender_to              = 1;
        /** @brief A cancel surrender magic action.
        */
        cancel_surrender          = 2;
        /** @brief A recover transporters magic action.
        */
        recover_transporters      = 3;
        /** @brief A destroy component magic action.
        */
        destroy_component         = 4;
        /** @brief A recover all magic action.
        */
        recover_all               = 5;
        /** @brief A recover troops magic action.
        */
        recover_troops            = 6;
        /** @brief A recover equiments magic action.
        */
        recover_equipments        = 7;
        /** @brief A recover resources magic action.
        */
        recover_resources         = 8;
        /** @brief A destroy all magic action.
        */
        destroy_all               = 9;
        /** @brief A change human factors magic action.
        */
        change_human_factors      = 10;
        /** @brief A partial recovery magic action.
        */
        partial_recovery          = 11;
        /** @brief A unit creation magic action.
        */
        unit_creation             = 12;
        /** @brief A create fire order magic action.
        */
        create_fire_order         = 13;
        /** @brief A crowd total destruction magic action.
        */
        crowd_total_destruction   = 14;
        /** @brief A crowd kill magic action.
        */
        crowd_kill                = 15;
        /** @brief A crowd resurrect magic action.
        */
        crowd_resurrect           = 16;
        /** @brief A crowd change attitude magic action.
        */
        crowd_change_attitude     = 17;
        /** @brief A change knowledge group magic action.
        */
        change_knowledge_group    = 18;
        /** @brief A change logistic links magic action.
        */
        change_logistic_links     = 19;
        /** @brief A unit change superior magic action.
        */
        unit_change_superior      = 20;
        /** @brief A change automate superior magic action.
        */
        change_automat_superior   = 21;
        /** @brief A change formation superior magic action.
        */
        change_formation_superior = 22;
        /** @brief A knowledge group update magic action.
        */
        knowledge_group_update    = 23;
        /** @brief A log supply push flow magic action.
        */
        log_supply_push_flow      = 24;
        /** @brief A log supply change quotas magic action.
        */
        log_supply_change_quotas  = 25;
        /** @brief An automate creation magic action.
        */
        automat_creation          = 26;
        /** @brief A formation creation magic action.
        */
        formation_creation        = 27;
        /** @brief A crowd creation magic action.
        */
        crowd_creation            = 28;
        /** @brief A log supply pull flow magic action.
        */
        log_supply_pull_flow      = 29;
        /** @brief A create wound magic action.
        */
        create_wound              = 30;
    }
    /** @property tasker
        @brief The tasker.
        @see Tasker
        @todo Explain what is a "tasker"
    */
    required Tasker            tasker     = 1;
    /** @property type
        @brief The magic action type.
        @see Type
    */
    required Type              type       = 2;
    /** @property parameters
        @brief The magic action parameters, depending on the magic action type.
        @see MissionParameters
    */
    required MissionParameters parameters = 3;
}

/** @struct KnowledgeMagicAction
    @brief A knowledge magic action request.
    
    This message is sent by a client to perform a magic action.
    
    @todo no corresponding ack message ?
*/
message KnowledgeMagicAction {
    /** @enum Type
        @brief The type of magic action.
        
        Specific parameters are expected for each type.
        
        @todo Explain what parameters are expected for each type
    */
   enum Type {
        /** @brief A enable knowledge magic action.
        */
        enable              = 0;
        /** @brief A update party knowledge magic action.
        */
        update_party        = 1;
        /** @brief A update party parent knowledge magic action.
        */
        update_party_parent = 2;
        /** @brief A update type knowledge magic action.
        */
        update_type         = 3;
    }
    /** @property knowledge_group
        @brief The knowledge group identifier.
        @see KnowledgeGroupId
    */
    required KnowledgeGroupId  knowledge_group = 1;
    /** @property type
        @brief The magic action type.
        @see Type
    */
    required Type              type            = 2;
    /** @property parameters
        @brief The magic action parameters, depending on the magic action type.
        @see MissionParameters
    */
    required MissionParameters parameters      = 3;
}

/** @struct ObjectMagicAction
    @brief An object magic action request.
    
    This message is sent by a client to perform a magic action.
    
    @see ObjectMagicActionAck
*/
message ObjectMagicAction {
    /** @enum Type
        @brief The type of magic action.
        
        Specific parameters are expected for each type.
        
        @todo Explain what parameters are expected for each type
    */
    enum Type {
        /** @brief A create object magic action.
        */
        create  = 0;
        /** @brief An update object magic action.
        */
        update  = 1;
        /** @brief A destroy object magic action.
        */
        destroy = 2;
    }
    /** @enum Attribute
        @brief The type of object.
        
        The first parameter among the parameters actually is of type
        MissionParameter::Value::identifier and must be reinterpreted as a value
        of this enumeration.
        
        @todo This must be a joke !
    */
    enum Attribute {
        construction       = 0;
        obstacle           = 1;
        mine               = 2;
        activity_time      = 3;
        bypass             = 4;
        logistic           = 5;
        nbc                = 6;
        crossing_site      = 7;
        supply_route       = 8;
        toxic_cloud        = 9;
        fire               = 10;
        medical_treatment  = 11;
        interaction_height = 12;
        stock              = 13;
        nbc_agent          = 14;
        effect_delay       = 15;
        flood              = 16;
    }
    /** @property object
        @brief The object identifier
        @see ObjectId
    */
    required ObjectId          object     = 1;
    /** @property type
        @brief The type of magic action
        @see Type
    */
    required Type              type       = 2;
    /** @property parameters
        @brief The parameters of the magic action
               The first parameter must be the object type name
               The second parameter must be the object location
        @see MissionParameters
    */
    required MissionParameters parameters = 3;
}

/** @struct MagicAction
    @brief A magic action request.
    
    This message is sent by a client to perform a magic action.
    
    @see MagicActionAck
*/
message MagicAction {
    /** @enum Type
        @brief The type of magic action.
        
        Specific parameters are expected for each type.
        
        @todo Explain what parameters are expected for each type
    */
   enum Type {
        /** @brief A global weather magic action.
        */
        global_weather                     = 0;
        /** @brief A local weather magic action.
        */
        local_weather                      = 1;
        /** @brief A change diplomacy magic action.
        */
        change_diplomacy                   = 2;
        /** @brief A create knowledge magic action.
        */
        create_knowledge_group             = 3;
        /** @brief A change resource network properties magic action.
        */
        change_resource_network_properties = 4;
    }
    /** @property type
        @brief The type of magic action
        @see Type
    */
    required Type              type       = 1;
    /** @property parameters
        @brief The parameters of the magic action
        @see MissionParameters
    */
    required MissionParameters parameters = 2;
}

/** @struct ControlCheckPointSetFrequency
    @brief A checkpoint frequency change request.
    
    This message is sent by a client to change the frequency of automatic checkpoints.
    
    @see ControlCheckPointSetFrequencyAck
    @todo rename to ControlCheckpointSetFrequency
*/
message ControlCheckPointSetFrequency {
    /** @property frequency
        @brief The frequency of checkpoints in minutes
    */
   required int32 frequency = 1;
}

/** @struct ControlCheckPointDeleteRequest
    @brief A checkpoint deletion request.
    
    This message is sent by a client to delete a checkpoint.
    
    @see ControlCheckPointListRequest
    @see ControlCheckPointDeleteAck
*/
message ControlCheckPointDeleteRequest {
    /** @property checkpoint
        @brief The checkpoint identifier
    */
    required string checkpoint = 1;
}

/** @struct ControlCheckPointListRequest
    @brief A checkpoint list request.
    
    This message is sent by a client to retrieve the list of checkpoints.
    
    @see ControlCheckPointListAck
    @see ControlCheckPointList
*/
message ControlCheckPointListRequest {
}

/** @struct ControlEnableVisionCones
    @brief A vision cones toggle request.
    
    This message is sent by a client to toggle the sending of vision cones.
    
    Enabling vision cones will produce UnitVisionCones messages.
    
    @see UnitVisionCones
    @todo see how it is related to ControlInformation::send_vision_cones
*/
message ControlEnableVisionCones {
   required bool vision_cones = 1;
}

/** @struct ChangePopulationMagicAction
    @brief A change population magic action.
    
    This message is sent by a client to alter a population with a magic action.
    
    @see ChangePopulationMagicActionAck
*/
message ChangePopulationMagicAction {
    /** @property tasker
        @brief The population identifier.
        @see PopulationId
        @todo rename to population
    */
    required PopulationId   tasker     = 1;
    /** @property adhesions
        @brief The party adhesions.
        @see PartyAdhesion
    */
    repeated PartyAdhesion  adhesions  = 2;
    /** @property healthy
        @brief The number of healthy persons.
    */
    optional int32          healthy    = 3;
    /** @property wounded
        @brief The number of wounded persons.
    */
    optional int32          wounded    = 4;
    /** @property dead
        @brief The number of dead persons.
    */
    optional int32          dead       = 5;
    /** @property motivation
        @brief The motivation.
        @see MotivationType
        @todo What is that ?
    */
    optional MotivationType motivation = 6;
}

/** @struct UrbanMagicAction
    @brief A urban magic action.
    
    This message is sent by a client to alter a urban object with a magic action.
    
    @see UrbanMagicActionAck
*/
message UrbanMagicAction {
    /** @struct Infrastructure
        @brief An infrastructure.
    */
    message Infrastructure {
        /** @property active
            @brief Whether the infrastructure is active or not
            @todo What does it mean ?
            @todo Is this inner message really usefull ?
        */
        optional bool  active    = 1;
        /** @property threshold
            @brief The threshold
            @todo What does it mean ?
        */
        optional float threshold = 2;
    }
    /** @property id
        @brief The identifier.
        @see UrbanObjectId
    */
    required UrbanObjectId  id               = 1;
    /** @property usages
        @brief The usages.
        @see UrbanUsage
    */
    repeated UrbanUsage     usages           = 2;
    /** @property infrastructure
        @brief The infrastructure.
        @see Infrastructure
    */
    optional Infrastructure infrastructure   = 3;
    /** @property structural_state
        @brief The structural state.
        @todo What does it mean ? Unit ?
    */
    optional uint32         structural_state = 4;
}

/** @struct ClientToSim
    @brief A facade for all messages from clients to the simulation.
    
    This is the actual message sent over the network.
*/
message ClientToSim {
    /** @struct Content
        @brief The possible messages contained in a client to simulation message.
        @warning Each Content message must contain exactly one of the possible messages.
    */
    message Content {
        /** @property control_stop
            @brief @copybrief ControlStop
            @see ControlStop
        */
        optional ControlStop                    control_stop                      = 1;
        /** @property control_pause
            @brief @copybrief ControlPause
            @see ControlPause
        */
        optional ControlPause                   control_pause                     = 2;
        /** @property control_resume
            @brief @copybrief ControlResume
            @see ControlResume
        */
        optional ControlResume                  control_resume                    = 3;
        /** @property control_change_time_factor
            @brief @copybrief ControlChangeTimeFactor
            @see ControlChangeTimeFactor
        */
        optional ControlChangeTimeFactor        control_change_time_factor        = 4;
        /** @property control_date_time_change
            @brief @copybrief ControlDatetimeChange
            @see ControlDatetimeChange
        */
        optional ControlDatetimeChange          control_date_time_change          = 5;
        /** @property control_checkpoint_save_now
            @brief @copybrief ControlCheckPointSaveNow
            @see ControlCheckPointSaveNow
        */
        optional ControlCheckPointSaveNow       control_checkpoint_save_now       = 6;
        /** @property control_checkpoint_set_frequency
            @brief @copybrief ControlCheckPointSetFrequency
            @see ControlCheckPointSetFrequency
        */
        optional ControlCheckPointSetFrequency  control_checkpoint_set_frequency  = 7;
        /** @property control_toggle_vision_cones
            @brief @copybrief ControlEnableVisionCones
            @see ControlEnableVisionCones
        */
        optional ControlEnableVisionCones       control_toggle_vision_cones       = 8;
        /** @property unit_order
            @brief @copybrief UnitOrder
            @see UnitOrder
        */
        optional UnitOrder                      unit_order                        = 9;
        /** @property automat_order
            @brief @copybrief AutomatOrder
            @see AutomatOrder
        */
        optional AutomatOrder                   automat_order                     = 10;
        /** @property crowd_order
            @brief @copybrief CrowdOrder
            @see CrowdOrder
        */
        optional CrowdOrder                     crowd_order                       = 11;
        /** @property frag_order
            @brief @copybrief FragOrder
            @see FragOrder
        */
        optional FragOrder                      frag_order                        = 12;
        /** @property set_automat_mode
            @brief @copybrief SetAutomatMode
            @see SetAutomatMode
        */
        optional SetAutomatMode                 set_automat_mode                  = 13;
        /** @property unit_creation_request
            @brief @copybrief UnitCreationRequest
            @see UnitCreationRequest
        */
        optional UnitCreationRequest            unit_creation_request             = 14;
        /** @property unit_magic_action
            @brief @copybrief UnitCreationRequest
            @see UnitCreationRequest
        */
        optional UnitMagicAction                unit_magic_action                 = 15;
        /** @property object_magic_action
            @brief @copybrief ObjectMagicAction
            @see ObjectMagicAction
        */
        optional ObjectMagicAction              object_magic_action               = 16;
        /** @property knowledge_magic_action
            @brief @copybrief KnowledgeMagicAction
            @see KnowledgeMagicAction
        */
        optional KnowledgeMagicAction           knowledge_magic_action            = 17;
        /** @property magic_action
            @brief @copybrief MagicAction
            @see MagicAction
        */
        optional MagicAction                    magic_action                      = 18;
        /** @property control_checkpoint_list_request
            @brief @copybrief ControlCheckPointListRequest
            @see ControlCheckPointListRequest
        */
        optional ControlCheckPointListRequest   control_checkpoint_list_request   = 19;
        /** @property control_checkpoint_delete_request
            @brief @copybrief ControlCheckPointDeleteRequest
            @see ControlCheckPointDeleteRequest
        */
        optional ControlCheckPointDeleteRequest control_checkpoint_delete_request = 20;
        /** @property change_population_magic_action
            @brief @copybrief ChangePopulationMagicAction
            @see ChangePopulationMagicAction
        */
        optional ChangePopulationMagicAction    change_population_magic_action    = 21;
        /** @property urban_magic_action
            @brief @copybrief UrbanMagicAction
            @see UrbanMagicAction
        */
        optional UrbanMagicAction               urban_magic_action                = 22;
    }
    /** @property context
        @brief Identifies the request matching the response.
        
        This field is used to fill the "context" fields in the response message
        (from SimToClient).
        
        This context allows the client application to put an unique identifier 
        (based for instance on MAC address), thus allowing to track response 
        message matching a specific request emitted by the client.
    */
    optional int32   context = 1;
    /** @property message
        @brief A field containing one of the messages to be sent.
    */
    required Content message = 2;
}

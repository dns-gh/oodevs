// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @file
 *  @brief Messages from clients to the simulation
 *  @addtogroup Simulation
 *  @{
 */

/** @struct ControlDateTimeChange
    @brief A date and/or time change request
    @see ControlDateTimeChangeAck
*/
message ControlDateTimeChange {
    //! The new date and/or time
    required DateTime date_time = 1;
}

/** @struct ControlCheckPointSaveNow
    @brief A checkpoint save request
    @see ControlCheckPointSaveNowAck
*/
message ControlCheckPointSaveNow {
    //! The checkpoint name
    optional string name = 1;
}

/** @struct SetAutomatMode
    @brief An automate mode change request.
    @see SetAutomatModeAck
*/
message SetAutomatMode {
    //! The automate identifier
    required AutomatId       automate = 1;
    //! The new mode
    required EnumAutomatMode mode     = 2;
}

/** @struct UnitCreationRequest
    @brief An agent creation request
    @see UnitCreationRequestAck
    @todo rename into AgentCreationRequest
    @todo no clue what the fields are exactly...
*/
message UnitCreationRequest {
    //! The agent type
    required UnitType     type     = 1;
    //! The superior identifier
    required AutomatId    superior = 2;
    //! The position
    required CoordLatLong position = 3;
}

/** @struct UnitMagicAction
    @brief An agent magic action request
    @see UnitMagicActionAck
    @todo rename into AgentMagicAction
*/
message UnitMagicAction {
    /** @enum Type
        @brief The type of magic action.

        Specific parameters are expected for each type.

        @todo Explain what parameters are expected for each type
        @todo Uniformize, for instance unit_creation != create_wound
    */
    enum Type {
        //! Teleport a unit
        //! The tasker must reference the unit to teleport.
        //! parameters[0], Point: destination coordinates.
        move_to                           = 0;
        //! A surrender to magic action
        surrender_to                      = 1;
        //! A cancel surrender magic action
        cancel_surrender                  = 2;
        //! A recover transporters magic action
        recover_transporters              = 3;
        //! A destroy component magic action
        destroy_component                 = 4;
        //! A recover all magic action
        recover_all                       = 5;
        //! A recover troops magic action
        recover_troops                    = 6;
        //! A recover equiments magic action
        recover_equipments                = 7;
        //! A recover resources magic action
        recover_resources                 = 8;
        //! A destroy all magic action
        destroy_all                       = 9;
        //! A change human factors magic action
        change_human_factors              = 10;
        //! A partial recovery magic action
        partial_recovery                  = 11;
        //! A unit creation magic action
        //! The tasker must be set to the parent automat.
        //! parameters[0], Identifier: the unit type.
        //! parameters[1], Point: the unit location in WGS84.
        //! parameters[2], ACharStr, optional: the unit name.
        //! parameters[3], BooleanValue, optional: if true, force the unit to
        //!    become the new PC for this automat.
        unit_creation                     = 12;
        //! A create fire order magic action
        create_fire_order                 = 13;
        //! A crowd total destruction magic action
        crowd_total_destruction           = 14;
        //! A crowd change health state magic action
        crowd_change_health_state         = 15;
        //! A crowd change attitude magic action
        crowd_change_attitude             = 16;
        //! A crowd change affinities magic action
        crowd_change_affinities           = 17;
        //! A crowd change armed individuals magic action
        crowd_change_armed_individuals    = 18;
        //! A change knowledge group magic action
        change_knowledge_group            = 19;
        //! A change logistic links magic action
        change_logistic_links             = 20;
        //! A unit change superior magic action
        unit_change_superior              = 21;
        //! A change automate superior magic action
        change_automat_superior           = 22;
        //! A change formation superior magic action
        change_formation_superior         = 23;
        //! A knowledge group update magic action
        knowledge_group_update            = 24;
        //! A log supply push flow magic action
        log_supply_push_flow              = 25;
        //! A log supply change quotas magic action
        log_supply_change_quotas          = 26;
        //! An automate creation magic action
        //! The tasker must be set to the parent formation or automat.
        //! parameters[0], Identifier: the automat type.
        //! parameters[1], Identifier: the automat knowledge group.
        //! result[0], AutomatId: created automat identifier.
        automat_creation                  = 27;
        //! A formation creation magic action
        formation_creation                = 28;
        //! A crowd creation magic action
        //! The tasker must be set to the parent party or formation.
        //! parameters[0], ACharStr: crowd type name.
        //! parameters[1], Point: crowd location.
        //! parameters[2], Quantity: healty persons count.
        //! parameters[3], Quantity: wounded persons count.
        //! parameters[4], Quantity: dead persons count.
        //! parameters[5], ACharStr: crowd name.
        //! result[0], CrowdId: created crowd identifier.
        crowd_creation                    = 29;
        //! A log supply pull flow magic action
        log_supply_pull_flow              = 30;
        //! A create wound magic action
        create_wound                      = 31;
        //! A change of health state on inhabitant magic action
        inhabitant_change_health_state    = 32;
        //! A change of affinities on inhabitant magic action
        inhabitant_change_affinities      = 33;
        //! A change of alerted state on inhabitant magic action
        inhabitant_change_alerted_state   = 34;
        //! A change of confined state on inhabitant magic action
        inhabitant_change_confined_state  = 35;
        //! A change of affinities on unit magic action
        unit_change_affinities            = 36;
        //! An extension change magic action
        change_extension                  = 37;
        //! Change critical intelligence magic action
        change_critical_intelligence      = 38;
        //! An equipment transfer magic action
        transfer_equipment                = 39;
        //! A change equipment human size magic action
        change_equipment_human_size       = 40;
        //! A create breakdowns magic action
        create_breakdowns                 = 41;
        //! A create wounds magic action
        create_wounds                     = 42;
        //! A magic action forcing to reload the brain of the entity
        reload_brain                      = 43;
        //! No parameters, magically finish the current logistic actions
        log_finish_handlings              = 44;
        //! A change equipment state magic action
        change_equipment_state            = 45;
        //! A change human state magic action
        change_human_state                = 46;
        //! A create dotation magic action
        change_dotation                   = 47;
        //! A direct fire order creation magic action
        create_direct_fire_order          = 48;
        //! A unit loading magic action
        load_unit                         = 49;
        //! A unit unloading magic action
        unload_unit                       = 50;
        //! Remove a unit from game
        //! The tasker must be set to selected unit.
        //! result[0], UnitId: deleted unit identifier.
        delete_unit                       = 51;
        //! A recover all except log magic action
        recover_all_except_log            = 52;
        //! A recover troops except log magic action
        recover_troops_except_log         = 53;
        //! A recover equiments except log magic action
        recover_equipments_except_log     = 54;
        //! A recover resources except log magic action
        recover_resources_except_log      = 55;
    }
    //! The tasker @todo Explain what is a "tasker"
    required Tasker            tasker     = 1;
    //! The magic action typ
    required Type              type       = 2;
    //! The magic action parameters depending on the magic action type
    required MissionParameters parameters = 3;
}

/** @struct KnowledgeMagicAction
    @brief A knowledge magic action request
    @todo no corresponding ack message ?
*/
message KnowledgeMagicAction {
    /** @enum Type
        @brief The type of magic action.
        @todo Explain what parameters are expected for each type
    */
    enum Type {
        //! A enable knowledge magic action
        enable              = 0;
        //! A update party knowledge magic action
        update_party        = 1;
        //! A update party parent knowledge magic action
        update_party_parent = 2;
        //! A update type knowledge magic action
        update_type         = 3;
        //! An add knowledge in group magic action
        add_knowledge       = 4;
    }
    //! The knowledge group identifier
    required KnowledgeGroupId  knowledge_group = 1;
    //! The magic action type
    required Type              type            = 2;
    //! The magic action parameters, depending on the magic action type
    required MissionParameters parameters      = 3;
}

/** @struct ObjectMagicAction
    @brief An object magic action request
    @see ObjectMagicActionAck
*/
message ObjectMagicAction {
    /** @enum Type
        @brief The type of magic action.

        Specific parameters are expected for each type.

        @todo Explain what parameters are expected for each type
    */
    enum Type {
        /** @brief A create object magic action.
        */
        create  = 0;
        /** @brief An update object magic action.
        */
        update  = 1;
        /** @brief A destroy object magic action.
        */
        destroy = 2;
    }
    /** @enum Attribute
        @brief The type of object.

        The first parameter among the parameters actually is of type
        MissionParameter::Value::identifier and must be reinterpreted as
        a value of this enumeration.

        @todo to be refactored
    */
    enum Attribute {
        construction       = 0;
        obstacle           = 1;
        mine               = 2;
        time_limit         = 3;
        bypass             = 4;
        logistic           = 5;
        nbc                = 6;
        crossing_site      = 7;
        supply_route       = 8;
        toxic_cloud        = 9;
        fire               = 10;
        medical_treatment  = 11;
        interaction_height = 12;
        stock              = 13;
        nbc_agent          = 14;
        effect_delay       = 15;
        flood              = 16;
        structural_state   = 18;
        infrastructure     = 19;
        usages             = 20;
        lodging            = 21;
        trafficability     = 22;
        underground        = 23;
        confined           = 24;
        alerted            = 25;
        evacuated          = 26;
        resource_network   = 27;
        altitude_modifier  = 28;
        disaster           = 29;
        density            = 30;
    }
    //! The object identifier
    required ObjectId          object     = 1;
    //! The type of magic action
    required Type              type       = 2;
    //! The parameters of the magic action : the first parameter must
    //! be the object type name and the second parameter must be the
    //! object location
    required MissionParameters parameters = 3;
}

/** @struct MagicAction
    @brief A magic action request
    @see MagicActionAck
*/
message MagicAction {
    /** @enum Type
        @brief The type of magic action.

        Specific parameters are expected for each type.

        @todo Explain what parameters are expected for each type
    */
    enum Type {
        //! A global weather magic action
        global_weather                     = 0;
        //! Create or update a local weather.
        //! parameters[0], AReal: temperature.
        //! parameters[1], AReal: wind speed in km/h.
        //! parameters[2], Heading: the direction where the wind flows
        //!   in degrees.
        //! parameters[3], AReal: cloud layer bottom altitude in meters.
        //! parameters[4], AReal: cloud layer top altitude in meters.
        //! parameters[5], AReal: cloud density.
        //! parameters[6], Enumeration: a value within PrecipicationType.
        //! parameters[7], Datetime: start time.
        //! parameters[8], Datetime: end time.
        //! parameters[9], Location: a location with two points defining
        //!   the area top-left and bottom right corners.
        //! parameters[10], Identifier, optional: the identifier of a
        //!   local weather to update. If not passed, a local weather is
        //!   created instead.
        local_weather                      = 1;
        //! A local weather destruction magic action
        local_weather_destruction          = 2;
        //! A change diplomacy magic action
        change_diplomacy                   = 3;
        //! A create knowledge magic action
        create_knowledge_group             = 4;
        //! A change resource network properties magic action
        change_resource_network_properties = 5;
        //! A fire order on location magic action
        create_fire_order_on_location      = 6;
    }
    //! The type of magic action
    required Type              type       = 1;
    //! The parameters of the magic action
    required MissionParameters parameters = 2;
}

/** @struct ControlCheckPointSetFrequency
    @brief Requests a checkpoint frequency change
    @see ControlCheckPointSetFrequencyAck
    @todo rename to ControlCheckpointSetFrequency
*/
message ControlCheckPointSetFrequency {
    //! The frequency of checkpoints in minutes
    required int32 frequency = 1;
}

/** @struct ControlCheckPointDeleteRequest
    @brief Request the deletion of a checkpoint
    @see ControlCheckPointDeleteAck
*/
message ControlCheckPointDeleteRequest {
    //! The checkpoint identifier
    required string checkpoint = 1;
}

/** @struct ControlCheckPointListRequest
    @brief Request the list of previously saved checkpoints
    @see ControlCheckPointListAck
    @see ControlCheckPointList
*/
message ControlCheckPointListRequest {
}

/** @struct ControlEnableVisionCones
    @brief A vision cones toggle request.

    This message is sent by a client to toggle the sending of vision
    cones. Enabling vision cones will produce UnitVisionCones messages.

    @see UnitVisionCones
    @todo see how it is related to ControlInformation::send_vision_cones
*/
message ControlEnableVisionCones {
    //! Whether to activate vision cones or not
    required bool vision_cones = 1;
}

/** @struct ChangePopulationMagicAction
    @brief A change population magic action.
    @see UnitMagicActionAck
*/
message ChangePopulationMagicAction {
    //! The population identifier @todo rename to population
    required PopulationId   tasker     = 1;
    //! The party adhesions
    repeated PartyAdhesion  adhesions  = 2;
    //! The number of healthy persons
    optional int32          healthy    = 3;
    //! The number of wounded persons
    optional int32          wounded    = 4;
    //! The number of dead persons
    optional int32          dead       = 5;
    //! The motivation @todo What is that ?
    optional string         motivation = 6;
    //! Whether the population have received an alert
    optional bool           alerted    = 7;
}

/** @struct BurningCellRequest
    @brief Request details of a burning cell.

    This message is sent by a client to request burning cell details.

    @see BurningCellRequestAck
*/
message BurningCellRequest {

    /** @property object
        @brief Id of the burning object
    */
    required ObjectId object = 1;

    /** @property x
        @brief X coordinates of the burning cell.
    */
    required float x = 2;
    /** @property y
        @brief Y coordinates of the burning cell.
    */
    required float y = 3;
}

/** @struct OrderStream
*/
message OrderStream {
    //! The serialized order
    required string serialized_order = 1;
}

/** @struct ClientToSim
    @brief Wraps messages from clients to the simulation
*/
message ClientToSim {
    /** @struct Content
        @brief The possible messages contained in a client to simulation
               message.
        @warning Each Content message must contain exactly one of the
                 possible messages.
    */
    message Content {
        //! @copybrief ControlStop
        optional ControlStop              control_stop                    = 1;
        //! @copybrief ControlPause
        optional ControlPause             control_pause                   = 2;
        //! @copybrief ControlResume
        optional ControlResume            control_resume                  = 3;
        //! @copybrief ControlChangeTimeFactor
        optional ControlChangeTimeFactor  control_change_time_factor      = 4;
        //! @copybrief ControlDateTimeChange
        optional ControlDateTimeChange    control_date_time_change        = 5;
        //! @copybrief ControlCheckPointSaveNow
        optional ControlCheckPointSaveNow control_checkpoint_save_now     = 6;
        //! @copybrief ControlCheckPointSetFrequency
        optional ControlCheckPointSetFrequency
            control_checkpoint_set_frequency  = 7;
        //! @copybrief ControlEnableVisionCones
        optional ControlEnableVisionCones control_toggle_vision_cones     = 8;
        //! @copybrief UnitOrder
        optional UnitOrder                unit_order                      = 9;
        //! @copybrief AutomatOrder
        optional AutomatOrder             automat_order                   = 10;
        //! @copybrief CrowdOrder
        optional CrowdOrder               crowd_order                     = 11;
        //! @copybrief FragOrder
        optional FragOrder                frag_order                      = 12;
        //! @copybrief SetAutomatMode
        optional SetAutomatMode           set_automat_mode                = 13;
        //! @copybrief UnitCreationRequest
        optional UnitCreationRequest      unit_creation_request           = 14;
        //! @copybrief UnitCreationRequest
        optional UnitMagicAction          unit_magic_action               = 15;
        //! @copybrief ObjectMagicAction
        optional ObjectMagicAction        object_magic_action             = 16;
        //! @copybrief KnowledgeMagicAction
        optional KnowledgeMagicAction     knowledge_magic_action          = 17;
        //! @copybrief MagicAction
        optional MagicAction              magic_action                    = 18;
        //! @copybrief ControlCheckPointListRequest
        optional ControlCheckPointListRequest
            control_checkpoint_list_request   = 19;
        //! @copybrief ControlCheckPointDeleteRequest
        optional ControlCheckPointDeleteRequest
            control_checkpoint_delete_request = 20;
        //! @copybrief ChangePopulationMagicAction
        optional ChangePopulationMagicAction
            change_population_magic_action = 21;
        /** @property burning_cell_request
            @brief @copybrief BurningCellRequest
            @see BurningCellRequest
        */
        optional BurningCellRequest       burning_cell_request            = 23;
        optional OrderStream              order_stream                    = 24;
    }
    /** @property context
        @brief Identifies the request matching the response

        This field is used to fill the "context" fields in the response
        message (from SimToClient). This context allows the client
        application to put an unique identifier (based for instance on
        MAC address), thus allowing to track response message matching a
        specific request emitted by the client.
    */
    optional int32   context = 1;
    //! The content of the message
    required Content message = 2;
    //! specific messages, mostly requests acknowledgements.
    optional int32   client_id = 3;
}

/** @}*/

// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";
import "simulation_client.proto";

package sword;

/** @file
 *  @brief Messages from the replay module to clients
 *  @addtogroup Replay
 *  @{
 */

/** @struct ControlReplayInformation
    @brief Aggregates the replay information
*/
message ControlReplayInformation {
    //! The current tick number
    required int32               current_tick      = 1;
    //! The starting date and time
    required DateTime            initial_date_time = 2;
    //! The current date and time
    required DateTime            date_time         = 3;
    //! The current tick duration in seconds
    required int32               tick_duration     = 4;
    //! The simulation time multiplier
    required int32               time_factor       = 5;
    //! The simulation status
    required EnumSimulationState status            = 6;
    //! The total number of ticks in the replay
    required int32               tick_count        = 7;
    //! The first tick recorded
    optional int32               first_tick        = 8;
    //! The real current date and time
    optional DateTime            real_date_time    = 9;
    //! The end date and time
    optional DateTime            end_date_time     = 10;
}

/** @struct ControlSkipToTickAck
    @brief Acknowledges a tick skip message

    @see ControlSkipToTick
*/
message ControlSkipToTickAck {
    //! The tick number
    required int32                tick       = 1;
    //! The error code
    required ControlAck.ErrorCode error_code = 2;
}

/** @struct TimeTableRequestAck
    @brief Acknowledges a time table request message

    @see TimeTableRequest
*/
message TimeTableRequestAck {
    /** @enum ErrorCode
        @brief The error code
    */
    enum ErrorCode {
        //! No error
        no_error           = 0;
        //! Invalid tick range
        invalid_tick_range = 1;
    }
    //! The error code
    required ErrorCode        error_code = 1;
}

/** @struct TimeTable
    @brief Sends a time table

    @see TimeTableRequest
*/
message TimeTable {
    /** @struct TimeMapping
        @brief Mapping between a tick, simulation time and real time
    */
    message TimeMapping {
        //! The tick
        required int32    tick            = 1;
        //! The simulation time
        required DateTime simulation_time = 2;
        //! The real time
        required DateTime real_time       = 3;
    }
    //! The time mapping table
    repeated TimeMapping time_table_item = 1;
    //! The completion status
    optional bool        partial         = 2 [ default = false ];
}

/** @struct NewDataChunkNotification
    @brief Sent when a replay chunk is completed
*/
message NewDataChunkNotification {
    //! The last tick for this chunk
    required int32 last_tick        = 1;
    //! The end date/time
    optional DateTime end_date_time = 2;
}

/** @struct ReplayToClient
    @brief Wraps available messages going from replay to client

    This is the actual message sent over the network.
*/
message ReplayToClient {
    /** @struct Content
        @brief The possible messages contained in a replay to client
               message
        @warning Each Content message must contain exactly one of the
                 possible messages.
    */
    message Content {
        //! @copybrief ControlReplayInformation
        optional ControlReplayInformation   control_replay_information     = 1;
        //! @copybrief ControlSkipToTickAck
        optional ControlSkipToTickAck       control_skip_to_tick_ack       = 2;
        //! @copybrief ControlStopAck
        optional ControlStopAck             control_stop_ack               = 3;
        //! @copybrief ControlPauseAck
        optional ControlPauseAck            control_pause_ack              = 4;
        //! @copybrief ControlResumeAck
        optional ControlResumeAck           control_resume_ack             = 5;
        //! @copybrief ControlChangeTimeFactorAck
        optional ControlChangeTimeFactorAck control_change_time_factor_ack = 6;
        //! @copybrief TimeTableRequestAck
        optional TimeTableRequestAck        time_table_request_ack         = 7;
        //! @copybrief TimeTable
        optional TimeTable                  time_table                     = 8;
        //! @copybrief NewDataChunkNotification
        optional NewDataChunkNotification   new_data_chunk_notification    = 9;
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is used to fill the "context" fields in the response
        messages. This context allows the client application to put an
        unique identifier (based for instance on MAC address), thus
        allowing to track response message matching a specific request
        emitted by the client.
    */
    optional int32   context = 1;
    //! A field containing one of the messages to be sent
    required Content message = 2;
    //! Acknowledgent messages will use this field to identify client
    //! recipient.
    optional int32   client_id = 3;
    //! This fields will eventually supersede message specific error
    //! handling. For now, ignore it unless a client message explicitely
    //! states it is using it, in which case a non-empty message signals
    //! an error.
    optional string  error_msg = 4;
}

/** @}*/

// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";
import "simulation_client.proto";

package sword;

/** @file
 *  @brief Messages from the replay module to clients
 *  @addtogroup Replay
 *  @{
 */

/** @struct ControlReplayInformation
    @brief Aggregates the replay information
*/
message ControlReplayInformation {
   required int32               current_tick      = 1; //!< The current tick number
   required DateTime            initial_date_time = 2; //!< The starting date and time
   required DateTime            date_time         = 3; //!< The current date and time
   required int32               tick_duration     = 4; //!< The current tick duration in seconds
   required int32               time_factor       = 5; //!< The simulation time multiplier
   required EnumSimulationState status            = 6; //!< The simulation status
   required int32               tick_count        = 7; //!< The total number of ticks in the replay
}

/** @struct ControlSkipToTickAck
    @brief Acknowledges a tick skip message

    @see ControlSkipToTick
*/
message ControlSkipToTickAck {
   required int32                tick       = 1; //!< The tick number
   required ControlAck.ErrorCode error_code = 2; //!< The error code
}

/** @struct TimeTableRequestAck
    @brief Acknowledges a time table request message

    @see TimeTableRequest
*/
message TimeTableRequestAck {
    /** @enum ErrorCode
        @brief The error code
    */
    enum ErrorCode {
        no_error           = 0; //!< No error
        invalid_tick_range = 1; //!< Invalid tick range
    }
    required ErrorCode        error_code = 1; //!< The error code
}

/** @struct TimeTable
    @brief Sends a time table

    @see TimeTableRequest
*/
message TimeTable {
    /** @struct TimeMapping
        @brief Mapping between a tick, simulation time and real time
    */
    message TimeMapping {
        required int32    tick            = 1; //!< The tick
        required DateTime simulation_time = 2; //!< The simulation time
        required DateTime real_time       = 3; //!< The real time
    }
    repeated TimeMapping time_table_item = 1; //!< The time mapping table
}

/** @struct NewDataChunkNotification
    @brief Sent when a replay chunk is completed
*/
message NewDataChunkNotification {
    required int32 last_tick = 1; //!< The last tick for this chunk
}

message ReplaySendCurrentStateBegin {
}

message ReplaySendCurrentStateEnd {
}


/** @struct ReplayToClient
    @brief Wraps available messages going from replay to client

    This is the actual message sent over the network.
*/
message ReplayToClient {
    /** @struct Content
        @brief The possible messages contained in a replay to client message
        @warning Each Content message must contain exactly one of the possible messages.
    */
    message Content {
        optional ControlReplayInformation    control_replay_information      = 1; //!< @copybrief ControlReplayInformation
        optional ControlSkipToTickAck        control_skip_to_tick_ack        = 2; //!< @copybrief ControlSkipToTickAck
        optional ControlStopAck              control_stop_ack                = 3; //!< @copybrief ControlStopAck
        optional ControlPauseAck             control_pause_ack               = 4; //!< @copybrief ControlPauseAck
        optional ControlResumeAck            control_resume_ack              = 5; //!< @copybrief ControlResumeAck
        optional ControlChangeTimeFactorAck  control_change_time_factor_ack  = 6; //!< @copybrief ControlChangeTimeFactorAck
        optional TimeTableRequestAck         time_table_request_ack          = 7; //!< @copybrief TimeTableRequestAck
        optional TimeTable                   time_table                      = 8; //!< @copybrief TimeTable
        optional NewDataChunkNotification    new_data_chunk_notification     = 9; //!< @copybrief NewDataChunkNotification
        optional ReplaySendCurrentStateBegin control_send_current_state_begin = 10;
        optional ReplaySendCurrentStateEnd   control_send_current_state_end = 11;
}
    /** @property context
        @brief Identifies the request matching the response.

        This field is used to fill the "context" fields in the response messages.

        This context allows the client application to put an unique identifier
        (based for instance on MAC address), thus allowing to track response
        message matching a specific request emitted by the client.
    */
    optional int32   context = 1;
    required Content message = 2; //!< A field containing one of the messages to be sent
}

/** @}*/

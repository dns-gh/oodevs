// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @file
 *  @brief Messages from the messenger module to clients
 *  @addtogroup Messenger
 *  @{
 */

/** @struct TacticalLineAck
    @brief A container for limit/phase line acknowledgement error message.
*/
message TacticalLineAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               tactical line (limits and phase lines) creation, update and
               destruction operations.
    */
    enum ErrorCode {
        /** @brief Operation succeeded

            @todo As error codes are optional, no_error should not exist
        */
        no_error                    = 0;
        /** @brief Operation failed because of an invalid identifier.
            When updating or destroying a limit/phase line, the client must provide
            a valid identifier, that is an existing limit/phase line identifier.
        */
        error_invalid_id            = 1;
        /** @brief Operation failed because of an invalid geometry.
            When creating or updating a limit/phase line, the client must provide
            a valid geometry (list of at least 2 points).
        */
        error_invalid_geometry      = 2;
        /** @brief Operation failed because of an invalid diffusion.
            When creating or updating a limit/phase line, the client must provide
            a valid diffusion, that is an existing automat or formation to act as
            the container for the limit/phase line.
        */
        error_invalid_diffusion     = 3;
    }
}

/** @struct LimitCreation
    @brief A limit creation message.

    This message is sent when a limit is created :
    @li When connecting to a running exercise; creation of available limits is notified to client
    @li During the game, upon client request
*/
message LimitCreation {
    /** @property id
        @brief The unique limit identifier generated by the server.
        @see TacticalLineId
    */
    required TacticalLineId id            = 1;
    /** @property tactical_line
        @brief Information about the created limit.
        @see TacticalLine
    */
    required TacticalLine   tactical_line = 2;
}

/** @struct LimitUpdate
    @brief A limit update message.

    This message is sent when a limit is updated during the game upon client request.
*/
message LimitUpdate {
    /** @property id
        @brief Identifier of the updated limit.
        @see TacticalLineId
    */
    required TacticalLineId  id         = 1;
    /** @property tactical_line
        @brief Information about the updated limit.
        @see TacticalLine
    */
    required TacticalLine tactical_line = 2;
}

/** @struct LimitDestruction
    @brief A limit destruction message.

    This message is sent:
    @li When a limit is destroyed during the game upon client request.
    @li When the exercise terminates.
*/
message LimitDestruction {
    /** @property id
        @brief Identifier of the destroyed limit.
        @see TacticalLineId
    */
    required TacticalLineId id = 1;
}

/** @struct LimitCreationRequestAck
    @brief A limit creation request acknowledgement message.

    This message is sent when a limit is created in response to a client request.
*/
message LimitCreationRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a limit creation operation.
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;    
}

/** @struct LimitUpdateRequestAck
    @brief A limit update request acknowledgement message.

    This message is sent when a limit is updated in response to a client request.
*/
message LimitUpdateRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a limit update operation.
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;
}

/** @struct LimitDestructionRequestAck
    @brief A limit destruction request acknowledgement message.

    This message is sent when a limit is destroyed in response to a client request.
*/
message LimitDestructionRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a limit update operation.
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;
}

/** @struct PhaseLineCreation
    @brief A phase line creation message.

    This message is sent when a phase line is created :
    @li When connecting to a running exercise available phase lines are notified
    @li During the game, upon manual creation of a phase line

    @see PhaseLineCreationRequest
*/
message PhaseLineCreation {
    /** @property id
        @brief The unique phase line identifier generated by the server.
        @see TacticalLineId
    */
    required TacticalLineId id            = 1;
    /** @property tactical_line
        @brief Information about the created phase line.
        @see TacticalLine
    */
    required TacticalLine   tactical_line = 2;
}

/** @struct PhaseLineDestruction
    @brief A phase line destruction message.

    This message is sent:
    @li When a phase line is destroyed during the game upon client request.
    @li When the exercise terminates.
*/
message PhaseLineDestruction {
    /** @property id
        @brief Identifier of the destroyed phase line.
        @see TacticalLineId
    */
    required TacticalLineId id = 1;
}

/** @struct PhaseLineUpdate
    @brief A phase line update message.

    This message is sent when a phase line is updated during the game upon client request.
*/
message PhaseLineUpdate {
    /** @property id
        @brief Identifier of the updated phase line.
        @see TacticalLineId
    */
    required TacticalLineId id            = 1;
    /** @property tactical_line
        @brief Information about the updated phase line.
        @see TacticalLine
    */
    required TacticalLine   tactical_line = 2;
}

/** @struct PhaseLineCreationAck
    @brief A phase line creation request acknowledgement message.

    This message is sent when a phase line is created in response to a client request.
*/
message PhaseLineCreationAck {
    /** @property error_code
        @brief Reason for the failure of
               a phase line creation operation.
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;  
}

/** @struct PhaseLineUpdateRequestAck
    @brief A phase line update request acknowledgement message.

    This message is sent when a phase line is updated in response to a client request.
*/
message PhaseLineUpdateRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a phase line update operation.
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;
}

/** @struct PhaseLineDestructionRequestAck
    @brief A phase line destruction request acknowledgement message.

    This message is sent when a phase line is destroyed in response to a client request.
*/
message PhaseLineDestructionRequestAck {
    /** @property error_code
        @brief Reason for the failure of a phase line destruction request
        @see TacticalLineAck.ErrorCode
    */
    optional TacticalLineAck.ErrorCode error_code = 1;
}

/** @struct IntelligenceCreation
    @brief An intelligence creation message.

    This message is sent when an intelligence is created. This can occur:
    @li When connecting to a running exercise; creation of available intelligence is notified to client
    @li During the game, upon manual creation of a intelligence
*/
message IntelligenceCreation {
    /** @property id
        @brief The unique intelligence identifier generated by the server.
        @see IntelligenceId
    */
    required IntelligenceId id           = 1;
    /** @property intelligence
        @brief Information about the created intelligence.
        @see Intelligence
    */
    required Intelligence   intelligence = 2;
}

/** @struct IntelligenceUpdate
    @brief An intelligence update message.

    This message is sent when an intelligence is updated during the game upon client request.
*/
message IntelligenceUpdate {
    /** @property id
        @brief Identifier of the updated intelligence.
        @see IntelligenceId
    */
    required IntelligenceId  id        = 1;
    /** @property formation
        @brief The updated identifier of the parent formation of the intelligence.
        @see formationId
        @note Only set if data has changed.
    */
    optional FormationId     formation = 2;
    /** @property name
        @brief The updated name of the intelligence.
        @note Only set if data has changed.
    */
    optional string          name      = 3;
    /** @property nature
        @brief The updated nature (MIL2525B App6 string).
        @note Only set if data has changed.
    */
    optional string          nature    = 4;
    /** @property level
        @brief The updated hierarchical level/echelon of the intelligence.
        @see EnumNatureLevel
        @note Only set if data has changed.
    */
    optional EnumNatureLevel level     = 5;
    /** @property embarked
        @brief The updated embarkment state of the intelligence.
        @note Only set if data has changed.
    */
    optional bool            embarked  = 6;
    /** @property location
        @brief The updated location of the intelligence.
        @see CoordLatLong
        @note Only set if data has changed.
    */
    optional CoordLatLong    location  = 7;
    /** @property diplomacy
        @brief The updated diplomacy/alignment of the intelligence.
        @see EnumDiplomacy
        @note Only set if data has changed.
    */
    optional EnumDiplomacy   diplomacy = 8;
}

/** @struct IntelligenceDestruction
    @brief An intelligence destruction message.

    This message is sent:
    @li When an intelligence is destroyed during the game upon client request.
    @li When the exercise terminates.
*/
message IntelligenceDestruction {
    /** @property id
        @brief Identifier of the destroyed intelligence.
        @see IntelligenceId
    */
    required IntelligenceId id = 1;
}

/** @struct IntelligenceRequestAck
    @brief A container for intelligence acknowledgement error message.
*/
message IntelligenceRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               intelligence creation, update and destruction operations.
    */
    enum ErrorCode {
        /** @brief Operation succeeded

            @todo As error codes are optional, no_error should not exist
        */
        no_error                = 0;
        /** @brief Operation failed because of an invalid identifier.
            When updating or destroying an intelligence, the client must provide
            a valid identifier, that is an existing intelligence identifier.

            @todo rename into error_invalid_id
        */
        error_invalid_oid       = 1;
        /** @brief Operation failed because of an invalid geometry.
            When creating or updating a limit/phase line, the client must provide
            a valid geometry (list of at least 2 points).
        */
        error_invalid_geometry  = 2;
        /** @brief Operation failed because of an invalid formation.
            When creating or updating an intelligence, the client must provide
            a valid formation to act as a parent for the intelligence.
        */
        error_invalid_formation = 3;
    }
}

/** @struct IntelligenceCreationRequestAck
    @brief An intelligence creation request acknowledgement message.

    This message is sent when an intelligence is created in response to a client request.
*/
message IntelligenceCreationRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               an intelligence creation operation.
        @see IntelligenceRequestAck.ErrorCode
    */
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}

/** @struct IntelligenceUpdateRequestAck
    @brief An intelligence update request acknowledgement message.

    This message is sent when an intelligence is updated in response to a client request.
*/
message IntelligenceUpdateRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               an intelligence update operation.
        @see IntelligenceRequestAck.ErrorCode
    */
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}

/** @struct IntelligenceDestructionRequestAck
    @brief An intelligence destruction request acknowledgement message.

    This message is sent when an intelligence is destroyed in response to a client request.
*/
message IntelligenceDestructionRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               an intelligence destruction operation.
        @see IntelligenceRequestAck.ErrorCode
    */
    optional IntelligenceRequestAck.ErrorCode error_code = 1;
}

/** @struct ShapeCreation
    @brief A shape creation message.

    This message is sent when a shape is created. This can occur:
    @li When connecting to a running exercise; creation of available shape is notified to client
    @li During the game, upon manual creation of a shape
    @todo rename into Drawing/Graphics
*/
message ShapeCreation {
    /** @property id
        @brief The unique shape identifier generated by the server.
        @see DrawingId
    */
    required DrawingId id    = 1;
    /** @property shape
        @brief Information about the created shape.
        @see Shape
    */
    required Shape     shape = 2;
}

/** @struct ShapeUpdate
    @brief A shape update message.

    This message is sent when a shape is updated during the game upon client request.
    @todo rename into Drawing/Graphics
*/
message ShapeUpdate {
    /** @property id
        @brief Identifier of the updated shape.
        @see DrawingId
    */
    required DrawingId id    = 1;
    /** @property shape
        @brief Information about the updated shape.
    */
    required Shape     shape = 2;
}

/** @struct ShapeDestruction
    @brief A shape destruction message.

    This message is sent:
    @li When a shape is destroyed during the game upon client request.
    @li When the exercise terminates.
    @todo rename into Drawing/Graphics
*/
message ShapeDestruction {
    /** @property id
        @brief Identifier of the destroyed shape.
        @see DrawingId
    */
    required DrawingId id = 1;
}

/** @struct ShapeRequestAck
    @brief A container for shape acknowledgement error message.
    @todo rename into Drawing/Graphics
*/
message ShapeRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               shape creation, update and destruction operations.
    */
    enum ErrorCode {
        /** @brief Operation succeeded
            @todo As error codes are optional, no_error should not exist
        */
        no_error               = 0;
        /** @brief Operation failed because of an invalid identifier.
            When updating or destroying a shape, the client must provide
            a valid identifier, that is an existing shape identifier.
            @todo rename into error_invalid_id
        */
        error_invalid_oid      = 1;
        /** @brief Operation failed because of an invalid geometry.
            When creating or updating a shape, the client must provide
            a valid geometry (one or more points depending on the type of drawing).
        */
        error_invalid_geometry = 2;
    }
}

/** @struct ShapeCreationRequestAck
    @brief A shape creation request acknowledgement message.

    This message is sent when a shape is created in response to a client request.
*/
message ShapeCreationRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a shape creation operation.
        @see ShapeRequestAck.ErrorCode
        @bug should not be required
    */
    required ShapeRequestAck.ErrorCode error_code = 1;  
}

/** @struct ShapeUpdateRequestAck
    @brief A shape update request acknowledgement message.

    This message is sent when a shape is updated in response to a client request.
*/
message ShapeUpdateRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a shape update operation.
        @see ShapeRequestAck.ErrorCode
    */
    optional ShapeRequestAck.ErrorCode error_code = 1;
}

/** @struct ShapeDestructionRequestAck
    @brief A shape destruction request acknowledgement message.

    This message is sent when a shape is destroyed in response to a client request.
*/
message ShapeDestructionRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a shape destruction operation.
        @see ShapeRequestAck.ErrorCode
    */
    required ShapeRequestAck.ErrorCode error_code = 1;
}

/** @struct MarkerCreation
    @brief A marker creation message.

    This message is sent when a marker is created. This can occur:
    @li When connecting to a running exercise; creation of available marker is notified to client
    @li During the game, upon manual creation of a marker
*/
message MarkerCreation {
    /** @property marker
        @brief The unique marker identifier generated by the server.
        @see MarkerId
        @todo should be named "id" instead of "marker" (coherence)
    */
    required MarkerId marker     = 1;
    /** @property definition
        @brief Information about the created marker.
        @see Marker
        @todo should be named "marker" instead of "definition" (coherence)
    */
    required Marker   definition = 2;
    /** @property date
        @brief Date and time of marker creation.
        @see DateTime
    */
    required DateTime date  = 3;
}

/** @struct MarkerUpdate
    @brief A marker update message.

    This message is sent when a marker is updated during the game upon client request.
*/
message MarkerUpdate {
    /** @property marker
        @brief Identifier of the updated marker.
        @see MarkerId
        @todo should be named "id" instead of "marker" (coherence)
    */
    required MarkerId marker      = 1;
    /** @property date
        @brief Date and time of marker update.
        @see DateTime
    */
    required DateTime date        = 2;
    /** @property name
        @brief The updated name of the marker.
        @note Only set if data has changed.
    */
    optional string   name        = 3;
    /** @property description
        @brief The updated description of the marker.
        @note Only set if data has changed.
    */
    optional string   description = 4;
    /** @property parent
        @brief The updated parent marker identifier of the marker.
        This field is used to define a marker hierarchy.
        @see MarkerId
        @note Only set if data has changed.
    */
    optional MarkerId parent      = 5;
    /** @property number
        @brief The updated number of the marker. This is a user defined identifier.
        @note Only set if data has changed.
        @todo remove/rename/generalize for user defined marker data
    */
    optional string   number      = 6;
}

/** @struct MarkerDestruction
    @brief A marker destruction message.

    This message is sent:
    @li When a marker is destroyed during the game upon client request.
    @li When the exercise terminates.
*/
message MarkerDestruction {
    /** @property marker
        @brief Identifier of the destroyed marker.
        @see MarkerId
        @todo should be named "id" instead of "marker" (coherence)
    */
    required MarkerId marker = 1;
}

/** @struct MarkerRequestAck
    @brief A container for marker acknowledgement error message.
*/
message MarkerRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               marker creation, update and destruction operations.
    */
    enum ErrorCode {
        /** @brief Operation succeeded
            @todo As error codes are optional, no_error should not exist
        */
        no_error             = 0;
        /** @brief Operation failed because of an invalid identifier.
            When updating or destroying a marker, the client must provide
            a valid identifier, that is an existing marker identifier.
        */
        error_invalid_id     = 1;
        /** @brief Operation failed because of an invalid parent identifier.
            When creating or updating a shape, the client can provide
            a parent identifier in which case it has to be an existing marker
            identifier (and not itself).
        */
        error_invalid_parent = 2;
    }
}

/** @struct MarkerCreationRequestAck
    @brief A marker creation request acknowledgement message.

    This message is sent when a marker is created in response to a client request.
    @bug not registered into MessengerToClient, never sent
*/
message MarkerCreationRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a marker creation operation.
        @see MarkerRequestAck.ErrorCode
        @bug should not be required
    */
    required MarkerRequestAck.ErrorCode error_code = 1;   
}

/** @struct MarkerUpdateRequestAck
    @brief A marker update request acknowledgement message.

    This message is sent when a marker is updated in response to a client request.
    @bug not registered into MessengerToClient, never sent
*/
message MarkerUpdateRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a marker update operation.
        @see MarkerRequestAck.ErrorCode
    */
    optional MarkerRequestAck.ErrorCode error_code = 1;
}

/** @struct MarkerDestructionRequestAck
    @brief A marker destruction request acknowledgement message.

    This message is sent when a marker is destroyed in response to a client request.
    @bug not registered into MessengerToClient, never sent
*/
message MarkerDestructionRequestAck {
    /** @property error_code
        @brief Reason for the failure of
               a marker destruction operation.
        @see MarkerRequestAck.ErrorCode
    */
    required MarkerRequestAck.ErrorCode error_code = 1;
}

/** @struct ClientObjectCreation
    @brief A client object creation message.

    This message is sent when a client object is created. This can occur:
    @li When connecting to a running exercise; creation of available client objects is notified to client
    @li During the game, upon manual creation of a client object
*/
message ClientObjectCreation {
    /** @property object
        @brief The unique client object identifier generated by the server.
        @see ClientObjectId
        @todo should be named "id" instead of "object" (coherence)
    */
    required ClientObjectId       object     = 1;
    /** @property name
        @brief The name of the client object.
        @todo should be optional as it is optional in ClientObjectCreationRequest
    */
    required string               name       = 2;
    /** @property properties
        @brief The list of properties of the client object.
        @see ClientObjectProperty
    */
    repeated ClientObjectProperty properties = 3;
}

/** @struct ClientObjectUpdate
    @brief A client object update message.

    This message is sent when a client object is updated during the game upon client request.
*/
message ClientObjectUpdate {
    /** @property object
        @brief Identifier of the updated client object.
        @see ClientObjectId
        @todo should be named "id" instead of "object" (coherence)
    */
    required ClientObjectId       object     = 1;
    /** @property name
        @brief The updated name of the marker.
        @note Only set if data has changed.
    */
    optional string               name       = 2;
    /** @property properties
        @brief The updated properties of the client object.
        @see ClientObjectProperty
        @note Only set if data has changed.
    */
    repeated ClientObjectProperty properties = 3;
}

/** @struct ClientObjectDestruction
    @brief A client object destruction message.

    This message is sent:
    @li When a client objec tis destroyed during the game upon client request.
    @li When the exercise terminates.
*/
message ClientObjectDestruction {
    /** @property object
        @brief Identifier of the destroyed client object.
        @see ClientObjectId
        @todo should be named "id" instead of "object" (coherence)
    */
    required ClientObjectId object = 1;
}

/** @struct ClientObjectAck
    @brief A container for client object acknowledgement error message.

    @todo rename into ClientObjectRequestAck
*/
message ClientObjectAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               client object creation, update and destruction operations.
    */
    enum ErrorCode {
        /** @brief Operation succeeded
        */
        success                  = 0;
        /** @brief Operation failed because of a duplicated attribute name.
            When creating or updating a client object, the client must provide
            a list of attributes, each of which must be identified by a unique name.
        */
        duplicate_attribute_name = 1;
        /** @brief Operation failed because of an invalid attribute name.
            When updating or destroying a marker, the client must provide
            a list of attribute, each of which must be identified by a valid (non-empty) name.
        */
        invalid_attribute_name   = 2;
        /** @brief Operation failed because of an invalid identifier.
            When updating or destroying a client object, the client must provide
            a valid identifier, that is an existing client object identifier.
        */
        invalid_object_id        = 3;
    }
}

/** @struct ClientObjectCreationRequestAck
    @brief A client object creation request acknowledgement message.

    This message is sent when a client object is created in response to a client request.
*/
message ClientObjectCreationRequestAck {
    /** @property name
        @brief The name of the client object for which creation has been requested.
    */
    required string                    name       = 1;
    /** @property error_code
        @brief Reason for the failure of
               a client object creation operation.
        @see ClientObjectAck.ErrorCode
    */
    required ClientObjectAck.ErrorCode error_code = 2;
}

/** @struct ClientObjectUpdateRequestAck
    @brief A client object update request acknowledgement message.

    This message is sent when a client object is updated in response to a client request.
*/
message ClientObjectUpdateRequestAck {
    /** @property object
        @brief Identifier of the client object for which update was requested.
        @see ClientObjectId
    */
    required ClientObjectId            object     = 1;
    /** @property error_code
        @brief Reason for the failure of
               a client object update operation.
        @see ClientObjectAck.ErrorCode
    */
    required ClientObjectAck.ErrorCode error_code = 2;
}

/** @struct ClientObjectDestructionRequestAck
    @brief A client object destruction request acknowledgement message.

    This message is sent when a client object is destroyed in response to a client request.
*/
message ClientObjectDestructionRequestAck {
    /** @property object
        @brief Identifier of the client object for which destruction was requested.
        @see ClientObjectId
    */
    required ClientObjectId            object     = 1;
    /** @property error_code
        @brief Reason for the failure of
               a client object destruction operation.
        @see ClientObjectAck.ErrorCode
    */
    required ClientObjectAck.ErrorCode error_code = 2;
}

/** @struct MessengerToClient
    @brief Wraps messages from messenger to client.

    This is the actual message sent over the network.
*/
message MessengerToClient {
    /** @struct Content
        @brief The possible messages contained in a messenger to client message.
        @warning Each Content message must contain exactly one of the possible messages.
    */
    message Content {
        optional LimitCreation                     limit_creation                       = 1;  //!< @copybrief LimitCreation @see LimitCreation
        optional LimitUpdate                       limit_update                         = 2;  //!< @copybrief LimitUpdate @see LimitUpdate
        optional LimitDestruction                  limit_destruction                    = 3;  //!< @copybrief LimitDestruction @see LimitDestruction
        optional LimitCreationRequestAck           limit_creation_request_ack           = 4;  //!< @copybrief LimitCreationRequestAck @see LimitCreationRequestAck
        optional LimitDestructionRequestAck        limit_destruction_request_ack        = 5;  //!< @copybrief LimitDestructionRequestAck @see LimitDestructionRequestAck
        optional LimitUpdateRequestAck             limit_update_request_ack             = 6;  //!< @copybrief LimitUpdateRequestAck @see LimitUpdateRequestAck
        optional PhaseLineCreation                 phase_line_creation                  = 7;  //!< @copybrief PhaseLineCreation @see PhaseLineCreation @todo rename into phase_line_creation
        optional PhaseLineUpdate                   phase_line_update                    = 8;  //!< @copybrief PhaseLineUpdate @see PhaseLineUpdate
        optional PhaseLineDestruction              phase_line_destruction               = 9;  //!< @copybrief PhaseLineDestruction @see PhaseLineDestruction
        optional PhaseLineCreationAck              phase_line_creation_request_ack      = 10; //!< @copybrief PhaseLineCreationAck @see PhaseLineCreationAck
        optional PhaseLineDestructionRequestAck    phase_line_destruction_request_ack   = 11; //!< @copybrief PhaseLineUpdateRequestAck @see PhaseLineUpdateRequestAck
        optional PhaseLineUpdateRequestAck         phase_line_update_request_ack        = 12; //!< @copybrief PhaseLineDestructionRequestAck @see PhaseLineDestructionRequestAck
        optional IntelligenceCreation              intelligence_creation                = 13; //!< @copybrief IntelligenceCreation @see IntelligenceCreation
        optional IntelligenceUpdate                intelligence_update                  = 14; //!< @copybrief IntelligenceUpdate @see IntelligenceUpdate
        optional IntelligenceDestruction           intelligence_destruction             = 15; //!< @copybrief IntelligenceDestruction @see IntelligenceDestruction
        optional IntelligenceCreationRequestAck    intelligence_creation_request_ack    = 16; //!< @copybrief IntelligenceCreationRequestAck @see IntelligenceCreationRequestAck
        optional IntelligenceUpdateRequestAck      intelligence_update_request_ack      = 17; //!< @copybrief IntelligenceUpdateRequestAck @see IntelligenceUpdateRequestAck
        optional IntelligenceDestructionRequestAck intelligence_destruction_request_ack = 18; //!< @copybrief IntelligenceDestructionRequestAck @see IntelligenceDestructionRequestAck
        optional ShapeCreation                     shape_creation                       = 19; //!< @copybrief ShapeCreation @see ShapeCreation @todo rename into drawing_creation
        optional ShapeUpdate                       shape_update                         = 20; //!< @copybrief ShapeUpdate @see ShapeUpdate @todo rename into drawing_update
        optional ShapeDestruction                  shape_destruction                    = 21; //!< @copybrief ShapeDestruction @see ShapeDestruction @todo rename into drawing_destruction
        optional ShapeCreationRequestAck           shape_creation_request_ack           = 22; //!< @copybrief ShapeCreationRequestAck @see ShapeCreationRequestAck @todo rename into drawing_creation_request_ack
        optional ShapeDestructionRequestAck        shape_destruction_request_ack        = 23; //!< @copybrief ShapeDestructionRequestAck @see ShapeDestructionRequestAck @todo rename into drawing_destruction_request_ack
        optional ShapeUpdateRequestAck             shape_update_request_ack             = 24; //!< @copybrief ShapeUpdateRequestAck @see ShapeUpdateRequestAck @todo rename into drawing_update_request_ack
        optional TextMessage                       text_message                         = 25; //!< @copybrief TextMessage @see TextMessage
        optional MarkerCreation                    marker_creation                      = 26; //!< @copybrief MarkerCreation @see MarkerCreation
        optional MarkerUpdate                      marker_update                        = 27; //!< @copybrief MarkerUpdate @see MarkerUpdate
        optional MarkerDestruction                 marker_destruction                   = 28; //!< @copybrief MarkerDestruction @see MarkerDestruction
        optional ClientObjectCreation              client_object_creation               = 29; //!< @copybrief ClientObjectCreation @see ClientObjectCreation
        optional ClientObjectUpdate                client_object_update                 = 30; //!< @copybrief ClientObjectUpdate @see ClientObjectUpdate
        optional ClientObjectDestruction           client_object_destruction            = 31; //!< @copybrief ClientObjectDestruction @see ClientObjectDestruction
        optional ClientObjectCreationRequestAck    client_object_creation_ack           = 32; //!< @copybrief ClientObjectCreationRequestAck @see ClientObjectCreationRequestAck
        optional ClientObjectUpdateRequestAck      client_object_update_ack             = 33; //!< @copybrief ClientObjectUpdateRequestAck @see ClientObjectUpdateRequestAck
        optional ClientObjectDestructionRequestAck client_object_destruction_ack        = 34; //!< @copybrief ClientObjectDestructionRequestAck @see ClientObjectDestructionRequestAck
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is filled using the "context" fields provided in the requests.

        This context allows the client application to put an unique identifier
        (based for instance on MAC address), thus allowing to track response
        message matching a specific request emitted by the client.
    */
    optional int32   context = 1;
    required Content message = 2;
}

/** @}*/

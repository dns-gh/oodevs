// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package sword;

// Entity Id types
message AutomatId                     { required uint32              id = 1; }
message AutomatIdList                 { repeated AutomatId         elem = 1; }
message FormationId                   { required uint32              id = 1; }
message FormationIdList               { repeated FormationId       elem = 1; }
message KnowledgeGroupId              { required uint32              id = 1; }
message ObjectId                      { required uint32              id = 1; }
message ObjectKnowledgeId             { required uint32              id = 1; }
message ObjectKnowledgeIdList         { repeated ObjectKnowledgeId elem = 1; }
message PartyId                       { required uint32              id = 1; }
message PartyIdList                   { repeated PartyId           elem = 1; }
message CrowdId                       { required uint32              id = 1; }
message CrowdIdList                   { repeated CrowdId           elem = 1; }
message CrowdKnowledgeId              { required uint32              id = 1; }
message CrowdConcentrationId          { required uint32              id = 1; }
message CrowdConcentrationKnowledgeId { required uint32              id = 1; }
message CrowdFlowId                   { required uint32              id = 1; }
message CrowdFlowKnowledgeId          { required uint32              id = 1; }
message UnitId                        { required uint32              id = 1; }
message UnitIdList                    { repeated UnitId            elem = 1; }
message UnitKnowledgeId               { required uint32              id = 1; }
message UnitKnowledgeIdList           { repeated UnitKnowledgeId   elem = 1; }
message UrbanObjectId                 { required uint32              id = 1; }
message UrbanObjectKnowledgeId        { required uint32              id = 1; }
message ClientObjectId                { required uint32              id = 1; }
message PlannedWorkId                 { required uint32              id = 1; }
message PopulationId                  { required uint32              id = 1; }
message PopulationIdList              { repeated uint32              id = 1; }

message Tasker {
    optional AutomatId   automat   = 1;
    optional FormationId formation = 2;
    optional CrowdId     crowd     = 3;
    optional UnitId      unit      = 4;
    optional PartyId     party     = 5;
}

message ParentEntity {
    optional AutomatId   automat   = 1;
    optional FormationId formation = 2;
}

// messenger entities
message DrawingId             { required uint32  id = 1; }
message IntelligenceId        { required uint32  id = 1; }
message TacticalLineId        { required uint32  id = 1; }
message MarkerId              { required uint32  id = 1; }

// reports
message FireId                { required uint32 id = 1; }
message FireEffectId          { required uint32 id = 1; }
message ReportId              { required uint32 id = 1; }
message WeatherId             { required uint32 id = 1; }

// logistics requests
message MaintenanceRequestId  { required uint32 id = 1; }
message MedicalRequestId      { required uint32 id = 1; }
message SupplyRequestId       { required uint32 id = 1; }

// Static types & categories
message AutomatType           { required uint32 id = 1; }
message BreakdownType         { required uint32 id = 1; }
message EquipmentType         { required uint32 id = 1; }
message FragOrderType         { required uint32 id = 1; }
message MissionType           { required uint32 id = 1; }
message NBCAgentType          { required uint32 id = 1; }
message ObjectType            { required string id = 1; } // should be an integer
message CrowdType             { required uint32 id = 1; }
message ReportType            { required uint32 id = 1; }
message ResourceType          { required uint32 id = 1; }
message UnitType              { required uint32 id = 1; }
message ReportCategory        { required uint32 id = 1; }
message NationalityType       { required uint32 id = 1; }
message ResourceNetworkType   { required string name = 1; }
message PopulationType        { required uint32 id = 1; }

message Heading {
   required int32 heading = 1;
}

message DateTime {
   required string data = 1;
}

message AutomatChangeKnowledgeGroup {
   required AutomatId        automat         = 1;
   required PartyId          party           = 2;
   required KnowledgeGroupId knowledge_group = 3;
}

message ChangeLogisticLinks {
   required ParentEntity requester     = 1;
   optional AutomatId    combat_train  = 2;
   optional ParentEntity logistic_base = 3;
}

message AutomatChangeSuperior {
    message Superior {
       optional FormationId formation = 1;
       optional AutomatId   automat   = 2;
    }
   required AutomatId automat  = 1;
   required Superior  superior = 2;
}

message UnitChangeSuperior {
   required UnitId    unit   = 1;
   required AutomatId parent = 2;
}

enum EnumLogMaintenanceHandlingStatus {
   deplacement_vers_chaine                      = 0;  //!< @todo translate
   attente_disponibilite_remorqueur             = 1;  //!< @todo translate
   remorqueur_deplacement_aller                 = 2;  //!< @todo translate
   remorqueur_chargement                        = 3;  //!< @todo translate
   remorqueur_deplacement_retour                = 4;  //!< @todo translate
   remorqueur_dechargement                      = 5;  //!< @todo translate
   diagnostique_maintenance                     = 6;  //!< @todo translate
   attente_prise_en_charge_par_niveau_superieur = 7;  //!< @todo translate
   attente_disponibilite_pieces                 = 8;  //!< @todo translate
   attente_disponibilite_reparateur             = 9;  //!< @todo translate
   reparation                                   = 10; //!< @todo translate
   retour_pion                                  = 11; //!< @todo translate
   termine_maintenance                          = 12; //!< @todo translate
}

enum EnumLogMedicalHandlingStatus {
   attente_disponibilite_ambulance_releve          = 0;  //!< @todo translate
   ambulance_releve_deplacement_aller              = 1;  //!< @todo translate
   ambulance_releve_chargement                     = 2;  //!< @todo translate
   attente_chargement_complet_ambulance_releve     = 3;  //!< @todo translate
   ambulance_releve_deplacement_retour             = 4;  //!< @todo translate
   ambulance_releve_dechargement                   = 5;  //!< @todo translate
   attente_disponibilite_medecin_pour_diagnostique = 6;  //!< @todo translate
   diagnostique                                    = 7;  //!< @todo translate
   recherche_secteur_tri                           = 8;  //!< @todo translate
   attente_disponibilite_medecin_pour_tri          = 9;  //!< @todo translate
   tri                                             = 10; //!< @todo translate
   recherche_secteur_soin                          = 11; //!< @todo translate
   attente_disponibilite_medecin_pour_soin         = 12; //!< @todo translate
   soin                                            = 13; //!< @todo translate
   hospitalisation                                 = 14; //!< @todo translate
   attente_disponibilite_ambulance_ramassage       = 15; //!< @todo translate
   ambulance_ramassage_chargement                  = 16; //!< @todo translate
   attente_chargement_complet_ambulance_ramassage  = 17; //!< @todo translate
   ambulance_ramassage_deplacement_aller           = 18; //!< @todo translate
   ambulance_ramassage_dechargement                = 19; //!< @todo translate
   termine_medical                                 = 20; //!< @todo translate
}

enum EnumSimulationState {
   running = 0;
   paused  = 1;
   stopped = 2;
   loading = 3;
}

enum EnumDispatcherState {
    available   = 0;
    unavailable = 1;
}

enum EnumMeetingEngagementStatus {
   none_meeting           = 0; //!< @todo translate
   etat_esquive           = 1; //!< @todo translate
   etat_fixe              = 2; //!< @todo translate
   etat_poursuite_mission = 3; //!< @todo translate
}

enum EnumOperationalStatus {
   detruit_totalement   = 0; //!< @todo translate
   detruit_tactiquement = 1; //!< @todo translate
   operationnel         = 2; //!< @todo translate
}

enum EnumAutomatMode {
   embraye = 0; //!< @todo rename to engaged
   debraye = 1; //!< @todo rename to disengaged
}

enum EnumCrowdAttitude{
   calme     = 0; //!< @todo translate
   agitee    = 1; //!< @todo translate
   excitee   = 2; //!< @todo translate
   agressive = 3; //!< @todo translate
}

enum EnumUnitTiredness {
   normal  = 0; //!< @todo translate
   fatigue = 1; //!< @todo translate
   epuise  = 2; //!< @todo translate
}

enum EnumUnitMorale {
   fanatique = 0; //!< @todo translate
   bon       = 1; //!< @todo translate
   moyen     = 2; //!< @todo translate
   mauvais   = 3; //!< @todo translate
}

enum EnumUnitExperience {
   veteran     = 0; //!< @todo translate
   experimente = 1; //!< @todo translate
   conscrit    = 2; //!< @todo translate
}

enum EnumHumanRank {
   officier     = 0; //!< @todo translate
   sous_officer = 1; //!< @todo translate
   mdr          = 2; //!< @todo translate
}

enum EnumDiplomacy {
   unknown_diplo = 0;
   friend_diplo  = 1;
   enemy_diplo   = 2;
   neutral_diplo = 3;
}

enum EnumHumanWound {
   non_blesse             = 0; //!< @todo translate
   mort                   = 1; //!< @todo translate
   blesse_urgence_1       = 2; //!< @todo translate
   blesse_urgence_2       = 3; //!< @todo translate
   blesse_urgence_3       = 4; //!< @todo translate
   blesse_urgence_extreme = 5; //!< @todo translate
}

enum EnumLogMaintenanceRegimeTravail {
   regime_1 = 0; //!< @todo translate
   regime_2 = 1; //!< @todo translate
   regime_3 = 2; //!< @todo translate
   regime_4 = 3; //!< @todo translate
}

enum EnumNatureLevel {
   none_naturelevel = 0;
   b                = 1;
   o                = 2;
   c                = 3;
   oo               = 4;
   ooo              = 5;
   i                = 6;
   ii               = 7;
   iii              = 8;
   x                = 9;
   xx               = 10;
   xxx              = 11;
   xxxx             = 12;
   xxxxx            = 13;
}

enum EnumLogisticLevel {
   none          = 0;
   combat_train  = 1;
   logistic_base = 2;
}

enum EnumBurningCellPhase {
    pre_ignition = 0;
    combustion   = 1;
    decline      = 2;
    extinguished = 3;
}

message ControlStop {
}

message ControlPause {
}

message ControlResume {
}

message ControlChangeTimeFactor {
   required int32 time_factor = 1;
}

message Exercise  {
   required string name    = 1;
   optional bool   running = 2;
   optional uint32 port    = 3;
}

message NetworkAddress  {
   required string  ip   = 1;
   required int32   port = 2 [default = 8080];
}

message RgbColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
}

message RgbaColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
    required float alpha = 4;
}

message CoordLatLong {
    required double latitude  = 1;
    required double longitude = 2;
}

message CoordLatLongList {
    repeated CoordLatLong elem = 2;
}

message Location {
    enum Geometry {
        circle    = 0;
        ellipse   = 1;
        line      = 2;
        rectangle = 3;
        polygon   = 4;
        point     = 5;
        sector    = 6;
        none      = 7;
    }
    required Geometry         type        = 1;
    optional CoordLatLongList coordinates = 2;
}

message Line         { required Location location = 1; }
message LocationList { repeated Location elem = 1; }
message Path         { required Location location = 1; }
message PathList     { repeated Path     elem = 1; }
message Point        { required Location location = 1; }
message PointList    { repeated Point    elem = 1; }
message Polygon      { required Location location = 1; }
message PolygonList  { repeated Polygon  elem = 1; }

message LogMedicalPriorities {
   repeated EnumHumanWound elem = 1;
}

message ObstacleType {
    enum DemolitionTargetType {
       preliminary = 0;
       reserved    = 1;
    }
}

message PlannedWork {
   required string                            type          = 1;
   required Location                          position      = 2;
   optional ObstacleType.DemolitionTargetType type_obstacle = 3; //!< @todo rename to obstacle
   optional float                             densite       = 4;
   optional AutomatId                         combat_train  = 5;           
   optional int32                             activity_time = 6;
   optional PlannedWorkId                     planned_work  = 7;
}

message PlannedWorkList {
   repeated PlannedWork elem = 1;
}

message LogMaintenancePriorities {
   repeated EquipmentType elem = 1;
}

message MissionObjective {
   required Location location = 1;
   required DateTime horaire  = 2; //!< @todo translate
}

message MissionObjectiveList {
   repeated MissionObjective elem = 1;
}

message LimaOrder {
    enum Function {
        ligne_debouche               = 0; //!< @todo translate
        ligne_changement_attitude    = 1; //!< @todo translate
        ligne_coordination           = 2; //!< @todo translate
        ligne_interdire              = 3; //!< @todo translate
        ligne_objectif               = 4; //!< @todo translate
        ligne_coup_arret             = 5; //!< @todo translate
        ligne_recueil                = 6; //!< @todo translate
        ligne_debut_mission          = 7; //!< @todo translate
        ligne_fin_mission            = 8; //!< @todo translate
        ligne_identification_accueil = 9; //!< @todo translate
    }
    required Line     lima      = 1;
    required DateTime horaire   = 2; //!< @todo translate
    repeated Function fonctions = 3;
}

message LimasOrder {
   repeated LimaOrder elem = 1;
}

message Intelligence {
   required string          name      = 1;
   required string          nature    = 2;
   required EnumNatureLevel level     = 3;
   required bool            embarked  = 4;
   required CoordLatLong    location  = 5;
   required EnumDiplomacy   diplomacy = 6;
   required FormationId     formation = 7;
}

message IntelligenceList {
   repeated Intelligence elem = 1;
}

message ChangeDiplomacy {
   required PartyId       party1     = 1;
   required PartyId       party2     = 2;
   required EnumDiplomacy diplomacy = 3;
}

message AtlasNature {
   enum Nature {
        blinde           = 1;    //!< @todo translate
        ass              = 2;    //!< @todo translate
        pc               = 4;    //!< @todo translate
        log              = 8;    //!< @todo translate
        mortier          = 16;   //!< @todo translate
        lance_roquette   = 32;   //!< @todo translate
        vehicule         = 64;   //!< @todo translate
        personnel_a_pied = 128;  //!< @todo translate
        helicoptere      = 256;  //!< @todo translate
        asa              = 1024; //!< @todo translate
   }
   required int32 nature = 1;
}

message MissionParameter {
    message Value { //!< @todo clean-up field names
        //parameters used for missions and magic actions:
        optional bool                     booleanValue             = 1;
        optional int32                    intValue                 = 2;
        optional Heading                  heading                  = 3;
        optional int32                    enumeration              = 4;
        optional DateTime                 dateTime                 = 5;
        optional Point                    point                    = 6;
        optional Polygon                  area                     = 7;
        optional Path                     path                     = 8;
        optional Line                     limit                    = 9;
        optional LimasOrder               phaseLine                = 10;
        optional AutomatId                automat                  = 11;
        optional UnitId                   agent                    = 12;
        optional UnitKnowledgeId          agentKnowledge           = 13;
        optional CrowdKnowledgeId         crowdKnowledge           = 14;
        optional ObjectKnowledgeId        objectKnowledge          = 15;
        optional UrbanObjectKnowledgeId   urbanKnowledge           = 16;
        optional PlannedWork              plannedWork              = 17;
        optional AtlasNature              atlasNature              = 18;
        optional ResourceType             resourceType             = 19;
        optional LogMaintenancePriorities logMaintenancePriorities = 20;
        optional LogMedicalPriorities     logMedicalPriorities     = 21;

        //parameters used for magic actions only:
        optional float                    aReal                    = 22;
        optional PathList                 pathList                 = 23;
        optional PointList                pointList                = 24;
        optional PolygonList              polygonList              = 25;
        optional Location                 location                 = 26;
        optional LocationList             locationList             = 27;
        optional UnitIdList               unitList                 = 28;
        optional AutomatIdList            automatList              = 29;
        optional UnitKnowledgeIdList      unitKnowledgeList        = 30;
        optional ObjectKnowledgeIdList    objectKnowledgeList      = 31;
        optional PlannedWorkList          plannedWorkList          = 32;
        optional EquipmentType            equipmentType            = 33;
        optional FireId                   tirIndirect              = 34;
        optional string                   aCharStr                 = 35;
        optional MissionObjective         missionObjective         = 36;
        optional MissionObjectiveList     missionObjectiveList     = 37;
        optional LimasOrder               limasOrder               = 38;
        optional IntelligenceList         intelligenceList         = 39;
        optional UrbanObjectId            urbanBlock               = 40;
        optional PartyId                  party                    = 41;
        optional FormationId              formation                = 42;
        optional uint32                   identifier               = 43;
        optional int32                    quantity                 = 44;
        optional KnowledgeGroupId         knowledgeGroup           = 45;
        repeated Value                    list                     = 46;
    }
    optional bool  null_value = 1;
    repeated Value value      = 2;
}

message MissionParameters {
   repeated MissionParameter elem = 1;
}

message UnitOrder {
    required UnitId            tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message AutomatOrder {
    required AutomatId         tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message CrowdOrder {
    required CrowdId           tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message FragOrder {
   required Tasker            tasker         = 1;
   required FragOrderType     type           = 2;
   optional MissionParameters parameters     = 3;
   optional string            label          = 4;
   optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
   optional DateTime          start_time     = 6;
}

message ClientObjectProperty {
    message Value {
        optional string string_value           = 1;
        optional int32  integer_value          = 2;
        optional uint32 unsigned_integer_value = 3;
        optional float  float_value            = 4;
        optional bool   bool_value             = 5;
    }
    required string name  = 1;
    required Value  value = 2;
}

message TacticalLine {
    message Diffusion {
       optional AutomatId   automat   = 1;
       optional FormationId formation = 2;
    }
    required string    name      = 1;
    required Location  geometry  = 2;
    required Diffusion diffusion = 3;
}

message Shape {
   required string           category = 1;
   required string           color    = 2;
   required string           pattern  = 3;
   required CoordLatLongList points   = 4;
}

message ChatTarget {
   required string profile = 1;
}

message TextMessage {
    required ChatTarget source  = 1;
    required ChatTarget target  = 2;
    required string     message = 3;
}

// Urban attributes

message UrbanUsage {
    required string role       = 1;
    required uint32 percentage = 2;
}

message ResourceNetwork {
    message Link {
        enum TargetKind {
            urban  = 1;
            object = 2;
        }
        required TargetKind kind      = 1;
        required uint32     target_id = 2;
        required int32      capacity  = 3;
        required uint32     flow      = 4;
    }
    required ResourceNetworkType resource        = 1;
    repeated Link                link            = 2;
    required bool                enabled         = 3;
    optional uint32              max_stock       = 4;
    optional uint32              stock           = 5;
    optional uint32              production      = 6;
    optional uint32              consumption     = 7;
    optional bool                critical        = 8;
    optional uint32              initial_stock   = 9;
    optional uint32              max_production  = 10;
    optional uint32              max_consumption = 11;
}

message ObjectAttributeResourceNetwork {
   repeated ResourceNetwork network = 1;
}

message ObjectAttributeConstruction {
   optional ResourceType resource   = 1;
   optional int32        dotation   = 2;
   optional float        density    = 3;
   optional int32        percentage = 4;
}

message ObjectAttributeMine {
   optional ResourceType resource   = 1;
   optional int32        dotation   = 2;
   optional float        density    = 3;
   optional int32        percentage = 4;
}

message ObjectAttributeLogistic {
   required AutomatId combat_train = 1;
}

message ObjectAttributeInteractionHeight {
   required float height = 1;
}

message ObjectAttributeObstacle {
   required ObstacleType.DemolitionTargetType type            = 1;
   optional bool                              activated       = 2;
   optional int32                             activation_time = 3;
}

message ObjectAttributeActivityTime {
   required int32 value = 1;
}

message ObjectAttributeBypass {
   required int32 percentage = 1;
}

message ObjectAttributeEffectDelay {
   required int32 value = 1;
}

message ObjectAttributeNBC {
   required int32        danger_level = 1;
   repeated NBCAgentType nbc_agents   = 2;
}

message StockResource {
   required ResourceType resource = 1;
   required int32        current  = 2;
   optional int32        maximum  = 3;
}

message ObjectAttributeStock {
   repeated StockResource resources = 1;
}

message ObjectAttributeCrossingSite {
   required int32 width                 = 1;
   required int32 depth                 = 2;
   required int32 flow_rate             = 3;
   required bool  banks_require_fitting = 4;
}

message ObjectAttributeSupplyRoute {
   required bool  equipped   = 1;
   required int32 max_weight = 2;
   required int32 width      = 3;
   required int32 length     = 4;
   required int32 flow_rate  = 5;
}

message ObjectAttributeFlood {
   required int32 depth              = 1;
   required int32 reference_distance = 2;
}

message LocatedQuantity{
   required CoordLatLong coordinate = 1;
   required float        quantity   = 2;
}

message LocatedQuantityList {
   repeated LocatedQuantity elem = 1;
}

message ObjectAttributeToxicCloud {
   required LocatedQuantityList quantities = 1;
}

message ObjectAttributeFire {
   required string class_name            = 1;
   required int32  max_combustion_energy = 2;
}

message ObjectAttributeBurn {
   required int32 current_heat      = 1;
   required int32 combustion_energy = 2;
}

message ObjectAttributeBurnSurface {
    message BurningCell {
        message PreIgnition {
            required int32 ignition_energy    = 1;
            required int32 ignition_threshold = 2;
        }
        message Combustion {
           required int32 current_heat         = 1;
           required int32 combustion_energy    = 2;
           required int32 max_combustion_energy = 3;
        }
        message Decline {
           required int32 current_heat = 1;
        }
        required int32                origin_x     = 1;
        required int32                origin_y     = 2;
        required EnumBurningCellPhase phase        = 3;
        optional PreIgnition          pre_ignition = 4;
        optional Combustion           combustion   = 5;
        optional Decline              decline      = 6;
    }
    required int32       cell_size     = 1;
    repeated BurningCell burning_cells = 2;
}

message MedicalTreatmentBedCapacity {
    required int32 type_id          = 1;  // Cf. Data/MedicalTreatment.xml
    optional uint32 baseline_count  = 2;
    optional uint32 available_count = 3;
    optional uint32 emergency_count = 4;
}

message ObjectAttributeMedicalTreatment {
    enum EnumMedicalTreatmentStatus {
        normal    = 0;
        on_divert = 1;
        closed    = 2;
    }
    optional string                      external_reference_id = 1;
    repeated MedicalTreatmentBedCapacity bed_capacities        = 2;
    optional EnumMedicalTreatmentStatus  facility_status       = 3;
    optional uint32                      doctors               = 4;
    optional uint32                      available_doctors     = 5;
}

message ObjectAttributeNBCType {
   required NBCAgentType agent                = 1;
   required int32        concentration        = 2;
   required int32        source_life_duration = 3;
}

message ObjectAttributeSealOff {
   required int32 level = 1;
}

message ObjectAttributes {
   optional ObjectAttributeConstruction      construction       = 1;
   optional ObjectAttributeObstacle          obstacle           = 2;
   optional ObjectAttributeMine              mine               = 3;
   optional ObjectAttributeActivityTime      activity_time      = 4;
   optional ObjectAttributeBypass            bypass             = 5;
   optional ObjectAttributeLogistic          logistic           = 6;
   optional ObjectAttributeNBC               nbc                = 7;
   optional ObjectAttributeCrossingSite      crossing_site      = 8;
   optional ObjectAttributeSupplyRoute       supply_route       = 9;
   optional ObjectAttributeToxicCloud        toxic_cloud        = 10;
   optional ObjectAttributeFire              fire               = 11;
   optional ObjectAttributeMedicalTreatment  medical_treatment  = 12;
   optional ObjectAttributeInteractionHeight interaction_height = 13;
   optional ObjectAttributeStock             stock              = 14;
   optional ObjectAttributeNBCType           nbc_agent          = 15;
   optional ObjectAttributeEffectDelay       effect_delay       = 16;
   optional ObjectAttributeSealOff           seal_off           = 17;
   optional ObjectAttributeResourceNetwork   resource_networks  = 18;
   optional ObjectAttributeBurn              burn               = 19;
   optional ObjectAttributeFlood             flood              = 20;
   optional ObjectAttributeBurnSurface       burn_surface       = 21;
}

message Marker {
    required string   name        = 1;
    required string   description = 2;
    optional MarkerId parent      = 4;
    optional string   number      = 5;
}

message PartyAdhesion {
    required PartyId party = 1;
    required float   value = 2;
}

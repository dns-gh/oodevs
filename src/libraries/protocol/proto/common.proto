// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

package sword;

/** @struct AutomatId
    @brief Defines an automat identifier
*/
message AutomatId {
    required uint32 id = 1; //!< The identifier
}

/** @struct AutomatIdList
    @brief Defines a list of automat identifiers
*/
message AutomatIdList {
    repeated AutomatId elem = 1; //!< The identifiers
}

/** @struct FormationId
    @brief Defines a formation identifier
*/
message FormationId {
    required uint32 id = 1; //!< The identifier
}

/** @struct FormationIdList
    @brief Defines a list of formation identifiers
*/
message FormationIdList {
    repeated FormationId elem = 1; //!< The identifiers
}

/** @struct KnowledgeGroupId
    @brief Defines a knowledge group identifier
*/
message KnowledgeGroupId {
    required uint32 id = 1; //!< The identifier
}

/** @struct ObjectId
    @brief Defines an object identifier
*/
message ObjectId {
    required uint32 id = 1; //!< The identifier
}

/** @struct ObjectKnowledgeId
    @brief Defines an object knowledge identifier
*/
message ObjectKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct ObjectKnowledgeIdList
    @brief Defines a list of object knowledge identifiers
*/
message ObjectKnowledgeIdList {
    repeated ObjectKnowledgeId elem = 1; //!< The identifiers
}

/** @struct PartyId
    @brief Defines a party identifier
*/
message PartyId {
    required uint32 id = 1; //!< The identifier
}

/** @struct PartyIdList
    @brief Defines a list of party identifiers
*/
message PartyIdList {
    repeated PartyId elem = 1; //!< The identifiers
}

/** @struct CrowdId
    @brief Defines a crowd identifier
*/
message CrowdId {
    required uint32 id = 1; //!< The identifier
}

/** @struct CrowdIdList
    @brief Defines a list of crowd identifiers
*/
message CrowdIdList {
    repeated CrowdId elem = 1; //!< The identifiers
}

/** @struct CrowdKnowledgeId
    @brief Defines a crowd knowledge identifier
*/
message CrowdKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct CrowdConcentrationId
    @brief Defines a crowd concentration identifier
*/
message CrowdConcentrationId {
    required uint32 id = 1; //!< The identifier
}

/** @struct CrowdConcentrationKnowledgeId
    @brief Defines a crowd concentration knowledge identifier
*/
message CrowdConcentrationKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct CrowdFlowId
    @brief Defines a crowd flow identifier
*/
message CrowdFlowId {
    required uint32 id = 1; //!< The identifier
}

/** @struct CrowdFlowKnowledgeId
    @brief Defines a crowd flow knowledge identifier
*/
message CrowdFlowKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct UnitId
    @brief Defines a unit identifier
*/
message UnitId {
    required uint32 id = 1; //!< The identifier
}

/** @struct UnitIdList
    @brief Defines a list of unit identifiers
*/
message UnitIdList {
    repeated UnitId elem = 1; //!< The identifiers
}

/** @struct UnitKnowledgeId
    @brief Defines a unit knowledge identifier
*/
message UnitKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct UnitKnowledgeIdList
    @brief Defines a list of unit knowledge identifiers
*/
message UnitKnowledgeIdList {
    repeated UnitKnowledgeId elem = 1; //!< The identifiers
}

/** @struct UrbanObjectKnowledgeId
    @brief Defines a urban object knowledge identifier
*/
message UrbanObjectKnowledgeId {
    required uint32 id = 1; //!< The identifier
}

/** @struct ClientObjectId
    @brief Defines a client object identifier
*/
message ClientObjectId {
    required uint32 id = 1; //!< The identifier
}

/** @struct PlannedWorkId
    @brief Defines a planned work identifier
*/
message PlannedWorkId {
    required uint32 id = 1; //!< The identifier
}

/** @struct PopulationId
    @brief Defines a population identifier
*/
message PopulationId {
    required uint32 id = 1; //!< The identifier
}

/** @struct Tasker
    @brief Encapsulates all possible actors
*/
message Tasker {
    optional AutomatId    automat    = 1; //!< An automat
    optional FormationId  formation  = 2; //!< A formation
    optional CrowdId      crowd      = 3; //!< A crowd
    optional UnitId       unit       = 4; //!< A unit
    optional PartyId      party      = 5; //!< A party
    optional PopulationId population = 6; //!< A population
}

/** @struct ParentEntity
    @brief Defines a parent entity which can be either an automat or a formation
*/
message ParentEntity {
    optional AutomatId   automat   = 1; //!< An automat
    optional FormationId formation = 2; //!< A formation
}

/** @struct DrawingId
    @brief Defines a drawing identifier
*/
message DrawingId {
    required uint32 id = 1; //!< The identifier
}

/** @struct IntelligenceId
    @brief Defines an intelligence identifier
*/
message IntelligenceId {
    required uint32 id = 1; //!< The identifier
}

/** @struct TacticalLineId
    @brief Defines a tactical line identifier
*/
message TacticalLineId {
    required uint32 id = 1; //!< The identifier
}

/** @struct MarkerId
    @brief Defines a marker identifier
*/
message MarkerId {
    required uint32 id = 1; //!< The identifier
}

/** @struct FireId
    @brief Defines a fire identifier
*/
message FireId {
    required uint32 id = 1; //!< The identifier
}

/** @struct FireEffectId
    @brief Defines a fire effect identifier
*/
message FireEffectId {
    required uint32 id = 1; //!< The identifier
}

/** @struct ReportId
    @brief Defines a report identifier
*/
message ReportId {
    required uint32 id = 1; //!< The identifier
}

/** @struct WeatherId
    @brief Defines a weather identifier
*/
message WeatherId {
    required uint32 id = 1; //!< The identifier
}

/** @struct MaintenanceRequestId
    @brief Defines a maintenance request identifier
*/
message MaintenanceRequestId {
    required uint32 id = 1; //!< The identifier
}

/** @struct MedicalRequestId
    @brief Defines a medical request identifier
*/
message MedicalRequestId {
    required uint32 id = 1; //!< The identifier
}

/** @struct SupplyRequestId
    @brief Defines a supply request identifier
*/
message SupplyRequestId {
    required uint32 id = 1; //!< The identifier
}

/** @struct AutomatType
    @brief Defines an automat type
*/
message AutomatType {
    required uint32 id = 1; //!< The identifier
}

/** @struct BreakdownType
    @brief Defines a breakdown type
*/
message BreakdownType {
    required uint32 id = 1; //!< The identifier
}

/** @struct EquipmentType
    @brief Defines an equipment type
*/
message EquipmentType {
    required uint32 id = 1; //!< The identifier
}

/** @struct FragOrderType
    @brief Defines a frag order type
*/
message FragOrderType {
    required uint32 id = 1; //!< The identifier
}

/** @struct MissionType
    @brief Defines a mission type
*/
message MissionType {
    required uint32 id = 1; //!< The identifier
}

/** @struct NBCAgentType
    @brief Defines a NBC agent type
*/
message NBCAgentType {
    required uint32 id = 1; //!< The identifier
}

/** @struct ObjectType
    @brief Defines an object type
*/
message ObjectType {
    required string id = 1; //!< The identifier @todo should be an integer
}

/** @struct CrowdType
    @brief Defines a crowd type
*/
message CrowdType {
    required uint32 id = 1; //!< The identifier
}

/** @struct ReportType
    @brief Defines a report type
*/
message ReportType {
    required uint32 id = 1; //!< The identifier
}

/** @struct ResourceType
    @brief Defines a resource type
*/
message ResourceType {
    required uint32 id = 1; //!< The identifier
}

/** @struct UnitType
    @brief Defines a unit type
*/
message UnitType {
    required uint32 id = 1; //!< The identifier
}

/** @struct ResourceNetworkType
    @brief Defines a resource network type
*/
message ResourceNetworkType {
    required string name = 1;
}

/** @struct PopulationType
    @brief Defines a population type
*/
message PopulationType {
    required uint32 id = 1; //!< The identifier
}

/** @struct Heading
    @brief Defines a heading
*/
message Heading {
   required int32 heading = 1; //!< The direction in degrees
}

/** @struct DateTime
    @brief Defines a date/time
*/
message DateTime {
   required string data = 1; //!< The date-time formatted according to ISO 8601
}

/** @struct AutomatChangeSuperior
    @brief Notifies of an automat changing superior
*/
message AutomatChangeSuperior {
    /** @struct Superior
        @brief Defines a superior
        @todo why not use a ParentEntity ?
    */
    message Superior {
       optional FormationId formation = 1; //!< An automat
       optional AutomatId   automat   = 2; //!< A formation
    }
    required AutomatId automat  = 1; //!< The automat identifier
    required Superior  superior = 2; //!< The superior
}

/** @struct UnitChangeSuperior
    @brief Notifies of a unit changing superior
*/
message UnitChangeSuperior {
    required UnitId    unit   = 1; //!< The unit identifier
    required AutomatId parent = 2; //!< The parent identifier
}

/** @enum EnumSimulationState
    @brief Defines the different states of the simulation
*/
enum EnumSimulationState {
    running = 0; //!< Running
    paused  = 1; //!< Paused
    stopped = 2; //!< Stopped
    loading = 3; //!< Loading
}

/** @enum EnumAutomatMode
    @brief Defines the different states of an automat
*/
enum EnumAutomatMode {
   engaged    = 0; //!< Engaged
   disengaged = 1; //!< Disengaged
}

/** @enum EnumDiplomacy
    @brief Defines the different states of a diplomacy
*/
enum EnumDiplomacy {
    unknown  = 0; //!< Unknown
    friendly = 1; //!< Friendly
    enemy    = 2; //!< Enemy
    neutral  = 3; //!< Neutral
}

/** @enum EnumHumanWound
    @brief Defines the different types of wounds
*/
enum EnumHumanWound {
    unwounded               = 0; //!< Unwounded
    dead                    = 1; //!< Dead
    wounded_urgency_1       = 2; //!< Wounded urgency level 1
    wounded_urgency_2       = 3; //!< Wounded urgency level 2
    wounded_urgency_3       = 4; //!< Wounded urgency level 3
    wounded_extreme_urgency = 5; //!< Wounded extreme urgency
}

/** @enum EnumNatureLevel
    @brief Defines the different nature levels
*/
enum EnumNatureLevel {
    none_naturelevel = 0;  //!< No nature @todo rename to no_nature
    b                = 1;  //!< What's this ?
    o                = 2;  //!< What's this ?
    c                = 3;  //!< What's this ?
    oo               = 4;  //!< What's this ?
    ooo              = 5;  //!< What's this ?
    i                = 6;  //!< What's this ?
    ii               = 7;  //!< What's this ?
    iii              = 8;  //!< What's this ?
    x                = 9;  //!< What's this ?
    xx               = 10; //!< What's this ?
    xxx              = 11; //!< What's this ?
    xxxx             = 12; //!< What's this ?
    xxxxx            = 13; //!< What's this ?
}

message ControlStop {
}

message ControlPause {
}

message ControlResume {
}

message ControlChangeTimeFactor {
    required int32 time_factor = 1;
}

message Exercise  {
    required string name    = 1;
    optional bool   running = 2;
    optional uint32 port    = 3;
}

message NetworkAddress  {
    required string  ip   = 1;
    required int32   port = 2 [default = 8080];
}

message RgbColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
}

message RgbaColor
{
    required int32 red   = 1;
    required int32 green = 2;
    required int32 blue  = 3;
    required float alpha = 4;
}

message CoordLatLong {
    required double latitude  = 1;
    required double longitude = 2;
}

message CoordLatLongList {
    repeated CoordLatLong elem = 2;
}

message Location {
    enum Geometry {
        circle    = 0;
        ellipse   = 1;
        line      = 2;
        rectangle = 3;
        polygon   = 4;
        point     = 5;
        sector    = 6;
        none      = 7;
    }
    required Geometry         type        = 1;
    optional CoordLatLongList coordinates = 2;
}

message Line         { required Location location = 1; }
message LocationList { repeated Location elem = 1; }
message Path         { required Location location = 1; }
message PathList     { repeated Path     elem = 1; }
message Point        { required Location location = 1; }
message PointList    { repeated Point    elem = 1; }
message Polygon      { required Location location = 1; }
message PolygonList  { repeated Polygon  elem = 1; }

message LogMedicalPriorities {
   repeated EnumHumanWound elem = 1;
}

message ObstacleType {
    enum DemolitionTargetType {
       preliminary = 0;
       reserved    = 1;
    }
}

message PlannedWork {
   required string                            type          = 1;
   required Location                          position      = 2;
   optional ObstacleType.DemolitionTargetType type_obstacle = 3; //!< @todo rename to obstacle
   optional float                             densite       = 4;
   optional AutomatId                         combat_train  = 5;           
   optional int32                             activity_time = 6;
   optional PlannedWorkId                     planned_work  = 7;
}

message PlannedWorkList {
   repeated PlannedWork elem = 1;
}

message LogMaintenancePriorities {
   repeated EquipmentType elem = 1;
}

message MissionObjective {
   required Location location = 1;
   required DateTime time     = 2;
}

message MissionObjectiveList {
   repeated MissionObjective elem = 1;
}

message PhaseLineOrder {
    enum Function {
        line_of_departure              = 0; //!< Line of departure
        attitude_change_line           = 1; //!< Attitude change line
        coordination_line              = 2; //!< Coordination line
        denial_line                    = 3; //!< Denial line
        objective_line                 = 4; //!< Objective line
        blocking_line                  = 5; //!< Blocking line
        handover_line                  = 6; //!< Handover line
        start_of_mission_line          = 7; //!< Start of mission line
        end_of_mission_line            = 8; //!< End of mission line
        recognition_and_reception_line = 9; //!< Recognition and reception line
    }
    required Line     lima      = 1;
    required DateTime time      = 2;
    repeated Function fonctions = 3;
}

message PhaseLinesOrder {
   repeated PhaseLineOrder elem = 1;
}

message Intelligence {
   required string          name      = 1;
   required string          nature    = 2;
   required EnumNatureLevel level     = 3;
   required bool            embarked  = 4;
   required CoordLatLong    location  = 5;
   required EnumDiplomacy   diplomacy = 6;
   required FormationId     formation = 7;
}

message IntelligenceList {
   repeated Intelligence elem = 1;
}

message ChangeDiplomacy {
   required PartyId       party1    = 1;
   required PartyId       party2    = 2;
   required EnumDiplomacy diplomacy = 3;
}

message Nature {
    enum Flags {
        tank             = 1;    //!< Tank
        missile_launcher = 2;    //!< Missile Launcher
        command_post     = 4;    //!< Command Post
        logistics        = 8;    //!< Logistics
        mortar           = 16;   //!< Mortar
        rocket_launcher  = 32;   //!< Rocket Launcher
        vehicle          = 64;    //!< Vehicle
        infantry         = 128;  //!< Infantry
        helicopter       = 256;  //!< Helicopter
        anti_aircraft    = 1024; //!< Anti Aircraft
   }
   required int32 flags = 1;
}

message MissionParameter {
    message Value { //!< @todo clean-up field names
        //parameters used for missions and magic actions:
        optional bool                     booleanValue             = 1;
        optional int32                    intValue                 = 2;
        optional Heading                  heading                  = 3;
        optional int32                    enumeration              = 4;
        optional DateTime                 dateTime                 = 5;
        optional Point                    point                    = 6;
        optional Polygon                  area                     = 7;
        optional Path                     path                     = 8;
        optional Line                     limit                    = 9;
        optional PhaseLinesOrder          phaseLine                = 10;
        optional AutomatId                automat                  = 11;
        optional UnitId                   agent                    = 12;
        optional UnitKnowledgeId          agentKnowledge           = 13;
        optional CrowdKnowledgeId         crowdKnowledge           = 14;
        optional ObjectKnowledgeId        objectKnowledge          = 15;
        optional UrbanObjectKnowledgeId   urbanKnowledge           = 16;
        optional PlannedWork              plannedWork              = 17;
        optional Nature                   nature                   = 18; //!< A combinaison of nature flags @see Nature
        optional ResourceType             resourceType             = 19;
        optional LogMaintenancePriorities logMaintenancePriorities = 20;
        optional LogMedicalPriorities     logMedicalPriorities     = 21;

        //parameters used for magic actions only:
        optional float                    aReal                    = 22;
        optional PathList                 pathList                 = 23;
        optional PointList                pointList                = 24;
        optional PolygonList              polygonList              = 25;
        optional Location                 location                 = 26;
        optional LocationList             locationList             = 27;
        optional UnitIdList               unitList                 = 28;
        optional AutomatIdList            automatList              = 29;
        optional UnitKnowledgeIdList      unitKnowledgeList        = 30;
        optional ObjectKnowledgeIdList    objectKnowledgeList      = 31;
        optional PlannedWorkList          plannedWorkList          = 32;
        optional EquipmentType            equipmentType            = 33;
        optional FireId                   tirIndirect              = 34;
        optional string                   aCharStr                 = 35;
        optional MissionObjective         missionObjective         = 36;
        optional MissionObjectiveList     missionObjectiveList     = 37;
        optional PhaseLinesOrder          limasOrder               = 38;
        optional IntelligenceList         intelligenceList         = 39;
        optional ObjectId                 object                   = 40;
        optional PartyId                  party                    = 41;
        optional FormationId              formation                = 42;
        optional uint32                   identifier               = 43;
        optional int32                    quantity                 = 44;
        optional KnowledgeGroupId         knowledgeGroup           = 45;
        repeated Value                    list                     = 46;
    }
    optional bool  null_value = 1;
    repeated Value value      = 2;
}

message MissionParameters {
   repeated MissionParameter elem = 1;
}

message UnitOrder {
    required UnitId            tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message AutomatOrder {
    required AutomatId         tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message CrowdOrder {
    required CrowdId           tasker         = 1;
    required MissionType       type           = 2;
    optional MissionParameters parameters     = 3;
    optional string            label          = 4;
    optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
    optional DateTime          start_time     = 6;
}

message FragOrder {
   required Tasker            tasker         = 1;
   required FragOrderType     type           = 2;
   optional MissionParameters parameters     = 3;
   optional string            label          = 4;
   optional Location          symbolLocation = 5; //!< @todo rename to symbol_location
   optional DateTime          start_time     = 6;
}

message ClientObjectProperty {
    message Value {
        optional string string_value           = 1;
        optional int32  integer_value          = 2;
        optional uint32 unsigned_integer_value = 3;
        optional float  float_value            = 4;
        optional bool   bool_value             = 5;
    }
    required string name  = 1;
    required Value  value = 2;
}

message TacticalLine {
    message Diffusion {
       optional AutomatId   automat   = 1;
       optional FormationId formation = 2;
    }
    required string    name      = 1;
    required Location  geometry  = 2;
    required Diffusion diffusion = 3;
}

message Shape {
   required string           category = 1;
   required string           color    = 2;
   required string           pattern  = 3;
   required CoordLatLongList points   = 4;
}

message ChatTarget {
   required string profile = 1;
}

message TextMessage {
    required ChatTarget source  = 1;
    required ChatTarget target  = 2;
    required string     message = 3;
}

// Urban attributes

message UrbanUsage {
    required string role       = 1;
    required uint32 percentage = 2;
}

message ResourceNetwork {
    message Link {
        enum TargetKind {
            urban  = 1;
            object = 2;
        }
        required TargetKind kind      = 1;
        required uint32     target_id = 2;
        required int32      capacity  = 3;
        required uint32     flow      = 4;
    }
    required ResourceNetworkType resource        = 1;
    repeated Link                link            = 2;
    required bool                enabled         = 3;
    optional uint32              max_stock       = 4;
    optional uint32              stock           = 5;
    optional uint32              production      = 6;
    optional uint32              consumption     = 7;
    optional bool                critical        = 8;
    optional uint32              initial_stock   = 9;
    optional uint32              max_production  = 10;
    optional uint32              max_consumption = 11;
}

message ObjectAttributeResourceNetwork {
   repeated ResourceNetwork network = 1;
}

message ObjectAttributeConstruction {
   optional ResourceType resource   = 1;
   optional int32        dotation   = 2;
   optional float        density    = 3;
   optional int32        percentage = 4;
}

message ObjectAttributeMine {
   optional ResourceType resource   = 1;
   optional int32        dotation   = 2;
   optional float        density    = 3;
   optional int32        percentage = 4;
}

message ObjectAttributeLogistic {
   required AutomatId combat_train = 1;
}

message ObjectAttributeInteractionHeight {
   required float height = 1;
}

message ObjectAttributeObstacle {
   required ObstacleType.DemolitionTargetType type            = 1;
   optional bool                              activated       = 2;
   optional int32                             activation_time = 3;
}

message ObjectAttributeActivityTime {
   required int32 value = 1;
}

message ObjectAttributeBypass {
   required int32 percentage = 1;
}

message ObjectAttributeEffectDelay {
   required int32 value = 1;
}

message ObjectAttributeNBC {
   required int32        danger_level = 1;
   repeated NBCAgentType nbc_agents   = 2;
}

message StockResource {
   required ResourceType resource = 1;
   required int32        current  = 2;
   optional int32        maximum  = 3;
}

message ObjectAttributeStock {
   repeated StockResource resources = 1;
}

message ObjectAttributeCrossingSite {
   required int32 width                 = 1;
   required int32 depth                 = 2;
   required int32 flow_rate             = 3;
   required bool  banks_require_fitting = 4;
}

message ObjectAttributeSupplyRoute {
   required bool  equipped   = 1;
   required int32 max_weight = 2;
   required int32 width      = 3;
   required int32 length     = 4;
   required int32 flow_rate  = 5;
}

message ObjectAttributeFlood {
   required int32 depth              = 1;
   required int32 reference_distance = 2;
}

message LocatedQuantity{
   required CoordLatLong coordinate = 1;
   required float        quantity   = 2;
}

message LocatedQuantityList {
   repeated LocatedQuantity elem = 1;
}

message ObjectAttributeToxicCloud {
   required LocatedQuantityList quantities = 1;
}

message ObjectAttributeFire {
   required string class_name            = 1;
   required int32  max_combustion_energy = 2;
}

message ObjectAttributeBurn {
   required int32 current_heat      = 1;
   required int32 combustion_energy = 2;
}

enum EnumBurningCellPhase {
    pre_ignition = 0;
    combustion   = 1;
    decline      = 2;
    extinguished = 3;
}

message ObjectAttributeBurnSurface {
    message BurningCell {
        message PreIgnition {
            required int32 ignition_energy    = 1;
            required int32 ignition_threshold = 2;
        }
        message Combustion {
           required int32 current_heat         = 1;
           required int32 combustion_energy    = 2;
           required int32 max_combustion_energy = 3;
        }
        message Decline {
           required int32 current_heat = 1;
        }
        required int32                origin_x     = 1;
        required int32                origin_y     = 2;
        required EnumBurningCellPhase phase        = 3;
        optional PreIgnition          pre_ignition = 4;
        optional Combustion           combustion   = 5;
        optional Decline              decline      = 6;
    }
    required int32       cell_size     = 1;
    repeated BurningCell burning_cells = 2;
}

message MedicalTreatmentBedCapacity {
    required int32 type_id          = 1;  // Cf. Data/MedicalTreatment.xml
    optional uint32 baseline_count  = 2;
    optional uint32 available_count = 3;
    optional uint32 emergency_count = 4;
}

message ObjectAttributeMedicalTreatment {
    enum EnumMedicalTreatmentStatus {
        normal    = 0;
        on_divert = 1;
        closed    = 2;
    }
    optional string                      external_reference_id = 1;
    repeated MedicalTreatmentBedCapacity bed_capacities        = 2;
    optional EnumMedicalTreatmentStatus  facility_status       = 3;
    optional uint32                      doctors               = 4;
    optional uint32                      available_doctors     = 5;
}

message ObjectAttributeNBCType {
   required NBCAgentType agent                = 1;
   required int32        concentration        = 2;
   required int32        source_life_duration = 3;
}

message ObjectAttributeSealOff {
   required int32 level = 1;
}

message ObjectAttributes {
   optional ObjectAttributeConstruction      construction       = 1;
   optional ObjectAttributeObstacle          obstacle           = 2;
   optional ObjectAttributeMine              mine               = 3;
   optional ObjectAttributeActivityTime      activity_time      = 4;
   optional ObjectAttributeBypass            bypass             = 5;
   optional ObjectAttributeLogistic          logistic           = 6;
   optional ObjectAttributeNBC               nbc                = 7;
   optional ObjectAttributeCrossingSite      crossing_site      = 8;
   optional ObjectAttributeSupplyRoute       supply_route       = 9;
   optional ObjectAttributeToxicCloud        toxic_cloud        = 10;
   optional ObjectAttributeFire              fire               = 11;
   optional ObjectAttributeMedicalTreatment  medical_treatment  = 12;
   optional ObjectAttributeInteractionHeight interaction_height = 13;
   optional ObjectAttributeStock             stock              = 14;
   optional ObjectAttributeNBCType           nbc_agent          = 15;
   optional ObjectAttributeEffectDelay       effect_delay       = 16;
   optional ObjectAttributeSealOff           seal_off           = 17;
   optional ObjectAttributeResourceNetwork   resource_networks  = 18;
   optional ObjectAttributeBurn              burn               = 19;
   optional ObjectAttributeFlood             flood              = 20;
   optional ObjectAttributeBurnSurface       burn_surface       = 21;
}

message Marker {
    required string   name        = 1;
    required string   description = 2;
    optional MarkerId parent      = 4;
    optional string   number      = 5;
}

message PartyAdhesion {
    required PartyId party = 1;
    required float   value = 2;
}

// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";

package sword;

/** @file
 *  @brief Messages from clients to the replay module
 *  @addtogroup Replay
 *  @{
 */

//! Makes the replayer move after the end tick message of tick+1, sending
//! creation, update and destruction messages to keep connected client
//! synchronized.
//!
//! Note: moving to the end of tick+1 instead of tick happens for
//! historical reasons and is likely to change in the future.
message ControlSkipToTick {
    required int32 tick = 1;
}

/** @struct ControlSkipToDate
    @brief Skips to a given date
*/
message ControlSkipToDate {
    //! The new date and/or time
    required DateTime date_time = 1;
}

//! Requests a mapping from ticks to simulated and real times.
//!
//! The mapping is sent in TimeTableRequestAck, and optionally broadcast
//! in a standalone TimeTable message.
//!
//! Errors are return both in the TimeTableRequestAck and in its parent
//! ReplayToClient message.
message TimeTableRequest {
    message TimeRange {
        //! Range first tick
        required int32 begin_tick = 1;
        //! Range last tick
        required int32 end_tick   = 2;
    }
    required TimeRange tick_range = 1;
    //! If broadcast is true, a TimeTable response will be sent to all
    //! connected clients. TimeTable data is always sent as part of the
    //! TimeTableRequestAck response.
    optional bool      broadcast  = 2 [ default = true ];
}

/** @struct ForceRefreshDataRequest
    @brief Force replayer to refresh data
*/
message ForceRefreshDataRequest {
}

/** @struct ClientToReplay
    @brief Wraps available messages going from client to replay

    This is the actual message sent over the network.
*/
message ClientToReplay {
    /** @struct Content
        @brief The possible messages contained in a client to replay
               message
        @warning Each Content message must contain exactly one of the
                 possible messages.
    */
    message Content {
        //! A message to skip to a given tick
        optional ControlSkipToTick        control_skip_to_tick        = 1;
        //! A message to change the time factor of the replay
        optional ControlChangeTimeFactor  control_change_time_factor  = 2;
        //! A message to stop the replay
        optional ControlStop              control_stop                = 3;
        //! A message to pause the replay
        optional ControlPause             control_pause               = 4;
        //! A message to resume the replay
        optional ControlResume            control_resume              = 5;
        //! A message to request datetime information
        optional TimeTableRequest         time_table_request          = 6;
        //! A message to force data reload
        optional ForceRefreshDataRequest  force_refresh_data_request  = 7;
        //! A message to skip to a given date
        optional ControlSkipToDate        control_skip_to_date        = 8;
        optional LogisticHistoryRequest   logistic_history_request    = 9;
        optional ListLogisticRequests     list_logistic_requests      = 10;
        optional ControlEnableVisionCones control_toggle_vision_cones = 11;
        optional ListEnabledVisionCones   list_enabled_vision_cones   = 12;
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is filled using the "context" fields provided in the
        request message.

        This context allows the client application to differentiate
        acknowledgements to similar messages.

        @see ClientToAuthentication
    */
    optional int32   context = 1;
    //! A field containing one of the messages to be sent
    required Content message = 2;
    /** @property client_id

        This field is filled using the "client_id" field set by the
        dispatcher after a successful authentication in order to
        identify which request was done by which client.

        @see AuthenticationToClient
    */
    optional int32   client_id = 3;
}

/** @}*/


package MsgsSimToClient;

import "Common.proto";

enum EnumLogSupplyHandlingStatus {
  convoi_en_attente_camions                  = 1;
  convoi_constitution                        = 2;
  convoi_deplacement_vers_point_chargement   = 3;
  convoi_chargement                          = 4;
  convoi_deplacement_vers_point_dechargement = 5;
  convoi_dechargement                        = 6;
  convoi_deplacement_retour                  = 7;
  termine                                    = 8;
}

message OrderAck {
    enum ErrorCode {
        no_error                                = 0;
        error_invalid_unit                      = 1;
        error_invalid_limit                     = 2;
        error_invalid_lima                      = 3;
        error_invalid_mission                   = 4;
        error_invalid_mission_parameters        = 5;
        error_unit_cannot_receive_order         = 6;
        error_invalid_order_conduite            = 7;
        error_invalid_order_mission             = 8;
        error_invalid_order_initial             = 9;
        error_invalid_order_conduite_parameters = 10;
        error_unit_surrendered                  = 11;
        error_invalid_lima_function             = 12;
    }
}

message MsgUnitOrderAck {
   required uint32             oid        = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgAutomatOrderAck {
   required uint32             oid        = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgPopulationOrderAck {
   required uint32             oid        = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgFragOrderAck {
   required uint32             oid        = 1;
   required OrderAck.ErrorCode error_code = 2;
}

message MsgSetAutomatModeAck {
    enum ErrorCode {
        no_error           = 0;
        error_invalid_unit = 1;
        error_not_allowed  = 2;
    }
   required uint32    oid        = 1;
   required ErrorCode error_code = 2;
}

message UnitActionAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_unit      = 1;
        error_automate_embraye  = 2;
        error_invalid_attribute = 3;
        error_unit_surrendered  = 4;
    }
}
message MsgUnitCreationRequestAck  {
    required UnitActionAck.ErrorCode error = 1;
}

message MsgUnitMagicActionAck {
   required uint32                  oid        = 1;
   required UnitActionAck.ErrorCode error_code = 2;
}

message MsgObjectMagicActionAck {
    enum ErrorCode {
        no_error                          = 0;
        error_invalid_object              = 1;
        error_invalid_id                  = 2;
        error_invalid_camp                = 3;
        error_invalid_localisation        = 4;
        error_missing_specific_attributes = 5;
        error_invalid_specific_attributes = 6;
    }
    required ErrorCode error_code = 1;
}

message MsgPopulationMagicActionAck {
    enum ErrorCode {
        no_error                = 0;
        error_invalid_unit      = 1;
        error_invalid_attribute = 2;
    }
    required uint32    oid        = 1;
    required ErrorCode error_code = 2;
}

message MsgChangeDiplomacyAck {
   required int32                oid_camp1  = 1;
   required int32                oid_camp2  = 2;
   required Common.EnumDiplomacy diplomatie = 3;
   enum EnumChangeDiplomacyErrorCode {
        no_error_diplomacy           = 0;
        error_invalid_camp_diplomacy = 1;
    }
   required EnumChangeDiplomacyErrorCode  error_code = 4;
}

message HierarchyModificationAck {
    enum ErrorCode {
        no_error_hierarchy                    = 0;
        error_invalid_pion                    = 1;
        error_invalid_automate                = 2;
        error_invalid_formation               = 3;
        error_invalid_automate_tc2            = 4;
        error_invalid_automate_maintenance    = 5;
        error_invalid_automate_sante          = 6;
        error_invalid_automate_ravitaillement = 7;
        error_unit_surrendered_hierarchy      = 8;
        error_invalid_camp_hierarchy          = 9;
        error_invalid_groupe_connaissance     = 10;
        error_camps_incompatibles             = 11;
    }
}

message MsgAutomatChangeKnowledgeGroupAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgAutomatChangeLogisticLinksAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgAutomatChangeSuperiorAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}
message MsgUnitChangeSuperiorAck  {
    required HierarchyModificationAck.ErrorCode error_code = 1;
}

message MsgLogSupplyPushFlowAck  {
    enum EnumLogSupplyPushFlow {
        no_error_pushflow               = 0;
        error_invalid_donneur_pushflow  = 1;
        error_invalid_receveur_pushflow = 2;
    }
    optional EnumLogSupplyPushFlow ack = 1;
}

message MsgLogSupplyChangeQuotasAck {
    enum LogSupplyChangeQuotas {
        no_error_quotas               = 0;
        error_invalid_donneur_quotas  = 1;
        error_invalid_receveur_quotas = 2;
    }
    optional LogSupplyChangeQuotas ack = 1;
}

message MsgActionCreateFireOrderAck {
    enum EnumActionCreateFireOrderErrorCode {
        no_error                    = 0;
        error_invalid_reporter      = 1;
        error_invalid_target	    = 2;
        error_invalid_munition      = 3;
        error_target_no_illuminated = 4;
    }
    required EnumActionCreateFireOrderErrorCode  error_code = 2;
}

message MsgControlInformation {
   required int32                      current_tick         = 1;
   required Common.MsgDateTime         initial_date_time    = 2;
   required Common.MsgDateTime         date_time            = 3;
   required int32                      tick_duration        = 4;
   required int32                      time_factor          = 5;
   required int32                      checkpoint_frequency = 6;
   required Common.EnumSimulationState status               = 7;
   required bool                       send_vision_cones    = 8;
   required bool                       profiling_enabled    = 9;
}

message MsgControlProfilingInformation {
   required float  perception = 1;
   required float  decision   = 2;
   required float  action     = 3;
   required float  main_loop  = 4;
}

message MsgControlBeginTick {
   required int32              current_tick = 1;
   required Common.MsgDateTime date_time    = 2;
}

message MsgControlEndTick {
   required int32 current_tick    = 1;
   required int32 tick_duration   = 2;
   required int32 long_pathfinds  = 3;
   required int32 short_pathfinds = 4;
   required int32 memory          = 5;
   required int32 virtual_memory  = 6;
}

message ControlAck {
    enum ErrorCode {
       no_error                  = 0;
       error_already_started     = 1;
       error_not_started         = 2;
       error_not_paused          = 3;
       error_already_paused      = 4;
       error_invalid_time_factor = 5;
       error_invalid_date_time   = 6;
    }
}

message MsgControlDatetimeChangeAck {
    required ControlAck.ErrorCode error_code = 1;
}
message MsgControlChangeTimeFactorAck {
   required int32                time_factor = 1;
   required ControlAck.ErrorCode error_code  = 2;
}
message MsgControlStopAck {
   required ControlAck.ErrorCode error_code = 1;
}
message MsgControlPauseAck {
   required ControlAck.ErrorCode error_code = 1;
}
message MsgControlResumeAck {
   required ControlAck.ErrorCode error_code = 1;
}

message MsgTeamCreation {
   required uint32               oid  = 1;
   required string               nom  = 2;
   required Common.EnumDiplomacy type = 3;
}

message MsgAutomatCreation_oid_parent {
    optional Common.MsgFormation formation = 1;
    optional Common.MsgAutomat   automate  = 2;
}

message MsgAutomatCreation {
   optional uint32                        oid                     = 1;
   optional uint32                        type_automate           = 2;
   optional string                        nom                     = 3;
   optional MsgAutomatCreation_oid_parent oid_parent              = 4;
   optional uint32                        oid_camp                = 5;
   optional uint32                        oid_groupe_connaissance = 6;
}

message RulesOfEngagement {
    enum Value {
       none_roe        = 0;
       tir_libre       = 1;
       tir_sur_riposte = 2;
       tir_interdit    = 3;
    }
}

message ForceRatio {
    enum Value {
        none_force_ratio = 0;
        neutre           = 1;
        favorable        = 2;
        defavorable      = 3;
    }
}

message MsgAutomatAttributes {
   required uint32                             oid                 = 1;
   optional Common.EnumAutomatMode             etat_automate       = 2;
   optional ForceRatio.Value                   rapport_de_force    = 3;
   optional Common.EnumMeetingEngagementStatus combat_de_rencontre = 4;
   optional Common.EnumOperationalStatus       etat_operationnel   = 5;
   optional RulesOfEngagement.Value            roe                 = 6;
}

message MsgUnitCreation {
   required uint32 oid          = 1;
   required uint32 type_pion    = 2;
   required string nom          = 3;
   required uint32 oid_automate = 4;
   required bool   pc           = 5;
}

message BorrowedEquipments {
    message BorrowedEquipment {
        required uint32 oid_pion_preteur = 1;
        required uint32 type_equipement  = 2;
        required int32  nombre           = 3;
    }
    repeated BorrowedEquipment elem = 1;
}

message LentEquipments {
    message LentEquipment {
        required uint32 oid_pion_emprunteur = 1;
        required uint32 type_equipement     = 2;
        required int32  nombre              = 3;
    }
    repeated LentEquipment elem = 1;
}

message ResourceDotations {
    message ResourceDotation {
        required uint32 ressource_id        = 1;
        required int32  quantite_disponible = 2;
    }
    repeated ResourceDotation elem = 1;
}

message EquipmentDotations {
    message EquipmentDotation {
        required uint32 type_equipement            = 1;
        required int32  nb_disponibles             = 2;
        required int32  nb_indisponibles           = 3;
        required int32  nb_reparables              = 4;
        required int32  nb_dans_chaine_maintenance = 5;
        required int32  nb_prisonniers             = 6;
    }
    repeated EquipmentDotation elem = 1;
}

message HumanDotations {
    message HumanDotation {
        required Common.EnumHumanRank rang                         = 1;
        required int32                nb_total                     = 2;
        required int32                nb_operationnels             = 3;
        required int32                nb_morts                     = 4;
        required int32                nb_blesses                   = 5;
        required int32                nb_blesses_mentaux           = 6;
        required int32                nb_contamines_nbc            = 7;
        required int32                nb_dans_chaine_sante         = 8;
        required int32                nb_utilises_pour_maintenance = 9;
    }
    repeated HumanDotation elem = 1;
}

message ContaminationState {
   optional int32 percentage = 1;
   optional float quantity   = 2;
}

message MsgUnitAttributes {
    enum Posture {
        mouvement           = 0;
        mouvement_discret   = 1;
        arret               = 2;
        poste_reflexe       = 3;
        poste               = 4;
        poste_amenage       = 5;
        poste_prepare_genie = 6;
    }
    enum FireAvailability {
        none_fire_available = 0;
        pret_au_tir         = 1;
        indisponible        = 2;
    }
    enum PopulationRoe {
        none                                      = 0;
        emploi_force_interdit                     = 1;
        maintien_a_distance_par_moyens_non_letaux = 2;
        dispersion_par_moyens_de_defense_actifs   = 3;
        armes_letales_autorisees                  = 4;
    }
    required uint32                             oid                           = 1;
    optional HumanDotations                     dotation_eff_personnel        = 2;
    optional EquipmentDotations                 dotation_eff_materiel         = 3;
    optional ResourceDotations                  dotation_eff_ressource        = 4;
    optional LentEquipments                     equipements_pretes            = 5;
    optional BorrowedEquipments                 equipements_empruntes         = 6;
    optional Common.MsgCoordLatLong             position                      = 7;
    optional Common.MsgHeading                  direction                     = 8;
    optional int32                              hauteur                       = 9 [default = 0];
    optional int32                              altitude                      = 10 [default = 0];
    optional int32                              vitesse                       = 11 [default = 0];
    optional int32                              etat_operationnel_brut        = 12 [default = 0];
    optional Common.MsgUnitList                 pions_renforcant              = 13;
    optional int32                              pion_renforce                 = 14 [default = 0];
    optional bool                               mort                          = 15 [default = false];
    optional bool                               neutralise                    = 16 [default = false];
    optional bool                               mode_furtif_actif             = 17 [default = false];
    optional bool                               embarque                      = 18 [default = false];
    optional bool                               transporteurs_disponibles     = 19 [default = false];
    optional Posture                            posture_old                   = 20;
    optional Posture                            posture_new                   = 21;
    optional int32                              posture_pourcentage           = 22 [default = 0];
    optional int32                              etat_installation             = 23 [default = 0];
    optional bool                               en_tenue_de_protection_nbc    = 24 [default = false];
    optional Common.MsgListOID                  contamine_par_agents_nbc      = 25;
    optional ContaminationState                 etat_contamination            = 26;
    optional bool                               communications_brouillees     = 27 [default = false];
    optional bool                               silence_radio                 = 28 [default = false];
    optional bool                               radar_actif                   = 29 [default = false];
    optional Common.MsgUnitList                 pions_transportes             = 30;
    optional int32                              pion_transporteur             = 31 [default = 0];
    optional ForceRatio.Value                   rapport_de_force              = 32;
    optional Common.EnumMeetingEngagementStatus combat_de_rencontre           = 33;
    optional Common.EnumOperationalStatus       etat_operationnel             = 34;
    optional FireAvailability                   disponibilite_au_tir_indirect = 35;
    optional RulesOfEngagement.Value            roe                           = 36;
    optional PopulationRoe                      roe_population                = 37;
    optional Common.EnumUnitTiredness           fatigue                       = 38;
    optional Common.EnumUnitMorale              moral                         = 39;
    optional Common.EnumUnitExperience          experience                    = 40;
    optional int32                              rendu                         = 41;
    optional bool                               prisonnier                    = 42 [default = false];
    optional bool                               refugie_pris_en_compte        = 43 [default = false];
}

message MsgUnitPathFind {
   required int32          oid        = 1;
   required Common.MsgPath itineraire = 2;
}

message MsgUnitDestruction  {
    required int32 oid = 1;
}

message MsgUnitEnvironmentType {
   required int32 oid    = 1;
   required int32 area   = 2;
   required int32 left   = 3;
   required int32 right  = 4;
   required int32 linear = 5;
}

message MsgUnitKnowledgeCreation {
   required int32              oid                   = 1;
   required int32              oid_groupe_possesseur = 2;
   required int32              oid_unite_reelle      = 3;
   required Common.MsgUnitType type_unite            = 4;
}

enum EnumUnitIdentificationLevel {
   identifiee = 0;
   reconnue   = 1;
   detectee   = 2;
   signale    = 3;
}

message AutomatPerception {
   required int32                       oid_compagnie        = 1;
   required EnumUnitIdentificationLevel identification_level = 2;
}

message SeqOfAutomatPerception {
   repeated AutomatPerception elem = 1;
}

message MsgUnitKnowledgeUpdate {
   required int32                       oid                       = 1;
   required int32                       oid_groupe_possesseur     = 2;
   optional int32                       pertinence                = 3 [default = 0 ];
   optional EnumUnitIdentificationLevel identification_level      = 4;
   optional EnumUnitIdentificationLevel max_identification_level  = 5;
   optional int32                       etat_op                   = 6 [default = 0 ];
   optional bool                        mort                      = 7 [default = false ];
   optional Common.MsgCoordLatLong      position                  = 8;
   optional Common.MsgHeading           direction                 = 9;
   optional int32                       speed                     = 10 [default = 0 ];
   optional int32                       camp                      = 11 [default = 0 ];
   optional bool                        nature_pc                 = 12 [default = false ];
   optional SeqOfAutomatPerception      perception_par_compagnie  = 13;
   optional int32                       rendu                     = 14 [default = 0 ];
   optional bool                        prisonnier                = 15 [default = false ];
   optional bool                        refugie_pris_en_compte    = 16 [default = false ];
}

message MsgUnitKnowledgeDestruction {
   required int32  oid                   = 1;
   required int32  oid_groupe_possesseur = 2;
}

message MsgStartUnitFire_target {
    optional int32                  unit       = 1;
    optional int32                  population = 2;
    optional Common.MsgCoordLatLong position   = 3;
}
message MsgStartUnitFire {
   required int32                        fire_oid   = 1;
   required int32                        firer_oid  = 2;
   required MsgStartUnitFire_target      target     = 3;
   required Common.MsgStartUnitFire_type type       = 4;
   optional int32                        ammunition = 5 [default = 0];
}

message UnitHumanFireDamage {
   required Common.EnumHumanRank rank           = 1;
   required int32                alive_nbr      = 2;
   required int32                dead_nbr       = 3;
   required int32                wounded_u1_nbr = 4;
   required int32                wounded_u2_nbr = 5;
   required int32                wounded_u3_nbr = 6;
   required int32                wounded_ue_nbr = 7;
}

message SeqOfUnitHumanFireDamage {
   repeated UnitHumanFireDamage elem = 1;
}

message MsgUnitEquipmentFireDamage {
   required int32  equipement_type = 1;
   required uint32 available_nbr   = 2;
   required uint32 unavailable_nbr = 3;
   required uint32 repairable_nbr  = 4;
}

message SeqOfUnitEquipmentFireDamage {
   repeated MsgUnitEquipmentFireDamage elem = 1;
}

message MsgUnitFireDamages {
   required int32                        target     = 1;
   required SeqOfUnitHumanFireDamage     humans     = 2;
   required SeqOfUnitEquipmentFireDamage equipments = 3;
}

message MsgUnitsFireDamages {
   repeated MsgUnitFireDamages elem = 1;
}

message MsgPopulationFireDamages {
   required int32 target   = 1;
   required int32 dead_nbr = 2;
}

message MsgPopulationsFireDamages {
   repeated MsgPopulationFireDamages elem = 1;
}

message MsgStopUnitFire {
   required int32                     fire_oid            = 1;
   optional MsgUnitsFireDamages       units_damages       = 2;
   optional MsgPopulationsFireDamages populations_damages = 3;
}

message MsgStartPopulationFire {
   required int32 fire_oid  = 1;
   required int32 firer_oid = 2;
}

message MsgStopPopulationFire {
   required int32               fire_oid      = 1;
   required MsgUnitsFireDamages units_damages = 2;
}

message MsgExplosion {
   required int32                     object_oid          = 1;
   optional MsgUnitsFireDamages       units_damages       = 2;
   optional MsgPopulationsFireDamages populations_damages = 3;
}

message MsgStartFireEffect {
   required int32                     effect_oid = 1;
   required Common.MsgLocation        location   = 2;
   required Common.EnumFireEffectType type       = 3;
}

message MsgStopFireEffect  {
    required int32 oid = 1;
}

enum EnumReportType {
  message                = 0;
  operationel            = 1;
  evenement_exceptionnel = 2;
  warning                = 3;
}

message MsgReport {
   required int32                       oid        = 1;
   required int32                       cr         = 2;
   required int32                       cr_oid     = 3;
   required EnumReportType              type       = 4;
   required Common.MsgDateTime          time       = 5;
   optional Common.MsgMissionParameters parametres = 6;
}

message MsgInvalidateReport {
   required int32 oid    = 1;
   required int32 cr_oid = 2;
}

message MsgTrace {
   required int32  oid     = 1;
   required string message = 2;
}

message MsgDecisionalState {
   required int32  oid   = 1;
   required string key   = 2;
   required string value = 3;
}

message MsgDebugPoints {
   required int32                      oid         = 1;
   required Common.MsgCoordLatLongList coordinates = 2;
}

message SeqOfHeading {
   repeated Common.MsgHeading elem = 1;
}

message MsgVisionCone {
   required Common.MsgCoordLatLong origin     = 1;
   required int32                  height     = 2;
   required string                 sensor     = 3;
   required SeqOfHeading           directions = 4;
}

message SeqOfVisionCone {
   repeated MsgVisionCone elem = 1;
}

message MsgUnitVisionCones {
   required int32           oid        = 1;
   required SeqOfVisionCone cones      = 2;
   required float           elongation = 3;
}

message MsgUnitDetection {
   required int32                     oid                = 1;
   required int32                     detected_unit_oid  = 2;
   required Common.EnumUnitVisibility current_visibility = 3;
   required Common.EnumUnitVisibility max_visibility     = 4;
}

message MsgObjectDetection {
   required int32                     oid        = 1;
   required int32                     object_oid = 2;
   required Common.EnumUnitVisibility visibility = 3;
}

message MsgPopulationConcentrationDetection {
   required int32                     oid               = 1;
   required int32                     population_oid    = 2;
   required int32                     concentration_oid = 3;
   required Common.EnumUnitVisibility visibility        = 4;
}

message MsgPopulationFlowDetection {
   required int32          oid            = 1;
   required int32          population_oid = 2;
   required int32          flow_oid       = 3;
   required Common.MsgPath visible_flow   = 4;
}

message MsgObjectCreation {
   required int32                      oid        = 1;
   required string                     type       = 2;
   required string                     name       = 3;
   required int32                      team       = 4;
   required Common.MsgLocation         location   = 5;
   required Common.MsgObjectAttributes attributes = 6;
}

message MsgObjectDestruction  {
    required int32 oid = 1;
}

message MsgObjectUpdate {
   required int32                      oid        = 1;
   optional Common.MsgLocation         location   = 2;
   required Common.MsgObjectAttributes attributes = 3;
}

message MsgObjectKnowledgeCreation {
   required int32                      oid         = 1;
   required int32                      team        = 2;
   required int32                      real_object = 3;
   required string                     type        = 4;
   required Common.MsgObjectAttributes attributes  = 5;
}

message MsgObjectKnowledgeUpdate {
   required int32                      oid                = 1;
   required int32                      team               = 2;
   optional int32                      real_object        = 3 [default = 0];
   optional int32                      relevance          = 4 [default = 0];
   optional Common.MsgLocation         location           = 5;
   optional Common.MsgObjectAttributes attributes         = 6;
   optional bool                       perceived          = 7 [default = false];
   optional Common.MsgListOID          automat_perception = 8;
}
message MsgObjectKnowledgeDestruction {
   required int32  oid  = 1;
   required int32  team = 2;
}

message MsgUrbanKnowledgeCreation {
   required int32                       oid                 = 1;
   required int32                       team                = 2;
   required int32                       real_urban          = 3;
}

message MsgUrbanKnowledgeUpdate {
 required int32                        oid                     = 1;
 required int32                        team                    = 2;
 required int32                        real_urban              = 3; 
 optional int32                        relevance               = 4;
 optional EnumUnitIdentificationLevel  identification_level    = 5;
 optional int32                        progress                = 6;
 optional bool                         perceived               = 7;
 optional Common.MsgListOID            automat_perception      = 8;
}

message MsgUrbanKnowledgeDestruction {
  required int32                        oid                     = 1;
  required int32                        team                    = 2;
}

message MsgLogMedicalHandlingCreation {
   required int32                 oid_consigne  = 1;
   required int32                 oid_pion      = 2;
   required int32                 tick_creation = 3;
   required Common.EnumHumanRank  rang          = 4;
   required Common.EnumHumanWound blessure      = 5;
   optional bool                  blesse_mental = 6 [default = false];
   optional bool                  contamine_nbc = 7 [default = false];
}

message MsgLogMedicalHandlingUpdate {
   required int32                               oid_consigne          = 1;
   required int32                               oid_pion              = 2;
   optional int32                               oid_pion_log_traitant = 3 [default = 0];
   optional Common.EnumHumanWound               blessure              = 4;
   optional bool                                blesse_mental         = 5 [default = false];
   optional bool                                contamine_nbc         = 6 [default = false];
   optional Common.EnumLogMedicalHandlingStatus etat                  = 7;
   optional bool                                diagnostique_effectue = 8 [default = false];
}

message MsgLogMedicalHandlingDestruction {
   required int32  oid_consigne = 1;
   required int32  oid_pion     = 2;
}

message MsgLogMedicalEquipmentAvailability{
   required int32 type_equipement = 1;
   required int32 nbr_total       = 2;
   required int32 nbr_disponibles = 3;
   required int32 nbr_au_travail  = 4;
   optional int32 nbr_pretes      = 5 [default = 0];
   optional int32 nbr_au_repos    = 6 [default = 0];
}

message SeqOfLogMedicalEquipmentAvailability {
   repeated MsgLogMedicalEquipmentAvailability elem = 1;
}

message MsgLogMedicalState {
   required int32                                oid_pion                            = 1;
   optional bool                                 chaine_activee                      = 2 [default = false];
   optional Common.MsgLogMedicalPriorities       priorites                           = 3;
   optional Common.MsgAutomatList                priorites_tactiques                 = 4;
   optional SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_releve    = 5;
   optional SeqOfLogMedicalEquipmentAvailability disponibilites_ambulances_ramassage = 6;
   optional SeqOfLogMedicalEquipmentAvailability disponibilites_medecins             = 7;
}

message MsgLogMaintenanceHandlingCreation {
   required int32  oid_consigne    = 1;
   required int32  oid_pion        = 2;
   required int32  tick_creation   = 3;
   required int32  type_equipement = 4;
   required int32  type_panne      = 5;
}

message MsgLogMaintenanceHandlingUpdate {
   required int32                                   oid_consigne          = 1;
   required int32                                   oid_pion              = 2;
   required int32                                   oid_pion_log_traitant = 3;
   optional Common.EnumLogMaintenanceHandlingStatus etat                  = 4;
   optional bool                                    diagnostique_effectue = 5 [default = false];
}

message MsgLogMaintenanceHandlingDestruction {
   required int32  oid_consigne = 1;
   required int32  oid_pion     = 2;
}

message MsgLogMaintenanceEquipmentAvailability {
   required int32 type_equipement = 1;
   required int32 nbr_total       = 2;
   required int32 nbr_disponibles = 3; 
   required int32 nbr_au_travail  = 4;
   optional int32 nbr_pretes      = 5 [default = 0];
   optional int32 nbr_au_repos    = 6; 
}

message SeqOfLogMaintenanceEquipmentAvailability {
   repeated MsgLogMaintenanceEquipmentAvailability elem = 1;
}

message MsgLogMaintenanceState {
   required int32                                    oid_pion                   = 1;
   optional bool                                     chaine_activee             = 2;
   optional Common.EnumLogMaintenanceRegimeTravail   regime_travail             = 3;
   optional Common.MsgLogMaintenancePriorities       priorites                  = 4;
   optional Common.MsgAutomatList                    priorites_tactiques        = 5;
   optional SeqOfLogMaintenanceEquipmentAvailability disponibilites_remorqueurs = 6;
   optional SeqOfLogMaintenanceEquipmentAvailability disponibilites_reparateurs = 7;
}

message MsgLogSupplyHandlingCreation {
   optional int32              oid_consigne  = 1;
   optional int32              oid_automate  = 2;
   optional int32              tick_creation = 3;
   optional SeqOfDotationQuery dotations     = 4;
}

message MsgDotationQuery {
   optional int32 ressource_id        = 1;
   optional int32 quantite_demandee   = 2;
   optional int32 quantite_accordee   = 3;
   optional int32 quantite_en_transit = 4;
}

message SeqOfDotationQuery {
   repeated MsgDotationQuery elem = 1;
}
 
message MsgLogSupplyHandlingUpdate {
   optional int32                       oid_consigne                               = 1;
   optional int32                       oid_automate                               = 2;
   optional int32                       oid_automate_log_traitant                  = 3;
   optional int32                       oid_automate_log_fournissant_moyens_convoi = 4;
   optional int32                       oid_pion_convoyant                         = 5;
   optional EnumLogSupplyHandlingStatus etat                                       = 6;
   optional SeqOfDotationQuery          dotations                                  = 7;
}

message MsgLogSupplyHandlingDestruction {
   required int32 oid_consigne = 1;
   required int32 oid_automate = 2;
}

message MsgLogSupplyEquimentAvailability {
   optional int32 type_equipement = 1;
   optional int32 nbr_total       = 2;
   optional int32 nbr_disponibles = 3;
   optional int32 nbr_au_travail  = 4;
   optional int32 nbr_pretes      = 5 [default = 0];
   optional int32 nbr_au_repos    = 6;
}

message SeqOfLogSupplyEquimentAvailability {
   repeated MsgLogSupplyEquimentAvailability elem = 1;
}

message MsgLogSupplyState {
   optional int32                               oid_pion                             = 1;
   optional bool                                chaine_activee                       = 2;
   optional Common.SeqOfDotationStock           stocks                               = 3;
   optional SeqOfLogSupplyEquimentAvailability  disponibilites_transporteurs_convois = 4;
}

message MsgLogSupplyQuotas {
   required int32                     oid_automate = 1;
   required Common.SeqOfDotationQuota quotas       = 2;
}

message MsgPopulationCreation {
   required int32  oid             = 1;
   required int32  type_population = 2;
   optional string nom             = 3;
   required int32  oid_camp        = 4;
}

message MsgPopulationUpdate {
   required int32  oid             = 1;
   optional int32  etat_domination = 2 [default = 0];
}

message MsgPopulationConcentrationCreation {
   required int32                  oid            = 1;
   required int32                  oid_population = 2;
   required Common.MsgCoordLatLong position       = 3;
   
}

message MsgPopulationConcentrationDestruction {
   required int32  oid            = 1;
   required int32  oid_population = 2;
}

message MsgPopulationConcentrationUpdate {
   required int32                          oid                = 1;
   required int32                          oid_population     = 2;
   optional int32                          nb_humains_vivants = 3 [default = 0];
   optional int32                          nb_humains_morts   = 4 [default = 0];
   optional Common.EnumPopulationAttitude  attitude           = 5;
}

message MsgPopulationFlowCreation {
   required int32  oid            = 1;
   required int32  oid_population = 2;
}

message MsgPopulationFlowDestruction {
   required int32  oid            = 1;
   required int32  oid_population = 2;
}

message MsgPopulationFlowUpdate {
   required int32                          oid                = 1;
   required int32                          oid_population     = 2;
   optional Common.MsgPath                 itineraire         = 3;
   optional Common.MsgPath                 flux               = 4;
   optional Common.MsgHeading              direction          = 5;
   optional int32                          vitesse            = 6 [default = 0];
   optional int32                          nb_humains_vivants = 7 [default = 0];
   optional int32                          nb_humains_morts   = 8 [default = 0];
   optional Common.EnumPopulationAttitude  attitude           = 9;
}

message MsgPopulationKnowledgeCreation {
   required int32  oid_connaissance      = 1;
   required int32  oid_groupe_possesseur = 2;
   optional int32  oid_population_reelle = 3;
   optional int32  camp                  = 4;
}

message MsgPopulationKnowledgeUpdate {
   required int32  oid_connaissance      = 1;
   required int32  oid_groupe_possesseur = 2;
   optional int32  etat_domination       = 3 [default = 0];
}

message MsgPopulationKnowledgeDestruction {
   required int32  oid_connaissance      = 1;
   required int32  oid_groupe_possesseur = 2;
}

message MsgPopulationConcentrationKnowledgeCreation {
   required int32                   oid_connaissance_concentration = 1;
   required int32                   oid_connaissance_population    = 2;
   required int32                   oid_groupe_possesseur          = 3;
   optional int32                   oid_concentration_reelle       = 4;
   optional Common.MsgCoordLatLong  position                       = 5;
}
message MsgPopulationConcentrationKnowledgeDestruction {
   required int32  oid_connaissance_concentration = 1;
   required int32  oid_connaissance_population    = 2;
   required int32  oid_groupe_possesseur          = 3;
}

message MsgPopulationConcentrationKnowledgeUpdate {
   required int32                          oid_connaissance_concentration = 1;
   required int32                          oid_connaissance_population    = 2;
   required int32                          oid_groupe_possesseur          = 3;
   optional int32                          oid_concentration_reelle       = 4 [default = 0];
   optional int32                          nb_humains_vivants             = 5 [default = 0];
   optional int32                          nb_humains_morts               = 6 [default = 0];
   optional Common.EnumPopulationAttitude  attitude                       = 7;
   optional int32                          pertinence                     = 8 [default = 0];
   optional bool                           est_percu                      = 9 [default = false];
}

message MsgPopulationFlowKnowledgeCreation {
   required int32  oid_connaissance_flux       = 1;
   required int32  oid_connaissance_population = 2;
   required int32  oid_groupe_possesseur       = 3;
   required int32  oid_flux_reel               = 4;
}

message MsgFlowPart {
   required Common.MsgPath  forme      = 1;
   required int32           pertinence = 2;
}

message SeqOfFlowPart {
   repeated MsgFlowPart elem = 1;
}

message MsgPopulationFlowKnowledgeDestruction {
   required int32  oid_connaissance_flux       = 1;
   required int32  oid_connaissance_population = 2;
   required int32  oid_groupe_possesseur       = 3;
}

message MsgPopulationFlowKnowledgeUpdate {
   required int32                          oid_connaissance_flux       = 1;
   required int32                          oid_connaissance_population = 2;
   required int32                          oid_groupe_possesseur       = 3;
   optional int32                          oid_flux_reel               = 4 [default = 0];
   optional SeqOfFlowPart                  portions_flux               = 5;
   optional Common.MsgHeading              direction                   = 6;
   optional int32                          vitesse                     = 7 [default = 0];
   optional int32                          nb_humains_vivants          = 8 [default = 0];
   optional int32                          nb_humains_morts            = 9 [default = 0];
   optional Common.EnumPopulationAttitude  attitude                    = 10;
   optional bool                           est_percu                   = 11 [default = false];
}

// Folk
message MsgFolkCreation_profiles {
   repeated string elem = 1;
}
message MsgFolkCreation_activities {
   repeated string elem = 1;
}
message MsgFolkCreation {
   required MsgFolkCreation_profiles    profiles       = 1;
   required MsgFolkCreation_activities  activities     = 2;
   optional int32                       container_size = 3;
   optional int32                       edge_number    = 4;
}
message MsgFolkGraphEdgeUpdate {
   required int32 oid                   = 1;
   required int32 shp_oid               = 2;
   repeated int32 population_occupation = 3;
}
message MsgFolkGraphUpdate {
   repeated MsgFolkGraphEdgeUpdate elem = 1;
}

// Weather
message MsgControlGlobalMeteoAck {}
message MsgControlLocalMeteoAck {}

// Checkpoints
message MsgControlCheckPointSetFrequencyAck {}
message MsgControlCheckPointSaveNowAck      {}
message MsgControlCheckPointSaveBegin       {}
message MsgControlCheckPointSaveBeginAck    {}
message MsgControlCheckPointSaveEnd {
    optional string name = 1;
}

// Current State / Initialization
message MsgControlSendCurrentStateBegin {}
message MsgControlSendCurrentStateEnd   {}

// Urban
message MsgUrbanAttributeVegetation
{
    required string type    = 1;
    required int32  height  = 2;
    required float  density = 3;
}
message MsgUrbanAttributeSoil
{
   required float  occupation        = 1;
   required float  trafficability    = 2;
   required bool   multiple          = 3;
   required string compound_clearing = 4;
}   
message MsgUrbanAttributeArchitecture
{
    required float  height                = 1;
    required int32  floor_number          = 2;
    required int32  basement_level_number = 3;
    required string roof_shape            = 4;
    required string material              = 5;
    required float  inner_cluttering      = 6;
    required float  facade_opacity        = 7;
}
message MsgColorRGBA
{
	required int32 red   = 1;
	required int32 green = 2;
	required int32 blue  = 3;
	required float alpha = 4;	
}
message MagicActionCreateUrban {
   required string             name     = 1;
   required Common.MsgLocation location = 2;
}
message MagicActionUpdateUrban {
   required uint32 oid = 1;
}
message MagicActionDestroyUrban {
   required uint32 oid = 1;
}
message MsgUrbanMagicAction {
   optional MagicActionCreateUrban  create_urban  = 1;
   optional MagicActionUpdateUrban  update_urban  = 2;
   optional MagicActionDestroyUrban destroy_urban = 3;
}

message MsgUrbanMagicActionAck {
   enum ErrorCode
   {
        no_error                          = 0;
        error_invalid_urban               = 1;
        error_invalid_id                  = 2;
        error_invalid_camp                = 3;
        error_invalid_localisation        = 4;
        error_missing_specific_attributes = 5;
        error_invalid_specific_attributes = 6;
   }
   required ErrorCode error_code = 1;
}

message MsgUrbanAttributes {
   optional MsgUrbanAttributeVegetation   vegetation   = 1;
   optional MsgUrbanAttributeSoil         soil         = 2;
   optional MsgUrbanAttributeArchitecture architecture = 3;
   optional MsgColorRGBA                  color        = 4;
}
message MsgUrbanCreation {
   required uint32             oid        = 1;
   required string             name       = 2;
   required Common.MsgLocation location   = 3;
   optional MsgUrbanAttributes attributes = 4;
}
message MsgUrbanDetection {
    required uint32             oid        = 1;
    required uint32             urban_oid  = 2;
    required Common.EnumUnitVisibility visibility = 3;
}
message MsgUrbanUpdate {
   required uint32             oid      = 1;
   optional Common.MsgLocation location = 2;
}
message MsgUrbanDestruction {
   required uint32 oid = 1;
}

// Knowledge groups
message MsgKnowledgeGroupCreation {
   required uint32 oid         = 1;
   required uint32 oid_camp    = 2;
   optional uint32 oid_parent  = 3;
   required string type        = 4;
}

message MsgKnowledgeGroupUpdate {
   required uint32 oid        = 1;
   optional uint32 oid_camp   = 2;
   optional uint32 oid_parent = 3;
   optional bool   enabled    = 4;
   optional string type       = 5;
}

message KnowledgeGroupAck {
    enum ErrorCode {
       no_error                     = 0;
       error_invalid_unit           = 1;
       error_invalid_superior       = 2;
       error_invalid_camp           = 3;
       error_invalid_knowledgegroup = 4;
       error_invalid_type           = 5;    
    }
}

message MsgKnowledgeGroupCreationAck {
    required uint32                      oid        = 1;
    required KnowledgeGroupAck.ErrorCode error_code = 2;
}
message MsgKnowledgeGroupUpdateAck {
    required uint32                      oid        = 1;
    required KnowledgeGroupAck.ErrorCode error_code = 2;
}

// Message container
message MsgSimToClient {
    message Content {
        optional MsgUnitOrderAck                                unit_order_ack                                 = 1;
        optional MsgAutomatOrderAck                             automat_order_ack                              = 2;
        optional MsgPopulationOrderAck                          population_order_ack                           = 3;
        optional MsgFragOrderAck                                frag_order_ack                                 = 4;
        optional MsgSetAutomatModeAck                           set_automat_mode_ack                           = 5;
        optional MsgUnitCreationRequestAck                      unit_creation_request_ack                      = 6;
        optional MsgUnitMagicActionAck                          unit_magic_action_ack                          = 7;
        optional MsgObjectMagicActionAck                        object_magic_action_ack                        = 8;
        optional MsgPopulationMagicActionAck                    population_magic_action_ack                    = 9;
        optional MsgChangeDiplomacyAck                          change_diplomacy_ack                           = 10;
        optional MsgAutomatChangeKnowledgeGroupAck              automat_change_knowledge_group_ack             = 11;
        optional MsgAutomatChangeLogisticLinksAck               automat_change_logistic_links_ack              = 12;
        optional MsgAutomatChangeSuperiorAck                    automat_change_superior_ack                    = 13;
        optional MsgUnitChangeSuperiorAck                       unit_change_superior_ack                       = 14;
        optional MsgLogSupplyPushFlowAck                        log_supply_push_flow_ack                       = 15;
        optional MsgLogSupplyChangeQuotasAck                    log_supply_change_quotas_ack                   = 16;
        optional MsgControlInformation                          control_information                            = 17;
        optional MsgControlProfilingInformation                 control_profiling_information                  = 18;
        optional MsgControlBeginTick                            control_begin_tick                             = 19;
        optional MsgControlEndTick                              control_end_tick                               = 20;
        optional MsgControlStopAck                              control_stop_ack                               = 21;
        optional MsgControlPauseAck                             control_pause_ack                              = 22;
        optional MsgControlResumeAck                            control_resume_ack                             = 23;
        optional MsgControlChangeTimeFactorAck                  control_change_time_factor_ack                 = 24;
        optional MsgControlDatetimeChangeAck                    control_date_time_change_ack                   = 25;
        optional MsgControlCheckPointSaveEnd                    control_checkpoint_save_end                    = 26;
        optional Common.MsgFormationCreation                    formation_creation                             = 27;    
        optional MsgTeamCreation                                side_creation                                  = 28;
        optional MsgAutomatCreation                             automat_creation                               = 29;
        optional MsgAutomatAttributes                           automat_attributes                             = 30;
        optional MsgUnitCreation                                unit_creation                                  = 31;
        optional MsgUnitAttributes                              unit_attributes                                = 32;
        optional MsgUnitPathFind                                unit_pathfind                                  = 33;
        optional MsgUnitDestruction                             unit_destruction                               = 34;
        optional MsgUnitEnvironmentType                         unit_environment_type                          = 35;
        optional Common.MsgChangeDiplomacy                      change_diplomacy                               = 36;
        optional Common.MsgUnitChangeSuperior                   unit_change_superior                           = 37;
        optional Common.MsgAutomatChangeLogisticLinks           automat_change_logistic_links                  = 38;
        optional Common.MsgAutomatChangeKnowledgeGroup          automat_change_knowledge_group                 = 39;
        optional Common.MsgAutomatChangeSuperior                automat_change_superior                        = 40;
        optional MsgUnitKnowledgeCreation                       unit_knowledge_creation                        = 41;
        optional MsgUnitKnowledgeUpdate                         unit_knowledge_update                          = 42;
        optional MsgUnitKnowledgeDestruction                    unit_knowledge_destruction                     = 43;
        optional MsgStartUnitFire                               start_unit_fire                                = 44;
        optional MsgStopUnitFire                                stop_unit_fire                                 = 45;
        optional MsgStartPopulationFire                         start_population_fire                          = 46;
        optional MsgStopPopulationFire                          stop_population_fire                           = 47;
        optional MsgExplosion                                   explosion                                      = 48;
        optional MsgStartFireEffect                             start_fire_effect                              = 49;
        optional MsgStopFireEffect                              stop_fire_effect                               = 50;
        optional MsgReport                                      report                                         = 51;
        optional MsgInvalidateReport                            invalidate_report                              = 52;
        optional MsgTrace                                       trace                                          = 53;
        optional MsgDecisionalState                             decisional_state                               = 54;
        optional MsgDebugPoints                                 debug_points                                   = 55;
        optional MsgUnitVisionCones                             unit_vision_cones                              = 56;
        optional MsgUnitDetection                               unit_detection                                 = 57;
        optional MsgObjectDetection                             object_detection                               = 58;
        optional MsgPopulationConcentrationDetection            population_concentration_detection             = 59;
        optional MsgPopulationFlowDetection                     population_flow_detection                      = 60;
        optional Common.MsgUnitOrder                            unit_order                                     = 61;
        optional Common.MsgAutomatOrder                         automat_order                                  = 62;
        optional Common.MsgPopulationOrder                      population_order                               = 63;
        optional MsgObjectCreation                              object_creation                                = 64;
        optional MsgObjectDestruction                           object_destruction                             = 65;
        optional MsgObjectUpdate                                object_update                                  = 66;
        optional MsgObjectKnowledgeCreation                     object_knowledge_creation                      = 67;
        optional MsgObjectKnowledgeUpdate                       object_knowledge_update                        = 68;
        optional MsgObjectKnowledgeDestruction                  object_knowledge_destruction                   = 69;
        optional MsgLogMedicalHandlingCreation                  log_medical_handling_creation                  = 70;
        optional MsgLogMedicalHandlingUpdate                    log_medical_handling_update                    = 71;
        optional MsgLogMedicalHandlingDestruction               log_medical_handling_destruction               = 72;
        optional MsgLogMedicalState                             log_medical_state                              = 73;
        optional MsgLogMaintenanceHandlingCreation              log_maintenance_handling_creation              = 74;
        optional MsgLogMaintenanceHandlingUpdate                log_maintenance_handling_update                = 75;
        optional MsgLogMaintenanceHandlingDestruction           log_maintenance_handling_destruction           = 76;
        optional MsgLogMaintenanceState                         log_maintenance_state                          = 77;
        optional MsgLogSupplyHandlingCreation                   log_supply_handling_creation                   = 78;
        optional MsgLogSupplyHandlingUpdate                     log_supply_handling_update                     = 79;
        optional MsgLogSupplyHandlingDestruction                log_supply_handling_destruction                = 80;
        optional MsgLogSupplyState                              log_supply_state                               = 81;
        optional MsgLogSupplyQuotas                             log_supply_quotas                              = 82;
        optional MsgPopulationCreation                          population_creation                            = 83;
        optional MsgPopulationUpdate                            population_update                              = 84;
        optional MsgPopulationConcentrationCreation             population_concentration_creation              = 85;
        optional MsgPopulationConcentrationDestruction          population_concentration_destruction           = 86;
        optional MsgPopulationConcentrationUpdate               population_concentration_update                = 87;
        optional MsgPopulationFlowCreation                      population_flow_creation                       = 88;
        optional MsgPopulationFlowDestruction                   population_flow_destruction                    = 89;
        optional MsgPopulationFlowUpdate                        population_flow_update                         = 90;
        optional MsgPopulationKnowledgeCreation                 population_knowledge_creation                  = 91;
        optional MsgPopulationKnowledgeUpdate                   population_knowledge_update                    = 92;
        optional MsgPopulationKnowledgeDestruction              population_knowledge_destruction               = 93;
        optional MsgPopulationConcentrationKnowledgeCreation    population_concentration_knowledge_creation    = 94;
        optional MsgPopulationConcentrationKnowledgeDestruction population_concentration_knowledge_destruction = 95;
        optional MsgPopulationConcentrationKnowledgeUpdate      population_concentration_knowledge_update      = 96;
        optional MsgPopulationFlowKnowledgeCreation             population_flow_knowledge_creation             = 97;
        optional MsgPopulationFlowKnowledgeDestruction          population_flow_knowledge_destruction          = 98;
        optional MsgPopulationFlowKnowledgeUpdate               population_flow_knowledge_update               = 99;
        optional MsgFolkCreation                                folk_creation                                  = 100;
        optional MsgFolkGraphUpdate                             folk_graph_update                              = 101;
        optional MsgControlGlobalMeteoAck                       control_global_meteo_ack                       = 102;
        optional MsgControlLocalMeteoAck                        control_local_meteo_ack                        = 103;
        optional MsgControlCheckPointSaveBegin                  control_checkpoint_save_begin                  = 104;
        optional MsgControlCheckPointSetFrequencyAck            control_checkpoint_set_frequency_ack           = 105;
        optional MsgControlCheckPointSaveNowAck                 control_checkpoint_save_now_ack                = 106;
        optional MsgControlSendCurrentStateBegin                control_send_current_state_begin               = 107;
        optional MsgControlSendCurrentStateEnd                  control_send_current_state_end                 = 108;
        optional MsgUrbanCreation                               urban_creation                                 = 109;
        optional MsgUrbanKnowledgeCreation                      urban_knowledge_creation                       = 110;
        optional MsgUrbanKnowledgeUpdate                        urban_knowledge_update                         = 111;
        optional MsgUrbanKnowledgeDestruction                   urban_knowledge_destruction                    = 112;
        optional Common.StockResource                           stock_resource                                 = 113;
        optional MsgUrbanDetection                              urban_detection                                = 114;
        optional MsgKnowledgeGroupCreation                      knowledge_group_creation                       = 115;
        optional MsgKnowledgeGroupUpdate                        knowledge_group_update                         = 116;
        optional MsgKnowledgeGroupCreationAck                   knowledge_group_creation_ack                   = 117;
        optional MsgKnowledgeGroupUpdateAck                     knowledge_group_update_ack                     = 118;
        optional MsgActionCreateFireOrderAck                    action_create_fire_order_ack                   = 119;
    }
    optional int32   context = 1 [default = 0];
    required Content message = 2;
}

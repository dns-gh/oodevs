// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2010 MASA Group
//
// *****************************************************************************

import "common.proto";
import "version.proto";

package sword;

/** @struct AuthenticationResponse
    @brief A response message to an @ref AuthenticationRequest.

    This message is sent in response to an authentication request. It contains
    an error code indicating the success of the operation or failure with reason.
    In case of failure, it contains a short description of available profiles so
    that client applications can prompt the user with a list of profiles.
*/
message AuthenticationResponse {
    /** @enum ErrorCode
        @brief Reason for the failure of
               an authentication operation.
    */
    enum ErrorCode {
        success                     = 0; //!< Authentication succeeded.
        invalid_login               = 1; //!< Authentication failed because the provided login does not exist (in file "exercise/profiles.xml").
        too_many_connections        = 2; //!< Authentication failed because there are too many connections (depends on licensing).
        mismatched_protocol_version = 4; //!< Authentication failed because of a mismatched protocol version between client and server.
    }
    /** @property error_code
        @brief Reason for the failure of
               an authentication operation.
        @see ErrorCode
    */
    required ErrorCode              error_code        = 1;
    /** @property profile
        @brief Contains authenticated profile information when operation is successful.
        @see Profile
    */
    optional Profile                profile           = 2;
    /** @property profiles
        @brief Contains list of available profiles when authentication has failed.
        @see ProfileDescriptionList
    */
    optional ProfileDescriptionList profiles          = 3;
    /** @property server_version
        @brief Server protocol version.
        @see ProtocolVersion
    */
    required ProtocolVersion        server_version    = 4;
    /** @property restart_date_time
        @brief Date and time of the simulation when restarting on a checkpoint.
        @see DateTime
        @todo not implemented
    */
    optional DateTime               restart_date_time = 5;
    /** @property terrain_name
        @brief Terrain name used by the simulation (from file "exercise/exercise.xml").
        @todo not implemented
    */
    optional string                 terrain_name      = 6;
}

/** @struct ProfileCreation
    @brief A profile creation message.

    This message is sent when a profile is created. This can occur:
    @li When connecting to a running exercise; creation of all available profiles are notified to client
    @li During the game, upon manual creation of a profile by an authorised user (supervisor)
*/
message ProfileCreation {
    /** @property profile
        @brief Information about the created profile.
        @see Profile
    */
    required Profile profile = 1;
}

/** @struct ProfileCreationRequestAck
    @brief A profile creation request acknowledgement message.

    This message is sent when a profile is created manually by an authorised user (supervisor).
*/
message ProfileCreationRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               a profile creation operation.
    */
    enum ErrorCode {
        success          = 0; //!< Profile creation succeeded.
        invalid_login    = 1; //!< Profile creation failed because of an invalid (empty) login.
        invalid_password = 2; //!< @deprecated Profile creation failed because of an invalid password.
        duplicate_login  = 3; //!< Profile creation failed because provided login already exists.
    }
    /** @property login
        @brief Login provided on profile creation request.
    */
    required string    login      = 1;
    /** @property error_code
        @brief Reason for the failure of
               a profile creation operation.
        @see ErrorCode
    */
    required ErrorCode error_code = 2;
}

/** @struct ProfileUpdateRequestAck
    @brief A profile update request acknowledgement message.

    This message is sent when a profile is updated manually by an authorised user (supervisor).
*/
message ProfileUpdateRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               a profile update operation.
    */
    enum ErrorCode {
        success          = 0; //!< Profile update succeeded.
        invalid_profile  = 1; //!< Profile update failed because of an invalid profile (non existing).
        invalid_login    = 2; //!< Profile update failed because of an invalid (empty) login.
        invalid_password = 3; //!< @deprecated Profile update failed because of an invalid password.
        duplicate_login  = 4; //!< Profile update failed because the provided new login already exists.
    }
    /** @property login
        @brief Login provided on profile update request.
    */
    required string    login      = 1;
    /** @property error_code
        @brief Reason for the failure of
               a profile update operation.
        @see ErrorCode
    */
    required ErrorCode error_code = 2;
}

/** @struct ProfileUpdate
    @brief A profile update message.

    This message is sent when a profile is updated during the game by
    an authorised user (supervisor).
*/
message ProfileUpdate {
    /** @property login
        @brief Login of the updated profile.
    */
    required string  login   = 1;
    /** @property profile
        @brief Updated profile information.
        @see Profile
    */
    required Profile profile = 2;
}

/** @struct ProfileDestruction
    @brief A profile destruction message.

    This message is sent:
    @li When a profile is destroyed during the game by an authorised user (supervisor).
    @li When the exercise terminates.
*/
message ProfileDestruction {
    /** @property login
        @brief Login of the destroyed profile.
    */
    optional string login = 1;
}

/** @struct ProfileDestructionRequestAck
    @brief A profile destruction request acknowledgement message.

    This message is sent when a profile is destroyed manually by an authorised user (supervisor).
*/
message ProfileDestructionRequestAck {
    /** @enum ErrorCode
        @brief Reason for the failure of
               a profile destruction operation.
    */
    enum ErrorCode {
        success         = 0; //!< Profile destruction succeeded.
        invalid_profile = 1; //!< Profile destruction failed because the specified profile does not exist.
        failure         = 2; //!< @deprecated never used
    }
    /** @property error_code
        @brief Reason for the failure of
               a profile destruction operation.
        @see ErrorCode
    */
    required ErrorCode error_code = 1;
    /** @property login
        @brief Login provided on profile destruction request.
    */
    required string    login      = 2;
}

/** @struct RoleType
    @brief Defines a role played by a profile during the game.

    Profile roles are listed in file "resources/Extensions.xml" (profile-attributes).
*/
message RoleType {
    /** @property id
        @brief Role type identifier as defined in file "resources/Extensions.xml".
    */
    required uint32 id = 1;
}

/** @struct Profile
    @brief Profile data: login, password, access-rights...

    The profile information can be set :
    @li During exercise preparation, creating "exercise/profiles.xml" loaded by Dispatcher at runtime.
    @li During exercise gaming, manually creating or editing profile information.
*/
message Profile {
    /** @property login
        @brief The login is the profile unique identifier.

        Profile login is the only mandatory parameter during authentication process.
    */
    required string          login                   = 1;
    /** @property password
        @brief The password is optional and allows the protection of a profile
               during the authentication process.
    */
    optional string          password                = 2;
    /** @property read_only_formations
        @brief A list of "formation" identifiers which can be viewed by this profile.
        @see FormationIdList

        Profile with read-only permissions can only see the situation from the
        specified units but cannot control them.
    */
    optional FormationIdList read_only_formations    = 3;
    /** @property read_write_formations
        @brief A list of "Formation" identifiers which can be viewed and controlled by this profile.
        @see FormationIdList

        Profile with read-write permissions can see the situation from the
        specified units and control them.
    */
    optional FormationIdList read_write_formations   = 4;
    /** @property read_only_automates
        @brief A list of "automat" identifiers which can be viewed by this profile.
        @see AutomatIdList

        Profile with read-only permissions can only see the situation from the
        specified units but cannot control them.

        @todo translation
    */
    optional AutomatIdList   read_only_automates     = 5;
    /** @property read_write_automates
        @brief A list of "automat" identifiers which can be viewed and controlled by this profile.
        @see AutomatIdList

        Profile with read-write permissions can see the situation from the
        specified units and control them.

        @todo translation
    */
    optional AutomatIdList   read_write_automates    = 6;
    /** @property read_only_camps
        @brief A list of "party" identifiers which can be viewed by this profile.
        @see PartyIdList

        Profile with read-only permissions can only see the situation from the
        specified units but cannot control them.

        @todo translation
    */
    optional PartyIdList     read_only_camps         = 7;
    /** @property read_write_camps
        @brief A list of "party" identifiers which can be viewed and controlled by this profile.
        @see PartyIdList

        Profile with read-write permissions can see the situation from the
        specified units and control them.

        @todo translation
    */
    optional PartyIdList     read_write_camps        = 8;
    /** @property read_only_crowds
        @brief A list of "crowd" identifiers which can be viewed by this profile.
        @see CrowdIdList

        Profile with read-only permissions can only see the situation from the
        specified units but cannot control them.
    */
    optional CrowdIdList     read_only_crowds        = 9;
    /** @property read_write_crowds
        @brief A list of "crowd" identifiers which can be viewed and controlled by this profile.
        @see CrowdIdList

        Profile with read-write permissions can see the situation from the
        specified units and control them.
    */
    optional CrowdIdList     read_write_crowds       = 10;
    /** @property supervisor
        @brief A flag indicating whether the profile is granted supervisor access.

        Supervisor access grants a profile the right to execute "magic actions" such as
        Teleporting or recompleting a unit. It can also edit profiles and control the
        simulation (pause, resume, changing speed factor).
    */
    required bool            supervisor              = 11;
    /** @property role
        @brief A role associated with the profile.
        @see RoleType

        The role has no impact on the simulation, it is purely intended for exercise
        organisation purpose, so that the different roles can be identified (DIREX, ENIEX...).
        The list of roles can be customized from the file "resources/Extensions.xml".
    */
    optional RoleType        role                    = 12;
}

/** @struct ProfileDescriptionList
    @brief A list of ProfileDescription.
    @todo should be integrated to AuthenticationResponse fields
*/
message ProfileDescriptionList {
    /** @property elem
        @brief The list of ProfileDescription.
    */
    repeated ProfileDescription elem = 1;
}

/** @struct ProfileDescription
    @brief A short profile description.

    This description is when authentication fail in order to provide
    the client with a short list of available profiles without access rights.

    @todo should be nested inside AuthenticationResponse
*/
message ProfileDescription {
    /** @property login
        @brief The profile login.
    */
    required string   login      = 1;
    /** @property password
        @brief The profile password.
    */
    required bool     password   = 2;
    /** @property supervisor
        @brief Flag to indicate whether the profile has been granted supervisor access.
    */
    required bool     supervisor = 3;
    /** @property role
        @brief The profile role in the context of the exercise.
    */
    optional RoleType role       = 4;
}

/** @struct AuthenticationToClient
    @brief A facade for all available messages going from authentication to client.

    This is the actual message sent over the network.
*/
message AuthenticationToClient {
    /** @struct Content
        @brief The possible messages contained in an authentication to client message.
        @warning Each Content message must contain exactly one of the possible messages.
    */
    message Content {
        optional AuthenticationResponse       authentication_response         = 1; //!< A response message to an authentication request.
        optional ProfileCreation              profile_creation                = 2; //!< A profile creation message.
        optional ProfileCreationRequestAck    profile_creation_request_ack    = 3; //!< An acknowledge message to profile creation request.
        optional ProfileUpdate                profile_update                  = 4; //!< A profile update message.
        optional ProfileUpdateRequestAck      profile_update_request_ack      = 5; //!< An acknowledge message to profile update request.
        optional ProfileDestruction           profile_destruction             = 6; //!< A profile destruction message.
        optional ProfileDestructionRequestAck profile_destruction_request_ack = 7; //!< An acknowledge message to profile destruction request.
    }
    /** @property context
        @brief Identifies the request matching the response.

        This field is filled using the "context" fields provided in the request
        message (from ClientToAuthentication).

        This context allows the client application to put an unique identifier
        (based for instance on MAC address), thus allowing to track response
        message matching a specific request emitted by the client.
    */
    optional int32   context = 1;
    /** @property message
        @brief A field containing one of the messages to be sent.
    */
    required Content message = 2;
}

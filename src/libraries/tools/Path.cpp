// *****************************************************************************
//
// This file is part of a MASA library or program.
// Refer to the included end-user license agreement for restrictions.
//
// Copyright (c) 2013 MASA Group
//
// *****************************************************************************

#include "tools_pch.h"
#include "Path.h"
#include <boost/filesystem.hpp>
#include <xeumeuleu/xml.hpp>

using namespace tools;

namespace bfs = boost::filesystem;

// -----------------------------------------------------------------------------
// Name: Path constructor
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path::Path()
    : path_()
{
    // NOTHING
}

// -----------------------------------------------------------------------------
// Name: Path constructor
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path::Path( const std::string& sourceText, Encoding sourceEncoding = System )
    : path_( ( sourceEncoding == UTF8 ) ? FromUtf8ToLocalCharset( sourceText ) : sourceText )
{
    // NOTHING
}

// -----------------------------------------------------------------------------
// Name: Path private constructor
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path::Path( const boost::filesystem::path& boostPath )
    : path_( boostPath )
{
    // NOTHING
}

// -----------------------------------------------------------------------------
// Name: Path destructor
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path::~Path()
{
    // NOTHING
}

// -----------------------------------------------------------------------------
// Name: Path::CurrentPath
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::CurrentPath()
{
    return Path( bfs::current_path() );
}

// -----------------------------------------------------------------------------
// Name: Path::FromUTF8
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::FromUTF8( const std::string& path )
{
    return Path( path, UTF8 );
}

// -----------------------------------------------------------------------------
// Name: Path::FromSystem
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::FromSystem( const std::string& path )
{
    return Path( path, System );
}

// -----------------------------------------------------------------------------
// Name: Path::ToString
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
const std::string Path::ToString( Encoding outputEncoding /*= System*/ )
{
    return ( outputEncoding == UTF8 ) ? FromLocalCharsetToUtf8( path_.string() ) : path_.string();
}

// -----------------------------------------------------------------------------
// Name: Path::ToStringSystem
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
const std::string Path::ToStringSystem()
{
    return ToString( System );
}

// -----------------------------------------------------------------------------
// Name: Path::ToStringUTF8
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
const std::string Path::ToStringUTF8()
{
    return ToString( UTF8 );
}

// -----------------------------------------------------------------------------
// Name: Path::ToBoost
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
const bfs::path& Path::ToBoost() const
{
    return path_;
}

// -----------------------------------------------------------------------------
// Name: Path::Exists
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::Exists() const
{
    return bfs::exists( path_ );
}

// -----------------------------------------------------------------------------
// Name: Path::MakePreferred
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path& Path::MakePreferred()
{
    path_.make_preferred();
    return *this;
}

// -----------------------------------------------------------------------------
// Name: Path::operator=
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path& Path::operator=( const Path& p )
{
    path_ = p.path_;
    return *this;
}

// -----------------------------------------------------------------------------
// Name: Path::operator/=
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path& Path::operator/=( const Path& p )
{
    path_ /= p.path_;
    return *this;
}

// -----------------------------------------------------------------------------
// Name: Path::operator/
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::operator/( const Path& p ) const
{
    return Path( path_ / p.path_ );
}

// -----------------------------------------------------------------------------
// Name: Path::operator+=
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path& Path::operator+=( const Path& p )
{
    path_ += p.path_;
    return *this;
}

// -----------------------------------------------------------------------------
// Name: Path::operator==
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::operator==( const Path& p ) const
{
    return path_ == p.path_;
}

// -----------------------------------------------------------------------------
// Name: Path::operator!=
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::operator!=( const Path& p ) const
{
    return path_ != p.path_;
}

// -----------------------------------------------------------------------------
// Name: Path::operator<<
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
std::ostream& Path::operator<<( std::ostream& os )
{
    return os << path_;
}

// -----------------------------------------------------------------------------
// Name: Path::operator<<
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
xml::xostream& Path::operator<<( xml::xostream& os )
{
    return os << ToString( UTF8 );
}

// -----------------------------------------------------------------------------
// Name: Path::Root
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::Root() const
{
    return Path( path_.root_path() );
}

// -----------------------------------------------------------------------------
// Name: Path::Branch
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::Parent() const
{
    return Path( path_.parent_path() );
}

// -----------------------------------------------------------------------------
// Name: Path::FileName
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::FileName() const
{
    return Path( path_.filename() );
}

// -----------------------------------------------------------------------------
// Name: Path::Extension
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::Extension() const
{
    return Path( path_.extension() );
}

// -----------------------------------------------------------------------------
// Name: Path::Relative
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::Relative() const
{
    return Path( path_.relative_path() );
}

// -----------------------------------------------------------------------------
// Name: Path::Absolute
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
Path Path::Absolute() const
{
    return ( IsRelative() ) ? CurrentPath() / *this : *this;
}

// -----------------------------------------------------------------------------
// Name: Path::IsEmpty
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::IsEmpty() const
{
    return path_.empty();
}

// -----------------------------------------------------------------------------
// Name: Path::IsAbsolute
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::IsAbsolute() const
{
    return path_.is_absolute();
}

// -----------------------------------------------------------------------------
// Name: Path::IsRelative
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::IsRelative() const
{
    return path_.is_relative();
}

// -----------------------------------------------------------------------------
// Name: Path::HasFilename
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::HasFilename() const
{
    return path_.has_filename();
}

// -----------------------------------------------------------------------------
// Name: Path::HasExtension
// Created: ABR 2013-02-22
// -----------------------------------------------------------------------------
bool Path::HasExtension() const
{
    return path_.has_extension();
}

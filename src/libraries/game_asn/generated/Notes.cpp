/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 12-Feb-2010.
 */
#include "Notes.h"

/**************************************************************/
/*                                                            */
/*  NotesIncludes                                             */
/*                                                            */
/**************************************************************/

ASN1C_NotesIncludes::ASN1C_NotesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_NotesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_NotesIncludes (ASN1CTXT* ctxt_p, ASN1T_NotesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_NotesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_NotesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_NotesIncludes (ASN1CTXT* ctxt_p, ASN1T_NotesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_NotesIncludes::Decode ()
{
   return asn1PD_NotesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  NotesExports                                              */
/*                                                            */
/**************************************************************/

ASN1C_NotesExports::ASN1C_NotesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_NotesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_NotesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_NotesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_NotesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_NotesExports::Decode ()
{
   return asn1PD_NotesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Note                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Note::ASN1C_Note (
   ASN1MessageBuffer& msgBuf, ASN1T_Note& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Note (ASN1CTXT* ctxt_p, ASN1T_Note* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode number */

   stat = pe_VisibleString (ctxt_p, pvalue->number, 0);
   if (stat != ASN_OK) return stat;

   /* encode description */

   stat = pe_VisibleString (ctxt_p, pvalue->description, 0);
   if (stat != ASN_OK) return stat;

   /* encode parent */

   stat = asn1PE_OID (ctxt_p, pvalue->parent);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Note::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Note (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Note (ASN1CTXT* ctxt_p, ASN1T_Note* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode number */

   stat = pd_VisibleString (ctxt_p, &pvalue->number, 0);
   if (stat != ASN_OK) return stat;

   /* decode description */

   stat = pd_VisibleString (ctxt_p, &pvalue->description, 0);
   if (stat != ASN_OK) return stat;

   /* decode parent */

   stat = asn1PD_OID (ctxt_p, &pvalue->parent);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_Note::Decode ()
{
   return asn1PD_Note (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteCreation::ASN1C_MsgNoteCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteCreation (ASN1CTXT* ctxt_p, ASN1T_MsgNoteCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode id */

   stat = asn1PE_OID (ctxt_p, pvalue->id);
   if (stat != ASN_OK) return stat;

   /* encode note */

   stat = asn1PE_Note (ctxt_p, &pvalue->note);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgNoteCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteCreation (ASN1CTXT* ctxt_p, ASN1T_MsgNoteCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode id */

   stat = asn1PD_OID (ctxt_p, &pvalue->id);
   if (stat != ASN_OK) return stat;

   /* decode note */

   stat = asn1PD_Note (ctxt_p, &pvalue->note);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgNoteCreation::Decode ()
{
   return asn1PD_MsgNoteCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteUpdate                                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteUpdate::ASN1C_MsgNoteUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgNoteUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.numberPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.descriptionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.parentPresent);

   /* encode id */

   stat = asn1PE_OID (ctxt_p, pvalue->id);
   if (stat != ASN_OK) return stat;

   /* encode name */

   if (pvalue->m.namePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode number */

   if (pvalue->m.numberPresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->number, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode description */

   if (pvalue->m.descriptionPresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->description, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode parent */

   if (pvalue->m.parentPresent) {
      stat = asn1PE_OID (ctxt_p, pvalue->parent);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgNoteUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgNoteUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.namePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.numberPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.descriptionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.parentPresent = optbit;

   /* decode id */

   stat = asn1PD_OID (ctxt_p, &pvalue->id);
   if (stat != ASN_OK) return stat;

   /* decode name */

   if (pvalue->m.namePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode number */

   if (pvalue->m.numberPresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->number, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode description */

   if (pvalue->m.descriptionPresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->description, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode parent */

   if (pvalue->m.parentPresent) {
      stat = asn1PD_OID (ctxt_p, &pvalue->parent);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgNoteUpdate::Decode ()
{
   return asn1PD_MsgNoteUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteDestruction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteDestruction::ASN1C_MsgNoteDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgNoteDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode id */

   stat = asn1PE_OID (ctxt_p, pvalue->id);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgNoteDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgNoteDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode id */

   stat = asn1PD_OID (ctxt_p, &pvalue->id);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgNoteDestruction::Decode ()
{
   return asn1PD_MsgNoteDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteCreationRequest                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteCreationRequest::ASN1C_MsgNoteCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode note */

   stat = asn1PE_Note (ctxt_p, &pvalue->note);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgNoteCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode note */

   stat = asn1PD_Note (ctxt_p, &pvalue->note);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgNoteCreationRequest::Decode ()
{
   return asn1PD_MsgNoteCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteUpdateRequest                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteUpdateRequest::ASN1C_MsgNoteUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.numberPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.descriptionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.parentPresent);

   /* encode id */

   stat = asn1PE_OID (ctxt_p, pvalue->id);
   if (stat != ASN_OK) return stat;

   /* encode name */

   if (pvalue->m.namePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode number */

   if (pvalue->m.numberPresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->number, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode description */

   if (pvalue->m.descriptionPresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->description, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode parent */

   if (pvalue->m.parentPresent) {
      stat = asn1PE_OID (ctxt_p, pvalue->parent);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgNoteUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteUpdateRequest* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.namePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.numberPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.descriptionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.parentPresent = optbit;

   /* decode id */

   stat = asn1PD_OID (ctxt_p, &pvalue->id);
   if (stat != ASN_OK) return stat;

   /* decode name */

   if (pvalue->m.namePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode number */

   if (pvalue->m.numberPresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->number, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode description */

   if (pvalue->m.descriptionPresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->description, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode parent */

   if (pvalue->m.parentPresent) {
      stat = asn1PD_OID (ctxt_p, &pvalue->parent);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgNoteUpdateRequest::Decode ()
{
   return asn1PD_MsgNoteUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgNoteDestructionRequest                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgNoteDestructionRequest::ASN1C_MsgNoteDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgNoteDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgNoteDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode id */

   stat = asn1PE_OID (ctxt_p, pvalue->id);
   if (stat != ASN_OK) return stat;

   /* encode deleteAll */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->deleteAll);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgNoteDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgNoteDestructionRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgNoteDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgNoteDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode id */

   stat = asn1PD_OID (ctxt_p, &pvalue->id);
   if (stat != ASN_OK) return stat;

   /* decode deleteAll */

   stat = pd_bit (ctxt_p, &pvalue->deleteAll);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgNoteDestructionRequest::Decode ()
{
   return asn1PD_MsgNoteDestructionRequest (mpContext->GetPtr(), &msgData);
}


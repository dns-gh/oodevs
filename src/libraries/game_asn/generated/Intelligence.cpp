/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 06-Jan-2010.
 */
#include "Intelligence.h"

/**************************************************************/
/*                                                            */
/*  IntelligenceIncludes                                      */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceIncludes::ASN1C_IntelligenceIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_IntelligenceIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IntelligenceIncludes (ASN1CTXT* ctxt_p, ASN1T_IntelligenceIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode armyExports */

   stat = asn1PE_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_IntelligenceIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IntelligenceIncludes (ASN1CTXT* ctxt_p, ASN1T_IntelligenceIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode armyExports */

   stat = asn1PD_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_IntelligenceIncludes::Decode ()
{
   return asn1PD_IntelligenceIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  IntelligenceExports                                       */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceExports::ASN1C_IntelligenceExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_IntelligenceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_IntelligenceExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_IntelligenceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_IntelligenceExports::Decode ()
{
   return asn1PD_IntelligenceExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  Intelligence                                              */
/*                                                            */
/**************************************************************/

ASN1C_Intelligence::ASN1C_Intelligence (
   ASN1MessageBuffer& msgBuf, ASN1T_Intelligence& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Intelligence (ASN1CTXT* ctxt_p, ASN1T_Intelligence* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode nature */

   stat = pe_VisibleString (ctxt_p, pvalue->nature, 0);
   if (stat != ASN_OK) return stat;

   /* encode level */

   stat = asn1PE_EnumNatureLevel (ctxt_p, pvalue->level);
   if (stat != ASN_OK) return stat;

   /* encode embarked */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarked);
   if (stat != ASN_OK) return stat;

   /* encode location */

   stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* encode diplomacy */

   stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomacy);
   if (stat != ASN_OK) return stat;

   /* encode formation */

   stat = asn1PE_Formation (ctxt_p, pvalue->formation);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Intelligence::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Intelligence (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Intelligence (ASN1CTXT* ctxt_p, ASN1T_Intelligence* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode nature */

   stat = pd_VisibleString (ctxt_p, &pvalue->nature, 0);
   if (stat != ASN_OK) return stat;

   /* decode level */

   stat = asn1PD_EnumNatureLevel (ctxt_p, &pvalue->level);
   if (stat != ASN_OK) return stat;

   /* decode embarked */

   stat = pd_bit (ctxt_p, &pvalue->embarked);
   if (stat != ASN_OK) return stat;

   /* decode location */

   stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* decode diplomacy */

   stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomacy);
   if (stat != ASN_OK) return stat;

   /* decode formation */

   stat = asn1PD_Formation (ctxt_p, &pvalue->formation);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_Intelligence::Decode ()
{
   return asn1PD_Intelligence (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  IntelligenceList                                          */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceList::ASN1C_IntelligenceList (
   ASN1MessageBuffer& msgBuf, ASN1T_IntelligenceList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IntelligenceList (ASN1CTXT* ctxt_p, ASN1T_IntelligenceList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Intelligence (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_IntelligenceList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IntelligenceList (ASN1CTXT* ctxt_p, ASN1T_IntelligenceList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Intelligence);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Intelligence (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_IntelligenceList::Decode ()
{
   return asn1PD_IntelligenceList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreation                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreation::ASN1C_MsgIntelligenceCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreation (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode intelligence */

   stat = asn1PE_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreation (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode intelligence */

   stat = asn1PD_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceCreation::Decode ()
{
   return asn1PD_MsgIntelligenceCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceUpdate                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceUpdate::ASN1C_MsgIntelligenceUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.formationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.naturePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.levelPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.embarkedPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.locationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.diplomacyPresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode formation */

   if (pvalue->m.formationPresent) {
      stat = asn1PE_Formation (ctxt_p, pvalue->formation);
      if (stat != ASN_OK) return stat;
   }

   /* encode name */

   if (pvalue->m.namePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode nature */

   if (pvalue->m.naturePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->nature, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode level */

   if (pvalue->m.levelPresent) {
      stat = asn1PE_EnumNatureLevel (ctxt_p, pvalue->level);
      if (stat != ASN_OK) return stat;
   }

   /* encode embarked */

   if (pvalue->m.embarkedPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarked);
      if (stat != ASN_OK) return stat;
   }

   /* encode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* encode diplomacy */

   if (pvalue->m.diplomacyPresent) {
      stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomacy);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgIntelligenceUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.formationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.namePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.naturePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.levelPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.embarkedPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.locationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.diplomacyPresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode formation */

   if (pvalue->m.formationPresent) {
      stat = asn1PD_Formation (ctxt_p, &pvalue->formation);
      if (stat != ASN_OK) return stat;
   }

   /* decode name */

   if (pvalue->m.namePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode nature */

   if (pvalue->m.naturePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->nature, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode level */

   if (pvalue->m.levelPresent) {
      stat = asn1PD_EnumNatureLevel (ctxt_p, &pvalue->level);
      if (stat != ASN_OK) return stat;
   }

   /* decode embarked */

   if (pvalue->m.embarkedPresent) {
      stat = pd_bit (ctxt_p, &pvalue->embarked);
      if (stat != ASN_OK) return stat;
   }

   /* decode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* decode diplomacy */

   if (pvalue->m.diplomacyPresent) {
      stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomacy);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgIntelligenceUpdate::Decode ()
{
   return asn1PD_MsgIntelligenceUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestruction                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestruction::ASN1C_MsgIntelligenceDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceDestruction::Decode ()
{
   return asn1PD_MsgIntelligenceDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreationRequest                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreationRequest::ASN1C_MsgIntelligenceCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode intelligence */

   stat = asn1PE_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode intelligence */

   stat = asn1PD_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequest::Decode ()
{
   return asn1PD_MsgIntelligenceCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceUpdateRequest                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceUpdateRequest::ASN1C_MsgIntelligenceUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.formationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.naturePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.levelPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.embarkedPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.locationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.diplomacyPresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode formation */

   if (pvalue->m.formationPresent) {
      stat = asn1PE_Formation (ctxt_p, pvalue->formation);
      if (stat != ASN_OK) return stat;
   }

   /* encode name */

   if (pvalue->m.namePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode nature */

   if (pvalue->m.naturePresent) {
      stat = pe_VisibleString (ctxt_p, pvalue->nature, 0);
      if (stat != ASN_OK) return stat;
   }

   /* encode level */

   if (pvalue->m.levelPresent) {
      stat = asn1PE_EnumNatureLevel (ctxt_p, pvalue->level);
      if (stat != ASN_OK) return stat;
   }

   /* encode embarked */

   if (pvalue->m.embarkedPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarked);
      if (stat != ASN_OK) return stat;
   }

   /* encode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* encode diplomacy */

   if (pvalue->m.diplomacyPresent) {
      stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomacy);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgIntelligenceUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdateRequest* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.formationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.namePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.naturePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.levelPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.embarkedPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.locationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.diplomacyPresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode formation */

   if (pvalue->m.formationPresent) {
      stat = asn1PD_Formation (ctxt_p, &pvalue->formation);
      if (stat != ASN_OK) return stat;
   }

   /* decode name */

   if (pvalue->m.namePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode nature */

   if (pvalue->m.naturePresent) {
      stat = pd_VisibleString (ctxt_p, &pvalue->nature, 0);
      if (stat != ASN_OK) return stat;
   }

   /* decode level */

   if (pvalue->m.levelPresent) {
      stat = asn1PD_EnumNatureLevel (ctxt_p, &pvalue->level);
      if (stat != ASN_OK) return stat;
   }

   /* decode embarked */

   if (pvalue->m.embarkedPresent) {
      stat = pd_bit (ctxt_p, &pvalue->embarked);
      if (stat != ASN_OK) return stat;
   }

   /* decode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* decode diplomacy */

   if (pvalue->m.diplomacyPresent) {
      stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomacy);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgIntelligenceUpdateRequest::Decode ()
{
   return asn1PD_MsgIntelligenceUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestructionRequest                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestructionRequest::ASN1C_MsgIntelligenceDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestructionRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequest::Decode ()
{
   return asn1PD_MsgIntelligenceDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumIntelligenceErrorCode                                 */
/*                                                            */
/**************************************************************/

ASN1C_EnumIntelligenceErrorCode::ASN1C_EnumIntelligenceErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumIntelligenceErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumIntelligenceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumIntelligenceErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumIntelligenceErrorCode::no_error: ui = 0; break;
      case EnumIntelligenceErrorCode::error_invalid_oid: ui = 1; break;
      case EnumIntelligenceErrorCode::error_invalid_geometry: ui = 2; break;
      case EnumIntelligenceErrorCode::error_invalid_formation: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumIntelligenceErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumIntelligenceErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumIntelligenceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumIntelligenceErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumIntelligenceErrorCode::no_error; break;
      case 1: *pvalue = EnumIntelligenceErrorCode::error_invalid_oid; break;
      case 2: *pvalue = EnumIntelligenceErrorCode::error_invalid_geometry; break;
      case 3: *pvalue = EnumIntelligenceErrorCode::error_invalid_formation; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumIntelligenceErrorCode::Decode ()
{
   return asn1PD_EnumIntelligenceErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreationRequestAck                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreationRequestAck::ASN1C_MsgIntelligenceCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumIntelligenceErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumIntelligenceErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequestAck::Decode ()
{
   return asn1PD_MsgIntelligenceCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceUpdateRequestAck                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceUpdateRequestAck::ASN1C_MsgIntelligenceUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdateRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumIntelligenceErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgIntelligenceUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceUpdateRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumIntelligenceErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceUpdateRequestAck::Decode ()
{
   return asn1PD_MsgIntelligenceUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestructionRequestAck                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestructionRequestAck::ASN1C_MsgIntelligenceDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumIntelligenceErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestructionRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumIntelligenceErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequestAck::Decode ()
{
   return asn1PD_MsgIntelligenceDestructionRequestAck (mpContext->GetPtr(), &msgData);
}


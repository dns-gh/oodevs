/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 22-Oct-2007.
 */
#include "Intelligence.h"

/**************************************************************/
/*                                                            */
/*  IntelligenceIncludes                                      */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceIncludes::ASN1C_IntelligenceIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_IntelligenceIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IntelligenceIncludes (ASN1CTXT* ctxt_p, ASN1T_IntelligenceIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode armyExports */

   stat = asn1PE_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_IntelligenceIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IntelligenceIncludes (ASN1CTXT* ctxt_p, ASN1T_IntelligenceIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode armyExports */

   stat = asn1PD_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_IntelligenceIncludes::Decode ()
{
   return asn1PD_IntelligenceIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  IntelligenceExports                                       */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceExports::ASN1C_IntelligenceExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_IntelligenceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_IntelligenceExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_IntelligenceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_IntelligenceExports::Decode ()
{
   return asn1PD_IntelligenceExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  IntelligenceDiffusion                                     */
/*                                                            */
/**************************************************************/

ASN1C_IntelligenceDiffusion::ASN1C_IntelligenceDiffusion (
   ASN1MessageBuffer& msgBuf, ASN1T_IntelligenceDiffusion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_IntelligenceDiffusion (ASN1CTXT* ctxt_p, ASN1T_IntelligenceDiffusion* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* formation */
      case 1:
         stat = asn1PE_Formation (ctxt_p, pvalue->u.formation);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_IntelligenceDiffusion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_IntelligenceDiffusion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_IntelligenceDiffusion (ASN1CTXT* ctxt_p, ASN1T_IntelligenceDiffusion* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* formation */
      case 0:
         stat = asn1PD_Formation (ctxt_p, &pvalue->u.formation);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_IntelligenceDiffusion::Decode ()
{
   return asn1PD_IntelligenceDiffusion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Intelligence                                              */
/*                                                            */
/**************************************************************/

ASN1C_Intelligence::ASN1C_Intelligence (
   ASN1MessageBuffer& msgBuf, ASN1T_Intelligence& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Intelligence (ASN1CTXT* ctxt_p, ASN1T_Intelligence* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode nature */

   stat = pe_VisibleString (ctxt_p, pvalue->nature, 0);
   if (stat != ASN_OK) return stat;

   /* encode level */

   stat = asn1PE_EnumNatureLevel (ctxt_p, pvalue->level);
   if (stat != ASN_OK) return stat;

   /* encode embarked */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarked);
   if (stat != ASN_OK) return stat;

   /* encode location */

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->location);
   if (stat != ASN_OK) return stat;

   /* encode diffusion */

   stat = asn1PE_IntelligenceDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;

   /* encode diplomacy */

   stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomacy);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Intelligence::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Intelligence (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Intelligence (ASN1CTXT* ctxt_p, ASN1T_Intelligence* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode nature */

   stat = pd_VisibleString (ctxt_p, &pvalue->nature, 0);
   if (stat != ASN_OK) return stat;

   /* decode level */

   stat = asn1PD_EnumNatureLevel (ctxt_p, &pvalue->level);
   if (stat != ASN_OK) return stat;

   /* decode embarked */

   stat = pd_bit (ctxt_p, &pvalue->embarked);
   if (stat != ASN_OK) return stat;

   /* decode location */

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* decode diffusion */

   stat = asn1PD_IntelligenceDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;

   /* decode diplomacy */

   stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomacy);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_Intelligence::Decode ()
{
   return asn1PD_Intelligence (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreation                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreation::ASN1C_MsgIntelligenceCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreation (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode intelligence */

   stat = asn1PE_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreation (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode intelligence */

   stat = asn1PD_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceCreation::Decode ()
{
   return asn1PD_MsgIntelligenceCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestruction                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestruction::ASN1C_MsgIntelligenceDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceDestruction::Decode ()
{
   return asn1PD_MsgIntelligenceDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreationRequest                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreationRequest::ASN1C_MsgIntelligenceCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode intelligence */

   stat = asn1PE_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode intelligence */

   stat = asn1PD_Intelligence (ctxt_p, &pvalue->intelligence);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequest::Decode ()
{
   return asn1PD_MsgIntelligenceCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestructionRequest                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestructionRequest::ASN1C_MsgIntelligenceDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode diffusion */

   stat = asn1PE_IntelligenceDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestructionRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode diffusion */

   stat = asn1PD_IntelligenceDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequest::Decode ()
{
   return asn1PD_MsgIntelligenceDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumIntelligenceErrorCode                                 */
/*                                                            */
/**************************************************************/

ASN1C_EnumIntelligenceErrorCode::ASN1C_EnumIntelligenceErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumIntelligenceErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumIntelligenceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumIntelligenceErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumIntelligenceErrorCode::no_error: ui = 0; break;
      case EnumIntelligenceErrorCode::error_invalid_oid: ui = 1; break;
      case EnumIntelligenceErrorCode::error_invalid_geometry: ui = 2; break;
      case EnumIntelligenceErrorCode::error_invalid_diffusion: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumIntelligenceErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumIntelligenceErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumIntelligenceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumIntelligenceErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumIntelligenceErrorCode::no_error; break;
      case 1: *pvalue = EnumIntelligenceErrorCode::error_invalid_oid; break;
      case 2: *pvalue = EnumIntelligenceErrorCode::error_invalid_geometry; break;
      case 3: *pvalue = EnumIntelligenceErrorCode::error_invalid_diffusion; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumIntelligenceErrorCode::Decode ()
{
   return asn1PD_EnumIntelligenceErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceCreationRequestAck                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceCreationRequestAck::ASN1C_MsgIntelligenceCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   /* encode error_code */

   stat = asn1PE_EnumIntelligenceErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceCreationRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   /* decode error_code */

   stat = asn1PD_EnumIntelligenceErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceCreationRequestAck::Decode ()
{
   return asn1PD_MsgIntelligenceCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIntelligenceDestructionRequestAck                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgIntelligenceDestructionRequestAck::ASN1C_MsgIntelligenceDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIntelligenceDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIntelligenceDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   /* encode error_code */

   stat = asn1PE_EnumIntelligenceErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIntelligenceDestructionRequestAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIntelligenceDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgIntelligenceDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   /* decode error_code */

   stat = asn1PD_EnumIntelligenceErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIntelligenceDestructionRequestAck::Decode ()
{
   return asn1PD_MsgIntelligenceDestructionRequestAck (mpContext->GetPtr(), &msgData);
}


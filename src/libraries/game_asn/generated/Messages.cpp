/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 13-Feb-2008.
 */
#include "Messages.h"

/**************************************************************/
/*                                                            */
/*  MessagesIncludes                                          */
/*                                                            */
/**************************************************************/

ASN1C_MessagesIncludes::ASN1C_MessagesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_MessagesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_MessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode limaLimiteExports */

   stat = asn1PE_LimaLimiteExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode orderExports */

   stat = asn1PE_OrderExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode controlExports */

   stat = asn1PE_ControlExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode knowledgeGroupExports */

   stat = asn1PE_KnowledgeGroupExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode formationExports */

   stat = asn1PE_FormationExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode fireExports */

   stat = asn1PE_FireExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode unitExports */

   stat = asn1PE_UnitExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode unitKnowledgeExports */

   stat = asn1PE_UnitKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode objectExports */

   stat = asn1PE_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode objectKnowledgeExports */

   stat = asn1PE_ObjectKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode populationExports */

   stat = asn1PE_PopulationExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode populationKnowledgeExports */

   stat = asn1PE_PopulationKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode logMaintenanceExports */

   stat = asn1PE_LogMaintenanceExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode logRavitaillementExports */

   stat = asn1PE_LogRavitaillementExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode logSanteExports */

   stat = asn1PE_LogSanteExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode automateExports */

   stat = asn1PE_AutomateExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode armyExports */

   stat = asn1PE_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode authExports */

   stat = asn1PE_AuthExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode folkExports */

   stat = asn1PE_FolkExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode aarExports */

   stat = asn1PE_AarExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode intelligenceExports */

   stat = asn1PE_IntelligenceExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MessagesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MessagesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_MessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode limaLimiteExports */

   stat = asn1PD_LimaLimiteExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode orderExports */

   stat = asn1PD_OrderExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode controlExports */

   stat = asn1PD_ControlExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode knowledgeGroupExports */

   stat = asn1PD_KnowledgeGroupExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode formationExports */

   stat = asn1PD_FormationExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode fireExports */

   stat = asn1PD_FireExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode unitExports */

   stat = asn1PD_UnitExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode unitKnowledgeExports */

   stat = asn1PD_UnitKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode objectExports */

   stat = asn1PD_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode objectKnowledgeExports */

   stat = asn1PD_ObjectKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode populationExports */

   stat = asn1PD_PopulationExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode populationKnowledgeExports */

   stat = asn1PD_PopulationKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode logMaintenanceExports */

   stat = asn1PD_LogMaintenanceExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode logRavitaillementExports */

   stat = asn1PD_LogRavitaillementExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode logSanteExports */

   stat = asn1PD_LogSanteExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode automateExports */

   stat = asn1PD_AutomateExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode armyExports */

   stat = asn1PD_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode authExports */

   stat = asn1PD_AuthExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode folkExports */

   stat = asn1PD_FolkExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode aarExports */

   stat = asn1PD_AarExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode intelligenceExports */

   stat = asn1PD_IntelligenceExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MessagesIncludes::Decode ()
{
   return asn1PD_MessagesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MessagesExports                                           */
/*                                                            */
/**************************************************************/

ASN1C_MessagesExports::ASN1C_MessagesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MessagesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MessagesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MessagesExports::Decode ()
{
   return asn1PD_MessagesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgsSimToClient_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimToClient_msg::ASN1C_MsgsSimToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 125);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_limit_creation_request_ack */
      case 1:
         stat = asn1PE_MsgLimitCreationRequestAck (ctxt_p, pvalue->u.msg_limit_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_destruction_request_ack */
      case 2:
         stat = asn1PE_MsgLimitDestructionRequestAck (ctxt_p, pvalue->u.msg_limit_destruction_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_update_request_ack */
      case 3:
         stat = asn1PE_MsgLimitUpdateRequestAck (ctxt_p, pvalue->u.msg_limit_update_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_creation_request_ack */
      case 4:
         stat = asn1PE_MsgLimaCreationRequestAck (ctxt_p, pvalue->u.msg_lima_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_destruction_request_ack */
      case 5:
         stat = asn1PE_MsgLimaDestructionRequestAck (ctxt_p, pvalue->u.msg_lima_destruction_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_update_request_ack */
      case 6:
         stat = asn1PE_MsgLimaUpdateRequestAck (ctxt_p, pvalue->u.msg_lima_update_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_creation_request_ack */
      case 7:
         stat = asn1PE_MsgIntelligenceCreationRequestAck (ctxt_p, pvalue->u.msg_intelligence_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_update_request_ack */
      case 8:
         stat = asn1PE_MsgIntelligenceUpdateRequestAck (ctxt_p, pvalue->u.msg_intelligence_update_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_destruction_request_ack */
      case 9:
         stat = asn1PE_MsgIntelligenceDestructionRequestAck (ctxt_p, pvalue->u.msg_intelligence_destruction_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_order_ack */
      case 10:
         stat = asn1PE_MsgUnitOrderAck (ctxt_p, pvalue->u.msg_unit_order_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_order_ack */
      case 11:
         stat = asn1PE_MsgAutomatOrderAck (ctxt_p, pvalue->u.msg_automat_order_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_order_ack */
      case 12:
         stat = asn1PE_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_frag_order_ack */
      case 13:
         stat = asn1PE_MsgFragOrderAck (ctxt_p, pvalue->u.msg_frag_order_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_set_automat_mode_ack */
      case 14:
         stat = asn1PE_MsgSetAutomatModeAck (ctxt_p, pvalue->u.msg_set_automat_mode_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_creation_request_ack */
      case 15:
         stat = asn1PE_MsgUnitCreationRequestAck (ctxt_p, pvalue->u.msg_unit_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_magic_action_ack */
      case 16:
         stat = asn1PE_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_magic_action_ack */
      case 17:
         stat = asn1PE_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_magic_action_ack */
      case 18:
         stat = asn1PE_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_change_diplomacy_ack */
      case 19:
         stat = asn1PE_MsgChangeDiplomacyAck (ctxt_p, pvalue->u.msg_change_diplomacy_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_knowledge_group_ack */
      case 20:
         stat = asn1PE_MsgAutomatChangeKnowledgeGroupAck (ctxt_p, pvalue->u.msg_automat_change_knowledge_group_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_logistic_links_ack */
      case 21:
         stat = asn1PE_MsgAutomatChangeLogisticLinksAck (ctxt_p, pvalue->u.msg_automat_change_logistic_links_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_superior_ack */
      case 22:
         stat = asn1PE_MsgAutomatChangeSuperiorAck (ctxt_p, pvalue->u.msg_automat_change_superior_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_change_superior_ack */
      case 23:
         stat = asn1PE_MsgUnitChangeSuperiorAck (ctxt_p, pvalue->u.msg_unit_change_superior_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_push_flow_ack */
      case 24:
         stat = asn1PE_MsgLogSupplyPushFlowAck (ctxt_p, pvalue->u.msg_log_supply_push_flow_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_change_quotas_ack */
      case 25:
         stat = asn1PE_MsgLogSupplyChangeQuotasAck (ctxt_p, pvalue->u.msg_log_supply_change_quotas_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_information */
      case 26:
         stat = asn1PE_MsgControlInformation (ctxt_p, pvalue->u.msg_control_information);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_profiling_information */
      case 27:
         stat = asn1PE_MsgControlProfilingInformation (ctxt_p, pvalue->u.msg_control_profiling_information);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_begin_tick */
      case 28:
         stat = asn1PE_MsgControlBeginTick (ctxt_p, pvalue->u.msg_control_begin_tick);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_end_tick */
      case 29:
         stat = asn1PE_MsgControlEndTick (ctxt_p, pvalue->u.msg_control_end_tick);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_stop_ack */
      case 30:
         stat = asn1PE_MsgControlStopAck (ctxt_p, pvalue->u.msg_control_stop_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_pause_ack */
      case 31:
         stat = asn1PE_MsgControlPauseAck (ctxt_p, pvalue->u.msg_control_pause_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_resume_ack */
      case 32:
         stat = asn1PE_MsgControlResumeAck (ctxt_p, pvalue->u.msg_control_resume_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_change_time_factor_ack */
      case 33:
         stat = asn1PE_MsgControlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_control_change_time_factor_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_global_meteo_ack */
      case 34:
         stat = asn1PE_MsgControlGlobalMeteoAck (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_local_meteo_ack */
      case 35:
         stat = asn1PE_MsgControlLocalMeteoAck (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_save_begin */
      case 36:
         stat = asn1PE_MsgControlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_save_end */
      case 37:
         stat = asn1PE_MsgControlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_set_frequency_ack */
      case 38:
         stat = asn1PE_MsgControlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_save_now_ack */
      case 39:
         stat = asn1PE_MsgControlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_send_current_state_begin */
      case 40:
         stat = asn1PE_MsgControlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_send_current_state_end */
      case 41:
         stat = asn1PE_MsgControlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_creation */
      case 42:
         stat = asn1PE_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_update */
      case 43:
         stat = asn1PE_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_destruction */
      case 44:
         stat = asn1PE_MsgLimitDestruction (ctxt_p, pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_creation */
      case 45:
         stat = asn1PE_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_update */
      case 46:
         stat = asn1PE_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_destruction */
      case 47:
         stat = asn1PE_MsgLimaDestruction (ctxt_p, pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_formation_creation */
      case 48:
         stat = asn1PE_MsgFormationCreation (ctxt_p, pvalue->u.msg_formation_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_knowledge_group_creation */
      case 49:
         stat = asn1PE_MsgKnowledgeGroupCreation (ctxt_p, pvalue->u.msg_knowledge_group_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_side_creation */
      case 50:
         stat = asn1PE_MsgTeamCreation (ctxt_p, pvalue->u.msg_side_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_creation */
      case 51:
         stat = asn1PE_MsgAutomatCreation (ctxt_p, pvalue->u.msg_automat_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_attributes */
      case 52:
         stat = asn1PE_MsgAutomatAttributes (ctxt_p, pvalue->u.msg_automat_attributes);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_creation */
      case 53:
         stat = asn1PE_MsgUnitCreation (ctxt_p, pvalue->u.msg_unit_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_attributes */
      case 54:
         stat = asn1PE_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_pathfind */
      case 55:
         stat = asn1PE_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_destruction */
      case 56:
         stat = asn1PE_MsgUnitDestruction (ctxt_p, pvalue->u.msg_unit_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_environment_type */
      case 57:
         stat = asn1PE_MsgUnitEnvironmentType (ctxt_p, pvalue->u.msg_unit_environment_type);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_change_diplomacy */
      case 58:
         stat = asn1PE_MsgChangeDiplomacy (ctxt_p, pvalue->u.msg_change_diplomacy);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_change_superior */
      case 59:
         stat = asn1PE_MsgUnitChangeSuperior (ctxt_p, pvalue->u.msg_unit_change_superior);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_logistic_links */
      case 60:
         stat = asn1PE_MsgAutomatChangeLogisticLinks (ctxt_p, pvalue->u.msg_automat_change_logistic_links);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_knowledge_group */
      case 61:
         stat = asn1PE_MsgAutomatChangeKnowledgeGroup (ctxt_p, pvalue->u.msg_automat_change_knowledge_group);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_superior */
      case 62:
         stat = asn1PE_MsgAutomatChangeSuperior (ctxt_p, pvalue->u.msg_automat_change_superior);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_knowledge_creation */
      case 63:
         stat = asn1PE_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_knowledge_update */
      case 64:
         stat = asn1PE_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_knowledge_destruction */
      case 65:
         stat = asn1PE_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_start_unit_fire */
      case 66:
         stat = asn1PE_MsgStartUnitFire (ctxt_p, pvalue->u.msg_start_unit_fire);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_stop_unit_fire */
      case 67:
         stat = asn1PE_MsgStopUnitFire (ctxt_p, pvalue->u.msg_stop_unit_fire);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_start_population_fire */
      case 68:
         stat = asn1PE_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_stop_population_fire */
      case 69:
         stat = asn1PE_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_explosion */
      case 70:
         stat = asn1PE_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_start_fire_effect */
      case 71:
         stat = asn1PE_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_stop_fire_effect */
      case 72:
         stat = asn1PE_MsgStopFireEffect (ctxt_p, pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_report */
      case 73:
         stat = asn1PE_MsgReport (ctxt_p, pvalue->u.msg_report);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_invalidate_report */
      case 74:
         stat = asn1PE_MsgInvalidateReport (ctxt_p, pvalue->u.msg_invalidate_report);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_trace */
      case 75:
         stat = asn1PE_MsgTrace (ctxt_p, pvalue->u.msg_trace);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_decisional_state */
      case 76:
         stat = asn1PE_MsgDecisionalState (ctxt_p, pvalue->u.msg_decisional_state);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_debug_points */
      case 77:
         stat = asn1PE_MsgDebugPoints (ctxt_p, pvalue->u.msg_debug_points);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_vision_cones */
      case 78:
         stat = asn1PE_MsgUnitVisionCones (ctxt_p, pvalue->u.msg_unit_vision_cones);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_detection */
      case 79:
         stat = asn1PE_MsgUnitDetection (ctxt_p, pvalue->u.msg_unit_detection);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_detection */
      case 80:
         stat = asn1PE_MsgObjectDetection (ctxt_p, pvalue->u.msg_object_detection);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_detection */
      case 81:
         stat = asn1PE_MsgPopulationConcentrationDetection (ctxt_p, pvalue->u.msg_population_concentration_detection);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_detection */
      case 82:
         stat = asn1PE_MsgPopulationFlowDetection (ctxt_p, pvalue->u.msg_population_flow_detection);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_order */
      case 83:
         stat = asn1PE_MsgUnitOrder (ctxt_p, pvalue->u.msg_unit_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_order */
      case 84:
         stat = asn1PE_MsgAutomatOrder (ctxt_p, pvalue->u.msg_automat_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_order */
      case 85:
         stat = asn1PE_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_creation */
      case 86:
         stat = asn1PE_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_destruction */
      case 87:
         stat = asn1PE_MsgObjectDestruction (ctxt_p, pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_update */
      case 88:
         stat = asn1PE_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_knowledge_creation */
      case 89:
         stat = asn1PE_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_knowledge_update */
      case 90:
         stat = asn1PE_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_knowledge_destruction */
      case 91:
         stat = asn1PE_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_medical_handling_creation */
      case 92:
         stat = asn1PE_MsgLogMedicalHandlingCreation (ctxt_p, pvalue->u.msg_log_medical_handling_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_medical_handling_update */
      case 93:
         stat = asn1PE_MsgLogMedicalHandlingUpdate (ctxt_p, pvalue->u.msg_log_medical_handling_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_medical_handling_destruction */
      case 94:
         stat = asn1PE_MsgLogMedicalHandlingDestruction (ctxt_p, pvalue->u.msg_log_medical_handling_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_medical_state */
      case 95:
         stat = asn1PE_MsgLogMedicalState (ctxt_p, pvalue->u.msg_log_medical_state);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_maintenance_handling_creation */
      case 96:
         stat = asn1PE_MsgLogMaintenanceHandlingCreation (ctxt_p, pvalue->u.msg_log_maintenance_handling_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_maintenance_handling_update */
      case 97:
         stat = asn1PE_MsgLogMaintenanceHandlingUpdate (ctxt_p, pvalue->u.msg_log_maintenance_handling_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_maintenance_handling_destruction */
      case 98:
         stat = asn1PE_MsgLogMaintenanceHandlingDestruction (ctxt_p, pvalue->u.msg_log_maintenance_handling_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_maintenance_state */
      case 99:
         stat = asn1PE_MsgLogMaintenanceState (ctxt_p, pvalue->u.msg_log_maintenance_state);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_handling_creation */
      case 100:
         stat = asn1PE_MsgLogSupplyHandlingCreation (ctxt_p, pvalue->u.msg_log_supply_handling_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_handling_update */
      case 101:
         stat = asn1PE_MsgLogSupplyHandlingUpdate (ctxt_p, pvalue->u.msg_log_supply_handling_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_handling_destruction */
      case 102:
         stat = asn1PE_MsgLogSupplyHandlingDestruction (ctxt_p, pvalue->u.msg_log_supply_handling_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_state */
      case 103:
         stat = asn1PE_MsgLogSupplyState (ctxt_p, pvalue->u.msg_log_supply_state);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_quotas */
      case 104:
         stat = asn1PE_MsgLogSupplyQuotas (ctxt_p, pvalue->u.msg_log_supply_quotas);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_creation */
      case 105:
         stat = asn1PE_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_update */
      case 106:
         stat = asn1PE_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_creation */
      case 107:
         stat = asn1PE_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_destruction */
      case 108:
         stat = asn1PE_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_update */
      case 109:
         stat = asn1PE_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_creation */
      case 110:
         stat = asn1PE_MsgPopulationFlowCreation (ctxt_p, pvalue->u.msg_population_flow_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_destruction */
      case 111:
         stat = asn1PE_MsgPopulationFlowDestruction (ctxt_p, pvalue->u.msg_population_flow_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_update */
      case 112:
         stat = asn1PE_MsgPopulationFlowUpdate (ctxt_p, pvalue->u.msg_population_flow_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_knowledge_creation */
      case 113:
         stat = asn1PE_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_knowledge_update */
      case 114:
         stat = asn1PE_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_knowledge_destruction */
      case 115:
         stat = asn1PE_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_knowledge_creation */
      case 116:
         stat = asn1PE_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_knowledge_destruction */
      case 117:
         stat = asn1PE_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_concentration_knowledge_update */
      case 118:
         stat = asn1PE_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_knowledge_creation */
      case 119:
         stat = asn1PE_MsgPopulationFlowKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flow_knowledge_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_knowledge_destruction */
      case 120:
         stat = asn1PE_MsgPopulationFlowKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flow_knowledge_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_flow_knowledge_update */
      case 121:
         stat = asn1PE_MsgPopulationFlowKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flow_knowledge_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_folk_creation */
      case 122:
         stat = asn1PE_MsgFolkCreation (ctxt_p, pvalue->u.msg_folk_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_folk_graph_update */
      case 123:
         stat = asn1PE_MsgFolkGraphUpdate (ctxt_p, pvalue->u.msg_folk_graph_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_creation */
      case 124:
         stat = asn1PE_MsgIntelligenceCreation (ctxt_p, pvalue->u.msg_intelligence_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_update */
      case 125:
         stat = asn1PE_MsgIntelligenceUpdate (ctxt_p, pvalue->u.msg_intelligence_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_destruction */
      case 126:
         stat = asn1PE_MsgIntelligenceDestruction (ctxt_p, pvalue->u.msg_intelligence_destruction);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsSimToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 125);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_limit_creation_request_ack */
      case 0:
         stat = asn1PD_MsgLimitCreationRequestAck (ctxt_p, &pvalue->u.msg_limit_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_destruction_request_ack */
      case 1:
         stat = asn1PD_MsgLimitDestructionRequestAck (ctxt_p, &pvalue->u.msg_limit_destruction_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_update_request_ack */
      case 2:
         stat = asn1PD_MsgLimitUpdateRequestAck (ctxt_p, &pvalue->u.msg_limit_update_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_creation_request_ack */
      case 3:
         stat = asn1PD_MsgLimaCreationRequestAck (ctxt_p, &pvalue->u.msg_lima_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_destruction_request_ack */
      case 4:
         stat = asn1PD_MsgLimaDestructionRequestAck (ctxt_p, &pvalue->u.msg_lima_destruction_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_update_request_ack */
      case 5:
         stat = asn1PD_MsgLimaUpdateRequestAck (ctxt_p, &pvalue->u.msg_lima_update_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_creation_request_ack */
      case 6:
         pvalue->u.msg_intelligence_creation_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceCreationRequestAck);

         stat = asn1PD_MsgIntelligenceCreationRequestAck (ctxt_p, pvalue->u.msg_intelligence_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_update_request_ack */
      case 7:
         pvalue->u.msg_intelligence_update_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceUpdateRequestAck);

         stat = asn1PD_MsgIntelligenceUpdateRequestAck (ctxt_p, pvalue->u.msg_intelligence_update_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_destruction_request_ack */
      case 8:
         pvalue->u.msg_intelligence_destruction_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceDestructionRequestAck);

         stat = asn1PD_MsgIntelligenceDestructionRequestAck (ctxt_p, pvalue->u.msg_intelligence_destruction_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_order_ack */
      case 9:
         pvalue->u.msg_unit_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitOrderAck);

         stat = asn1PD_MsgUnitOrderAck (ctxt_p, pvalue->u.msg_unit_order_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_order_ack */
      case 10:
         pvalue->u.msg_automat_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatOrderAck);

         stat = asn1PD_MsgAutomatOrderAck (ctxt_p, pvalue->u.msg_automat_order_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_order_ack */
      case 11:
         pvalue->u.msg_population_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrderAck);

         stat = asn1PD_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_frag_order_ack */
      case 12:
         pvalue->u.msg_frag_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFragOrderAck);

         stat = asn1PD_MsgFragOrderAck (ctxt_p, pvalue->u.msg_frag_order_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_set_automat_mode_ack */
      case 13:
         pvalue->u.msg_set_automat_mode_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomatModeAck);

         stat = asn1PD_MsgSetAutomatModeAck (ctxt_p, pvalue->u.msg_set_automat_mode_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_creation_request_ack */
      case 14:
         stat = asn1PD_MsgUnitCreationRequestAck (ctxt_p, &pvalue->u.msg_unit_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_magic_action_ack */
      case 15:
         pvalue->u.msg_unit_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicActionAck);

         stat = asn1PD_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_magic_action_ack */
      case 16:
         pvalue->u.msg_object_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicActionAck);

         stat = asn1PD_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_magic_action_ack */
      case 17:
         pvalue->u.msg_population_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicActionAck);

         stat = asn1PD_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_change_diplomacy_ack */
      case 18:
         pvalue->u.msg_change_diplomacy_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomacyAck);

         stat = asn1PD_MsgChangeDiplomacyAck (ctxt_p, pvalue->u.msg_change_diplomacy_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_knowledge_group_ack */
      case 19:
         stat = asn1PD_MsgAutomatChangeKnowledgeGroupAck (ctxt_p, &pvalue->u.msg_automat_change_knowledge_group_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_logistic_links_ack */
      case 20:
         stat = asn1PD_MsgAutomatChangeLogisticLinksAck (ctxt_p, &pvalue->u.msg_automat_change_logistic_links_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_superior_ack */
      case 21:
         stat = asn1PD_MsgAutomatChangeSuperiorAck (ctxt_p, &pvalue->u.msg_automat_change_superior_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_change_superior_ack */
      case 22:
         stat = asn1PD_MsgUnitChangeSuperiorAck (ctxt_p, &pvalue->u.msg_unit_change_superior_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_push_flow_ack */
      case 23:
         stat = asn1PD_MsgLogSupplyPushFlowAck (ctxt_p, &pvalue->u.msg_log_supply_push_flow_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_change_quotas_ack */
      case 24:
         stat = asn1PD_MsgLogSupplyChangeQuotasAck (ctxt_p, &pvalue->u.msg_log_supply_change_quotas_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_information */
      case 25:
         pvalue->u.msg_control_information = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlInformation);

         stat = asn1PD_MsgControlInformation (ctxt_p, pvalue->u.msg_control_information);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_profiling_information */
      case 26:
         pvalue->u.msg_control_profiling_information = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlProfilingInformation);

         stat = asn1PD_MsgControlProfilingInformation (ctxt_p, pvalue->u.msg_control_profiling_information);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_begin_tick */
      case 27:
         pvalue->u.msg_control_begin_tick = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlBeginTick);

         stat = asn1PD_MsgControlBeginTick (ctxt_p, pvalue->u.msg_control_begin_tick);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_end_tick */
      case 28:
         pvalue->u.msg_control_end_tick = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlEndTick);

         stat = asn1PD_MsgControlEndTick (ctxt_p, pvalue->u.msg_control_end_tick);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_stop_ack */
      case 29:
         stat = asn1PD_MsgControlStopAck (ctxt_p, &pvalue->u.msg_control_stop_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_pause_ack */
      case 30:
         stat = asn1PD_MsgControlPauseAck (ctxt_p, &pvalue->u.msg_control_pause_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_resume_ack */
      case 31:
         stat = asn1PD_MsgControlResumeAck (ctxt_p, &pvalue->u.msg_control_resume_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_change_time_factor_ack */
      case 32:
         pvalue->u.msg_control_change_time_factor_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlChangeTimeFactorAck);

         stat = asn1PD_MsgControlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_control_change_time_factor_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_global_meteo_ack */
      case 33:
         stat = asn1PD_MsgControlGlobalMeteoAck (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_local_meteo_ack */
      case 34:
         stat = asn1PD_MsgControlLocalMeteoAck (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_save_begin */
      case 35:
         stat = asn1PD_MsgControlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_save_end */
      case 36:
         stat = asn1PD_MsgControlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_set_frequency_ack */
      case 37:
         stat = asn1PD_MsgControlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_save_now_ack */
      case 38:
         stat = asn1PD_MsgControlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_send_current_state_begin */
      case 39:
         stat = asn1PD_MsgControlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_send_current_state_end */
      case 40:
         stat = asn1PD_MsgControlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_creation */
      case 41:
         pvalue->u.msg_limit_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreation);

         stat = asn1PD_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_update */
      case 42:
         pvalue->u.msg_limit_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdate);

         stat = asn1PD_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_destruction */
      case 43:
         stat = asn1PD_MsgLimitDestruction (ctxt_p, &pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_creation */
      case 44:
         pvalue->u.msg_lima_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreation);

         stat = asn1PD_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_update */
      case 45:
         pvalue->u.msg_lima_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdate);

         stat = asn1PD_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_destruction */
      case 46:
         stat = asn1PD_MsgLimaDestruction (ctxt_p, &pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_formation_creation */
      case 47:
         pvalue->u.msg_formation_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFormationCreation);

         stat = asn1PD_MsgFormationCreation (ctxt_p, pvalue->u.msg_formation_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_knowledge_group_creation */
      case 48:
         pvalue->u.msg_knowledge_group_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgKnowledgeGroupCreation);

         stat = asn1PD_MsgKnowledgeGroupCreation (ctxt_p, pvalue->u.msg_knowledge_group_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_side_creation */
      case 49:
         pvalue->u.msg_side_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgTeamCreation);

         stat = asn1PD_MsgTeamCreation (ctxt_p, pvalue->u.msg_side_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_creation */
      case 50:
         pvalue->u.msg_automat_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatCreation);

         stat = asn1PD_MsgAutomatCreation (ctxt_p, pvalue->u.msg_automat_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_attributes */
      case 51:
         pvalue->u.msg_automat_attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatAttributes);

         stat = asn1PD_MsgAutomatAttributes (ctxt_p, pvalue->u.msg_automat_attributes);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_creation */
      case 52:
         pvalue->u.msg_unit_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitCreation);

         stat = asn1PD_MsgUnitCreation (ctxt_p, pvalue->u.msg_unit_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_attributes */
      case 53:
         pvalue->u.msg_unit_attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitAttributes);

         stat = asn1PD_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_pathfind */
      case 54:
         pvalue->u.msg_unit_pathfind = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitPathFind);

         stat = asn1PD_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_destruction */
      case 55:
         stat = asn1PD_MsgUnitDestruction (ctxt_p, &pvalue->u.msg_unit_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_environment_type */
      case 56:
         pvalue->u.msg_unit_environment_type = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitEnvironmentType);

         stat = asn1PD_MsgUnitEnvironmentType (ctxt_p, pvalue->u.msg_unit_environment_type);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_change_diplomacy */
      case 57:
         pvalue->u.msg_change_diplomacy = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomacy);

         stat = asn1PD_MsgChangeDiplomacy (ctxt_p, pvalue->u.msg_change_diplomacy);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_change_superior */
      case 58:
         pvalue->u.msg_unit_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitChangeSuperior);

         stat = asn1PD_MsgUnitChangeSuperior (ctxt_p, pvalue->u.msg_unit_change_superior);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_logistic_links */
      case 59:
         pvalue->u.msg_automat_change_logistic_links = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeLogisticLinks);

         stat = asn1PD_MsgAutomatChangeLogisticLinks (ctxt_p, pvalue->u.msg_automat_change_logistic_links);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_knowledge_group */
      case 60:
         pvalue->u.msg_automat_change_knowledge_group = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroup);

         stat = asn1PD_MsgAutomatChangeKnowledgeGroup (ctxt_p, pvalue->u.msg_automat_change_knowledge_group);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_superior */
      case 61:
         pvalue->u.msg_automat_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeSuperior);

         stat = asn1PD_MsgAutomatChangeSuperior (ctxt_p, pvalue->u.msg_automat_change_superior);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_knowledge_creation */
      case 62:
         pvalue->u.msg_unit_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeCreation);

         stat = asn1PD_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_knowledge_update */
      case 63:
         pvalue->u.msg_unit_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeUpdate);

         stat = asn1PD_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_knowledge_destruction */
      case 64:
         pvalue->u.msg_unit_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeDestruction);

         stat = asn1PD_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_start_unit_fire */
      case 65:
         pvalue->u.msg_start_unit_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartUnitFire);

         stat = asn1PD_MsgStartUnitFire (ctxt_p, pvalue->u.msg_start_unit_fire);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_stop_unit_fire */
      case 66:
         pvalue->u.msg_stop_unit_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopUnitFire);

         stat = asn1PD_MsgStopUnitFire (ctxt_p, pvalue->u.msg_stop_unit_fire);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_start_population_fire */
      case 67:
         pvalue->u.msg_start_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartPopulationFire);

         stat = asn1PD_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_stop_population_fire */
      case 68:
         pvalue->u.msg_stop_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopPopulationFire);

         stat = asn1PD_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_explosion */
      case 69:
         pvalue->u.msg_explosion = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgExplosion);

         stat = asn1PD_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_start_fire_effect */
      case 70:
         pvalue->u.msg_start_fire_effect = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartFireEffect);

         stat = asn1PD_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_stop_fire_effect */
      case 71:
         stat = asn1PD_MsgStopFireEffect (ctxt_p, &pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_report */
      case 72:
         pvalue->u.msg_report = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgReport);

         stat = asn1PD_MsgReport (ctxt_p, pvalue->u.msg_report);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_invalidate_report */
      case 73:
         pvalue->u.msg_invalidate_report = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgInvalidateReport);

         stat = asn1PD_MsgInvalidateReport (ctxt_p, pvalue->u.msg_invalidate_report);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_trace */
      case 74:
         pvalue->u.msg_trace = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgTrace);

         stat = asn1PD_MsgTrace (ctxt_p, pvalue->u.msg_trace);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_decisional_state */
      case 75:
         pvalue->u.msg_decisional_state = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgDecisionalState);

         stat = asn1PD_MsgDecisionalState (ctxt_p, pvalue->u.msg_decisional_state);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_debug_points */
      case 76:
         pvalue->u.msg_debug_points = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgDebugPoints);

         stat = asn1PD_MsgDebugPoints (ctxt_p, pvalue->u.msg_debug_points);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_vision_cones */
      case 77:
         pvalue->u.msg_unit_vision_cones = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitVisionCones);

         stat = asn1PD_MsgUnitVisionCones (ctxt_p, pvalue->u.msg_unit_vision_cones);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_detection */
      case 78:
         pvalue->u.msg_unit_detection = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitDetection);

         stat = asn1PD_MsgUnitDetection (ctxt_p, pvalue->u.msg_unit_detection);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_detection */
      case 79:
         pvalue->u.msg_object_detection = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectDetection);

         stat = asn1PD_MsgObjectDetection (ctxt_p, pvalue->u.msg_object_detection);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_detection */
      case 80:
         pvalue->u.msg_population_concentration_detection = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationDetection);

         stat = asn1PD_MsgPopulationConcentrationDetection (ctxt_p, pvalue->u.msg_population_concentration_detection);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_detection */
      case 81:
         pvalue->u.msg_population_flow_detection = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowDetection);

         stat = asn1PD_MsgPopulationFlowDetection (ctxt_p, pvalue->u.msg_population_flow_detection);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_order */
      case 82:
         pvalue->u.msg_unit_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitOrder);

         stat = asn1PD_MsgUnitOrder (ctxt_p, pvalue->u.msg_unit_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_order */
      case 83:
         pvalue->u.msg_automat_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatOrder);

         stat = asn1PD_MsgAutomatOrder (ctxt_p, pvalue->u.msg_automat_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_order */
      case 84:
         pvalue->u.msg_population_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrder);

         stat = asn1PD_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_creation */
      case 85:
         pvalue->u.msg_object_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectCreation);

         stat = asn1PD_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_destruction */
      case 86:
         stat = asn1PD_MsgObjectDestruction (ctxt_p, &pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_update */
      case 87:
         pvalue->u.msg_object_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectUpdate);

         stat = asn1PD_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_knowledge_creation */
      case 88:
         pvalue->u.msg_object_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeCreation);

         stat = asn1PD_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_knowledge_update */
      case 89:
         pvalue->u.msg_object_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeUpdate);

         stat = asn1PD_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_knowledge_destruction */
      case 90:
         pvalue->u.msg_object_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeDestruction);

         stat = asn1PD_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_medical_handling_creation */
      case 91:
         pvalue->u.msg_log_medical_handling_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMedicalHandlingCreation);

         stat = asn1PD_MsgLogMedicalHandlingCreation (ctxt_p, pvalue->u.msg_log_medical_handling_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_medical_handling_update */
      case 92:
         pvalue->u.msg_log_medical_handling_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMedicalHandlingUpdate);

         stat = asn1PD_MsgLogMedicalHandlingUpdate (ctxt_p, pvalue->u.msg_log_medical_handling_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_medical_handling_destruction */
      case 93:
         pvalue->u.msg_log_medical_handling_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMedicalHandlingDestruction);

         stat = asn1PD_MsgLogMedicalHandlingDestruction (ctxt_p, pvalue->u.msg_log_medical_handling_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_medical_state */
      case 94:
         pvalue->u.msg_log_medical_state = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMedicalState);

         stat = asn1PD_MsgLogMedicalState (ctxt_p, pvalue->u.msg_log_medical_state);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_maintenance_handling_creation */
      case 95:
         pvalue->u.msg_log_maintenance_handling_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceHandlingCreation);

         stat = asn1PD_MsgLogMaintenanceHandlingCreation (ctxt_p, pvalue->u.msg_log_maintenance_handling_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_maintenance_handling_update */
      case 96:
         pvalue->u.msg_log_maintenance_handling_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceHandlingUpdate);

         stat = asn1PD_MsgLogMaintenanceHandlingUpdate (ctxt_p, pvalue->u.msg_log_maintenance_handling_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_maintenance_handling_destruction */
      case 97:
         pvalue->u.msg_log_maintenance_handling_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceHandlingDestruction);

         stat = asn1PD_MsgLogMaintenanceHandlingDestruction (ctxt_p, pvalue->u.msg_log_maintenance_handling_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_maintenance_state */
      case 98:
         pvalue->u.msg_log_maintenance_state = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceState);

         stat = asn1PD_MsgLogMaintenanceState (ctxt_p, pvalue->u.msg_log_maintenance_state);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_handling_creation */
      case 99:
         pvalue->u.msg_log_supply_handling_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyHandlingCreation);

         stat = asn1PD_MsgLogSupplyHandlingCreation (ctxt_p, pvalue->u.msg_log_supply_handling_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_handling_update */
      case 100:
         pvalue->u.msg_log_supply_handling_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyHandlingUpdate);

         stat = asn1PD_MsgLogSupplyHandlingUpdate (ctxt_p, pvalue->u.msg_log_supply_handling_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_handling_destruction */
      case 101:
         pvalue->u.msg_log_supply_handling_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyHandlingDestruction);

         stat = asn1PD_MsgLogSupplyHandlingDestruction (ctxt_p, pvalue->u.msg_log_supply_handling_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_state */
      case 102:
         pvalue->u.msg_log_supply_state = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyState);

         stat = asn1PD_MsgLogSupplyState (ctxt_p, pvalue->u.msg_log_supply_state);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_quotas */
      case 103:
         pvalue->u.msg_log_supply_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyQuotas);

         stat = asn1PD_MsgLogSupplyQuotas (ctxt_p, pvalue->u.msg_log_supply_quotas);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_creation */
      case 104:
         pvalue->u.msg_population_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationCreation);

         stat = asn1PD_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_update */
      case 105:
         pvalue->u.msg_population_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationUpdate);

         stat = asn1PD_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_creation */
      case 106:
         pvalue->u.msg_population_concentration_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationCreation);

         stat = asn1PD_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_destruction */
      case 107:
         pvalue->u.msg_population_concentration_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationDestruction);

         stat = asn1PD_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_update */
      case 108:
         pvalue->u.msg_population_concentration_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationUpdate);

         stat = asn1PD_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_creation */
      case 109:
         pvalue->u.msg_population_flow_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowCreation);

         stat = asn1PD_MsgPopulationFlowCreation (ctxt_p, pvalue->u.msg_population_flow_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_destruction */
      case 110:
         pvalue->u.msg_population_flow_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowDestruction);

         stat = asn1PD_MsgPopulationFlowDestruction (ctxt_p, pvalue->u.msg_population_flow_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_update */
      case 111:
         pvalue->u.msg_population_flow_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowUpdate);

         stat = asn1PD_MsgPopulationFlowUpdate (ctxt_p, pvalue->u.msg_population_flow_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_knowledge_creation */
      case 112:
         pvalue->u.msg_population_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeCreation);

         stat = asn1PD_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_knowledge_update */
      case 113:
         pvalue->u.msg_population_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeUpdate);

         stat = asn1PD_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_knowledge_destruction */
      case 114:
         pvalue->u.msg_population_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeDestruction);

         stat = asn1PD_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_knowledge_creation */
      case 115:
         pvalue->u.msg_population_concentration_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeCreation);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_knowledge_destruction */
      case 116:
         pvalue->u.msg_population_concentration_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeDestruction);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_concentration_knowledge_update */
      case 117:
         pvalue->u.msg_population_concentration_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeUpdate);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_knowledge_creation */
      case 118:
         pvalue->u.msg_population_flow_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowKnowledgeCreation);

         stat = asn1PD_MsgPopulationFlowKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flow_knowledge_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_knowledge_destruction */
      case 119:
         pvalue->u.msg_population_flow_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowKnowledgeDestruction);

         stat = asn1PD_MsgPopulationFlowKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flow_knowledge_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_flow_knowledge_update */
      case 120:
         pvalue->u.msg_population_flow_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFlowKnowledgeUpdate);

         stat = asn1PD_MsgPopulationFlowKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flow_knowledge_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_folk_creation */
      case 121:
         pvalue->u.msg_folk_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFolkCreation);

         stat = asn1PD_MsgFolkCreation (ctxt_p, pvalue->u.msg_folk_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_folk_graph_update */
      case 122:
         pvalue->u.msg_folk_graph_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFolkGraphUpdate);

         stat = asn1PD_MsgFolkGraphUpdate (ctxt_p, pvalue->u.msg_folk_graph_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_creation */
      case 123:
         pvalue->u.msg_intelligence_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceCreation);

         stat = asn1PD_MsgIntelligenceCreation (ctxt_p, pvalue->u.msg_intelligence_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_update */
      case 124:
         pvalue->u.msg_intelligence_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceUpdate);

         stat = asn1PD_MsgIntelligenceUpdate (ctxt_p, pvalue->u.msg_intelligence_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_destruction */
      case 125:
         pvalue->u.msg_intelligence_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceDestruction);

         stat = asn1PD_MsgIntelligenceDestruction (ctxt_p, pvalue->u.msg_intelligence_destruction);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsSimToClient_msg::Decode ()
{
   return asn1PD_MsgsSimToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsSimToClient                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimToClient::ASN1C_MsgsSimToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsSimToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsSimToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsSimToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsSimToClient::Decode ()
{
   return asn1PD_MsgsSimToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToSim_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToSim_msg::ASN1C_MsgsClientToSim_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToSim_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 33);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_control_stop */
      case 1:
         stat = asn1PE_MsgControlStop (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_pause */
      case 2:
         stat = asn1PE_MsgControlPause (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_resume */
      case 3:
         stat = asn1PE_MsgControlResume (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_change_time_factor */
      case 4:
         stat = asn1PE_MsgControlChangeTimeFactor (ctxt_p, pvalue->u.msg_control_change_time_factor);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_global_meteo */
      case 5:
         stat = asn1PE_MsgControlGlobalMeteo (ctxt_p, pvalue->u.msg_control_global_meteo);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_local_meteo */
      case 6:
         stat = asn1PE_MsgControlLocalMeteo (ctxt_p, pvalue->u.msg_control_local_meteo);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_save_now */
      case 7:
         stat = asn1PE_MsgControlCheckPointSaveNow (ctxt_p, pvalue->u.msg_control_checkpoint_save_now);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_checkpoint_set_frequency */
      case 8:
         stat = asn1PE_MsgControlCheckPointSetFrequency (ctxt_p, pvalue->u.msg_control_checkpoint_set_frequency);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_toggle_vision_cones */
      case 9:
         stat = asn1PE_MsgControlToggleVisionCones (ctxt_p, pvalue->u.msg_control_toggle_vision_cones);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_creation_request */
      case 10:
         stat = asn1PE_MsgLimitCreationRequest (ctxt_p, pvalue->u.msg_limit_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_destruction_request */
      case 11:
         stat = asn1PE_MsgLimitDestructionRequest (ctxt_p, pvalue->u.msg_limit_destruction_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_limit_update_request */
      case 12:
         stat = asn1PE_MsgLimitUpdateRequest (ctxt_p, pvalue->u.msg_limit_update_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_creation_request */
      case 13:
         stat = asn1PE_MsgLimaCreationRequest (ctxt_p, pvalue->u.msg_lima_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_destruction_request */
      case 14:
         stat = asn1PE_MsgLimaDestructionRequest (ctxt_p, pvalue->u.msg_lima_destruction_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_lima_update_request */
      case 15:
         stat = asn1PE_MsgLimaUpdateRequest (ctxt_p, pvalue->u.msg_lima_update_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_creation_request */
      case 16:
         stat = asn1PE_MsgIntelligenceCreationRequest (ctxt_p, pvalue->u.msg_intelligence_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_update_request */
      case 17:
         stat = asn1PE_MsgIntelligenceUpdateRequest (ctxt_p, pvalue->u.msg_intelligence_update_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_intelligence_destruction_request */
      case 18:
         stat = asn1PE_MsgIntelligenceDestructionRequest (ctxt_p, pvalue->u.msg_intelligence_destruction_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_order */
      case 19:
         stat = asn1PE_MsgUnitOrder (ctxt_p, pvalue->u.msg_unit_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_order */
      case 20:
         stat = asn1PE_MsgAutomatOrder (ctxt_p, pvalue->u.msg_automat_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_order */
      case 21:
         stat = asn1PE_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_frag_order */
      case 22:
         stat = asn1PE_MsgFragOrder (ctxt_p, pvalue->u.msg_frag_order);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_set_automat_mode */
      case 23:
         stat = asn1PE_MsgSetAutomatMode (ctxt_p, pvalue->u.msg_set_automat_mode);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_creation_request */
      case 24:
         stat = asn1PE_MsgUnitCreationRequest (ctxt_p, pvalue->u.msg_unit_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_magic_action */
      case 25:
         stat = asn1PE_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_object_magic_action */
      case 26:
         stat = asn1PE_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_population_magic_action */
      case 27:
         stat = asn1PE_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_change_diplomacy */
      case 28:
         stat = asn1PE_MsgChangeDiplomacy (ctxt_p, pvalue->u.msg_change_diplomacy);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_knowledge_group */
      case 29:
         stat = asn1PE_MsgAutomatChangeKnowledgeGroup (ctxt_p, pvalue->u.msg_automat_change_knowledge_group);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_logistic_links */
      case 30:
         stat = asn1PE_MsgAutomatChangeLogisticLinks (ctxt_p, pvalue->u.msg_automat_change_logistic_links);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_automat_change_superior */
      case 31:
         stat = asn1PE_MsgAutomatChangeSuperior (ctxt_p, pvalue->u.msg_automat_change_superior);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_unit_change_superior */
      case 32:
         stat = asn1PE_MsgUnitChangeSuperior (ctxt_p, pvalue->u.msg_unit_change_superior);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_push_flow */
      case 33:
         stat = asn1PE_MsgLogSupplyPushFlow (ctxt_p, pvalue->u.msg_log_supply_push_flow);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_log_supply_change_quotas */
      case 34:
         stat = asn1PE_MsgLogSupplyChangeQuotas (ctxt_p, pvalue->u.msg_log_supply_change_quotas);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsClientToSim_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToSim_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 33);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_control_stop */
      case 0:
         stat = asn1PD_MsgControlStop (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_pause */
      case 1:
         stat = asn1PD_MsgControlPause (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_resume */
      case 2:
         stat = asn1PD_MsgControlResume (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_change_time_factor */
      case 3:
         stat = asn1PD_MsgControlChangeTimeFactor (ctxt_p, &pvalue->u.msg_control_change_time_factor);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_global_meteo */
      case 4:
         pvalue->u.msg_control_global_meteo = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlGlobalMeteo);

         stat = asn1PD_MsgControlGlobalMeteo (ctxt_p, pvalue->u.msg_control_global_meteo);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_local_meteo */
      case 5:
         pvalue->u.msg_control_local_meteo = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlLocalMeteo);

         stat = asn1PD_MsgControlLocalMeteo (ctxt_p, pvalue->u.msg_control_local_meteo);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_save_now */
      case 6:
         pvalue->u.msg_control_checkpoint_save_now = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlCheckPointSaveNow);

         stat = asn1PD_MsgControlCheckPointSaveNow (ctxt_p, pvalue->u.msg_control_checkpoint_save_now);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_checkpoint_set_frequency */
      case 7:
         stat = asn1PD_MsgControlCheckPointSetFrequency (ctxt_p, &pvalue->u.msg_control_checkpoint_set_frequency);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_toggle_vision_cones */
      case 8:
         stat = asn1PD_MsgControlToggleVisionCones (ctxt_p, &pvalue->u.msg_control_toggle_vision_cones);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_creation_request */
      case 9:
         pvalue->u.msg_limit_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreationRequest);

         stat = asn1PD_MsgLimitCreationRequest (ctxt_p, pvalue->u.msg_limit_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_destruction_request */
      case 10:
         stat = asn1PD_MsgLimitDestructionRequest (ctxt_p, &pvalue->u.msg_limit_destruction_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_limit_update_request */
      case 11:
         pvalue->u.msg_limit_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdateRequest);

         stat = asn1PD_MsgLimitUpdateRequest (ctxt_p, pvalue->u.msg_limit_update_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_creation_request */
      case 12:
         pvalue->u.msg_lima_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreationRequest);

         stat = asn1PD_MsgLimaCreationRequest (ctxt_p, pvalue->u.msg_lima_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_destruction_request */
      case 13:
         stat = asn1PD_MsgLimaDestructionRequest (ctxt_p, &pvalue->u.msg_lima_destruction_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_lima_update_request */
      case 14:
         pvalue->u.msg_lima_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdateRequest);

         stat = asn1PD_MsgLimaUpdateRequest (ctxt_p, pvalue->u.msg_lima_update_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_creation_request */
      case 15:
         pvalue->u.msg_intelligence_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceCreationRequest);

         stat = asn1PD_MsgIntelligenceCreationRequest (ctxt_p, pvalue->u.msg_intelligence_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_update_request */
      case 16:
         pvalue->u.msg_intelligence_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceUpdateRequest);

         stat = asn1PD_MsgIntelligenceUpdateRequest (ctxt_p, pvalue->u.msg_intelligence_update_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_intelligence_destruction_request */
      case 17:
         pvalue->u.msg_intelligence_destruction_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIntelligenceDestructionRequest);

         stat = asn1PD_MsgIntelligenceDestructionRequest (ctxt_p, pvalue->u.msg_intelligence_destruction_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_order */
      case 18:
         pvalue->u.msg_unit_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitOrder);

         stat = asn1PD_MsgUnitOrder (ctxt_p, pvalue->u.msg_unit_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_order */
      case 19:
         pvalue->u.msg_automat_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatOrder);

         stat = asn1PD_MsgAutomatOrder (ctxt_p, pvalue->u.msg_automat_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_order */
      case 20:
         pvalue->u.msg_population_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrder);

         stat = asn1PD_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_frag_order */
      case 21:
         pvalue->u.msg_frag_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFragOrder);

         stat = asn1PD_MsgFragOrder (ctxt_p, pvalue->u.msg_frag_order);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_set_automat_mode */
      case 22:
         pvalue->u.msg_set_automat_mode = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomatMode);

         stat = asn1PD_MsgSetAutomatMode (ctxt_p, pvalue->u.msg_set_automat_mode);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_creation_request */
      case 23:
         pvalue->u.msg_unit_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitCreationRequest);

         stat = asn1PD_MsgUnitCreationRequest (ctxt_p, pvalue->u.msg_unit_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_magic_action */
      case 24:
         pvalue->u.msg_unit_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicAction);

         stat = asn1PD_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_object_magic_action */
      case 25:
         pvalue->u.msg_object_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicAction);

         stat = asn1PD_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_population_magic_action */
      case 26:
         pvalue->u.msg_population_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicAction);

         stat = asn1PD_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_change_diplomacy */
      case 27:
         pvalue->u.msg_change_diplomacy = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomacy);

         stat = asn1PD_MsgChangeDiplomacy (ctxt_p, pvalue->u.msg_change_diplomacy);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_knowledge_group */
      case 28:
         pvalue->u.msg_automat_change_knowledge_group = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroup);

         stat = asn1PD_MsgAutomatChangeKnowledgeGroup (ctxt_p, pvalue->u.msg_automat_change_knowledge_group);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_logistic_links */
      case 29:
         pvalue->u.msg_automat_change_logistic_links = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeLogisticLinks);

         stat = asn1PD_MsgAutomatChangeLogisticLinks (ctxt_p, pvalue->u.msg_automat_change_logistic_links);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_automat_change_superior */
      case 30:
         pvalue->u.msg_automat_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomatChangeSuperior);

         stat = asn1PD_MsgAutomatChangeSuperior (ctxt_p, pvalue->u.msg_automat_change_superior);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_unit_change_superior */
      case 31:
         pvalue->u.msg_unit_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitChangeSuperior);

         stat = asn1PD_MsgUnitChangeSuperior (ctxt_p, pvalue->u.msg_unit_change_superior);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_push_flow */
      case 32:
         pvalue->u.msg_log_supply_push_flow = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyPushFlow);

         stat = asn1PD_MsgLogSupplyPushFlow (ctxt_p, pvalue->u.msg_log_supply_push_flow);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_log_supply_change_quotas */
      case 33:
         pvalue->u.msg_log_supply_change_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSupplyChangeQuotas);

         stat = asn1PD_MsgLogSupplyChangeQuotas (ctxt_p, pvalue->u.msg_log_supply_change_quotas);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsClientToSim_msg::Decode ()
{
   return asn1PD_MsgsClientToSim_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToSim                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToSim::ASN1C_MsgsClientToSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsClientToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsClientToSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsClientToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsClientToSim::Decode ()
{
   return asn1PD_MsgsClientToSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToSim_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToSim_msg::ASN1C_MsgsMiddleToSim_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToSim_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_control_client_announcement */
      case 1:
         stat = asn1PE_MsgControlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsMiddleToSim_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToSim_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_control_client_announcement */
      case 0:
         stat = asn1PD_MsgControlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsMiddleToSim_msg::Decode ()
{
   return asn1PD_MsgsMiddleToSim_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToSim                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToSim::ASN1C_MsgsMiddleToSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsMiddleToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsMiddleToSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsMiddleToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsMiddleToSim::Decode ()
{
   return asn1PD_MsgsMiddleToSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsReplayToClient_msg                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgsReplayToClient_msg::ASN1C_MsgsReplayToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsReplayToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsReplayToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsReplayToClient_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 5);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_control_replay_information */
      case 1:
         stat = asn1PE_MsgControlReplayInformation (ctxt_p, pvalue->u.msg_control_replay_information);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_stop_ack */
      case 2:
         stat = asn1PE_MsgControlStopAck (ctxt_p, pvalue->u.msg_control_stop_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_pause_ack */
      case 3:
         stat = asn1PE_MsgControlPauseAck (ctxt_p, pvalue->u.msg_control_pause_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_resume_ack */
      case 4:
         stat = asn1PE_MsgControlResumeAck (ctxt_p, pvalue->u.msg_control_resume_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_skip_to_tick_ack */
      case 5:
         stat = asn1PE_MsgControlSkipToTickAck (ctxt_p, pvalue->u.msg_control_skip_to_tick_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_change_time_factor_ack */
      case 6:
         stat = asn1PE_MsgControlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_control_change_time_factor_ack);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsReplayToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsReplayToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsReplayToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsReplayToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_control_replay_information */
      case 0:
         pvalue->u.msg_control_replay_information = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlReplayInformation);

         stat = asn1PD_MsgControlReplayInformation (ctxt_p, pvalue->u.msg_control_replay_information);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_stop_ack */
      case 1:
         stat = asn1PD_MsgControlStopAck (ctxt_p, &pvalue->u.msg_control_stop_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_pause_ack */
      case 2:
         stat = asn1PD_MsgControlPauseAck (ctxt_p, &pvalue->u.msg_control_pause_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_resume_ack */
      case 3:
         stat = asn1PD_MsgControlResumeAck (ctxt_p, &pvalue->u.msg_control_resume_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_skip_to_tick_ack */
      case 4:
         pvalue->u.msg_control_skip_to_tick_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlSkipToTickAck);

         stat = asn1PD_MsgControlSkipToTickAck (ctxt_p, pvalue->u.msg_control_skip_to_tick_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_change_time_factor_ack */
      case 5:
         pvalue->u.msg_control_change_time_factor_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgControlChangeTimeFactorAck);

         stat = asn1PD_MsgControlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_control_change_time_factor_ack);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsReplayToClient_msg::Decode ()
{
   return asn1PD_MsgsReplayToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsReplayToClient                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgsReplayToClient::ASN1C_MsgsReplayToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsReplayToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsReplayToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsReplayToClient* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsReplayToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsReplayToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsReplayToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsReplayToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsReplayToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsReplayToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsReplayToClient::Decode ()
{
   return asn1PD_MsgsReplayToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToReplay_msg                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToReplay_msg::ASN1C_MsgsClientToReplay_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToReplay_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToReplay_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToReplay_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 4);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_control_stop */
      case 1:
         stat = asn1PE_MsgControlStop (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_pause */
      case 2:
         stat = asn1PE_MsgControlPause (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_resume */
      case 3:
         stat = asn1PE_MsgControlResume (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_skip_to_tick */
      case 4:
         stat = asn1PE_MsgControlSkipToTick (ctxt_p, pvalue->u.msg_control_skip_to_tick);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_control_change_time_factor */
      case 5:
         stat = asn1PE_MsgControlChangeTimeFactor (ctxt_p, pvalue->u.msg_control_change_time_factor);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsClientToReplay_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToReplay_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToReplay_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToReplay_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_control_stop */
      case 0:
         stat = asn1PD_MsgControlStop (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_pause */
      case 1:
         stat = asn1PD_MsgControlPause (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_resume */
      case 2:
         stat = asn1PD_MsgControlResume (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_skip_to_tick */
      case 3:
         stat = asn1PD_MsgControlSkipToTick (ctxt_p, &pvalue->u.msg_control_skip_to_tick);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_control_change_time_factor */
      case 4:
         stat = asn1PD_MsgControlChangeTimeFactor (ctxt_p, &pvalue->u.msg_control_change_time_factor);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsClientToReplay_msg::Decode ()
{
   return asn1PD_MsgsClientToReplay_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToReplay                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToReplay::ASN1C_MsgsClientToReplay (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToReplay& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToReplay (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToReplay* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsClientToReplay_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsClientToReplay::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToReplay (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToReplay (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToReplay* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsClientToReplay_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsClientToReplay::Decode ()
{
   return asn1PD_MsgsClientToReplay (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsAuthenticationToClient_msg                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAuthenticationToClient_msg::ASN1C_MsgsAuthenticationToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAuthenticationToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAuthenticationToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 6);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_authentication_response */
      case 1:
         stat = asn1PE_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation */
      case 2:
         stat = asn1PE_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation_request_ack */
      case 3:
         stat = asn1PE_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update */
      case 4:
         stat = asn1PE_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update_request_ack */
      case 5:
         stat = asn1PE_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction */
      case 6:
         stat = asn1PE_MsgProfileDestruction (ctxt_p, pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction_request_ack */
      case 7:
         stat = asn1PE_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsAuthenticationToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAuthenticationToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAuthenticationToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_authentication_response */
      case 0:
         pvalue->u.msg_authentication_response = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationResponse);

         stat = asn1PD_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation */
      case 1:
         pvalue->u.msg_profile_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreation);

         stat = asn1PD_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation_request_ack */
      case 2:
         pvalue->u.msg_profile_creation_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequestAck);

         stat = asn1PD_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update */
      case 3:
         pvalue->u.msg_profile_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdate);

         stat = asn1PD_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update_request_ack */
      case 4:
         pvalue->u.msg_profile_update_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequestAck);

         stat = asn1PD_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction */
      case 5:
         stat = asn1PD_MsgProfileDestruction (ctxt_p, &pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction_request_ack */
      case 6:
         pvalue->u.msg_profile_destruction_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileDestructionRequestAck);

         stat = asn1PD_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsAuthenticationToClient_msg::Decode ()
{
   return asn1PD_MsgsAuthenticationToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsAuthenticationToClient                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAuthenticationToClient::ASN1C_MsgsAuthenticationToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAuthenticationToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAuthenticationToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsAuthenticationToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsAuthenticationToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAuthenticationToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAuthenticationToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsAuthenticationToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsAuthenticationToClient::Decode ()
{
   return asn1PD_MsgsAuthenticationToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAuthentication_msg                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAuthentication_msg::ASN1C_MsgsClientToAuthentication_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAuthentication_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAuthentication_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 3);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_authentication_request */
      case 1:
         stat = asn1PE_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation_request */
      case 2:
         stat = asn1PE_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update_request */
      case 3:
         stat = asn1PE_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction_request */
      case 4:
         stat = asn1PE_MsgProfileDestructionRequest (ctxt_p, pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsClientToAuthentication_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAuthentication_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAuthentication_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_authentication_request */
      case 0:
         pvalue->u.msg_authentication_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationRequest);

         stat = asn1PD_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation_request */
      case 1:
         pvalue->u.msg_profile_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequest);

         stat = asn1PD_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update_request */
      case 2:
         pvalue->u.msg_profile_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequest);

         stat = asn1PD_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction_request */
      case 3:
         stat = asn1PD_MsgProfileDestructionRequest (ctxt_p, &pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsClientToAuthentication_msg::Decode ()
{
   return asn1PD_MsgsClientToAuthentication_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAuthentication                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAuthentication::ASN1C_MsgsClientToAuthentication (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAuthentication& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAuthentication (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsClientToAuthentication_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsClientToAuthentication::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAuthentication (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAuthentication (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsClientToAuthentication_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsClientToAuthentication::Decode ()
{
   return asn1PD_MsgsClientToAuthentication (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsAarToClient_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAarToClient_msg::ASN1C_MsgsAarToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAarToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAarToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAarToClient_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 1);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_aar_information */
      case 1:
         stat = asn1PE_MsgAarInformation (ctxt_p, pvalue->u.msg_aar_information);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_indicator_result */
      case 2:
         stat = asn1PE_MsgIndicatorResult (ctxt_p, pvalue->u.msg_indicator_result);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsAarToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAarToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAarToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAarToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_aar_information */
      case 0:
         pvalue->u.msg_aar_information = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAarInformation);

         stat = asn1PD_MsgAarInformation (ctxt_p, pvalue->u.msg_aar_information);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_indicator_result */
      case 1:
         pvalue->u.msg_indicator_result = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIndicatorResult);

         stat = asn1PD_MsgIndicatorResult (ctxt_p, pvalue->u.msg_indicator_result);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsAarToClient_msg::Decode ()
{
   return asn1PD_MsgsAarToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsAarToClient                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAarToClient::ASN1C_MsgsAarToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAarToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAarToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAarToClient* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsAarToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsAarToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAarToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAarToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAarToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsAarToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsAarToClient::Decode ()
{
   return asn1PD_MsgsAarToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAar_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAar_msg::ASN1C_MsgsClientToAar_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAar_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAar_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAar_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_indicator_request */
      case 1:
         stat = asn1PE_MsgIndicatorRequest (ctxt_p, pvalue->u.msg_indicator_request);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsClientToAar_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAar_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAar_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAar_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_indicator_request */
      case 0:
         pvalue->u.msg_indicator_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgIndicatorRequest);

         stat = asn1PD_MsgIndicatorRequest (ctxt_p, pvalue->u.msg_indicator_request);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsClientToAar_msg::Decode ()
{
   return asn1PD_MsgsClientToAar_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAar                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAar::ASN1C_MsgsClientToAar (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAar& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAar (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAar* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsClientToAar_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsClientToAar::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAar (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAar (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAar* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsClientToAar_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsClientToAar::Decode ()
{
   return asn1PD_MsgsClientToAar (mpContext->GetPtr(), &msgData);
}


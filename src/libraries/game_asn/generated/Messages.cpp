/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 24-Apr-2007.
 */
#include "Messages.h"

/**************************************************************/
/*                                                            */
/*  MessagesIncludes                                          */
/*                                                            */
/**************************************************************/

ASN1C_MessagesIncludes::ASN1C_MessagesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_MessagesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_MessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MessagesIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode limaLimiteExports */

   PU_PUSHNAME (ctxt_p, "limaLimiteExports");

   stat = asn1PE_LimaLimiteExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode orderExports */

   PU_PUSHNAME (ctxt_p, "orderExports");

   stat = asn1PE_OrderExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode controlExports */

   PU_PUSHNAME (ctxt_p, "controlExports");

   stat = asn1PE_ControlExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode knowledgeGroupExports */

   PU_PUSHNAME (ctxt_p, "knowledgeGroupExports");

   stat = asn1PE_KnowledgeGroupExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode formationExports */

   PU_PUSHNAME (ctxt_p, "formationExports");

   stat = asn1PE_FormationExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode fireExports */

   PU_PUSHNAME (ctxt_p, "fireExports");

   stat = asn1PE_FireExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unitExports */

   PU_PUSHNAME (ctxt_p, "unitExports");

   stat = asn1PE_UnitExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unitKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "unitKnowledgeExports");

   stat = asn1PE_UnitKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode objectExports */

   PU_PUSHNAME (ctxt_p, "objectExports");

   stat = asn1PE_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode objectKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "objectKnowledgeExports");

   stat = asn1PE_ObjectKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode populationExports */

   PU_PUSHNAME (ctxt_p, "populationExports");

   stat = asn1PE_PopulationExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode populationKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "populationKnowledgeExports");

   stat = asn1PE_PopulationKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode logMaintenanceExports */

   PU_PUSHNAME (ctxt_p, "logMaintenanceExports");

   stat = asn1PE_LogMaintenanceExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode logRavitaillementExports */

   PU_PUSHNAME (ctxt_p, "logRavitaillementExports");

   stat = asn1PE_LogRavitaillementExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode logSanteExports */

   PU_PUSHNAME (ctxt_p, "logSanteExports");

   stat = asn1PE_LogSanteExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode automateExports */

   PU_PUSHNAME (ctxt_p, "automateExports");

   stat = asn1PE_AutomateExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode armyExports */

   PU_PUSHNAME (ctxt_p, "armyExports");

   stat = asn1PE_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode authExports */

   PU_PUSHNAME (ctxt_p, "authExports");

   stat = asn1PE_AuthExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MessagesIncludes: end\n");
   return (stat);
}

int ASN1C_MessagesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MessagesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_MessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MessagesIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode limaLimiteExports */

   PU_PUSHNAME (ctxt_p, "limaLimiteExports");

   stat = asn1PD_LimaLimiteExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode orderExports */

   PU_PUSHNAME (ctxt_p, "orderExports");

   stat = asn1PD_OrderExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode controlExports */

   PU_PUSHNAME (ctxt_p, "controlExports");

   stat = asn1PD_ControlExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode knowledgeGroupExports */

   PU_PUSHNAME (ctxt_p, "knowledgeGroupExports");

   stat = asn1PD_KnowledgeGroupExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode formationExports */

   PU_PUSHNAME (ctxt_p, "formationExports");

   stat = asn1PD_FormationExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode fireExports */

   PU_PUSHNAME (ctxt_p, "fireExports");

   stat = asn1PD_FireExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unitExports */

   PU_PUSHNAME (ctxt_p, "unitExports");

   stat = asn1PD_UnitExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unitKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "unitKnowledgeExports");

   stat = asn1PD_UnitKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode objectExports */

   PU_PUSHNAME (ctxt_p, "objectExports");

   stat = asn1PD_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode objectKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "objectKnowledgeExports");

   stat = asn1PD_ObjectKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode populationExports */

   PU_PUSHNAME (ctxt_p, "populationExports");

   stat = asn1PD_PopulationExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode populationKnowledgeExports */

   PU_PUSHNAME (ctxt_p, "populationKnowledgeExports");

   stat = asn1PD_PopulationKnowledgeExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode logMaintenanceExports */

   PU_PUSHNAME (ctxt_p, "logMaintenanceExports");

   stat = asn1PD_LogMaintenanceExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode logRavitaillementExports */

   PU_PUSHNAME (ctxt_p, "logRavitaillementExports");

   stat = asn1PD_LogRavitaillementExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode logSanteExports */

   PU_PUSHNAME (ctxt_p, "logSanteExports");

   stat = asn1PD_LogSanteExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode automateExports */

   PU_PUSHNAME (ctxt_p, "automateExports");

   stat = asn1PD_AutomateExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode armyExports */

   PU_PUSHNAME (ctxt_p, "armyExports");

   stat = asn1PD_ArmyExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode authExports */

   PU_PUSHNAME (ctxt_p, "authExports");

   stat = asn1PD_AuthExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MessagesIncludes: end\n");

   return (stat);
}

int ASN1C_MessagesIncludes::Decode ()
{
   return asn1PD_MessagesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MessagesExports                                           */
/*                                                            */
/**************************************************************/

ASN1C_MessagesExports::ASN1C_MessagesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MessagesExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_MessagesExports: end\n");
   return (stat);
}

int ASN1C_MessagesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MessagesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MessagesExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_MessagesExports: end\n");

   return (stat);
}

int ASN1C_MessagesExports::Decode ()
{
   return asn1PD_MessagesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgsSimToClient_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimToClient_msg::ASN1C_MsgsSimToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient_msg* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimToClient_msg: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 104);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_limit_creation_request_ack */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_request_ack");

         stat = asn1PE_MsgLimitCreationRequestAck (ctxt_p, pvalue->u.msg_limit_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_request_ack */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_request_ack");

         stat = asn1PE_MsgLimitDestructionRequestAck (ctxt_p, pvalue->u.msg_limit_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_request_ack */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_request_ack");

         stat = asn1PE_MsgLimitUpdateRequestAck (ctxt_p, pvalue->u.msg_limit_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_request_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_request_ack");

         stat = asn1PE_MsgLimaCreationRequestAck (ctxt_p, pvalue->u.msg_lima_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_request_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_request_ack");

         stat = asn1PE_MsgLimaDestructionRequestAck (ctxt_p, pvalue->u.msg_lima_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_request_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_request_ack");

         stat = asn1PE_MsgLimaUpdateRequestAck (ctxt_p, pvalue->u.msg_lima_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_ack");

         stat = asn1PE_MsgPionOrderAck (ctxt_p, pvalue->u.msg_pion_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_ack");

         stat = asn1PE_MsgAutomateOrderAck (ctxt_p, pvalue->u.msg_automate_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_ack");

         stat = asn1PE_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_frag_order_ack */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_frag_order_ack");

         stat = asn1PE_MsgFragOrderAck (ctxt_p, pvalue->u.msg_frag_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode_ack */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode_ack");

         stat = asn1PE_MsgSetAutomateModeAck (ctxt_p, pvalue->u.msg_set_automate_mode_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action_ack */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action_ack");

         stat = asn1PE_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action_ack */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action_ack");

         stat = asn1PE_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action_ack");

         stat = asn1PE_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie_ack */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie_ack");

         stat = asn1PE_MsgChangeDiplomatieAck (ctxt_p, pvalue->u.msg_change_diplomatie_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_groupe_connaissance_ack */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_groupe_connaissance_ack");

         stat = asn1PE_MsgAutomateChangeGroupeConnaissanceAck (ctxt_p, pvalue->u.msg_automate_change_groupe_connaissance_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques_ack */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques_ack");

         stat = asn1PE_MsgAutomateChangeLiensLogistiquesAck (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior_ack */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior_ack");

         stat = asn1PE_MsgPionChangeSuperiorAck (ctxt_p, pvalue->u.msg_pion_change_superior_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux_ack */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux_ack");

         stat = asn1PE_MsgLogRavitaillementPousserFluxAck (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas_ack */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas_ack");

         stat = asn1PE_MsgLogRavitaillementChangeQuotasAck (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_info */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_info");

         stat = asn1PE_MsgCtrlInfo (ctxt_p, pvalue->u.msg_ctrl_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_begin_tick */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_begin_tick");

         stat = asn1PE_MsgCtrlBeginTick (ctxt_p, pvalue->u.msg_ctrl_begin_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_end_tick */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_end_tick");

         stat = asn1PE_MsgCtrlEndTick (ctxt_p, pvalue->u.msg_ctrl_end_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop_ack */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop_ack");

         stat = asn1PE_MsgCtrlStopAck (ctxt_p, pvalue->u.msg_ctrl_stop_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause_ack */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause_ack");

         stat = asn1PE_MsgCtrlPauseAck (ctxt_p, pvalue->u.msg_ctrl_pause_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume_ack */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume_ack");

         stat = asn1PE_MsgCtrlResumeAck (ctxt_p, pvalue->u.msg_ctrl_resume_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor_ack */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor_ack");

         stat = asn1PE_MsgCtrlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_ctrl_change_time_factor_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale_ack */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale_ack");

         stat = asn1PE_MsgCtrlMeteoGlobaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale_ack */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale_ack");

         stat = asn1PE_MsgCtrlMeteoLocaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_begin */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_begin");

         stat = asn1PE_MsgCtrlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_end */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_end");

         stat = asn1PE_MsgCtrlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency_ack */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency_ack");

         stat = asn1PE_MsgCtrlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now_ack */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now_ack");

         stat = asn1PE_MsgCtrlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_begin */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_begin");

         stat = asn1PE_MsgCtrlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_end */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_end");

         stat = asn1PE_MsgCtrlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         stat = asn1PE_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update");

         stat = asn1PE_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PE_MsgLimitDestruction (ctxt_p, pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         stat = asn1PE_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update");

         stat = asn1PE_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PE_MsgLimaDestruction (ctxt_p, pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_formation_creation */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.msg_formation_creation");

         stat = asn1PE_MsgFormationCreation (ctxt_p, pvalue->u.msg_formation_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_knowledge_group_creation */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.msg_knowledge_group_creation");

         stat = asn1PE_MsgKnowledgeGroupCreation (ctxt_p, pvalue->u.msg_knowledge_group_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_side_creation */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.msg_side_creation");

         stat = asn1PE_MsgSideCreation (ctxt_p, pvalue->u.msg_side_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_creation */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_creation");

         stat = asn1PE_MsgAutomateCreation (ctxt_p, pvalue->u.msg_automate_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_attributes */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_attributes");

         stat = asn1PE_MsgAutomateAttributes (ctxt_p, pvalue->u.msg_automate_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_creation */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_creation");

         stat = asn1PE_MsgPionCreation (ctxt_p, pvalue->u.msg_pion_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_attributes */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_attributes");

         stat = asn1PE_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_pathfind */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_pathfind");

         stat = asn1PE_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         stat = asn1PE_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior");

         stat = asn1PE_MsgPionChangeSuperior (ctxt_p, pvalue->u.msg_pion_change_superior);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques");

         stat = asn1PE_MsgAutomateChangeLiensLogistiques (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_creation */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_creation");

         stat = asn1PE_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_update */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_update");

         stat = asn1PE_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_destruction */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_destruction");

         stat = asn1PE_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_pion_fire */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.msg_start_pion_fire");

         stat = asn1PE_MsgStartPionFire (ctxt_p, pvalue->u.msg_start_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_pion_fire */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_pion_fire");

         stat = asn1PE_MsgStopPionFire (ctxt_p, pvalue->u.msg_stop_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_population_fire */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.msg_start_population_fire");

         stat = asn1PE_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_population_fire */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_population_fire");

         stat = asn1PE_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_explosion */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.msg_explosion");

         stat = asn1PE_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_fire_effect */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.msg_start_fire_effect");

         stat = asn1PE_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_fire_effect */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_fire_effect");

         stat = asn1PE_MsgStopFireEffect (ctxt_p, pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_cr */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.msg_cr");

         stat = asn1PE_MsgCR (ctxt_p, pvalue->u.msg_cr);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_management */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_management");

         stat = asn1PE_MsgPionOrderManagement (ctxt_p, pvalue->u.msg_pion_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_management */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_management");

         stat = asn1PE_MsgAutomateOrderManagement (ctxt_p, pvalue->u.msg_automate_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_management */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_management");

         stat = asn1PE_MsgPopulationOrderManagement (ctxt_p, pvalue->u.msg_population_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         stat = asn1PE_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         stat = asn1PE_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         stat = asn1PE_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_creation */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.msg_object_creation");

         stat = asn1PE_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_destruction */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.msg_object_destruction");

         stat = asn1PE_MsgObjectDestruction (ctxt_p, pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_update */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.msg_object_update");

         stat = asn1PE_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_creation */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_creation");

         stat = asn1PE_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_update */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_update");

         stat = asn1PE_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_destruction */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_destruction");

         stat = asn1PE_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_creation */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_creation");

         stat = asn1PE_MsgLogSanteTraitementHumainCreation (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_update */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_update");

         stat = asn1PE_MsgLogSanteTraitementHumainUpdate (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_destruction */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_destruction");

         stat = asn1PE_MsgLogSanteTraitementHumainDestruction (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_etat */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_etat");

         stat = asn1PE_MsgLogSanteEtat (ctxt_p, pvalue->u.msg_log_sante_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_creation */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_creation");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementCreation (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_update */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_update");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementUpdate (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_destruction */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_destruction");

         stat = asn1PE_MsgLogMaintenanceTraitementEquipementDestruction (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_etat */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_etat");

         stat = asn1PE_MsgLogMaintenanceEtat (ctxt_p, pvalue->u.msg_log_maintenance_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_creation */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_creation");

         stat = asn1PE_MsgLogRavitaillementTraitementCreation (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_update */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_update");

         stat = asn1PE_MsgLogRavitaillementTraitementUpdate (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_destruction */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_destruction");

         stat = asn1PE_MsgLogRavitaillementTraitementDestruction (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_etat */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_etat");

         stat = asn1PE_MsgLogRavitaillementEtat (ctxt_p, pvalue->u.msg_log_ravitaillement_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_quotas */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_quotas");

         stat = asn1PE_MsgLogRavitaillementQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_creation */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.msg_population_creation");

         stat = asn1PE_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_update */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.msg_population_update");

         stat = asn1PE_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_creation */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_creation");

         stat = asn1PE_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_destruction */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_destruction");

         stat = asn1PE_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_update */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_update");

         stat = asn1PE_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_creation */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_creation");

         stat = asn1PE_MsgPopulationFluxCreation (ctxt_p, pvalue->u.msg_population_flux_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_destruction */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_destruction");

         stat = asn1PE_MsgPopulationFluxDestruction (ctxt_p, pvalue->u.msg_population_flux_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_update */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_update");

         stat = asn1PE_MsgPopulationFluxUpdate (ctxt_p, pvalue->u.msg_population_flux_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_creation */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_creation");

         stat = asn1PE_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_update */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_update");

         stat = asn1PE_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_destruction */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_destruction");

         stat = asn1PE_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_creation */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_creation");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_destruction */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_destruction");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_update */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_update");

         stat = asn1PE_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_creation */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_creation");

         stat = asn1PE_MsgPopulationFluxKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flux_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_destruction */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_destruction");

         stat = asn1PE_MsgPopulationFluxKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flux_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_update */
      case 105:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_update");

         stat = asn1PE_MsgPopulationFluxKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flux_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsSimToClient_msg: end\n");
   return (stat);
}

int ASN1C_MsgsSimToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsSimToClient_msg: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 104);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_limit_creation_request_ack */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_request_ack");

         stat = asn1PD_MsgLimitCreationRequestAck (ctxt_p, &pvalue->u.msg_limit_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_request_ack */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_request_ack");

         stat = asn1PD_MsgLimitDestructionRequestAck (ctxt_p, &pvalue->u.msg_limit_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_request_ack */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_request_ack");

         stat = asn1PD_MsgLimitUpdateRequestAck (ctxt_p, &pvalue->u.msg_limit_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_request_ack */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_request_ack");

         stat = asn1PD_MsgLimaCreationRequestAck (ctxt_p, &pvalue->u.msg_lima_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_request_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_request_ack");

         stat = asn1PD_MsgLimaDestructionRequestAck (ctxt_p, &pvalue->u.msg_lima_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_request_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_request_ack");

         stat = asn1PD_MsgLimaUpdateRequestAck (ctxt_p, &pvalue->u.msg_lima_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_ack");

         pvalue->u.msg_pion_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrderAck);
         if (pvalue->u.msg_pion_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrderAck (ctxt_p, pvalue->u.msg_pion_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_ack");

         pvalue->u.msg_automate_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrderAck);
         if (pvalue->u.msg_automate_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrderAck (ctxt_p, pvalue->u.msg_automate_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_ack");

         pvalue->u.msg_population_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrderAck);
         if (pvalue->u.msg_population_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrderAck (ctxt_p, pvalue->u.msg_population_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_frag_order_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_frag_order_ack");

         pvalue->u.msg_frag_order_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFragOrderAck);
         if (pvalue->u.msg_frag_order_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgFragOrderAck (ctxt_p, pvalue->u.msg_frag_order_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode_ack */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode_ack");

         pvalue->u.msg_set_automate_mode_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomateModeAck);
         if (pvalue->u.msg_set_automate_mode_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSetAutomateModeAck (ctxt_p, pvalue->u.msg_set_automate_mode_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action_ack */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action_ack");

         pvalue->u.msg_unit_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicActionAck);
         if (pvalue->u.msg_unit_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitMagicActionAck (ctxt_p, pvalue->u.msg_unit_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action_ack */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action_ack");

         pvalue->u.msg_object_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicActionAck);
         if (pvalue->u.msg_object_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectMagicActionAck (ctxt_p, pvalue->u.msg_object_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action_ack */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action_ack");

         pvalue->u.msg_population_magic_action_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicActionAck);
         if (pvalue->u.msg_population_magic_action_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationMagicActionAck (ctxt_p, pvalue->u.msg_population_magic_action_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie_ack */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie_ack");

         pvalue->u.msg_change_diplomatie_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatieAck);
         if (pvalue->u.msg_change_diplomatie_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatieAck (ctxt_p, pvalue->u.msg_change_diplomatie_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_groupe_connaissance_ack */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_groupe_connaissance_ack");

         pvalue->u.msg_automate_change_groupe_connaissance_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateChangeGroupeConnaissanceAck);
         if (pvalue->u.msg_automate_change_groupe_connaissance_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateChangeGroupeConnaissanceAck (ctxt_p, pvalue->u.msg_automate_change_groupe_connaissance_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques_ack */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques_ack");

         pvalue->u.msg_automate_change_liens_logistiques_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateChangeLiensLogistiquesAck);
         if (pvalue->u.msg_automate_change_liens_logistiques_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateChangeLiensLogistiquesAck (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior_ack */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior_ack");

         pvalue->u.msg_pion_change_superior_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionChangeSuperiorAck);
         if (pvalue->u.msg_pion_change_superior_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionChangeSuperiorAck (ctxt_p, pvalue->u.msg_pion_change_superior_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux_ack */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux_ack");

         stat = asn1PD_MsgLogRavitaillementPousserFluxAck (ctxt_p, &pvalue->u.msg_log_ravitaillement_pousser_flux_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas_ack */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas_ack");

         stat = asn1PD_MsgLogRavitaillementChangeQuotasAck (ctxt_p, &pvalue->u.msg_log_ravitaillement_change_quotas_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_info */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_info");

         pvalue->u.msg_ctrl_info = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlInfo);
         if (pvalue->u.msg_ctrl_info == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlInfo (ctxt_p, pvalue->u.msg_ctrl_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_begin_tick */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_begin_tick");

         stat = asn1PD_MsgCtrlBeginTick (ctxt_p, &pvalue->u.msg_ctrl_begin_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_end_tick */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_end_tick");

         pvalue->u.msg_ctrl_end_tick = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlEndTick);
         if (pvalue->u.msg_ctrl_end_tick == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlEndTick (ctxt_p, pvalue->u.msg_ctrl_end_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_stop_ack */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop_ack");

         stat = asn1PD_MsgCtrlStopAck (ctxt_p, &pvalue->u.msg_ctrl_stop_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause_ack */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause_ack");

         stat = asn1PD_MsgCtrlPauseAck (ctxt_p, &pvalue->u.msg_ctrl_pause_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume_ack */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume_ack");

         stat = asn1PD_MsgCtrlResumeAck (ctxt_p, &pvalue->u.msg_ctrl_resume_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor_ack */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor_ack");

         pvalue->u.msg_ctrl_change_time_factor_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlChangeTimeFactorAck);
         if (pvalue->u.msg_ctrl_change_time_factor_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlChangeTimeFactorAck (ctxt_p, pvalue->u.msg_ctrl_change_time_factor_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale_ack */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale_ack");

         stat = asn1PD_MsgCtrlMeteoGlobaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale_ack */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale_ack");

         stat = asn1PD_MsgCtrlMeteoLocaleAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_begin */
      case 29:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_begin");

         stat = asn1PD_MsgCtrlCheckPointSaveBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_end */
      case 30:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_end");

         stat = asn1PD_MsgCtrlCheckPointSaveEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency_ack */
      case 31:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency_ack");

         stat = asn1PD_MsgCtrlCheckPointSetFrequencyAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now_ack */
      case 32:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now_ack");

         stat = asn1PD_MsgCtrlCheckPointSaveNowAck (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_begin */
      case 33:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_begin");

         stat = asn1PD_MsgCtrlSendCurrentStateBegin (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_send_current_state_end */
      case 34:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_send_current_state_end");

         stat = asn1PD_MsgCtrlSendCurrentStateEnd (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation */
      case 35:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation");

         pvalue->u.msg_limit_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreation);
         if (pvalue->u.msg_limit_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitCreation (ctxt_p, pvalue->u.msg_limit_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update */
      case 36:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update");

         pvalue->u.msg_limit_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdate);
         if (pvalue->u.msg_limit_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitUpdate (ctxt_p, pvalue->u.msg_limit_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction */
      case 37:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction");

         stat = asn1PD_MsgLimitDestruction (ctxt_p, &pvalue->u.msg_limit_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation */
      case 38:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation");

         pvalue->u.msg_lima_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreation);
         if (pvalue->u.msg_lima_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaCreation (ctxt_p, pvalue->u.msg_lima_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update */
      case 39:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update");

         pvalue->u.msg_lima_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdate);
         if (pvalue->u.msg_lima_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaUpdate (ctxt_p, pvalue->u.msg_lima_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction */
      case 40:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction");

         stat = asn1PD_MsgLimaDestruction (ctxt_p, &pvalue->u.msg_lima_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_formation_creation */
      case 41:
         PU_PUSHNAME (ctxt_p, "u.msg_formation_creation");

         pvalue->u.msg_formation_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFormationCreation);
         if (pvalue->u.msg_formation_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgFormationCreation (ctxt_p, pvalue->u.msg_formation_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_knowledge_group_creation */
      case 42:
         PU_PUSHNAME (ctxt_p, "u.msg_knowledge_group_creation");

         pvalue->u.msg_knowledge_group_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgKnowledgeGroupCreation);
         if (pvalue->u.msg_knowledge_group_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgKnowledgeGroupCreation (ctxt_p, pvalue->u.msg_knowledge_group_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_side_creation */
      case 43:
         PU_PUSHNAME (ctxt_p, "u.msg_side_creation");

         pvalue->u.msg_side_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSideCreation);
         if (pvalue->u.msg_side_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSideCreation (ctxt_p, pvalue->u.msg_side_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_creation */
      case 44:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_creation");

         pvalue->u.msg_automate_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateCreation);
         if (pvalue->u.msg_automate_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateCreation (ctxt_p, pvalue->u.msg_automate_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_attributes */
      case 45:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_attributes");

         pvalue->u.msg_automate_attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateAttributes);
         if (pvalue->u.msg_automate_attributes == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateAttributes (ctxt_p, pvalue->u.msg_automate_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_creation */
      case 46:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_creation");

         pvalue->u.msg_pion_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionCreation);
         if (pvalue->u.msg_pion_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionCreation (ctxt_p, pvalue->u.msg_pion_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_attributes */
      case 47:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_attributes");

         pvalue->u.msg_unit_attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitAttributes);
         if (pvalue->u.msg_unit_attributes == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitAttributes (ctxt_p, pvalue->u.msg_unit_attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_pathfind */
      case 48:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_pathfind");

         pvalue->u.msg_unit_pathfind = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitPathFind);
         if (pvalue->u.msg_unit_pathfind == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitPathFind (ctxt_p, pvalue->u.msg_unit_pathfind);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 49:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         pvalue->u.msg_change_diplomatie = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatie);
         if (pvalue->u.msg_change_diplomatie == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior */
      case 50:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior");

         pvalue->u.msg_pion_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionChangeSuperior);
         if (pvalue->u.msg_pion_change_superior == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionChangeSuperior (ctxt_p, pvalue->u.msg_pion_change_superior);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques */
      case 51:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques");

         pvalue->u.msg_automate_change_liens_logistiques = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateChangeLiensLogistiques);
         if (pvalue->u.msg_automate_change_liens_logistiques == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateChangeLiensLogistiques (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_creation */
      case 52:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_creation");

         pvalue->u.msg_unit_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeCreation);
         if (pvalue->u.msg_unit_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeCreation (ctxt_p, pvalue->u.msg_unit_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_update */
      case 53:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_update");

         pvalue->u.msg_unit_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeUpdate);
         if (pvalue->u.msg_unit_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeUpdate (ctxt_p, pvalue->u.msg_unit_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_knowledge_destruction */
      case 54:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_knowledge_destruction");

         pvalue->u.msg_unit_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitKnowledgeDestruction);
         if (pvalue->u.msg_unit_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitKnowledgeDestruction (ctxt_p, pvalue->u.msg_unit_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_pion_fire */
      case 55:
         PU_PUSHNAME (ctxt_p, "u.msg_start_pion_fire");

         pvalue->u.msg_start_pion_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartPionFire);
         if (pvalue->u.msg_start_pion_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartPionFire (ctxt_p, pvalue->u.msg_start_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_pion_fire */
      case 56:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_pion_fire");

         pvalue->u.msg_stop_pion_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopPionFire);
         if (pvalue->u.msg_stop_pion_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStopPionFire (ctxt_p, pvalue->u.msg_stop_pion_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_population_fire */
      case 57:
         PU_PUSHNAME (ctxt_p, "u.msg_start_population_fire");

         pvalue->u.msg_start_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartPopulationFire);
         if (pvalue->u.msg_start_population_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartPopulationFire (ctxt_p, pvalue->u.msg_start_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_population_fire */
      case 58:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_population_fire");

         pvalue->u.msg_stop_population_fire = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStopPopulationFire);
         if (pvalue->u.msg_stop_population_fire == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStopPopulationFire (ctxt_p, pvalue->u.msg_stop_population_fire);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_explosion */
      case 59:
         PU_PUSHNAME (ctxt_p, "u.msg_explosion");

         pvalue->u.msg_explosion = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgExplosion);
         if (pvalue->u.msg_explosion == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgExplosion (ctxt_p, pvalue->u.msg_explosion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_start_fire_effect */
      case 60:
         PU_PUSHNAME (ctxt_p, "u.msg_start_fire_effect");

         pvalue->u.msg_start_fire_effect = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgStartFireEffect);
         if (pvalue->u.msg_start_fire_effect == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgStartFireEffect (ctxt_p, pvalue->u.msg_start_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_stop_fire_effect */
      case 61:
         PU_PUSHNAME (ctxt_p, "u.msg_stop_fire_effect");

         stat = asn1PD_MsgStopFireEffect (ctxt_p, &pvalue->u.msg_stop_fire_effect);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_cr */
      case 62:
         PU_PUSHNAME (ctxt_p, "u.msg_cr");

         pvalue->u.msg_cr = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCR);
         if (pvalue->u.msg_cr == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCR (ctxt_p, pvalue->u.msg_cr);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order_management */
      case 63:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order_management");

         pvalue->u.msg_pion_order_management = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrderManagement);
         if (pvalue->u.msg_pion_order_management == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrderManagement (ctxt_p, pvalue->u.msg_pion_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order_management */
      case 64:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order_management");

         pvalue->u.msg_automate_order_management = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrderManagement);
         if (pvalue->u.msg_automate_order_management == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrderManagement (ctxt_p, pvalue->u.msg_automate_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order_management */
      case 65:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order_management");

         pvalue->u.msg_population_order_management = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrderManagement);
         if (pvalue->u.msg_population_order_management == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrderManagement (ctxt_p, pvalue->u.msg_population_order_management);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 66:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         pvalue->u.msg_pion_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrder);
         if (pvalue->u.msg_pion_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 67:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         pvalue->u.msg_automate_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrder);
         if (pvalue->u.msg_automate_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 68:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         pvalue->u.msg_population_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrder);
         if (pvalue->u.msg_population_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_creation */
      case 69:
         PU_PUSHNAME (ctxt_p, "u.msg_object_creation");

         pvalue->u.msg_object_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectCreation);
         if (pvalue->u.msg_object_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectCreation (ctxt_p, pvalue->u.msg_object_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_destruction */
      case 70:
         PU_PUSHNAME (ctxt_p, "u.msg_object_destruction");

         stat = asn1PD_MsgObjectDestruction (ctxt_p, &pvalue->u.msg_object_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_update */
      case 71:
         PU_PUSHNAME (ctxt_p, "u.msg_object_update");

         pvalue->u.msg_object_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectUpdate);
         if (pvalue->u.msg_object_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectUpdate (ctxt_p, pvalue->u.msg_object_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_creation */
      case 72:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_creation");

         pvalue->u.msg_object_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeCreation);
         if (pvalue->u.msg_object_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeCreation (ctxt_p, pvalue->u.msg_object_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_update */
      case 73:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_update");

         pvalue->u.msg_object_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeUpdate);
         if (pvalue->u.msg_object_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeUpdate (ctxt_p, pvalue->u.msg_object_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_knowledge_destruction */
      case 74:
         PU_PUSHNAME (ctxt_p, "u.msg_object_knowledge_destruction");

         pvalue->u.msg_object_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectKnowledgeDestruction);
         if (pvalue->u.msg_object_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectKnowledgeDestruction (ctxt_p, pvalue->u.msg_object_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_creation */
      case 75:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_creation");

         pvalue->u.msg_log_sante_traitement_humain_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainCreation);
         if (pvalue->u.msg_log_sante_traitement_humain_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainCreation (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_update */
      case 76:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_update");

         pvalue->u.msg_log_sante_traitement_humain_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainUpdate);
         if (pvalue->u.msg_log_sante_traitement_humain_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainUpdate (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_traitement_humain_destruction */
      case 77:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_traitement_humain_destruction");

         pvalue->u.msg_log_sante_traitement_humain_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteTraitementHumainDestruction);
         if (pvalue->u.msg_log_sante_traitement_humain_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteTraitementHumainDestruction (ctxt_p, pvalue->u.msg_log_sante_traitement_humain_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_sante_etat */
      case 78:
         PU_PUSHNAME (ctxt_p, "u.msg_log_sante_etat");

         pvalue->u.msg_log_sante_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogSanteEtat);
         if (pvalue->u.msg_log_sante_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogSanteEtat (ctxt_p, pvalue->u.msg_log_sante_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_creation */
      case 79:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_creation");

         pvalue->u.msg_log_maintenance_traitement_equipement_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementCreation);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementCreation (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_update */
      case 80:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_update");

         pvalue->u.msg_log_maintenance_traitement_equipement_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementUpdate);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementUpdate (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_traitement_equipement_destruction */
      case 81:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_traitement_equipement_destruction");

         pvalue->u.msg_log_maintenance_traitement_equipement_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceTraitementEquipementDestruction);
         if (pvalue->u.msg_log_maintenance_traitement_equipement_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceTraitementEquipementDestruction (ctxt_p, pvalue->u.msg_log_maintenance_traitement_equipement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_maintenance_etat */
      case 82:
         PU_PUSHNAME (ctxt_p, "u.msg_log_maintenance_etat");

         pvalue->u.msg_log_maintenance_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogMaintenanceEtat);
         if (pvalue->u.msg_log_maintenance_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogMaintenanceEtat (ctxt_p, pvalue->u.msg_log_maintenance_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_creation */
      case 83:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_creation");

         pvalue->u.msg_log_ravitaillement_traitement_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementCreation);
         if (pvalue->u.msg_log_ravitaillement_traitement_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementCreation (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_update */
      case 84:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_update");

         pvalue->u.msg_log_ravitaillement_traitement_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementUpdate);
         if (pvalue->u.msg_log_ravitaillement_traitement_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementUpdate (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_traitement_destruction */
      case 85:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_traitement_destruction");

         pvalue->u.msg_log_ravitaillement_traitement_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementTraitementDestruction);
         if (pvalue->u.msg_log_ravitaillement_traitement_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementTraitementDestruction (ctxt_p, pvalue->u.msg_log_ravitaillement_traitement_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_etat */
      case 86:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_etat");

         pvalue->u.msg_log_ravitaillement_etat = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementEtat);
         if (pvalue->u.msg_log_ravitaillement_etat == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementEtat (ctxt_p, pvalue->u.msg_log_ravitaillement_etat);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_quotas */
      case 87:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_quotas");

         pvalue->u.msg_log_ravitaillement_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementQuotas);
         if (pvalue->u.msg_log_ravitaillement_quotas == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_creation */
      case 88:
         PU_PUSHNAME (ctxt_p, "u.msg_population_creation");

         pvalue->u.msg_population_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationCreation);
         if (pvalue->u.msg_population_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationCreation (ctxt_p, pvalue->u.msg_population_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_update */
      case 89:
         PU_PUSHNAME (ctxt_p, "u.msg_population_update");

         pvalue->u.msg_population_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationUpdate);
         if (pvalue->u.msg_population_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationUpdate (ctxt_p, pvalue->u.msg_population_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_creation */
      case 90:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_creation");

         pvalue->u.msg_population_concentration_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationCreation);
         if (pvalue->u.msg_population_concentration_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationCreation (ctxt_p, pvalue->u.msg_population_concentration_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_destruction */
      case 91:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_destruction");

         pvalue->u.msg_population_concentration_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationDestruction);
         if (pvalue->u.msg_population_concentration_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationDestruction (ctxt_p, pvalue->u.msg_population_concentration_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_update */
      case 92:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_update");

         pvalue->u.msg_population_concentration_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationUpdate);
         if (pvalue->u.msg_population_concentration_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationUpdate (ctxt_p, pvalue->u.msg_population_concentration_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_creation */
      case 93:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_creation");

         pvalue->u.msg_population_flux_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxCreation);
         if (pvalue->u.msg_population_flux_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxCreation (ctxt_p, pvalue->u.msg_population_flux_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_destruction */
      case 94:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_destruction");

         pvalue->u.msg_population_flux_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxDestruction);
         if (pvalue->u.msg_population_flux_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxDestruction (ctxt_p, pvalue->u.msg_population_flux_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_update */
      case 95:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_update");

         pvalue->u.msg_population_flux_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxUpdate);
         if (pvalue->u.msg_population_flux_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxUpdate (ctxt_p, pvalue->u.msg_population_flux_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_creation */
      case 96:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_creation");

         pvalue->u.msg_population_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeCreation);
         if (pvalue->u.msg_population_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_update */
      case 97:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_update");

         pvalue->u.msg_population_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeUpdate);
         if (pvalue->u.msg_population_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_knowledge_destruction */
      case 98:
         PU_PUSHNAME (ctxt_p, "u.msg_population_knowledge_destruction");

         pvalue->u.msg_population_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationKnowledgeDestruction);
         if (pvalue->u.msg_population_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_creation */
      case 99:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_creation");

         pvalue->u.msg_population_concentration_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeCreation);
         if (pvalue->u.msg_population_concentration_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeCreation (ctxt_p, pvalue->u.msg_population_concentration_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_destruction */
      case 100:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_destruction");

         pvalue->u.msg_population_concentration_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeDestruction);
         if (pvalue->u.msg_population_concentration_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_concentration_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_concentration_knowledge_update */
      case 101:
         PU_PUSHNAME (ctxt_p, "u.msg_population_concentration_knowledge_update");

         pvalue->u.msg_population_concentration_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationConcentrationKnowledgeUpdate);
         if (pvalue->u.msg_population_concentration_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationConcentrationKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_concentration_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_creation */
      case 102:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_creation");

         pvalue->u.msg_population_flux_knowledge_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeCreation);
         if (pvalue->u.msg_population_flux_knowledge_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeCreation (ctxt_p, pvalue->u.msg_population_flux_knowledge_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_destruction */
      case 103:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_destruction");

         pvalue->u.msg_population_flux_knowledge_destruction = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeDestruction);
         if (pvalue->u.msg_population_flux_knowledge_destruction == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeDestruction (ctxt_p, pvalue->u.msg_population_flux_knowledge_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_flux_knowledge_update */
      case 104:
         PU_PUSHNAME (ctxt_p, "u.msg_population_flux_knowledge_update");

         pvalue->u.msg_population_flux_knowledge_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationFluxKnowledgeUpdate);
         if (pvalue->u.msg_population_flux_knowledge_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationFluxKnowledgeUpdate (ctxt_p, pvalue->u.msg_population_flux_knowledge_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsSimToClient_msg: end\n");

   return (stat);
}

int ASN1C_MsgsSimToClient_msg::Decode ()
{
   return asn1PD_MsgsSimToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsSimToClient                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimToClient::ASN1C_MsgsSimToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimToClient: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PE_MsgsSimToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgsSimToClient: end\n");
   return (stat);
}

int ASN1C_MsgsSimToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsSimToClient: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PD_MsgsSimToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgsSimToClient: end\n");

   return (stat);
}

int ASN1C_MsgsSimToClient::Decode ()
{
   return asn1PD_MsgsSimToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToSim_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToSim_msg::ASN1C_MsgsClientToSim_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToSim_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim_msg* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsClientToSim_msg: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 27);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_stop */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop");

         stat = asn1PE_MsgCtrlStop (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause");

         stat = asn1PE_MsgCtrlPause (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume");

         stat = asn1PE_MsgCtrlResume (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor");

         stat = asn1PE_MsgCtrlChangeTimeFactor (ctxt_p, pvalue->u.msg_ctrl_change_time_factor);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale");

         stat = asn1PE_MsgCtrlMeteoGlobale (ctxt_p, pvalue->u.msg_ctrl_meteo_globale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale");

         stat = asn1PE_MsgCtrlMeteoLocale (ctxt_p, pvalue->u.msg_ctrl_meteo_locale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now");

         stat = asn1PE_MsgCtrlCheckPointSaveNow (ctxt_p, pvalue->u.msg_ctrl_checkpoint_save_now);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency");

         stat = asn1PE_MsgCtrlCheckPointSetFrequency (ctxt_p, pvalue->u.msg_ctrl_checkpoint_set_frequency);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation_request */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_request");

         stat = asn1PE_MsgLimitCreationRequest (ctxt_p, pvalue->u.msg_limit_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_request */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_request");

         stat = asn1PE_MsgLimitDestructionRequest (ctxt_p, pvalue->u.msg_limit_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_request */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_request");

         stat = asn1PE_MsgLimitUpdateRequest (ctxt_p, pvalue->u.msg_limit_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_request */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_request");

         stat = asn1PE_MsgLimaCreationRequest (ctxt_p, pvalue->u.msg_lima_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_request */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_request");

         stat = asn1PE_MsgLimaDestruction (ctxt_p, pvalue->u.msg_lima_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_request */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_request");

         stat = asn1PE_MsgLimaUpdateRequest (ctxt_p, pvalue->u.msg_lima_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         stat = asn1PE_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         stat = asn1PE_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         stat = asn1PE_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_frag_order */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_frag_order");

         stat = asn1PE_MsgFragOrder (ctxt_p, pvalue->u.msg_frag_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode");

         stat = asn1PE_MsgSetAutomateMode (ctxt_p, pvalue->u.msg_set_automate_mode);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action");

         stat = asn1PE_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action");

         stat = asn1PE_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action");

         stat = asn1PE_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         stat = asn1PE_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_groupe_connaissance */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_groupe_connaissance");

         stat = asn1PE_MsgAutomateChangeGroupeConnaissance (ctxt_p, pvalue->u.msg_automate_change_groupe_connaissance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques");

         stat = asn1PE_MsgAutomateChangeLiensLogistiques (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior");

         stat = asn1PE_MsgPionChangeSuperior (ctxt_p, pvalue->u.msg_pion_change_superior);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux");

         stat = asn1PE_MsgLogRavitaillementPousserFlux (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas */
      case 28:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas");

         stat = asn1PE_MsgLogRavitaillementChangeQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsClientToSim_msg: end\n");
   return (stat);
}

int ASN1C_MsgsClientToSim_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToSim_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsClientToSim_msg: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 27);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_stop */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_stop");

         stat = asn1PD_MsgCtrlStop (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_pause */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_pause");

         stat = asn1PD_MsgCtrlPause (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_resume */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_resume");

         stat = asn1PD_MsgCtrlResume (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_change_time_factor */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_change_time_factor");

         stat = asn1PD_MsgCtrlChangeTimeFactor (ctxt_p, &pvalue->u.msg_ctrl_change_time_factor);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_globale */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_globale");

         pvalue->u.msg_ctrl_meteo_globale = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlMeteoGlobale);
         if (pvalue->u.msg_ctrl_meteo_globale == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlMeteoGlobale (ctxt_p, pvalue->u.msg_ctrl_meteo_globale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_meteo_locale */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_meteo_locale");

         pvalue->u.msg_ctrl_meteo_locale = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlMeteoLocale);
         if (pvalue->u.msg_ctrl_meteo_locale == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlMeteoLocale (ctxt_p, pvalue->u.msg_ctrl_meteo_locale);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_save_now */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_save_now");

         pvalue->u.msg_ctrl_checkpoint_save_now = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlCheckPointSaveNow);
         if (pvalue->u.msg_ctrl_checkpoint_save_now == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlCheckPointSaveNow (ctxt_p, pvalue->u.msg_ctrl_checkpoint_save_now);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_checkpoint_set_frequency */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_checkpoint_set_frequency");

         stat = asn1PD_MsgCtrlCheckPointSetFrequency (ctxt_p, &pvalue->u.msg_ctrl_checkpoint_set_frequency);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_creation_request */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_creation_request");

         pvalue->u.msg_limit_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitCreationRequest);
         if (pvalue->u.msg_limit_creation_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitCreationRequest (ctxt_p, pvalue->u.msg_limit_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_destruction_request */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_destruction_request");

         stat = asn1PD_MsgLimitDestructionRequest (ctxt_p, &pvalue->u.msg_limit_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_limit_update_request */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.msg_limit_update_request");

         pvalue->u.msg_limit_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimitUpdateRequest);
         if (pvalue->u.msg_limit_update_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimitUpdateRequest (ctxt_p, pvalue->u.msg_limit_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_creation_request */
      case 11:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_creation_request");

         pvalue->u.msg_lima_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaCreationRequest);
         if (pvalue->u.msg_lima_creation_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaCreationRequest (ctxt_p, pvalue->u.msg_lima_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_destruction_request */
      case 12:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_destruction_request");

         stat = asn1PD_MsgLimaDestruction (ctxt_p, &pvalue->u.msg_lima_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_lima_update_request */
      case 13:
         PU_PUSHNAME (ctxt_p, "u.msg_lima_update_request");

         pvalue->u.msg_lima_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLimaUpdateRequest);
         if (pvalue->u.msg_lima_update_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLimaUpdateRequest (ctxt_p, pvalue->u.msg_lima_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_order */
      case 14:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_order");

         pvalue->u.msg_pion_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionOrder);
         if (pvalue->u.msg_pion_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionOrder (ctxt_p, pvalue->u.msg_pion_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_order */
      case 15:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_order");

         pvalue->u.msg_automate_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateOrder);
         if (pvalue->u.msg_automate_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateOrder (ctxt_p, pvalue->u.msg_automate_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_order */
      case 16:
         PU_PUSHNAME (ctxt_p, "u.msg_population_order");

         pvalue->u.msg_population_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationOrder);
         if (pvalue->u.msg_population_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationOrder (ctxt_p, pvalue->u.msg_population_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_frag_order */
      case 17:
         PU_PUSHNAME (ctxt_p, "u.msg_frag_order");

         pvalue->u.msg_frag_order = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgFragOrder);
         if (pvalue->u.msg_frag_order == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgFragOrder (ctxt_p, pvalue->u.msg_frag_order);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_set_automate_mode */
      case 18:
         PU_PUSHNAME (ctxt_p, "u.msg_set_automate_mode");

         pvalue->u.msg_set_automate_mode = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgSetAutomateMode);
         if (pvalue->u.msg_set_automate_mode == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgSetAutomateMode (ctxt_p, pvalue->u.msg_set_automate_mode);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_unit_magic_action */
      case 19:
         PU_PUSHNAME (ctxt_p, "u.msg_unit_magic_action");

         pvalue->u.msg_unit_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgUnitMagicAction);
         if (pvalue->u.msg_unit_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgUnitMagicAction (ctxt_p, pvalue->u.msg_unit_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_object_magic_action */
      case 20:
         PU_PUSHNAME (ctxt_p, "u.msg_object_magic_action");

         pvalue->u.msg_object_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgObjectMagicAction);
         if (pvalue->u.msg_object_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgObjectMagicAction (ctxt_p, pvalue->u.msg_object_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_population_magic_action */
      case 21:
         PU_PUSHNAME (ctxt_p, "u.msg_population_magic_action");

         pvalue->u.msg_population_magic_action = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPopulationMagicAction);
         if (pvalue->u.msg_population_magic_action == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPopulationMagicAction (ctxt_p, pvalue->u.msg_population_magic_action);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_change_diplomatie */
      case 22:
         PU_PUSHNAME (ctxt_p, "u.msg_change_diplomatie");

         pvalue->u.msg_change_diplomatie = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgChangeDiplomatie);
         if (pvalue->u.msg_change_diplomatie == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgChangeDiplomatie (ctxt_p, pvalue->u.msg_change_diplomatie);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_groupe_connaissance */
      case 23:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_groupe_connaissance");

         pvalue->u.msg_automate_change_groupe_connaissance = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateChangeGroupeConnaissance);
         if (pvalue->u.msg_automate_change_groupe_connaissance == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateChangeGroupeConnaissance (ctxt_p, pvalue->u.msg_automate_change_groupe_connaissance);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_automate_change_liens_logistiques */
      case 24:
         PU_PUSHNAME (ctxt_p, "u.msg_automate_change_liens_logistiques");

         pvalue->u.msg_automate_change_liens_logistiques = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAutomateChangeLiensLogistiques);
         if (pvalue->u.msg_automate_change_liens_logistiques == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAutomateChangeLiensLogistiques (ctxt_p, pvalue->u.msg_automate_change_liens_logistiques);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_pion_change_superior */
      case 25:
         PU_PUSHNAME (ctxt_p, "u.msg_pion_change_superior");

         pvalue->u.msg_pion_change_superior = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgPionChangeSuperior);
         if (pvalue->u.msg_pion_change_superior == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgPionChangeSuperior (ctxt_p, pvalue->u.msg_pion_change_superior);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_pousser_flux */
      case 26:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_pousser_flux");

         pvalue->u.msg_log_ravitaillement_pousser_flux = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementPousserFlux);
         if (pvalue->u.msg_log_ravitaillement_pousser_flux == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementPousserFlux (ctxt_p, pvalue->u.msg_log_ravitaillement_pousser_flux);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_log_ravitaillement_change_quotas */
      case 27:
         PU_PUSHNAME (ctxt_p, "u.msg_log_ravitaillement_change_quotas");

         pvalue->u.msg_log_ravitaillement_change_quotas = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgLogRavitaillementChangeQuotas);
         if (pvalue->u.msg_log_ravitaillement_change_quotas == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgLogRavitaillementChangeQuotas (ctxt_p, pvalue->u.msg_log_ravitaillement_change_quotas);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsClientToSim_msg: end\n");

   return (stat);
}

int ASN1C_MsgsClientToSim_msg::Decode ()
{
   return asn1PD_MsgsClientToSim_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToSim                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToSim::ASN1C_MsgsClientToSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsClientToSim: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PE_MsgsClientToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgsClientToSim: end\n");
   return (stat);
}

int ASN1C_MsgsClientToSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToSim* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsClientToSim: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PD_MsgsClientToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgsClientToSim: end\n");

   return (stat);
}

int ASN1C_MsgsClientToSim::Decode ()
{
   return asn1PD_MsgsClientToSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsSimToMiddle                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsSimToMiddle::ASN1C_MsgsSimToMiddle (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsSimToMiddle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsSimToMiddle (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToMiddle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsSimToMiddle: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgsSimToMiddle: end\n");
   return (stat);
}

int ASN1C_MsgsSimToMiddle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsSimToMiddle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsSimToMiddle (ASN1CTXT* ctxt_p, ASN1T_MsgsSimToMiddle* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsSimToMiddle: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }


   rtdiag ("asn1PD_MsgsSimToMiddle: end\n");

   return (stat);
}

int ASN1C_MsgsSimToMiddle::Decode ()
{
   return asn1PD_MsgsSimToMiddle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToSim_msg                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToSim_msg::ASN1C_MsgsMiddleToSim_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToSim_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim_msg* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMiddleToSim_msg: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_client_announcement */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_client_announcement");

         stat = asn1PE_MsgCtrlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsMiddleToSim_msg: end\n");
   return (stat);
}

int ASN1C_MsgsMiddleToSim_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToSim_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToSim_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsMiddleToSim_msg: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_client_announcement */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_client_announcement");

         stat = asn1PD_MsgCtrlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsMiddleToSim_msg: end\n");

   return (stat);
}

int ASN1C_MsgsMiddleToSim_msg::Decode ()
{
   return asn1PD_MsgsMiddleToSim_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToSim                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToSim::ASN1C_MsgsMiddleToSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMiddleToSim: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PE_MsgsMiddleToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgsMiddleToSim: end\n");
   return (stat);
}

int ASN1C_MsgsMiddleToSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToSim* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsMiddleToSim: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PD_MsgsMiddleToSim_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgsMiddleToSim: end\n");

   return (stat);
}

int ASN1C_MsgsMiddleToSim::Decode ()
{
   return asn1PD_MsgsMiddleToSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToClient_msg                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToClient_msg::ASN1C_MsgsMiddleToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToClient_msg* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMiddleToClient_msg: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 8);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_replay_info */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_replay_info");

         stat = asn1PE_MsgCtrlReplayInfo (ctxt_p, pvalue->u.msg_ctrl_replay_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_skip_to_tick_ack */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_skip_to_tick_ack");

         stat = asn1PE_MsgCtrlSkipToTickAck (ctxt_p, pvalue->u.msg_ctrl_skip_to_tick_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_authentication_response */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_authentication_response");

         stat = asn1PE_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation");

         stat = asn1PE_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation_request_ack */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation_request_ack");

         stat = asn1PE_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update");

         stat = asn1PE_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update_request_ack */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update_request_ack");

         stat = asn1PE_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction");

         stat = asn1PE_MsgProfileDestruction (ctxt_p, pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction_request_ack */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction_request_ack");

         stat = asn1PE_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsMiddleToClient_msg: end\n");
   return (stat);
}

int ASN1C_MsgsMiddleToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsMiddleToClient_msg: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 8);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_replay_info */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_replay_info");

         pvalue->u.msg_ctrl_replay_info = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlReplayInfo);
         if (pvalue->u.msg_ctrl_replay_info == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlReplayInfo (ctxt_p, pvalue->u.msg_ctrl_replay_info);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_ctrl_skip_to_tick_ack */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_skip_to_tick_ack");

         pvalue->u.msg_ctrl_skip_to_tick_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgCtrlSkipToTickAck);
         if (pvalue->u.msg_ctrl_skip_to_tick_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgCtrlSkipToTickAck (ctxt_p, pvalue->u.msg_ctrl_skip_to_tick_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_authentication_response */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_authentication_response");

         pvalue->u.msg_authentication_response = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationResponse);
         if (pvalue->u.msg_authentication_response == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation");

         pvalue->u.msg_profile_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreation);
         if (pvalue->u.msg_profile_creation == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation_request_ack */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation_request_ack");

         pvalue->u.msg_profile_creation_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequestAck);
         if (pvalue->u.msg_profile_creation_request_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update");

         pvalue->u.msg_profile_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdate);
         if (pvalue->u.msg_profile_update == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update_request_ack */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update_request_ack");

         pvalue->u.msg_profile_update_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequestAck);
         if (pvalue->u.msg_profile_update_request_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction");

         stat = asn1PD_MsgProfileDestruction (ctxt_p, &pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction_request_ack */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction_request_ack");

         pvalue->u.msg_profile_destruction_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileDestructionRequestAck);
         if (pvalue->u.msg_profile_destruction_request_ack == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsMiddleToClient_msg: end\n");

   return (stat);
}

int ASN1C_MsgsMiddleToClient_msg::Decode ()
{
   return asn1PD_MsgsMiddleToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsMiddleToClient                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgsMiddleToClient::ASN1C_MsgsMiddleToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsMiddleToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsMiddleToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToClient* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsMiddleToClient: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PE_MsgsMiddleToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgsMiddleToClient: end\n");
   return (stat);
}

int ASN1C_MsgsMiddleToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsMiddleToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsMiddleToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsMiddleToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsMiddleToClient: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PD_MsgsMiddleToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgsMiddleToClient: end\n");

   return (stat);
}

int ASN1C_MsgsMiddleToClient::Decode ()
{
   return asn1PD_MsgsMiddleToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToMiddle_msg                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToMiddle_msg::ASN1C_MsgsClientToMiddle_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToMiddle_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToMiddle_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToMiddle_msg* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsClientToMiddle_msg: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_ctrl_skip_to_tick */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_skip_to_tick");

         stat = asn1PE_MsgCtrlSkipToTick (ctxt_p, pvalue->u.msg_ctrl_skip_to_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_authentication_request */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_authentication_request");

         stat = asn1PE_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation_request */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation_request");

         stat = asn1PE_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update_request */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update_request");

         stat = asn1PE_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction_request */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction_request");

         stat = asn1PE_MsgProfileDestructionRequest (ctxt_p, pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgsClientToMiddle_msg: end\n");
   return (stat);
}

int ASN1C_MsgsClientToMiddle_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToMiddle_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToMiddle_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToMiddle_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgsClientToMiddle_msg: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* msg_ctrl_skip_to_tick */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.msg_ctrl_skip_to_tick");

         stat = asn1PD_MsgCtrlSkipToTick (ctxt_p, &pvalue->u.msg_ctrl_skip_to_tick);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_authentication_request */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.msg_authentication_request");

         pvalue->u.msg_authentication_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationRequest);
         if (pvalue->u.msg_authentication_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_creation_request */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_creation_request");

         pvalue->u.msg_profile_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequest);
         if (pvalue->u.msg_profile_creation_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_update_request */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_update_request");

         pvalue->u.msg_profile_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequest);
         if (pvalue->u.msg_profile_update_request == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* msg_profile_destruction_request */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.msg_profile_destruction_request");

         stat = asn1PD_MsgProfileDestructionRequest (ctxt_p, &pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgsClientToMiddle_msg: end\n");

   return (stat);
}

int ASN1C_MsgsClientToMiddle_msg::Decode ()
{
   return asn1PD_MsgsClientToMiddle_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToMiddle                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToMiddle::ASN1C_MsgsClientToMiddle (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToMiddle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToMiddle (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToMiddle* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgsClientToMiddle: start\n");

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode context */

   if (pvalue->context != 0) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PE_MsgsClientToMiddle_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgsClientToMiddle: end\n");
   return (stat);
}

int ASN1C_MsgsClientToMiddle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToMiddle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToMiddle (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToMiddle* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   rtdiag ("asn1PD_MsgsClientToMiddle: start\n");

   /* optional bits */

   PU_NEWFIELD (ctxt_p, "contextPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else contextPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode context */

   if (contextPresent) {
      PU_PUSHNAME (ctxt_p, "context");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   PU_PUSHNAME (ctxt_p, "msg");

   stat = asn1PD_MsgsClientToMiddle_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgsClientToMiddle: end\n");

   return (stat);
}

int ASN1C_MsgsClientToMiddle::Decode ()
{
   return asn1PD_MsgsClientToMiddle (mpContext->GetPtr(), &msgData);
}


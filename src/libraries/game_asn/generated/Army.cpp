/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 24-Dec-2009.
 */
#include "Army.h"

/**************************************************************/
/*                                                            */
/*  ArmyIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_ArmyIncludes::ASN1C_ArmyIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ArmyIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ArmyIncludes (ASN1CTXT* ctxt_p, ASN1T_ArmyIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ArmyIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ArmyIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ArmyIncludes (ASN1CTXT* ctxt_p, ASN1T_ArmyIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ArmyIncludes::Decode ()
{
   return asn1PD_ArmyIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ArmyExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_ArmyExports::ASN1C_ArmyExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ArmyExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_ArmyExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ArmyExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ArmyExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_ArmyExports::Decode ()
{
   return asn1PD_ArmyExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumDiplomacy                                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumDiplomacy::ASN1C_EnumDiplomacy (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDiplomacy& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDiplomacy (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomacy value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumDiplomacy::inconnu: ui = 0; break;
      case EnumDiplomacy::ami: ui = 1; break;
      case EnumDiplomacy::ennemi: ui = 2; break;
      case EnumDiplomacy::neutre: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumDiplomacy::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDiplomacy (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDiplomacy (ASN1CTXT* ctxt_p, ASN1T_EnumDiplomacy* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumDiplomacy::inconnu; break;
      case 1: *pvalue = EnumDiplomacy::ami; break;
      case 2: *pvalue = EnumDiplomacy::ennemi; break;
      case 3: *pvalue = EnumDiplomacy::neutre; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumDiplomacy::Decode ()
{
   return asn1PD_EnumDiplomacy (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomacy                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomacy::ASN1C_MsgChangeDiplomacy (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomacy& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomacy (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomacy* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_camp1 */

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return stat;

   /* encode oid_camp2 */

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return stat;

   /* encode diplomatie */

   stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgChangeDiplomacy::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomacy (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomacy (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomacy* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_camp1 */

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return stat;

   /* decode oid_camp2 */

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return stat;

   /* decode diplomatie */

   stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgChangeDiplomacy::Decode ()
{
   return asn1PD_MsgChangeDiplomacy (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeDiplomacyErrorCode                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeDiplomacyErrorCode::ASN1C_EnumChangeDiplomacyErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeDiplomacyErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeDiplomacyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomacyErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumChangeDiplomacyErrorCode::no_error: ui = 0; break;
      case EnumChangeDiplomacyErrorCode::error_invalid_camp: ui = 1; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumChangeDiplomacyErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeDiplomacyErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeDiplomacyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeDiplomacyErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumChangeDiplomacyErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeDiplomacyErrorCode::error_invalid_camp; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumChangeDiplomacyErrorCode::Decode ()
{
   return asn1PD_EnumChangeDiplomacyErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgTeamCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgTeamCreation::ASN1C_MsgTeamCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgTeamCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgTeamCreation (ASN1CTXT* ctxt_p, ASN1T_MsgTeamCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Team (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode nom */

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* encode type */

   stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgTeamCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgTeamCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgTeamCreation (ASN1CTXT* ctxt_p, ASN1T_MsgTeamCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Team (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode nom */

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* decode type */

   stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgTeamCreation::Decode ()
{
   return asn1PD_MsgTeamCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeDiplomacyAck                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeDiplomacyAck::ASN1C_MsgChangeDiplomacyAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeDiplomacyAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeDiplomacyAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomacyAck* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_camp1 */

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp1);
   if (stat != ASN_OK) return stat;

   /* encode oid_camp2 */

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp2);
   if (stat != ASN_OK) return stat;

   /* encode diplomatie */

   stat = asn1PE_EnumDiplomacy (ctxt_p, pvalue->diplomatie);
   if (stat != ASN_OK) return stat;

   /* encode error_code */

   stat = asn1PE_EnumChangeDiplomacyErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgChangeDiplomacyAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeDiplomacyAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeDiplomacyAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeDiplomacyAck* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_camp1 */

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp1);
   if (stat != ASN_OK) return stat;

   /* decode oid_camp2 */

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp2);
   if (stat != ASN_OK) return stat;

   /* decode diplomatie */

   stat = asn1PD_EnumDiplomacy (ctxt_p, &pvalue->diplomatie);
   if (stat != ASN_OK) return stat;

   /* decode error_code */

   stat = asn1PD_EnumChangeDiplomacyErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgChangeDiplomacyAck::Decode ()
{
   return asn1PD_MsgChangeDiplomacyAck (mpContext->GetPtr(), &msgData);
}


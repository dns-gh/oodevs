/* This file was generated by ASN1C V5.31 on 08-Feb-2007 */

#include "Automate.h"

void asn1Print_AutomateIncludes (ASN1ConstCharPtr name, ASN1T_AutomateIncludes* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.baseExports", name);

   sprintf (namebuf, "%s.unitExports", name);

}

void ASN1C_AutomateIncludes::Print (ASN1ConstCharPtr name)

{
   asn1Print_AutomateIncludes (name, &msgData);
}

void asn1Print_AutomateExports (ASN1ConstCharPtr name)
{
}

void ASN1C_AutomateExports::Print (ASN1ConstCharPtr name)

{
   asn1Print_AutomateExports (name);
}

void asn1Print_EnumAutomateState (ASN1ConstCharPtr name, ASN1T_EnumAutomateState* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("embraye\n"); break;
      case 1: printf ("debraye\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumAutomateState::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumAutomateState (name, &msgData);
}

void asn1Print_MsgAutomateCreation (ASN1ConstCharPtr name, ASN1T_MsgAutomateCreation* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.type_automate", name);
   asn1Print_TypeAutomate (namebuf, &pvalue->type_automate);

   sprintf (namebuf, "%s.nom", name);
   rtPrintCharStr (namebuf, pvalue->nom);

   sprintf (namebuf, "%s.oid_formation", name);
   asn1Print_Formation (namebuf, &pvalue->oid_formation);

   sprintf (namebuf, "%s.oid_camp", name);
   asn1Print_Camp (namebuf, &pvalue->oid_camp);

   sprintf (namebuf, "%s.oid_groupe_connaissance", name);
   asn1Print_OID (namebuf, &pvalue->oid_groupe_connaissance);

}

void ASN1C_MsgAutomateCreation::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateCreation (name, &msgData);
}

void asn1Print_MsgAutomateAttributes (ASN1ConstCharPtr name, ASN1T_MsgAutomateAttributes* pvalue)
{
   char namebuf[512];

   printf ("%s.m.etat_automatePresent = %d\n", name, (int)pvalue->m.etat_automatePresent);
   printf ("%s.m.rapport_de_forcePresent = %d\n", name, (int)pvalue->m.rapport_de_forcePresent);
   printf ("%s.m.combat_de_rencontrePresent = %d\n", name, (int)pvalue->m.combat_de_rencontrePresent);
   printf ("%s.m.etat_operationnelPresent = %d\n", name, (int)pvalue->m.etat_operationnelPresent);
   printf ("%s.m.roePresent = %d\n", name, (int)pvalue->m.roePresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.etat_automatePresent) {
      sprintf (namebuf, "%s.etat_automate", name);
      asn1Print_EnumAutomateState (namebuf, &pvalue->etat_automate);
   }

   if (pvalue->m.rapport_de_forcePresent) {
      sprintf (namebuf, "%s.rapport_de_force", name);
      asn1Print_EnumEtatRapFor (namebuf, &pvalue->rapport_de_force);
   }

   if (pvalue->m.combat_de_rencontrePresent) {
      sprintf (namebuf, "%s.combat_de_rencontre", name);
      asn1Print_EnumEtatCombatRencontre (namebuf, &pvalue->combat_de_rencontre);
   }

   if (pvalue->m.etat_operationnelPresent) {
      sprintf (namebuf, "%s.etat_operationnel", name);
      asn1Print_EnumEtatOperationnel (namebuf, &pvalue->etat_operationnel);
   }

   if (pvalue->m.roePresent) {
      sprintf (namebuf, "%s.roe", name);
      asn1Print_EnumRoe (namebuf, &pvalue->roe);
   }

}

void ASN1C_MsgAutomateAttributes::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateAttributes (name, &msgData);
}

void asn1Print_EnumSetAutomateModeErrorCode (ASN1ConstCharPtr name, ASN1T_EnumSetAutomateModeErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_unit\n"); break;
      case 2: printf ("error_unit_not_automate\n"); break;
      case 3: printf ("error_already_embraye\n"); break;
      case 4: printf ("error_already_debraye\n"); break;
      case 5: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumSetAutomateModeErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumSetAutomateModeErrorCode (name, &msgData);
}

void asn1Print_MsgSetAutomateMode (ASN1ConstCharPtr name, ASN1T_MsgSetAutomateMode* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_Agent (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.mode", name);
   asn1Print_EnumAutomateState (namebuf, &pvalue->mode);

}

void ASN1C_MsgSetAutomateMode::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSetAutomateMode (name, &msgData);
}

void asn1Print_MsgSetAutomateModeAck (ASN1ConstCharPtr name, ASN1T_MsgSetAutomateModeAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_Agent (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumSetAutomateModeErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgSetAutomateModeAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgSetAutomateModeAck (name, &msgData);
}

void asn1Print_EnumChangeAutomateErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeAutomateErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_pion\n"); break;
      case 2: printf ("error_invalid_automate\n"); break;
      case 3: printf ("error_camps_incompatibles\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeAutomateErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeAutomateErrorCode (name, &msgData);
}

void asn1Print_MsgChangeAutomateAck (ASN1ConstCharPtr name, ASN1T_MsgChangeAutomateAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeAutomateErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeAutomateAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeAutomateAck (name, &msgData);
}

void asn1Print_MsgChangeAutomate (ASN1ConstCharPtr name, ASN1T_MsgChangeAutomate* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_pion", name);
   asn1Print_Agent (namebuf, &pvalue->oid_pion);

   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

}

void ASN1C_MsgChangeAutomate::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeAutomate (name, &msgData);
}

void asn1Print_MsgChangeLiensLogistiques (ASN1ConstCharPtr name, ASN1T_MsgChangeLiensLogistiques* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_tc2Present = %d\n", name, (int)pvalue->m.oid_tc2Present);
   printf ("%s.m.oid_maintenancePresent = %d\n", name, (int)pvalue->m.oid_maintenancePresent);
   printf ("%s.m.oid_santePresent = %d\n", name, (int)pvalue->m.oid_santePresent);
   printf ("%s.m.oid_ravitaillementPresent = %d\n", name, (int)pvalue->m.oid_ravitaillementPresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.oid_tc2Present) {
      sprintf (namebuf, "%s.oid_tc2", name);
      asn1Print_Automate (namebuf, &pvalue->oid_tc2);
   }

   if (pvalue->m.oid_maintenancePresent) {
      sprintf (namebuf, "%s.oid_maintenance", name);
      asn1Print_Automate (namebuf, &pvalue->oid_maintenance);
   }

   if (pvalue->m.oid_santePresent) {
      sprintf (namebuf, "%s.oid_sante", name);
      asn1Print_Automate (namebuf, &pvalue->oid_sante);
   }

   if (pvalue->m.oid_ravitaillementPresent) {
      sprintf (namebuf, "%s.oid_ravitaillement", name);
      asn1Print_Automate (namebuf, &pvalue->oid_ravitaillement);
   }

}

void ASN1C_MsgChangeLiensLogistiques::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeLiensLogistiques (name, &msgData);
}

void asn1Print_EnumChangeLiensLogistiquesErrorCode (ASN1ConstCharPtr name, ASN1T_EnumChangeLiensLogistiquesErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_automate\n"); break;
      case 2: printf ("error_invalid_automate_tc2\n"); break;
      case 3: printf ("error_invalid_automate_maintenance\n"); break;
      case 4: printf ("error_invalid_automate_sante\n"); break;
      case 5: printf ("error_invalid_automate_ravitaillement\n"); break;
      case 6: printf ("error_unit_surrendered\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumChangeLiensLogistiquesErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumChangeLiensLogistiquesErrorCode (name, &msgData);
}

void asn1Print_MsgChangeLiensLogistiquesAck (ASN1ConstCharPtr name, ASN1T_MsgChangeLiensLogistiquesAck* pvalue)
{
   char namebuf[512];

   printf ("%s.m.oid_tc2Present = %d\n", name, (int)pvalue->m.oid_tc2Present);
   printf ("%s.m.oid_maintenancePresent = %d\n", name, (int)pvalue->m.oid_maintenancePresent);
   printf ("%s.m.oid_santePresent = %d\n", name, (int)pvalue->m.oid_santePresent);
   printf ("%s.m.oid_ravitaillementPresent = %d\n", name, (int)pvalue->m.oid_ravitaillementPresent);
   sprintf (namebuf, "%s.oid_automate", name);
   asn1Print_Automate (namebuf, &pvalue->oid_automate);

   if (pvalue->m.oid_tc2Present) {
      sprintf (namebuf, "%s.oid_tc2", name);
      asn1Print_Automate (namebuf, &pvalue->oid_tc2);
   }

   if (pvalue->m.oid_maintenancePresent) {
      sprintf (namebuf, "%s.oid_maintenance", name);
      asn1Print_Automate (namebuf, &pvalue->oid_maintenance);
   }

   if (pvalue->m.oid_santePresent) {
      sprintf (namebuf, "%s.oid_sante", name);
      asn1Print_Automate (namebuf, &pvalue->oid_sante);
   }

   if (pvalue->m.oid_ravitaillementPresent) {
      sprintf (namebuf, "%s.oid_ravitaillement", name);
      asn1Print_Automate (namebuf, &pvalue->oid_ravitaillement);
   }

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumChangeLiensLogistiquesErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgChangeLiensLogistiquesAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgChangeLiensLogistiquesAck (name, &msgData);
}


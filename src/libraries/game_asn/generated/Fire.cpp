/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 18-Jun-2007.
 */
#include "Fire.h"

/**************************************************************/
/*                                                            */
/*  FireIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_FireIncludes::ASN1C_FireIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_FireIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FireIncludes (ASN1CTXT* ctxt_p, ASN1T_FireIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_FireIncludes: end\n");
   return (stat);
}

int ASN1C_FireIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FireIncludes (ASN1CTXT* ctxt_p, ASN1T_FireIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_FireIncludes: end\n");

   return (stat);
}

int ASN1C_FireIncludes::Decode ()
{
   return asn1PD_FireIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FireExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_FireExports::ASN1C_FireExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_FireExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_FireExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_FireExports: end\n");
   return (stat);
}

int ASN1C_FireExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FireExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_FireExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_FireExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_FireExports: end\n");

   return (stat);
}

int ASN1C_FireExports::Decode ()
{
   return asn1PD_FireExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  UnitHumanFireDamage                                       */
/*                                                            */
/**************************************************************/

ASN1C_UnitHumanFireDamage::ASN1C_UnitHumanFireDamage (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitHumanFireDamage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitHumanFireDamage (ASN1CTXT* ctxt_p, ASN1T_UnitHumanFireDamage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_UnitHumanFireDamage: start\n");

   /* encode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_non_blesses */

   PU_PUSHNAME (ctxt_p, "nb_non_blesses");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_non_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_1 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_1");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_2 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_2");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_3 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_3");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_urgence_extreme */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_extreme");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_urgence_extreme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_UnitHumanFireDamage: end\n");
   return (stat);
}

int ASN1C_UnitHumanFireDamage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitHumanFireDamage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitHumanFireDamage (ASN1CTXT* ctxt_p, ASN1T_UnitHumanFireDamage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_UnitHumanFireDamage: start\n");

   /* decode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_non_blesses */

   PU_PUSHNAME (ctxt_p, "nb_non_blesses");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_non_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_1 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_1");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_2 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_2");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_3 */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_3");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_urgence_extreme */

   PU_PUSHNAME (ctxt_p, "nb_blesses_urgence_extreme");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_urgence_extreme);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_UnitHumanFireDamage: end\n");

   return (stat);
}

int ASN1C_UnitHumanFireDamage::Decode ()
{
   return asn1PD_UnitHumanFireDamage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitEquipmentFireDamage                                   */
/*                                                            */
/**************************************************************/

ASN1C_UnitEquipmentFireDamage::ASN1C_UnitEquipmentFireDamage (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitEquipmentFireDamage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitEquipmentFireDamage (ASN1CTXT* ctxt_p, ASN1T_UnitEquipmentFireDamage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_UnitEquipmentFireDamage: start\n");

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_UnitEquipmentFireDamage: end\n");
   return (stat);
}

int ASN1C_UnitEquipmentFireDamage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitEquipmentFireDamage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitEquipmentFireDamage (ASN1CTXT* ctxt_p, ASN1T_UnitEquipmentFireDamage* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_UnitEquipmentFireDamage: start\n");

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_UnitEquipmentFireDamage: end\n");

   return (stat);
}

int ASN1C_UnitEquipmentFireDamage::Decode ()
{
   return asn1PD_UnitEquipmentFireDamage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfUnitHumanFireDamage                                 */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfUnitHumanFireDamage::ASN1C__SeqOfUnitHumanFireDamage (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfUnitHumanFireDamage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfUnitHumanFireDamage (ASN1CTXT* ctxt_p, ASN1T__SeqOfUnitHumanFireDamage* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfUnitHumanFireDamage: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_UnitHumanFireDamage (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfUnitHumanFireDamage: end\n");
   return (stat);
}

int ASN1C__SeqOfUnitHumanFireDamage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfUnitHumanFireDamage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfUnitHumanFireDamage (ASN1CTXT* ctxt_p, ASN1T__SeqOfUnitHumanFireDamage* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfUnitHumanFireDamage: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_UnitHumanFireDamage);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_UnitHumanFireDamage (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfUnitHumanFireDamage: end\n");

   return (stat);
}

int ASN1C__SeqOfUnitHumanFireDamage::Decode ()
{
   return asn1PD__SeqOfUnitHumanFireDamage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfUnitEquipmentFireDamage                             */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfUnitEquipmentFireDamage::ASN1C__SeqOfUnitEquipmentFireDamage (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfUnitEquipmentFireDamage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfUnitEquipmentFireDamage (ASN1CTXT* ctxt_p, ASN1T__SeqOfUnitEquipmentFireDamage* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfUnitEquipmentFireDamage: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_UnitEquipmentFireDamage (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfUnitEquipmentFireDamage: end\n");
   return (stat);
}

int ASN1C__SeqOfUnitEquipmentFireDamage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfUnitEquipmentFireDamage (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfUnitEquipmentFireDamage (ASN1CTXT* ctxt_p, ASN1T__SeqOfUnitEquipmentFireDamage* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfUnitEquipmentFireDamage: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_UnitEquipmentFireDamage);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_UnitEquipmentFireDamage (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfUnitEquipmentFireDamage: end\n");

   return (stat);
}

int ASN1C__SeqOfUnitEquipmentFireDamage::Decode ()
{
   return asn1PD__SeqOfUnitEquipmentFireDamage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitFireDamages                                           */
/*                                                            */
/**************************************************************/

ASN1C_UnitFireDamages::ASN1C_UnitFireDamages (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitFireDamages& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitFireDamages (ASN1CTXT* ctxt_p, ASN1T_UnitFireDamages* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_UnitFireDamages: start\n");

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Unit (ctxt_p, pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode humains */

   PU_PUSHNAME (ctxt_p, "humains");

   stat = asn1PE__SeqOfUnitHumanFireDamage (ctxt_p, &pvalue->humains);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode equipements */

   PU_PUSHNAME (ctxt_p, "equipements");

   stat = asn1PE__SeqOfUnitEquipmentFireDamage (ctxt_p, &pvalue->equipements);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_UnitFireDamages: end\n");
   return (stat);
}

int ASN1C_UnitFireDamages::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitFireDamages (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitFireDamages (ASN1CTXT* ctxt_p, ASN1T_UnitFireDamages* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_UnitFireDamages: start\n");

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Unit (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode humains */

   PU_PUSHNAME (ctxt_p, "humains");

   stat = asn1PD__SeqOfUnitHumanFireDamage (ctxt_p, &pvalue->humains);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode equipements */

   PU_PUSHNAME (ctxt_p, "equipements");

   stat = asn1PD__SeqOfUnitEquipmentFireDamage (ctxt_p, &pvalue->equipements);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_UnitFireDamages: end\n");

   return (stat);
}

int ASN1C_UnitFireDamages::Decode ()
{
   return asn1PD_UnitFireDamages (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationFireDamages                                     */
/*                                                            */
/**************************************************************/

ASN1C_PopulationFireDamages::ASN1C_PopulationFireDamages (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationFireDamages& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationFireDamages (ASN1CTXT* ctxt_p, ASN1T_PopulationFireDamages* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_PopulationFireDamages: start\n");

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_Population (ctxt_p, pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_PopulationFireDamages: end\n");
   return (stat);
}

int ASN1C_PopulationFireDamages::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationFireDamages (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PopulationFireDamages (ASN1CTXT* ctxt_p, ASN1T_PopulationFireDamages* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_PopulationFireDamages: start\n");

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_Population (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_PopulationFireDamages: end\n");

   return (stat);
}

int ASN1C_PopulationFireDamages::Decode ()
{
   return asn1PD_PopulationFireDamages (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitsFireDamages                                          */
/*                                                            */
/**************************************************************/

ASN1C_UnitsFireDamages::ASN1C_UnitsFireDamages (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitsFireDamages& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitsFireDamages (ASN1CTXT* ctxt_p, ASN1T_UnitsFireDamages* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_UnitsFireDamages: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_UnitFireDamages (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_UnitsFireDamages: end\n");
   return (stat);
}

int ASN1C_UnitsFireDamages::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitsFireDamages (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitsFireDamages (ASN1CTXT* ctxt_p, ASN1T_UnitsFireDamages* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_UnitsFireDamages: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_UnitFireDamages);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_UnitFireDamages (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_UnitsFireDamages: end\n");

   return (stat);
}

int ASN1C_UnitsFireDamages::Decode ()
{
   return asn1PD_UnitsFireDamages (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationsFireDamages                                    */
/*                                                            */
/**************************************************************/

ASN1C_PopulationsFireDamages::ASN1C_PopulationsFireDamages (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationsFireDamages& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationsFireDamages (ASN1CTXT* ctxt_p, ASN1T_PopulationsFireDamages* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_PopulationsFireDamages: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_PopulationFireDamages (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_PopulationsFireDamages: end\n");
   return (stat);
}

int ASN1C_PopulationsFireDamages::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationsFireDamages (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PopulationsFireDamages (ASN1CTXT* ctxt_p, ASN1T_PopulationsFireDamages* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_PopulationsFireDamages: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_PopulationFireDamages);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_PopulationFireDamages (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_PopulationsFireDamages: end\n");

   return (stat);
}

int ASN1C_PopulationsFireDamages::Decode ()
{
   return asn1PD_PopulationsFireDamages (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartUnitFire_cible                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartUnitFire_cible::ASN1C_MsgStartUnitFire_cible (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartUnitFire_cible& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartUnitFire_cible (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire_cible* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartUnitFire_cible: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* pion */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.pion");

         stat = asn1PE_Unit (ctxt_p, pvalue->u.pion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* population */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.population");

         stat = asn1PE_Population (ctxt_p, pvalue->u.population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* position */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.position");

         stat = asn1PE_CoordUTM (ctxt_p, *pvalue->u.position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgStartUnitFire_cible: end\n");
   return (stat);
}

int ASN1C_MsgStartUnitFire_cible::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartUnitFire_cible (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartUnitFire_cible (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire_cible* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgStartUnitFire_cible: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* pion */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.pion");

         stat = asn1PD_Unit (ctxt_p, &pvalue->u.pion);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* population */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.population");

         stat = asn1PD_Population (ctxt_p, &pvalue->u.population);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* position */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.position");

         pvalue->u.position = ALLOC_ASN1ELEM (ctxt_p, ASN1T_CoordUTM);
         if (pvalue->u.position == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_CoordUTM (ctxt_p, pvalue->u.position);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgStartUnitFire_cible: end\n");

   return (stat);
}

int ASN1C_MsgStartUnitFire_cible::Decode ()
{
   return asn1PD_MsgStartUnitFire_cible (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartUnitFire_type                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartUnitFire_type::ASN1C_MsgStartUnitFire_type (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartUnitFire_type& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartUnitFire_type (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire_type value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_MsgStartUnitFire_type: start\n");

   switch (value) {
      case MsgStartUnitFire_type::direct: ui = 0; break;
      case MsgStartUnitFire_type::indirect: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgStartUnitFire_type: end\n");
   return (stat);
}

int ASN1C_MsgStartUnitFire_type::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartUnitFire_type (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartUnitFire_type (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire_type* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgStartUnitFire_type: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = MsgStartUnitFire_type::direct; break;
      case 1: *pvalue = MsgStartUnitFire_type::indirect; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_MsgStartUnitFire_type: end\n");

   return (stat);
}

int ASN1C_MsgStartUnitFire_type::Decode ()
{
   return asn1PD_MsgStartUnitFire_type (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartUnitFire                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartUnitFire::ASN1C_MsgStartUnitFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartUnitFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartUnitFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartUnitFire: start\n");

   PU_NEWFIELD (ctxt_p, "munitionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.munitionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_UnitFire (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tireur */

   PU_PUSHNAME (ctxt_p, "tireur");

   stat = asn1PE_Unit (ctxt_p, pvalue->tireur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PE_MsgStartUnitFire_cible (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_MsgStartUnitFire_type (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode munition */

   if (pvalue->m.munitionPresent) {
      PU_PUSHNAME (ctxt_p, "munition");

      stat = asn1PE_DotationType (ctxt_p, pvalue->munition);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgStartUnitFire: end\n");
   return (stat);
}

int ASN1C_MsgStartUnitFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartUnitFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartUnitFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartUnitFire* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgStartUnitFire: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "munitionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.munitionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_UnitFire (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tireur */

   PU_PUSHNAME (ctxt_p, "tireur");

   stat = asn1PD_Unit (ctxt_p, &pvalue->tireur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cible */

   PU_PUSHNAME (ctxt_p, "cible");

   stat = asn1PD_MsgStartUnitFire_cible (ctxt_p, &pvalue->cible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_MsgStartUnitFire_type (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode munition */

   if (pvalue->m.munitionPresent) {
      PU_PUSHNAME (ctxt_p, "munition");

      stat = asn1PD_DotationType (ctxt_p, &pvalue->munition);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgStartUnitFire: end\n");

   return (stat);
}

int ASN1C_MsgStartUnitFire::Decode ()
{
   return asn1PD_MsgStartUnitFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopUnitFire                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopUnitFire::ASN1C_MsgStopUnitFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopUnitFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopUnitFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopUnitFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopUnitFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_UnitFire (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PE_PopulationsFireDamages (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStopUnitFire: end\n");
   return (stat);
}

int ASN1C_MsgStopUnitFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopUnitFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopUnitFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopUnitFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopUnitFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_UnitFire (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PD_PopulationsFireDamages (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStopUnitFire: end\n");

   return (stat);
}

int ASN1C_MsgStopUnitFire::Decode ()
{
   return asn1PD_MsgStopUnitFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartPopulationFire                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartPopulationFire::ASN1C_MsgStartPopulationFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartPopulationFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartPopulationFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_PopulationFire (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_src */

   PU_PUSHNAME (ctxt_p, "oid_src");

   stat = asn1PE_Population (ctxt_p, pvalue->oid_src);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStartPopulationFire: end\n");
   return (stat);
}

int ASN1C_MsgStartPopulationFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartPopulationFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStartPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStartPopulationFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_PopulationFire (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_src */

   PU_PUSHNAME (ctxt_p, "oid_src");

   stat = asn1PD_Population (ctxt_p, &pvalue->oid_src);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStartPopulationFire: end\n");

   return (stat);
}

int ASN1C_MsgStartPopulationFire::Decode ()
{
   return asn1PD_MsgStartPopulationFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopPopulationFire                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopPopulationFire::ASN1C_MsgStopPopulationFire (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopPopulationFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopPopulationFire: start\n");

   /* encode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PE_PopulationFire (ctxt_p, pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStopPopulationFire: end\n");
   return (stat);
}

int ASN1C_MsgStopPopulationFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopPopulationFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopPopulationFire (ASN1CTXT* ctxt_p, ASN1T_MsgStopPopulationFire* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopPopulationFire: start\n");

   /* decode oid_tir */

   PU_PUSHNAME (ctxt_p, "oid_tir");

   stat = asn1PD_PopulationFire (ctxt_p, &pvalue->oid_tir);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStopPopulationFire: end\n");

   return (stat);
}

int ASN1C_MsgStopPopulationFire::Decode ()
{
   return asn1PD_MsgStopPopulationFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgExplosion                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgExplosion::ASN1C_MsgExplosion (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgExplosion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgExplosion (ASN1CTXT* ctxt_p, ASN1T_MsgExplosion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgExplosion: start\n");

   /* encode oid_objet */

   PU_PUSHNAME (ctxt_p, "oid_objet");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PE_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PE_PopulationsFireDamages (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgExplosion: end\n");
   return (stat);
}

int ASN1C_MsgExplosion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgExplosion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgExplosion (ASN1CTXT* ctxt_p, ASN1T_MsgExplosion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgExplosion: start\n");

   /* decode oid_objet */

   PU_PUSHNAME (ctxt_p, "oid_objet");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_objet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_pions */

   PU_PUSHNAME (ctxt_p, "degats_pions");

   stat = asn1PD_UnitsFireDamages (ctxt_p, &pvalue->degats_pions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode degats_populations */

   PU_PUSHNAME (ctxt_p, "degats_populations");

   stat = asn1PD_PopulationsFireDamages (ctxt_p, &pvalue->degats_populations);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgExplosion: end\n");

   return (stat);
}

int ASN1C_MsgExplosion::Decode ()
{
   return asn1PD_MsgExplosion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumFireEffectType                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumFireEffectType::ASN1C_EnumFireEffectType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumFireEffectType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumFireEffectType (ASN1CTXT* ctxt_p, ASN1T_EnumFireEffectType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumFireEffectType: start\n");

   switch (value) {
      case EnumFireEffectType::fumigene: ui = 0; break;
      case EnumFireEffectType::eclairant: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumFireEffectType: end\n");
   return (stat);
}

int ASN1C_EnumFireEffectType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumFireEffectType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumFireEffectType (ASN1CTXT* ctxt_p, ASN1T_EnumFireEffectType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumFireEffectType: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumFireEffectType::fumigene; break;
      case 1: *pvalue = EnumFireEffectType::eclairant; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumFireEffectType: end\n");

   return (stat);
}

int ASN1C_EnumFireEffectType::Decode ()
{
   return asn1PD_EnumFireEffectType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStartFireEffect                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgStartFireEffect::ASN1C_MsgStartFireEffect (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStartFireEffect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStartFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStartFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStartFireEffect: start\n");

   /* encode oid_effet */

   PU_PUSHNAME (ctxt_p, "oid_effet");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_effet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode localisation */

   PU_PUSHNAME (ctxt_p, "localisation");

   stat = asn1PE_Location (ctxt_p, &pvalue->localisation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumFireEffectType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgStartFireEffect: end\n");
   return (stat);
}

int ASN1C_MsgStartFireEffect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStartFireEffect (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgStartFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStartFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStartFireEffect: start\n");

   /* decode oid_effet */

   PU_PUSHNAME (ctxt_p, "oid_effet");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_effet);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode localisation */

   PU_PUSHNAME (ctxt_p, "localisation");

   stat = asn1PD_Location (ctxt_p, &pvalue->localisation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumFireEffectType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgStartFireEffect: end\n");

   return (stat);
}

int ASN1C_MsgStartFireEffect::Decode ()
{
   return asn1PD_MsgStartFireEffect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgStopFireEffect                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgStopFireEffect::ASN1C_MsgStopFireEffect (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgStopFireEffect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgStopFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStopFireEffect value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgStopFireEffect: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgStopFireEffect: end\n");
   return (stat);
}

int ASN1C_MsgStopFireEffect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgStopFireEffect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgStopFireEffect (ASN1CTXT* ctxt_p, ASN1T_MsgStopFireEffect* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgStopFireEffect: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgStopFireEffect: end\n");

   return (stat);
}

int ASN1C_MsgStopFireEffect::Decode ()
{
   return asn1PD_MsgStopFireEffect (mpContext->GetPtr(), &msgData);
}


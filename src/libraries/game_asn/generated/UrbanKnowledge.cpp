/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 24-Dec-2009.
 */
#include "UrbanKnowledge.h"

/**************************************************************/
/*                                                            */
/*  UrbanKnowledgeIncludes                                    */
/*                                                            */
/**************************************************************/

ASN1C_UrbanKnowledgeIncludes::ASN1C_UrbanKnowledgeIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_UrbanKnowledgeIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UrbanKnowledgeIncludes (ASN1CTXT* ctxt_p, ASN1T_UrbanKnowledgeIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* encode urbanExports */

   stat = asn1PE_UrbanExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UrbanKnowledgeIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UrbanKnowledgeIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UrbanKnowledgeIncludes (ASN1CTXT* ctxt_p, ASN1T_UrbanKnowledgeIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   /* decode urbanExports */

   stat = asn1PD_UrbanExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_UrbanKnowledgeIncludes::Decode ()
{
   return asn1PD_UrbanKnowledgeIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UrbanKnowledgeExports                                     */
/*                                                            */
/**************************************************************/

ASN1C_UrbanKnowledgeExports::ASN1C_UrbanKnowledgeExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_UrbanKnowledgeExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_UrbanKnowledgeExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UrbanKnowledgeExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_UrbanKnowledgeExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_UrbanKnowledgeExports::Decode ()
{
   return asn1PD_UrbanKnowledgeExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgUrbanKnowledgeCreation                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgUrbanKnowledgeCreation::ASN1C_MsgUrbanKnowledgeCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUrbanKnowledgeCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUrbanKnowledgeCreation (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_UrbanKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode team */

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return stat;

   /* encode real_urban */

   stat = asn1PE_OID (ctxt_p, pvalue->real_urban);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUrbanKnowledgeCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUrbanKnowledgeCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUrbanKnowledgeCreation (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_UrbanKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode team */

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return stat;

   /* decode real_urban */

   stat = asn1PD_OID (ctxt_p, &pvalue->real_urban);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUrbanKnowledgeCreation::Decode ()
{
   return asn1PD_MsgUrbanKnowledgeCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUrbanKnowledgeUpdate                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgUrbanKnowledgeUpdate::ASN1C_MsgUrbanKnowledgeUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUrbanKnowledgeUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUrbanKnowledgeUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.real_urbanPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.relevancePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.identification_levelPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.progressPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.perceivedPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.automat_perceptionPresent);

   /* encode oid */

   stat = asn1PE_UrbanKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode team */

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return stat;

   /* encode real_urban */

   if (pvalue->m.real_urbanPresent) {
      stat = asn1PE_OID (ctxt_p, pvalue->real_urban);
      if (stat != ASN_OK) return stat;
   }

   /* encode relevance */

   if (pvalue->m.relevancePresent) {
      stat = pe_ConsInteger (ctxt_p, pvalue->relevance, 0, 100);
      if (stat != ASN_OK) return stat;

   }

   /* encode identification_level */

   if (pvalue->m.identification_levelPresent) {
      stat = asn1PE_EnumUnitIdentificationLevel (ctxt_p, pvalue->identification_level);
      if (stat != ASN_OK) return stat;
   }

   /* encode progress */

   if (pvalue->m.progressPresent) {
      stat = pe_ConsInteger (ctxt_p, pvalue->progress, 0, 100);
      if (stat != ASN_OK) return stat;

   }

   /* encode perceived */

   if (pvalue->m.perceivedPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->perceived);
      if (stat != ASN_OK) return stat;
   }

   /* encode automat_perception */

   if (pvalue->m.automat_perceptionPresent) {
      stat = asn1PE_ListOID (ctxt_p, &pvalue->automat_perception);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgUrbanKnowledgeUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUrbanKnowledgeUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUrbanKnowledgeUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.real_urbanPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.relevancePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.identification_levelPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.progressPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.perceivedPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.automat_perceptionPresent = optbit;

   /* decode oid */

   stat = asn1PD_UrbanKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode team */

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return stat;

   /* decode real_urban */

   if (pvalue->m.real_urbanPresent) {
      stat = asn1PD_OID (ctxt_p, &pvalue->real_urban);
      if (stat != ASN_OK) return stat;
   }

   /* decode relevance */

   if (pvalue->m.relevancePresent) {
      stat = pd_ConsInteger (ctxt_p, &pvalue->relevance, 0, 100);
      if (stat != ASN_OK) return stat;
   }

   /* decode identification_level */

   if (pvalue->m.identification_levelPresent) {
      stat = asn1PD_EnumUnitIdentificationLevel (ctxt_p, &pvalue->identification_level);
      if (stat != ASN_OK) return stat;
   }

   /* decode progress */

   if (pvalue->m.progressPresent) {
      stat = pd_ConsInteger (ctxt_p, &pvalue->progress, 0, 100);
      if (stat != ASN_OK) return stat;
   }

   /* decode perceived */

   if (pvalue->m.perceivedPresent) {
      stat = pd_bit (ctxt_p, &pvalue->perceived);
      if (stat != ASN_OK) return stat;
   }

   /* decode automat_perception */

   if (pvalue->m.automat_perceptionPresent) {
      stat = asn1PD_ListOID (ctxt_p, &pvalue->automat_perception);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgUrbanKnowledgeUpdate::Decode ()
{
   return asn1PD_MsgUrbanKnowledgeUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUrbanKnowledgeDestruction                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgUrbanKnowledgeDestruction::ASN1C_MsgUrbanKnowledgeDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUrbanKnowledgeDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUrbanKnowledgeDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_UrbanKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode team */

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUrbanKnowledgeDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUrbanKnowledgeDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUrbanKnowledgeDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgUrbanKnowledgeDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_UrbanKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode team */

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUrbanKnowledgeDestruction::Decode ()
{
   return asn1PD_MsgUrbanKnowledgeDestruction (mpContext->GetPtr(), &msgData);
}


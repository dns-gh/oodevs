/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 03-Feb-2010.
 */
#include "Aar.h"

/**************************************************************/
/*                                                            */
/*  AarIncludes                                               */
/*                                                            */
/**************************************************************/

ASN1C_AarIncludes::ASN1C_AarIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_AarIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AarIncludes (ASN1CTXT* ctxt_p, ASN1T_AarIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_AarIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AarIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_AarIncludes (ASN1CTXT* ctxt_p, ASN1T_AarIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_AarIncludes::Decode ()
{
   return asn1PD_AarIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AarExports                                                */
/*                                                            */
/**************************************************************/

ASN1C_AarExports::ASN1C_AarExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_AarExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_AarExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AarExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_AarExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_AarExports::Decode ()
{
   return asn1PD_AarExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgAarInformation                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgAarInformation::ASN1C_MsgAarInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAarInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAarInformation (ASN1CTXT* ctxt_p, ASN1T_MsgAarInformation* pvalue)
{
   int stat = ASN_OK;

   /* encode information */

   stat = pe_VisibleString (ctxt_p, pvalue->information, 0);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgAarInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAarInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAarInformation (ASN1CTXT* ctxt_p, ASN1T_MsgAarInformation* pvalue)
{
   int stat = ASN_OK;

   /* decode information */

   stat = pd_VisibleString (ctxt_p, &pvalue->information, 0);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgAarInformation::Decode ()
{
   return asn1PD_MsgAarInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgIndicator                                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgIndicator::ASN1C_MsgIndicator (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgIndicator& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgIndicator (ASN1CTXT* ctxt_p, ASN1T_MsgIndicator* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode value */

   stat = pe_Real (ctxt_p, pvalue->value);if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgIndicator::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgIndicator (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgIndicator (ASN1CTXT* ctxt_p, ASN1T_MsgIndicator* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode value */

   stat = pd_Real (ctxt_p, &pvalue->value);if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgIndicator::Decode ()
{
   return asn1PD_MsgIndicator (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPlotResult_values                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgPlotResult_values::ASN1C_MsgPlotResult_values (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPlotResult_values& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPlotResult_values (ASN1CTXT* ctxt_p, ASN1T_MsgPlotResult_values* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pe_Real (ctxt_p, pvalue->elem[xx1]);if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_MsgPlotResult_values::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPlotResult_values (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPlotResult_values (ASN1CTXT* ctxt_p, ASN1T_MsgPlotResult_values* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1REAL);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pd_Real (ctxt_p, &pvalue->elem[xx1]);if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgPlotResult_values::Decode ()
{
   return asn1PD_MsgPlotResult_values (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPlotResult                                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgPlotResult::ASN1C_MsgPlotResult (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPlotResult& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPlotResult (ASN1CTXT* ctxt_p, ASN1T_MsgPlotResult* pvalue)
{
   int stat = ASN_OK;

   /* encode identifier */

   stat = pe_UnconsInteger (ctxt_p, pvalue->identifier);
   if (stat != ASN_OK) return stat;

   /* encode error */

   stat = pe_VisibleString (ctxt_p, pvalue->error, 0);
   if (stat != ASN_OK) return stat;

   /* encode values */

   stat = asn1PE_MsgPlotResult_values (ctxt_p, &pvalue->values);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPlotResult::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPlotResult (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPlotResult (ASN1CTXT* ctxt_p, ASN1T_MsgPlotResult* pvalue)
{
   int stat = ASN_OK;

   /* decode identifier */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->identifier);
   if (stat != ASN_OK) return stat;

   /* decode error */

   stat = pd_VisibleString (ctxt_p, &pvalue->error, 0);
   if (stat != ASN_OK) return stat;

   /* decode values */

   stat = asn1PD_MsgPlotResult_values (ctxt_p, &pvalue->values);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPlotResult::Decode ()
{
   return asn1PD_MsgPlotResult (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPlotRequest                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgPlotRequest::ASN1C_MsgPlotRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPlotRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPlotRequest (ASN1CTXT* ctxt_p, ASN1T_MsgPlotRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode identifier */

   stat = pe_UnconsInteger (ctxt_p, pvalue->identifier);
   if (stat != ASN_OK) return stat;

   /* encode request */

   stat = pe_VisibleString (ctxt_p, pvalue->request, 0);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPlotRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPlotRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPlotRequest (ASN1CTXT* ctxt_p, ASN1T_MsgPlotRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode identifier */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->identifier);
   if (stat != ASN_OK) return stat;

   /* decode request */

   stat = pd_VisibleString (ctxt_p, &pvalue->request, 0);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPlotRequest::Decode ()
{
   return asn1PD_MsgPlotRequest (mpContext->GetPtr(), &msgData);
}


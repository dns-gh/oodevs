/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 09-Dec-2009.
 */
#include "Base.h"

/**************************************************************/
/*                                                            */
/*  BaseIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_BaseIncludes::ASN1C_BaseIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_BaseIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_BaseIncludes (ASN1CTXT* ctxt_p, ASN1T_BaseIncludes* pvalue)
{
   int stat = ASN_OK;

   return (stat);
}

int ASN1C_BaseIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BaseIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_BaseIncludes (ASN1CTXT* ctxt_p, ASN1T_BaseIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode  */



   return (stat);
}

int ASN1C_BaseIncludes::Decode ()
{
   return asn1PD_BaseIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  BaseExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_BaseExports::ASN1C_BaseExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_BaseExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_BaseExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BaseExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_BaseExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_BaseExports::Decode ()
{
   return asn1PD_BaseExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumLocationType                                          */
/*                                                            */
/**************************************************************/

ASN1C_EnumLocationType::ASN1C_EnumLocationType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLocationType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLocationType (ASN1CTXT* ctxt_p, ASN1T_EnumLocationType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumLocationType::circle: ui = 0; break;
      case EnumLocationType::ellipse: ui = 1; break;
      case EnumLocationType::line: ui = 2; break;
      case EnumLocationType::polygon: ui = 3; break;
      case EnumLocationType::point: ui = 4; break;
      case EnumLocationType::sector: ui = 5; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumLocationType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLocationType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLocationType (ASN1CTXT* ctxt_p, ASN1T_EnumLocationType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumLocationType::circle; break;
      case 1: *pvalue = EnumLocationType::ellipse; break;
      case 2: *pvalue = EnumLocationType::line; break;
      case 3: *pvalue = EnumLocationType::polygon; break;
      case 4: *pvalue = EnumLocationType::point; break;
      case 5: *pvalue = EnumLocationType::sector; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumLocationType::Decode ()
{
   return asn1PD_EnumLocationType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CoordLatLong                                              */
/*                                                            */
/**************************************************************/

ASN1C_CoordLatLong::ASN1C_CoordLatLong (
   ASN1MessageBuffer& msgBuf, ASN1T_CoordLatLong& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CoordLatLong (ASN1CTXT* ctxt_p, ASN1T_CoordLatLong* pvalue)
{
   int stat = ASN_OK;

   /* encode latitude */

   stat = pe_Real (ctxt_p, pvalue->latitude);if (stat != ASN_OK) return stat;

   /* encode longitude */

   stat = pe_Real (ctxt_p, pvalue->longitude);if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_CoordLatLong::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CoordLatLong (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CoordLatLong (ASN1CTXT* ctxt_p, ASN1T_CoordLatLong* pvalue)
{
   int stat = ASN_OK;

   /* decode latitude */

   stat = pd_Real (ctxt_p, &pvalue->latitude);if (stat != ASN_OK) return stat;

   /* decode longitude */

   stat = pd_Real (ctxt_p, &pvalue->longitude);if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_CoordLatLong::Decode ()
{
   return asn1PD_CoordLatLong (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  CoordLatLongList                                          */
/*                                                            */
/**************************************************************/

ASN1C_CoordLatLongList::ASN1C_CoordLatLongList (
   ASN1MessageBuffer& msgBuf, ASN1T_CoordLatLongList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_CoordLatLongList (ASN1CTXT* ctxt_p, ASN1T_CoordLatLongList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_CoordLatLongList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_CoordLatLongList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_CoordLatLongList (ASN1CTXT* ctxt_p, ASN1T_CoordLatLongList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_CoordLatLong);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_CoordLatLongList::Decode ()
{
   return asn1PD_CoordLatLongList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Location                                                  */
/*                                                            */
/**************************************************************/

ASN1C_Location::ASN1C_Location (
   ASN1MessageBuffer& msgBuf, ASN1T_Location& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Location (ASN1CTXT* ctxt_p, ASN1T_Location* pvalue)
{
   int stat = ASN_OK;

   /* encode type */

   stat = asn1PE_EnumLocationType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return stat;

   /* encode coordinates */

   stat = asn1PE_CoordLatLongList (ctxt_p, &pvalue->coordinates);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Location::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Location (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Location (ASN1CTXT* ctxt_p, ASN1T_Location* pvalue)
{
   int stat = ASN_OK;

   /* decode type */

   stat = asn1PD_EnumLocationType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return stat;

   /* decode coordinates */

   stat = asn1PD_CoordLatLongList (ctxt_p, &pvalue->coordinates);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_Location::Decode ()
{
   return asn1PD_Location (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Point                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Point::ASN1C_Point (
   ASN1MessageBuffer& msgBuf, ASN1T_Point& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Point (ASN1CTXT* ctxt_p, ASN1T_Point* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Point::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Point (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Point (ASN1CTXT* ctxt_p, ASN1T_Point* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Point::Decode ()
{
   return asn1PD_Point (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Line                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Line::ASN1C_Line (
   ASN1MessageBuffer& msgBuf, ASN1T_Line& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Line (ASN1CTXT* ctxt_p, ASN1T_Line* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Line::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Line (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Line (ASN1CTXT* ctxt_p, ASN1T_Line* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Line::Decode ()
{
   return asn1PD_Line (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Path                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Path::ASN1C_Path (
   ASN1MessageBuffer& msgBuf, ASN1T_Path& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Path (ASN1CTXT* ctxt_p, ASN1T_Path* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Path::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Path (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Path (ASN1CTXT* ctxt_p, ASN1T_Path* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Path::Decode ()
{
   return asn1PD_Path (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Polygon                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Polygon::ASN1C_Polygon (
   ASN1MessageBuffer& msgBuf, ASN1T_Polygon& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Polygon (ASN1CTXT* ctxt_p, ASN1T_Polygon* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Polygon::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Polygon (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Polygon (ASN1CTXT* ctxt_p, ASN1T_Polygon* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Polygon::Decode ()
{
   return asn1PD_Polygon (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Segment                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Segment::ASN1C_Segment (
   ASN1MessageBuffer& msgBuf, ASN1T_Segment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Segment (ASN1CTXT* ctxt_p, ASN1T_Segment* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Segment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Segment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Segment (ASN1CTXT* ctxt_p, ASN1T_Segment* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Segment::Decode ()
{
   return asn1PD_Segment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Circle                                                    */
/*                                                            */
/**************************************************************/

ASN1C_Circle::ASN1C_Circle (
   ASN1MessageBuffer& msgBuf, ASN1T_Circle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Circle (ASN1CTXT* ctxt_p, ASN1T_Circle* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Circle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Circle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Circle (ASN1CTXT* ctxt_p, ASN1T_Circle* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Circle::Decode ()
{
   return asn1PD_Circle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Ellipse                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Ellipse::ASN1C_Ellipse (
   ASN1MessageBuffer& msgBuf, ASN1T_Ellipse& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Ellipse (ASN1CTXT* ctxt_p, ASN1T_Ellipse* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Ellipse::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Ellipse (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Ellipse (ASN1CTXT* ctxt_p, ASN1T_Ellipse* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Ellipse::Decode ()
{
   return asn1PD_Ellipse (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Sector                                                    */
/*                                                            */
/**************************************************************/

ASN1C_Sector::ASN1C_Sector (
   ASN1MessageBuffer& msgBuf, ASN1T_Sector& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Sector (ASN1CTXT* ctxt_p, ASN1T_Sector* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Sector::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Sector (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_Sector (ASN1CTXT* ctxt_p, ASN1T_Sector* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Location (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Sector::Decode ()
{
   return asn1PD_Sector (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LocationList                                              */
/*                                                            */
/**************************************************************/

ASN1C_LocationList::ASN1C_LocationList (
   ASN1MessageBuffer& msgBuf, ASN1T_LocationList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LocationList (ASN1CTXT* ctxt_p, ASN1T_LocationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Location (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_LocationList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LocationList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LocationList (ASN1CTXT* ctxt_p, ASN1T_LocationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Location);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Location (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_LocationList::Decode ()
{
   return asn1PD_LocationList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PolygonList                                               */
/*                                                            */
/**************************************************************/

ASN1C_PolygonList::ASN1C_PolygonList (
   ASN1MessageBuffer& msgBuf, ASN1T_PolygonList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PolygonList (ASN1CTXT* ctxt_p, ASN1T_PolygonList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Polygon (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_PolygonList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PolygonList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PolygonList (ASN1CTXT* ctxt_p, ASN1T_PolygonList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Polygon);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Polygon (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_PolygonList::Decode ()
{
   return asn1PD_PolygonList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PathList                                                  */
/*                                                            */
/**************************************************************/

ASN1C_PathList::ASN1C_PathList (
   ASN1MessageBuffer& msgBuf, ASN1T_PathList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PathList (ASN1CTXT* ctxt_p, ASN1T_PathList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Path (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_PathList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PathList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PathList (ASN1CTXT* ctxt_p, ASN1T_PathList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Path);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Path (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_PathList::Decode ()
{
   return asn1PD_PathList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PointList                                                 */
/*                                                            */
/**************************************************************/

ASN1C_PointList::ASN1C_PointList (
   ASN1MessageBuffer& msgBuf, ASN1T_PointList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PointList (ASN1CTXT* ctxt_p, ASN1T_PointList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Point (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_PointList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PointList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PointList (ASN1CTXT* ctxt_p, ASN1T_PointList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Point);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Point (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_PointList::Decode ()
{
   return asn1PD_PointList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  OID                                                       */
/*                                                            */
/**************************************************************/

ASN1C_OID::ASN1C_OID (
   ASN1MessageBuffer& msgBuf, ASN1T_OID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_OID (ASN1CTXT* ctxt_p, ASN1T_OID value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_OID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_OID (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_OID (ASN1CTXT* ctxt_p, ASN1T_OID* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_OID::Decode ()
{
   return asn1PD_OID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ListOID                                                   */
/*                                                            */
/**************************************************************/

ASN1C_ListOID::ASN1C_ListOID (
   ASN1MessageBuffer& msgBuf, ASN1T_ListOID& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ListOID (ASN1CTXT* ctxt_p, ASN1T_ListOID* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_OID (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_ListOID::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ListOID (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ListOID (ASN1CTXT* ctxt_p, ASN1T_ListOID* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_OID);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_OID (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ListOID::Decode ()
{
   return asn1PD_ListOID (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitFire                                                  */
/*                                                            */
/**************************************************************/

ASN1C_UnitFire::ASN1C_UnitFire (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitFire (ASN1CTXT* ctxt_p, ASN1T_UnitFire value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_UnitFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitFire (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_UnitFire (ASN1CTXT* ctxt_p, ASN1T_UnitFire* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UnitFire::Decode ()
{
   return asn1PD_UnitFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationFire                                            */
/*                                                            */
/**************************************************************/

ASN1C_PopulationFire::ASN1C_PopulationFire (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationFire (ASN1CTXT* ctxt_p, ASN1T_PopulationFire value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_PopulationFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationFire (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_PopulationFire (ASN1CTXT* ctxt_p, ASN1T_PopulationFire* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_PopulationFire::Decode ()
{
   return asn1PD_PopulationFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Unit                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Unit::ASN1C_Unit (
   ASN1MessageBuffer& msgBuf, ASN1T_Unit& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Unit (ASN1CTXT* ctxt_p, ASN1T_Unit value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Unit::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Unit (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Unit (ASN1CTXT* ctxt_p, ASN1T_Unit* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Unit::Decode ()
{
   return asn1PD_Unit (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Automat                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Automat::ASN1C_Automat (
   ASN1MessageBuffer& msgBuf, ASN1T_Automat& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Automat (ASN1CTXT* ctxt_p, ASN1T_Automat value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Automat::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Automat (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Automat (ASN1CTXT* ctxt_p, ASN1T_Automat* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Automat::Decode ()
{
   return asn1PD_Automat (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Population                                                */
/*                                                            */
/**************************************************************/

ASN1C_Population::ASN1C_Population (
   ASN1MessageBuffer& msgBuf, ASN1T_Population& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Population (ASN1CTXT* ctxt_p, ASN1T_Population value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Population::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Population (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Population (ASN1CTXT* ctxt_p, ASN1T_Population* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Population::Decode ()
{
   return asn1PD_Population (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Team                                                      */
/*                                                            */
/**************************************************************/

ASN1C_Team::ASN1C_Team (
   ASN1MessageBuffer& msgBuf, ASN1T_Team& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Team (ASN1CTXT* ctxt_p, ASN1T_Team value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Team::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Team (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Team (ASN1CTXT* ctxt_p, ASN1T_Team* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Team::Decode ()
{
   return asn1PD_Team (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Formation                                                 */
/*                                                            */
/**************************************************************/

ASN1C_Formation::ASN1C_Formation (
   ASN1MessageBuffer& msgBuf, ASN1T_Formation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Formation (ASN1CTXT* ctxt_p, ASN1T_Formation value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Formation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Formation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Formation (ASN1CTXT* ctxt_p, ASN1T_Formation* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Formation::Decode ()
{
   return asn1PD_Formation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UrbanBlock                                                */
/*                                                            */
/**************************************************************/

ASN1C_UrbanBlock::ASN1C_UrbanBlock (
   ASN1MessageBuffer& msgBuf, ASN1T_UrbanBlock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UrbanBlock (ASN1CTXT* ctxt_p, ASN1T_UrbanBlock value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_UrbanBlock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UrbanBlock (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_UrbanBlock (ASN1CTXT* ctxt_p, ASN1T_UrbanBlock* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UrbanBlock::Decode ()
{
   return asn1PD_UrbanBlock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  KnowledgeGroup                                            */
/*                                                            */
/**************************************************************/

ASN1C_KnowledgeGroup::ASN1C_KnowledgeGroup (
   ASN1MessageBuffer& msgBuf, ASN1T_KnowledgeGroup& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_KnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_KnowledgeGroup value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_KnowledgeGroup::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_KnowledgeGroup (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_KnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_KnowledgeGroup* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_KnowledgeGroup::Decode ()
{
   return asn1PD_KnowledgeGroup (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitKnowledge                                             */
/*                                                            */
/**************************************************************/

ASN1C_UnitKnowledge::ASN1C_UnitKnowledge (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitKnowledge& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitKnowledge (ASN1CTXT* ctxt_p, ASN1T_UnitKnowledge value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_UnitKnowledge::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitKnowledge (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_UnitKnowledge (ASN1CTXT* ctxt_p, ASN1T_UnitKnowledge* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UnitKnowledge::Decode ()
{
   return asn1PD_UnitKnowledge (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectKnowledge                                           */
/*                                                            */
/**************************************************************/

ASN1C_ObjectKnowledge::ASN1C_ObjectKnowledge (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectKnowledge& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectKnowledge (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledge value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_ObjectKnowledge::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectKnowledge (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_ObjectKnowledge (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledge* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectKnowledge::Decode ()
{
   return asn1PD_ObjectKnowledge (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UrbanKnowledge                                            */
/*                                                            */
/**************************************************************/

ASN1C_UrbanKnowledge::ASN1C_UrbanKnowledge (
   ASN1MessageBuffer& msgBuf, ASN1T_UrbanKnowledge& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UrbanKnowledge (ASN1CTXT* ctxt_p, ASN1T_UrbanKnowledge value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_UrbanKnowledge::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UrbanKnowledge (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_UrbanKnowledge (ASN1CTXT* ctxt_p, ASN1T_UrbanKnowledge* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UrbanKnowledge::Decode ()
{
   return asn1PD_UrbanKnowledge (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationKnowledge                                       */
/*                                                            */
/**************************************************************/

ASN1C_PopulationKnowledge::ASN1C_PopulationKnowledge (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationKnowledge& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationKnowledge (ASN1CTXT* ctxt_p, ASN1T_PopulationKnowledge value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_PopulationKnowledge::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationKnowledge (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_PopulationKnowledge (ASN1CTXT* ctxt_p, ASN1T_PopulationKnowledge* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_PopulationKnowledge::Decode ()
{
   return asn1PD_PopulationKnowledge (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AutomatList                                               */
/*                                                            */
/**************************************************************/

ASN1C_AutomatList::ASN1C_AutomatList (
   ASN1MessageBuffer& msgBuf, ASN1T_AutomatList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AutomatList (ASN1CTXT* ctxt_p, ASN1T_AutomatList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Automat (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_AutomatList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AutomatList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_AutomatList (ASN1CTXT* ctxt_p, ASN1T_AutomatList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Automat);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Automat (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_AutomatList::Decode ()
{
   return asn1PD_AutomatList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitList                                                  */
/*                                                            */
/**************************************************************/

ASN1C_UnitList::ASN1C_UnitList (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitList (ASN1CTXT* ctxt_p, ASN1T_UnitList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Unit (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_UnitList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitList (ASN1CTXT* ctxt_p, ASN1T_UnitList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Unit);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Unit (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_UnitList::Decode ()
{
   return asn1PD_UnitList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitKnowledgeList                                         */
/*                                                            */
/**************************************************************/

ASN1C_UnitKnowledgeList::ASN1C_UnitKnowledgeList (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitKnowledgeList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitKnowledgeList (ASN1CTXT* ctxt_p, ASN1T_UnitKnowledgeList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_UnitKnowledge (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_UnitKnowledgeList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitKnowledgeList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitKnowledgeList (ASN1CTXT* ctxt_p, ASN1T_UnitKnowledgeList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_UnitKnowledge);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_UnitKnowledge (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_UnitKnowledgeList::Decode ()
{
   return asn1PD_UnitKnowledgeList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectKnowledgeList                                       */
/*                                                            */
/**************************************************************/

ASN1C_ObjectKnowledgeList::ASN1C_ObjectKnowledgeList (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectKnowledgeList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectKnowledgeList (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledgeList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_ObjectKnowledge (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_ObjectKnowledgeList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectKnowledgeList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectKnowledgeList (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledgeList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_ObjectKnowledge);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_ObjectKnowledge (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ObjectKnowledgeList::Decode ()
{
   return asn1PD_ObjectKnowledgeList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TeamList                                                  */
/*                                                            */
/**************************************************************/

ASN1C_TeamList::ASN1C_TeamList (
   ASN1MessageBuffer& msgBuf, ASN1T_TeamList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TeamList (ASN1CTXT* ctxt_p, ASN1T_TeamList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Team (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_TeamList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TeamList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_TeamList (ASN1CTXT* ctxt_p, ASN1T_TeamList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Team);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Team (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_TeamList::Decode ()
{
   return asn1PD_TeamList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationList                                            */
/*                                                            */
/**************************************************************/

ASN1C_PopulationList::ASN1C_PopulationList (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationList (ASN1CTXT* ctxt_p, ASN1T_PopulationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Population (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_PopulationList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PopulationList (ASN1CTXT* ctxt_p, ASN1T_PopulationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Population);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Population (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_PopulationList::Decode ()
{
   return asn1PD_PopulationList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FormationList                                             */
/*                                                            */
/**************************************************************/

ASN1C_FormationList::ASN1C_FormationList (
   ASN1MessageBuffer& msgBuf, ASN1T_FormationList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FormationList (ASN1CTXT* ctxt_p, ASN1T_FormationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Formation (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_FormationList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FormationList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_FormationList (ASN1CTXT* ctxt_p, ASN1T_FormationList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Formation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Formation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_FormationList::Decode ()
{
   return asn1PD_FormationList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EquipmentType                                             */
/*                                                            */
/**************************************************************/

ASN1C_EquipmentType::ASN1C_EquipmentType (
   ASN1MessageBuffer& msgBuf, ASN1T_EquipmentType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EquipmentType (ASN1CTXT* ctxt_p, ASN1T_EquipmentType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EquipmentType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EquipmentType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EquipmentType (ASN1CTXT* ctxt_p, ASN1T_EquipmentType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_EquipmentType::Decode ()
{
   return asn1PD_EquipmentType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationType                                              */
/*                                                            */
/**************************************************************/

ASN1C_DotationType::ASN1C_DotationType (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationType (ASN1CTXT* ctxt_p, ASN1T_DotationType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_DotationType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_DotationType (ASN1CTXT* ctxt_p, ASN1T_DotationType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DotationType::Decode ()
{
   return asn1PD_DotationType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  BreakdownType                                             */
/*                                                            */
/**************************************************************/

ASN1C_BreakdownType::ASN1C_BreakdownType (
   ASN1MessageBuffer& msgBuf, ASN1T_BreakdownType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_BreakdownType (ASN1CTXT* ctxt_p, ASN1T_BreakdownType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_BreakdownType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BreakdownType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_BreakdownType (ASN1CTXT* ctxt_p, ASN1T_BreakdownType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_BreakdownType::Decode ()
{
   return asn1PD_BreakdownType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitType                                                  */
/*                                                            */
/**************************************************************/

ASN1C_UnitType::ASN1C_UnitType (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitType (ASN1CTXT* ctxt_p, ASN1T_UnitType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_UnitType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_UnitType (ASN1CTXT* ctxt_p, ASN1T_UnitType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UnitType::Decode ()
{
   return asn1PD_UnitType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AutomatType                                               */
/*                                                            */
/**************************************************************/

ASN1C_AutomatType::ASN1C_AutomatType (
   ASN1MessageBuffer& msgBuf, ASN1T_AutomatType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AutomatType (ASN1CTXT* ctxt_p, ASN1T_AutomatType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_AutomatType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AutomatType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_AutomatType (ASN1CTXT* ctxt_p, ASN1T_AutomatType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_AutomatType::Decode ()
{
   return asn1PD_AutomatType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationType                                            */
/*                                                            */
/**************************************************************/

ASN1C_PopulationType::ASN1C_PopulationType (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationType (ASN1CTXT* ctxt_p, ASN1T_PopulationType value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_PopulationType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_PopulationType (ASN1CTXT* ctxt_p, ASN1T_PopulationType* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_PopulationType::Decode ()
{
   return asn1PD_PopulationType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Percentage                                                */
/*                                                            */
/**************************************************************/

ASN1C_Percentage::ASN1C_Percentage (
   ASN1MessageBuffer& msgBuf, ASN1T_Percentage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Percentage (ASN1CTXT* ctxt_p, ASN1T_Percentage value)
{
   int stat = ASN_OK;

   stat = pe_ConsInteger (ctxt_p, value, 0, 100);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Percentage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Percentage (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Percentage (ASN1CTXT* ctxt_p, ASN1T_Percentage* pvalue)
{
   int stat = ASN_OK;

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 100);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Percentage::Decode ()
{
   return asn1PD_Percentage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  FreePercentage                                            */
/*                                                            */
/**************************************************************/

ASN1C_FreePercentage::ASN1C_FreePercentage (
   ASN1MessageBuffer& msgBuf, ASN1T_FreePercentage& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_FreePercentage (ASN1CTXT* ctxt_p, ASN1T_FreePercentage value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_FreePercentage::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_FreePercentage (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_FreePercentage (ASN1CTXT* ctxt_p, ASN1T_FreePercentage* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_FreePercentage::Decode ()
{
   return asn1PD_FreePercentage (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Height                                                    */
/*                                                            */
/**************************************************************/

ASN1C_Height::ASN1C_Height (
   ASN1MessageBuffer& msgBuf, ASN1T_Height& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Height (ASN1CTXT* ctxt_p, ASN1T_Height value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Height::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Height (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Height (ASN1CTXT* ctxt_p, ASN1T_Height* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Height::Decode ()
{
   return asn1PD_Height (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Elevation                                                 */
/*                                                            */
/**************************************************************/

ASN1C_Elevation::ASN1C_Elevation (
   ASN1MessageBuffer& msgBuf, ASN1T_Elevation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Elevation (ASN1CTXT* ctxt_p, ASN1T_Elevation value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Elevation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Elevation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Elevation (ASN1CTXT* ctxt_p, ASN1T_Elevation* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Elevation::Decode ()
{
   return asn1PD_Elevation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Speed                                                     */
/*                                                            */
/**************************************************************/

ASN1C_Speed::ASN1C_Speed (
   ASN1MessageBuffer& msgBuf, ASN1T_Speed& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Speed (ASN1CTXT* ctxt_p, ASN1T_Speed value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_Speed::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Speed (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Speed (ASN1CTXT* ctxt_p, ASN1T_Speed* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Speed::Decode ()
{
   return asn1PD_Speed (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  Heading                                                   */
/*                                                            */
/**************************************************************/

ASN1C_Heading::ASN1C_Heading (
   ASN1MessageBuffer& msgBuf, ASN1T_Heading& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_Heading (ASN1CTXT* ctxt_p, ASN1T_Heading value)
{
   int stat = ASN_OK;

   stat = pe_ConsInteger (ctxt_p, value, 0, 360);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Heading::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_Heading (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_Heading (ASN1CTXT* ctxt_p, ASN1T_Heading* pvalue)
{
   int stat = ASN_OK;

   stat = pd_ConsInteger (ctxt_p, pvalue, 0, 360);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_Heading::Decode ()
{
   return asn1PD_Heading (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DateTime                                                  */
/*                                                            */
/**************************************************************/

ASN1C_DateTime::ASN1C_DateTime (
   ASN1MessageBuffer& msgBuf, ASN1T_DateTime& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DateTime (ASN1CTXT* ctxt_p, ASN1T_DateTime value)
{
   Asn1SizeCnst lsize1 = { 0, 15, 15, 0 };
   int stat = ASN_OK;

   pu_addSizeConstraint (ctxt_p, &lsize1);

   stat = pe_OctetString (ctxt_p, value.numocts, value.data);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_DateTime::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DateTime (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_DateTime (ASN1CTXT* ctxt_p, ASN1T_DateTime* pvalue)
{
   Asn1SizeCnst lsize1 = { 0, 15, 15, 0 };
   int stat = ASN_OK;

   pu_addSizeConstraint (ctxt_p, &lsize1);

   stat = pd_OctetString (ctxt_p,
                          &pvalue->numocts,
                          pvalue->data,
                          sizeof(pvalue->data));
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DateTime::Decode ()
{
   return asn1PD_DateTime (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumDotationFamily                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumDotationFamily::ASN1C_EnumDotationFamily (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDotationFamily& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDotationFamily (ASN1CTXT* ctxt_p, ASN1T_EnumDotationFamily value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumDotationFamily::munition: ui = 0; break;
      case EnumDotationFamily::carburant: ui = 1; break;
      case EnumDotationFamily::explosif: ui = 2; break;
      case EnumDotationFamily::mine: ui = 3; break;
      case EnumDotationFamily::barbele: ui = 4; break;
      case EnumDotationFamily::piece: ui = 5; break;
      case EnumDotationFamily::ration: ui = 6; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumDotationFamily::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDotationFamily (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDotationFamily (ASN1CTXT* ctxt_p, ASN1T_EnumDotationFamily* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumDotationFamily::munition; break;
      case 1: *pvalue = EnumDotationFamily::carburant; break;
      case 2: *pvalue = EnumDotationFamily::explosif; break;
      case 3: *pvalue = EnumDotationFamily::mine; break;
      case 4: *pvalue = EnumDotationFamily::barbele; break;
      case 5: *pvalue = EnumDotationFamily::piece; break;
      case 6: *pvalue = EnumDotationFamily::ration; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumDotationFamily::Decode ()
{
   return asn1PD_EnumDotationFamily (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumAmmunitionFamily                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumAmmunitionFamily::ASN1C_EnumAmmunitionFamily (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumAmmunitionFamily& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumAmmunitionFamily (ASN1CTXT* ctxt_p, ASN1T_EnumAmmunitionFamily value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumAmmunitionFamily::obus: ui = 0; break;
      case EnumAmmunitionFamily::missile_air: ui = 1; break;
      case EnumAmmunitionFamily::missile_sol: ui = 2; break;
      case EnumAmmunitionFamily::mitraille: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumAmmunitionFamily::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumAmmunitionFamily (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumAmmunitionFamily (ASN1CTXT* ctxt_p, ASN1T_EnumAmmunitionFamily* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumAmmunitionFamily::obus; break;
      case 1: *pvalue = EnumAmmunitionFamily::missile_air; break;
      case 2: *pvalue = EnumAmmunitionFamily::missile_sol; break;
      case 3: *pvalue = EnumAmmunitionFamily::mitraille; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumAmmunitionFamily::Decode ()
{
   return asn1PD_EnumAmmunitionFamily (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitIdentificationLevel                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitIdentificationLevel::ASN1C_EnumUnitIdentificationLevel (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitIdentificationLevel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitIdentificationLevel (ASN1CTXT* ctxt_p, ASN1T_EnumUnitIdentificationLevel value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitIdentificationLevel::identifiee: ui = 0; break;
      case EnumUnitIdentificationLevel::reconnue: ui = 1; break;
      case EnumUnitIdentificationLevel::detectee: ui = 2; break;
      case EnumUnitIdentificationLevel::signale: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitIdentificationLevel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitIdentificationLevel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitIdentificationLevel (ASN1CTXT* ctxt_p, ASN1T_EnumUnitIdentificationLevel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitIdentificationLevel::identifiee; break;
      case 1: *pvalue = EnumUnitIdentificationLevel::reconnue; break;
      case 2: *pvalue = EnumUnitIdentificationLevel::detectee; break;
      case 3: *pvalue = EnumUnitIdentificationLevel::signale; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitIdentificationLevel::Decode ()
{
   return asn1PD_EnumUnitIdentificationLevel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitVisibility                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitVisibility::ASN1C_EnumUnitVisibility (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitVisibility& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitVisibility (ASN1CTXT* ctxt_p, ASN1T_EnumUnitVisibility value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitVisibility::invisible: ui = 0; break;
      case EnumUnitVisibility::detected: ui = 1; break;
      case EnumUnitVisibility::recognized: ui = 2; break;
      case EnumUnitVisibility::identified: ui = 3; break;
      case EnumUnitVisibility::recorded: ui = 4; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitVisibility::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitVisibility (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitVisibility (ASN1CTXT* ctxt_p, ASN1T_EnumUnitVisibility* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitVisibility::invisible; break;
      case 1: *pvalue = EnumUnitVisibility::detected; break;
      case 2: *pvalue = EnumUnitVisibility::recognized; break;
      case 3: *pvalue = EnumUnitVisibility::identified; break;
      case 4: *pvalue = EnumUnitVisibility::recorded; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitVisibility::Decode ()
{
   return asn1PD_EnumUnitVisibility (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumNatureLevel                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumNatureLevel::ASN1C_EnumNatureLevel (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumNatureLevel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumNatureLevel (ASN1CTXT* ctxt_p, ASN1T_EnumNatureLevel value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumNatureLevel::none: ui = 0; break;
      case EnumNatureLevel::o: ui = 1; break;
      case EnumNatureLevel::oo: ui = 2; break;
      case EnumNatureLevel::ooo: ui = 3; break;
      case EnumNatureLevel::i: ui = 4; break;
      case EnumNatureLevel::ii: ui = 5; break;
      case EnumNatureLevel::iii: ui = 6; break;
      case EnumNatureLevel::x: ui = 7; break;
      case EnumNatureLevel::xx: ui = 8; break;
      case EnumNatureLevel::xxx: ui = 9; break;
      case EnumNatureLevel::xxxx: ui = 10; break;
      case EnumNatureLevel::xxxxx: ui = 11; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 11);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumNatureLevel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumNatureLevel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumNatureLevel (ASN1CTXT* ctxt_p, ASN1T_EnumNatureLevel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 11);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumNatureLevel::none; break;
      case 1: *pvalue = EnumNatureLevel::o; break;
      case 2: *pvalue = EnumNatureLevel::oo; break;
      case 3: *pvalue = EnumNatureLevel::ooo; break;
      case 4: *pvalue = EnumNatureLevel::i; break;
      case 5: *pvalue = EnumNatureLevel::ii; break;
      case 6: *pvalue = EnumNatureLevel::iii; break;
      case 7: *pvalue = EnumNatureLevel::x; break;
      case 8: *pvalue = EnumNatureLevel::xx; break;
      case 9: *pvalue = EnumNatureLevel::xxx; break;
      case 10: *pvalue = EnumNatureLevel::xxxx; break;
      case 11: *pvalue = EnumNatureLevel::xxxxx; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumNatureLevel::Decode ()
{
   return asn1PD_EnumNatureLevel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AtlasNature                                               */
/*                                                            */
/**************************************************************/

ASN1C_AtlasNature::ASN1C_AtlasNature (
   ASN1MessageBuffer& msgBuf, ASN1T_AtlasNature& data) :
   ASN1CBitStr (msgBuf, data.data, data.numbits, 16), msgData(data)
{}

EXTERN int asn1PE_AtlasNature (ASN1CTXT* ctxt_p, ASN1T_AtlasNature value)
{
   int stat = ASN_OK;

   stat = pe_BitString (ctxt_p, value.numbits, value.data);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_AtlasNature::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AtlasNature (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_AtlasNature (ASN1CTXT* ctxt_p, ASN1T_AtlasNature* pvalue)
{
   int stat = ASN_OK;

   stat = pd_BitString (ctxt_p,
                        &pvalue->numbits,
                        pvalue->data,
                        sizeof(pvalue->data));
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_AtlasNature::Decode ()
{
   return asn1PD_AtlasNature (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumHumanWound                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumHumanWound::ASN1C_EnumHumanWound (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumHumanWound& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumHumanWound (ASN1CTXT* ctxt_p, ASN1T_EnumHumanWound value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumHumanWound::non_blesse: ui = 0; break;
      case EnumHumanWound::mort: ui = 1; break;
      case EnumHumanWound::blesse_urgence_1: ui = 2; break;
      case EnumHumanWound::blesse_urgence_2: ui = 3; break;
      case EnumHumanWound::blesse_urgence_3: ui = 4; break;
      case EnumHumanWound::blesse_urgence_extreme: ui = 5; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumHumanWound::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumHumanWound (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumHumanWound (ASN1CTXT* ctxt_p, ASN1T_EnumHumanWound* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumHumanWound::non_blesse; break;
      case 1: *pvalue = EnumHumanWound::mort; break;
      case 2: *pvalue = EnumHumanWound::blesse_urgence_1; break;
      case 3: *pvalue = EnumHumanWound::blesse_urgence_2; break;
      case 4: *pvalue = EnumHumanWound::blesse_urgence_3; break;
      case 5: *pvalue = EnumHumanWound::blesse_urgence_extreme; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumHumanWound::Decode ()
{
   return asn1PD_EnumHumanWound (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumHumanRank                                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumHumanRank::ASN1C_EnumHumanRank (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumHumanRank& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumHumanRank (ASN1CTXT* ctxt_p, ASN1T_EnumHumanRank value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumHumanRank::officier: ui = 0; break;
      case EnumHumanRank::sous_officer: ui = 1; break;
      case EnumHumanRank::mdr: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumHumanRank::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumHumanRank (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumHumanRank (ASN1CTXT* ctxt_p, ASN1T_EnumHumanRank* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumHumanRank::officier; break;
      case 1: *pvalue = EnumHumanRank::sous_officer; break;
      case 2: *pvalue = EnumHumanRank::mdr; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumHumanRank::Decode ()
{
   return asn1PD_EnumHumanRank (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeHierarchyErrorCode                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeHierarchyErrorCode::ASN1C_EnumChangeHierarchyErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeHierarchyErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeHierarchyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeHierarchyErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumChangeHierarchyErrorCode::no_error: ui = 0; break;
      case EnumChangeHierarchyErrorCode::error_invalid_pion: ui = 1; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate: ui = 2; break;
      case EnumChangeHierarchyErrorCode::error_invalid_formation: ui = 3; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_tc2: ui = 4; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_maintenance: ui = 5; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_sante: ui = 6; break;
      case EnumChangeHierarchyErrorCode::error_invalid_automate_ravitaillement: ui = 7; break;
      case EnumChangeHierarchyErrorCode::error_unit_surrendered: ui = 8; break;
      case EnumChangeHierarchyErrorCode::error_invalid_camp: ui = 9; break;
      case EnumChangeHierarchyErrorCode::error_invalid_groupe_connaissance: ui = 10; break;
      case EnumChangeHierarchyErrorCode::error_camps_incompatibles: ui = 11; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 11);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumChangeHierarchyErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeHierarchyErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeHierarchyErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeHierarchyErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 11);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumChangeHierarchyErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_pion; break;
      case 2: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate; break;
      case 3: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_formation; break;
      case 4: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_tc2; break;
      case 5: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_maintenance; break;
      case 6: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_sante; break;
      case 7: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_automate_ravitaillement; break;
      case 8: *pvalue = EnumChangeHierarchyErrorCode::error_unit_surrendered; break;
      case 9: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_camp; break;
      case 10: *pvalue = EnumChangeHierarchyErrorCode::error_invalid_groupe_connaissance; break;
      case 11: *pvalue = EnumChangeHierarchyErrorCode::error_camps_incompatibles; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumChangeHierarchyErrorCode::Decode ()
{
   return asn1PD_EnumChangeHierarchyErrorCode (mpContext->GetPtr(), &msgData);
}


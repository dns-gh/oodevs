/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 09-Jul-2007.
 */
#include "Automat.h"

/**************************************************************/
/*                                                            */
/*  AutomateIncludes                                          */
/*                                                            */
/**************************************************************/

ASN1C_AutomateIncludes::ASN1C_AutomateIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_AutomateIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AutomateIncludes (ASN1CTXT* ctxt_p, ASN1T_AutomateIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_AutomateIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode unitExports */

   PU_PUSHNAME (ctxt_p, "unitExports");

   stat = asn1PE_UnitExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_AutomateIncludes: end\n");
   return (stat);
}

int ASN1C_AutomateIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AutomateIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_AutomateIncludes (ASN1CTXT* ctxt_p, ASN1T_AutomateIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_AutomateIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode unitExports */

   PU_PUSHNAME (ctxt_p, "unitExports");

   stat = asn1PD_UnitExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_AutomateIncludes: end\n");

   return (stat);
}

int ASN1C_AutomateIncludes::Decode ()
{
   return asn1PD_AutomateIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AutomateExports                                           */
/*                                                            */
/**************************************************************/

ASN1C_AutomateExports::ASN1C_AutomateExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_AutomateExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_AutomateExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_AutomateExports: end\n");
   return (stat);
}

int ASN1C_AutomateExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AutomateExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_AutomateExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_AutomateExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_AutomateExports: end\n");

   return (stat);
}

int ASN1C_AutomateExports::Decode ()
{
   return asn1PD_AutomateExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumAutomatMode                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumAutomatMode::ASN1C_EnumAutomatMode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumAutomatMode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumAutomatMode (ASN1CTXT* ctxt_p, ASN1T_EnumAutomatMode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumAutomatMode: start\n");

   switch (value) {
      case EnumAutomatMode::embraye: ui = 0; break;
      case EnumAutomatMode::debraye: ui = 1; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumAutomatMode: end\n");
   return (stat);
}

int ASN1C_EnumAutomatMode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumAutomatMode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumAutomatMode (ASN1CTXT* ctxt_p, ASN1T_EnumAutomatMode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumAutomatMode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumAutomatMode::embraye; break;
      case 1: *pvalue = EnumAutomatMode::debraye; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumAutomatMode: end\n");

   return (stat);
}

int ASN1C_EnumAutomatMode::Decode ()
{
   return asn1PD_EnumAutomatMode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatCreation                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatCreation::ASN1C_MsgAutomatCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatCreation (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatCreation: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_automate */

   PU_PUSHNAME (ctxt_p, "type_automate");

   stat = asn1PE_AutomatType (ctxt_p, pvalue->type_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_formation */

   PU_PUSHNAME (ctxt_p, "oid_formation");

   stat = asn1PE_Formation (ctxt_p, pvalue->oid_formation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomatCreation: end\n");
   return (stat);
}

int ASN1C_MsgAutomatCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatCreation (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAutomatCreation: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_automate */

   PU_PUSHNAME (ctxt_p, "type_automate");

   stat = asn1PD_AutomatType (ctxt_p, &pvalue->type_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_formation */

   PU_PUSHNAME (ctxt_p, "oid_formation");

   stat = asn1PD_Formation (ctxt_p, &pvalue->oid_formation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomatCreation: end\n");

   return (stat);
}

int ASN1C_MsgAutomatCreation::Decode ()
{
   return asn1PD_MsgAutomatCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatAttributes                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatAttributes::ASN1C_MsgAutomatAttributes (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatAttributes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatAttributes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatAttributes: start\n");

   PU_NEWFIELD (ctxt_p, "etat_automatePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_automatePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "rapport_de_forcePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.rapport_de_forcePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "combat_de_rencontrePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.combat_de_rencontrePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnelPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_operationnelPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.roePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode etat_automate */

   if (pvalue->m.etat_automatePresent) {
      PU_PUSHNAME (ctxt_p, "etat_automate");

      stat = asn1PE_EnumAutomatMode (ctxt_p, pvalue->etat_automate);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      PU_PUSHNAME (ctxt_p, "rapport_de_force");

      stat = asn1PE_EnumForceRatioStatus (ctxt_p, pvalue->rapport_de_force);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      PU_PUSHNAME (ctxt_p, "combat_de_rencontre");

      stat = asn1PE_EnumMeetingEngagementStatus (ctxt_p, pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel");

      stat = asn1PE_EnumOperationalStatus (ctxt_p, pvalue->etat_operationnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode roe */

   if (pvalue->m.roePresent) {
      PU_PUSHNAME (ctxt_p, "roe");

      stat = asn1PE_EnumRoe (ctxt_p, pvalue->roe);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgAutomatAttributes: end\n");
   return (stat);
}

int ASN1C_MsgAutomatAttributes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatAttributes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatAttributes* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgAutomatAttributes: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "etat_automatePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_automatePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "rapport_de_forcePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.rapport_de_forcePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "combat_de_rencontrePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.combat_de_rencontrePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnelPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_operationnelPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.roePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode etat_automate */

   if (pvalue->m.etat_automatePresent) {
      PU_PUSHNAME (ctxt_p, "etat_automate");

      stat = asn1PD_EnumAutomatMode (ctxt_p, &pvalue->etat_automate);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      PU_PUSHNAME (ctxt_p, "rapport_de_force");

      stat = asn1PD_EnumForceRatioStatus (ctxt_p, &pvalue->rapport_de_force);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      PU_PUSHNAME (ctxt_p, "combat_de_rencontre");

      stat = asn1PD_EnumMeetingEngagementStatus (ctxt_p, &pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel");

      stat = asn1PD_EnumOperationalStatus (ctxt_p, &pvalue->etat_operationnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode roe */

   if (pvalue->m.roePresent) {
      PU_PUSHNAME (ctxt_p, "roe");

      stat = asn1PD_EnumRoe (ctxt_p, &pvalue->roe);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgAutomatAttributes: end\n");

   return (stat);
}

int ASN1C_MsgAutomatAttributes::Decode ()
{
   return asn1PD_MsgAutomatAttributes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumSetAutomatModeErrorCode                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumSetAutomatModeErrorCode::ASN1C_EnumSetAutomatModeErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumSetAutomatModeErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumSetAutomatModeErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumSetAutomatModeErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumSetAutomatModeErrorCode: start\n");

   switch (value) {
      case EnumSetAutomatModeErrorCode::no_error: ui = 0; break;
      case EnumSetAutomatModeErrorCode::error_invalid_unit: ui = 1; break;
      case EnumSetAutomatModeErrorCode::error_not_allowed: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumSetAutomatModeErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumSetAutomatModeErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumSetAutomatModeErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumSetAutomatModeErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumSetAutomatModeErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumSetAutomatModeErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumSetAutomatModeErrorCode::no_error; break;
      case 1: *pvalue = EnumSetAutomatModeErrorCode::error_invalid_unit; break;
      case 2: *pvalue = EnumSetAutomatModeErrorCode::error_not_allowed; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumSetAutomatModeErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumSetAutomatModeErrorCode::Decode ()
{
   return asn1PD_EnumSetAutomatModeErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgSetAutomatMode                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgSetAutomatMode::ASN1C_MsgSetAutomatMode (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSetAutomatMode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSetAutomatMode (ASN1CTXT* ctxt_p, ASN1T_MsgSetAutomatMode* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSetAutomatMode: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode mode */

   PU_PUSHNAME (ctxt_p, "mode");

   stat = asn1PE_EnumAutomatMode (ctxt_p, pvalue->mode);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgSetAutomatMode: end\n");
   return (stat);
}

int ASN1C_MsgSetAutomatMode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSetAutomatMode (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgSetAutomatMode (ASN1CTXT* ctxt_p, ASN1T_MsgSetAutomatMode* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgSetAutomatMode: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode mode */

   PU_PUSHNAME (ctxt_p, "mode");

   stat = asn1PD_EnumAutomatMode (ctxt_p, &pvalue->mode);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgSetAutomatMode: end\n");

   return (stat);
}

int ASN1C_MsgSetAutomatMode::Decode ()
{
   return asn1PD_MsgSetAutomatMode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgSetAutomatModeAck                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgSetAutomatModeAck::ASN1C_MsgSetAutomatModeAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgSetAutomatModeAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgSetAutomatModeAck (ASN1CTXT* ctxt_p, ASN1T_MsgSetAutomatModeAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgSetAutomatModeAck: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumSetAutomatModeErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgSetAutomatModeAck: end\n");
   return (stat);
}

int ASN1C_MsgSetAutomatModeAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgSetAutomatModeAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgSetAutomatModeAck (ASN1CTXT* ctxt_p, ASN1T_MsgSetAutomatModeAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgSetAutomatModeAck: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumSetAutomatModeErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgSetAutomatModeAck: end\n");

   return (stat);
}

int ASN1C_MsgSetAutomatModeAck::Decode ()
{
   return asn1PD_MsgSetAutomatModeAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatChangeKnowledgeGroup                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatChangeKnowledgeGroup::ASN1C_MsgAutomatChangeKnowledgeGroup (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatChangeKnowledgeGroup& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatChangeKnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroup* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatChangeKnowledgeGroup: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_KnowledgeGroup (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomatChangeKnowledgeGroup: end\n");
   return (stat);
}

int ASN1C_MsgAutomatChangeKnowledgeGroup::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatChangeKnowledgeGroup (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatChangeKnowledgeGroup (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroup* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAutomatChangeKnowledgeGroup: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_KnowledgeGroup (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomatChangeKnowledgeGroup: end\n");

   return (stat);
}

int ASN1C_MsgAutomatChangeKnowledgeGroup::Decode ()
{
   return asn1PD_MsgAutomatChangeKnowledgeGroup (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatChangeKnowledgeGroupAck                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatChangeKnowledgeGroupAck::ASN1C_MsgAutomatChangeKnowledgeGroupAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatChangeKnowledgeGroupAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatChangeKnowledgeGroupAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroupAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatChangeKnowledgeGroupAck: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Team (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_KnowledgeGroup (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeHierarchyErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomatChangeKnowledgeGroupAck: end\n");
   return (stat);
}

int ASN1C_MsgAutomatChangeKnowledgeGroupAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatChangeKnowledgeGroupAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatChangeKnowledgeGroupAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeKnowledgeGroupAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgAutomatChangeKnowledgeGroupAck: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Team (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_KnowledgeGroup (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeHierarchyErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomatChangeKnowledgeGroupAck: end\n");

   return (stat);
}

int ASN1C_MsgAutomatChangeKnowledgeGroupAck::Decode ()
{
   return asn1PD_MsgAutomatChangeKnowledgeGroupAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatChangeLogisticLinks                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatChangeLogisticLinks::ASN1C_MsgAutomatChangeLogisticLinks (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatChangeLogisticLinks& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatChangeLogisticLinks (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeLogisticLinks* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatChangeLogisticLinks: start\n");

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_tc2Present);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_maintenancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_santePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_ravitaillementPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgAutomatChangeLogisticLinks: end\n");
   return (stat);
}

int ASN1C_MsgAutomatChangeLogisticLinks::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatChangeLogisticLinks (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatChangeLogisticLinks (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeLogisticLinks* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgAutomatChangeLogisticLinks: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_maintenancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_santePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_ravitaillementPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgAutomatChangeLogisticLinks: end\n");

   return (stat);
}

int ASN1C_MsgAutomatChangeLogisticLinks::Decode ()
{
   return asn1PD_MsgAutomatChangeLogisticLinks (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgAutomatChangeLogisticLinksAck                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgAutomatChangeLogisticLinksAck::ASN1C_MsgAutomatChangeLogisticLinksAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgAutomatChangeLogisticLinksAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgAutomatChangeLogisticLinksAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeLogisticLinksAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgAutomatChangeLogisticLinksAck: start\n");

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_tc2Present);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_maintenancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_santePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_ravitaillementPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_Automat (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PE_Automat (ctxt_p, pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeHierarchyErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgAutomatChangeLogisticLinksAck: end\n");
   return (stat);
}

int ASN1C_MsgAutomatChangeLogisticLinksAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgAutomatChangeLogisticLinksAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgAutomatChangeLogisticLinksAck (ASN1CTXT* ctxt_p, ASN1T_MsgAutomatChangeLogisticLinksAck* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgAutomatChangeLogisticLinksAck: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "oid_tc2Present");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_tc2Present = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_maintenancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_maintenancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_santePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_santePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "oid_ravitaillementPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.oid_ravitaillementPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_tc2 */

   if (pvalue->m.oid_tc2Present) {
      PU_PUSHNAME (ctxt_p, "oid_tc2");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_tc2);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_maintenance */

   if (pvalue->m.oid_maintenancePresent) {
      PU_PUSHNAME (ctxt_p, "oid_maintenance");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_maintenance);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_sante */

   if (pvalue->m.oid_santePresent) {
      PU_PUSHNAME (ctxt_p, "oid_sante");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_sante);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode oid_ravitaillement */

   if (pvalue->m.oid_ravitaillementPresent) {
      PU_PUSHNAME (ctxt_p, "oid_ravitaillement");

      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_ravitaillement);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeHierarchyErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgAutomatChangeLogisticLinksAck: end\n");

   return (stat);
}

int ASN1C_MsgAutomatChangeLogisticLinksAck::Decode ()
{
   return asn1PD_MsgAutomatChangeLogisticLinksAck (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 19-Mar-2009.
 */
#include "Object.h"

/**************************************************************/
/*                                                            */
/*  ObjectIncludes                                            */
/*                                                            */
/**************************************************************/

ASN1C_ObjectIncludes::ASN1C_ObjectIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectIncludes (ASN1CTXT* ctxt_p, ASN1T_ObjectIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectIncludes (ASN1CTXT* ctxt_p, ASN1T_ObjectIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectIncludes::Decode ()
{
   return asn1PD_ObjectIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectExports                                             */
/*                                                            */
/**************************************************************/

ASN1C_ObjectExports::ASN1C_ObjectExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ObjectExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_ObjectExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ObjectExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_ObjectExports::Decode ()
{
   return asn1PD_ObjectExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumDemolitionTargetType                                  */
/*                                                            */
/**************************************************************/

ASN1C_EnumDemolitionTargetType::ASN1C_EnumDemolitionTargetType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDemolitionTargetType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDemolitionTargetType (ASN1CTXT* ctxt_p, ASN1T_EnumDemolitionTargetType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumDemolitionTargetType::preliminary: ui = 0; break;
      case EnumDemolitionTargetType::reserved: ui = 1; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 1);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumDemolitionTargetType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDemolitionTargetType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDemolitionTargetType (ASN1CTXT* ctxt_p, ASN1T_EnumDemolitionTargetType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumDemolitionTargetType::preliminary; break;
      case 1: *pvalue = EnumDemolitionTargetType::reserved; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumDemolitionTargetType::Decode ()
{
   return asn1PD_EnumDemolitionTargetType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumObjectErrorCode                                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumObjectErrorCode::ASN1C_EnumObjectErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumObjectErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumObjectErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumObjectErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumObjectErrorCode::no_error: ui = 0; break;
      case EnumObjectErrorCode::error_invalid_object: ui = 1; break;
      case EnumObjectErrorCode::error_invalid_id: ui = 2; break;
      case EnumObjectErrorCode::error_invalid_camp: ui = 3; break;
      case EnumObjectErrorCode::error_invalid_localisation: ui = 4; break;
      case EnumObjectErrorCode::error_missing_specific_attributes: ui = 5; break;
      case EnumObjectErrorCode::error_invalid_specific_attributes: ui = 6; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumObjectErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumObjectErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumObjectErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumObjectErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumObjectErrorCode::no_error; break;
      case 1: *pvalue = EnumObjectErrorCode::error_invalid_object; break;
      case 2: *pvalue = EnumObjectErrorCode::error_invalid_id; break;
      case 3: *pvalue = EnumObjectErrorCode::error_invalid_camp; break;
      case 4: *pvalue = EnumObjectErrorCode::error_invalid_localisation; break;
      case 5: *pvalue = EnumObjectErrorCode::error_missing_specific_attributes; break;
      case 6: *pvalue = EnumObjectErrorCode::error_invalid_specific_attributes; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumObjectErrorCode::Decode ()
{
   return asn1PD_EnumObjectErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeBypass                                     */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeBypass::ASN1C_ObjectAttributeBypass (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeBypass& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeBypass (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeBypass* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.percentagePresent);

   /* encode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pe_ConsInteger (ctxt_p, pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;

   }

   return (stat);
}

int ASN1C_ObjectAttributeBypass::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeBypass (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeBypass (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeBypass* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.percentagePresent = optbit;

   /* decode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pd_ConsInteger (ctxt_p, &pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ObjectAttributeBypass::Decode ()
{
   return asn1PD_ObjectAttributeBypass (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeConstruction                               */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeConstruction::ASN1C_ObjectAttributeConstruction (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeConstruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeConstruction (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeConstruction* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_typePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_nbrPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.densityPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.percentagePresent);

   /* encode dotation_type */

   if (pvalue->m.dotation_typePresent) {
      stat = asn1PE_DotationType (ctxt_p, pvalue->dotation_type);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotation_nbr */

   if (pvalue->m.dotation_nbrPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->dotation_nbr);
      if (stat != ASN_OK) return stat;
   }

   /* encode density */

   if (pvalue->m.densityPresent) {
      stat = pe_Real (ctxt_p, pvalue->density);if (stat != ASN_OK) return stat;
   }

   /* encode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pe_ConsInteger (ctxt_p, pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;

   }

   return (stat);
}

int ASN1C_ObjectAttributeConstruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeConstruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeConstruction (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeConstruction* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_typePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_nbrPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.densityPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.percentagePresent = optbit;

   /* decode dotation_type */

   if (pvalue->m.dotation_typePresent) {
      stat = asn1PD_DotationType (ctxt_p, &pvalue->dotation_type);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotation_nbr */

   if (pvalue->m.dotation_nbrPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->dotation_nbr);
      if (stat != ASN_OK) return stat;
   }

   /* decode density */

   if (pvalue->m.densityPresent) {
      stat = pd_Real (ctxt_p, &pvalue->density);if (stat != ASN_OK) return stat;
   }

   /* decode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pd_ConsInteger (ctxt_p, &pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ObjectAttributeConstruction::Decode ()
{
   return asn1PD_ObjectAttributeConstruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeLogistic                                   */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeLogistic::ASN1C_ObjectAttributeLogistic (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeLogistic& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeLogistic (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeLogistic* pvalue)
{
   int stat = ASN_OK;

   /* encode tc2 */

   stat = asn1PE_Automat (ctxt_p, pvalue->tc2);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeLogistic::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeLogistic (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeLogistic (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeLogistic* pvalue)
{
   int stat = ASN_OK;

   /* decode tc2 */

   stat = asn1PD_Automat (ctxt_p, &pvalue->tc2);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeLogistic::Decode ()
{
   return asn1PD_ObjectAttributeLogistic (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeInteractionHeight                          */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeInteractionHeight::ASN1C_ObjectAttributeInteractionHeight (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeInteractionHeight& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeInteractionHeight (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeInteractionHeight* pvalue)
{
   int stat = ASN_OK;

   /* encode height */

   stat = pe_Real (ctxt_p, pvalue->height);if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeInteractionHeight::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeInteractionHeight (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeInteractionHeight (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeInteractionHeight* pvalue)
{
   int stat = ASN_OK;

   /* decode height */

   stat = pd_Real (ctxt_p, &pvalue->height);if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeInteractionHeight::Decode ()
{
   return asn1PD_ObjectAttributeInteractionHeight (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LocatedQuantity                                           */
/*                                                            */
/**************************************************************/

ASN1C_LocatedQuantity::ASN1C_LocatedQuantity (
   ASN1MessageBuffer& msgBuf, ASN1T_LocatedQuantity& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LocatedQuantity (ASN1CTXT* ctxt_p, ASN1T_LocatedQuantity* pvalue)
{
   int stat = ASN_OK;

   /* encode coordinate */

   stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->coordinate);
   if (stat != ASN_OK) return stat;

   /* encode quantity */

   stat = pe_Real (ctxt_p, pvalue->quantity);if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_LocatedQuantity::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LocatedQuantity (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LocatedQuantity (ASN1CTXT* ctxt_p, ASN1T_LocatedQuantity* pvalue)
{
   int stat = ASN_OK;

   /* decode coordinate */

   stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->coordinate);
   if (stat != ASN_OK) return stat;

   /* decode quantity */

   stat = pd_Real (ctxt_p, &pvalue->quantity);if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_LocatedQuantity::Decode ()
{
   return asn1PD_LocatedQuantity (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LocatedQuantityList                                       */
/*                                                            */
/**************************************************************/

ASN1C_LocatedQuantityList::ASN1C_LocatedQuantityList (
   ASN1MessageBuffer& msgBuf, ASN1T_LocatedQuantityList& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LocatedQuantityList (ASN1CTXT* ctxt_p, ASN1T_LocatedQuantityList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_LocatedQuantity (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_LocatedQuantityList::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LocatedQuantityList (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LocatedQuantityList (ASN1CTXT* ctxt_p, ASN1T_LocatedQuantityList* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LocatedQuantity);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_LocatedQuantity (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_LocatedQuantityList::Decode ()
{
   return asn1PD_LocatedQuantityList (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeToxicCloud                                 */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeToxicCloud::ASN1C_ObjectAttributeToxicCloud (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeToxicCloud& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeToxicCloud (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeToxicCloud* pvalue)
{
   int stat = ASN_OK;

   /* encode quantities */

   stat = asn1PE_LocatedQuantityList (ctxt_p, &pvalue->quantities);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeToxicCloud::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeToxicCloud (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeToxicCloud (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeToxicCloud* pvalue)
{
   int stat = ASN_OK;

   /* decode quantities */

   stat = asn1PD_LocatedQuantityList (ctxt_p, &pvalue->quantities);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeToxicCloud::Decode ()
{
   return asn1PD_ObjectAttributeToxicCloud (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeMine                                       */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeMine::ASN1C_ObjectAttributeMine (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeMine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeMine (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeMine* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_typePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_nbrPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.densityPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.percentagePresent);

   /* encode dotation_type */

   if (pvalue->m.dotation_typePresent) {
      stat = asn1PE_DotationType (ctxt_p, pvalue->dotation_type);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotation_nbr */

   if (pvalue->m.dotation_nbrPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->dotation_nbr);
      if (stat != ASN_OK) return stat;
   }

   /* encode density */

   if (pvalue->m.densityPresent) {
      stat = pe_Real (ctxt_p, pvalue->density);if (stat != ASN_OK) return stat;
   }

   /* encode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pe_ConsInteger (ctxt_p, pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;

   }

   return (stat);
}

int ASN1C_ObjectAttributeMine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeMine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeMine (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeMine* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_typePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_nbrPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.densityPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.percentagePresent = optbit;

   /* decode dotation_type */

   if (pvalue->m.dotation_typePresent) {
      stat = asn1PD_DotationType (ctxt_p, &pvalue->dotation_type);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotation_nbr */

   if (pvalue->m.dotation_nbrPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->dotation_nbr);
      if (stat != ASN_OK) return stat;
   }

   /* decode density */

   if (pvalue->m.densityPresent) {
      stat = pd_Real (ctxt_p, &pvalue->density);if (stat != ASN_OK) return stat;
   }

   /* decode percentage */

   if (pvalue->m.percentagePresent) {
      stat = pd_ConsInteger (ctxt_p, &pvalue->percentage, 0, 100);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ObjectAttributeMine::Decode ()
{
   return asn1PD_ObjectAttributeMine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeActivityTime                               */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeActivityTime::ASN1C_ObjectAttributeActivityTime (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeActivityTime& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeActivityTime (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeActivityTime* pvalue)
{
   int stat = ASN_OK;

   /* encode value */

   stat = pe_UnconsInteger (ctxt_p, pvalue->value);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeActivityTime::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeActivityTime (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeActivityTime (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeActivityTime* pvalue)
{
   int stat = ASN_OK;

   /* decode value */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->value);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeActivityTime::Decode ()
{
   return asn1PD_ObjectAttributeActivityTime (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeNBC                                        */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeNBC::ASN1C_ObjectAttributeNBC (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeNBC& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeNBC (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeNBC* pvalue)
{
   int stat = ASN_OK;

   /* encode danger_level */

   stat = pe_ConsInteger (ctxt_p, pvalue->danger_level, 0, 10);
   if (stat != ASN_OK) return stat;


   /* encode nbc_agents */

   stat = asn1PE_ListOID (ctxt_p, &pvalue->nbc_agents);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeNBC::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeNBC (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeNBC (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeNBC* pvalue)
{
   int stat = ASN_OK;

   /* decode danger_level */

   stat = pd_ConsInteger (ctxt_p, &pvalue->danger_level, 0, 10);
   if (stat != ASN_OK) return stat;

   /* decode nbc_agents */

   stat = asn1PD_ListOID (ctxt_p, &pvalue->nbc_agents);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeNBC::Decode ()
{
   return asn1PD_ObjectAttributeNBC (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeObstacle                                   */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeObstacle::ASN1C_ObjectAttributeObstacle (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeObstacle& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeObstacle (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeObstacle* pvalue)
{
   int stat = ASN_OK;

   /* encode type */

   stat = asn1PE_EnumDemolitionTargetType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return stat;

   /* encode activated */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->activated);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeObstacle::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeObstacle (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeObstacle (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeObstacle* pvalue)
{
   int stat = ASN_OK;

   /* decode type */

   stat = asn1PD_EnumDemolitionTargetType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return stat;

   /* decode activated */

   stat = pd_bit (ctxt_p, &pvalue->activated);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeObstacle::Decode ()
{
   return asn1PD_ObjectAttributeObstacle (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeCrossingSite                               */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeCrossingSite::ASN1C_ObjectAttributeCrossingSite (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeCrossingSite& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeCrossingSite (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeCrossingSite* pvalue)
{
   int stat = ASN_OK;

   /* encode width */

   stat = pe_UnconsInteger (ctxt_p, pvalue->width);
   if (stat != ASN_OK) return stat;

   /* encode depth */

   stat = pe_UnconsInteger (ctxt_p, pvalue->depth);
   if (stat != ASN_OK) return stat;

   /* encode flow_rate */

   stat = pe_UnconsInteger (ctxt_p, pvalue->flow_rate);
   if (stat != ASN_OK) return stat;

   /* encode banks_require_fitting */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->banks_require_fitting);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeCrossingSite::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeCrossingSite (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeCrossingSite (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeCrossingSite* pvalue)
{
   int stat = ASN_OK;

   /* decode width */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->width);
   if (stat != ASN_OK) return stat;

   /* decode depth */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->depth);
   if (stat != ASN_OK) return stat;

   /* decode flow_rate */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->flow_rate);
   if (stat != ASN_OK) return stat;

   /* decode banks_require_fitting */

   stat = pd_bit (ctxt_p, &pvalue->banks_require_fitting);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeCrossingSite::Decode ()
{
   return asn1PD_ObjectAttributeCrossingSite (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeSupplyRoute                                */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeSupplyRoute::ASN1C_ObjectAttributeSupplyRoute (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeSupplyRoute& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeSupplyRoute (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeSupplyRoute* pvalue)
{
   int stat = ASN_OK;

   /* encode equipped */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->equipped);
   if (stat != ASN_OK) return stat;

   /* encode max_weight */

   stat = pe_UnconsInteger (ctxt_p, pvalue->max_weight);
   if (stat != ASN_OK) return stat;

   /* encode width */

   stat = pe_UnconsInteger (ctxt_p, pvalue->width);
   if (stat != ASN_OK) return stat;

   /* encode length */

   stat = pe_UnconsInteger (ctxt_p, pvalue->length);
   if (stat != ASN_OK) return stat;

   /* encode flow_rate */

   stat = pe_UnconsInteger (ctxt_p, pvalue->flow_rate);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeSupplyRoute::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeSupplyRoute (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeSupplyRoute (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeSupplyRoute* pvalue)
{
   int stat = ASN_OK;

   /* decode equipped */

   stat = pd_bit (ctxt_p, &pvalue->equipped);
   if (stat != ASN_OK) return stat;

   /* decode max_weight */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->max_weight);
   if (stat != ASN_OK) return stat;

   /* decode width */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->width);
   if (stat != ASN_OK) return stat;

   /* decode length */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->length);
   if (stat != ASN_OK) return stat;

   /* decode flow_rate */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->flow_rate);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeSupplyRoute::Decode ()
{
   return asn1PD_ObjectAttributeSupplyRoute (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeFire                                       */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeFire::ASN1C_ObjectAttributeFire (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeFire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeFire (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeFire* pvalue)
{
   int stat = ASN_OK;

   /* encode class_id */

   stat = asn1PE_OID (ctxt_p, pvalue->class_id);
   if (stat != ASN_OK) return stat;

   /* encode heat */

   stat = pe_UnconsInteger (ctxt_p, pvalue->heat);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeFire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeFire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeFire (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeFire* pvalue)
{
   int stat = ASN_OK;

   /* decode class_id */

   stat = asn1PD_OID (ctxt_p, &pvalue->class_id);
   if (stat != ASN_OK) return stat;

   /* decode heat */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->heat);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeFire::Decode ()
{
   return asn1PD_ObjectAttributeFire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributeMedicalTreatment                           */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributeMedicalTreatment::ASN1C_ObjectAttributeMedicalTreatment (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributeMedicalTreatment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributeMedicalTreatment (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeMedicalTreatment* pvalue)
{
   int stat = ASN_OK;

   /* encode type_id */

   stat = asn1PE_ListOID (ctxt_p, &pvalue->type_id);
   if (stat != ASN_OK) return stat;

   /* encode beds */

   stat = pe_UnconsInteger (ctxt_p, pvalue->beds);
   if (stat != ASN_OK) return stat;

   /* encode available_beds */

   stat = pe_UnconsInteger (ctxt_p, pvalue->available_beds);
   if (stat != ASN_OK) return stat;

   /* encode doctors */

   stat = pe_UnconsInteger (ctxt_p, pvalue->doctors);
   if (stat != ASN_OK) return stat;

   /* encode available_doctors */

   stat = pe_UnconsInteger (ctxt_p, pvalue->available_doctors);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ObjectAttributeMedicalTreatment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributeMedicalTreatment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributeMedicalTreatment (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributeMedicalTreatment* pvalue)
{
   int stat = ASN_OK;

   /* decode type_id */

   stat = asn1PD_ListOID (ctxt_p, &pvalue->type_id);
   if (stat != ASN_OK) return stat;

   /* decode beds */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->beds);
   if (stat != ASN_OK) return stat;

   /* decode available_beds */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->available_beds);
   if (stat != ASN_OK) return stat;

   /* decode doctors */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->doctors);
   if (stat != ASN_OK) return stat;

   /* decode available_doctors */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->available_doctors);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ObjectAttributeMedicalTreatment::Decode ()
{
   return asn1PD_ObjectAttributeMedicalTreatment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectAttributes                                          */
/*                                                            */
/**************************************************************/

ASN1C_ObjectAttributes::ASN1C_ObjectAttributes (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectAttributes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectAttributes (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributes* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.constructionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.obstaclePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.minePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.activity_timePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.bypassPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.logisticPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nbcPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.crossing_sitePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.supply_routePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.toxic_cloudPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.firePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.medical_treatmentPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.interaction_heightPresent);

   /* encode construction */

   if (pvalue->m.constructionPresent) {
      stat = asn1PE_ObjectAttributeConstruction (ctxt_p, &pvalue->construction);
      if (stat != ASN_OK) return stat;
   }

   /* encode obstacle */

   if (pvalue->m.obstaclePresent) {
      stat = asn1PE_ObjectAttributeObstacle (ctxt_p, &pvalue->obstacle);
      if (stat != ASN_OK) return stat;
   }

   /* encode mine */

   if (pvalue->m.minePresent) {
      stat = asn1PE_ObjectAttributeMine (ctxt_p, &pvalue->mine);
      if (stat != ASN_OK) return stat;
   }

   /* encode activity_time */

   if (pvalue->m.activity_timePresent) {
      stat = asn1PE_ObjectAttributeActivityTime (ctxt_p, &pvalue->activity_time);
      if (stat != ASN_OK) return stat;
   }

   /* encode bypass */

   if (pvalue->m.bypassPresent) {
      stat = asn1PE_ObjectAttributeBypass (ctxt_p, &pvalue->bypass);
      if (stat != ASN_OK) return stat;
   }

   /* encode logistic */

   if (pvalue->m.logisticPresent) {
      stat = asn1PE_ObjectAttributeLogistic (ctxt_p, &pvalue->logistic);
      if (stat != ASN_OK) return stat;
   }

   /* encode nbc */

   if (pvalue->m.nbcPresent) {
      stat = asn1PE_ObjectAttributeNBC (ctxt_p, &pvalue->nbc);
      if (stat != ASN_OK) return stat;
   }

   /* encode crossing_site */

   if (pvalue->m.crossing_sitePresent) {
      stat = asn1PE_ObjectAttributeCrossingSite (ctxt_p, &pvalue->crossing_site);
      if (stat != ASN_OK) return stat;
   }

   /* encode supply_route */

   if (pvalue->m.supply_routePresent) {
      stat = asn1PE_ObjectAttributeSupplyRoute (ctxt_p, &pvalue->supply_route);
      if (stat != ASN_OK) return stat;
   }

   /* encode toxic_cloud */

   if (pvalue->m.toxic_cloudPresent) {
      stat = asn1PE_ObjectAttributeToxicCloud (ctxt_p, &pvalue->toxic_cloud);
      if (stat != ASN_OK) return stat;
   }

   /* encode fire */

   if (pvalue->m.firePresent) {
      stat = asn1PE_ObjectAttributeFire (ctxt_p, &pvalue->fire);
      if (stat != ASN_OK) return stat;
   }

   /* encode medical_treatment */

   if (pvalue->m.medical_treatmentPresent) {
      stat = asn1PE_ObjectAttributeMedicalTreatment (ctxt_p, &pvalue->medical_treatment);
      if (stat != ASN_OK) return stat;
   }

   /* encode interaction_height */

   if (pvalue->m.interaction_heightPresent) {
      stat = asn1PE_ObjectAttributeInteractionHeight (ctxt_p, &pvalue->interaction_height);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_ObjectAttributes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectAttributes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectAttributes (ASN1CTXT* ctxt_p, ASN1T_ObjectAttributes* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.constructionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.obstaclePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.minePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.activity_timePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.bypassPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.logisticPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nbcPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.crossing_sitePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.supply_routePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.toxic_cloudPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.firePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.medical_treatmentPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.interaction_heightPresent = optbit;

   /* decode construction */

   if (pvalue->m.constructionPresent) {
      stat = asn1PD_ObjectAttributeConstruction (ctxt_p, &pvalue->construction);
      if (stat != ASN_OK) return stat;
   }

   /* decode obstacle */

   if (pvalue->m.obstaclePresent) {
      stat = asn1PD_ObjectAttributeObstacle (ctxt_p, &pvalue->obstacle);
      if (stat != ASN_OK) return stat;
   }

   /* decode mine */

   if (pvalue->m.minePresent) {
      stat = asn1PD_ObjectAttributeMine (ctxt_p, &pvalue->mine);
      if (stat != ASN_OK) return stat;
   }

   /* decode activity_time */

   if (pvalue->m.activity_timePresent) {
      stat = asn1PD_ObjectAttributeActivityTime (ctxt_p, &pvalue->activity_time);
      if (stat != ASN_OK) return stat;
   }

   /* decode bypass */

   if (pvalue->m.bypassPresent) {
      stat = asn1PD_ObjectAttributeBypass (ctxt_p, &pvalue->bypass);
      if (stat != ASN_OK) return stat;
   }

   /* decode logistic */

   if (pvalue->m.logisticPresent) {
      stat = asn1PD_ObjectAttributeLogistic (ctxt_p, &pvalue->logistic);
      if (stat != ASN_OK) return stat;
   }

   /* decode nbc */

   if (pvalue->m.nbcPresent) {
      stat = asn1PD_ObjectAttributeNBC (ctxt_p, &pvalue->nbc);
      if (stat != ASN_OK) return stat;
   }

   /* decode crossing_site */

   if (pvalue->m.crossing_sitePresent) {
      stat = asn1PD_ObjectAttributeCrossingSite (ctxt_p, &pvalue->crossing_site);
      if (stat != ASN_OK) return stat;
   }

   /* decode supply_route */

   if (pvalue->m.supply_routePresent) {
      stat = asn1PD_ObjectAttributeSupplyRoute (ctxt_p, &pvalue->supply_route);
      if (stat != ASN_OK) return stat;
   }

   /* decode toxic_cloud */

   if (pvalue->m.toxic_cloudPresent) {
      stat = asn1PD_ObjectAttributeToxicCloud (ctxt_p, &pvalue->toxic_cloud);
      if (stat != ASN_OK) return stat;
   }

   /* decode fire */

   if (pvalue->m.firePresent) {
      stat = asn1PD_ObjectAttributeFire (ctxt_p, &pvalue->fire);
      if (stat != ASN_OK) return stat;
   }

   /* decode medical_treatment */

   if (pvalue->m.medical_treatmentPresent) {
      stat = asn1PD_ObjectAttributeMedicalTreatment (ctxt_p, &pvalue->medical_treatment);
      if (stat != ASN_OK) return stat;
   }

   /* decode interaction_height */

   if (pvalue->m.interaction_heightPresent) {
      stat = asn1PD_ObjectAttributeInteractionHeight (ctxt_p, &pvalue->interaction_height);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_ObjectAttributes::Decode ()
{
   return asn1PD_ObjectAttributes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectCreation                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectCreation::ASN1C_MsgObjectCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectCreation (ASN1CTXT* ctxt_p, ASN1T_MsgObjectCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode type */

   stat = pe_VisibleString (ctxt_p, pvalue->type, 0);
   if (stat != ASN_OK) return stat;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode team */

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return stat;

   /* encode location */

   stat = asn1PE_Location (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* encode attributes */

   stat = asn1PE_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectCreation (ASN1CTXT* ctxt_p, ASN1T_MsgObjectCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode type */

   stat = pd_VisibleString (ctxt_p, &pvalue->type, 0);
   if (stat != ASN_OK) return stat;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode team */

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return stat;

   /* decode location */

   stat = asn1PD_Location (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* decode attributes */

   stat = asn1PD_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgObjectCreation::Decode ()
{
   return asn1PD_MsgObjectCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectUpdate                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectUpdate::ASN1C_MsgObjectUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgObjectUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.locationPresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PE_Location (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* encode attributes */

   stat = asn1PE_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgObjectUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.locationPresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode location */

   if (pvalue->m.locationPresent) {
      stat = asn1PD_Location (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return stat;
   }

   /* decode attributes */

   stat = asn1PD_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgObjectUpdate::Decode ()
{
   return asn1PD_MsgObjectUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectDestruction                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectDestruction::ASN1C_MsgObjectDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectDestruction value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgObjectDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectDestruction* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectDestruction::Decode ()
{
   return asn1PD_MsgObjectDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionUpdateObject                                   */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionUpdateObject::ASN1C_MagicActionUpdateObject (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionUpdateObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionUpdateObject (ASN1CTXT* ctxt_p, ASN1T_MagicActionUpdateObject* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode attributes */

   stat = asn1PE_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionUpdateObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionUpdateObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionUpdateObject (ASN1CTXT* ctxt_p, ASN1T_MagicActionUpdateObject* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode attributes */

   stat = asn1PD_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MagicActionUpdateObject::Decode ()
{
   return asn1PD_MagicActionUpdateObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionCreateObject                                   */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionCreateObject::ASN1C_MagicActionCreateObject (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionCreateObject& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionCreateObject (ASN1CTXT* ctxt_p, ASN1T_MagicActionCreateObject* pvalue)
{
   int stat = ASN_OK;

   /* encode type */

   stat = pe_VisibleString (ctxt_p, pvalue->type, 0);
   if (stat != ASN_OK) return stat;

   /* encode location */

   stat = asn1PE_Location (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode team */

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return stat;

   /* encode attributes */

   stat = asn1PE_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionCreateObject::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionCreateObject (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionCreateObject (ASN1CTXT* ctxt_p, ASN1T_MagicActionCreateObject* pvalue)
{
   int stat = ASN_OK;

   /* decode type */

   stat = pd_VisibleString (ctxt_p, &pvalue->type, 0);
   if (stat != ASN_OK) return stat;

   /* decode location */

   stat = asn1PD_Location (ctxt_p, &pvalue->location);
   if (stat != ASN_OK) return stat;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode team */

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return stat;

   /* decode attributes */

   stat = asn1PD_ObjectAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MagicActionCreateObject::Decode ()
{
   return asn1PD_MagicActionCreateObject (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionDestroyObjet                                   */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionDestroyObjet::ASN1C_MagicActionDestroyObjet (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionDestroyObjet& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionDestroyObjet (ASN1CTXT* ctxt_p, ASN1T_MagicActionDestroyObjet value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionDestroyObjet::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionDestroyObjet (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionDestroyObjet (ASN1CTXT* ctxt_p, ASN1T_MagicActionDestroyObjet* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionDestroyObjet::Decode ()
{
   return asn1PD_MagicActionDestroyObjet (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectMagicAction_action                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectMagicAction_action::ASN1C_MsgObjectMagicAction_action (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectMagicAction_action& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicAction_action* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* create_object */
      case 1:
         stat = asn1PE_MagicActionCreateObject (ctxt_p, pvalue->u.create_object);
         if (stat != ASN_OK) return stat;
         break;

      /* update_object */
      case 2:
         stat = asn1PE_MagicActionUpdateObject (ctxt_p, pvalue->u.update_object);
         if (stat != ASN_OK) return stat;
         break;

      /* destroy_object */
      case 3:
         stat = asn1PE_MagicActionDestroyObjet (ctxt_p, pvalue->u.destroy_object);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgObjectMagicAction_action::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectMagicAction_action (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicAction_action* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* create_object */
      case 0:
         pvalue->u.create_object = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionCreateObject);

         stat = asn1PD_MagicActionCreateObject (ctxt_p, pvalue->u.create_object);
         if (stat != ASN_OK) return stat;

         break;

      /* update_object */
      case 1:
         pvalue->u.update_object = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionUpdateObject);

         stat = asn1PD_MagicActionUpdateObject (ctxt_p, pvalue->u.update_object);
         if (stat != ASN_OK) return stat;

         break;

      /* destroy_object */
      case 2:
         stat = asn1PD_MagicActionDestroyObjet (ctxt_p, &pvalue->u.destroy_object);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgObjectMagicAction_action::Decode ()
{
   return asn1PD_MsgObjectMagicAction_action (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectMagicAction                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectMagicAction::ASN1C_MsgObjectMagicAction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectMagicAction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* encode action */

   stat = asn1PE_MsgObjectMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectMagicAction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectMagicAction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* decode action */

   stat = asn1PD_MsgObjectMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgObjectMagicAction::Decode ()
{
   return asn1PD_MsgObjectMagicAction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectMagicActionAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectMagicActionAck::ASN1C_MsgObjectMagicActionAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectMagicActionAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* encode error_code */

   stat = asn1PE_EnumObjectErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectMagicActionAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectMagicActionAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgObjectMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* decode error_code */

   stat = asn1PD_EnumObjectErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgObjectMagicActionAck::Decode ()
{
   return asn1PD_MsgObjectMagicActionAck (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 13-Jul-2007.
 */
#include "LimaLimite.h"

/**************************************************************/
/*                                                            */
/*  LimaLimiteIncludes                                        */
/*                                                            */
/**************************************************************/

ASN1C_LimaLimiteIncludes::ASN1C_LimaLimiteIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_LimaLimiteIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimaLimiteIncludes (ASN1CTXT* ctxt_p, ASN1T_LimaLimiteIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_LimaLimiteIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaLimiteIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimaLimiteIncludes (ASN1CTXT* ctxt_p, ASN1T_LimaLimiteIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_LimaLimiteIncludes::Decode ()
{
   return asn1PD_LimaLimiteIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimaLimiteExports                                         */
/*                                                            */
/**************************************************************/

ASN1C_LimaLimiteExports::ASN1C_LimaLimiteExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_LimaLimiteExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_LimaLimiteExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaLimiteExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_LimaLimiteExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_LimaLimiteExports::Decode ()
{
   return asn1PD_LimaLimiteExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumInfoContextErrorCode                                  */
/*                                                            */
/**************************************************************/

ASN1C_EnumInfoContextErrorCode::ASN1C_EnumInfoContextErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumInfoContextErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumInfoContextErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumInfoContextErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumInfoContextErrorCode::no_error: ui = 0; break;
      case EnumInfoContextErrorCode::error_invalid_id: ui = 1; break;
      case EnumInfoContextErrorCode::error_invalid_geometry: ui = 2; break;
      case EnumInfoContextErrorCode::error_invalid_lima_function: ui = 3; break;
      case EnumInfoContextErrorCode::error_invalid_diffusion: ui = 4; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumInfoContextErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumInfoContextErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumInfoContextErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumInfoContextErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumInfoContextErrorCode::no_error; break;
      case 1: *pvalue = EnumInfoContextErrorCode::error_invalid_id; break;
      case 2: *pvalue = EnumInfoContextErrorCode::error_invalid_geometry; break;
      case 3: *pvalue = EnumInfoContextErrorCode::error_invalid_lima_function; break;
      case 4: *pvalue = EnumInfoContextErrorCode::error_invalid_diffusion; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumInfoContextErrorCode::Decode ()
{
   return asn1PD_EnumInfoContextErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumLimaType                                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumLimaType::ASN1C_EnumLimaType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLimaType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLimaType (ASN1CTXT* ctxt_p, ASN1T_EnumLimaType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumLimaType::ligne_debouche: ui = 0; break;
      case EnumLimaType::ligne_changement_attitude: ui = 1; break;
      case EnumLimaType::ligne_coordination: ui = 2; break;
      case EnumLimaType::ligne_interdire: ui = 3; break;
      case EnumLimaType::ligne_objectif: ui = 4; break;
      case EnumLimaType::ligne_coup_arret: ui = 5; break;
      case EnumLimaType::ligne_recueil: ui = 6; break;
      case EnumLimaType::ligne_debut_mission: ui = 7; break;
      case EnumLimaType::ligne_fin_mission: ui = 8; break;
      case EnumLimaType::ligne_identification_accueil: ui = 9; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 9);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumLimaType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLimaType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLimaType (ASN1CTXT* ctxt_p, ASN1T_EnumLimaType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 9);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumLimaType::ligne_debouche; break;
      case 1: *pvalue = EnumLimaType::ligne_changement_attitude; break;
      case 2: *pvalue = EnumLimaType::ligne_coordination; break;
      case 3: *pvalue = EnumLimaType::ligne_interdire; break;
      case 4: *pvalue = EnumLimaType::ligne_objectif; break;
      case 5: *pvalue = EnumLimaType::ligne_coup_arret; break;
      case 6: *pvalue = EnumLimaType::ligne_recueil; break;
      case 7: *pvalue = EnumLimaType::ligne_debut_mission; break;
      case 8: *pvalue = EnumLimaType::ligne_fin_mission; break;
      case 9: *pvalue = EnumLimaType::ligne_identification_accueil; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumLimaType::Decode ()
{
   return asn1PD_EnumLimaType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TacticalLinesDiffusion                                    */
/*                                                            */
/**************************************************************/

ASN1C_TacticalLinesDiffusion::ASN1C_TacticalLinesDiffusion (
   ASN1MessageBuffer& msgBuf, ASN1T_TacticalLinesDiffusion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TacticalLinesDiffusion (ASN1CTXT* ctxt_p, ASN1T_TacticalLinesDiffusion* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 1);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* automat */
      case 1:
         stat = asn1PE_Automat (ctxt_p, pvalue->u.automat);
         if (stat != ASN_OK) return stat;
         break;

      /* formation */
      case 2:
         stat = asn1PE_Formation (ctxt_p, pvalue->u.formation);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_TacticalLinesDiffusion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TacticalLinesDiffusion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_TacticalLinesDiffusion (ASN1CTXT* ctxt_p, ASN1T_TacticalLinesDiffusion* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* automat */
      case 0:
         stat = asn1PD_Automat (ctxt_p, &pvalue->u.automat);
         if (stat != ASN_OK) return stat;

         break;

      /* formation */
      case 1:
         stat = asn1PD_Formation (ctxt_p, &pvalue->u.formation);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_TacticalLinesDiffusion::Decode ()
{
   return asn1PD_TacticalLinesDiffusion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEnumLimaType                                        */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEnumLimaType::ASN1C__SeqOfEnumLimaType (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEnumLimaType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEnumLimaType (ASN1CTXT* ctxt_p, ASN1T__SeqOfEnumLimaType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_EnumLimaType (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfEnumLimaType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEnumLimaType (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEnumLimaType (ASN1CTXT* ctxt_p, ASN1T__SeqOfEnumLimaType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EnumLimaType);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_EnumLimaType (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfEnumLimaType::Decode ()
{
   return asn1PD__SeqOfEnumLimaType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimaOrder                                                 */
/*                                                            */
/**************************************************************/

ASN1C_LimaOrder::ASN1C_LimaOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_LimaOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimaOrder (ASN1CTXT* ctxt_p, ASN1T_LimaOrder* pvalue)
{
   int stat = ASN_OK;

   /* encode lima */

   stat = asn1PE_Line (ctxt_p, &pvalue->lima);
   if (stat != ASN_OK) return stat;

   /* encode fonctions */

   stat = asn1PE__SeqOfEnumLimaType (ctxt_p, &pvalue->fonctions);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_LimaOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimaOrder (ASN1CTXT* ctxt_p, ASN1T_LimaOrder* pvalue)
{
   int stat = ASN_OK;

   /* decode lima */

   stat = asn1PD_Line (ctxt_p, &pvalue->lima);
   if (stat != ASN_OK) return stat;

   /* decode fonctions */

   stat = asn1PD__SeqOfEnumLimaType (ctxt_p, &pvalue->fonctions);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_LimaOrder::Decode ()
{
   return asn1PD_LimaOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimasOrder                                                */
/*                                                            */
/**************************************************************/

ASN1C_LimasOrder::ASN1C_LimasOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_LimasOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimasOrder (ASN1CTXT* ctxt_p, ASN1T_LimasOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_LimaOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_LimasOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimasOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimasOrder (ASN1CTXT* ctxt_p, ASN1T_LimasOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LimaOrder);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_LimaOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_LimasOrder::Decode ()
{
   return asn1PD_LimasOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TacticalLine                                              */
/*                                                            */
/**************************************************************/

ASN1C_TacticalLine::ASN1C_TacticalLine (
   ASN1MessageBuffer& msgBuf, ASN1T_TacticalLine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TacticalLine (ASN1CTXT* ctxt_p, ASN1T_TacticalLine* pvalue)
{
   int stat = ASN_OK;

   /* encode name */

   stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* encode geometry */

   stat = asn1PE_Line (ctxt_p, &pvalue->geometry);
   if (stat != ASN_OK) return stat;

   /* encode diffusion */

   stat = asn1PE_TacticalLinesDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_TacticalLine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TacticalLine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_TacticalLine (ASN1CTXT* ctxt_p, ASN1T_TacticalLine* pvalue)
{
   int stat = ASN_OK;

   /* decode name */

   stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
   if (stat != ASN_OK) return stat;

   /* decode geometry */

   stat = asn1PD_Line (ctxt_p, &pvalue->geometry);
   if (stat != ASN_OK) return stat;

   /* decode diffusion */

   stat = asn1PD_TacticalLinesDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_TacticalLine::Decode ()
{
   return asn1PD_TacticalLine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreationRequestAck                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreationRequestAck::ASN1C_MsgLimitCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitCreationRequestAck::Decode ()
{
   return asn1PD_MsgLimitCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreationRequest                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreationRequest::ASN1C_MsgLimitCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitCreationRequest::Decode ()
{
   return asn1PD_MsgLimitCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreation                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreation::ASN1C_MsgLimitCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimitCreation::Decode ()
{
   return asn1PD_MsgLimitCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdateRequestAck                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdateRequestAck::ASN1C_MsgLimitUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdateRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitUpdateRequestAck::Decode ()
{
   return asn1PD_MsgLimitUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdateRequest                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdateRequest::ASN1C_MsgLimitUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimitUpdateRequest::Decode ()
{
   return asn1PD_MsgLimitUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdate                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdate::ASN1C_MsgLimitUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdate* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdate* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimitUpdate::Decode ()
{
   return asn1PD_MsgLimitUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestructionRequestAck                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestructionRequestAck::ASN1C_MsgLimitDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestructionRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitDestructionRequestAck::Decode ()
{
   return asn1PD_MsgLimitDestructionRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestructionRequest                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestructionRequest::ASN1C_MsgLimitDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequest value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitDestructionRequest::Decode ()
{
   return asn1PD_MsgLimitDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestruction                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestruction::ASN1C_MsgLimitDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestruction value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimitDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestruction* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimitDestruction::Decode ()
{
   return asn1PD_MsgLimitDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreationRequestAck                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreationRequestAck::ASN1C_MsgLimaCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaCreationRequestAck::Decode ()
{
   return asn1PD_MsgLimaCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreationRequest                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreationRequest::ASN1C_MsgLimaCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaCreationRequest::Decode ()
{
   return asn1PD_MsgLimaCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreation::ASN1C_MsgLimaCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimaCreation::Decode ()
{
   return asn1PD_MsgLimaCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdateRequestAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdateRequestAck::ASN1C_MsgLimaUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdateRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaUpdateRequestAck::Decode ()
{
   return asn1PD_MsgLimaUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdateRequest                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdateRequest::ASN1C_MsgLimaUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimaUpdateRequest::Decode ()
{
   return asn1PD_MsgLimaUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdate                                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdate::ASN1C_MsgLimaUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdate* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode tactical_line */

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdate* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode tactical_line */

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLimaUpdate::Decode ()
{
   return asn1PD_MsgLimaUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestructionRequestAck                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestructionRequestAck::ASN1C_MsgLimaDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestructionRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaDestructionRequestAck::Decode ()
{
   return asn1PD_MsgLimaDestructionRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestructionRequest                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestructionRequest::ASN1C_MsgLimaDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequest value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaDestructionRequest::Decode ()
{
   return asn1PD_MsgLimaDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestruction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestruction::ASN1C_MsgLimaDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestruction value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLimaDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestruction* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLimaDestruction::Decode ()
{
   return asn1PD_MsgLimaDestruction (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 31-Jan-2007.
 */
#include "LimaLimite.h"

/**************************************************************/
/*                                                            */
/*  LimaLimiteIncludes                                        */
/*                                                            */
/**************************************************************/

ASN1C_LimaLimiteIncludes::ASN1C_LimaLimiteIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_LimaLimiteIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimaLimiteIncludes (ASN1CTXT* ctxt_p, ASN1T_LimaLimiteIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LimaLimiteIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_LimaLimiteIncludes: end\n");
   return (stat);
}

int ASN1C_LimaLimiteIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaLimiteIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimaLimiteIncludes (ASN1CTXT* ctxt_p, ASN1T_LimaLimiteIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LimaLimiteIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_LimaLimiteIncludes: end\n");

   return (stat);
}

int ASN1C_LimaLimiteIncludes::Decode ()
{
   return asn1PD_LimaLimiteIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimaLimiteExports                                         */
/*                                                            */
/**************************************************************/

ASN1C_LimaLimiteExports::ASN1C_LimaLimiteExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_LimaLimiteExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LimaLimiteExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_LimaLimiteExports: end\n");
   return (stat);
}

int ASN1C_LimaLimiteExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaLimiteExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_LimaLimiteExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LimaLimiteExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_LimaLimiteExports: end\n");

   return (stat);
}

int ASN1C_LimaLimiteExports::Decode ()
{
   return asn1PD_LimaLimiteExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumInfoContextErrorCode                                  */
/*                                                            */
/**************************************************************/

ASN1C_EnumInfoContextErrorCode::ASN1C_EnumInfoContextErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumInfoContextErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumInfoContextErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumInfoContextErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumInfoContextErrorCode: start\n");

   switch (value) {
      case EnumInfoContextErrorCode::no_error: ui = 0; break;
      case EnumInfoContextErrorCode::error_invalid_id: ui = 1; break;
      case EnumInfoContextErrorCode::error_invalid_geometry: ui = 2; break;
      case EnumInfoContextErrorCode::error_invalid_lima_function: ui = 3; break;
      case EnumInfoContextErrorCode::error_invalid_diffusion: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumInfoContextErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumInfoContextErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumInfoContextErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumInfoContextErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumInfoContextErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumInfoContextErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumInfoContextErrorCode::no_error; break;
      case 1: *pvalue = EnumInfoContextErrorCode::error_invalid_id; break;
      case 2: *pvalue = EnumInfoContextErrorCode::error_invalid_geometry; break;
      case 3: *pvalue = EnumInfoContextErrorCode::error_invalid_lima_function; break;
      case 4: *pvalue = EnumInfoContextErrorCode::error_invalid_diffusion; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumInfoContextErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumInfoContextErrorCode::Decode ()
{
   return asn1PD_EnumInfoContextErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumTypeLima                                              */
/*                                                            */
/**************************************************************/

ASN1C_EnumTypeLima::ASN1C_EnumTypeLima (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumTypeLima& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumTypeLima (ASN1CTXT* ctxt_p, ASN1T_EnumTypeLima value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumTypeLima: start\n");

   switch (value) {
      case EnumTypeLima::ligne_debouche: ui = 0; break;
      case EnumTypeLima::ligne_changement_attitude: ui = 1; break;
      case EnumTypeLima::ligne_coordination: ui = 2; break;
      case EnumTypeLima::ligne_interdire: ui = 3; break;
      case EnumTypeLima::ligne_objectif: ui = 4; break;
      case EnumTypeLima::ligne_coup_arret: ui = 5; break;
      case EnumTypeLima::ligne_recueil: ui = 6; break;
      case EnumTypeLima::ligne_debut_mission: ui = 7; break;
      case EnumTypeLima::ligne_fin_mission: ui = 8; break;
      case EnumTypeLima::ligne_identification_accueil: ui = 9; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumTypeLima: end\n");
   return (stat);
}

int ASN1C_EnumTypeLima::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumTypeLima (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumTypeLima (ASN1CTXT* ctxt_p, ASN1T_EnumTypeLima* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumTypeLima: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumTypeLima::ligne_debouche; break;
      case 1: *pvalue = EnumTypeLima::ligne_changement_attitude; break;
      case 2: *pvalue = EnumTypeLima::ligne_coordination; break;
      case 3: *pvalue = EnumTypeLima::ligne_interdire; break;
      case 4: *pvalue = EnumTypeLima::ligne_objectif; break;
      case 5: *pvalue = EnumTypeLima::ligne_coup_arret; break;
      case 6: *pvalue = EnumTypeLima::ligne_recueil; break;
      case 7: *pvalue = EnumTypeLima::ligne_debut_mission; break;
      case 8: *pvalue = EnumTypeLima::ligne_fin_mission; break;
      case 9: *pvalue = EnumTypeLima::ligne_identification_accueil; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumTypeLima: end\n");

   return (stat);
}

int ASN1C_EnumTypeLima::Decode ()
{
   return asn1PD_EnumTypeLima (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TacticalLinesDiffusion                                    */
/*                                                            */
/**************************************************************/

ASN1C_TacticalLinesDiffusion::ASN1C_TacticalLinesDiffusion (
   ASN1MessageBuffer& msgBuf, ASN1T_TacticalLinesDiffusion& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TacticalLinesDiffusion (ASN1CTXT* ctxt_p, ASN1T_TacticalLinesDiffusion* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TacticalLinesDiffusion: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* automate */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.automate");

         stat = asn1PE_Automate (ctxt_p, pvalue->u.automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* formation */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.formation");

         stat = asn1PE_Formation (ctxt_p, pvalue->u.formation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_TacticalLinesDiffusion: end\n");
   return (stat);
}

int ASN1C_TacticalLinesDiffusion::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TacticalLinesDiffusion (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_TacticalLinesDiffusion (ASN1CTXT* ctxt_p, ASN1T_TacticalLinesDiffusion* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_TacticalLinesDiffusion: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* automate */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.automate");

         stat = asn1PD_Automate (ctxt_p, &pvalue->u.automate);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* formation */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.formation");

         stat = asn1PD_Formation (ctxt_p, &pvalue->u.formation);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_TacticalLinesDiffusion: end\n");

   return (stat);
}

int ASN1C_TacticalLinesDiffusion::Decode ()
{
   return asn1PD_TacticalLinesDiffusion (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEnumTypeLima                                        */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEnumTypeLima::ASN1C__SeqOfEnumTypeLima (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEnumTypeLima& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEnumTypeLima (ASN1CTXT* ctxt_p, ASN1T__SeqOfEnumTypeLima* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfEnumTypeLima: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_EnumTypeLima (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfEnumTypeLima: end\n");
   return (stat);
}

int ASN1C__SeqOfEnumTypeLima::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEnumTypeLima (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEnumTypeLima (ASN1CTXT* ctxt_p, ASN1T__SeqOfEnumTypeLima* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfEnumTypeLima: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EnumTypeLima);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_EnumTypeLima (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfEnumTypeLima: end\n");

   return (stat);
}

int ASN1C__SeqOfEnumTypeLima::Decode ()
{
   return asn1PD__SeqOfEnumTypeLima (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimaOrder                                                 */
/*                                                            */
/**************************************************************/

ASN1C_LimaOrder::ASN1C_LimaOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_LimaOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimaOrder (ASN1CTXT* ctxt_p, ASN1T_LimaOrder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LimaOrder: start\n");

   /* encode lima */

   PU_PUSHNAME (ctxt_p, "lima");

   stat = asn1PE_Line (ctxt_p, &pvalue->lima);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode fonctions */

   PU_PUSHNAME (ctxt_p, "fonctions");

   stat = asn1PE__SeqOfEnumTypeLima (ctxt_p, &pvalue->fonctions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_LimaOrder: end\n");
   return (stat);
}

int ASN1C_LimaOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimaOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimaOrder (ASN1CTXT* ctxt_p, ASN1T_LimaOrder* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LimaOrder: start\n");

   /* decode lima */

   PU_PUSHNAME (ctxt_p, "lima");

   stat = asn1PD_Line (ctxt_p, &pvalue->lima);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode fonctions */

   PU_PUSHNAME (ctxt_p, "fonctions");

   stat = asn1PD__SeqOfEnumTypeLima (ctxt_p, &pvalue->fonctions);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_LimaOrder: end\n");

   return (stat);
}

int ASN1C_LimaOrder::Decode ()
{
   return asn1PD_LimaOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LimasOrder                                                */
/*                                                            */
/**************************************************************/

ASN1C_LimasOrder::ASN1C_LimasOrder (
   ASN1MessageBuffer& msgBuf, ASN1T_LimasOrder& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LimasOrder (ASN1CTXT* ctxt_p, ASN1T_LimasOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_LimasOrder: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_LimaOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_LimasOrder: end\n");
   return (stat);
}

int ASN1C_LimasOrder::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LimasOrder (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LimasOrder (ASN1CTXT* ctxt_p, ASN1T_LimasOrder* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_LimasOrder: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LimaOrder);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_LimaOrder (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_LimasOrder: end\n");

   return (stat);
}

int ASN1C_LimasOrder::Decode ()
{
   return asn1PD_LimasOrder (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  TacticalLine                                              */
/*                                                            */
/**************************************************************/

ASN1C_TacticalLine::ASN1C_TacticalLine (
   ASN1MessageBuffer& msgBuf, ASN1T_TacticalLine& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_TacticalLine (ASN1CTXT* ctxt_p, ASN1T_TacticalLine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_TacticalLine: start\n");

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode geometrie */

   PU_PUSHNAME (ctxt_p, "geometrie");

   stat = asn1PE_Line (ctxt_p, &pvalue->geometrie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode diffusion */

   PU_PUSHNAME (ctxt_p, "diffusion");

   stat = asn1PE_TacticalLinesDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_TacticalLine: end\n");
   return (stat);
}

int ASN1C_TacticalLine::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_TacticalLine (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_TacticalLine (ASN1CTXT* ctxt_p, ASN1T_TacticalLine* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_TacticalLine: start\n");

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode geometrie */

   PU_PUSHNAME (ctxt_p, "geometrie");

   stat = asn1PD_Line (ctxt_p, &pvalue->geometrie);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode diffusion */

   PU_PUSHNAME (ctxt_p, "diffusion");

   stat = asn1PD_TacticalLinesDiffusion (ctxt_p, &pvalue->diffusion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_TacticalLine: end\n");

   return (stat);
}

int ASN1C_TacticalLine::Decode ()
{
   return asn1PD_TacticalLine (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreationRequestAck                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreationRequestAck::ASN1C_MsgLimitCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitCreationRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitCreationRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimitCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitCreationRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitCreationRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimitCreationRequestAck::Decode ()
{
   return asn1PD_MsgLimitCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreationRequest                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreationRequest::ASN1C_MsgLimitCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitCreationRequest: start\n");

   stat = asn1PE_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitCreationRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimitCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitCreationRequest: start\n");

   stat = asn1PD_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitCreationRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimitCreationRequest::Decode ()
{
   return asn1PD_MsgLimitCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitCreation                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitCreation::ASN1C_MsgLimitCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitCreation: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimitCreation: end\n");
   return (stat);
}

int ASN1C_MsgLimitCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimitCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitCreation: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimitCreation: end\n");

   return (stat);
}

int ASN1C_MsgLimitCreation::Decode ()
{
   return asn1PD_MsgLimitCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdateRequestAck                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdateRequestAck::ASN1C_MsgLimitUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitUpdateRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitUpdateRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimitUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdateRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitUpdateRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitUpdateRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimitUpdateRequestAck::Decode ()
{
   return asn1PD_MsgLimitUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdateRequest                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdateRequest::ASN1C_MsgLimitUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitUpdateRequest: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimitUpdateRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimitUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitUpdateRequest: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimitUpdateRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimitUpdateRequest::Decode ()
{
   return asn1PD_MsgLimitUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitUpdate                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitUpdate::ASN1C_MsgLimitUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitUpdate: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimitUpdate: end\n");
   return (stat);
}

int ASN1C_MsgLimitUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimitUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitUpdate: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimitUpdate: end\n");

   return (stat);
}

int ASN1C_MsgLimitUpdate::Decode ()
{
   return asn1PD_MsgLimitUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestructionRequestAck                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestructionRequestAck::ASN1C_MsgLimitDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitDestructionRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitDestructionRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimitDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestructionRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitDestructionRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitDestructionRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimitDestructionRequestAck::Decode ()
{
   return asn1PD_MsgLimitDestructionRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestructionRequest                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestructionRequest::ASN1C_MsgLimitDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequest value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitDestructionRequest: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitDestructionRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimitDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitDestructionRequest: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitDestructionRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimitDestructionRequest::Decode ()
{
   return asn1PD_MsgLimitDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimitDestruction                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimitDestruction::ASN1C_MsgLimitDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimitDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestruction value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimitDestruction: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimitDestruction: end\n");
   return (stat);
}

int ASN1C_MsgLimitDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimitDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimitDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimitDestruction: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimitDestruction: end\n");

   return (stat);
}

int ASN1C_MsgLimitDestruction::Decode ()
{
   return asn1PD_MsgLimitDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreationRequestAck                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreationRequestAck::ASN1C_MsgLimaCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaCreationRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaCreationRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimaCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaCreationRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaCreationRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimaCreationRequestAck::Decode ()
{
   return asn1PD_MsgLimaCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreationRequest                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreationRequest::ASN1C_MsgLimaCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaCreationRequest: start\n");

   stat = asn1PE_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaCreationRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimaCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreationRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaCreationRequest: start\n");

   stat = asn1PD_TacticalLine (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaCreationRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimaCreationRequest::Decode ()
{
   return asn1PD_MsgLimaCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaCreation::ASN1C_MsgLimaCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaCreation: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimaCreation: end\n");
   return (stat);
}

int ASN1C_MsgLimaCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLimaCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaCreation: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimaCreation: end\n");

   return (stat);
}

int ASN1C_MsgLimaCreation::Decode ()
{
   return asn1PD_MsgLimaCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdateRequestAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdateRequestAck::ASN1C_MsgLimaUpdateRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdateRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaUpdateRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaUpdateRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimaUpdateRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdateRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdateRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaUpdateRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaUpdateRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimaUpdateRequestAck::Decode ()
{
   return asn1PD_MsgLimaUpdateRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdateRequest                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdateRequest::ASN1C_MsgLimaUpdateRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdateRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaUpdateRequest: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimaUpdateRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimaUpdateRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdateRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdateRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdateRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaUpdateRequest: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimaUpdateRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimaUpdateRequest::Decode ()
{
   return asn1PD_MsgLimaUpdateRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaUpdate                                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaUpdate::ASN1C_MsgLimaUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaUpdate: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PE_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLimaUpdate: end\n");
   return (stat);
}

int ASN1C_MsgLimaUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLimaUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaUpdate: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tactical_line */

   PU_PUSHNAME (ctxt_p, "tactical_line");

   stat = asn1PD_TacticalLine (ctxt_p, &pvalue->tactical_line);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLimaUpdate: end\n");

   return (stat);
}

int ASN1C_MsgLimaUpdate::Decode ()
{
   return asn1PD_MsgLimaUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestructionRequestAck                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestructionRequestAck::ASN1C_MsgLimaDestructionRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestructionRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequestAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaDestructionRequestAck: start\n");

   stat = asn1PE_EnumInfoContextErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaDestructionRequestAck: end\n");
   return (stat);
}

int ASN1C_MsgLimaDestructionRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestructionRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestructionRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequestAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaDestructionRequestAck: start\n");

   stat = asn1PD_EnumInfoContextErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaDestructionRequestAck: end\n");

   return (stat);
}

int ASN1C_MsgLimaDestructionRequestAck::Decode ()
{
   return asn1PD_MsgLimaDestructionRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestructionRequest                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestructionRequest::ASN1C_MsgLimaDestructionRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestructionRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequest value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaDestructionRequest: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaDestructionRequest: end\n");
   return (stat);
}

int ASN1C_MsgLimaDestructionRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestructionRequest (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestructionRequest (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestructionRequest* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaDestructionRequest: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaDestructionRequest: end\n");

   return (stat);
}

int ASN1C_MsgLimaDestructionRequest::Decode ()
{
   return asn1PD_MsgLimaDestructionRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLimaDestruction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgLimaDestruction::ASN1C_MsgLimaDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLimaDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLimaDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestruction value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLimaDestruction: start\n");

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgLimaDestruction: end\n");
   return (stat);
}

int ASN1C_MsgLimaDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLimaDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLimaDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLimaDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLimaDestruction: start\n");

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgLimaDestruction: end\n");

   return (stat);
}

int ASN1C_MsgLimaDestruction::Decode ()
{
   return asn1PD_MsgLimaDestruction (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 25-Jun-2007.
 */
#include "Control.h"

/**************************************************************/
/*                                                            */
/*  ControlIncludes                                           */
/*                                                            */
/**************************************************************/

ASN1C_ControlIncludes::ASN1C_ControlIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ControlIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ControlIncludes (ASN1CTXT* ctxt_p, ASN1T_ControlIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ControlIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_ControlIncludes: end\n");
   return (stat);
}

int ASN1C_ControlIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ControlIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ControlIncludes (ASN1CTXT* ctxt_p, ASN1T_ControlIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ControlIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_ControlIncludes: end\n");

   return (stat);
}

int ASN1C_ControlIncludes::Decode ()
{
   return asn1PD_ControlIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ControlExports                                            */
/*                                                            */
/**************************************************************/

ASN1C_ControlExports::ASN1C_ControlExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ControlExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ControlExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_ControlExports: end\n");
   return (stat);
}

int ASN1C_ControlExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ControlExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ControlExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ControlExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_ControlExports: end\n");

   return (stat);
}

int ASN1C_ControlExports::Decode ()
{
   return asn1PD_ControlExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumControlErrorCode                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumControlErrorCode::ASN1C_EnumControlErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumControlErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumControlErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumControlErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumControlErrorCode: start\n");

   switch (value) {
      case EnumControlErrorCode::no_error: ui = 0; break;
      case EnumControlErrorCode::error_already_started: ui = 1; break;
      case EnumControlErrorCode::error_not_started: ui = 2; break;
      case EnumControlErrorCode::error_not_paused: ui = 3; break;
      case EnumControlErrorCode::error_already_paused: ui = 4; break;
      case EnumControlErrorCode::error_invalid_time_factor: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumControlErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumControlErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumControlErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumControlErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumControlErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumControlErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumControlErrorCode::no_error; break;
      case 1: *pvalue = EnumControlErrorCode::error_already_started; break;
      case 2: *pvalue = EnumControlErrorCode::error_not_started; break;
      case 3: *pvalue = EnumControlErrorCode::error_not_paused; break;
      case 4: *pvalue = EnumControlErrorCode::error_already_paused; break;
      case 5: *pvalue = EnumControlErrorCode::error_invalid_time_factor; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumControlErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumControlErrorCode::Decode ()
{
   return asn1PD_EnumControlErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlStop                                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlStop::ASN1C_MsgControlStop (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlStop (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlStop: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlStop: end\n");
   return (stat);
}

int ASN1C_MsgControlStop::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlStop (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlStop (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlStop: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlStop: end\n");

   return (stat);
}

int ASN1C_MsgControlStop::Decode ()
{
   return asn1PD_MsgControlStop (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlStopAck                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlStopAck::ASN1C_MsgControlStopAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlStopAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlStopAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlStopAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlStopAck: start\n");

   stat = asn1PE_EnumControlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlStopAck: end\n");
   return (stat);
}

int ASN1C_MsgControlStopAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlStopAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlStopAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlStopAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlStopAck: start\n");

   stat = asn1PD_EnumControlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlStopAck: end\n");

   return (stat);
}

int ASN1C_MsgControlStopAck::Decode ()
{
   return asn1PD_MsgControlStopAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlPause                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlPause::ASN1C_MsgControlPause (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlPause (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlPause: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlPause: end\n");
   return (stat);
}

int ASN1C_MsgControlPause::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlPause (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlPause (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlPause: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlPause: end\n");

   return (stat);
}

int ASN1C_MsgControlPause::Decode ()
{
   return asn1PD_MsgControlPause (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlPauseAck                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlPauseAck::ASN1C_MsgControlPauseAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlPauseAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlPauseAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlPauseAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlPauseAck: start\n");

   stat = asn1PE_EnumControlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlPauseAck: end\n");
   return (stat);
}

int ASN1C_MsgControlPauseAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlPauseAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlPauseAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlPauseAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlPauseAck: start\n");

   stat = asn1PD_EnumControlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlPauseAck: end\n");

   return (stat);
}

int ASN1C_MsgControlPauseAck::Decode ()
{
   return asn1PD_MsgControlPauseAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlResume                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlResume::ASN1C_MsgControlResume (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlResume (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlResume: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlResume: end\n");
   return (stat);
}

int ASN1C_MsgControlResume::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlResume (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlResume (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlResume: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlResume: end\n");

   return (stat);
}

int ASN1C_MsgControlResume::Decode ()
{
   return asn1PD_MsgControlResume (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlResumeAck                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlResumeAck::ASN1C_MsgControlResumeAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlResumeAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlResumeAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlResumeAck value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlResumeAck: start\n");

   stat = asn1PE_EnumControlErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlResumeAck: end\n");
   return (stat);
}

int ASN1C_MsgControlResumeAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlResumeAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlResumeAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlResumeAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlResumeAck: start\n");

   stat = asn1PD_EnumControlErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlResumeAck: end\n");

   return (stat);
}

int ASN1C_MsgControlResumeAck::Decode ()
{
   return asn1PD_MsgControlResumeAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlSkipToTick                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlSkipToTick::ASN1C_MsgControlSkipToTick (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlSkipToTick& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlSkipToTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlSkipToTick value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlSkipToTick: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlSkipToTick: end\n");
   return (stat);
}

int ASN1C_MsgControlSkipToTick::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlSkipToTick (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlSkipToTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlSkipToTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlSkipToTick: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlSkipToTick: end\n");

   return (stat);
}

int ASN1C_MsgControlSkipToTick::Decode ()
{
   return asn1PD_MsgControlSkipToTick (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlSkipToTickAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlSkipToTickAck::ASN1C_MsgControlSkipToTickAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlSkipToTickAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlSkipToTickAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlSkipToTickAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlSkipToTickAck: start\n");

   /* encode tick */

   PU_PUSHNAME (ctxt_p, "tick");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumControlErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlSkipToTickAck: end\n");
   return (stat);
}

int ASN1C_MsgControlSkipToTickAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlSkipToTickAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlSkipToTickAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlSkipToTickAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlSkipToTickAck: start\n");

   /* decode tick */

   PU_PUSHNAME (ctxt_p, "tick");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumControlErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlSkipToTickAck: end\n");

   return (stat);
}

int ASN1C_MsgControlSkipToTickAck::Decode ()
{
   return asn1PD_MsgControlSkipToTickAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlChangeTimeFactor                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlChangeTimeFactor::ASN1C_MsgControlChangeTimeFactor (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlChangeTimeFactor& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlChangeTimeFactor (ASN1CTXT* ctxt_p, ASN1T_MsgControlChangeTimeFactor value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlChangeTimeFactor: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlChangeTimeFactor: end\n");
   return (stat);
}

int ASN1C_MsgControlChangeTimeFactor::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlChangeTimeFactor (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlChangeTimeFactor (ASN1CTXT* ctxt_p, ASN1T_MsgControlChangeTimeFactor* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlChangeTimeFactor: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlChangeTimeFactor: end\n");

   return (stat);
}

int ASN1C_MsgControlChangeTimeFactor::Decode ()
{
   return asn1PD_MsgControlChangeTimeFactor (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlChangeTimeFactorAck                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlChangeTimeFactorAck::ASN1C_MsgControlChangeTimeFactorAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlChangeTimeFactorAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlChangeTimeFactorAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlChangeTimeFactorAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlChangeTimeFactorAck: start\n");

   /* encode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pe_UnconsInteger (ctxt_p, pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumControlErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlChangeTimeFactorAck: end\n");
   return (stat);
}

int ASN1C_MsgControlChangeTimeFactorAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlChangeTimeFactorAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlChangeTimeFactorAck (ASN1CTXT* ctxt_p, ASN1T_MsgControlChangeTimeFactorAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlChangeTimeFactorAck: start\n");

   /* decode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumControlErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlChangeTimeFactorAck: end\n");

   return (stat);
}

int ASN1C_MsgControlChangeTimeFactorAck::Decode ()
{
   return asn1PD_MsgControlChangeTimeFactorAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlBeginTick                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlBeginTick::ASN1C_MsgControlBeginTick (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlBeginTick& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlBeginTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlBeginTick value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlBeginTick: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlBeginTick: end\n");
   return (stat);
}

int ASN1C_MsgControlBeginTick::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlBeginTick (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlBeginTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlBeginTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlBeginTick: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlBeginTick: end\n");

   return (stat);
}

int ASN1C_MsgControlBeginTick::Decode ()
{
   return asn1PD_MsgControlBeginTick (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlEndTick                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlEndTick::ASN1C_MsgControlEndTick (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlEndTick& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlEndTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlEndTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlEndTick: start\n");

   /* encode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pe_UnconsInteger (ctxt_p, pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode long_pathfinds */

   PU_PUSHNAME (ctxt_p, "long_pathfinds");

   stat = pe_UnconsInteger (ctxt_p, pvalue->long_pathfinds);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode short_pathfinds */

   PU_PUSHNAME (ctxt_p, "short_pathfinds");

   stat = pe_UnconsInteger (ctxt_p, pvalue->short_pathfinds);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode memory */

   PU_PUSHNAME (ctxt_p, "memory");

   stat = pe_UnconsInteger (ctxt_p, pvalue->memory);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode virtual_memory */

   PU_PUSHNAME (ctxt_p, "virtual_memory");

   stat = pe_UnconsInteger (ctxt_p, pvalue->virtual_memory);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlEndTick: end\n");
   return (stat);
}

int ASN1C_MsgControlEndTick::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlEndTick (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlEndTick (ASN1CTXT* ctxt_p, ASN1T_MsgControlEndTick* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlEndTick: start\n");

   /* decode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode long_pathfinds */

   PU_PUSHNAME (ctxt_p, "long_pathfinds");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->long_pathfinds);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode short_pathfinds */

   PU_PUSHNAME (ctxt_p, "short_pathfinds");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->short_pathfinds);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode memory */

   PU_PUSHNAME (ctxt_p, "memory");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->memory);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode virtual_memory */

   PU_PUSHNAME (ctxt_p, "virtual_memory");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->virtual_memory);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlEndTick: end\n");

   return (stat);
}

int ASN1C_MsgControlEndTick::Decode ()
{
   return asn1PD_MsgControlEndTick (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlClientAnnouncement                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlClientAnnouncement::ASN1C_MsgControlClientAnnouncement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlClientAnnouncement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlClientAnnouncement: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlClientAnnouncement: end\n");
   return (stat);
}

int ASN1C_MsgControlClientAnnouncement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlClientAnnouncement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlClientAnnouncement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlClientAnnouncement: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlClientAnnouncement: end\n");

   return (stat);
}

int ASN1C_MsgControlClientAnnouncement::Decode ()
{
   return asn1PD_MsgControlClientAnnouncement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumSimulationState                                       */
/*                                                            */
/**************************************************************/

ASN1C_EnumSimulationState::ASN1C_EnumSimulationState (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumSimulationState& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumSimulationState (ASN1CTXT* ctxt_p, ASN1T_EnumSimulationState value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumSimulationState: start\n");

   switch (value) {
      case EnumSimulationState::running: ui = 0; break;
      case EnumSimulationState::paused: ui = 1; break;
      case EnumSimulationState::stopped: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumSimulationState: end\n");
   return (stat);
}

int ASN1C_EnumSimulationState::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumSimulationState (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumSimulationState (ASN1CTXT* ctxt_p, ASN1T_EnumSimulationState* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumSimulationState: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumSimulationState::running; break;
      case 1: *pvalue = EnumSimulationState::paused; break;
      case 2: *pvalue = EnumSimulationState::stopped; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumSimulationState: end\n");

   return (stat);
}

int ASN1C_EnumSimulationState::Decode ()
{
   return asn1PD_EnumSimulationState (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlInformation                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlInformation::ASN1C_MsgControlInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlInformation (ASN1CTXT* ctxt_p, ASN1T_MsgControlInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlInformation: start\n");

   /* encode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pe_UnconsInteger (ctxt_p, pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pe_UnconsInteger (ctxt_p, pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode checkpoint_frequency */

   PU_PUSHNAME (ctxt_p, "checkpoint_frequency");

   stat = pe_UnconsInteger (ctxt_p, pvalue->checkpoint_frequency);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PE_EnumSimulationState (ctxt_p, pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode send_vision_cones */

   PU_PUSHNAME (ctxt_p, "send_vision_cones");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->send_vision_cones);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);

   /* encode profiling_enabled */

   PU_PUSHNAME (ctxt_p, "profiling_enabled");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->profiling_enabled);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlInformation: end\n");
   return (stat);
}

int ASN1C_MsgControlInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlInformation (ASN1CTXT* ctxt_p, ASN1T_MsgControlInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlInformation: start\n");

   /* decode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode checkpoint_frequency */

   PU_PUSHNAME (ctxt_p, "checkpoint_frequency");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->checkpoint_frequency);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PD_EnumSimulationState (ctxt_p, &pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode send_vision_cones */

   PU_PUSHNAME (ctxt_p, "send_vision_cones");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->send_vision_cones);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);

   /* decode profiling_enabled */

   PU_PUSHNAME (ctxt_p, "profiling_enabled");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->profiling_enabled);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlInformation: end\n");

   return (stat);
}

int ASN1C_MsgControlInformation::Decode ()
{
   return asn1PD_MsgControlInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlReplayInformation                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlReplayInformation::ASN1C_MsgControlReplayInformation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlReplayInformation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlReplayInformation (ASN1CTXT* ctxt_p, ASN1T_MsgControlReplayInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlReplayInformation: start\n");

   /* encode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pe_UnconsInteger (ctxt_p, pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pe_UnconsInteger (ctxt_p, pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PE_EnumSimulationState (ctxt_p, pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tick_count */

   PU_PUSHNAME (ctxt_p, "tick_count");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_count);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlReplayInformation: end\n");
   return (stat);
}

int ASN1C_MsgControlReplayInformation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlReplayInformation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlReplayInformation (ASN1CTXT* ctxt_p, ASN1T_MsgControlReplayInformation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlReplayInformation: start\n");

   /* decode current_tick */

   PU_PUSHNAME (ctxt_p, "current_tick");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->current_tick);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_duration */

   PU_PUSHNAME (ctxt_p, "tick_duration");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_duration);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode time_factor */

   PU_PUSHNAME (ctxt_p, "time_factor");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->time_factor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode status */

   PU_PUSHNAME (ctxt_p, "status");

   stat = asn1PD_EnumSimulationState (ctxt_p, &pvalue->status);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_count */

   PU_PUSHNAME (ctxt_p, "tick_count");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_count);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlReplayInformation: end\n");

   return (stat);
}

int ASN1C_MsgControlReplayInformation::Decode ()
{
   return asn1PD_MsgControlReplayInformation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSaveBegin                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSaveBegin::ASN1C_MsgControlCheckPointSaveBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointSaveBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSaveBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointSaveBegin: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSaveBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSaveBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSaveBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointSaveBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointSaveBegin: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSaveBegin::Decode ()
{
   return asn1PD_MsgControlCheckPointSaveBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSaveEnd                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSaveEnd::ASN1C_MsgControlCheckPointSaveEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointSaveEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSaveEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointSaveEnd: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSaveEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSaveEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSaveEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointSaveEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointSaveEnd: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSaveEnd::Decode ()
{
   return asn1PD_MsgControlCheckPointSaveEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointLoadBegin                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointLoadBegin::ASN1C_MsgControlCheckPointLoadBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointLoadBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointLoadBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointLoadBegin: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointLoadBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointLoadBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointLoadBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointLoadBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointLoadBegin: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointLoadBegin::Decode ()
{
   return asn1PD_MsgControlCheckPointLoadBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointLoadEnd                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointLoadEnd::ASN1C_MsgControlCheckPointLoadEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointLoadEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointLoadEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointLoadEnd: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointLoadEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointLoadEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointLoadEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointLoadEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointLoadEnd: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointLoadEnd::Decode ()
{
   return asn1PD_MsgControlCheckPointLoadEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSetFrequency                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSetFrequency::ASN1C_MsgControlCheckPointSetFrequency (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlCheckPointSetFrequency& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlCheckPointSetFrequency (ASN1CTXT* ctxt_p, ASN1T_MsgControlCheckPointSetFrequency value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSetFrequency: start\n");

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MsgControlCheckPointSetFrequency: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSetFrequency::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSetFrequency (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSetFrequency (ASN1CTXT* ctxt_p, ASN1T_MsgControlCheckPointSetFrequency* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointSetFrequency: start\n");

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MsgControlCheckPointSetFrequency: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSetFrequency::Decode ()
{
   return asn1PD_MsgControlCheckPointSetFrequency (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSetFrequencyAck                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSetFrequencyAck::ASN1C_MsgControlCheckPointSetFrequencyAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointSetFrequencyAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSetFrequencyAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointSetFrequencyAck: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSetFrequencyAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSetFrequencyAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSetFrequencyAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointSetFrequencyAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointSetFrequencyAck: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSetFrequencyAck::Decode ()
{
   return asn1PD_MsgControlCheckPointSetFrequencyAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSaveNow                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSaveNow::ASN1C_MsgControlCheckPointSaveNow (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlCheckPointSaveNow& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlCheckPointSaveNow (ASN1CTXT* ctxt_p, ASN1T_MsgControlCheckPointSaveNow* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSaveNow: start\n");

   PU_NEWFIELD (ctxt_p, "namePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.namePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode name */

   if (pvalue->m.namePresent) {
      PU_PUSHNAME (ctxt_p, "name");

      stat = pe_VisibleString (ctxt_p, pvalue->name, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgControlCheckPointSaveNow: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSaveNow::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSaveNow (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSaveNow (ASN1CTXT* ctxt_p, ASN1T_MsgControlCheckPointSaveNow* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgControlCheckPointSaveNow: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "namePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.namePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode name */

   if (pvalue->m.namePresent) {
      PU_PUSHNAME (ctxt_p, "name");

      stat = pd_VisibleString (ctxt_p, &pvalue->name, 0);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgControlCheckPointSaveNow: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSaveNow::Decode ()
{
   return asn1PD_MsgControlCheckPointSaveNow (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlCheckPointSaveNowAck                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlCheckPointSaveNowAck::ASN1C_MsgControlCheckPointSaveNowAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlCheckPointSaveNowAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlCheckPointSaveNowAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlCheckPointSaveNowAck: end\n");
   return (stat);
}

int ASN1C_MsgControlCheckPointSaveNowAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlCheckPointSaveNowAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlCheckPointSaveNowAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlCheckPointSaveNowAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlCheckPointSaveNowAck: end\n");

   return (stat);
}

int ASN1C_MsgControlCheckPointSaveNowAck::Decode ()
{
   return asn1PD_MsgControlCheckPointSaveNowAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlSendCurrentStateBegin                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlSendCurrentStateBegin::ASN1C_MsgControlSendCurrentStateBegin (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlSendCurrentStateBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlSendCurrentStateBegin: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlSendCurrentStateBegin: end\n");
   return (stat);
}

int ASN1C_MsgControlSendCurrentStateBegin::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlSendCurrentStateBegin (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlSendCurrentStateBegin (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlSendCurrentStateBegin: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlSendCurrentStateBegin: end\n");

   return (stat);
}

int ASN1C_MsgControlSendCurrentStateBegin::Decode ()
{
   return asn1PD_MsgControlSendCurrentStateBegin (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlSendCurrentStateEnd                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlSendCurrentStateEnd::ASN1C_MsgControlSendCurrentStateEnd (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlSendCurrentStateEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlSendCurrentStateEnd: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlSendCurrentStateEnd: end\n");
   return (stat);
}

int ASN1C_MsgControlSendCurrentStateEnd::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlSendCurrentStateEnd (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlSendCurrentStateEnd (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlSendCurrentStateEnd: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlSendCurrentStateEnd: end\n");

   return (stat);
}

int ASN1C_MsgControlSendCurrentStateEnd::Decode ()
{
   return asn1PD_MsgControlSendCurrentStateEnd (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumPrecipitationType                                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumPrecipitationType::ASN1C_EnumPrecipitationType (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPrecipitationType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPrecipitationType (ASN1CTXT* ctxt_p, ASN1T_EnumPrecipitationType value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumPrecipitationType: start\n");

   switch (value) {
      case EnumPrecipitationType::pas_de_precipitation: ui = 0; break;
      case EnumPrecipitationType::tempete_sable: ui = 1; break;
      case EnumPrecipitationType::brouillard: ui = 2; break;
      case EnumPrecipitationType::crachin: ui = 3; break;
      case EnumPrecipitationType::pluie: ui = 4; break;
      case EnumPrecipitationType::neige: ui = 5; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumPrecipitationType: end\n");
   return (stat);
}

int ASN1C_EnumPrecipitationType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPrecipitationType (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPrecipitationType (ASN1CTXT* ctxt_p, ASN1T_EnumPrecipitationType* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumPrecipitationType: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 5);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumPrecipitationType::pas_de_precipitation; break;
      case 1: *pvalue = EnumPrecipitationType::tempete_sable; break;
      case 2: *pvalue = EnumPrecipitationType::brouillard; break;
      case 3: *pvalue = EnumPrecipitationType::crachin; break;
      case 4: *pvalue = EnumPrecipitationType::pluie; break;
      case 5: *pvalue = EnumPrecipitationType::neige; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumPrecipitationType: end\n");

   return (stat);
}

int ASN1C_EnumPrecipitationType::Decode ()
{
   return asn1PD_EnumPrecipitationType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MeteoAttributes                                           */
/*                                                            */
/**************************************************************/

ASN1C_MeteoAttributes::ASN1C_MeteoAttributes (
   ASN1MessageBuffer& msgBuf, ASN1T_MeteoAttributes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MeteoAttributes (ASN1CTXT* ctxt_p, ASN1T_MeteoAttributes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MeteoAttributes: start\n");

   /* encode temperature */

   PU_PUSHNAME (ctxt_p, "temperature");

   stat = pe_UnconsInteger (ctxt_p, pvalue->temperature);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode wind_speed */

   PU_PUSHNAME (ctxt_p, "wind_speed");

   stat = asn1PE_Speed (ctxt_p, pvalue->wind_speed);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode wind_direction */

   PU_PUSHNAME (ctxt_p, "wind_direction");

   stat = asn1PE_Heading (ctxt_p, pvalue->wind_direction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cloud_floor */

   PU_PUSHNAME (ctxt_p, "cloud_floor");

   stat = asn1PE_Elevation (ctxt_p, pvalue->cloud_floor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cloud_ceiling */

   PU_PUSHNAME (ctxt_p, "cloud_ceiling");

   stat = asn1PE_Elevation (ctxt_p, pvalue->cloud_ceiling);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode cloud_density */

   PU_PUSHNAME (ctxt_p, "cloud_density");

   stat = asn1PE_Percentage (ctxt_p, pvalue->cloud_density);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode precipitation */

   PU_PUSHNAME (ctxt_p, "precipitation");

   stat = asn1PE_EnumPrecipitationType (ctxt_p, pvalue->precipitation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MeteoAttributes: end\n");
   return (stat);
}

int ASN1C_MeteoAttributes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MeteoAttributes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MeteoAttributes (ASN1CTXT* ctxt_p, ASN1T_MeteoAttributes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MeteoAttributes: start\n");

   /* decode temperature */

   PU_PUSHNAME (ctxt_p, "temperature");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->temperature);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode wind_speed */

   PU_PUSHNAME (ctxt_p, "wind_speed");

   stat = asn1PD_Speed (ctxt_p, &pvalue->wind_speed);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode wind_direction */

   PU_PUSHNAME (ctxt_p, "wind_direction");

   stat = asn1PD_Heading (ctxt_p, &pvalue->wind_direction);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cloud_floor */

   PU_PUSHNAME (ctxt_p, "cloud_floor");

   stat = asn1PD_Elevation (ctxt_p, &pvalue->cloud_floor);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cloud_ceiling */

   PU_PUSHNAME (ctxt_p, "cloud_ceiling");

   stat = asn1PD_Elevation (ctxt_p, &pvalue->cloud_ceiling);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode cloud_density */

   PU_PUSHNAME (ctxt_p, "cloud_density");

   stat = asn1PD_Percentage (ctxt_p, &pvalue->cloud_density);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode precipitation */

   PU_PUSHNAME (ctxt_p, "precipitation");

   stat = asn1PD_EnumPrecipitationType (ctxt_p, &pvalue->precipitation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MeteoAttributes: end\n");

   return (stat);
}

int ASN1C_MeteoAttributes::Decode ()
{
   return asn1PD_MeteoAttributes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlGlobalMeteo                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlGlobalMeteo::ASN1C_MsgControlGlobalMeteo (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlGlobalMeteo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlGlobalMeteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlGlobalMeteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlGlobalMeteo: start\n");

   /* encode attributes */

   PU_PUSHNAME (ctxt_p, "attributes");

   stat = asn1PE_MeteoAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlGlobalMeteo: end\n");
   return (stat);
}

int ASN1C_MsgControlGlobalMeteo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlGlobalMeteo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlGlobalMeteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlGlobalMeteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlGlobalMeteo: start\n");

   /* decode attributes */

   PU_PUSHNAME (ctxt_p, "attributes");

   stat = asn1PD_MeteoAttributes (ctxt_p, &pvalue->attributes);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlGlobalMeteo: end\n");

   return (stat);
}

int ASN1C_MsgControlGlobalMeteo::Decode ()
{
   return asn1PD_MsgControlGlobalMeteo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlLocalMeteo_meteo                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlLocalMeteo_meteo::ASN1C_MsgControlLocalMeteo_meteo (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlLocalMeteo_meteo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlLocalMeteo_meteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlLocalMeteo_meteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlLocalMeteo_meteo: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* attributes */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.attributes");

         stat = asn1PE_MeteoAttributes (ctxt_p, pvalue->u.attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* global */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.global");

         /* NULL */
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgControlLocalMeteo_meteo: end\n");
   return (stat);
}

int ASN1C_MsgControlLocalMeteo_meteo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlLocalMeteo_meteo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlLocalMeteo_meteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlLocalMeteo_meteo* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgControlLocalMeteo_meteo: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 1);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* attributes */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.attributes");

         pvalue->u.attributes = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MeteoAttributes);
         if (pvalue->u.attributes == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MeteoAttributes (ctxt_p, pvalue->u.attributes);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* global */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.global");

         /* NULL */

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgControlLocalMeteo_meteo: end\n");

   return (stat);
}

int ASN1C_MsgControlLocalMeteo_meteo::Decode ()
{
   return asn1PD_MsgControlLocalMeteo_meteo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlLocalMeteo                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlLocalMeteo::ASN1C_MsgControlLocalMeteo (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgControlLocalMeteo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgControlLocalMeteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlLocalMeteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlLocalMeteo: start\n");

   /* encode top_left_coordinate */

   PU_PUSHNAME (ctxt_p, "top_left_coordinate");

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->top_left_coordinate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode bottom_right_coordinate */

   PU_PUSHNAME (ctxt_p, "bottom_right_coordinate");

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->bottom_right_coordinate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode meteo */

   PU_PUSHNAME (ctxt_p, "meteo");

   stat = asn1PE_MsgControlLocalMeteo_meteo (ctxt_p, &pvalue->meteo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgControlLocalMeteo: end\n");
   return (stat);
}

int ASN1C_MsgControlLocalMeteo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlLocalMeteo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgControlLocalMeteo (ASN1CTXT* ctxt_p, ASN1T_MsgControlLocalMeteo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlLocalMeteo: start\n");

   /* decode top_left_coordinate */

   PU_PUSHNAME (ctxt_p, "top_left_coordinate");

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->top_left_coordinate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode bottom_right_coordinate */

   PU_PUSHNAME (ctxt_p, "bottom_right_coordinate");

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->bottom_right_coordinate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode meteo */

   PU_PUSHNAME (ctxt_p, "meteo");

   stat = asn1PD_MsgControlLocalMeteo_meteo (ctxt_p, &pvalue->meteo);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgControlLocalMeteo: end\n");

   return (stat);
}

int ASN1C_MsgControlLocalMeteo::Decode ()
{
   return asn1PD_MsgControlLocalMeteo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgControlGlobalMeteoAck                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlGlobalMeteoAck::ASN1C_MsgControlGlobalMeteoAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlGlobalMeteoAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlGlobalMeteoAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlGlobalMeteoAck: end\n");
   return (stat);
}

int ASN1C_MsgControlGlobalMeteoAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlGlobalMeteoAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlGlobalMeteoAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlGlobalMeteoAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlGlobalMeteoAck: end\n");

   return (stat);
}

int ASN1C_MsgControlGlobalMeteoAck::Decode ()
{
   return asn1PD_MsgControlGlobalMeteoAck (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgControlLocalMeteoAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgControlLocalMeteoAck::ASN1C_MsgControlLocalMeteoAck (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MsgControlLocalMeteoAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgControlLocalMeteoAck: start\n");

   /* NULL */

   rtdiag ("asn1PE_MsgControlLocalMeteoAck: end\n");
   return (stat);
}

int ASN1C_MsgControlLocalMeteoAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgControlLocalMeteoAck (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MsgControlLocalMeteoAck (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgControlLocalMeteoAck: start\n");

   /* NULL */

   rtdiag ("asn1PD_MsgControlLocalMeteoAck: end\n");

   return (stat);
}

int ASN1C_MsgControlLocalMeteoAck::Decode ()
{
   return asn1PD_MsgControlLocalMeteoAck (mpContext->GetPtr());
}


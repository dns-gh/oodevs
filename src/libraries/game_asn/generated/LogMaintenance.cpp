/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 18-Jun-2007.
 */
#include "LogMaintenance.h"

/**************************************************************/
/*                                                            */
/*  LogMaintenanceIncludes                                    */
/*                                                            */
/**************************************************************/

ASN1C_LogMaintenanceIncludes::ASN1C_LogMaintenanceIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_LogMaintenanceIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LogMaintenanceIncludes (ASN1CTXT* ctxt_p, ASN1T_LogMaintenanceIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LogMaintenanceIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_LogMaintenanceIncludes: end\n");
   return (stat);
}

int ASN1C_LogMaintenanceIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogMaintenanceIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LogMaintenanceIncludes (ASN1CTXT* ctxt_p, ASN1T_LogMaintenanceIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LogMaintenanceIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_LogMaintenanceIncludes: end\n");

   return (stat);
}

int ASN1C_LogMaintenanceIncludes::Decode ()
{
   return asn1PD_LogMaintenanceIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LogMaintenanceExports                                     */
/*                                                            */
/**************************************************************/

ASN1C_LogMaintenanceExports::ASN1C_LogMaintenanceExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_LogMaintenanceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LogMaintenanceExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_LogMaintenanceExports: end\n");
   return (stat);
}

int ASN1C_LogMaintenanceExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogMaintenanceExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_LogMaintenanceExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_LogMaintenanceExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_LogMaintenanceExports: end\n");

   return (stat);
}

int ASN1C_LogMaintenanceExports::Decode ()
{
   return asn1PD_LogMaintenanceExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumLogMaintenanceRegimeTravail                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumLogMaintenanceRegimeTravail::ASN1C_EnumLogMaintenanceRegimeTravail (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLogMaintenanceRegimeTravail& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLogMaintenanceRegimeTravail (ASN1CTXT* ctxt_p, ASN1T_EnumLogMaintenanceRegimeTravail value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumLogMaintenanceRegimeTravail: start\n");

   switch (value) {
      case EnumLogMaintenanceRegimeTravail::regime_1: ui = 0; break;
      case EnumLogMaintenanceRegimeTravail::regime_2: ui = 1; break;
      case EnumLogMaintenanceRegimeTravail::regime_3: ui = 2; break;
      case EnumLogMaintenanceRegimeTravail::regime_4: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumLogMaintenanceRegimeTravail: end\n");
   return (stat);
}

int ASN1C_EnumLogMaintenanceRegimeTravail::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLogMaintenanceRegimeTravail (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLogMaintenanceRegimeTravail (ASN1CTXT* ctxt_p, ASN1T_EnumLogMaintenanceRegimeTravail* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumLogMaintenanceRegimeTravail: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumLogMaintenanceRegimeTravail::regime_1; break;
      case 1: *pvalue = EnumLogMaintenanceRegimeTravail::regime_2; break;
      case 2: *pvalue = EnumLogMaintenanceRegimeTravail::regime_3; break;
      case 3: *pvalue = EnumLogMaintenanceRegimeTravail::regime_4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumLogMaintenanceRegimeTravail: end\n");

   return (stat);
}

int ASN1C_EnumLogMaintenanceRegimeTravail::Decode ()
{
   return asn1PD_EnumLogMaintenanceRegimeTravail (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogMaintenanceHandlingCreation                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogMaintenanceHandlingCreation::ASN1C_MsgLogMaintenanceHandlingCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogMaintenanceHandlingCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogMaintenanceHandlingCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogMaintenanceHandlingCreation: start\n");

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode tick_creation */

   PU_PUSHNAME (ctxt_p, "tick_creation");

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_creation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_panne */

   PU_PUSHNAME (ctxt_p, "type_panne");

   stat = asn1PE_BreakdownType (ctxt_p, pvalue->type_panne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogMaintenanceHandlingCreation: end\n");
   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogMaintenanceHandlingCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogMaintenanceHandlingCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogMaintenanceHandlingCreation: start\n");

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode tick_creation */

   PU_PUSHNAME (ctxt_p, "tick_creation");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_creation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_panne */

   PU_PUSHNAME (ctxt_p, "type_panne");

   stat = asn1PD_BreakdownType (ctxt_p, &pvalue->type_panne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogMaintenanceHandlingCreation: end\n");

   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingCreation::Decode ()
{
   return asn1PD_MsgLogMaintenanceHandlingCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumLogMaintenanceHandlingStatus                          */
/*                                                            */
/**************************************************************/

ASN1C_EnumLogMaintenanceHandlingStatus::ASN1C_EnumLogMaintenanceHandlingStatus (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLogMaintenanceHandlingStatus& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLogMaintenanceHandlingStatus (ASN1CTXT* ctxt_p, ASN1T_EnumLogMaintenanceHandlingStatus value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumLogMaintenanceHandlingStatus: start\n");

   switch (value) {
      case EnumLogMaintenanceHandlingStatus::deplacement_vers_chaine: ui = 0; break;
      case EnumLogMaintenanceHandlingStatus::attente_disponibilite_remorqueur: ui = 1; break;
      case EnumLogMaintenanceHandlingStatus::remorqueur_deplacement_aller: ui = 2; break;
      case EnumLogMaintenanceHandlingStatus::remorqueur_chargement: ui = 3; break;
      case EnumLogMaintenanceHandlingStatus::remorqueur_deplacement_retour: ui = 4; break;
      case EnumLogMaintenanceHandlingStatus::remorqueur_dechargement: ui = 5; break;
      case EnumLogMaintenanceHandlingStatus::diagnostique: ui = 6; break;
      case EnumLogMaintenanceHandlingStatus::attente_prise_en_charge_par_niveau_superieur: ui = 7; break;
      case EnumLogMaintenanceHandlingStatus::attente_disponibilite_pieces: ui = 8; break;
      case EnumLogMaintenanceHandlingStatus::attente_disponibilite_reparateur: ui = 9; break;
      case EnumLogMaintenanceHandlingStatus::reparation: ui = 10; break;
      case EnumLogMaintenanceHandlingStatus::retour_pion: ui = 11; break;
      case EnumLogMaintenanceHandlingStatus::termine: ui = 12; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumLogMaintenanceHandlingStatus: end\n");
   return (stat);
}

int ASN1C_EnumLogMaintenanceHandlingStatus::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLogMaintenanceHandlingStatus (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLogMaintenanceHandlingStatus (ASN1CTXT* ctxt_p, ASN1T_EnumLogMaintenanceHandlingStatus* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumLogMaintenanceHandlingStatus: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 12);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumLogMaintenanceHandlingStatus::deplacement_vers_chaine; break;
      case 1: *pvalue = EnumLogMaintenanceHandlingStatus::attente_disponibilite_remorqueur; break;
      case 2: *pvalue = EnumLogMaintenanceHandlingStatus::remorqueur_deplacement_aller; break;
      case 3: *pvalue = EnumLogMaintenanceHandlingStatus::remorqueur_chargement; break;
      case 4: *pvalue = EnumLogMaintenanceHandlingStatus::remorqueur_deplacement_retour; break;
      case 5: *pvalue = EnumLogMaintenanceHandlingStatus::remorqueur_dechargement; break;
      case 6: *pvalue = EnumLogMaintenanceHandlingStatus::diagnostique; break;
      case 7: *pvalue = EnumLogMaintenanceHandlingStatus::attente_prise_en_charge_par_niveau_superieur; break;
      case 8: *pvalue = EnumLogMaintenanceHandlingStatus::attente_disponibilite_pieces; break;
      case 9: *pvalue = EnumLogMaintenanceHandlingStatus::attente_disponibilite_reparateur; break;
      case 10: *pvalue = EnumLogMaintenanceHandlingStatus::reparation; break;
      case 11: *pvalue = EnumLogMaintenanceHandlingStatus::retour_pion; break;
      case 12: *pvalue = EnumLogMaintenanceHandlingStatus::termine; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumLogMaintenanceHandlingStatus: end\n");

   return (stat);
}

int ASN1C_EnumLogMaintenanceHandlingStatus::Decode ()
{
   return asn1PD_EnumLogMaintenanceHandlingStatus (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogMaintenanceHandlingUpdate                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogMaintenanceHandlingUpdate::ASN1C_MsgLogMaintenanceHandlingUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogMaintenanceHandlingUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogMaintenanceHandlingUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogMaintenanceHandlingUpdate: start\n");

   PU_NEWFIELD (ctxt_p, "etatPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etatPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "diagnostique_effectuePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.diagnostique_effectuePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_pion_log_traitant */

   PU_PUSHNAME (ctxt_p, "oid_pion_log_traitant");

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion_log_traitant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode etat */

   if (pvalue->m.etatPresent) {
      PU_PUSHNAME (ctxt_p, "etat");

      stat = asn1PE_EnumLogMaintenanceHandlingStatus (ctxt_p, pvalue->etat);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode diagnostique_effectue */

   if (pvalue->m.diagnostique_effectuePresent) {
      PU_PUSHNAME (ctxt_p, "diagnostique_effectue");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->diagnostique_effectue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgLogMaintenanceHandlingUpdate: end\n");
   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogMaintenanceHandlingUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogMaintenanceHandlingUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgLogMaintenanceHandlingUpdate: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "etatPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etatPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "diagnostique_effectuePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.diagnostique_effectuePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_pion_log_traitant */

   PU_PUSHNAME (ctxt_p, "oid_pion_log_traitant");

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion_log_traitant);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode etat */

   if (pvalue->m.etatPresent) {
      PU_PUSHNAME (ctxt_p, "etat");

      stat = asn1PD_EnumLogMaintenanceHandlingStatus (ctxt_p, &pvalue->etat);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode diagnostique_effectue */

   if (pvalue->m.diagnostique_effectuePresent) {
      PU_PUSHNAME (ctxt_p, "diagnostique_effectue");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->diagnostique_effectue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgLogMaintenanceHandlingUpdate: end\n");

   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingUpdate::Decode ()
{
   return asn1PD_MsgLogMaintenanceHandlingUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogMaintenanceHandlingDestruction                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogMaintenanceHandlingDestruction::ASN1C_MsgLogMaintenanceHandlingDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogMaintenanceHandlingDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogMaintenanceHandlingDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogMaintenanceHandlingDestruction: start\n");

   /* encode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgLogMaintenanceHandlingDestruction: end\n");
   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogMaintenanceHandlingDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogMaintenanceHandlingDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceHandlingDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgLogMaintenanceHandlingDestruction: start\n");

   /* decode oid_consigne */

   PU_PUSHNAME (ctxt_p, "oid_consigne");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgLogMaintenanceHandlingDestruction: end\n");

   return (stat);
}

int ASN1C_MsgLogMaintenanceHandlingDestruction::Decode ()
{
   return asn1PD_MsgLogMaintenanceHandlingDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LogMaintenanceEquipmentAvailability                       */
/*                                                            */
/**************************************************************/

ASN1C_LogMaintenanceEquipmentAvailability::ASN1C_LogMaintenanceEquipmentAvailability (
   ASN1MessageBuffer& msgBuf, ASN1T_LogMaintenanceEquipmentAvailability& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LogMaintenanceEquipmentAvailability (ASN1CTXT* ctxt_p, ASN1T_LogMaintenanceEquipmentAvailability* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_LogMaintenanceEquipmentAvailability: start\n");

   PU_NEWFIELD (ctxt_p, "nbr_pretesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)(pvalue->nbr_pretes != 0));
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nbr_au_reposPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nbr_au_reposPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_total */

   PU_PUSHNAME (ctxt_p, "nbr_total");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_total);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_disponibles */

   PU_PUSHNAME (ctxt_p, "nbr_disponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_au_travail */

   PU_PUSHNAME (ctxt_p, "nbr_au_travail");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_au_travail);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nbr_pretes */

   if (pvalue->nbr_pretes != 0) {
      PU_PUSHNAME (ctxt_p, "nbr_pretes");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_pretes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode nbr_au_repos */

   if (pvalue->m.nbr_au_reposPresent) {
      PU_PUSHNAME (ctxt_p, "nbr_au_repos");

      stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_au_repos);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_LogMaintenanceEquipmentAvailability: end\n");
   return (stat);
}

int ASN1C_LogMaintenanceEquipmentAvailability::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogMaintenanceEquipmentAvailability (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LogMaintenanceEquipmentAvailability (ASN1CTXT* ctxt_p, ASN1T_LogMaintenanceEquipmentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL nbr_pretesPresent;

   rtdiag ("asn1PD_LogMaintenanceEquipmentAvailability: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "nbr_pretesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else nbr_pretesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "nbr_au_reposPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.nbr_au_reposPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_total */

   PU_PUSHNAME (ctxt_p, "nbr_total");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_total);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_disponibles */

   PU_PUSHNAME (ctxt_p, "nbr_disponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_au_travail */

   PU_PUSHNAME (ctxt_p, "nbr_au_travail");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_au_travail);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nbr_pretes */

   if (nbr_pretesPresent) {
      PU_PUSHNAME (ctxt_p, "nbr_pretes");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_pretes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }
   else {
      pvalue->nbr_pretes = 0;
   }

   /* decode nbr_au_repos */

   if (pvalue->m.nbr_au_reposPresent) {
      PU_PUSHNAME (ctxt_p, "nbr_au_repos");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_au_repos);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_LogMaintenanceEquipmentAvailability: end\n");

   return (stat);
}

int ASN1C_LogMaintenanceEquipmentAvailability::Decode ()
{
   return asn1PD_LogMaintenanceEquipmentAvailability (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LogMaintenancePriorities                                  */
/*                                                            */
/**************************************************************/

ASN1C_LogMaintenancePriorities::ASN1C_LogMaintenancePriorities (
   ASN1MessageBuffer& msgBuf, ASN1T_LogMaintenancePriorities& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LogMaintenancePriorities (ASN1CTXT* ctxt_p, ASN1T_LogMaintenancePriorities* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE_LogMaintenancePriorities: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_EquipmentType (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE_LogMaintenancePriorities: end\n");
   return (stat);
}

int ASN1C_LogMaintenancePriorities::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogMaintenancePriorities (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LogMaintenancePriorities (ASN1CTXT* ctxt_p, ASN1T_LogMaintenancePriorities* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD_LogMaintenancePriorities: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EquipmentType);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_EquipmentType (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_LogMaintenancePriorities: end\n");

   return (stat);
}

int ASN1C_LogMaintenancePriorities::Decode ()
{
   return asn1PD_LogMaintenancePriorities (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfLogMaintenanceEquipmentAvailability                 */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfLogMaintenanceEquipmentAvailability::ASN1C__SeqOfLogMaintenanceEquipmentAvailability (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfLogMaintenanceEquipmentAvailability& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfLogMaintenanceEquipmentAvailability (ASN1CTXT* ctxt_p, ASN1T__SeqOfLogMaintenanceEquipmentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfLogMaintenanceEquipmentAvailability: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_LogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfLogMaintenanceEquipmentAvailability: end\n");
   return (stat);
}

int ASN1C__SeqOfLogMaintenanceEquipmentAvailability::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfLogMaintenanceEquipmentAvailability (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfLogMaintenanceEquipmentAvailability (ASN1CTXT* ctxt_p, ASN1T__SeqOfLogMaintenanceEquipmentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfLogMaintenanceEquipmentAvailability: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LogMaintenanceEquipmentAvailability);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_LogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfLogMaintenanceEquipmentAvailability: end\n");

   return (stat);
}

int ASN1C__SeqOfLogMaintenanceEquipmentAvailability::Decode ()
{
   return asn1PD__SeqOfLogMaintenanceEquipmentAvailability (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogMaintenanceState                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogMaintenanceState::ASN1C_MsgLogMaintenanceState (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogMaintenanceState& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogMaintenanceState (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceState* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgLogMaintenanceState: start\n");

   PU_NEWFIELD (ctxt_p, "chaine_activeePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.chaine_activeePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "regime_travailPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.regime_travailPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "prioritesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.prioritesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "priorites_tactiquesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.priorites_tactiquesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_remorqueursPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilites_remorqueursPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_reparateursPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilites_reparateursPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      PU_PUSHNAME (ctxt_p, "chaine_activee");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->chaine_activee);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode regime_travail */

   if (pvalue->m.regime_travailPresent) {
      PU_PUSHNAME (ctxt_p, "regime_travail");

      stat = asn1PE_EnumLogMaintenanceRegimeTravail (ctxt_p, pvalue->regime_travail);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode priorites */

   if (pvalue->m.prioritesPresent) {
      PU_PUSHNAME (ctxt_p, "priorites");

      stat = asn1PE_LogMaintenancePriorities (ctxt_p, &pvalue->priorites);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode priorites_tactiques */

   if (pvalue->m.priorites_tactiquesPresent) {
      PU_PUSHNAME (ctxt_p, "priorites_tactiques");

      stat = asn1PE_AutomatList (ctxt_p, &pvalue->priorites_tactiques);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode disponibilites_remorqueurs */

   if (pvalue->m.disponibilites_remorqueursPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_remorqueurs");

      stat = asn1PE__SeqOfLogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->disponibilites_remorqueurs);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode disponibilites_reparateurs */

   if (pvalue->m.disponibilites_reparateursPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_reparateurs");

      stat = asn1PE__SeqOfLogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->disponibilites_reparateurs);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgLogMaintenanceState: end\n");
   return (stat);
}

int ASN1C_MsgLogMaintenanceState::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogMaintenanceState (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogMaintenanceState (ASN1CTXT* ctxt_p, ASN1T_MsgLogMaintenanceState* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgLogMaintenanceState: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "chaine_activeePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.chaine_activeePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "regime_travailPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.regime_travailPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "prioritesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.prioritesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "priorites_tactiquesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.priorites_tactiquesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_remorqueursPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.disponibilites_remorqueursPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilites_reparateursPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.disponibilites_reparateursPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      PU_PUSHNAME (ctxt_p, "chaine_activee");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->chaine_activee);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode regime_travail */

   if (pvalue->m.regime_travailPresent) {
      PU_PUSHNAME (ctxt_p, "regime_travail");

      stat = asn1PD_EnumLogMaintenanceRegimeTravail (ctxt_p, &pvalue->regime_travail);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode priorites */

   if (pvalue->m.prioritesPresent) {
      PU_PUSHNAME (ctxt_p, "priorites");

      stat = asn1PD_LogMaintenancePriorities (ctxt_p, &pvalue->priorites);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode priorites_tactiques */

   if (pvalue->m.priorites_tactiquesPresent) {
      PU_PUSHNAME (ctxt_p, "priorites_tactiques");

      stat = asn1PD_AutomatList (ctxt_p, &pvalue->priorites_tactiques);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode disponibilites_remorqueurs */

   if (pvalue->m.disponibilites_remorqueursPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_remorqueurs");

      stat = asn1PD__SeqOfLogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->disponibilites_remorqueurs);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode disponibilites_reparateurs */

   if (pvalue->m.disponibilites_reparateursPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilites_reparateurs");

      stat = asn1PD__SeqOfLogMaintenanceEquipmentAvailability (ctxt_p, &pvalue->disponibilites_reparateurs);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgLogMaintenanceState: end\n");

   return (stat);
}

int ASN1C_MsgLogMaintenanceState::Decode ()
{
   return asn1PD_MsgLogMaintenanceState (mpContext->GetPtr(), &msgData);
}


/* This file was generated by ASN1C V5.31 on 22-May-2007 */

#include "Order.h"

void asn1Print_OrderIncludes (ASN1ConstCharPtr name, ASN1T_OrderIncludes* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.baseExports", name);

   sprintf (namebuf, "%s.limaLimiteExports", name);

   sprintf (namebuf, "%s.logMaintenanceExports", name);

   sprintf (namebuf, "%s.logSanteExports", name);

   sprintf (namebuf, "%s.objectExports", name);

}

void ASN1C_OrderIncludes::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderIncludes (name, &msgData);
}

void asn1Print_OrderExports (ASN1ConstCharPtr name)
{
}

void ASN1C_OrderExports::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderExports (name);
}

void asn1Print_EnumOrderErrorCode (ASN1ConstCharPtr name, ASN1T_EnumOrderErrorCode* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("no_error\n"); break;
      case 1: printf ("error_invalid_unit\n"); break;
      case 2: printf ("error_invalid_limit\n"); break;
      case 3: printf ("error_invalid_lima\n"); break;
      case 4: printf ("error_invalid_mission\n"); break;
      case 5: printf ("error_invalid_mission_parameters\n"); break;
      case 6: printf ("error_unit_cannot_receive_order\n"); break;
      case 7: printf ("error_invalid_order_conduite\n"); break;
      case 8: printf ("error_invalid_order_mission\n"); break;
      case 9: printf ("error_invalid_order_initial\n"); break;
      case 10: printf ("error_invalid_order_conduite_parameters\n"); break;
      case 11: printf ("error_unit_surrendered\n"); break;
      case 12: printf ("error_invalid_lima_function\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumOrderErrorCode::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumOrderErrorCode (name, &msgData);
}

void asn1Print_OrderContext (ASN1ConstCharPtr name, ASN1T_OrderContext* pvalue)
{
   char namebuf[512];

   printf ("%s.m.limite_gauchePresent = %d\n", name, (int)pvalue->m.limite_gauchePresent);
   printf ("%s.m.limite_droitePresent = %d\n", name, (int)pvalue->m.limite_droitePresent);
   if (pvalue->m.limite_gauchePresent) {
      sprintf (namebuf, "%s.limite_gauche", name);
      asn1Print_Line (namebuf, &pvalue->limite_gauche);
   }

   if (pvalue->m.limite_droitePresent) {
      sprintf (namebuf, "%s.limite_droite", name);
      asn1Print_Line (namebuf, &pvalue->limite_droite);
   }

   sprintf (namebuf, "%s.limas", name);
   asn1Print_LimasOrder (namebuf, &pvalue->limas);

   sprintf (namebuf, "%s.direction_dangereuse", name);
   asn1Print_Direction (namebuf, &pvalue->direction_dangereuse);

}

void ASN1C_OrderContext::Print (ASN1ConstCharPtr name)

{
   asn1Print_OrderContext (name, &msgData);
}

void asn1Print_MissionGenObject (ASN1ConstCharPtr name, ASN1T_MissionGenObject* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumObjectType (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.position", name);
   asn1Print_Localisation (namebuf, &pvalue->position);

   sprintf (namebuf, "%s.type_obstacle", name);
   asn1Print_EnumTypeObstacle (namebuf, &pvalue->type_obstacle);

   sprintf (namebuf, "%s.densite", name);
   rtPrintReal (namebuf, pvalue->densite);

   sprintf (namebuf, "%s.tc2", name);
   asn1Print_Automate (namebuf, &pvalue->tc2);

   sprintf (namebuf, "%s.delai_activite_mines", name);
   rtPrintInteger (namebuf, pvalue->delai_activite_mines);

}

void ASN1C_MissionGenObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_MissionGenObject (name, &msgData);
}

void asn1Print_ListMissionGenObject (ASN1ConstCharPtr name, ASN1T_ListMissionGenObject* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MissionGenObject (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_ListMissionGenObject::Print (ASN1ConstCharPtr name)

{
   asn1Print_ListMissionGenObject (name, &msgData);
}

void asn1Print_MissionParameter_value (ASN1ConstCharPtr name, ASN1T_MissionParameter_value* pvalue)
{
   char namebuf[512];

   printf ("%s.t = %d\n", name, pvalue->t);
   switch (pvalue->t) {
      case 1:
         sprintf (namebuf, "%s.u.aBool", name);
         rtPrintBoolean (namebuf, pvalue->u.aBool);
         break;

      case 2:
         sprintf (namebuf, "%s.u.aReal", name);
         rtPrintReal (namebuf, pvalue->u.aReal);
         break;

      case 3:
         sprintf (namebuf, "%s.u.enumeration", name);
         rtPrintInteger (namebuf, pvalue->u.enumeration);
         break;

      case 4:
         sprintf (namebuf, "%s.u.itineraire", name);
         asn1Print_Itineraire (namebuf, pvalue->u.itineraire);
         break;

      case 5:
         sprintf (namebuf, "%s.u.listItineraire", name);
         asn1Print_ListItineraire (namebuf, pvalue->u.listItineraire);
         break;

      case 6:
         sprintf (namebuf, "%s.u.point", name);
         asn1Print_Point (namebuf, pvalue->u.point);
         break;

      case 7:
         sprintf (namebuf, "%s.u.listPoint", name);
         asn1Print_ListPoint (namebuf, pvalue->u.listPoint);
         break;

      case 8:
         sprintf (namebuf, "%s.u.polygon", name);
         asn1Print_Polygon (namebuf, pvalue->u.polygon);
         break;

      case 9:
         sprintf (namebuf, "%s.u.listPolygon", name);
         asn1Print_ListPolygon (namebuf, pvalue->u.listPolygon);
         break;

      case 10:
         sprintf (namebuf, "%s.u.localisation", name);
         asn1Print_Localisation (namebuf, pvalue->u.localisation);
         break;

      case 11:
         sprintf (namebuf, "%s.u.listLocalisation", name);
         asn1Print_ListLocalisation (namebuf, pvalue->u.listLocalisation);
         break;

      case 12:
         sprintf (namebuf, "%s.u.direction", name);
         asn1Print_Direction (namebuf, &pvalue->u.direction);
         break;

      case 13:
         sprintf (namebuf, "%s.u.natureAtlas", name);
         asn1Print_NatureAtlas (namebuf, pvalue->u.natureAtlas);
         break;

      case 14:
         sprintf (namebuf, "%s.u.agent", name);
         asn1Print_Agent (namebuf, &pvalue->u.agent);
         break;

      case 15:
         sprintf (namebuf, "%s.u.listAgent", name);
         asn1Print_ListAgent (namebuf, pvalue->u.listAgent);
         break;

      case 16:
         sprintf (namebuf, "%s.u.automate", name);
         asn1Print_Automate (namebuf, &pvalue->u.automate);
         break;

      case 17:
         sprintf (namebuf, "%s.u.listAutomate", name);
         asn1Print_ListAutomate (namebuf, pvalue->u.listAutomate);
         break;

      case 18:
         sprintf (namebuf, "%s.u.knowledgeAgent", name);
         asn1Print_KnowledgeAgent (namebuf, &pvalue->u.knowledgeAgent);
         break;

      case 19:
         sprintf (namebuf, "%s.u.listKnowledgeAgent", name);
         asn1Print_ListKnowledgeAgent (namebuf, pvalue->u.listKnowledgeAgent);
         break;

      case 20:
         sprintf (namebuf, "%s.u.knowledgeObject", name);
         asn1Print_KnowledgeObject (namebuf, &pvalue->u.knowledgeObject);
         break;

      case 21:
         sprintf (namebuf, "%s.u.listKnowledgeObject", name);
         asn1Print_ListKnowledgeObject (namebuf, pvalue->u.listKnowledgeObject);
         break;

      case 22:
         sprintf (namebuf, "%s.u.knowledgePopulation", name);
         asn1Print_KnowledgePopulation (namebuf, &pvalue->u.knowledgePopulation);
         break;

      case 23:
         sprintf (namebuf, "%s.u.missionGenObject", name);
         asn1Print_MissionGenObject (namebuf, pvalue->u.missionGenObject);
         break;

      case 24:
         sprintf (namebuf, "%s.u.listMissionGenObject", name);
         asn1Print_ListMissionGenObject (namebuf, pvalue->u.listMissionGenObject);
         break;

      case 25:
         sprintf (namebuf, "%s.u.typeDotation", name);
         asn1Print_TypeDotation (namebuf, &pvalue->u.typeDotation);
         break;

      case 26:
         sprintf (namebuf, "%s.u.typeEquipement", name);
         asn1Print_TypeEquipement (namebuf, &pvalue->u.typeEquipement);
         break;

      case 27:
         sprintf (namebuf, "%s.u.tirIndirect", name);
         asn1Print_TirPion (namebuf, &pvalue->u.tirIndirect);
         break;

      case 28:
         sprintf (namebuf, "%s.u.gDH", name);
         asn1Print_GDH (namebuf, pvalue->u.gDH);
         break;

      case 29:
         sprintf (namebuf, "%s.u.maintenancePriorites", name);
         asn1Print_MaintenancePriorites (namebuf, pvalue->u.maintenancePriorites);
         break;

      case 30:
         sprintf (namebuf, "%s.u.santePriorites", name);
         asn1Print_SantePriorites (namebuf, pvalue->u.santePriorites);
         break;

      case 31:
         sprintf (namebuf, "%s.u.aCharStr", name);
         rtPrintCharStr (namebuf, pvalue->u.aCharStr);
         break;

      default:;
   }
}

void ASN1C_MissionParameter_value::Print (ASN1ConstCharPtr name)

{
   asn1Print_MissionParameter_value (name, &msgData);
}

void asn1Print_MissionParameter (ASN1ConstCharPtr name, ASN1T_MissionParameter* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.null_value", name);
   rtPrintBoolean (namebuf, pvalue->null_value);

   sprintf (namebuf, "%s.value", name);
   asn1Print_MissionParameter_value (namebuf, &pvalue->value);

}

void ASN1C_MissionParameter::Print (ASN1ConstCharPtr name)

{
   asn1Print_MissionParameter (name, &msgData);
}

void asn1Print_MissionParameters (ASN1ConstCharPtr name, ASN1T_MissionParameters* pvalue)
{
   char namebuf[512];

   printf ("%s.n = %d\n", name, pvalue->n);
   {
   ASN1UINT xx1;
   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      sprintf (namebuf, "%s.elem[%d]", name, xx1);
      asn1Print_MissionParameter (namebuf, &pvalue->elem[xx1]);
   }
   }

}

void ASN1C_MissionParameters::Print (ASN1ConstCharPtr name)

{
   asn1Print_MissionParameters (name, &msgData);
}

void asn1Print_MsgPionOrder (ASN1ConstCharPtr name, ASN1T_MsgPionOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_context", name);
   asn1Print_OrderContext (namebuf, &pvalue->order_context);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_OID (namebuf, &pvalue->mission);

   sprintf (namebuf, "%s.parametres", name);
   asn1Print_MissionParameters (namebuf, &pvalue->parametres);

}

void ASN1C_MsgPionOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPionOrder (name, &msgData);
}

void asn1Print_MsgPionOrderAck (ASN1ConstCharPtr name, ASN1T_MsgPionOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgPionOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPionOrderAck (name, &msgData);
}

void asn1Print_EnumAutomateOrderFormation (ASN1ConstCharPtr name, ASN1T_EnumAutomateOrderFormation* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("un_echelon\n"); break;
      case 1: printf ("deux_echelons\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumAutomateOrderFormation::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumAutomateOrderFormation (name, &msgData);
}

void asn1Print_MsgAutomateOrder (ASN1ConstCharPtr name, ASN1T_MsgAutomateOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Automate (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.order_context", name);
   asn1Print_OrderContext (namebuf, &pvalue->order_context);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_OID (namebuf, &pvalue->mission);

   sprintf (namebuf, "%s.parametres", name);
   asn1Print_MissionParameters (namebuf, &pvalue->parametres);

   sprintf (namebuf, "%s.formation", name);
   asn1Print_EnumAutomateOrderFormation (namebuf, &pvalue->formation);

}

void ASN1C_MsgAutomateOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateOrder (name, &msgData);
}

void asn1Print_MsgAutomateOrderAck (ASN1ConstCharPtr name, ASN1T_MsgAutomateOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Agent (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgAutomateOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgAutomateOrderAck (name, &msgData);
}

void asn1Print_MsgPopulationOrder (ASN1ConstCharPtr name, ASN1T_MsgPopulationOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Population (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.mission", name);
   asn1Print_OID (namebuf, &pvalue->mission);

   sprintf (namebuf, "%s.parametres", name);
   asn1Print_MissionParameters (namebuf, &pvalue->parametres);

}

void ASN1C_MsgPopulationOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationOrder (name, &msgData);
}

void asn1Print_MsgPopulationOrderAck (ASN1ConstCharPtr name, ASN1T_MsgPopulationOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_Population (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgPopulationOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgPopulationOrderAck (name, &msgData);
}

void asn1Print_MsgFragOrder (ASN1ConstCharPtr name, ASN1T_MsgFragOrder* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_OID (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.frag_order", name);
   asn1Print_OID (namebuf, &pvalue->frag_order);

   sprintf (namebuf, "%s.parametres", name);
   asn1Print_MissionParameters (namebuf, &pvalue->parametres);

}

void ASN1C_MsgFragOrder::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgFragOrder (name, &msgData);
}

void asn1Print_MsgFragOrderAck (ASN1ConstCharPtr name, ASN1T_MsgFragOrderAck* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.oid_unite_executante", name);
   asn1Print_OID (namebuf, &pvalue->oid_unite_executante);

   sprintf (namebuf, "%s.error_code", name);
   asn1Print_EnumOrderErrorCode (namebuf, &pvalue->error_code);

}

void ASN1C_MsgFragOrderAck::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgFragOrderAck (name, &msgData);
}

void asn1Print_EnumTypeCR (ASN1ConstCharPtr name, ASN1T_EnumTypeCR* pvalue)
{
   printf ("%s = ", name);
   switch (*pvalue) {
      case 0: printf ("message\n"); break;
      case 1: printf ("operationel\n"); break;
      case 2: printf ("evenement_exceptionnel\n"); break;
      case 3: printf ("warning\n"); break;
      default: printf ("???\n");
   }
}

void ASN1C_EnumTypeCR::Print (ASN1ConstCharPtr name)

{
   asn1Print_EnumTypeCR (name, &msgData);
}

void asn1Print_MsgCR (ASN1ConstCharPtr name, ASN1T_MsgCR* pvalue)
{
   char namebuf[512];

   sprintf (namebuf, "%s.unit_id", name);
   asn1Print_OID (namebuf, &pvalue->unit_id);

   sprintf (namebuf, "%s.cr", name);
   asn1Print_OID (namebuf, &pvalue->cr);

   sprintf (namebuf, "%s.type", name);
   asn1Print_EnumTypeCR (namebuf, &pvalue->type);

   sprintf (namebuf, "%s.parametres", name);
   asn1Print_MissionParameters (namebuf, &pvalue->parametres);

}

void ASN1C_MsgCR::Print (ASN1ConstCharPtr name)

{
   asn1Print_MsgCR (name, &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 24-Dec-2009.
 */
#include "Population.h"

/**************************************************************/
/*                                                            */
/*  PopulationIncludes                                        */
/*                                                            */
/**************************************************************/

ASN1C_PopulationIncludes::ASN1C_PopulationIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_PopulationIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_PopulationIncludes (ASN1CTXT* ctxt_p, ASN1T_PopulationIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_PopulationIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_PopulationIncludes (ASN1CTXT* ctxt_p, ASN1T_PopulationIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_PopulationIncludes::Decode ()
{
   return asn1PD_PopulationIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  PopulationExports                                         */
/*                                                            */
/**************************************************************/

ASN1C_PopulationExports::ASN1C_PopulationExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_PopulationExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_PopulationExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_PopulationExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_PopulationExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_PopulationExports::Decode ()
{
   return asn1PD_PopulationExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EnumPopulationAttitude                                    */
/*                                                            */
/**************************************************************/

ASN1C_EnumPopulationAttitude::ASN1C_EnumPopulationAttitude (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPopulationAttitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPopulationAttitude (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttitude value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumPopulationAttitude::calme: ui = 0; break;
      case EnumPopulationAttitude::agitee: ui = 1; break;
      case EnumPopulationAttitude::excitee: ui = 2; break;
      case EnumPopulationAttitude::agressive: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumPopulationAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPopulationAttitude (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPopulationAttitude (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationAttitude* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumPopulationAttitude::calme; break;
      case 1: *pvalue = EnumPopulationAttitude::agitee; break;
      case 2: *pvalue = EnumPopulationAttitude::excitee; break;
      case 3: *pvalue = EnumPopulationAttitude::agressive; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumPopulationAttitude::Decode ()
{
   return asn1PD_EnumPopulationAttitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationCreation                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationCreation::ASN1C_MsgPopulationCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode type_population */

   stat = asn1PE_PopulationType (ctxt_p, pvalue->type_population);
   if (stat != ASN_OK) return stat;

   /* encode nom */

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* encode oid_camp */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode type_population */

   stat = asn1PD_PopulationType (ctxt_p, &pvalue->type_population);
   if (stat != ASN_OK) return stat;

   /* decode nom */

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* decode oid_camp */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationCreation::Decode ()
{
   return asn1PD_MsgPopulationCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationUpdate                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationUpdate::ASN1C_MsgPopulationUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_dominationPresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode etat_domination */

   if (pvalue->m.etat_dominationPresent) {
      stat = asn1PE_Percentage (ctxt_p, pvalue->etat_domination);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgPopulationUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etat_dominationPresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode etat_domination */

   if (pvalue->m.etat_dominationPresent) {
      stat = asn1PD_Percentage (ctxt_p, &pvalue->etat_domination);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgPopulationUpdate::Decode ()
{
   return asn1PD_MsgPopulationUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationCreation                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationCreation::ASN1C_MsgPopulationConcentrationCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* encode position */

   stat = asn1PE_CoordLatLong (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationConcentrationCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* decode position */

   stat = asn1PD_CoordLatLong (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationConcentrationCreation::Decode ()
{
   return asn1PD_MsgPopulationConcentrationCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationUpdate                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationUpdate::ASN1C_MsgPopulationConcentrationUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_vivantsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_mortsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.attitudePresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* encode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return stat;
   }

   /* encode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_morts);
      if (stat != ASN_OK) return stat;
   }

   /* encode attitude */

   if (pvalue->m.attitudePresent) {
      stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgPopulationConcentrationUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nb_humains_vivantsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nb_humains_mortsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.attitudePresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* decode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return stat;
   }

   /* decode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_morts);
      if (stat != ASN_OK) return stat;
   }

   /* decode attitude */

   if (pvalue->m.attitudePresent) {
      stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgPopulationConcentrationUpdate::Decode ()
{
   return asn1PD_MsgPopulationConcentrationUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationDestruction                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationDestruction::ASN1C_MsgPopulationConcentrationDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationConcentrationDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationConcentrationDestruction::Decode ()
{
   return asn1PD_MsgPopulationConcentrationDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFlowCreation                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFlowCreation::ASN1C_MsgPopulationFlowCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFlowCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFlowCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationFlowCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFlowCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFlowCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationFlowCreation::Decode ()
{
   return asn1PD_MsgPopulationFlowCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFlowUpdate                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFlowUpdate::ASN1C_MsgPopulationFlowUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFlowUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFlowUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.itinerairePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fluxPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.directionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.vitessePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_vivantsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nb_humains_mortsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.attitudePresent);

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* encode itineraire */

   if (pvalue->m.itinerairePresent) {
      stat = asn1PE_Path (ctxt_p, &pvalue->itineraire);
      if (stat != ASN_OK) return stat;
   }

   /* encode flux */

   if (pvalue->m.fluxPresent) {
      stat = asn1PE_Path (ctxt_p, &pvalue->flux);
      if (stat != ASN_OK) return stat;
   }

   /* encode direction */

   if (pvalue->m.directionPresent) {
      stat = asn1PE_Heading (ctxt_p, pvalue->direction);
      if (stat != ASN_OK) return stat;
   }

   /* encode vitesse */

   if (pvalue->m.vitessePresent) {
      stat = asn1PE_Speed (ctxt_p, pvalue->vitesse);
      if (stat != ASN_OK) return stat;
   }

   /* encode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return stat;
   }

   /* encode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nb_humains_morts);
      if (stat != ASN_OK) return stat;
   }

   /* encode attitude */

   if (pvalue->m.attitudePresent) {
      stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgPopulationFlowUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFlowUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFlowUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.itinerairePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.fluxPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.directionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.vitessePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nb_humains_vivantsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nb_humains_mortsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.attitudePresent = optbit;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   /* decode itineraire */

   if (pvalue->m.itinerairePresent) {
      stat = asn1PD_Path (ctxt_p, &pvalue->itineraire);
      if (stat != ASN_OK) return stat;
   }

   /* decode flux */

   if (pvalue->m.fluxPresent) {
      stat = asn1PD_Path (ctxt_p, &pvalue->flux);
      if (stat != ASN_OK) return stat;
   }

   /* decode direction */

   if (pvalue->m.directionPresent) {
      stat = asn1PD_Heading (ctxt_p, &pvalue->direction);
      if (stat != ASN_OK) return stat;
   }

   /* decode vitesse */

   if (pvalue->m.vitessePresent) {
      stat = asn1PD_Speed (ctxt_p, &pvalue->vitesse);
      if (stat != ASN_OK) return stat;
   }

   /* decode nb_humains_vivants */

   if (pvalue->m.nb_humains_vivantsPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_vivants);
      if (stat != ASN_OK) return stat;
   }

   /* decode nb_humains_morts */

   if (pvalue->m.nb_humains_mortsPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_humains_morts);
      if (stat != ASN_OK) return stat;
   }

   /* decode attitude */

   if (pvalue->m.attitudePresent) {
      stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgPopulationFlowUpdate::Decode ()
{
   return asn1PD_MsgPopulationFlowUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFlowDestruction                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFlowDestruction::ASN1C_MsgPopulationFlowDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFlowDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFlowDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_population */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_population);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationFlowDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFlowDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFlowDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_population */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_population);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationFlowDestruction::Decode ()
{
   return asn1PD_MsgPopulationFlowDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationChangeAttitude_beneficiaire          */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::ASN1C_MagicActionPopulationChangeAttitude_beneficiaire (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 2);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* flux */
      case 1:
         stat = asn1PE_OID (ctxt_p, pvalue->u.flux);
         if (stat != ASN_OK) return stat;
         break;

      /* concentration */
      case 2:
         stat = asn1PE_OID (ctxt_p, pvalue->u.concentration);
         if (stat != ASN_OK) return stat;
         break;

      /* global */
      case 3:
         /* NULL */
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude_beneficiaire* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* flux */
      case 0:
         stat = asn1PD_OID (ctxt_p, &pvalue->u.flux);
         if (stat != ASN_OK) return stat;

         break;

      /* concentration */
      case 1:
         stat = asn1PD_OID (ctxt_p, &pvalue->u.concentration);
         if (stat != ASN_OK) return stat;

         break;

      /* global */
      case 2:
         /* NULL */

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude_beneficiaire::Decode ()
{
   return asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationChangeAttitude                       */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationChangeAttitude::ASN1C_MagicActionPopulationChangeAttitude (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationChangeAttitude& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationChangeAttitude (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude* pvalue)
{
   int stat = ASN_OK;

   /* encode attitude */

   stat = asn1PE_EnumPopulationAttitude (ctxt_p, pvalue->attitude);
   if (stat != ASN_OK) return stat;

   /* encode beneficiaire */

   stat = asn1PE_MagicActionPopulationChangeAttitude_beneficiaire (ctxt_p, &pvalue->beneficiaire);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationChangeAttitude (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationChangeAttitude (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationChangeAttitude* pvalue)
{
   int stat = ASN_OK;

   /* decode attitude */

   stat = asn1PD_EnumPopulationAttitude (ctxt_p, &pvalue->attitude);
   if (stat != ASN_OK) return stat;

   /* decode beneficiaire */

   stat = asn1PD_MagicActionPopulationChangeAttitude_beneficiaire (ctxt_p, &pvalue->beneficiaire);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MagicActionPopulationChangeAttitude::Decode ()
{
   return asn1PD_MagicActionPopulationChangeAttitude (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationMoveTo                               */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationMoveTo::ASN1C_MagicActionPopulationMoveTo (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationMoveTo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationMoveTo* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PE_CoordLatLong (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionPopulationMoveTo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationMoveTo (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationMoveTo* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_CoordLatLong (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionPopulationMoveTo::Decode ()
{
   return asn1PD_MagicActionPopulationMoveTo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationTotalDestruction                     */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationTotalDestruction::ASN1C_MagicActionPopulationTotalDestruction (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionPopulationTotalDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionPopulationTotalDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationTotalDestruction (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationTotalDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionPopulationTotalDestruction::Decode ()
{
   return asn1PD_MagicActionPopulationTotalDestruction (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationKill                                 */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationKill::ASN1C_MagicActionPopulationKill (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationKill& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationKill (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationKill value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionPopulationKill::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationKill (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationKill (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationKill* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionPopulationKill::Decode ()
{
   return asn1PD_MagicActionPopulationKill (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPopulationResurrect                            */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPopulationResurrect::ASN1C_MagicActionPopulationResurrect (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPopulationResurrect& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPopulationResurrect (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationResurrect value)
{
   int stat = ASN_OK;

   stat = pe_UnconsInteger (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionPopulationResurrect::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPopulationResurrect (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPopulationResurrect (ASN1CTXT* ctxt_p, ASN1T_MagicActionPopulationResurrect* pvalue)
{
   int stat = ASN_OK;

   stat = pd_UnconsInteger (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionPopulationResurrect::Decode ()
{
   return asn1PD_MagicActionPopulationResurrect (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicAction_action                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicAction_action::ASN1C_MsgPopulationMagicAction_action (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicAction_action& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction_action* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 4);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* change_attitude */
      case 1:
         stat = asn1PE_MagicActionPopulationChangeAttitude (ctxt_p, pvalue->u.change_attitude);
         if (stat != ASN_OK) return stat;
         break;

      /* move_to */
      case 2:
         stat = asn1PE_MagicActionPopulationMoveTo (ctxt_p, pvalue->u.move_to);
         if (stat != ASN_OK) return stat;
         break;

      /* destruction_totale */
      case 3:
         stat = asn1PE_MagicActionPopulationTotalDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* tuer */
      case 4:
         stat = asn1PE_MagicActionPopulationKill (ctxt_p, pvalue->u.tuer);
         if (stat != ASN_OK) return stat;
         break;

      /* ressusciter */
      case 5:
         stat = asn1PE_MagicActionPopulationResurrect (ctxt_p, pvalue->u.ressusciter);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgPopulationMagicAction_action::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicAction_action (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction_action* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* change_attitude */
      case 0:
         pvalue->u.change_attitude = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionPopulationChangeAttitude);

         stat = asn1PD_MagicActionPopulationChangeAttitude (ctxt_p, pvalue->u.change_attitude);
         if (stat != ASN_OK) return stat;

         break;

      /* move_to */
      case 1:
         pvalue->u.move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionPopulationMoveTo);

         stat = asn1PD_MagicActionPopulationMoveTo (ctxt_p, pvalue->u.move_to);
         if (stat != ASN_OK) return stat;

         break;

      /* destruction_totale */
      case 2:
         stat = asn1PD_MagicActionPopulationTotalDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* tuer */
      case 3:
         stat = asn1PD_MagicActionPopulationKill (ctxt_p, &pvalue->u.tuer);
         if (stat != ASN_OK) return stat;

         break;

      /* ressusciter */
      case 4:
         stat = asn1PD_MagicActionPopulationResurrect (ctxt_p, &pvalue->u.ressusciter);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgPopulationMagicAction_action::Decode ()
{
   return asn1PD_MsgPopulationMagicAction_action (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicAction                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicAction::ASN1C_MsgPopulationMagicAction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicAction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode action */

   stat = asn1PE_MsgPopulationMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationMagicAction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicAction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode action */

   stat = asn1PD_MsgPopulationMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationMagicAction::Decode ()
{
   return asn1PD_MsgPopulationMagicAction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumPopulationErrorCode                                   */
/*                                                            */
/**************************************************************/

ASN1C_EnumPopulationErrorCode::ASN1C_EnumPopulationErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPopulationErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPopulationErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumPopulationErrorCode::no_error: ui = 0; break;
      case EnumPopulationErrorCode::error_invalid_unit: ui = 1; break;
      case EnumPopulationErrorCode::error_invalid_attribute: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumPopulationErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPopulationErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPopulationErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumPopulationErrorCode::no_error; break;
      case 1: *pvalue = EnumPopulationErrorCode::error_invalid_unit; break;
      case 2: *pvalue = EnumPopulationErrorCode::error_invalid_attribute; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumPopulationErrorCode::Decode ()
{
   return asn1PD_EnumPopulationErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationMagicActionAck                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationMagicActionAck::ASN1C_MsgPopulationMagicActionAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationMagicActionAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode error_code */

   stat = asn1PE_EnumPopulationErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationMagicActionAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationMagicActionAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode error_code */

   stat = asn1PD_EnumPopulationErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationMagicActionAck::Decode ()
{
   return asn1PD_MsgPopulationMagicActionAck (mpContext->GetPtr(), &msgData);
}


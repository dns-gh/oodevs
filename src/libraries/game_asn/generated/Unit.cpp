/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 31-Jan-2007.
 */
#include "Unit.h"

/**************************************************************/
/*                                                            */
/*  UnitIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_UnitIncludes::ASN1C_UnitIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitIncludes (ASN1CTXT* ctxt_p, ASN1T_UnitIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_UnitIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_UnitIncludes: end\n");
   return (stat);
}

int ASN1C_UnitIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitIncludes (ASN1CTXT* ctxt_p, ASN1T_UnitIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_UnitIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_UnitIncludes: end\n");

   return (stat);
}

int ASN1C_UnitIncludes::Decode ()
{
   return asn1PD_UnitIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_UnitExports::ASN1C_UnitExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_UnitExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_UnitExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_UnitExports: end\n");
   return (stat);
}

int ASN1C_UnitExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_UnitExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_UnitExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_UnitExports: end\n");

   return (stat);
}

int ASN1C_UnitExports::Decode ()
{
   return asn1PD_UnitExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  EquipementPrete                                           */
/*                                                            */
/**************************************************************/

ASN1C_EquipementPrete::ASN1C_EquipementPrete (
   ASN1MessageBuffer& msgBuf, ASN1T_EquipementPrete& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EquipementPrete (ASN1CTXT* ctxt_p, ASN1T_EquipementPrete* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_EquipementPrete: start\n");

   /* encode oid_pion_emprunteur */

   PU_PUSHNAME (ctxt_p, "oid_pion_emprunteur");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion_emprunteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nombre */

   PU_PUSHNAME (ctxt_p, "nombre");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_EquipementPrete: end\n");
   return (stat);
}

int ASN1C_EquipementPrete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EquipementPrete (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_EquipementPrete (ASN1CTXT* ctxt_p, ASN1T_EquipementPrete* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_EquipementPrete: start\n");

   /* decode oid_pion_emprunteur */

   PU_PUSHNAME (ctxt_p, "oid_pion_emprunteur");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion_emprunteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nombre */

   PU_PUSHNAME (ctxt_p, "nombre");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_EquipementPrete: end\n");

   return (stat);
}

int ASN1C_EquipementPrete::Decode ()
{
   return asn1PD_EquipementPrete (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EquipementEmprunte                                        */
/*                                                            */
/**************************************************************/

ASN1C_EquipementEmprunte::ASN1C_EquipementEmprunte (
   ASN1MessageBuffer& msgBuf, ASN1T_EquipementEmprunte& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EquipementEmprunte (ASN1CTXT* ctxt_p, ASN1T_EquipementEmprunte* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_EquipementEmprunte: start\n");

   /* encode oid_pion_preteur */

   PU_PUSHNAME (ctxt_p, "oid_pion_preteur");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion_preteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nombre */

   PU_PUSHNAME (ctxt_p, "nombre");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_EquipementEmprunte: end\n");
   return (stat);
}

int ASN1C_EquipementEmprunte::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EquipementEmprunte (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_EquipementEmprunte (ASN1CTXT* ctxt_p, ASN1T_EquipementEmprunte* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_EquipementEmprunte: start\n");

   /* decode oid_pion_preteur */

   PU_PUSHNAME (ctxt_p, "oid_pion_preteur");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion_preteur);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nombre */

   PU_PUSHNAME (ctxt_p, "nombre");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_EquipementEmprunte: end\n");

   return (stat);
}

int ASN1C_EquipementEmprunte::Decode ()
{
   return asn1PD_EquipementEmprunte (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationPersonnel                                         */
/*                                                            */
/**************************************************************/

ASN1C_DotationPersonnel::ASN1C_DotationPersonnel (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationPersonnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationPersonnel (ASN1CTXT* ctxt_p, ASN1T_DotationPersonnel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DotationPersonnel: start\n");

   /* encode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_total */

   PU_PUSHNAME (ctxt_p, "nb_total");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_total);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_operationnels */

   PU_PUSHNAME (ctxt_p, "nb_operationnels");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_operationnels);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses */

   PU_PUSHNAME (ctxt_p, "nb_blesses");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_blesses_mentaux */

   PU_PUSHNAME (ctxt_p, "nb_blesses_mentaux");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_mentaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_contamines_nbc */

   PU_PUSHNAME (ctxt_p, "nb_contamines_nbc");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_contamines_nbc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_dans_chaine_sante */

   PU_PUSHNAME (ctxt_p, "nb_dans_chaine_sante");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_dans_chaine_sante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_utilises_pour_maintenance */

   PU_PUSHNAME (ctxt_p, "nb_utilises_pour_maintenance");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_utilises_pour_maintenance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DotationPersonnel: end\n");
   return (stat);
}

int ASN1C_DotationPersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationPersonnel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationPersonnel (ASN1CTXT* ctxt_p, ASN1T_DotationPersonnel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DotationPersonnel: start\n");

   /* decode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_total */

   PU_PUSHNAME (ctxt_p, "nb_total");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_total);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_operationnels */

   PU_PUSHNAME (ctxt_p, "nb_operationnels");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_operationnels);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_morts */

   PU_PUSHNAME (ctxt_p, "nb_morts");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses */

   PU_PUSHNAME (ctxt_p, "nb_blesses");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_blesses_mentaux */

   PU_PUSHNAME (ctxt_p, "nb_blesses_mentaux");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_mentaux);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_contamines_nbc */

   PU_PUSHNAME (ctxt_p, "nb_contamines_nbc");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_contamines_nbc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_dans_chaine_sante */

   PU_PUSHNAME (ctxt_p, "nb_dans_chaine_sante");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_dans_chaine_sante);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_utilises_pour_maintenance */

   PU_PUSHNAME (ctxt_p, "nb_utilises_pour_maintenance");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_utilises_pour_maintenance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DotationPersonnel: end\n");

   return (stat);
}

int ASN1C_DotationPersonnel::Decode ()
{
   return asn1PD_DotationPersonnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationEquipement                                        */
/*                                                            */
/**************************************************************/

ASN1C_DotationEquipement::ASN1C_DotationEquipement (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationEquipement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationEquipement (ASN1CTXT* ctxt_p, ASN1T_DotationEquipement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DotationEquipement: start\n");

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_dans_chaine_maintenance */

   PU_PUSHNAME (ctxt_p, "nb_dans_chaine_maintenance");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_dans_chaine_maintenance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nb_prisonniers */

   PU_PUSHNAME (ctxt_p, "nb_prisonniers");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_prisonniers);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DotationEquipement: end\n");
   return (stat);
}

int ASN1C_DotationEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationEquipement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationEquipement (ASN1CTXT* ctxt_p, ASN1T_DotationEquipement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DotationEquipement: start\n");

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_disponibles */

   PU_PUSHNAME (ctxt_p, "nb_disponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_disponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_indisponibles */

   PU_PUSHNAME (ctxt_p, "nb_indisponibles");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_indisponibles);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_reparables */

   PU_PUSHNAME (ctxt_p, "nb_reparables");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_reparables);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_dans_chaine_maintenance */

   PU_PUSHNAME (ctxt_p, "nb_dans_chaine_maintenance");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_dans_chaine_maintenance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nb_prisonniers */

   PU_PUSHNAME (ctxt_p, "nb_prisonniers");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_prisonniers);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DotationEquipement: end\n");

   return (stat);
}

int ASN1C_DotationEquipement::Decode ()
{
   return asn1PD_DotationEquipement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationRessource                                         */
/*                                                            */
/**************************************************************/

ASN1C_DotationRessource::ASN1C_DotationRessource (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationRessource& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationRessource (ASN1CTXT* ctxt_p, ASN1T_DotationRessource* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_DotationRessource: start\n");

   /* encode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PE_TypeDotation (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_DotationRessource: end\n");
   return (stat);
}

int ASN1C_DotationRessource::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationRessource (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationRessource (ASN1CTXT* ctxt_p, ASN1T_DotationRessource* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_DotationRessource: start\n");

   /* decode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PD_TypeDotation (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_DotationRessource: end\n");

   return (stat);
}

int ASN1C_DotationRessource::Decode ()
{
   return asn1PD_DotationRessource (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitFatigue                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitFatigue::ASN1C_EnumUnitFatigue (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitFatigue& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitFatigue (ASN1CTXT* ctxt_p, ASN1T_EnumUnitFatigue value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitFatigue: start\n");

   switch (value) {
      case EnumUnitFatigue::normal: ui = 0; break;
      case EnumUnitFatigue::fatigue: ui = 1; break;
      case EnumUnitFatigue::epuise: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitFatigue: end\n");
   return (stat);
}

int ASN1C_EnumUnitFatigue::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitFatigue (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitFatigue (ASN1CTXT* ctxt_p, ASN1T_EnumUnitFatigue* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitFatigue: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitFatigue::normal; break;
      case 1: *pvalue = EnumUnitFatigue::fatigue; break;
      case 2: *pvalue = EnumUnitFatigue::epuise; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitFatigue: end\n");

   return (stat);
}

int ASN1C_EnumUnitFatigue::Decode ()
{
   return asn1PD_EnumUnitFatigue (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitMoral                                             */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitMoral::ASN1C_EnumUnitMoral (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitMoral& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitMoral (ASN1CTXT* ctxt_p, ASN1T_EnumUnitMoral value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitMoral: start\n");

   switch (value) {
      case EnumUnitMoral::fanatique: ui = 0; break;
      case EnumUnitMoral::bon: ui = 1; break;
      case EnumUnitMoral::moyen: ui = 2; break;
      case EnumUnitMoral::mauvais: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitMoral: end\n");
   return (stat);
}

int ASN1C_EnumUnitMoral::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitMoral (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitMoral (ASN1CTXT* ctxt_p, ASN1T_EnumUnitMoral* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitMoral: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitMoral::fanatique; break;
      case 1: *pvalue = EnumUnitMoral::bon; break;
      case 2: *pvalue = EnumUnitMoral::moyen; break;
      case 3: *pvalue = EnumUnitMoral::mauvais; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitMoral: end\n");

   return (stat);
}

int ASN1C_EnumUnitMoral::Decode ()
{
   return asn1PD_EnumUnitMoral (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitExperience                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitExperience::ASN1C_EnumUnitExperience (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitExperience& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitExperience (ASN1CTXT* ctxt_p, ASN1T_EnumUnitExperience value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitExperience: start\n");

   switch (value) {
      case EnumUnitExperience::veteran: ui = 0; break;
      case EnumUnitExperience::experimente: ui = 1; break;
      case EnumUnitExperience::conscrit: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitExperience: end\n");
   return (stat);
}

int ASN1C_EnumUnitExperience::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitExperience (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitExperience (ASN1CTXT* ctxt_p, ASN1T_EnumUnitExperience* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitExperience: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitExperience::veteran; break;
      case 1: *pvalue = EnumUnitExperience::experimente; break;
      case 2: *pvalue = EnumUnitExperience::conscrit; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitExperience: end\n");

   return (stat);
}

int ASN1C_EnumUnitExperience::Decode ()
{
   return asn1PD_EnumUnitExperience (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitPosture                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitPosture::ASN1C_EnumUnitPosture (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitPosture& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitPosture (ASN1CTXT* ctxt_p, ASN1T_EnumUnitPosture value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitPosture: start\n");

   switch (value) {
      case EnumUnitPosture::posture_mouvement: ui = 0; break;
      case EnumUnitPosture::posture_mouvement_discret: ui = 1; break;
      case EnumUnitPosture::posture_arret: ui = 2; break;
      case EnumUnitPosture::posture_poste_reflexe: ui = 3; break;
      case EnumUnitPosture::posture_poste: ui = 4; break;
      case EnumUnitPosture::posture_poste_amenage: ui = 5; break;
      case EnumUnitPosture::posture_poste_prepare_genie: ui = 6; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitPosture: end\n");
   return (stat);
}

int ASN1C_EnumUnitPosture::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitPosture (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitPosture (ASN1CTXT* ctxt_p, ASN1T_EnumUnitPosture* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitPosture: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitPosture::posture_mouvement; break;
      case 1: *pvalue = EnumUnitPosture::posture_mouvement_discret; break;
      case 2: *pvalue = EnumUnitPosture::posture_arret; break;
      case 3: *pvalue = EnumUnitPosture::posture_poste_reflexe; break;
      case 4: *pvalue = EnumUnitPosture::posture_poste; break;
      case 5: *pvalue = EnumUnitPosture::posture_poste_amenage; break;
      case 6: *pvalue = EnumUnitPosture::posture_poste_prepare_genie; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitPosture: end\n");

   return (stat);
}

int ASN1C_EnumUnitPosture::Decode ()
{
   return asn1PD_EnumUnitPosture (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumEtatRapFor                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumEtatRapFor::ASN1C_EnumEtatRapFor (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumEtatRapFor& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumEtatRapFor (ASN1CTXT* ctxt_p, ASN1T_EnumEtatRapFor value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumEtatRapFor: start\n");

   switch (value) {
      case EnumEtatRapFor::none: ui = 0; break;
      case EnumEtatRapFor::neutre: ui = 1; break;
      case EnumEtatRapFor::favorable: ui = 2; break;
      case EnumEtatRapFor::defavorable: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumEtatRapFor: end\n");
   return (stat);
}

int ASN1C_EnumEtatRapFor::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumEtatRapFor (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumEtatRapFor (ASN1CTXT* ctxt_p, ASN1T_EnumEtatRapFor* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumEtatRapFor: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumEtatRapFor::none; break;
      case 1: *pvalue = EnumEtatRapFor::neutre; break;
      case 2: *pvalue = EnumEtatRapFor::favorable; break;
      case 3: *pvalue = EnumEtatRapFor::defavorable; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumEtatRapFor: end\n");

   return (stat);
}

int ASN1C_EnumEtatRapFor::Decode ()
{
   return asn1PD_EnumEtatRapFor (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumRoe                                                   */
/*                                                            */
/**************************************************************/

ASN1C_EnumRoe::ASN1C_EnumRoe (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumRoe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumRoe (ASN1CTXT* ctxt_p, ASN1T_EnumRoe value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumRoe: start\n");

   switch (value) {
      case EnumRoe::none: ui = 0; break;
      case EnumRoe::tir_libre: ui = 1; break;
      case EnumRoe::tir_sur_riposte: ui = 2; break;
      case EnumRoe::tir_interdit: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumRoe: end\n");
   return (stat);
}

int ASN1C_EnumRoe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumRoe (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumRoe (ASN1CTXT* ctxt_p, ASN1T_EnumRoe* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumRoe: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumRoe::none; break;
      case 1: *pvalue = EnumRoe::tir_libre; break;
      case 2: *pvalue = EnumRoe::tir_sur_riposte; break;
      case 3: *pvalue = EnumRoe::tir_interdit; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumRoe: end\n");

   return (stat);
}

int ASN1C_EnumRoe::Decode ()
{
   return asn1PD_EnumRoe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumRoePopulation                                         */
/*                                                            */
/**************************************************************/

ASN1C_EnumRoePopulation::ASN1C_EnumRoePopulation (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumRoePopulation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumRoePopulation (ASN1CTXT* ctxt_p, ASN1T_EnumRoePopulation value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumRoePopulation: start\n");

   switch (value) {
      case EnumRoePopulation::none: ui = 0; break;
      case EnumRoePopulation::emploi_force_interdit: ui = 1; break;
      case EnumRoePopulation::maintien_a_distance_par_moyens_non_letaux: ui = 2; break;
      case EnumRoePopulation::dispersion_par_moyens_de_defense_actifs: ui = 3; break;
      case EnumRoePopulation::armes_letales_autorisees: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumRoePopulation: end\n");
   return (stat);
}

int ASN1C_EnumRoePopulation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumRoePopulation (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumRoePopulation (ASN1CTXT* ctxt_p, ASN1T_EnumRoePopulation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumRoePopulation: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumRoePopulation::none; break;
      case 1: *pvalue = EnumRoePopulation::emploi_force_interdit; break;
      case 2: *pvalue = EnumRoePopulation::maintien_a_distance_par_moyens_non_letaux; break;
      case 3: *pvalue = EnumRoePopulation::dispersion_par_moyens_de_defense_actifs; break;
      case 4: *pvalue = EnumRoePopulation::armes_letales_autorisees; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumRoePopulation: end\n");

   return (stat);
}

int ASN1C_EnumRoePopulation::Decode ()
{
   return asn1PD_EnumRoePopulation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumEtatCombatRencontre                                   */
/*                                                            */
/**************************************************************/

ASN1C_EnumEtatCombatRencontre::ASN1C_EnumEtatCombatRencontre (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumEtatCombatRencontre& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumEtatCombatRencontre (ASN1CTXT* ctxt_p, ASN1T_EnumEtatCombatRencontre value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumEtatCombatRencontre: start\n");

   switch (value) {
      case EnumEtatCombatRencontre::none: ui = 0; break;
      case EnumEtatCombatRencontre::etat_esquive: ui = 1; break;
      case EnumEtatCombatRencontre::etat_fixe: ui = 2; break;
      case EnumEtatCombatRencontre::etat_poursuite_mission: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumEtatCombatRencontre: end\n");
   return (stat);
}

int ASN1C_EnumEtatCombatRencontre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumEtatCombatRencontre (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumEtatCombatRencontre (ASN1CTXT* ctxt_p, ASN1T_EnumEtatCombatRencontre* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumEtatCombatRencontre: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumEtatCombatRencontre::none; break;
      case 1: *pvalue = EnumEtatCombatRencontre::etat_esquive; break;
      case 2: *pvalue = EnumEtatCombatRencontre::etat_fixe; break;
      case 3: *pvalue = EnumEtatCombatRencontre::etat_poursuite_mission; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumEtatCombatRencontre: end\n");

   return (stat);
}

int ASN1C_EnumEtatCombatRencontre::Decode ()
{
   return asn1PD_EnumEtatCombatRencontre (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumEtatOperationnel                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumEtatOperationnel::ASN1C_EnumEtatOperationnel (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumEtatOperationnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumEtatOperationnel (ASN1CTXT* ctxt_p, ASN1T_EnumEtatOperationnel value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumEtatOperationnel: start\n");

   switch (value) {
      case EnumEtatOperationnel::detruit_totalement: ui = 0; break;
      case EnumEtatOperationnel::detruit_tactiquement: ui = 1; break;
      case EnumEtatOperationnel::operationnel: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumEtatOperationnel: end\n");
   return (stat);
}

int ASN1C_EnumEtatOperationnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumEtatOperationnel (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumEtatOperationnel (ASN1CTXT* ctxt_p, ASN1T_EnumEtatOperationnel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumEtatOperationnel: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumEtatOperationnel::detruit_totalement; break;
      case 1: *pvalue = EnumEtatOperationnel::detruit_tactiquement; break;
      case 2: *pvalue = EnumEtatOperationnel::operationnel; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumEtatOperationnel: end\n");

   return (stat);
}

int ASN1C_EnumEtatOperationnel::Decode ()
{
   return asn1PD_EnumEtatOperationnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumDisponibiliteAuTir                                    */
/*                                                            */
/**************************************************************/

ASN1C_EnumDisponibiliteAuTir::ASN1C_EnumDisponibiliteAuTir (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumDisponibiliteAuTir& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumDisponibiliteAuTir (ASN1CTXT* ctxt_p, ASN1T_EnumDisponibiliteAuTir value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumDisponibiliteAuTir: start\n");

   switch (value) {
      case EnumDisponibiliteAuTir::none: ui = 0; break;
      case EnumDisponibiliteAuTir::pret_au_tir: ui = 1; break;
      case EnumDisponibiliteAuTir::indisponible: ui = 2; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumDisponibiliteAuTir: end\n");
   return (stat);
}

int ASN1C_EnumDisponibiliteAuTir::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumDisponibiliteAuTir (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumDisponibiliteAuTir (ASN1CTXT* ctxt_p, ASN1T_EnumDisponibiliteAuTir* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumDisponibiliteAuTir: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumDisponibiliteAuTir::none; break;
      case 1: *pvalue = EnumDisponibiliteAuTir::pret_au_tir; break;
      case 2: *pvalue = EnumDisponibiliteAuTir::indisponible; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumDisponibiliteAuTir: end\n");

   return (stat);
}

int ASN1C_EnumDisponibiliteAuTir::Decode ()
{
   return asn1PD_EnumDisponibiliteAuTir (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPionCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgPionCreation::ASN1C_MsgPionCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPionCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPionCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPionCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgPionCreation: start\n");

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type_pion */

   PU_PUSHNAME (ctxt_p, "type_pion");

   stat = asn1PE_TypePion (ctxt_p, pvalue->type_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pc */

   PU_PUSHNAME (ctxt_p, "pc");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->pc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgPionCreation: end\n");
   return (stat);
}

int ASN1C_MsgPionCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPionCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPionCreation (ASN1CTXT* ctxt_p, ASN1T_MsgPionCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgPionCreation: start\n");

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type_pion */

   PU_PUSHNAME (ctxt_p, "type_pion");

   stat = asn1PD_TypePion (ctxt_p, &pvalue->type_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nom */

   PU_PUSHNAME (ctxt_p, "nom");

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pc */

   PU_PUSHNAME (ctxt_p, "pc");

   PU_NEWFIELD (ctxt_p, "boolean");

   stat = pd_bit (ctxt_p, &pvalue->pc);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgPionCreation: end\n");

   return (stat);
}

int ASN1C_MsgPionCreation::Decode ()
{
   return asn1PD_MsgPionCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationPersonnel                                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationPersonnel::ASN1C__SeqOfDotationPersonnel (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationPersonnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationPersonnel (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationPersonnel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDotationPersonnel: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DotationPersonnel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDotationPersonnel: end\n");
   return (stat);
}

int ASN1C__SeqOfDotationPersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationPersonnel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationPersonnel (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationPersonnel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDotationPersonnel: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationPersonnel);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DotationPersonnel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDotationPersonnel: end\n");

   return (stat);
}

int ASN1C__SeqOfDotationPersonnel::Decode ()
{
   return asn1PD__SeqOfDotationPersonnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationEquipement                                  */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationEquipement::ASN1C__SeqOfDotationEquipement (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationEquipement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationEquipement (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationEquipement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDotationEquipement: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DotationEquipement (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDotationEquipement: end\n");
   return (stat);
}

int ASN1C__SeqOfDotationEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationEquipement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationEquipement (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationEquipement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDotationEquipement: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationEquipement);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DotationEquipement (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDotationEquipement: end\n");

   return (stat);
}

int ASN1C__SeqOfDotationEquipement::Decode ()
{
   return asn1PD__SeqOfDotationEquipement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationRessource                                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationRessource::ASN1C__SeqOfDotationRessource (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationRessource& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationRessource (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationRessource* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfDotationRessource: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_DotationRessource (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfDotationRessource: end\n");
   return (stat);
}

int ASN1C__SeqOfDotationRessource::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationRessource (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationRessource (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationRessource* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfDotationRessource: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationRessource);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_DotationRessource (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfDotationRessource: end\n");

   return (stat);
}

int ASN1C__SeqOfDotationRessource::Decode ()
{
   return asn1PD__SeqOfDotationRessource (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEquipementPrete                                     */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEquipementPrete::ASN1C__SeqOfEquipementPrete (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEquipementPrete& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEquipementPrete (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipementPrete* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfEquipementPrete: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_EquipementPrete (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfEquipementPrete: end\n");
   return (stat);
}

int ASN1C__SeqOfEquipementPrete::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEquipementPrete (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEquipementPrete (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipementPrete* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfEquipementPrete: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EquipementPrete);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_EquipementPrete (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfEquipementPrete: end\n");

   return (stat);
}

int ASN1C__SeqOfEquipementPrete::Decode ()
{
   return asn1PD__SeqOfEquipementPrete (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEquipementEmprunte                                  */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEquipementEmprunte::ASN1C__SeqOfEquipementEmprunte (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEquipementEmprunte& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEquipementEmprunte (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipementEmprunte* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfEquipementEmprunte: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_EquipementEmprunte (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfEquipementEmprunte: end\n");
   return (stat);
}

int ASN1C__SeqOfEquipementEmprunte::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEquipementEmprunte (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEquipementEmprunte (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipementEmprunte* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfEquipementEmprunte: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EquipementEmprunte);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_EquipementEmprunte (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfEquipementEmprunte: end\n");

   return (stat);
}

int ASN1C__SeqOfEquipementEmprunte::Decode ()
{
   return asn1PD__SeqOfEquipementEmprunte (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitAttributes                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitAttributes::ASN1C_MsgUnitAttributes (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitAttributes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgUnitAttributes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgUnitAttributes: start\n");

   PU_NEWFIELD (ctxt_p, "dotation_eff_personnelPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_personnelPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotation_eff_materielPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_materielPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotation_eff_ressourcePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_ressourcePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "equipements_pretesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipements_pretesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "equipements_empruntesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipements_empruntesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "positionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.positionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "directionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.directionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "hauteurPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.hauteurPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "vitessePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.vitessePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnel_brutPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_operationnel_brutPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pions_renforcantPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pions_renforcantPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pion_renforcePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pion_renforcePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mortPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mortPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "neutralisePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.neutralisePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mode_furtif_actifPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mode_furtif_actifPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "embarquePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.embarquePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "transporteurs_disponiblesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.transporteurs_disponiblesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_oldPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_oldPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_newPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_newPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_pourcentagePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_pourcentagePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_installationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_installationPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "en_tenue_de_protection_nbcPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.en_tenue_de_protection_nbcPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "contamine_par_agents_nbcPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.contamine_par_agents_nbcPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_contaminationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_contaminationPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "communications_brouilleesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.communications_brouilleesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "silence_radioPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.silence_radioPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "radar_actifPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.radar_actifPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pions_transportesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pions_transportesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pion_transporteurPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pion_transporteurPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "rapport_de_forcePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.rapport_de_forcePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "combat_de_rencontrePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.combat_de_rencontrePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnelPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_operationnelPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilite_au_tir_indirectPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilite_au_tir_indirectPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.roePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roe_populationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.roe_populationPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "fatiguePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fatiguePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "moralPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.moralPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "experiencePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.experiencePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "renduPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.renduPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "prisonnierPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.prisonnierPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "refugie_pris_en_comptePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.refugie_pris_en_comptePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_Agent (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode dotation_eff_personnel */

   if (pvalue->m.dotation_eff_personnelPresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_personnel");

      stat = asn1PE__SeqOfDotationPersonnel (ctxt_p, &pvalue->dotation_eff_personnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode dotation_eff_materiel */

   if (pvalue->m.dotation_eff_materielPresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_materiel");

      stat = asn1PE__SeqOfDotationEquipement (ctxt_p, &pvalue->dotation_eff_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode dotation_eff_ressource */

   if (pvalue->m.dotation_eff_ressourcePresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_ressource");

      stat = asn1PE__SeqOfDotationRessource (ctxt_p, &pvalue->dotation_eff_ressource);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode equipements_pretes */

   if (pvalue->m.equipements_pretesPresent) {
      PU_PUSHNAME (ctxt_p, "equipements_pretes");

      stat = asn1PE__SeqOfEquipementPrete (ctxt_p, &pvalue->equipements_pretes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode equipements_empruntes */

   if (pvalue->m.equipements_empruntesPresent) {
      PU_PUSHNAME (ctxt_p, "equipements_empruntes");

      stat = asn1PE__SeqOfEquipementEmprunte (ctxt_p, &pvalue->equipements_empruntes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode position */

   if (pvalue->m.positionPresent) {
      PU_PUSHNAME (ctxt_p, "position");

      stat = asn1PE_CoordUTM (ctxt_p, pvalue->position);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode direction */

   if (pvalue->m.directionPresent) {
      PU_PUSHNAME (ctxt_p, "direction");

      stat = asn1PE_Direction (ctxt_p, pvalue->direction);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode hauteur */

   if (pvalue->m.hauteurPresent) {
      PU_PUSHNAME (ctxt_p, "hauteur");

      stat = asn1PE_Hauteur (ctxt_p, pvalue->hauteur);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode vitesse */

   if (pvalue->m.vitessePresent) {
      PU_PUSHNAME (ctxt_p, "vitesse");

      stat = asn1PE_Vitesse (ctxt_p, pvalue->vitesse);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat_operationnel_brut */

   if (pvalue->m.etat_operationnel_brutPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel_brut");

      stat = asn1PE_PourcentageLibre (ctxt_p, pvalue->etat_operationnel_brut);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode pions_renforcant */

   if (pvalue->m.pions_renforcantPresent) {
      PU_PUSHNAME (ctxt_p, "pions_renforcant");

      stat = asn1PE_ListAgent (ctxt_p, &pvalue->pions_renforcant);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode pion_renforce */

   if (pvalue->m.pion_renforcePresent) {
      PU_PUSHNAME (ctxt_p, "pion_renforce");

      stat = asn1PE_Agent (ctxt_p, pvalue->pion_renforce);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode mort */

   if (pvalue->m.mortPresent) {
      PU_PUSHNAME (ctxt_p, "mort");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->mort);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode neutralise */

   if (pvalue->m.neutralisePresent) {
      PU_PUSHNAME (ctxt_p, "neutralise");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->neutralise);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode mode_furtif_actif */

   if (pvalue->m.mode_furtif_actifPresent) {
      PU_PUSHNAME (ctxt_p, "mode_furtif_actif");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->mode_furtif_actif);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode embarque */

   if (pvalue->m.embarquePresent) {
      PU_PUSHNAME (ctxt_p, "embarque");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarque);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode transporteurs_disponibles */

   if (pvalue->m.transporteurs_disponiblesPresent) {
      PU_PUSHNAME (ctxt_p, "transporteurs_disponibles");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->transporteurs_disponibles);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode posture_old */

   if (pvalue->m.posture_oldPresent) {
      PU_PUSHNAME (ctxt_p, "posture_old");

      stat = asn1PE_EnumUnitPosture (ctxt_p, pvalue->posture_old);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode posture_new */

   if (pvalue->m.posture_newPresent) {
      PU_PUSHNAME (ctxt_p, "posture_new");

      stat = asn1PE_EnumUnitPosture (ctxt_p, pvalue->posture_new);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode posture_pourcentage */

   if (pvalue->m.posture_pourcentagePresent) {
      PU_PUSHNAME (ctxt_p, "posture_pourcentage");

      stat = asn1PE_Pourcentage (ctxt_p, pvalue->posture_pourcentage);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat_installation */

   if (pvalue->m.etat_installationPresent) {
      PU_PUSHNAME (ctxt_p, "etat_installation");

      stat = asn1PE_Pourcentage (ctxt_p, pvalue->etat_installation);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode en_tenue_de_protection_nbc */

   if (pvalue->m.en_tenue_de_protection_nbcPresent) {
      PU_PUSHNAME (ctxt_p, "en_tenue_de_protection_nbc");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->en_tenue_de_protection_nbc);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode contamine_par_agents_nbc */

   if (pvalue->m.contamine_par_agents_nbcPresent) {
      PU_PUSHNAME (ctxt_p, "contamine_par_agents_nbc");

      stat = asn1PE_ListOID (ctxt_p, &pvalue->contamine_par_agents_nbc);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat_contamination */

   if (pvalue->m.etat_contaminationPresent) {
      PU_PUSHNAME (ctxt_p, "etat_contamination");

      stat = asn1PE_Pourcentage (ctxt_p, pvalue->etat_contamination);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode communications_brouillees */

   if (pvalue->m.communications_brouilleesPresent) {
      PU_PUSHNAME (ctxt_p, "communications_brouillees");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->communications_brouillees);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode silence_radio */

   if (pvalue->m.silence_radioPresent) {
      PU_PUSHNAME (ctxt_p, "silence_radio");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->silence_radio);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode radar_actif */

   if (pvalue->m.radar_actifPresent) {
      PU_PUSHNAME (ctxt_p, "radar_actif");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->radar_actif);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode pions_transportes */

   if (pvalue->m.pions_transportesPresent) {
      PU_PUSHNAME (ctxt_p, "pions_transportes");

      stat = asn1PE_ListAgent (ctxt_p, &pvalue->pions_transportes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode pion_transporteur */

   if (pvalue->m.pion_transporteurPresent) {
      PU_PUSHNAME (ctxt_p, "pion_transporteur");

      stat = asn1PE_Agent (ctxt_p, pvalue->pion_transporteur);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      PU_PUSHNAME (ctxt_p, "rapport_de_force");

      stat = asn1PE_EnumEtatRapFor (ctxt_p, pvalue->rapport_de_force);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      PU_PUSHNAME (ctxt_p, "combat_de_rencontre");

      stat = asn1PE_EnumEtatCombatRencontre (ctxt_p, pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel");

      stat = asn1PE_EnumEtatOperationnel (ctxt_p, pvalue->etat_operationnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode disponibilite_au_tir_indirect */

   if (pvalue->m.disponibilite_au_tir_indirectPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilite_au_tir_indirect");

      stat = asn1PE_EnumDisponibiliteAuTir (ctxt_p, pvalue->disponibilite_au_tir_indirect);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode roe */

   if (pvalue->m.roePresent) {
      PU_PUSHNAME (ctxt_p, "roe");

      stat = asn1PE_EnumRoe (ctxt_p, pvalue->roe);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode roe_population */

   if (pvalue->m.roe_populationPresent) {
      PU_PUSHNAME (ctxt_p, "roe_population");

      stat = asn1PE_EnumRoePopulation (ctxt_p, pvalue->roe_population);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode fatigue */

   if (pvalue->m.fatiguePresent) {
      PU_PUSHNAME (ctxt_p, "fatigue");

      stat = asn1PE_EnumUnitFatigue (ctxt_p, pvalue->fatigue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode moral */

   if (pvalue->m.moralPresent) {
      PU_PUSHNAME (ctxt_p, "moral");

      stat = asn1PE_EnumUnitMoral (ctxt_p, pvalue->moral);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode experience */

   if (pvalue->m.experiencePresent) {
      PU_PUSHNAME (ctxt_p, "experience");

      stat = asn1PE_EnumUnitExperience (ctxt_p, pvalue->experience);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode rendu */

   if (pvalue->m.renduPresent) {
      PU_PUSHNAME (ctxt_p, "rendu");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->rendu);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode prisonnier */

   if (pvalue->m.prisonnierPresent) {
      PU_PUSHNAME (ctxt_p, "prisonnier");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->prisonnier);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode refugie_pris_en_compte */

   if (pvalue->m.refugie_pris_en_comptePresent) {
      PU_PUSHNAME (ctxt_p, "refugie_pris_en_compte");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->refugie_pris_en_compte);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgUnitAttributes: end\n");
   return (stat);
}

int ASN1C_MsgUnitAttributes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitAttributes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgUnitAttributes* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgUnitAttributes: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "dotation_eff_personnelPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.dotation_eff_personnelPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotation_eff_materielPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.dotation_eff_materielPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotation_eff_ressourcePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.dotation_eff_ressourcePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "equipements_pretesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.equipements_pretesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "equipements_empruntesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.equipements_empruntesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "positionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.positionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "directionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.directionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "hauteurPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.hauteurPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "vitessePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.vitessePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnel_brutPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_operationnel_brutPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pions_renforcantPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.pions_renforcantPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pion_renforcePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.pion_renforcePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mortPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.mortPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "neutralisePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.neutralisePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mode_furtif_actifPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.mode_furtif_actifPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "embarquePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.embarquePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "transporteurs_disponiblesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.transporteurs_disponiblesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_oldPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.posture_oldPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_newPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.posture_newPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "posture_pourcentagePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.posture_pourcentagePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_installationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_installationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "en_tenue_de_protection_nbcPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.en_tenue_de_protection_nbcPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "contamine_par_agents_nbcPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.contamine_par_agents_nbcPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_contaminationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_contaminationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "communications_brouilleesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.communications_brouilleesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "silence_radioPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.silence_radioPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "radar_actifPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.radar_actifPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pions_transportesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.pions_transportesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "pion_transporteurPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.pion_transporteurPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "rapport_de_forcePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.rapport_de_forcePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "combat_de_rencontrePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.combat_de_rencontrePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "etat_operationnelPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.etat_operationnelPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "disponibilite_au_tir_indirectPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.disponibilite_au_tir_indirectPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.roePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "roe_populationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.roe_populationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "fatiguePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.fatiguePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "moralPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.moralPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "experiencePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.experiencePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "renduPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.renduPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "prisonnierPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.prisonnierPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "refugie_pris_en_comptePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.refugie_pris_en_comptePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_Agent (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode dotation_eff_personnel */

   if (pvalue->m.dotation_eff_personnelPresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_personnel");

      stat = asn1PD__SeqOfDotationPersonnel (ctxt_p, &pvalue->dotation_eff_personnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode dotation_eff_materiel */

   if (pvalue->m.dotation_eff_materielPresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_materiel");

      stat = asn1PD__SeqOfDotationEquipement (ctxt_p, &pvalue->dotation_eff_materiel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode dotation_eff_ressource */

   if (pvalue->m.dotation_eff_ressourcePresent) {
      PU_PUSHNAME (ctxt_p, "dotation_eff_ressource");

      stat = asn1PD__SeqOfDotationRessource (ctxt_p, &pvalue->dotation_eff_ressource);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode equipements_pretes */

   if (pvalue->m.equipements_pretesPresent) {
      PU_PUSHNAME (ctxt_p, "equipements_pretes");

      stat = asn1PD__SeqOfEquipementPrete (ctxt_p, &pvalue->equipements_pretes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode equipements_empruntes */

   if (pvalue->m.equipements_empruntesPresent) {
      PU_PUSHNAME (ctxt_p, "equipements_empruntes");

      stat = asn1PD__SeqOfEquipementEmprunte (ctxt_p, &pvalue->equipements_empruntes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode position */

   if (pvalue->m.positionPresent) {
      PU_PUSHNAME (ctxt_p, "position");

      stat = asn1PD_CoordUTM (ctxt_p, &pvalue->position);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode direction */

   if (pvalue->m.directionPresent) {
      PU_PUSHNAME (ctxt_p, "direction");

      stat = asn1PD_Direction (ctxt_p, &pvalue->direction);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode hauteur */

   if (pvalue->m.hauteurPresent) {
      PU_PUSHNAME (ctxt_p, "hauteur");

      stat = asn1PD_Hauteur (ctxt_p, &pvalue->hauteur);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode vitesse */

   if (pvalue->m.vitessePresent) {
      PU_PUSHNAME (ctxt_p, "vitesse");

      stat = asn1PD_Vitesse (ctxt_p, &pvalue->vitesse);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat_operationnel_brut */

   if (pvalue->m.etat_operationnel_brutPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel_brut");

      stat = asn1PD_PourcentageLibre (ctxt_p, &pvalue->etat_operationnel_brut);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode pions_renforcant */

   if (pvalue->m.pions_renforcantPresent) {
      PU_PUSHNAME (ctxt_p, "pions_renforcant");

      stat = asn1PD_ListAgent (ctxt_p, &pvalue->pions_renforcant);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode pion_renforce */

   if (pvalue->m.pion_renforcePresent) {
      PU_PUSHNAME (ctxt_p, "pion_renforce");

      stat = asn1PD_Agent (ctxt_p, &pvalue->pion_renforce);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode mort */

   if (pvalue->m.mortPresent) {
      PU_PUSHNAME (ctxt_p, "mort");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->mort);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode neutralise */

   if (pvalue->m.neutralisePresent) {
      PU_PUSHNAME (ctxt_p, "neutralise");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->neutralise);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode mode_furtif_actif */

   if (pvalue->m.mode_furtif_actifPresent) {
      PU_PUSHNAME (ctxt_p, "mode_furtif_actif");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->mode_furtif_actif);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode embarque */

   if (pvalue->m.embarquePresent) {
      PU_PUSHNAME (ctxt_p, "embarque");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->embarque);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode transporteurs_disponibles */

   if (pvalue->m.transporteurs_disponiblesPresent) {
      PU_PUSHNAME (ctxt_p, "transporteurs_disponibles");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->transporteurs_disponibles);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode posture_old */

   if (pvalue->m.posture_oldPresent) {
      PU_PUSHNAME (ctxt_p, "posture_old");

      stat = asn1PD_EnumUnitPosture (ctxt_p, &pvalue->posture_old);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode posture_new */

   if (pvalue->m.posture_newPresent) {
      PU_PUSHNAME (ctxt_p, "posture_new");

      stat = asn1PD_EnumUnitPosture (ctxt_p, &pvalue->posture_new);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode posture_pourcentage */

   if (pvalue->m.posture_pourcentagePresent) {
      PU_PUSHNAME (ctxt_p, "posture_pourcentage");

      stat = asn1PD_Pourcentage (ctxt_p, &pvalue->posture_pourcentage);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat_installation */

   if (pvalue->m.etat_installationPresent) {
      PU_PUSHNAME (ctxt_p, "etat_installation");

      stat = asn1PD_Pourcentage (ctxt_p, &pvalue->etat_installation);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode en_tenue_de_protection_nbc */

   if (pvalue->m.en_tenue_de_protection_nbcPresent) {
      PU_PUSHNAME (ctxt_p, "en_tenue_de_protection_nbc");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->en_tenue_de_protection_nbc);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode contamine_par_agents_nbc */

   if (pvalue->m.contamine_par_agents_nbcPresent) {
      PU_PUSHNAME (ctxt_p, "contamine_par_agents_nbc");

      stat = asn1PD_ListOID (ctxt_p, &pvalue->contamine_par_agents_nbc);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat_contamination */

   if (pvalue->m.etat_contaminationPresent) {
      PU_PUSHNAME (ctxt_p, "etat_contamination");

      stat = asn1PD_Pourcentage (ctxt_p, &pvalue->etat_contamination);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode communications_brouillees */

   if (pvalue->m.communications_brouilleesPresent) {
      PU_PUSHNAME (ctxt_p, "communications_brouillees");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->communications_brouillees);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode silence_radio */

   if (pvalue->m.silence_radioPresent) {
      PU_PUSHNAME (ctxt_p, "silence_radio");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->silence_radio);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode radar_actif */

   if (pvalue->m.radar_actifPresent) {
      PU_PUSHNAME (ctxt_p, "radar_actif");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->radar_actif);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode pions_transportes */

   if (pvalue->m.pions_transportesPresent) {
      PU_PUSHNAME (ctxt_p, "pions_transportes");

      stat = asn1PD_ListAgent (ctxt_p, &pvalue->pions_transportes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode pion_transporteur */

   if (pvalue->m.pion_transporteurPresent) {
      PU_PUSHNAME (ctxt_p, "pion_transporteur");

      stat = asn1PD_Agent (ctxt_p, &pvalue->pion_transporteur);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      PU_PUSHNAME (ctxt_p, "rapport_de_force");

      stat = asn1PD_EnumEtatRapFor (ctxt_p, &pvalue->rapport_de_force);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      PU_PUSHNAME (ctxt_p, "combat_de_rencontre");

      stat = asn1PD_EnumEtatCombatRencontre (ctxt_p, &pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      PU_PUSHNAME (ctxt_p, "etat_operationnel");

      stat = asn1PD_EnumEtatOperationnel (ctxt_p, &pvalue->etat_operationnel);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode disponibilite_au_tir_indirect */

   if (pvalue->m.disponibilite_au_tir_indirectPresent) {
      PU_PUSHNAME (ctxt_p, "disponibilite_au_tir_indirect");

      stat = asn1PD_EnumDisponibiliteAuTir (ctxt_p, &pvalue->disponibilite_au_tir_indirect);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode roe */

   if (pvalue->m.roePresent) {
      PU_PUSHNAME (ctxt_p, "roe");

      stat = asn1PD_EnumRoe (ctxt_p, &pvalue->roe);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode roe_population */

   if (pvalue->m.roe_populationPresent) {
      PU_PUSHNAME (ctxt_p, "roe_population");

      stat = asn1PD_EnumRoePopulation (ctxt_p, &pvalue->roe_population);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode fatigue */

   if (pvalue->m.fatiguePresent) {
      PU_PUSHNAME (ctxt_p, "fatigue");

      stat = asn1PD_EnumUnitFatigue (ctxt_p, &pvalue->fatigue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode moral */

   if (pvalue->m.moralPresent) {
      PU_PUSHNAME (ctxt_p, "moral");

      stat = asn1PD_EnumUnitMoral (ctxt_p, &pvalue->moral);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode experience */

   if (pvalue->m.experiencePresent) {
      PU_PUSHNAME (ctxt_p, "experience");

      stat = asn1PD_EnumUnitExperience (ctxt_p, &pvalue->experience);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode rendu */

   if (pvalue->m.renduPresent) {
      PU_PUSHNAME (ctxt_p, "rendu");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->rendu);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode prisonnier */

   if (pvalue->m.prisonnierPresent) {
      PU_PUSHNAME (ctxt_p, "prisonnier");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->prisonnier);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode refugie_pris_en_compte */

   if (pvalue->m.refugie_pris_en_comptePresent) {
      PU_PUSHNAME (ctxt_p, "refugie_pris_en_compte");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->refugie_pris_en_compte);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgUnitAttributes: end\n");

   return (stat);
}

int ASN1C_MsgUnitAttributes::Decode ()
{
   return asn1PD_MsgUnitAttributes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecupererTransporteurs                         */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecupererTransporteurs::ASN1C_MagicActionRecupererTransporteurs (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecupererTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecupererTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionRecupererTransporteurs: end\n");
   return (stat);
}

int ASN1C_MagicActionRecupererTransporteurs::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecupererTransporteurs (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecupererTransporteurs (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionRecupererTransporteurs: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionRecupererTransporteurs: end\n");

   return (stat);
}

int ASN1C_MagicActionRecupererTransporteurs::Decode ()
{
   return asn1PD_MagicActionRecupererTransporteurs (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionSeRendre                                       */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionSeRendre::ASN1C_MagicActionSeRendre (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionSeRendre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionSeRendre: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionSeRendre: end\n");
   return (stat);
}

int ASN1C_MagicActionSeRendre::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionSeRendre (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionSeRendre (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionSeRendre: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionSeRendre: end\n");

   return (stat);
}

int ASN1C_MagicActionSeRendre::Decode ()
{
   return asn1PD_MagicActionSeRendre (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionMoveTo                                         */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionMoveTo::ASN1C_MagicActionMoveTo (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionMoveTo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionMoveTo value)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionMoveTo: start\n");

   stat = asn1PE_CoordUTM (ctxt_p, value);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_MagicActionMoveTo: end\n");
   return (stat);
}

int ASN1C_MagicActionMoveTo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionMoveTo (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionMoveTo* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionMoveTo: start\n");

   stat = asn1PD_CoordUTM (ctxt_p, pvalue);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PD_MagicActionMoveTo: end\n");

   return (stat);
}

int ASN1C_MagicActionMoveTo::Decode ()
{
   return asn1PD_MagicActionMoveTo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionDestructionTotale                              */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionDestructionTotale::ASN1C_MagicActionDestructionTotale (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionDestructionTotale (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionDestructionTotale: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionDestructionTotale: end\n");
   return (stat);
}

int ASN1C_MagicActionDestructionTotale::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionDestructionTotale (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionDestructionTotale (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionDestructionTotale: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionDestructionTotale: end\n");

   return (stat);
}

int ASN1C_MagicActionDestructionTotale::Decode ()
{
   return asn1PD_MagicActionDestructionTotale (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecompletementTotal                            */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecompletementTotal::ASN1C_MagicActionRecompletementTotal (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecompletementTotal (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecompletementTotal: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionRecompletementTotal: end\n");
   return (stat);
}

int ASN1C_MagicActionRecompletementTotal::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecompletementTotal (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecompletementTotal (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionRecompletementTotal: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionRecompletementTotal: end\n");

   return (stat);
}

int ASN1C_MagicActionRecompletementTotal::Decode ()
{
   return asn1PD_MagicActionRecompletementTotal (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecompletementPersonnel                        */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecompletementPersonnel::ASN1C_MagicActionRecompletementPersonnel (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecompletementPersonnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecompletementPersonnel: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionRecompletementPersonnel: end\n");
   return (stat);
}

int ASN1C_MagicActionRecompletementPersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecompletementPersonnel (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecompletementPersonnel (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionRecompletementPersonnel: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionRecompletementPersonnel: end\n");

   return (stat);
}

int ASN1C_MagicActionRecompletementPersonnel::Decode ()
{
   return asn1PD_MagicActionRecompletementPersonnel (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecompletementEquipement                       */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecompletementEquipement::ASN1C_MagicActionRecompletementEquipement (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecompletementEquipement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecompletementEquipement: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionRecompletementEquipement: end\n");
   return (stat);
}

int ASN1C_MagicActionRecompletementEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecompletementEquipement (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecompletementEquipement (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionRecompletementEquipement: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionRecompletementEquipement: end\n");

   return (stat);
}

int ASN1C_MagicActionRecompletementEquipement::Decode ()
{
   return asn1PD_MagicActionRecompletementEquipement (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecompletementRessources                       */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecompletementRessources::ASN1C_MagicActionRecompletementRessources (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecompletementRessources (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecompletementRessources: start\n");

   /* NULL */

   rtdiag ("asn1PE_MagicActionRecompletementRessources: end\n");
   return (stat);
}

int ASN1C_MagicActionRecompletementRessources::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecompletementRessources (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecompletementRessources (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MagicActionRecompletementRessources: start\n");

   /* NULL */

   rtdiag ("asn1PD_MagicActionRecompletementRessources: end\n");

   return (stat);
}

int ASN1C_MagicActionRecompletementRessources::Decode ()
{
   return asn1PD_MagicActionRecompletementRessources (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionChangeFacteursHumains                          */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionChangeFacteursHumains::ASN1C_MagicActionChangeFacteursHumains (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionChangeFacteursHumains& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionChangeFacteursHumains (ASN1CTXT* ctxt_p, ASN1T_MagicActionChangeFacteursHumains* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionChangeFacteursHumains: start\n");

   PU_NEWFIELD (ctxt_p, "fatiguePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fatiguePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "moralPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.moralPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "experiencePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.experiencePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode fatigue */

   if (pvalue->m.fatiguePresent) {
      PU_PUSHNAME (ctxt_p, "fatigue");

      stat = asn1PE_EnumUnitFatigue (ctxt_p, pvalue->fatigue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode moral */

   if (pvalue->m.moralPresent) {
      PU_PUSHNAME (ctxt_p, "moral");

      stat = asn1PE_EnumUnitMoral (ctxt_p, pvalue->moral);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode experience */

   if (pvalue->m.experiencePresent) {
      PU_PUSHNAME (ctxt_p, "experience");

      stat = asn1PE_EnumUnitExperience (ctxt_p, pvalue->experience);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MagicActionChangeFacteursHumains: end\n");
   return (stat);
}

int ASN1C_MagicActionChangeFacteursHumains::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionChangeFacteursHumains (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionChangeFacteursHumains (ASN1CTXT* ctxt_p, ASN1T_MagicActionChangeFacteursHumains* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MagicActionChangeFacteursHumains: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "fatiguePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.fatiguePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "moralPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.moralPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "experiencePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.experiencePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode fatigue */

   if (pvalue->m.fatiguePresent) {
      PU_PUSHNAME (ctxt_p, "fatigue");

      stat = asn1PD_EnumUnitFatigue (ctxt_p, &pvalue->fatigue);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode moral */

   if (pvalue->m.moralPresent) {
      PU_PUSHNAME (ctxt_p, "moral");

      stat = asn1PD_EnumUnitMoral (ctxt_p, &pvalue->moral);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode experience */

   if (pvalue->m.experiencePresent) {
      PU_PUSHNAME (ctxt_p, "experience");

      stat = asn1PD_EnumUnitExperience (ctxt_p, &pvalue->experience);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MagicActionChangeFacteursHumains: end\n");

   return (stat);
}

int ASN1C_MagicActionChangeFacteursHumains::Decode ()
{
   return asn1PD_MagicActionChangeFacteursHumains (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RecompletementDotation                                    */
/*                                                            */
/**************************************************************/

ASN1C_RecompletementDotation::ASN1C_RecompletementDotation (
   ASN1MessageBuffer& msgBuf, ASN1T_RecompletementDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RecompletementDotation (ASN1CTXT* ctxt_p, ASN1T_RecompletementDotation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RecompletementDotation: start\n");

   /* encode famille_dotation */

   PU_PUSHNAME (ctxt_p, "famille_dotation");

   stat = asn1PE_EnumFamilleDotation (ctxt_p, pvalue->famille_dotation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pourcentage */

   PU_PUSHNAME (ctxt_p, "pourcentage");

   stat = asn1PE_Pourcentage (ctxt_p, pvalue->pourcentage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RecompletementDotation: end\n");
   return (stat);
}

int ASN1C_RecompletementDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RecompletementDotation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RecompletementDotation (ASN1CTXT* ctxt_p, ASN1T_RecompletementDotation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RecompletementDotation: start\n");

   /* decode famille_dotation */

   PU_PUSHNAME (ctxt_p, "famille_dotation");

   stat = asn1PD_EnumFamilleDotation (ctxt_p, &pvalue->famille_dotation);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pourcentage */

   PU_PUSHNAME (ctxt_p, "pourcentage");

   stat = asn1PD_Pourcentage (ctxt_p, &pvalue->pourcentage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RecompletementDotation: end\n");

   return (stat);
}

int ASN1C_RecompletementDotation::Decode ()
{
   return asn1PD_RecompletementDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RecompletementDotationMunition                            */
/*                                                            */
/**************************************************************/

ASN1C_RecompletementDotationMunition::ASN1C_RecompletementDotationMunition (
   ASN1MessageBuffer& msgBuf, ASN1T_RecompletementDotationMunition& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RecompletementDotationMunition (ASN1CTXT* ctxt_p, ASN1T_RecompletementDotationMunition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RecompletementDotationMunition: start\n");

   /* encode famille_munition */

   PU_PUSHNAME (ctxt_p, "famille_munition");

   stat = asn1PE_EnumFamilleMunition (ctxt_p, pvalue->famille_munition);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode pourcentage */

   PU_PUSHNAME (ctxt_p, "pourcentage");

   stat = asn1PE_Pourcentage (ctxt_p, pvalue->pourcentage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RecompletementDotationMunition: end\n");
   return (stat);
}

int ASN1C_RecompletementDotationMunition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RecompletementDotationMunition (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RecompletementDotationMunition (ASN1CTXT* ctxt_p, ASN1T_RecompletementDotationMunition* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RecompletementDotationMunition: start\n");

   /* decode famille_munition */

   PU_PUSHNAME (ctxt_p, "famille_munition");

   stat = asn1PD_EnumFamilleMunition (ctxt_p, &pvalue->famille_munition);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode pourcentage */

   PU_PUSHNAME (ctxt_p, "pourcentage");

   stat = asn1PD_Pourcentage (ctxt_p, &pvalue->pourcentage);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RecompletementDotationMunition: end\n");

   return (stat);
}

int ASN1C_RecompletementDotationMunition::Decode ()
{
   return asn1PD_RecompletementDotationMunition (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RecompletementEquipement                                  */
/*                                                            */
/**************************************************************/

ASN1C_RecompletementEquipement::ASN1C_RecompletementEquipement (
   ASN1MessageBuffer& msgBuf, ASN1T_RecompletementEquipement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RecompletementEquipement (ASN1CTXT* ctxt_p, ASN1T_RecompletementEquipement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RecompletementEquipement: start\n");

   /* encode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PE_TypeEquipement (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nombre_disponible */

   PU_PUSHNAME (ctxt_p, "nombre_disponible");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RecompletementEquipement: end\n");
   return (stat);
}

int ASN1C_RecompletementEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RecompletementEquipement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RecompletementEquipement (ASN1CTXT* ctxt_p, ASN1T_RecompletementEquipement* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RecompletementEquipement: start\n");

   /* decode type_equipement */

   PU_PUSHNAME (ctxt_p, "type_equipement");

   stat = asn1PD_TypeEquipement (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nombre_disponible */

   PU_PUSHNAME (ctxt_p, "nombre_disponible");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RecompletementEquipement: end\n");

   return (stat);
}

int ASN1C_RecompletementEquipement::Decode ()
{
   return asn1PD_RecompletementEquipement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RecompletementPersonnel                                   */
/*                                                            */
/**************************************************************/

ASN1C_RecompletementPersonnel::ASN1C_RecompletementPersonnel (
   ASN1MessageBuffer& msgBuf, ASN1T_RecompletementPersonnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RecompletementPersonnel (ASN1CTXT* ctxt_p, ASN1T_RecompletementPersonnel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RecompletementPersonnel: start\n");

   /* encode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode nombre_disponible */

   PU_PUSHNAME (ctxt_p, "nombre_disponible");

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RecompletementPersonnel: end\n");
   return (stat);
}

int ASN1C_RecompletementPersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RecompletementPersonnel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RecompletementPersonnel (ASN1CTXT* ctxt_p, ASN1T_RecompletementPersonnel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RecompletementPersonnel: start\n");

   /* decode rang */

   PU_PUSHNAME (ctxt_p, "rang");

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode nombre_disponible */

   PU_PUSHNAME (ctxt_p, "nombre_disponible");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RecompletementPersonnel: end\n");

   return (stat);
}

int ASN1C_RecompletementPersonnel::Decode ()
{
   return asn1PD_RecompletementPersonnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  RecompletementStock                                       */
/*                                                            */
/**************************************************************/

ASN1C_RecompletementStock::ASN1C_RecompletementStock (
   ASN1MessageBuffer& msgBuf, ASN1T_RecompletementStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_RecompletementStock (ASN1CTXT* ctxt_p, ASN1T_RecompletementStock* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_RecompletementStock: start\n");

   /* encode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PE_TypeDotation (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_RecompletementStock: end\n");
   return (stat);
}

int ASN1C_RecompletementStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_RecompletementStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_RecompletementStock (ASN1CTXT* ctxt_p, ASN1T_RecompletementStock* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_RecompletementStock: start\n");

   /* decode ressource_id */

   PU_PUSHNAME (ctxt_p, "ressource_id");

   stat = asn1PD_TypeDotation (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode quantite_disponible */

   PU_PUSHNAME (ctxt_p, "quantite_disponible");

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_disponible);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_RecompletementStock: end\n");

   return (stat);
}

int ASN1C_RecompletementStock::Decode ()
{
   return asn1PD_RecompletementStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRecompletementEquipement                            */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRecompletementEquipement::ASN1C__SeqOfRecompletementEquipement (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRecompletementEquipement& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRecompletementEquipement (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementEquipement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRecompletementEquipement: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RecompletementEquipement (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRecompletementEquipement: end\n");
   return (stat);
}

int ASN1C__SeqOfRecompletementEquipement::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRecompletementEquipement (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRecompletementEquipement (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementEquipement* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRecompletementEquipement: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RecompletementEquipement);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RecompletementEquipement (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRecompletementEquipement: end\n");

   return (stat);
}

int ASN1C__SeqOfRecompletementEquipement::Decode ()
{
   return asn1PD__SeqOfRecompletementEquipement (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRecompletementPersonnel                             */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRecompletementPersonnel::ASN1C__SeqOfRecompletementPersonnel (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRecompletementPersonnel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRecompletementPersonnel (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementPersonnel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRecompletementPersonnel: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RecompletementPersonnel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRecompletementPersonnel: end\n");
   return (stat);
}

int ASN1C__SeqOfRecompletementPersonnel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRecompletementPersonnel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRecompletementPersonnel (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementPersonnel* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRecompletementPersonnel: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RecompletementPersonnel);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RecompletementPersonnel (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRecompletementPersonnel: end\n");

   return (stat);
}

int ASN1C__SeqOfRecompletementPersonnel::Decode ()
{
   return asn1PD__SeqOfRecompletementPersonnel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRecompletementDotation                              */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRecompletementDotation::ASN1C__SeqOfRecompletementDotation (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRecompletementDotation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRecompletementDotation (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementDotation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRecompletementDotation: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RecompletementDotation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRecompletementDotation: end\n");
   return (stat);
}

int ASN1C__SeqOfRecompletementDotation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRecompletementDotation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRecompletementDotation (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementDotation* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRecompletementDotation: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RecompletementDotation);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RecompletementDotation (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRecompletementDotation: end\n");

   return (stat);
}

int ASN1C__SeqOfRecompletementDotation::Decode ()
{
   return asn1PD__SeqOfRecompletementDotation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRecompletementDotationMunition                      */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRecompletementDotationMunition::ASN1C__SeqOfRecompletementDotationMunition (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRecompletementDotationMunition& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRecompletementDotationMunition (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementDotationMunition* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRecompletementDotationMunition: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RecompletementDotationMunition (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRecompletementDotationMunition: end\n");
   return (stat);
}

int ASN1C__SeqOfRecompletementDotationMunition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRecompletementDotationMunition (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRecompletementDotationMunition (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementDotationMunition* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRecompletementDotationMunition: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RecompletementDotationMunition);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RecompletementDotationMunition (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRecompletementDotationMunition: end\n");

   return (stat);
}

int ASN1C__SeqOfRecompletementDotationMunition::Decode ()
{
   return asn1PD__SeqOfRecompletementDotationMunition (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfRecompletementStock                                 */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfRecompletementStock::ASN1C__SeqOfRecompletementStock (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfRecompletementStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfRecompletementStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PE__SeqOfRecompletementStock: start\n");

   /* encode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PE_RecompletementStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   rtdiag ("asn1PE__SeqOfRecompletementStock: end\n");
   return (stat);
}

int ASN1C__SeqOfRecompletementStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfRecompletementStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfRecompletementStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfRecompletementStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   rtdiag ("asn1PD__SeqOfRecompletementStock: start\n");

   /* decode length determinant */

   PU_PUSHNAME (ctxt_p, "n");

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_RecompletementStock);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      PU_PUSHELEMNAME (ctxt_p, xx1);

      stat = asn1PD_RecompletementStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD__SeqOfRecompletementStock: end\n");

   return (stat);
}

int ASN1C__SeqOfRecompletementStock::Decode ()
{
   return asn1PD__SeqOfRecompletementStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecompletementPartiel                          */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecompletementPartiel::ASN1C_MagicActionRecompletementPartiel (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionRecompletementPartiel& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionRecompletementPartiel (ASN1CTXT* ctxt_p, ASN1T_MagicActionRecompletementPartiel* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MagicActionRecompletementPartiel: start\n");

   PU_NEWFIELD (ctxt_p, "equipementsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipementsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "personnelsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.personnelsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotationsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotationsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "munitionsPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.munitionsPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "stocksPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.stocksPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode equipements */

   if (pvalue->m.equipementsPresent) {
      PU_PUSHNAME (ctxt_p, "equipements");

      stat = asn1PE__SeqOfRecompletementEquipement (ctxt_p, &pvalue->equipements);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode personnels */

   if (pvalue->m.personnelsPresent) {
      PU_PUSHNAME (ctxt_p, "personnels");

      stat = asn1PE__SeqOfRecompletementPersonnel (ctxt_p, &pvalue->personnels);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode dotations */

   if (pvalue->m.dotationsPresent) {
      PU_PUSHNAME (ctxt_p, "dotations");

      stat = asn1PE__SeqOfRecompletementDotation (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode munitions */

   if (pvalue->m.munitionsPresent) {
      PU_PUSHNAME (ctxt_p, "munitions");

      stat = asn1PE__SeqOfRecompletementDotationMunition (ctxt_p, &pvalue->munitions);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode stocks */

   if (pvalue->m.stocksPresent) {
      PU_PUSHNAME (ctxt_p, "stocks");

      stat = asn1PE__SeqOfRecompletementStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MagicActionRecompletementPartiel: end\n");
   return (stat);
}

int ASN1C_MagicActionRecompletementPartiel::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecompletementPartiel (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionRecompletementPartiel (ASN1CTXT* ctxt_p, ASN1T_MagicActionRecompletementPartiel* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MagicActionRecompletementPartiel: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "equipementsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.equipementsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "personnelsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.personnelsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "dotationsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.dotationsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "munitionsPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.munitionsPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "stocksPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.stocksPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode equipements */

   if (pvalue->m.equipementsPresent) {
      PU_PUSHNAME (ctxt_p, "equipements");

      stat = asn1PD__SeqOfRecompletementEquipement (ctxt_p, &pvalue->equipements);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode personnels */

   if (pvalue->m.personnelsPresent) {
      PU_PUSHNAME (ctxt_p, "personnels");

      stat = asn1PD__SeqOfRecompletementPersonnel (ctxt_p, &pvalue->personnels);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode dotations */

   if (pvalue->m.dotationsPresent) {
      PU_PUSHNAME (ctxt_p, "dotations");

      stat = asn1PD__SeqOfRecompletementDotation (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode munitions */

   if (pvalue->m.munitionsPresent) {
      PU_PUSHNAME (ctxt_p, "munitions");

      stat = asn1PD__SeqOfRecompletementDotationMunition (ctxt_p, &pvalue->munitions);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode stocks */

   if (pvalue->m.stocksPresent) {
      PU_PUSHNAME (ctxt_p, "stocks");

      stat = asn1PD__SeqOfRecompletementStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MagicActionRecompletementPartiel: end\n");

   return (stat);
}

int ASN1C_MagicActionRecompletementPartiel::Decode ()
{
   return asn1PD_MagicActionRecompletementPartiel (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicAction_action                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicAction_action::ASN1C_MsgUnitMagicAction_action (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicAction_action& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction_action* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgUnitMagicAction_action: start\n");

   /* Encode choice index value */

   PU_PUSHNAME (ctxt_p, "t");

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* move_to */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.move_to");

         stat = asn1PE_MagicActionMoveTo (ctxt_p, *pvalue->u.move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_total */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.recompletement_total");

         stat = asn1PE_MagicActionRecompletementTotal (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_partiel */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.recompletement_partiel");

         stat = asn1PE_MagicActionRecompletementPartiel (ctxt_p, pvalue->u.recompletement_partiel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_personnel */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.recompletement_personnel");

         stat = asn1PE_MagicActionRecompletementPersonnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_equipement */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.recompletement_equipement");

         stat = asn1PE_MagicActionRecompletementEquipement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_ressources */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.recompletement_ressources");

         stat = asn1PE_MagicActionRecompletementRessources (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* change_facteurs_humains */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.change_facteurs_humains");

         stat = asn1PE_MagicActionChangeFacteursHumains (ctxt_p, pvalue->u.change_facteurs_humains);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* destruction_totale */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.destruction_totale");

         stat = asn1PE_MagicActionDestructionTotale (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* se_rendre */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.se_rendre");

         stat = asn1PE_MagicActionSeRendre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      /* recuperer_transporteurs */
      case 10:
         PU_PUSHNAME (ctxt_p, "u.recuperer_transporteurs");

         stat = asn1PE_MagicActionRecupererTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PE_MsgUnitMagicAction_action: end\n");
   return (stat);
}

int ASN1C_MsgUnitMagicAction_action::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicAction_action (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction_action* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_MsgUnitMagicAction_action: start\n");

   PU_PUSHNAME (ctxt_p, "t");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 9);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->t = ui + 1;

   PU_POPNAME (ctxt_p);

   switch (ui) {
      /* move_to */
      case 0:
         PU_PUSHNAME (ctxt_p, "u.move_to");

         pvalue->u.move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionMoveTo);
         if (pvalue->u.move_to == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MagicActionMoveTo (ctxt_p, pvalue->u.move_to);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_total */
      case 1:
         PU_PUSHNAME (ctxt_p, "u.recompletement_total");

         stat = asn1PD_MagicActionRecompletementTotal (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_partiel */
      case 2:
         PU_PUSHNAME (ctxt_p, "u.recompletement_partiel");

         pvalue->u.recompletement_partiel = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionRecompletementPartiel);
         if (pvalue->u.recompletement_partiel == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MagicActionRecompletementPartiel (ctxt_p, pvalue->u.recompletement_partiel);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_personnel */
      case 3:
         PU_PUSHNAME (ctxt_p, "u.recompletement_personnel");

         stat = asn1PD_MagicActionRecompletementPersonnel (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_equipement */
      case 4:
         PU_PUSHNAME (ctxt_p, "u.recompletement_equipement");

         stat = asn1PD_MagicActionRecompletementEquipement (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recompletement_ressources */
      case 5:
         PU_PUSHNAME (ctxt_p, "u.recompletement_ressources");

         stat = asn1PD_MagicActionRecompletementRessources (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* change_facteurs_humains */
      case 6:
         PU_PUSHNAME (ctxt_p, "u.change_facteurs_humains");

         pvalue->u.change_facteurs_humains = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionChangeFacteursHumains);
         if (pvalue->u.change_facteurs_humains == NULL)
            return LOG_ASN1ERR (ctxt_p, ASN_E_NOMEM);

         stat = asn1PD_MagicActionChangeFacteursHumains (ctxt_p, pvalue->u.change_facteurs_humains);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* destruction_totale */
      case 7:
         PU_PUSHNAME (ctxt_p, "u.destruction_totale");

         stat = asn1PD_MagicActionDestructionTotale (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* se_rendre */
      case 8:
         PU_PUSHNAME (ctxt_p, "u.se_rendre");

         stat = asn1PD_MagicActionSeRendre (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      /* recuperer_transporteurs */
      case 9:
         PU_PUSHNAME (ctxt_p, "u.recuperer_transporteurs");

         stat = asn1PD_MagicActionRecupererTransporteurs (ctxt_p);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

         PU_POPNAME (ctxt_p);

         break;

      default:
         return LOG_ASN1ERR (ctxt_p, ASN_E_INVOPT);
   }

   rtdiag ("asn1PD_MsgUnitMagicAction_action: end\n");

   return (stat);
}

int ASN1C_MsgUnitMagicAction_action::Decode ()
{
   return asn1PD_MsgUnitMagicAction_action (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicAction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicAction::ASN1C_MsgUnitMagicAction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicAction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgUnitMagicAction: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PE_MsgUnitMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgUnitMagicAction: end\n");
   return (stat);
}

int ASN1C_MsgUnitMagicAction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicAction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgUnitMagicAction: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode action */

   PU_PUSHNAME (ctxt_p, "action");

   stat = asn1PD_MsgUnitMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgUnitMagicAction: end\n");

   return (stat);
}

int ASN1C_MsgUnitMagicAction::Decode ()
{
   return asn1PD_MsgUnitMagicAction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitAttrErrorCode                                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitAttrErrorCode::ASN1C_EnumUnitAttrErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitAttrErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitAttrErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumUnitAttrErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumUnitAttrErrorCode: start\n");

   switch (value) {
      case EnumUnitAttrErrorCode::no_error: ui = 0; break;
      case EnumUnitAttrErrorCode::error_invalid_unit: ui = 1; break;
      case EnumUnitAttrErrorCode::error_automate_embraye: ui = 2; break;
      case EnumUnitAttrErrorCode::error_invalid_attribute: ui = 3; break;
      case EnumUnitAttrErrorCode::error_unit_surrendered: ui = 4; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumUnitAttrErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumUnitAttrErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitAttrErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitAttrErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumUnitAttrErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumUnitAttrErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumUnitAttrErrorCode::no_error; break;
      case 1: *pvalue = EnumUnitAttrErrorCode::error_invalid_unit; break;
      case 2: *pvalue = EnumUnitAttrErrorCode::error_automate_embraye; break;
      case 3: *pvalue = EnumUnitAttrErrorCode::error_invalid_attribute; break;
      case 4: *pvalue = EnumUnitAttrErrorCode::error_unit_surrendered; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumUnitAttrErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumUnitAttrErrorCode::Decode ()
{
   return asn1PD_EnumUnitAttrErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicActionAck                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicActionAck::ASN1C_MsgUnitMagicActionAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicActionAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgUnitMagicActionAck: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumUnitAttrErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgUnitMagicActionAck: end\n");
   return (stat);
}

int ASN1C_MsgUnitMagicActionAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicActionAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgUnitMagicActionAck: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumUnitAttrErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgUnitMagicActionAck: end\n");

   return (stat);
}

int ASN1C_MsgUnitMagicActionAck::Decode ()
{
   return asn1PD_MsgUnitMagicActionAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitPathFind                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitPathFind::ASN1C_MsgUnitPathFind (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitPathFind& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitPathFind (ASN1CTXT* ctxt_p, ASN1T_MsgUnitPathFind* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgUnitPathFind: start\n");

   /* encode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PE_OID (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PE_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgUnitPathFind: end\n");
   return (stat);
}

int ASN1C_MsgUnitPathFind::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitPathFind (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitPathFind (ASN1CTXT* ctxt_p, ASN1T_MsgUnitPathFind* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgUnitPathFind: start\n");

   /* decode oid_pion */

   PU_PUSHNAME (ctxt_p, "oid_pion");

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode itineraire */

   PU_PUSHNAME (ctxt_p, "itineraire");

   stat = asn1PD_Itineraire (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgUnitPathFind: end\n");

   return (stat);
}

int ASN1C_MsgUnitPathFind::Decode ()
{
   return asn1PD_MsgUnitPathFind (mpContext->GetPtr(), &msgData);
}


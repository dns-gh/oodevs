/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 13-Jul-2007.
 */
#include "Unit.h"

/**************************************************************/
/*                                                            */
/*  UnitIncludes                                              */
/*                                                            */
/**************************************************************/

ASN1C_UnitIncludes::ASN1C_UnitIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_UnitIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_UnitIncludes (ASN1CTXT* ctxt_p, ASN1T_UnitIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_UnitIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_UnitIncludes (ASN1CTXT* ctxt_p, ASN1T_UnitIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_UnitIncludes::Decode ()
{
   return asn1PD_UnitIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  UnitExports                                               */
/*                                                            */
/**************************************************************/

ASN1C_UnitExports::ASN1C_UnitExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_UnitExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_UnitExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_UnitExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_UnitExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_UnitExports::Decode ()
{
   return asn1PD_UnitExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  LentEquipment                                             */
/*                                                            */
/**************************************************************/

ASN1C_LentEquipment::ASN1C_LentEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T_LentEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LentEquipment (ASN1CTXT* ctxt_p, ASN1T_LentEquipment* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_pion_emprunteur */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion_emprunteur);
   if (stat != ASN_OK) return stat;

   /* encode type_equipement */

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* encode nombre */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_LentEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LentEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LentEquipment (ASN1CTXT* ctxt_p, ASN1T_LentEquipment* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_pion_emprunteur */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion_emprunteur);
   if (stat != ASN_OK) return stat;

   /* decode type_equipement */

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* decode nombre */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_LentEquipment::Decode ()
{
   return asn1PD_LentEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  BorrowedEquipment                                         */
/*                                                            */
/**************************************************************/

ASN1C_BorrowedEquipment::ASN1C_BorrowedEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T_BorrowedEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_BorrowedEquipment (ASN1CTXT* ctxt_p, ASN1T_BorrowedEquipment* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_pion_preteur */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion_preteur);
   if (stat != ASN_OK) return stat;

   /* encode type_equipement */

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* encode nombre */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_BorrowedEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_BorrowedEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_BorrowedEquipment (ASN1CTXT* ctxt_p, ASN1T_BorrowedEquipment* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_pion_preteur */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion_preteur);
   if (stat != ASN_OK) return stat;

   /* decode type_equipement */

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* decode nombre */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_BorrowedEquipment::Decode ()
{
   return asn1PD_BorrowedEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  HumanDotations                                            */
/*                                                            */
/**************************************************************/

ASN1C_HumanDotations::ASN1C_HumanDotations (
   ASN1MessageBuffer& msgBuf, ASN1T_HumanDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_HumanDotations (ASN1CTXT* ctxt_p, ASN1T_HumanDotations* pvalue)
{
   int stat = ASN_OK;

   /* encode rang */

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return stat;

   /* encode nb_total */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_total);
   if (stat != ASN_OK) return stat;

   /* encode nb_operationnels */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_operationnels);
   if (stat != ASN_OK) return stat;

   /* encode nb_morts */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_morts);
   if (stat != ASN_OK) return stat;

   /* encode nb_blesses */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses);
   if (stat != ASN_OK) return stat;

   /* encode nb_blesses_mentaux */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_blesses_mentaux);
   if (stat != ASN_OK) return stat;

   /* encode nb_contamines_nbc */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_contamines_nbc);
   if (stat != ASN_OK) return stat;

   /* encode nb_dans_chaine_sante */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_dans_chaine_sante);
   if (stat != ASN_OK) return stat;

   /* encode nb_utilises_pour_maintenance */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_utilises_pour_maintenance);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_HumanDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_HumanDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_HumanDotations (ASN1CTXT* ctxt_p, ASN1T_HumanDotations* pvalue)
{
   int stat = ASN_OK;

   /* decode rang */

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return stat;

   /* decode nb_total */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_total);
   if (stat != ASN_OK) return stat;

   /* decode nb_operationnels */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_operationnels);
   if (stat != ASN_OK) return stat;

   /* decode nb_morts */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_morts);
   if (stat != ASN_OK) return stat;

   /* decode nb_blesses */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses);
   if (stat != ASN_OK) return stat;

   /* decode nb_blesses_mentaux */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_blesses_mentaux);
   if (stat != ASN_OK) return stat;

   /* decode nb_contamines_nbc */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_contamines_nbc);
   if (stat != ASN_OK) return stat;

   /* decode nb_dans_chaine_sante */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_dans_chaine_sante);
   if (stat != ASN_OK) return stat;

   /* decode nb_utilises_pour_maintenance */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_utilises_pour_maintenance);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_HumanDotations::Decode ()
{
   return asn1PD_HumanDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EquipmentDotations                                        */
/*                                                            */
/**************************************************************/

ASN1C_EquipmentDotations::ASN1C_EquipmentDotations (
   ASN1MessageBuffer& msgBuf, ASN1T_EquipmentDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EquipmentDotations (ASN1CTXT* ctxt_p, ASN1T_EquipmentDotations* pvalue)
{
   int stat = ASN_OK;

   /* encode type_equipement */

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* encode nb_disponibles */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_disponibles);
   if (stat != ASN_OK) return stat;

   /* encode nb_indisponibles */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_indisponibles);
   if (stat != ASN_OK) return stat;

   /* encode nb_reparables */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_reparables);
   if (stat != ASN_OK) return stat;

   /* encode nb_dans_chaine_maintenance */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_dans_chaine_maintenance);
   if (stat != ASN_OK) return stat;

   /* encode nb_prisonniers */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nb_prisonniers);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_EquipmentDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EquipmentDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_EquipmentDotations (ASN1CTXT* ctxt_p, ASN1T_EquipmentDotations* pvalue)
{
   int stat = ASN_OK;

   /* decode type_equipement */

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* decode nb_disponibles */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_disponibles);
   if (stat != ASN_OK) return stat;

   /* decode nb_indisponibles */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_indisponibles);
   if (stat != ASN_OK) return stat;

   /* decode nb_reparables */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_reparables);
   if (stat != ASN_OK) return stat;

   /* decode nb_dans_chaine_maintenance */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_dans_chaine_maintenance);
   if (stat != ASN_OK) return stat;

   /* decode nb_prisonniers */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nb_prisonniers);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_EquipmentDotations::Decode ()
{
   return asn1PD_EquipmentDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ResourceDotations                                         */
/*                                                            */
/**************************************************************/

ASN1C_ResourceDotations::ASN1C_ResourceDotations (
   ASN1MessageBuffer& msgBuf, ASN1T_ResourceDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ResourceDotations (ASN1CTXT* ctxt_p, ASN1T_ResourceDotations* pvalue)
{
   int stat = ASN_OK;

   /* encode ressource_id */

   stat = asn1PE_DotationType (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* encode quantite_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_ResourceDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ResourceDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ResourceDotations (ASN1CTXT* ctxt_p, ASN1T_ResourceDotations* pvalue)
{
   int stat = ASN_OK;

   /* decode ressource_id */

   stat = asn1PD_DotationType (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* decode quantite_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_ResourceDotations::Decode ()
{
   return asn1PD_ResourceDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitTiredness                                         */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitTiredness::ASN1C_EnumUnitTiredness (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitTiredness& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitTiredness (ASN1CTXT* ctxt_p, ASN1T_EnumUnitTiredness value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitTiredness::normal: ui = 0; break;
      case EnumUnitTiredness::fatigue: ui = 1; break;
      case EnumUnitTiredness::epuise: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitTiredness::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitTiredness (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitTiredness (ASN1CTXT* ctxt_p, ASN1T_EnumUnitTiredness* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitTiredness::normal; break;
      case 1: *pvalue = EnumUnitTiredness::fatigue; break;
      case 2: *pvalue = EnumUnitTiredness::epuise; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitTiredness::Decode ()
{
   return asn1PD_EnumUnitTiredness (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitMorale                                            */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitMorale::ASN1C_EnumUnitMorale (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitMorale& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitMorale (ASN1CTXT* ctxt_p, ASN1T_EnumUnitMorale value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitMorale::fanatique: ui = 0; break;
      case EnumUnitMorale::bon: ui = 1; break;
      case EnumUnitMorale::moyen: ui = 2; break;
      case EnumUnitMorale::mauvais: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitMorale::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitMorale (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitMorale (ASN1CTXT* ctxt_p, ASN1T_EnumUnitMorale* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitMorale::fanatique; break;
      case 1: *pvalue = EnumUnitMorale::bon; break;
      case 2: *pvalue = EnumUnitMorale::moyen; break;
      case 3: *pvalue = EnumUnitMorale::mauvais; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitMorale::Decode ()
{
   return asn1PD_EnumUnitMorale (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitExperience                                        */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitExperience::ASN1C_EnumUnitExperience (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitExperience& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitExperience (ASN1CTXT* ctxt_p, ASN1T_EnumUnitExperience value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitExperience::veteran: ui = 0; break;
      case EnumUnitExperience::experimente: ui = 1; break;
      case EnumUnitExperience::conscrit: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitExperience::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitExperience (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitExperience (ASN1CTXT* ctxt_p, ASN1T_EnumUnitExperience* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitExperience::veteran; break;
      case 1: *pvalue = EnumUnitExperience::experimente; break;
      case 2: *pvalue = EnumUnitExperience::conscrit; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitExperience::Decode ()
{
   return asn1PD_EnumUnitExperience (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitPosture                                           */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitPosture::ASN1C_EnumUnitPosture (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitPosture& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitPosture (ASN1CTXT* ctxt_p, ASN1T_EnumUnitPosture value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitPosture::posture_mouvement: ui = 0; break;
      case EnumUnitPosture::posture_mouvement_discret: ui = 1; break;
      case EnumUnitPosture::posture_arret: ui = 2; break;
      case EnumUnitPosture::posture_poste_reflexe: ui = 3; break;
      case EnumUnitPosture::posture_poste: ui = 4; break;
      case EnumUnitPosture::posture_poste_amenage: ui = 5; break;
      case EnumUnitPosture::posture_poste_prepare_genie: ui = 6; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 6);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitPosture::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitPosture (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitPosture (ASN1CTXT* ctxt_p, ASN1T_EnumUnitPosture* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitPosture::posture_mouvement; break;
      case 1: *pvalue = EnumUnitPosture::posture_mouvement_discret; break;
      case 2: *pvalue = EnumUnitPosture::posture_arret; break;
      case 3: *pvalue = EnumUnitPosture::posture_poste_reflexe; break;
      case 4: *pvalue = EnumUnitPosture::posture_poste; break;
      case 5: *pvalue = EnumUnitPosture::posture_poste_amenage; break;
      case 6: *pvalue = EnumUnitPosture::posture_poste_prepare_genie; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitPosture::Decode ()
{
   return asn1PD_EnumUnitPosture (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumForceRatioStatus                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumForceRatioStatus::ASN1C_EnumForceRatioStatus (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumForceRatioStatus& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumForceRatioStatus (ASN1CTXT* ctxt_p, ASN1T_EnumForceRatioStatus value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumForceRatioStatus::none: ui = 0; break;
      case EnumForceRatioStatus::neutre: ui = 1; break;
      case EnumForceRatioStatus::favorable: ui = 2; break;
      case EnumForceRatioStatus::defavorable: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumForceRatioStatus::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumForceRatioStatus (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumForceRatioStatus (ASN1CTXT* ctxt_p, ASN1T_EnumForceRatioStatus* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumForceRatioStatus::none; break;
      case 1: *pvalue = EnumForceRatioStatus::neutre; break;
      case 2: *pvalue = EnumForceRatioStatus::favorable; break;
      case 3: *pvalue = EnumForceRatioStatus::defavorable; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumForceRatioStatus::Decode ()
{
   return asn1PD_EnumForceRatioStatus (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumRoe                                                   */
/*                                                            */
/**************************************************************/

ASN1C_EnumRoe::ASN1C_EnumRoe (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumRoe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumRoe (ASN1CTXT* ctxt_p, ASN1T_EnumRoe value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumRoe::none: ui = 0; break;
      case EnumRoe::tir_libre: ui = 1; break;
      case EnumRoe::tir_sur_riposte: ui = 2; break;
      case EnumRoe::tir_interdit: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumRoe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumRoe (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumRoe (ASN1CTXT* ctxt_p, ASN1T_EnumRoe* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumRoe::none; break;
      case 1: *pvalue = EnumRoe::tir_libre; break;
      case 2: *pvalue = EnumRoe::tir_sur_riposte; break;
      case 3: *pvalue = EnumRoe::tir_interdit; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumRoe::Decode ()
{
   return asn1PD_EnumRoe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumPopulationRoe                                         */
/*                                                            */
/**************************************************************/

ASN1C_EnumPopulationRoe::ASN1C_EnumPopulationRoe (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumPopulationRoe& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumPopulationRoe (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationRoe value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumPopulationRoe::none: ui = 0; break;
      case EnumPopulationRoe::emploi_force_interdit: ui = 1; break;
      case EnumPopulationRoe::maintien_a_distance_par_moyens_non_letaux: ui = 2; break;
      case EnumPopulationRoe::dispersion_par_moyens_de_defense_actifs: ui = 3; break;
      case EnumPopulationRoe::armes_letales_autorisees: ui = 4; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumPopulationRoe::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumPopulationRoe (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumPopulationRoe (ASN1CTXT* ctxt_p, ASN1T_EnumPopulationRoe* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumPopulationRoe::none; break;
      case 1: *pvalue = EnumPopulationRoe::emploi_force_interdit; break;
      case 2: *pvalue = EnumPopulationRoe::maintien_a_distance_par_moyens_non_letaux; break;
      case 3: *pvalue = EnumPopulationRoe::dispersion_par_moyens_de_defense_actifs; break;
      case 4: *pvalue = EnumPopulationRoe::armes_letales_autorisees; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumPopulationRoe::Decode ()
{
   return asn1PD_EnumPopulationRoe (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumMeetingEngagementStatus                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumMeetingEngagementStatus::ASN1C_EnumMeetingEngagementStatus (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumMeetingEngagementStatus& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumMeetingEngagementStatus (ASN1CTXT* ctxt_p, ASN1T_EnumMeetingEngagementStatus value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumMeetingEngagementStatus::none: ui = 0; break;
      case EnumMeetingEngagementStatus::etat_esquive: ui = 1; break;
      case EnumMeetingEngagementStatus::etat_fixe: ui = 2; break;
      case EnumMeetingEngagementStatus::etat_poursuite_mission: ui = 3; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumMeetingEngagementStatus::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumMeetingEngagementStatus (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumMeetingEngagementStatus (ASN1CTXT* ctxt_p, ASN1T_EnumMeetingEngagementStatus* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumMeetingEngagementStatus::none; break;
      case 1: *pvalue = EnumMeetingEngagementStatus::etat_esquive; break;
      case 2: *pvalue = EnumMeetingEngagementStatus::etat_fixe; break;
      case 3: *pvalue = EnumMeetingEngagementStatus::etat_poursuite_mission; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumMeetingEngagementStatus::Decode ()
{
   return asn1PD_EnumMeetingEngagementStatus (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumOperationalStatus                                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumOperationalStatus::ASN1C_EnumOperationalStatus (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumOperationalStatus& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumOperationalStatus (ASN1CTXT* ctxt_p, ASN1T_EnumOperationalStatus value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumOperationalStatus::detruit_totalement: ui = 0; break;
      case EnumOperationalStatus::detruit_tactiquement: ui = 1; break;
      case EnumOperationalStatus::operationnel: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumOperationalStatus::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumOperationalStatus (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumOperationalStatus (ASN1CTXT* ctxt_p, ASN1T_EnumOperationalStatus* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumOperationalStatus::detruit_totalement; break;
      case 1: *pvalue = EnumOperationalStatus::detruit_tactiquement; break;
      case 2: *pvalue = EnumOperationalStatus::operationnel; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumOperationalStatus::Decode ()
{
   return asn1PD_EnumOperationalStatus (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumFireAvailability                                      */
/*                                                            */
/**************************************************************/

ASN1C_EnumFireAvailability::ASN1C_EnumFireAvailability (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumFireAvailability& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumFireAvailability (ASN1CTXT* ctxt_p, ASN1T_EnumFireAvailability value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumFireAvailability::none: ui = 0; break;
      case EnumFireAvailability::pret_au_tir: ui = 1; break;
      case EnumFireAvailability::indisponible: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumFireAvailability::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumFireAvailability (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumFireAvailability (ASN1CTXT* ctxt_p, ASN1T_EnumFireAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumFireAvailability::none; break;
      case 1: *pvalue = EnumFireAvailability::pret_au_tir; break;
      case 2: *pvalue = EnumFireAvailability::indisponible; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumFireAvailability::Decode ()
{
   return asn1PD_EnumFireAvailability (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitCreation                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitCreation::ASN1C_MsgUnitCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode type_pion */

   stat = asn1PE_UnitType (ctxt_p, pvalue->type_pion);
   if (stat != ASN_OK) return stat;

   /* encode nom */

   stat = pe_VisibleString (ctxt_p, pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode pc */

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->pc);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitCreation (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode type_pion */

   stat = asn1PD_UnitType (ctxt_p, &pvalue->type_pion);
   if (stat != ASN_OK) return stat;

   /* decode nom */

   stat = pd_VisibleString (ctxt_p, &pvalue->nom, 0);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode pc */

   stat = pd_bit (ctxt_p, &pvalue->pc);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitCreation::Decode ()
{
   return asn1PD_MsgUnitCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfHumanDotations                                      */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfHumanDotations::ASN1C__SeqOfHumanDotations (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfHumanDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfHumanDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfHumanDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_HumanDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfHumanDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfHumanDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfHumanDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfHumanDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_HumanDotations);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_HumanDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfHumanDotations::Decode ()
{
   return asn1PD__SeqOfHumanDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEquipmentDotations                                  */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEquipmentDotations::ASN1C__SeqOfEquipmentDotations (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEquipmentDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEquipmentDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipmentDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_EquipmentDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfEquipmentDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEquipmentDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEquipmentDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipmentDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EquipmentDotations);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_EquipmentDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfEquipmentDotations::Decode ()
{
   return asn1PD__SeqOfEquipmentDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfResourceDotations                                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfResourceDotations::ASN1C__SeqOfResourceDotations (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfResourceDotations& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfResourceDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfResourceDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_ResourceDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfResourceDotations::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfResourceDotations (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfResourceDotations (ASN1CTXT* ctxt_p, ASN1T__SeqOfResourceDotations* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_ResourceDotations);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_ResourceDotations (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfResourceDotations::Decode ()
{
   return asn1PD__SeqOfResourceDotations (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfLentEquipment                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfLentEquipment::ASN1C__SeqOfLentEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfLentEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfLentEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfLentEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_LentEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfLentEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfLentEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfLentEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfLentEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LentEquipment);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_LentEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfLentEquipment::Decode ()
{
   return asn1PD__SeqOfLentEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfBorrowedEquipment                                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfBorrowedEquipment::ASN1C__SeqOfBorrowedEquipment (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfBorrowedEquipment& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfBorrowedEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfBorrowedEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_BorrowedEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfBorrowedEquipment::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfBorrowedEquipment (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfBorrowedEquipment (ASN1CTXT* ctxt_p, ASN1T__SeqOfBorrowedEquipment* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_BorrowedEquipment);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_BorrowedEquipment (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfBorrowedEquipment::Decode ()
{
   return asn1PD__SeqOfBorrowedEquipment (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitAttributes                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitAttributes::ASN1C_MsgUnitAttributes (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitAttributes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgUnitAttributes* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_personnelPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_materielPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotation_eff_ressourcePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipements_pretesPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipements_empruntesPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.positionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.directionPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.hauteurPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.vitessePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_operationnel_brutPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pions_renforcantPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pion_renforcePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mortPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.neutralisePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mode_furtif_actifPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.embarquePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.transporteurs_disponiblesPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_oldPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_newPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.posture_pourcentagePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_installationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.en_tenue_de_protection_nbcPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.contamine_par_agents_nbcPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_contaminationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.communications_brouilleesPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.silence_radioPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.radar_actifPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pions_transportesPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.pion_transporteurPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.rapport_de_forcePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.combat_de_rencontrePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etat_operationnelPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilite_au_tir_indirectPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.roePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.roe_populationPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fatiguePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.moralPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.experiencePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.renduPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.prisonnierPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.refugie_pris_en_comptePresent);

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode dotation_eff_personnel */

   if (pvalue->m.dotation_eff_personnelPresent) {
      stat = asn1PE__SeqOfHumanDotations (ctxt_p, &pvalue->dotation_eff_personnel);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotation_eff_materiel */

   if (pvalue->m.dotation_eff_materielPresent) {
      stat = asn1PE__SeqOfEquipmentDotations (ctxt_p, &pvalue->dotation_eff_materiel);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotation_eff_ressource */

   if (pvalue->m.dotation_eff_ressourcePresent) {
      stat = asn1PE__SeqOfResourceDotations (ctxt_p, &pvalue->dotation_eff_ressource);
      if (stat != ASN_OK) return stat;
   }

   /* encode equipements_pretes */

   if (pvalue->m.equipements_pretesPresent) {
      stat = asn1PE__SeqOfLentEquipment (ctxt_p, &pvalue->equipements_pretes);
      if (stat != ASN_OK) return stat;
   }

   /* encode equipements_empruntes */

   if (pvalue->m.equipements_empruntesPresent) {
      stat = asn1PE__SeqOfBorrowedEquipment (ctxt_p, &pvalue->equipements_empruntes);
      if (stat != ASN_OK) return stat;
   }

   /* encode position */

   if (pvalue->m.positionPresent) {
      stat = asn1PE_CoordUTM (ctxt_p, pvalue->position);
      if (stat != ASN_OK) return stat;
   }

   /* encode direction */

   if (pvalue->m.directionPresent) {
      stat = asn1PE_Heading (ctxt_p, pvalue->direction);
      if (stat != ASN_OK) return stat;
   }

   /* encode hauteur */

   if (pvalue->m.hauteurPresent) {
      stat = asn1PE_Height (ctxt_p, pvalue->hauteur);
      if (stat != ASN_OK) return stat;
   }

   /* encode vitesse */

   if (pvalue->m.vitessePresent) {
      stat = asn1PE_Speed (ctxt_p, pvalue->vitesse);
      if (stat != ASN_OK) return stat;
   }

   /* encode etat_operationnel_brut */

   if (pvalue->m.etat_operationnel_brutPresent) {
      stat = asn1PE_FreePercentage (ctxt_p, pvalue->etat_operationnel_brut);
      if (stat != ASN_OK) return stat;
   }

   /* encode pions_renforcant */

   if (pvalue->m.pions_renforcantPresent) {
      stat = asn1PE_UnitList (ctxt_p, &pvalue->pions_renforcant);
      if (stat != ASN_OK) return stat;
   }

   /* encode pion_renforce */

   if (pvalue->m.pion_renforcePresent) {
      stat = asn1PE_Unit (ctxt_p, pvalue->pion_renforce);
      if (stat != ASN_OK) return stat;
   }

   /* encode mort */

   if (pvalue->m.mortPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->mort);
      if (stat != ASN_OK) return stat;
   }

   /* encode neutralise */

   if (pvalue->m.neutralisePresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->neutralise);
      if (stat != ASN_OK) return stat;
   }

   /* encode mode_furtif_actif */

   if (pvalue->m.mode_furtif_actifPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->mode_furtif_actif);
      if (stat != ASN_OK) return stat;
   }

   /* encode embarque */

   if (pvalue->m.embarquePresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->embarque);
      if (stat != ASN_OK) return stat;
   }

   /* encode transporteurs_disponibles */

   if (pvalue->m.transporteurs_disponiblesPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->transporteurs_disponibles);
      if (stat != ASN_OK) return stat;
   }

   /* encode posture_old */

   if (pvalue->m.posture_oldPresent) {
      stat = asn1PE_EnumUnitPosture (ctxt_p, pvalue->posture_old);
      if (stat != ASN_OK) return stat;
   }

   /* encode posture_new */

   if (pvalue->m.posture_newPresent) {
      stat = asn1PE_EnumUnitPosture (ctxt_p, pvalue->posture_new);
      if (stat != ASN_OK) return stat;
   }

   /* encode posture_pourcentage */

   if (pvalue->m.posture_pourcentagePresent) {
      stat = asn1PE_Percentage (ctxt_p, pvalue->posture_pourcentage);
      if (stat != ASN_OK) return stat;
   }

   /* encode etat_installation */

   if (pvalue->m.etat_installationPresent) {
      stat = asn1PE_Percentage (ctxt_p, pvalue->etat_installation);
      if (stat != ASN_OK) return stat;
   }

   /* encode en_tenue_de_protection_nbc */

   if (pvalue->m.en_tenue_de_protection_nbcPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->en_tenue_de_protection_nbc);
      if (stat != ASN_OK) return stat;
   }

   /* encode contamine_par_agents_nbc */

   if (pvalue->m.contamine_par_agents_nbcPresent) {
      stat = asn1PE_ListOID (ctxt_p, &pvalue->contamine_par_agents_nbc);
      if (stat != ASN_OK) return stat;
   }

   /* encode etat_contamination */

   if (pvalue->m.etat_contaminationPresent) {
      stat = asn1PE_Percentage (ctxt_p, pvalue->etat_contamination);
      if (stat != ASN_OK) return stat;
   }

   /* encode communications_brouillees */

   if (pvalue->m.communications_brouilleesPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->communications_brouillees);
      if (stat != ASN_OK) return stat;
   }

   /* encode silence_radio */

   if (pvalue->m.silence_radioPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->silence_radio);
      if (stat != ASN_OK) return stat;
   }

   /* encode radar_actif */

   if (pvalue->m.radar_actifPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->radar_actif);
      if (stat != ASN_OK) return stat;
   }

   /* encode pions_transportes */

   if (pvalue->m.pions_transportesPresent) {
      stat = asn1PE_UnitList (ctxt_p, &pvalue->pions_transportes);
      if (stat != ASN_OK) return stat;
   }

   /* encode pion_transporteur */

   if (pvalue->m.pion_transporteurPresent) {
      stat = asn1PE_Unit (ctxt_p, pvalue->pion_transporteur);
      if (stat != ASN_OK) return stat;
   }

   /* encode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      stat = asn1PE_EnumForceRatioStatus (ctxt_p, pvalue->rapport_de_force);
      if (stat != ASN_OK) return stat;
   }

   /* encode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      stat = asn1PE_EnumMeetingEngagementStatus (ctxt_p, pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return stat;
   }

   /* encode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      stat = asn1PE_EnumOperationalStatus (ctxt_p, pvalue->etat_operationnel);
      if (stat != ASN_OK) return stat;
   }

   /* encode disponibilite_au_tir_indirect */

   if (pvalue->m.disponibilite_au_tir_indirectPresent) {
      stat = asn1PE_EnumFireAvailability (ctxt_p, pvalue->disponibilite_au_tir_indirect);
      if (stat != ASN_OK) return stat;
   }

   /* encode roe */

   if (pvalue->m.roePresent) {
      stat = asn1PE_EnumRoe (ctxt_p, pvalue->roe);
      if (stat != ASN_OK) return stat;
   }

   /* encode roe_population */

   if (pvalue->m.roe_populationPresent) {
      stat = asn1PE_EnumPopulationRoe (ctxt_p, pvalue->roe_population);
      if (stat != ASN_OK) return stat;
   }

   /* encode fatigue */

   if (pvalue->m.fatiguePresent) {
      stat = asn1PE_EnumUnitTiredness (ctxt_p, pvalue->fatigue);
      if (stat != ASN_OK) return stat;
   }

   /* encode moral */

   if (pvalue->m.moralPresent) {
      stat = asn1PE_EnumUnitMorale (ctxt_p, pvalue->moral);
      if (stat != ASN_OK) return stat;
   }

   /* encode experience */

   if (pvalue->m.experiencePresent) {
      stat = asn1PE_EnumUnitExperience (ctxt_p, pvalue->experience);
      if (stat != ASN_OK) return stat;
   }

   /* encode rendu */

   if (pvalue->m.renduPresent) {
      stat = asn1PE_Team (ctxt_p, pvalue->rendu);
      if (stat != ASN_OK) return stat;
   }

   /* encode prisonnier */

   if (pvalue->m.prisonnierPresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->prisonnier);
      if (stat != ASN_OK) return stat;
   }

   /* encode refugie_pris_en_compte */

   if (pvalue->m.refugie_pris_en_comptePresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->refugie_pris_en_compte);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgUnitAttributes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitAttributes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitAttributes (ASN1CTXT* ctxt_p, ASN1T_MsgUnitAttributes* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_eff_personnelPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_eff_materielPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotation_eff_ressourcePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.equipements_pretesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.equipements_empruntesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.positionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.directionPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.hauteurPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.vitessePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etat_operationnel_brutPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.pions_renforcantPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.pion_renforcePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.mortPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.neutralisePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.mode_furtif_actifPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.embarquePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.transporteurs_disponiblesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.posture_oldPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.posture_newPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.posture_pourcentagePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etat_installationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.en_tenue_de_protection_nbcPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.contamine_par_agents_nbcPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etat_contaminationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.communications_brouilleesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.silence_radioPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.radar_actifPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.pions_transportesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.pion_transporteurPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.rapport_de_forcePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.combat_de_rencontrePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etat_operationnelPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.disponibilite_au_tir_indirectPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.roePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.roe_populationPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.fatiguePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.moralPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.experiencePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.renduPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.prisonnierPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.refugie_pris_en_comptePresent = optbit;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode dotation_eff_personnel */

   if (pvalue->m.dotation_eff_personnelPresent) {
      stat = asn1PD__SeqOfHumanDotations (ctxt_p, &pvalue->dotation_eff_personnel);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotation_eff_materiel */

   if (pvalue->m.dotation_eff_materielPresent) {
      stat = asn1PD__SeqOfEquipmentDotations (ctxt_p, &pvalue->dotation_eff_materiel);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotation_eff_ressource */

   if (pvalue->m.dotation_eff_ressourcePresent) {
      stat = asn1PD__SeqOfResourceDotations (ctxt_p, &pvalue->dotation_eff_ressource);
      if (stat != ASN_OK) return stat;
   }

   /* decode equipements_pretes */

   if (pvalue->m.equipements_pretesPresent) {
      stat = asn1PD__SeqOfLentEquipment (ctxt_p, &pvalue->equipements_pretes);
      if (stat != ASN_OK) return stat;
   }

   /* decode equipements_empruntes */

   if (pvalue->m.equipements_empruntesPresent) {
      stat = asn1PD__SeqOfBorrowedEquipment (ctxt_p, &pvalue->equipements_empruntes);
      if (stat != ASN_OK) return stat;
   }

   /* decode position */

   if (pvalue->m.positionPresent) {
      stat = asn1PD_CoordUTM (ctxt_p, &pvalue->position);
      if (stat != ASN_OK) return stat;
   }

   /* decode direction */

   if (pvalue->m.directionPresent) {
      stat = asn1PD_Heading (ctxt_p, &pvalue->direction);
      if (stat != ASN_OK) return stat;
   }

   /* decode hauteur */

   if (pvalue->m.hauteurPresent) {
      stat = asn1PD_Height (ctxt_p, &pvalue->hauteur);
      if (stat != ASN_OK) return stat;
   }

   /* decode vitesse */

   if (pvalue->m.vitessePresent) {
      stat = asn1PD_Speed (ctxt_p, &pvalue->vitesse);
      if (stat != ASN_OK) return stat;
   }

   /* decode etat_operationnel_brut */

   if (pvalue->m.etat_operationnel_brutPresent) {
      stat = asn1PD_FreePercentage (ctxt_p, &pvalue->etat_operationnel_brut);
      if (stat != ASN_OK) return stat;
   }

   /* decode pions_renforcant */

   if (pvalue->m.pions_renforcantPresent) {
      stat = asn1PD_UnitList (ctxt_p, &pvalue->pions_renforcant);
      if (stat != ASN_OK) return stat;
   }

   /* decode pion_renforce */

   if (pvalue->m.pion_renforcePresent) {
      stat = asn1PD_Unit (ctxt_p, &pvalue->pion_renforce);
      if (stat != ASN_OK) return stat;
   }

   /* decode mort */

   if (pvalue->m.mortPresent) {
      stat = pd_bit (ctxt_p, &pvalue->mort);
      if (stat != ASN_OK) return stat;
   }

   /* decode neutralise */

   if (pvalue->m.neutralisePresent) {
      stat = pd_bit (ctxt_p, &pvalue->neutralise);
      if (stat != ASN_OK) return stat;
   }

   /* decode mode_furtif_actif */

   if (pvalue->m.mode_furtif_actifPresent) {
      stat = pd_bit (ctxt_p, &pvalue->mode_furtif_actif);
      if (stat != ASN_OK) return stat;
   }

   /* decode embarque */

   if (pvalue->m.embarquePresent) {
      stat = pd_bit (ctxt_p, &pvalue->embarque);
      if (stat != ASN_OK) return stat;
   }

   /* decode transporteurs_disponibles */

   if (pvalue->m.transporteurs_disponiblesPresent) {
      stat = pd_bit (ctxt_p, &pvalue->transporteurs_disponibles);
      if (stat != ASN_OK) return stat;
   }

   /* decode posture_old */

   if (pvalue->m.posture_oldPresent) {
      stat = asn1PD_EnumUnitPosture (ctxt_p, &pvalue->posture_old);
      if (stat != ASN_OK) return stat;
   }

   /* decode posture_new */

   if (pvalue->m.posture_newPresent) {
      stat = asn1PD_EnumUnitPosture (ctxt_p, &pvalue->posture_new);
      if (stat != ASN_OK) return stat;
   }

   /* decode posture_pourcentage */

   if (pvalue->m.posture_pourcentagePresent) {
      stat = asn1PD_Percentage (ctxt_p, &pvalue->posture_pourcentage);
      if (stat != ASN_OK) return stat;
   }

   /* decode etat_installation */

   if (pvalue->m.etat_installationPresent) {
      stat = asn1PD_Percentage (ctxt_p, &pvalue->etat_installation);
      if (stat != ASN_OK) return stat;
   }

   /* decode en_tenue_de_protection_nbc */

   if (pvalue->m.en_tenue_de_protection_nbcPresent) {
      stat = pd_bit (ctxt_p, &pvalue->en_tenue_de_protection_nbc);
      if (stat != ASN_OK) return stat;
   }

   /* decode contamine_par_agents_nbc */

   if (pvalue->m.contamine_par_agents_nbcPresent) {
      stat = asn1PD_ListOID (ctxt_p, &pvalue->contamine_par_agents_nbc);
      if (stat != ASN_OK) return stat;
   }

   /* decode etat_contamination */

   if (pvalue->m.etat_contaminationPresent) {
      stat = asn1PD_Percentage (ctxt_p, &pvalue->etat_contamination);
      if (stat != ASN_OK) return stat;
   }

   /* decode communications_brouillees */

   if (pvalue->m.communications_brouilleesPresent) {
      stat = pd_bit (ctxt_p, &pvalue->communications_brouillees);
      if (stat != ASN_OK) return stat;
   }

   /* decode silence_radio */

   if (pvalue->m.silence_radioPresent) {
      stat = pd_bit (ctxt_p, &pvalue->silence_radio);
      if (stat != ASN_OK) return stat;
   }

   /* decode radar_actif */

   if (pvalue->m.radar_actifPresent) {
      stat = pd_bit (ctxt_p, &pvalue->radar_actif);
      if (stat != ASN_OK) return stat;
   }

   /* decode pions_transportes */

   if (pvalue->m.pions_transportesPresent) {
      stat = asn1PD_UnitList (ctxt_p, &pvalue->pions_transportes);
      if (stat != ASN_OK) return stat;
   }

   /* decode pion_transporteur */

   if (pvalue->m.pion_transporteurPresent) {
      stat = asn1PD_Unit (ctxt_p, &pvalue->pion_transporteur);
      if (stat != ASN_OK) return stat;
   }

   /* decode rapport_de_force */

   if (pvalue->m.rapport_de_forcePresent) {
      stat = asn1PD_EnumForceRatioStatus (ctxt_p, &pvalue->rapport_de_force);
      if (stat != ASN_OK) return stat;
   }

   /* decode combat_de_rencontre */

   if (pvalue->m.combat_de_rencontrePresent) {
      stat = asn1PD_EnumMeetingEngagementStatus (ctxt_p, &pvalue->combat_de_rencontre);
      if (stat != ASN_OK) return stat;
   }

   /* decode etat_operationnel */

   if (pvalue->m.etat_operationnelPresent) {
      stat = asn1PD_EnumOperationalStatus (ctxt_p, &pvalue->etat_operationnel);
      if (stat != ASN_OK) return stat;
   }

   /* decode disponibilite_au_tir_indirect */

   if (pvalue->m.disponibilite_au_tir_indirectPresent) {
      stat = asn1PD_EnumFireAvailability (ctxt_p, &pvalue->disponibilite_au_tir_indirect);
      if (stat != ASN_OK) return stat;
   }

   /* decode roe */

   if (pvalue->m.roePresent) {
      stat = asn1PD_EnumRoe (ctxt_p, &pvalue->roe);
      if (stat != ASN_OK) return stat;
   }

   /* decode roe_population */

   if (pvalue->m.roe_populationPresent) {
      stat = asn1PD_EnumPopulationRoe (ctxt_p, &pvalue->roe_population);
      if (stat != ASN_OK) return stat;
   }

   /* decode fatigue */

   if (pvalue->m.fatiguePresent) {
      stat = asn1PD_EnumUnitTiredness (ctxt_p, &pvalue->fatigue);
      if (stat != ASN_OK) return stat;
   }

   /* decode moral */

   if (pvalue->m.moralPresent) {
      stat = asn1PD_EnumUnitMorale (ctxt_p, &pvalue->moral);
      if (stat != ASN_OK) return stat;
   }

   /* decode experience */

   if (pvalue->m.experiencePresent) {
      stat = asn1PD_EnumUnitExperience (ctxt_p, &pvalue->experience);
      if (stat != ASN_OK) return stat;
   }

   /* decode rendu */

   if (pvalue->m.renduPresent) {
      stat = asn1PD_Team (ctxt_p, &pvalue->rendu);
      if (stat != ASN_OK) return stat;
   }

   /* decode prisonnier */

   if (pvalue->m.prisonnierPresent) {
      stat = pd_bit (ctxt_p, &pvalue->prisonnier);
      if (stat != ASN_OK) return stat;
   }

   /* decode refugie_pris_en_compte */

   if (pvalue->m.refugie_pris_en_comptePresent) {
      stat = pd_bit (ctxt_p, &pvalue->refugie_pris_en_compte);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgUnitAttributes::Decode ()
{
   return asn1PD_MsgUnitAttributes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitEnvironmentType                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitEnvironmentType::ASN1C_MsgUnitEnvironmentType (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitEnvironmentType& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitEnvironmentType (ASN1CTXT* ctxt_p, ASN1T_MsgUnitEnvironmentType* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode area */

   stat = pe_ConsInteger (ctxt_p, pvalue->area, 0, 255);
   if (stat != ASN_OK) return stat;


   /* encode left */

   stat = pe_ConsInteger (ctxt_p, pvalue->left, 0, 255);
   if (stat != ASN_OK) return stat;


   /* encode right */

   stat = pe_ConsInteger (ctxt_p, pvalue->right, 0, 255);
   if (stat != ASN_OK) return stat;


   /* encode linear */

   stat = pe_ConsInteger (ctxt_p, pvalue->linear, 0, 65535);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitEnvironmentType::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitEnvironmentType (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitEnvironmentType (ASN1CTXT* ctxt_p, ASN1T_MsgUnitEnvironmentType* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode area */

   stat = pd_ConsInteger (ctxt_p, &pvalue->area, 0, 255);
   if (stat != ASN_OK) return stat;

   /* decode left */

   stat = pd_ConsInteger (ctxt_p, &pvalue->left, 0, 255);
   if (stat != ASN_OK) return stat;

   /* decode right */

   stat = pd_ConsInteger (ctxt_p, &pvalue->right, 0, 255);
   if (stat != ASN_OK) return stat;

   /* decode linear */

   stat = pd_ConsInteger (ctxt_p, &pvalue->linear, 0, 65535);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitEnvironmentType::Decode ()
{
   return asn1PD_MsgUnitEnvironmentType (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitDestruction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitDestruction::ASN1C_MsgUnitDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitDestruction value)
{
   int stat = ASN_OK;

   stat = asn1PE_OID (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgUnitDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitDestruction (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitDestruction* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_OID (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitDestruction::Decode ()
{
   return asn1PD_MsgUnitDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionRecoverTransporters                            */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRecoverTransporters::ASN1C_MagicActionRecoverTransporters (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRecoverTransporters (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionRecoverTransporters::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRecoverTransporters (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRecoverTransporters (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionRecoverTransporters::Decode ()
{
   return asn1PD_MagicActionRecoverTransporters (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionSurrender                                      */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionSurrender::ASN1C_MagicActionSurrender (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionSurrender& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionSurrender (ASN1CTXT* ctxt_p, ASN1T_MagicActionSurrender value)
{
   int stat = ASN_OK;

   stat = asn1PE_Team (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionSurrender::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionSurrender (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionSurrender (ASN1CTXT* ctxt_p, ASN1T_MagicActionSurrender* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_Team (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionSurrender::Decode ()
{
   return asn1PD_MagicActionSurrender (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionCancelRendition                                */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionCancelRendition::ASN1C_MagicActionCancelRendition (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionCancelRendition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionCancelRendition::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionCancelRendition (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionCancelRendition (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionCancelRendition::Decode ()
{
   return asn1PD_MagicActionCancelRendition (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionMoveTo                                         */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionMoveTo::ASN1C_MagicActionMoveTo (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionMoveTo& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionMoveTo value)
{
   int stat = ASN_OK;

   stat = asn1PE_CoordUTM (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MagicActionMoveTo::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionMoveTo (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionMoveTo (ASN1CTXT* ctxt_p, ASN1T_MagicActionMoveTo* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_CoordUTM (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MagicActionMoveTo::Decode ()
{
   return asn1PD_MagicActionMoveTo (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionTotalDestruction                               */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionTotalDestruction::ASN1C_MagicActionTotalDestruction (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionTotalDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionTotalDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionTotalDestruction (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionTotalDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionTotalDestruction::Decode ()
{
   return asn1PD_MagicActionTotalDestruction (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionComponentDestruction                           */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionComponentDestruction::ASN1C_MagicActionComponentDestruction (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionComponentDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionComponentDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionComponentDestruction (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionComponentDestruction (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionComponentDestruction::Decode ()
{
   return asn1PD_MagicActionComponentDestruction (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionTotalRecovery                                  */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionTotalRecovery::ASN1C_MagicActionTotalRecovery (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionTotalRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionTotalRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionTotalRecovery (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionTotalRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionTotalRecovery::Decode ()
{
   return asn1PD_MagicActionTotalRecovery (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionHumanRecovery                                  */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionHumanRecovery::ASN1C_MagicActionHumanRecovery (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionHumanRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionHumanRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionHumanRecovery (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionHumanRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionHumanRecovery::Decode ()
{
   return asn1PD_MagicActionHumanRecovery (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionEquipmentRecovery                              */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionEquipmentRecovery::ASN1C_MagicActionEquipmentRecovery (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionEquipmentRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionEquipmentRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionEquipmentRecovery (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionEquipmentRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionEquipmentRecovery::Decode ()
{
   return asn1PD_MagicActionEquipmentRecovery (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionRessourcesRecovery                             */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionRessourcesRecovery::ASN1C_MagicActionRessourcesRecovery (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_MagicActionRessourcesRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_MagicActionRessourcesRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionRessourcesRecovery (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_MagicActionRessourcesRecovery (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_MagicActionRessourcesRecovery::Decode ()
{
   return asn1PD_MagicActionRessourcesRecovery (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MagicActionChangeHumanFactors                             */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionChangeHumanFactors::ASN1C_MagicActionChangeHumanFactors (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionChangeHumanFactors& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionChangeHumanFactors (ASN1CTXT* ctxt_p, ASN1T_MagicActionChangeHumanFactors* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.fatiguePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.moralPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.experiencePresent);

   /* encode fatigue */

   if (pvalue->m.fatiguePresent) {
      stat = asn1PE_EnumUnitTiredness (ctxt_p, pvalue->fatigue);
      if (stat != ASN_OK) return stat;
   }

   /* encode moral */

   if (pvalue->m.moralPresent) {
      stat = asn1PE_EnumUnitMorale (ctxt_p, pvalue->moral);
      if (stat != ASN_OK) return stat;
   }

   /* encode experience */

   if (pvalue->m.experiencePresent) {
      stat = asn1PE_EnumUnitExperience (ctxt_p, pvalue->experience);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MagicActionChangeHumanFactors::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionChangeHumanFactors (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionChangeHumanFactors (ASN1CTXT* ctxt_p, ASN1T_MagicActionChangeHumanFactors* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.fatiguePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.moralPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.experiencePresent = optbit;

   /* decode fatigue */

   if (pvalue->m.fatiguePresent) {
      stat = asn1PD_EnumUnitTiredness (ctxt_p, &pvalue->fatigue);
      if (stat != ASN_OK) return stat;
   }

   /* decode moral */

   if (pvalue->m.moralPresent) {
      stat = asn1PD_EnumUnitMorale (ctxt_p, &pvalue->moral);
      if (stat != ASN_OK) return stat;
   }

   /* decode experience */

   if (pvalue->m.experiencePresent) {
      stat = asn1PD_EnumUnitExperience (ctxt_p, &pvalue->experience);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MagicActionChangeHumanFactors::Decode ()
{
   return asn1PD_MagicActionChangeHumanFactors (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationRecovery                                          */
/*                                                            */
/**************************************************************/

ASN1C_DotationRecovery::ASN1C_DotationRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationRecovery (ASN1CTXT* ctxt_p, ASN1T_DotationRecovery* pvalue)
{
   int stat = ASN_OK;

   /* encode famille_dotation */

   stat = asn1PE_EnumDotationFamily (ctxt_p, pvalue->famille_dotation);
   if (stat != ASN_OK) return stat;

   /* encode pourcentage */

   stat = asn1PE_Percentage (ctxt_p, pvalue->pourcentage);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DotationRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationRecovery (ASN1CTXT* ctxt_p, ASN1T_DotationRecovery* pvalue)
{
   int stat = ASN_OK;

   /* decode famille_dotation */

   stat = asn1PD_EnumDotationFamily (ctxt_p, &pvalue->famille_dotation);
   if (stat != ASN_OK) return stat;

   /* decode pourcentage */

   stat = asn1PD_Percentage (ctxt_p, &pvalue->pourcentage);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_DotationRecovery::Decode ()
{
   return asn1PD_DotationRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AmmunitionDotationRecovery                                */
/*                                                            */
/**************************************************************/

ASN1C_AmmunitionDotationRecovery::ASN1C_AmmunitionDotationRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_AmmunitionDotationRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AmmunitionDotationRecovery (ASN1CTXT* ctxt_p, ASN1T_AmmunitionDotationRecovery* pvalue)
{
   int stat = ASN_OK;

   /* encode famille_munition */

   stat = asn1PE_EnumAmmunitionFamily (ctxt_p, pvalue->famille_munition);
   if (stat != ASN_OK) return stat;

   /* encode pourcentage */

   stat = asn1PE_Percentage (ctxt_p, pvalue->pourcentage);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_AmmunitionDotationRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AmmunitionDotationRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_AmmunitionDotationRecovery (ASN1CTXT* ctxt_p, ASN1T_AmmunitionDotationRecovery* pvalue)
{
   int stat = ASN_OK;

   /* decode famille_munition */

   stat = asn1PD_EnumAmmunitionFamily (ctxt_p, &pvalue->famille_munition);
   if (stat != ASN_OK) return stat;

   /* decode pourcentage */

   stat = asn1PD_Percentage (ctxt_p, &pvalue->pourcentage);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_AmmunitionDotationRecovery::Decode ()
{
   return asn1PD_AmmunitionDotationRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EquipmentRecovery                                         */
/*                                                            */
/**************************************************************/

ASN1C_EquipmentRecovery::ASN1C_EquipmentRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_EquipmentRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EquipmentRecovery (ASN1CTXT* ctxt_p, ASN1T_EquipmentRecovery* pvalue)
{
   int stat = ASN_OK;

   /* encode type_equipement */

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* encode nombre_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_EquipmentRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EquipmentRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_EquipmentRecovery (ASN1CTXT* ctxt_p, ASN1T_EquipmentRecovery* pvalue)
{
   int stat = ASN_OK;

   /* decode type_equipement */

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* decode nombre_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_EquipmentRecovery::Decode ()
{
   return asn1PD_EquipmentRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  HumanRecovery                                             */
/*                                                            */
/**************************************************************/

ASN1C_HumanRecovery::ASN1C_HumanRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_HumanRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_HumanRecovery (ASN1CTXT* ctxt_p, ASN1T_HumanRecovery* pvalue)
{
   int stat = ASN_OK;

   /* encode rang */

   stat = asn1PE_EnumHumanRank (ctxt_p, pvalue->rang);
   if (stat != ASN_OK) return stat;

   /* encode nombre_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nombre_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_HumanRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_HumanRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_HumanRecovery (ASN1CTXT* ctxt_p, ASN1T_HumanRecovery* pvalue)
{
   int stat = ASN_OK;

   /* decode rang */

   stat = asn1PD_EnumHumanRank (ctxt_p, &pvalue->rang);
   if (stat != ASN_OK) return stat;

   /* decode nombre_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nombre_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_HumanRecovery::Decode ()
{
   return asn1PD_HumanRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  StockRecovery                                             */
/*                                                            */
/**************************************************************/

ASN1C_StockRecovery::ASN1C_StockRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_StockRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_StockRecovery (ASN1CTXT* ctxt_p, ASN1T_StockRecovery* pvalue)
{
   int stat = ASN_OK;

   /* encode ressource_id */

   stat = asn1PE_DotationType (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* encode quantite_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_StockRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_StockRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_StockRecovery (ASN1CTXT* ctxt_p, ASN1T_StockRecovery* pvalue)
{
   int stat = ASN_OK;

   /* decode ressource_id */

   stat = asn1PD_DotationType (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* decode quantite_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_StockRecovery::Decode ()
{
   return asn1PD_StockRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfEquipmentRecovery                                   */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfEquipmentRecovery::ASN1C__SeqOfEquipmentRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfEquipmentRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfEquipmentRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipmentRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_EquipmentRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfEquipmentRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfEquipmentRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfEquipmentRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfEquipmentRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_EquipmentRecovery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_EquipmentRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfEquipmentRecovery::Decode ()
{
   return asn1PD__SeqOfEquipmentRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfHumanRecovery                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfHumanRecovery::ASN1C__SeqOfHumanRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfHumanRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfHumanRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfHumanRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_HumanRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfHumanRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfHumanRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfHumanRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfHumanRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_HumanRecovery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_HumanRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfHumanRecovery::Decode ()
{
   return asn1PD__SeqOfHumanRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationRecovery                                    */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationRecovery::ASN1C__SeqOfDotationRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_DotationRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfDotationRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationRecovery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_DotationRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfDotationRecovery::Decode ()
{
   return asn1PD__SeqOfDotationRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfAmmunitionDotationRecovery                          */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfAmmunitionDotationRecovery::ASN1C__SeqOfAmmunitionDotationRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfAmmunitionDotationRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfAmmunitionDotationRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfAmmunitionDotationRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_AmmunitionDotationRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfAmmunitionDotationRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfAmmunitionDotationRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfAmmunitionDotationRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfAmmunitionDotationRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_AmmunitionDotationRecovery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_AmmunitionDotationRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfAmmunitionDotationRecovery::Decode ()
{
   return asn1PD__SeqOfAmmunitionDotationRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfStockRecovery                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfStockRecovery::ASN1C__SeqOfStockRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfStockRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfStockRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfStockRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_StockRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfStockRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfStockRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfStockRecovery (ASN1CTXT* ctxt_p, ASN1T__SeqOfStockRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_StockRecovery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_StockRecovery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfStockRecovery::Decode ()
{
   return asn1PD__SeqOfStockRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MagicActionPartialRecovery                                */
/*                                                            */
/**************************************************************/

ASN1C_MagicActionPartialRecovery::ASN1C_MagicActionPartialRecovery (
   ASN1MessageBuffer& msgBuf, ASN1T_MagicActionPartialRecovery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MagicActionPartialRecovery (ASN1CTXT* ctxt_p, ASN1T_MagicActionPartialRecovery* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.equipementsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.personnelsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotationsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.munitionsPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.stocksPresent);

   /* encode equipements */

   if (pvalue->m.equipementsPresent) {
      stat = asn1PE__SeqOfEquipmentRecovery (ctxt_p, &pvalue->equipements);
      if (stat != ASN_OK) return stat;
   }

   /* encode personnels */

   if (pvalue->m.personnelsPresent) {
      stat = asn1PE__SeqOfHumanRecovery (ctxt_p, &pvalue->personnels);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotations */

   if (pvalue->m.dotationsPresent) {
      stat = asn1PE__SeqOfDotationRecovery (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return stat;
   }

   /* encode munitions */

   if (pvalue->m.munitionsPresent) {
      stat = asn1PE__SeqOfAmmunitionDotationRecovery (ctxt_p, &pvalue->munitions);
      if (stat != ASN_OK) return stat;
   }

   /* encode stocks */

   if (pvalue->m.stocksPresent) {
      stat = asn1PE__SeqOfStockRecovery (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MagicActionPartialRecovery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MagicActionPartialRecovery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MagicActionPartialRecovery (ASN1CTXT* ctxt_p, ASN1T_MagicActionPartialRecovery* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.equipementsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.personnelsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotationsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.munitionsPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.stocksPresent = optbit;

   /* decode equipements */

   if (pvalue->m.equipementsPresent) {
      stat = asn1PD__SeqOfEquipmentRecovery (ctxt_p, &pvalue->equipements);
      if (stat != ASN_OK) return stat;
   }

   /* decode personnels */

   if (pvalue->m.personnelsPresent) {
      stat = asn1PD__SeqOfHumanRecovery (ctxt_p, &pvalue->personnels);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotations */

   if (pvalue->m.dotationsPresent) {
      stat = asn1PD__SeqOfDotationRecovery (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return stat;
   }

   /* decode munitions */

   if (pvalue->m.munitionsPresent) {
      stat = asn1PD__SeqOfAmmunitionDotationRecovery (ctxt_p, &pvalue->munitions);
      if (stat != ASN_OK) return stat;
   }

   /* decode stocks */

   if (pvalue->m.stocksPresent) {
      stat = asn1PD__SeqOfStockRecovery (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MagicActionPartialRecovery::Decode ()
{
   return asn1PD_MagicActionPartialRecovery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicAction_action                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicAction_action::ASN1C_MsgUnitMagicAction_action (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicAction_action& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction_action* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 11);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* move_to */
      case 1:
         stat = asn1PE_MagicActionMoveTo (ctxt_p, *pvalue->u.move_to);
         if (stat != ASN_OK) return stat;
         break;

      /* recompletement_total */
      case 2:
         stat = asn1PE_MagicActionTotalRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* recompletement_partiel */
      case 3:
         stat = asn1PE_MagicActionPartialRecovery (ctxt_p, pvalue->u.recompletement_partiel);
         if (stat != ASN_OK) return stat;
         break;

      /* recompletement_personnel */
      case 4:
         stat = asn1PE_MagicActionHumanRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* recompletement_equipement */
      case 5:
         stat = asn1PE_MagicActionEquipmentRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* recompletement_ressources */
      case 6:
         stat = asn1PE_MagicActionRessourcesRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* change_facteurs_humains */
      case 7:
         stat = asn1PE_MagicActionChangeHumanFactors (ctxt_p, pvalue->u.change_facteurs_humains);
         if (stat != ASN_OK) return stat;
         break;

      /* destruction_totale */
      case 8:
         stat = asn1PE_MagicActionTotalDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* destruction_composante */
      case 9:
         stat = asn1PE_MagicActionComponentDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* se_rendre */
      case 10:
         stat = asn1PE_MagicActionSurrender (ctxt_p, pvalue->u.se_rendre);
         if (stat != ASN_OK) return stat;
         break;

      /* annuler_reddition */
      case 11:
         stat = asn1PE_MagicActionCancelRendition (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      /* recuperer_transporteurs */
      case 12:
         stat = asn1PE_MagicActionRecoverTransporters (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgUnitMagicAction_action::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicAction_action (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicAction_action (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction_action* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 11);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* move_to */
      case 0:
         pvalue->u.move_to = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionMoveTo);

         stat = asn1PD_MagicActionMoveTo (ctxt_p, pvalue->u.move_to);
         if (stat != ASN_OK) return stat;

         break;

      /* recompletement_total */
      case 1:
         stat = asn1PD_MagicActionTotalRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* recompletement_partiel */
      case 2:
         pvalue->u.recompletement_partiel = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionPartialRecovery);

         stat = asn1PD_MagicActionPartialRecovery (ctxt_p, pvalue->u.recompletement_partiel);
         if (stat != ASN_OK) return stat;

         break;

      /* recompletement_personnel */
      case 3:
         stat = asn1PD_MagicActionHumanRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* recompletement_equipement */
      case 4:
         stat = asn1PD_MagicActionEquipmentRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* recompletement_ressources */
      case 5:
         stat = asn1PD_MagicActionRessourcesRecovery (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* change_facteurs_humains */
      case 6:
         pvalue->u.change_facteurs_humains = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MagicActionChangeHumanFactors);

         stat = asn1PD_MagicActionChangeHumanFactors (ctxt_p, pvalue->u.change_facteurs_humains);
         if (stat != ASN_OK) return stat;

         break;

      /* destruction_totale */
      case 7:
         stat = asn1PD_MagicActionTotalDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* destruction_composante */
      case 8:
         stat = asn1PD_MagicActionComponentDestruction (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* se_rendre */
      case 9:
         stat = asn1PD_MagicActionSurrender (ctxt_p, &pvalue->u.se_rendre);
         if (stat != ASN_OK) return stat;

         break;

      /* annuler_reddition */
      case 10:
         stat = asn1PD_MagicActionCancelRendition (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      /* recuperer_transporteurs */
      case 11:
         stat = asn1PD_MagicActionRecoverTransporters (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgUnitMagicAction_action::Decode ()
{
   return asn1PD_MsgUnitMagicAction_action (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicAction                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicAction::ASN1C_MsgUnitMagicAction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicAction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode action */

   stat = asn1PE_MsgUnitMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitMagicAction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicAction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicAction (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicAction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode action */

   stat = asn1PD_MsgUnitMagicAction_action (ctxt_p, &pvalue->action);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitMagicAction::Decode ()
{
   return asn1PD_MsgUnitMagicAction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumUnitErrorCode                                         */
/*                                                            */
/**************************************************************/

ASN1C_EnumUnitErrorCode::ASN1C_EnumUnitErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumUnitErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumUnitErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumUnitErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumUnitErrorCode::no_error: ui = 0; break;
      case EnumUnitErrorCode::error_invalid_unit: ui = 1; break;
      case EnumUnitErrorCode::error_automate_embraye: ui = 2; break;
      case EnumUnitErrorCode::error_invalid_attribute: ui = 3; break;
      case EnumUnitErrorCode::error_unit_surrendered: ui = 4; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 4);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumUnitErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumUnitErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumUnitErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumUnitErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 4);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumUnitErrorCode::no_error; break;
      case 1: *pvalue = EnumUnitErrorCode::error_invalid_unit; break;
      case 2: *pvalue = EnumUnitErrorCode::error_automate_embraye; break;
      case 3: *pvalue = EnumUnitErrorCode::error_invalid_attribute; break;
      case 4: *pvalue = EnumUnitErrorCode::error_unit_surrendered; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumUnitErrorCode::Decode ()
{
   return asn1PD_EnumUnitErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitMagicActionAck                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitMagicActionAck::ASN1C_MsgUnitMagicActionAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitMagicActionAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode error_code */

   stat = asn1PE_EnumUnitErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitMagicActionAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitMagicActionAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitMagicActionAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitMagicActionAck* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode error_code */

   stat = asn1PD_EnumUnitErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitMagicActionAck::Decode ()
{
   return asn1PD_MsgUnitMagicActionAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitCreationRequest                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitCreationRequest::ASN1C_MsgUnitCreationRequest (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitCreationRequest& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* encode type_pion */

   stat = asn1PE_UnitType (ctxt_p, pvalue->type_pion);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode position */

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->position);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitCreationRequest::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitCreationRequest (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitCreationRequest (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreationRequest* pvalue)
{
   int stat = ASN_OK;

   /* decode type_pion */

   stat = asn1PD_UnitType (ctxt_p, &pvalue->type_pion);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode position */

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->position);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitCreationRequest::Decode ()
{
   return asn1PD_MsgUnitCreationRequest (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitCreationRequestAck                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitCreationRequestAck::ASN1C_MsgUnitCreationRequestAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitCreationRequestAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreationRequestAck value)
{
   int stat = ASN_OK;

   stat = asn1PE_EnumUnitErrorCode (ctxt_p, value);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgUnitCreationRequestAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitCreationRequestAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitCreationRequestAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitCreationRequestAck* pvalue)
{
   int stat = ASN_OK;

   stat = asn1PD_EnumUnitErrorCode (ctxt_p, pvalue);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitCreationRequestAck::Decode ()
{
   return asn1PD_MsgUnitCreationRequestAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitPathFind                                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitPathFind::ASN1C_MsgUnitPathFind (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitPathFind& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitPathFind (ASN1CTXT* ctxt_p, ASN1T_MsgUnitPathFind* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_OID (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode itineraire */

   stat = asn1PE_Path (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitPathFind::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitPathFind (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitPathFind (ASN1CTXT* ctxt_p, ASN1T_MsgUnitPathFind* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode itineraire */

   stat = asn1PD_Path (ctxt_p, &pvalue->itineraire);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitPathFind::Decode ()
{
   return asn1PD_MsgUnitPathFind (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitChangeSuperiorAck                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitChangeSuperiorAck::ASN1C_MsgUnitChangeSuperiorAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitChangeSuperiorAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitChangeSuperiorAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitChangeSuperiorAck* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode error_code */

   stat = asn1PE_EnumChangeHierarchyErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitChangeSuperiorAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitChangeSuperiorAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitChangeSuperiorAck (ASN1CTXT* ctxt_p, ASN1T_MsgUnitChangeSuperiorAck* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode error_code */

   stat = asn1PD_EnumChangeHierarchyErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitChangeSuperiorAck::Decode ()
{
   return asn1PD_MsgUnitChangeSuperiorAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitChangeSuperior                                     */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitChangeSuperior::ASN1C_MsgUnitChangeSuperior (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitChangeSuperior& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitChangeSuperior (ASN1CTXT* ctxt_p, ASN1T_MsgUnitChangeSuperior* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitChangeSuperior::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitChangeSuperior (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitChangeSuperior (ASN1CTXT* ctxt_p, ASN1T_MsgUnitChangeSuperior* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitChangeSuperior::Decode ()
{
   return asn1PD_MsgUnitChangeSuperior (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfHeading                                             */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfHeading::ASN1C__SeqOfHeading (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfHeading& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfHeading (ASN1CTXT* ctxt_p, ASN1T__SeqOfHeading* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_Heading (ctxt_p, pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfHeading::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfHeading (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfHeading (ASN1CTXT* ctxt_p, ASN1T__SeqOfHeading* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_Heading);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_Heading (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfHeading::Decode ()
{
   return asn1PD__SeqOfHeading (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  VisionCone                                                */
/*                                                            */
/**************************************************************/

ASN1C_VisionCone::ASN1C_VisionCone (
   ASN1MessageBuffer& msgBuf, ASN1T_VisionCone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_VisionCone (ASN1CTXT* ctxt_p, ASN1T_VisionCone* pvalue)
{
   int stat = ASN_OK;

   /* encode origin */

   stat = asn1PE_CoordUTM (ctxt_p, pvalue->origin);
   if (stat != ASN_OK) return stat;

   /* encode height */

   stat = asn1PE_Height (ctxt_p, pvalue->height);
   if (stat != ASN_OK) return stat;

   /* encode sensor */

   stat = pe_VisibleString (ctxt_p, pvalue->sensor, 0);
   if (stat != ASN_OK) return stat;

   /* encode directions */

   stat = asn1PE__SeqOfHeading (ctxt_p, &pvalue->directions);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_VisionCone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_VisionCone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_VisionCone (ASN1CTXT* ctxt_p, ASN1T_VisionCone* pvalue)
{
   int stat = ASN_OK;

   /* decode origin */

   stat = asn1PD_CoordUTM (ctxt_p, &pvalue->origin);
   if (stat != ASN_OK) return stat;

   /* decode height */

   stat = asn1PD_Height (ctxt_p, &pvalue->height);
   if (stat != ASN_OK) return stat;

   /* decode sensor */

   stat = pd_VisibleString (ctxt_p, &pvalue->sensor, 0);
   if (stat != ASN_OK) return stat;

   /* decode directions */

   stat = asn1PD__SeqOfHeading (ctxt_p, &pvalue->directions);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_VisionCone::Decode ()
{
   return asn1PD_VisionCone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfVisionCone                                          */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfVisionCone::ASN1C__SeqOfVisionCone (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfVisionCone& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfVisionCone (ASN1CTXT* ctxt_p, ASN1T__SeqOfVisionCone* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_VisionCone (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfVisionCone::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfVisionCone (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfVisionCone (ASN1CTXT* ctxt_p, ASN1T__SeqOfVisionCone* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_VisionCone);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_VisionCone (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfVisionCone::Decode ()
{
   return asn1PD__SeqOfVisionCone (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitVisionCones                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitVisionCones::ASN1C_MsgUnitVisionCones (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitVisionCones& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitVisionCones (ASN1CTXT* ctxt_p, ASN1T_MsgUnitVisionCones* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode cones */

   stat = asn1PE__SeqOfVisionCone (ctxt_p, &pvalue->cones);
   if (stat != ASN_OK) return stat;

   /* encode elongation */

   stat = pe_Real (ctxt_p, pvalue->elongation);if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitVisionCones::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitVisionCones (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitVisionCones (ASN1CTXT* ctxt_p, ASN1T_MsgUnitVisionCones* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode cones */

   stat = asn1PD__SeqOfVisionCone (ctxt_p, &pvalue->cones);
   if (stat != ASN_OK) return stat;

   /* decode elongation */

   stat = pd_Real (ctxt_p, &pvalue->elongation);if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitVisionCones::Decode ()
{
   return asn1PD_MsgUnitVisionCones (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgUnitDetection                                          */
/*                                                            */
/**************************************************************/

ASN1C_MsgUnitDetection::ASN1C_MsgUnitDetection (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgUnitDetection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgUnitDetection (ASN1CTXT* ctxt_p, ASN1T_MsgUnitDetection* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode detected_unit_oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->detected_unit_oid);
   if (stat != ASN_OK) return stat;

   /* encode current_visibility */

   stat = asn1PE_EnumUnitVisibility (ctxt_p, pvalue->current_visibility);
   if (stat != ASN_OK) return stat;

   /* encode max_visibility */

   stat = asn1PE_EnumUnitVisibility (ctxt_p, pvalue->max_visibility);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgUnitDetection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgUnitDetection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgUnitDetection (ASN1CTXT* ctxt_p, ASN1T_MsgUnitDetection* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode detected_unit_oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->detected_unit_oid);
   if (stat != ASN_OK) return stat;

   /* decode current_visibility */

   stat = asn1PD_EnumUnitVisibility (ctxt_p, &pvalue->current_visibility);
   if (stat != ASN_OK) return stat;

   /* decode max_visibility */

   stat = asn1PD_EnumUnitVisibility (ctxt_p, &pvalue->max_visibility);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgUnitDetection::Decode ()
{
   return asn1PD_MsgUnitDetection (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectDetection                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectDetection::ASN1C_MsgObjectDetection (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectDetection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectDetection (ASN1CTXT* ctxt_p, ASN1T_MsgObjectDetection* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode object_oid */

   stat = asn1PE_OID (ctxt_p, pvalue->object_oid);
   if (stat != ASN_OK) return stat;

   /* encode visibility */

   stat = asn1PE_EnumUnitVisibility (ctxt_p, pvalue->visibility);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgObjectDetection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectDetection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectDetection (ASN1CTXT* ctxt_p, ASN1T_MsgObjectDetection* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode object_oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->object_oid);
   if (stat != ASN_OK) return stat;

   /* decode visibility */

   stat = asn1PD_EnumUnitVisibility (ctxt_p, &pvalue->visibility);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgObjectDetection::Decode ()
{
   return asn1PD_MsgObjectDetection (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationConcentrationDetection                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationConcentrationDetection::ASN1C_MsgPopulationConcentrationDetection (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationConcentrationDetection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationConcentrationDetection (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDetection* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode population_oid */

   stat = asn1PE_OID (ctxt_p, pvalue->population_oid);
   if (stat != ASN_OK) return stat;

   /* encode concentration_oid */

   stat = asn1PE_OID (ctxt_p, pvalue->concentration_oid);
   if (stat != ASN_OK) return stat;

   /* encode visibility */

   stat = asn1PE_EnumUnitVisibility (ctxt_p, pvalue->visibility);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationConcentrationDetection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationConcentrationDetection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationConcentrationDetection (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationConcentrationDetection* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode population_oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->population_oid);
   if (stat != ASN_OK) return stat;

   /* decode concentration_oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->concentration_oid);
   if (stat != ASN_OK) return stat;

   /* decode visibility */

   stat = asn1PD_EnumUnitVisibility (ctxt_p, &pvalue->visibility);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationConcentrationDetection::Decode ()
{
   return asn1PD_MsgPopulationConcentrationDetection (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgPopulationFlowDetection                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgPopulationFlowDetection::ASN1C_MsgPopulationFlowDetection (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgPopulationFlowDetection& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgPopulationFlowDetection (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowDetection* pvalue)
{
   int stat = ASN_OK;

   /* encode oid */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* encode population_oid */

   stat = asn1PE_OID (ctxt_p, pvalue->population_oid);
   if (stat != ASN_OK) return stat;

   /* encode flow_oid */

   stat = asn1PE_OID (ctxt_p, pvalue->flow_oid);
   if (stat != ASN_OK) return stat;

   /* encode visible_flow */

   stat = asn1PE_Path (ctxt_p, &pvalue->visible_flow);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgPopulationFlowDetection::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgPopulationFlowDetection (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgPopulationFlowDetection (ASN1CTXT* ctxt_p, ASN1T_MsgPopulationFlowDetection* pvalue)
{
   int stat = ASN_OK;

   /* decode oid */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return stat;

   /* decode population_oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->population_oid);
   if (stat != ASN_OK) return stat;

   /* decode flow_oid */

   stat = asn1PD_OID (ctxt_p, &pvalue->flow_oid);
   if (stat != ASN_OK) return stat;

   /* decode visible_flow */

   stat = asn1PD_Path (ctxt_p, &pvalue->visible_flow);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgPopulationFlowDetection::Decode ()
{
   return asn1PD_MsgPopulationFlowDetection (mpContext->GetPtr(), &msgData);
}


/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 26-Jun-2007.
 */
#include "ObjectKnowledge.h"

/**************************************************************/
/*                                                            */
/*  ObjectKnowledgeIncludes                                   */
/*                                                            */
/**************************************************************/

ASN1C_ObjectKnowledgeIncludes::ASN1C_ObjectKnowledgeIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_ObjectKnowledgeIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_ObjectKnowledgeIncludes (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledgeIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ObjectKnowledgeIncludes: start\n");

   /* encode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode objectExports */

   PU_PUSHNAME (ctxt_p, "objectExports");

   stat = asn1PE_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_ObjectKnowledgeIncludes: end\n");
   return (stat);
}

int ASN1C_ObjectKnowledgeIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectKnowledgeIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_ObjectKnowledgeIncludes (ASN1CTXT* ctxt_p, ASN1T_ObjectKnowledgeIncludes* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ObjectKnowledgeIncludes: start\n");

   /* decode baseExports */

   PU_PUSHNAME (ctxt_p, "baseExports");

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode objectExports */

   PU_PUSHNAME (ctxt_p, "objectExports");

   stat = asn1PD_ObjectExports (ctxt_p);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_ObjectKnowledgeIncludes: end\n");

   return (stat);
}

int ASN1C_ObjectKnowledgeIncludes::Decode ()
{
   return asn1PD_ObjectKnowledgeIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  ObjectKnowledgeExports                                    */
/*                                                            */
/**************************************************************/

ASN1C_ObjectKnowledgeExports::ASN1C_ObjectKnowledgeExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_ObjectKnowledgeExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_ObjectKnowledgeExports: start\n");

   /* NULL */

   rtdiag ("asn1PE_ObjectKnowledgeExports: end\n");
   return (stat);
}

int ASN1C_ObjectKnowledgeExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_ObjectKnowledgeExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_ObjectKnowledgeExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_ObjectKnowledgeExports: start\n");

   /* NULL */

   rtdiag ("asn1PD_ObjectKnowledgeExports: end\n");

   return (stat);
}

int ASN1C_ObjectKnowledgeExports::Decode ()
{
   return asn1PD_ObjectKnowledgeExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgObjectKnowledgeCreation                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectKnowledgeCreation::ASN1C_MsgObjectKnowledgeCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectKnowledgeCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectKnowledgeCreation (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgObjectKnowledgeCreation: start\n");

   PU_NEWFIELD (ctxt_p, "obstacle_typePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.obstacle_typePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "reserved_obstacle_activatedPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.reserved_obstacle_activatedPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_dotation_typePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.construction_dotation_typePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_dotation_typePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mining_dotation_typePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_ObjectKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode real_object */

   PU_PUSHNAME (ctxt_p, "real_object");

   stat = asn1PE_OID (ctxt_p, pvalue->real_object);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PE_EnumObjectType (ctxt_p, pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode obstacle_type */

   if (pvalue->m.obstacle_typePresent) {
      PU_PUSHNAME (ctxt_p, "obstacle_type");

      stat = asn1PE_EnumObstacleType (ctxt_p, pvalue->obstacle_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode reserved_obstacle_activated */

   if (pvalue->m.reserved_obstacle_activatedPresent) {
      PU_PUSHNAME (ctxt_p, "reserved_obstacle_activated");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->reserved_obstacle_activated);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode construction_dotation_type */

   if (pvalue->m.construction_dotation_typePresent) {
      PU_PUSHNAME (ctxt_p, "construction_dotation_type");

      stat = asn1PE_DotationType (ctxt_p, pvalue->construction_dotation_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode mining_dotation_type */

   if (pvalue->m.mining_dotation_typePresent) {
      PU_PUSHNAME (ctxt_p, "mining_dotation_type");

      stat = asn1PE_DotationType (ctxt_p, pvalue->mining_dotation_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgObjectKnowledgeCreation: end\n");
   return (stat);
}

int ASN1C_MsgObjectKnowledgeCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectKnowledgeCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectKnowledgeCreation (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeCreation* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgObjectKnowledgeCreation: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "obstacle_typePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.obstacle_typePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "reserved_obstacle_activatedPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.reserved_obstacle_activatedPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_dotation_typePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.construction_dotation_typePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_dotation_typePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.mining_dotation_typePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_ObjectKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode real_object */

   PU_PUSHNAME (ctxt_p, "real_object");

   stat = asn1PD_OID (ctxt_p, &pvalue->real_object);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode type */

   PU_PUSHNAME (ctxt_p, "type");

   stat = asn1PD_EnumObjectType (ctxt_p, &pvalue->type);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode obstacle_type */

   if (pvalue->m.obstacle_typePresent) {
      PU_PUSHNAME (ctxt_p, "obstacle_type");

      stat = asn1PD_EnumObstacleType (ctxt_p, &pvalue->obstacle_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode reserved_obstacle_activated */

   if (pvalue->m.reserved_obstacle_activatedPresent) {
      PU_PUSHNAME (ctxt_p, "reserved_obstacle_activated");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->reserved_obstacle_activated);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode construction_dotation_type */

   if (pvalue->m.construction_dotation_typePresent) {
      PU_PUSHNAME (ctxt_p, "construction_dotation_type");

      stat = asn1PD_DotationType (ctxt_p, &pvalue->construction_dotation_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode mining_dotation_type */

   if (pvalue->m.mining_dotation_typePresent) {
      PU_PUSHNAME (ctxt_p, "mining_dotation_type");

      stat = asn1PD_DotationType (ctxt_p, &pvalue->mining_dotation_type);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgObjectKnowledgeCreation: end\n");

   return (stat);
}

int ASN1C_MsgObjectKnowledgeCreation::Decode ()
{
   return asn1PD_MsgObjectKnowledgeCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectKnowledgeUpdate                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectKnowledgeUpdate::ASN1C_MsgObjectKnowledgeUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectKnowledgeUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectKnowledgeUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeUpdate* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgObjectKnowledgeUpdate: start\n");

   PU_NEWFIELD (ctxt_p, "real_objectPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.real_objectPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "relevancePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.relevancePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "locationPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.locationPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_percentagePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.construction_percentagePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_percentagePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mining_percentagePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "bypass_construction_percentagePresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.bypass_construction_percentagePresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "reserved_obstacle_activatedPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.reserved_obstacle_activatedPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "perceivedPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.perceivedPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "specific_attributesPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.specific_attributesPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "automat_perceptionPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.automat_perceptionPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_dotation_nbrPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.construction_dotation_nbrPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_dotation_nbrPresent");

   stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.mining_dotation_nbrPresent);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_SETBITCOUNT (ctxt_p);

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_ObjectKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode real_object */

   if (pvalue->m.real_objectPresent) {
      PU_PUSHNAME (ctxt_p, "real_object");

      stat = asn1PE_OID (ctxt_p, pvalue->real_object);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode relevance */

   if (pvalue->m.relevancePresent) {
      PU_PUSHNAME (ctxt_p, "relevance");

      if ( (pvalue->relevance >= 0 && pvalue->relevance <= 100) ) {
         stat = pe_ConsInteger (ctxt_p, pvalue->relevance, 0, 100);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      }
      else
         return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

      PU_POPNAME (ctxt_p);
   }

   /* encode location */

   if (pvalue->m.locationPresent) {
      PU_PUSHNAME (ctxt_p, "location");

      stat = asn1PE_Location (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode construction_percentage */

   if (pvalue->m.construction_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "construction_percentage");

      if ( (pvalue->construction_percentage >= 0 && pvalue->construction_percentage <= 100) ) {
         stat = pe_ConsInteger (ctxt_p, pvalue->construction_percentage, 0, 100);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      }
      else
         return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

      PU_POPNAME (ctxt_p);
   }

   /* encode mining_percentage */

   if (pvalue->m.mining_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "mining_percentage");

      if ( (pvalue->mining_percentage >= 0 && pvalue->mining_percentage <= 100) ) {
         stat = pe_ConsInteger (ctxt_p, pvalue->mining_percentage, 0, 100);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      }
      else
         return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

      PU_POPNAME (ctxt_p);
   }

   /* encode bypass_construction_percentage */

   if (pvalue->m.bypass_construction_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "bypass_construction_percentage");

      if ( (pvalue->bypass_construction_percentage >= 0 && pvalue->bypass_construction_percentage <= 100) ) {
         stat = pe_ConsInteger (ctxt_p, pvalue->bypass_construction_percentage, 0, 100);
         if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      }
      else
         return LOG_ASN1ERR (ctxt_p, ASN_E_CONSVIO);

      PU_POPNAME (ctxt_p);
   }

   /* encode reserved_obstacle_activated */

   if (pvalue->m.reserved_obstacle_activatedPresent) {
      PU_PUSHNAME (ctxt_p, "reserved_obstacle_activated");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->reserved_obstacle_activated);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode perceived */

   if (pvalue->m.perceivedPresent) {
      PU_PUSHNAME (ctxt_p, "perceived");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->perceived);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);
      PU_POPNAME (ctxt_p);
   }

   /* encode specific_attributes */

   if (pvalue->m.specific_attributesPresent) {
      PU_PUSHNAME (ctxt_p, "specific_attributes");

      stat = asn1PE_ObjectAttributesSpecific (ctxt_p, &pvalue->specific_attributes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode automat_perception */

   if (pvalue->m.automat_perceptionPresent) {
      PU_PUSHNAME (ctxt_p, "automat_perception");

      stat = asn1PE_ListOID (ctxt_p, &pvalue->automat_perception);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode construction_dotation_nbr */

   if (pvalue->m.construction_dotation_nbrPresent) {
      PU_PUSHNAME (ctxt_p, "construction_dotation_nbr");

      stat = pe_UnconsInteger (ctxt_p, pvalue->construction_dotation_nbr);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }

   /* encode mining_dotation_nbr */

   if (pvalue->m.mining_dotation_nbrPresent) {
      PU_PUSHNAME (ctxt_p, "mining_dotation_nbr");

      stat = pe_UnconsInteger (ctxt_p, pvalue->mining_dotation_nbr);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PE_MsgObjectKnowledgeUpdate: end\n");
   return (stat);
}

int ASN1C_MsgObjectKnowledgeUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectKnowledgeUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectKnowledgeUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   rtdiag ("asn1PD_MsgObjectKnowledgeUpdate: start\n");

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   PU_NEWFIELD (ctxt_p, "real_objectPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.real_objectPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "relevancePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.relevancePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "locationPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.locationPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_percentagePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.construction_percentagePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_percentagePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.mining_percentagePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "bypass_construction_percentagePresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.bypass_construction_percentagePresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "reserved_obstacle_activatedPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.reserved_obstacle_activatedPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "perceivedPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.perceivedPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "specific_attributesPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.specific_attributesPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "automat_perceptionPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.automat_perceptionPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "construction_dotation_nbrPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.construction_dotation_nbrPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   PU_NEWFIELD (ctxt_p, "mining_dotation_nbrPresent");

   stat = pd_bit (ctxt_p, &optbit);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   else pvalue->m.mining_dotation_nbrPresent = optbit;

   PU_SETBITCOUNT (ctxt_p);

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_ObjectKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode real_object */

   if (pvalue->m.real_objectPresent) {
      PU_PUSHNAME (ctxt_p, "real_object");

      stat = asn1PD_OID (ctxt_p, &pvalue->real_object);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode relevance */

   if (pvalue->m.relevancePresent) {
      PU_PUSHNAME (ctxt_p, "relevance");

      stat = pd_ConsInteger (ctxt_p, &pvalue->relevance, 0, 100);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode location */

   if (pvalue->m.locationPresent) {
      PU_PUSHNAME (ctxt_p, "location");

      stat = asn1PD_Location (ctxt_p, &pvalue->location);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode construction_percentage */

   if (pvalue->m.construction_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "construction_percentage");

      stat = pd_ConsInteger (ctxt_p, &pvalue->construction_percentage, 0, 100);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode mining_percentage */

   if (pvalue->m.mining_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "mining_percentage");

      stat = pd_ConsInteger (ctxt_p, &pvalue->mining_percentage, 0, 100);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode bypass_construction_percentage */

   if (pvalue->m.bypass_construction_percentagePresent) {
      PU_PUSHNAME (ctxt_p, "bypass_construction_percentage");

      stat = pd_ConsInteger (ctxt_p, &pvalue->bypass_construction_percentage, 0, 100);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode reserved_obstacle_activated */

   if (pvalue->m.reserved_obstacle_activatedPresent) {
      PU_PUSHNAME (ctxt_p, "reserved_obstacle_activated");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->reserved_obstacle_activated);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode perceived */

   if (pvalue->m.perceivedPresent) {
      PU_PUSHNAME (ctxt_p, "perceived");

      PU_NEWFIELD (ctxt_p, "boolean");

      stat = pd_bit (ctxt_p, &pvalue->perceived);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_SETBITCOUNT (ctxt_p);

      PU_POPNAME (ctxt_p);
   }

   /* decode specific_attributes */

   if (pvalue->m.specific_attributesPresent) {
      PU_PUSHNAME (ctxt_p, "specific_attributes");

      stat = asn1PD_ObjectAttributesSpecific (ctxt_p, &pvalue->specific_attributes);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode automat_perception */

   if (pvalue->m.automat_perceptionPresent) {
      PU_PUSHNAME (ctxt_p, "automat_perception");

      stat = asn1PD_ListOID (ctxt_p, &pvalue->automat_perception);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode construction_dotation_nbr */

   if (pvalue->m.construction_dotation_nbrPresent) {
      PU_PUSHNAME (ctxt_p, "construction_dotation_nbr");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->construction_dotation_nbr);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }

   /* decode mining_dotation_nbr */

   if (pvalue->m.mining_dotation_nbrPresent) {
      PU_PUSHNAME (ctxt_p, "mining_dotation_nbr");

      stat = pd_UnconsInteger (ctxt_p, &pvalue->mining_dotation_nbr);
      if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

      PU_POPNAME (ctxt_p);
   }


   rtdiag ("asn1PD_MsgObjectKnowledgeUpdate: end\n");

   return (stat);
}

int ASN1C_MsgObjectKnowledgeUpdate::Decode ()
{
   return asn1PD_MsgObjectKnowledgeUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgObjectKnowledgeDestruction                             */
/*                                                            */
/**************************************************************/

ASN1C_MsgObjectKnowledgeDestruction::ASN1C_MsgObjectKnowledgeDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgObjectKnowledgeDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgObjectKnowledgeDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgObjectKnowledgeDestruction: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_ObjectKnowledge (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PE_Team (ctxt_p, pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgObjectKnowledgeDestruction: end\n");
   return (stat);
}

int ASN1C_MsgObjectKnowledgeDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgObjectKnowledgeDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgObjectKnowledgeDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgObjectKnowledgeDestruction* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgObjectKnowledgeDestruction: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_ObjectKnowledge (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode team */

   PU_PUSHNAME (ctxt_p, "team");

   stat = asn1PD_Team (ctxt_p, &pvalue->team);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgObjectKnowledgeDestruction: end\n");

   return (stat);
}

int ASN1C_MsgObjectKnowledgeDestruction::Decode ()
{
   return asn1PD_MsgObjectKnowledgeDestruction (mpContext->GetPtr(), &msgData);
}


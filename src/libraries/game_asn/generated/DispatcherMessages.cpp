/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 09-Jul-2009.
 */
#include "DispatcherMessages.h"

/**************************************************************/
/*                                                            */
/*  DispatcherMessagesIncludes                                */
/*                                                            */
/**************************************************************/

ASN1C_DispatcherMessagesIncludes::ASN1C_DispatcherMessagesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_DispatcherMessagesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DispatcherMessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_DispatcherMessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode controlExports */

   stat = asn1PE_ControlExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DispatcherMessagesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DispatcherMessagesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DispatcherMessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_DispatcherMessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode controlExports */

   stat = asn1PD_ControlExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_DispatcherMessagesIncludes::Decode ()
{
   return asn1PD_DispatcherMessagesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DispatcherMessagesExports                                 */
/*                                                            */
/**************************************************************/

ASN1C_DispatcherMessagesExports::ASN1C_DispatcherMessagesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_DispatcherMessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_DispatcherMessagesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DispatcherMessagesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_DispatcherMessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_DispatcherMessagesExports::Decode ()
{
   return asn1PD_DispatcherMessagesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgServicesDescription_services                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgServicesDescription_services::ASN1C_MsgServicesDescription_services (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgServicesDescription_services& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgServicesDescription_services (ASN1CTXT* ctxt_p, ASN1T_MsgServicesDescription_services* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pe_VisibleString (ctxt_p, pvalue->elem[xx1], 0);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C_MsgServicesDescription_services::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgServicesDescription_services (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgServicesDescription_services (ASN1CTXT* ctxt_p, ASN1T_MsgServicesDescription_services* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1VisibleString);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = pd_VisibleString (ctxt_p, &pvalue->elem[xx1], 0);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgServicesDescription_services::Decode ()
{
   return asn1PD_MsgServicesDescription_services (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgServicesDescription                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgServicesDescription::ASN1C_MsgServicesDescription (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgServicesDescription& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgServicesDescription (ASN1CTXT* ctxt_p, ASN1T_MsgServicesDescription* pvalue)
{
   int stat = ASN_OK;

   /* encode services */

   stat = asn1PE_MsgServicesDescription_services (ctxt_p, &pvalue->services);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgServicesDescription::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgServicesDescription (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgServicesDescription (ASN1CTXT* ctxt_p, ASN1T_MsgServicesDescription* pvalue)
{
   int stat = ASN_OK;

   /* decode services */

   stat = asn1PD_MsgServicesDescription_services (ctxt_p, &pvalue->services);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgServicesDescription::Decode ()
{
   return asn1PD_MsgServicesDescription (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsDispatcherToSim                                       */
/*                                                            */
/**************************************************************/

ASN1C_MsgsDispatcherToSim::ASN1C_MsgsDispatcherToSim (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsDispatcherToSim& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsDispatcherToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsDispatcherToSim* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_control_client_announcement */
      case 1:
         stat = asn1PE_MsgControlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsDispatcherToSim::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsDispatcherToSim (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsDispatcherToSim (ASN1CTXT* ctxt_p, ASN1T_MsgsDispatcherToSim* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_control_client_announcement */
      case 0:
         stat = asn1PD_MsgControlClientAnnouncement (ctxt_p);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsDispatcherToSim::Decode ()
{
   return asn1PD_MsgsDispatcherToSim (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsDispatcherToClient                                    */
/*                                                            */
/**************************************************************/

ASN1C_MsgsDispatcherToClient::ASN1C_MsgsDispatcherToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsDispatcherToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsDispatcherToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsDispatcherToClient* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 0);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_services_description */
      case 1:
         stat = asn1PE_MsgServicesDescription (ctxt_p, pvalue->u.msg_services_description);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsDispatcherToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsDispatcherToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsDispatcherToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsDispatcherToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 0);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_services_description */
      case 0:
         pvalue->u.msg_services_description = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgServicesDescription);

         stat = asn1PD_MsgServicesDescription (ctxt_p, pvalue->u.msg_services_description);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsDispatcherToClient::Decode ()
{
   return asn1PD_MsgsDispatcherToClient (mpContext->GetPtr(), &msgData);
}


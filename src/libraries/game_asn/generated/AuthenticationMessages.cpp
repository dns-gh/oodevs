/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 28-Feb-2008.
 */
#include "AuthenticationMessages.h"

/**************************************************************/
/*                                                            */
/*  AuthenticationMessagesIncludes                            */
/*                                                            */
/**************************************************************/

ASN1C_AuthenticationMessagesIncludes::ASN1C_AuthenticationMessagesIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_AuthenticationMessagesIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_AuthenticationMessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_AuthenticationMessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode authExports */

   stat = asn1PE_AuthExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_AuthenticationMessagesIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AuthenticationMessagesIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_AuthenticationMessagesIncludes (ASN1CTXT* ctxt_p, ASN1T_AuthenticationMessagesIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode authExports */

   stat = asn1PD_AuthExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_AuthenticationMessagesIncludes::Decode ()
{
   return asn1PD_AuthenticationMessagesIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  AuthenticationMessagesExports                             */
/*                                                            */
/**************************************************************/

ASN1C_AuthenticationMessagesExports::ASN1C_AuthenticationMessagesExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_AuthenticationMessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_AuthenticationMessagesExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_AuthenticationMessagesExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_AuthenticationMessagesExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_AuthenticationMessagesExports::Decode ()
{
   return asn1PD_AuthenticationMessagesExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  MsgsAuthenticationToClient_msg                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAuthenticationToClient_msg::ASN1C_MsgsAuthenticationToClient_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAuthenticationToClient_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAuthenticationToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 6);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_authentication_response */
      case 1:
         stat = asn1PE_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation */
      case 2:
         stat = asn1PE_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation_request_ack */
      case 3:
         stat = asn1PE_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update */
      case 4:
         stat = asn1PE_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update_request_ack */
      case 5:
         stat = asn1PE_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction */
      case 6:
         stat = asn1PE_MsgProfileDestruction (ctxt_p, pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction_request_ack */
      case 7:
         stat = asn1PE_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsAuthenticationToClient_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAuthenticationToClient_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAuthenticationToClient_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 6);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_authentication_response */
      case 0:
         pvalue->u.msg_authentication_response = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationResponse);

         stat = asn1PD_MsgAuthenticationResponse (ctxt_p, pvalue->u.msg_authentication_response);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation */
      case 1:
         pvalue->u.msg_profile_creation = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreation);

         stat = asn1PD_MsgProfileCreation (ctxt_p, pvalue->u.msg_profile_creation);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation_request_ack */
      case 2:
         pvalue->u.msg_profile_creation_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequestAck);

         stat = asn1PD_MsgProfileCreationRequestAck (ctxt_p, pvalue->u.msg_profile_creation_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update */
      case 3:
         pvalue->u.msg_profile_update = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdate);

         stat = asn1PD_MsgProfileUpdate (ctxt_p, pvalue->u.msg_profile_update);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update_request_ack */
      case 4:
         pvalue->u.msg_profile_update_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequestAck);

         stat = asn1PD_MsgProfileUpdateRequestAck (ctxt_p, pvalue->u.msg_profile_update_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction */
      case 5:
         stat = asn1PD_MsgProfileDestruction (ctxt_p, &pvalue->u.msg_profile_destruction);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction_request_ack */
      case 6:
         pvalue->u.msg_profile_destruction_request_ack = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileDestructionRequestAck);

         stat = asn1PD_MsgProfileDestructionRequestAck (ctxt_p, pvalue->u.msg_profile_destruction_request_ack);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsAuthenticationToClient_msg::Decode ()
{
   return asn1PD_MsgsAuthenticationToClient_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsAuthenticationToClient                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsAuthenticationToClient::ASN1C_MsgsAuthenticationToClient (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsAuthenticationToClient& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsAuthenticationToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsAuthenticationToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsAuthenticationToClient::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsAuthenticationToClient (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsAuthenticationToClient (ASN1CTXT* ctxt_p, ASN1T_MsgsAuthenticationToClient* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsAuthenticationToClient_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsAuthenticationToClient::Decode ()
{
   return asn1PD_MsgsAuthenticationToClient (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAuthentication_msg                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAuthentication_msg::ASN1C_MsgsClientToAuthentication_msg (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAuthentication_msg& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAuthentication_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication_msg* pvalue)
{
   int stat = ASN_OK;

   /* Encode choice index value */

   stat = pe_ConsUnsigned (ctxt_p, pvalue->t - 1, 0, 3);
   if (stat != ASN_OK) return stat;

   /* Encode root element data value */

   switch (pvalue->t)
   {
      /* msg_authentication_request */
      case 1:
         stat = asn1PE_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_creation_request */
      case 2:
         stat = asn1PE_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_update_request */
      case 3:
         stat = asn1PE_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return stat;
         break;

      /* msg_profile_destruction_request */
      case 4:
         stat = asn1PE_MsgProfileDestructionRequest (ctxt_p, pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return stat;
         break;

      default:
         return ASN_E_INVOPT;
   }
   return (stat);
}

int ASN1C_MsgsClientToAuthentication_msg::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAuthentication_msg (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAuthentication_msg (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication_msg* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return stat;
   else pvalue->t = ui + 1;

   switch (ui) {
      /* msg_authentication_request */
      case 0:
         pvalue->u.msg_authentication_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgAuthenticationRequest);

         stat = asn1PD_MsgAuthenticationRequest (ctxt_p, pvalue->u.msg_authentication_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_creation_request */
      case 1:
         pvalue->u.msg_profile_creation_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileCreationRequest);

         stat = asn1PD_MsgProfileCreationRequest (ctxt_p, pvalue->u.msg_profile_creation_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_update_request */
      case 2:
         pvalue->u.msg_profile_update_request = ALLOC_ASN1ELEM (ctxt_p, ASN1T_MsgProfileUpdateRequest);

         stat = asn1PD_MsgProfileUpdateRequest (ctxt_p, pvalue->u.msg_profile_update_request);
         if (stat != ASN_OK) return stat;

         break;

      /* msg_profile_destruction_request */
      case 3:
         stat = asn1PD_MsgProfileDestructionRequest (ctxt_p, &pvalue->u.msg_profile_destruction_request);
         if (stat != ASN_OK) return stat;

         break;

      default:
         return ASN_E_INVOPT;
   }

   return (stat);
}

int ASN1C_MsgsClientToAuthentication_msg::Decode ()
{
   return asn1PD_MsgsClientToAuthentication_msg (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgsClientToAuthentication                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgsClientToAuthentication::ASN1C_MsgsClientToAuthentication (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgsClientToAuthentication& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgsClientToAuthentication (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->context != 0));

   /* encode context */

   if (pvalue->context != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->context);
      if (stat != ASN_OK) return stat;
   }

   /* encode msg */

   stat = asn1PE_MsgsClientToAuthentication_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgsClientToAuthentication::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgsClientToAuthentication (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgsClientToAuthentication (ASN1CTXT* ctxt_p, ASN1T_MsgsClientToAuthentication* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL contextPresent;

   /* optional bits */

   pd_bit (ctxt_p, &optbit);
   contextPresent = optbit;

   /* decode context */

   if (contextPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->context);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->context = 0;
   }

   /* decode msg */

   stat = asn1PD_MsgsClientToAuthentication_msg (ctxt_p, &pvalue->msg);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgsClientToAuthentication::Decode ()
{
   return asn1PD_MsgsClientToAuthentication (mpContext->GetPtr(), &msgData);
}


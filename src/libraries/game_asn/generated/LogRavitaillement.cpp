/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 24-Dec-2009.
 */
#include "LogRavitaillement.h"

/**************************************************************/
/*                                                            */
/*  LogRavitaillementIncludes                                 */
/*                                                            */
/**************************************************************/

ASN1C_LogRavitaillementIncludes::ASN1C_LogRavitaillementIncludes (
   ASN1MessageBuffer& msgBuf, ASN1T_LogRavitaillementIncludes& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LogRavitaillementIncludes (ASN1CTXT* ctxt_p, ASN1T_LogRavitaillementIncludes* pvalue)
{
   int stat = ASN_OK;

   /* encode baseExports */

   stat = asn1PE_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_LogRavitaillementIncludes::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogRavitaillementIncludes (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LogRavitaillementIncludes (ASN1CTXT* ctxt_p, ASN1T_LogRavitaillementIncludes* pvalue)
{
   int stat = ASN_OK;

   /* decode baseExports */

   stat = asn1PD_BaseExports (ctxt_p);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_LogRavitaillementIncludes::Decode ()
{
   return asn1PD_LogRavitaillementIncludes (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LogRavitaillementExports                                  */
/*                                                            */
/**************************************************************/

ASN1C_LogRavitaillementExports::ASN1C_LogRavitaillementExports (
   ASN1MessageBuffer& msgBuf) :
   ASN1CType(msgBuf)
{}

EXTERN int asn1PE_LogRavitaillementExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */
   return (stat);
}

int ASN1C_LogRavitaillementExports::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogRavitaillementExports (mpContext->GetPtr());
   return stat;
}

EXTERN int asn1PD_LogRavitaillementExports (ASN1CTXT* ctxt_p)
{
   int stat = ASN_OK;

   /* NULL */

   return (stat);
}

int ASN1C_LogRavitaillementExports::Decode ()
{
   return asn1PD_LogRavitaillementExports (mpContext->GetPtr());
}

/**************************************************************/
/*                                                            */
/*  DotationQuery                                             */
/*                                                            */
/**************************************************************/

ASN1C_DotationQuery::ASN1C_DotationQuery (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationQuery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationQuery (ASN1CTXT* ctxt_p, ASN1T_DotationQuery* pvalue)
{
   int stat = ASN_OK;

   /* encode ressource_id */

   stat = asn1PE_DotationType (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* encode quantite_demandee */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_demandee);
   if (stat != ASN_OK) return stat;

   /* encode quantite_accordee */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_accordee);
   if (stat != ASN_OK) return stat;

   /* encode quantite_en_transit */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_en_transit);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DotationQuery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationQuery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationQuery (ASN1CTXT* ctxt_p, ASN1T_DotationQuery* pvalue)
{
   int stat = ASN_OK;

   /* decode ressource_id */

   stat = asn1PD_DotationType (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* decode quantite_demandee */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_demandee);
   if (stat != ASN_OK) return stat;

   /* decode quantite_accordee */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_accordee);
   if (stat != ASN_OK) return stat;

   /* decode quantite_en_transit */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_en_transit);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_DotationQuery::Decode ()
{
   return asn1PD_DotationQuery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationQuery                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationQuery::ASN1C__SeqOfDotationQuery (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationQuery& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationQuery (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_DotationQuery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfDotationQuery::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationQuery (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationQuery (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuery* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationQuery);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_DotationQuery (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfDotationQuery::Decode ()
{
   return asn1PD__SeqOfDotationQuery (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyHandlingCreation                              */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyHandlingCreation::ASN1C_MsgLogSupplyHandlingCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyHandlingCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyHandlingCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingCreation* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_consigne */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode tick_creation */

   stat = pe_UnconsInteger (ctxt_p, pvalue->tick_creation);
   if (stat != ASN_OK) return stat;

   /* encode dotations */

   stat = asn1PE__SeqOfDotationQuery (ctxt_p, &pvalue->dotations);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLogSupplyHandlingCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyHandlingCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyHandlingCreation (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingCreation* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_consigne */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode tick_creation */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->tick_creation);
   if (stat != ASN_OK) return stat;

   /* decode dotations */

   stat = asn1PD__SeqOfDotationQuery (ctxt_p, &pvalue->dotations);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLogSupplyHandlingCreation::Decode ()
{
   return asn1PD_MsgLogSupplyHandlingCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumLogSupplyHandlingStatus                               */
/*                                                            */
/**************************************************************/

ASN1C_EnumLogSupplyHandlingStatus::ASN1C_EnumLogSupplyHandlingStatus (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumLogSupplyHandlingStatus& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumLogSupplyHandlingStatus (ASN1CTXT* ctxt_p, ASN1T_EnumLogSupplyHandlingStatus value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case EnumLogSupplyHandlingStatus::convoi_en_attente_camions: ui = 0; break;
      case EnumLogSupplyHandlingStatus::convoi_constitution: ui = 1; break;
      case EnumLogSupplyHandlingStatus::convoi_deplacement_vers_point_chargement: ui = 2; break;
      case EnumLogSupplyHandlingStatus::convoi_chargement: ui = 3; break;
      case EnumLogSupplyHandlingStatus::convoi_deplacement_vers_point_dechargement: ui = 4; break;
      case EnumLogSupplyHandlingStatus::convoi_dechargement: ui = 5; break;
      case EnumLogSupplyHandlingStatus::convoi_deplacement_retour: ui = 6; break;
      case EnumLogSupplyHandlingStatus::termine: ui = 7; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 7);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_EnumLogSupplyHandlingStatus::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumLogSupplyHandlingStatus (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumLogSupplyHandlingStatus (ASN1CTXT* ctxt_p, ASN1T_EnumLogSupplyHandlingStatus* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 7);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = EnumLogSupplyHandlingStatus::convoi_en_attente_camions; break;
      case 1: *pvalue = EnumLogSupplyHandlingStatus::convoi_constitution; break;
      case 2: *pvalue = EnumLogSupplyHandlingStatus::convoi_deplacement_vers_point_chargement; break;
      case 3: *pvalue = EnumLogSupplyHandlingStatus::convoi_chargement; break;
      case 4: *pvalue = EnumLogSupplyHandlingStatus::convoi_deplacement_vers_point_dechargement; break;
      case 5: *pvalue = EnumLogSupplyHandlingStatus::convoi_dechargement; break;
      case 6: *pvalue = EnumLogSupplyHandlingStatus::convoi_deplacement_retour; break;
      case 7: *pvalue = EnumLogSupplyHandlingStatus::termine; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_EnumLogSupplyHandlingStatus::Decode ()
{
   return asn1PD_EnumLogSupplyHandlingStatus (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyHandlingUpdate                                */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyHandlingUpdate::ASN1C_MsgLogSupplyHandlingUpdate (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyHandlingUpdate& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyHandlingUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingUpdate* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_automate_log_traitantPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_automate_log_fournissant_moyens_convoiPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.oid_pion_convoyantPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.etatPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.dotationsPresent);

   /* encode oid_consigne */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate_log_traitant */

   if (pvalue->m.oid_automate_log_traitantPresent) {
      stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate_log_traitant);
      if (stat != ASN_OK) return stat;
   }

   /* encode oid_automate_log_fournissant_moyens_convoi */

   if (pvalue->m.oid_automate_log_fournissant_moyens_convoiPresent) {
      stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate_log_fournissant_moyens_convoi);
      if (stat != ASN_OK) return stat;
   }

   /* encode oid_pion_convoyant */

   if (pvalue->m.oid_pion_convoyantPresent) {
      stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion_convoyant);
      if (stat != ASN_OK) return stat;
   }

   /* encode etat */

   if (pvalue->m.etatPresent) {
      stat = asn1PE_EnumLogSupplyHandlingStatus (ctxt_p, pvalue->etat);
      if (stat != ASN_OK) return stat;
   }

   /* encode dotations */

   if (pvalue->m.dotationsPresent) {
      stat = asn1PE__SeqOfDotationQuery (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgLogSupplyHandlingUpdate::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyHandlingUpdate (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyHandlingUpdate (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingUpdate* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.oid_automate_log_traitantPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.oid_automate_log_fournissant_moyens_convoiPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.oid_pion_convoyantPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.etatPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.dotationsPresent = optbit;

   /* decode oid_consigne */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate_log_traitant */

   if (pvalue->m.oid_automate_log_traitantPresent) {
      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate_log_traitant);
      if (stat != ASN_OK) return stat;
   }

   /* decode oid_automate_log_fournissant_moyens_convoi */

   if (pvalue->m.oid_automate_log_fournissant_moyens_convoiPresent) {
      stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate_log_fournissant_moyens_convoi);
      if (stat != ASN_OK) return stat;
   }

   /* decode oid_pion_convoyant */

   if (pvalue->m.oid_pion_convoyantPresent) {
      stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion_convoyant);
      if (stat != ASN_OK) return stat;
   }

   /* decode etat */

   if (pvalue->m.etatPresent) {
      stat = asn1PD_EnumLogSupplyHandlingStatus (ctxt_p, &pvalue->etat);
      if (stat != ASN_OK) return stat;
   }

   /* decode dotations */

   if (pvalue->m.dotationsPresent) {
      stat = asn1PD__SeqOfDotationQuery (ctxt_p, &pvalue->dotations);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgLogSupplyHandlingUpdate::Decode ()
{
   return asn1PD_MsgLogSupplyHandlingUpdate (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyHandlingDestruction                           */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyHandlingDestruction::ASN1C_MsgLogSupplyHandlingDestruction (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyHandlingDestruction& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyHandlingDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingDestruction* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_consigne */

   stat = asn1PE_OID (ctxt_p, pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLogSupplyHandlingDestruction::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyHandlingDestruction (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyHandlingDestruction (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyHandlingDestruction* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_consigne */

   stat = asn1PD_OID (ctxt_p, &pvalue->oid_consigne);
   if (stat != ASN_OK) return stat;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLogSupplyHandlingDestruction::Decode ()
{
   return asn1PD_MsgLogSupplyHandlingDestruction (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  LogSupplyEquimentAvailability                             */
/*                                                            */
/**************************************************************/

ASN1C_LogSupplyEquimentAvailability::ASN1C_LogSupplyEquimentAvailability (
   ASN1MessageBuffer& msgBuf, ASN1T_LogSupplyEquimentAvailability& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_LogSupplyEquimentAvailability (ASN1CTXT* ctxt_p, ASN1T_LogSupplyEquimentAvailability* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)(pvalue->nbr_pretes != 0));

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.nbr_au_reposPresent);

   /* encode type_equipement */

   stat = asn1PE_EquipmentType (ctxt_p, pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* encode nbr_total */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_total);
   if (stat != ASN_OK) return stat;

   /* encode nbr_disponibles */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_disponibles);
   if (stat != ASN_OK) return stat;

   /* encode nbr_au_travail */

   stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_au_travail);
   if (stat != ASN_OK) return stat;

   /* encode nbr_pretes */

   if (pvalue->nbr_pretes != 0) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_pretes);
      if (stat != ASN_OK) return stat;
   }

   /* encode nbr_au_repos */

   if (pvalue->m.nbr_au_reposPresent) {
      stat = pe_UnconsInteger (ctxt_p, pvalue->nbr_au_repos);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_LogSupplyEquimentAvailability::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_LogSupplyEquimentAvailability (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_LogSupplyEquimentAvailability (ASN1CTXT* ctxt_p, ASN1T_LogSupplyEquimentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;
   ASN1BOOL nbr_pretesPresent;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   nbr_pretesPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.nbr_au_reposPresent = optbit;

   /* decode type_equipement */

   stat = asn1PD_EquipmentType (ctxt_p, &pvalue->type_equipement);
   if (stat != ASN_OK) return stat;

   /* decode nbr_total */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_total);
   if (stat != ASN_OK) return stat;

   /* decode nbr_disponibles */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_disponibles);
   if (stat != ASN_OK) return stat;

   /* decode nbr_au_travail */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_au_travail);
   if (stat != ASN_OK) return stat;

   /* decode nbr_pretes */

   if (nbr_pretesPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_pretes);
      if (stat != ASN_OK) return stat;
   }
   else {
      pvalue->nbr_pretes = 0;
   }

   /* decode nbr_au_repos */

   if (pvalue->m.nbr_au_reposPresent) {
      stat = pd_UnconsInteger (ctxt_p, &pvalue->nbr_au_repos);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_LogSupplyEquimentAvailability::Decode ()
{
   return asn1PD_LogSupplyEquimentAvailability (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationStock                                             */
/*                                                            */
/**************************************************************/

ASN1C_DotationStock::ASN1C_DotationStock (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationStock (ASN1CTXT* ctxt_p, ASN1T_DotationStock* pvalue)
{
   int stat = ASN_OK;

   /* encode ressource_id */

   stat = asn1PE_DotationType (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* encode quantite_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DotationStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationStock (ASN1CTXT* ctxt_p, ASN1T_DotationStock* pvalue)
{
   int stat = ASN_OK;

   /* decode ressource_id */

   stat = asn1PD_DotationType (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* decode quantite_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quantite_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_DotationStock::Decode ()
{
   return asn1PD_DotationStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationStock                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationStock::ASN1C__SeqOfDotationStock (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationStock& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_DotationStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfDotationStock::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationStock (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationStock (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationStock* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationStock);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_DotationStock (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfDotationStock::Decode ()
{
   return asn1PD__SeqOfDotationStock (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfLogSupplyEquimentAvailability                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfLogSupplyEquimentAvailability::ASN1C__SeqOfLogSupplyEquimentAvailability (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfLogSupplyEquimentAvailability& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfLogSupplyEquimentAvailability (ASN1CTXT* ctxt_p, ASN1T__SeqOfLogSupplyEquimentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_LogSupplyEquimentAvailability (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfLogSupplyEquimentAvailability::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfLogSupplyEquimentAvailability (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfLogSupplyEquimentAvailability (ASN1CTXT* ctxt_p, ASN1T__SeqOfLogSupplyEquimentAvailability* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_LogSupplyEquimentAvailability);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_LogSupplyEquimentAvailability (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfLogSupplyEquimentAvailability::Decode ()
{
   return asn1PD__SeqOfLogSupplyEquimentAvailability (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyState                                         */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyState::ASN1C_MsgLogSupplyState (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyState& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyState (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyState* pvalue)
{
   int stat = ASN_OK;

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.chaine_activeePresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.stocksPresent);

   pe_bit (ctxt_p, (ASN1BOOL)pvalue->m.disponibilites_transporteurs_convoisPresent);

   /* encode oid_pion */

   stat = asn1PE_Unit (ctxt_p, pvalue->oid_pion);
   if (stat != ASN_OK) return stat;

   /* encode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      stat = pe_bit (ctxt_p, (ASN1BOOL)pvalue->chaine_activee);
      if (stat != ASN_OK) return stat;
   }

   /* encode stocks */

   if (pvalue->m.stocksPresent) {
      stat = asn1PE__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return stat;
   }

   /* encode disponibilites_transporteurs_convois */

   if (pvalue->m.disponibilites_transporteurs_convoisPresent) {
      stat = asn1PE__SeqOfLogSupplyEquimentAvailability (ctxt_p, &pvalue->disponibilites_transporteurs_convois);
      if (stat != ASN_OK) return stat;
   }

   return (stat);
}

int ASN1C_MsgLogSupplyState::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyState (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyState (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyState* pvalue)
{
   int stat = ASN_OK;
   ASN1BOOL optbit;

   /* optional bits */

   memset (&pvalue->m, 0, sizeof(pvalue->m));

   pd_bit (ctxt_p, &optbit);
   pvalue->m.chaine_activeePresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.stocksPresent = optbit;

   pd_bit (ctxt_p, &optbit);
   pvalue->m.disponibilites_transporteurs_convoisPresent = optbit;

   /* decode oid_pion */

   stat = asn1PD_Unit (ctxt_p, &pvalue->oid_pion);
   if (stat != ASN_OK) return stat;

   /* decode chaine_activee */

   if (pvalue->m.chaine_activeePresent) {
      stat = pd_bit (ctxt_p, &pvalue->chaine_activee);
      if (stat != ASN_OK) return stat;
   }

   /* decode stocks */

   if (pvalue->m.stocksPresent) {
      stat = asn1PD__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
      if (stat != ASN_OK) return stat;
   }

   /* decode disponibilites_transporteurs_convois */

   if (pvalue->m.disponibilites_transporteurs_convoisPresent) {
      stat = asn1PD__SeqOfLogSupplyEquimentAvailability (ctxt_p, &pvalue->disponibilites_transporteurs_convois);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C_MsgLogSupplyState::Decode ()
{
   return asn1PD_MsgLogSupplyState (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  DotationQuota                                             */
/*                                                            */
/**************************************************************/

ASN1C_DotationQuota::ASN1C_DotationQuota (
   ASN1MessageBuffer& msgBuf, ASN1T_DotationQuota& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_DotationQuota (ASN1CTXT* ctxt_p, ASN1T_DotationQuota* pvalue)
{
   int stat = ASN_OK;

   /* encode ressource_id */

   stat = asn1PE_DotationType (ctxt_p, pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* encode quota_disponible */

   stat = pe_UnconsInteger (ctxt_p, pvalue->quota_disponible);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_DotationQuota::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_DotationQuota (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_DotationQuota (ASN1CTXT* ctxt_p, ASN1T_DotationQuota* pvalue)
{
   int stat = ASN_OK;

   /* decode ressource_id */

   stat = asn1PD_DotationType (ctxt_p, &pvalue->ressource_id);
   if (stat != ASN_OK) return stat;

   /* decode quota_disponible */

   stat = pd_UnconsInteger (ctxt_p, &pvalue->quota_disponible);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_DotationQuota::Decode ()
{
   return asn1PD_DotationQuota (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  _SeqOfDotationQuota                                       */
/*                                                            */
/**************************************************************/

ASN1C__SeqOfDotationQuota::ASN1C__SeqOfDotationQuota (
   ASN1MessageBuffer& msgBuf, ASN1T__SeqOfDotationQuota& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE__SeqOfDotationQuota (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuota* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* encode length determinant */

   stat = pe_Length (ctxt_p, pvalue->n);
   if (stat < 0) return stat;

   /* encode elements */

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PE_DotationQuota (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }
   return (stat);
}

int ASN1C__SeqOfDotationQuota::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE__SeqOfDotationQuota (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD__SeqOfDotationQuota (ASN1CTXT* ctxt_p, ASN1T__SeqOfDotationQuota* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT xx1;

   /* decode length determinant */

   stat = pd_Length (ctxt_p, &pvalue->n);
   if (stat != ASN_OK) return stat;

   /* decode elements */

   ALLOC_ASN1ARRAY (ctxt_p, pvalue, ASN1T_DotationQuota);

   for (xx1 = 0; xx1 < pvalue->n; xx1++) {
      stat = asn1PD_DotationQuota (ctxt_p, &pvalue->elem[xx1]);
      if (stat != ASN_OK) return stat;
   }


   return (stat);
}

int ASN1C__SeqOfDotationQuota::Decode ()
{
   return asn1PD__SeqOfDotationQuota (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyChangeQuotas                                  */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyChangeQuotas::ASN1C_MsgLogSupplyChangeQuotas (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyChangeQuotas& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyChangeQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyChangeQuotas* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_donneur */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_donneur);
   if (stat != ASN_OK) return stat;

   /* encode oid_receveur */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_receveur);
   if (stat != ASN_OK) return stat;

   /* encode quotas */

   stat = asn1PE__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLogSupplyChangeQuotas::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyChangeQuotas (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyChangeQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyChangeQuotas* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_donneur */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_donneur);
   if (stat != ASN_OK) return stat;

   /* decode oid_receveur */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_receveur);
   if (stat != ASN_OK) return stat;

   /* decode quotas */

   stat = asn1PD__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLogSupplyChangeQuotas::Decode ()
{
   return asn1PD_MsgLogSupplyChangeQuotas (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyChangeQuotasAck                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyChangeQuotasAck::ASN1C_MsgLogSupplyChangeQuotasAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyChangeQuotasAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyChangeQuotasAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyChangeQuotasAck value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case MsgLogSupplyChangeQuotasAck::no_error: ui = 0; break;
      case MsgLogSupplyChangeQuotasAck::error_invalid_donneur: ui = 1; break;
      case MsgLogSupplyChangeQuotasAck::error_invalid_receveur: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLogSupplyChangeQuotasAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyChangeQuotasAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyChangeQuotasAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyChangeQuotasAck* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = MsgLogSupplyChangeQuotasAck::no_error; break;
      case 1: *pvalue = MsgLogSupplyChangeQuotasAck::error_invalid_donneur; break;
      case 2: *pvalue = MsgLogSupplyChangeQuotasAck::error_invalid_receveur; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_MsgLogSupplyChangeQuotasAck::Decode ()
{
   return asn1PD_MsgLogSupplyChangeQuotasAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyPushFlow                                      */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyPushFlow::ASN1C_MsgLogSupplyPushFlow (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyPushFlow& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyPushFlow (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyPushFlow* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_donneur */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_donneur);
   if (stat != ASN_OK) return stat;

   /* encode oid_receveur */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_receveur);
   if (stat != ASN_OK) return stat;

   /* encode stocks */

   stat = asn1PE__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLogSupplyPushFlow::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyPushFlow (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyPushFlow (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyPushFlow* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_donneur */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_donneur);
   if (stat != ASN_OK) return stat;

   /* decode oid_receveur */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_receveur);
   if (stat != ASN_OK) return stat;

   /* decode stocks */

   stat = asn1PD__SeqOfDotationStock (ctxt_p, &pvalue->stocks);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLogSupplyPushFlow::Decode ()
{
   return asn1PD_MsgLogSupplyPushFlow (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyPushFlowAck                                   */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyPushFlowAck::ASN1C_MsgLogSupplyPushFlowAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyPushFlowAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyPushFlowAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyPushFlowAck value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   switch (value) {
      case MsgLogSupplyPushFlowAck::no_error: ui = 0; break;
      case MsgLogSupplyPushFlowAck::error_invalid_donneur: ui = 1; break;
      case MsgLogSupplyPushFlowAck::error_invalid_receveur: ui = 2; break;
      default: return ASN_E_INVENUM;
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 2);
   if (stat != ASN_OK) return stat;
   return (stat);
}

int ASN1C_MsgLogSupplyPushFlowAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyPushFlowAck (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyPushFlowAck (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyPushFlowAck* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 2);
   if (stat != ASN_OK) return stat;

   switch (ui) {
      case 0: *pvalue = MsgLogSupplyPushFlowAck::no_error; break;
      case 1: *pvalue = MsgLogSupplyPushFlowAck::error_invalid_donneur; break;
      case 2: *pvalue = MsgLogSupplyPushFlowAck::error_invalid_receveur; break;
      default: return ASN_E_INVENUM;
   }

   return (stat);
}

int ASN1C_MsgLogSupplyPushFlowAck::Decode ()
{
   return asn1PD_MsgLogSupplyPushFlowAck (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgLogSupplyQuotas                                        */
/*                                                            */
/**************************************************************/

ASN1C_MsgLogSupplyQuotas::ASN1C_MsgLogSupplyQuotas (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgLogSupplyQuotas& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgLogSupplyQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyQuotas* pvalue)
{
   int stat = ASN_OK;

   /* encode oid_automate */

   stat = asn1PE_Automat (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* encode quotas */

   stat = asn1PE__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return stat;

   return (stat);
}

int ASN1C_MsgLogSupplyQuotas::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgLogSupplyQuotas (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgLogSupplyQuotas (ASN1CTXT* ctxt_p, ASN1T_MsgLogSupplyQuotas* pvalue)
{
   int stat = ASN_OK;

   /* decode oid_automate */

   stat = asn1PD_Automat (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return stat;

   /* decode quotas */

   stat = asn1PD__SeqOfDotationQuota (ctxt_p, &pvalue->quotas);
   if (stat != ASN_OK) return stat;


   return (stat);
}

int ASN1C_MsgLogSupplyQuotas::Decode ()
{
   return asn1PD_MsgLogSupplyQuotas (mpContext->GetPtr(), &msgData);
}


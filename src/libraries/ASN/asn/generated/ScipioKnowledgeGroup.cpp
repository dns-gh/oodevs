/**
 * This file was generated by the Objective Systems ASN1C Compiler
 * (http://www.obj-sys.com).  Version: 5.31, Date: 13-Oct-2006.
 */
#include "ScipioKnowledgeGroup.h"

/**************************************************************/
/*                                                            */
/*  MsgKnowledgeGroupCreation                                 */
/*                                                            */
/**************************************************************/

ASN1C_MsgKnowledgeGroupCreation::ASN1C_MsgKnowledgeGroupCreation (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgKnowledgeGroupCreation& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgKnowledgeGroupCreation (ASN1CTXT* ctxt_p, ASN1T_MsgKnowledgeGroupCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgKnowledgeGroupCreation: start\n");

   /* encode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PE_KnowledgeGroup (ctxt_p, pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgKnowledgeGroupCreation: end\n");
   return (stat);
}

int ASN1C_MsgKnowledgeGroupCreation::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgKnowledgeGroupCreation (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgKnowledgeGroupCreation (ASN1CTXT* ctxt_p, ASN1T_MsgKnowledgeGroupCreation* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgKnowledgeGroupCreation: start\n");

   /* decode oid */

   PU_PUSHNAME (ctxt_p, "oid");

   stat = asn1PD_KnowledgeGroup (ctxt_p, &pvalue->oid);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgKnowledgeGroupCreation: end\n");

   return (stat);
}

int ASN1C_MsgKnowledgeGroupCreation::Decode ()
{
   return asn1PD_MsgKnowledgeGroupCreation (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeGroupeConnaissance                               */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeGroupeConnaissance::ASN1C_MsgChangeGroupeConnaissance (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeGroupeConnaissance& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeGroupeConnaissance (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeGroupeConnaissance: start\n");

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_KnowledgeGroup (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeGroupeConnaissance: end\n");
   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissance::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeGroupeConnaissance (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeGroupeConnaissance (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissance* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeGroupeConnaissance: start\n");

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_KnowledgeGroup (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeGroupeConnaissance: end\n");

   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissance::Decode ()
{
   return asn1PD_MsgChangeGroupeConnaissance (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  EnumChangeGroupeConnaissanceErrorCode                     */
/*                                                            */
/**************************************************************/

ASN1C_EnumChangeGroupeConnaissanceErrorCode::ASN1C_EnumChangeGroupeConnaissanceErrorCode (
   ASN1MessageBuffer& msgBuf, ASN1T_EnumChangeGroupeConnaissanceErrorCode& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_EnumChangeGroupeConnaissanceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeGroupeConnaissanceErrorCode value)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PE_EnumChangeGroupeConnaissanceErrorCode: start\n");

   switch (value) {
      case EnumChangeGroupeConnaissanceErrorCode::no_error: ui = 0; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_automate: ui = 1; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_camp: ui = 2; break;
      case EnumChangeGroupeConnaissanceErrorCode::error_invalid_groupe_connaissance: ui = 3; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   stat = pe_ConsUnsigned (ctxt_p, ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   rtdiag ("asn1PE_EnumChangeGroupeConnaissanceErrorCode: end\n");
   return (stat);
}

int ASN1C_EnumChangeGroupeConnaissanceErrorCode::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_EnumChangeGroupeConnaissanceErrorCode (mpContext->GetPtr(), msgData);
   return stat;
}

EXTERN int asn1PD_EnumChangeGroupeConnaissanceErrorCode (ASN1CTXT* ctxt_p, ASN1T_EnumChangeGroupeConnaissanceErrorCode* pvalue)
{
   int stat = ASN_OK;
   ASN1UINT ui;

   rtdiag ("asn1PD_EnumChangeGroupeConnaissanceErrorCode: start\n");

   stat = pd_ConsUnsigned (ctxt_p, &ui, 0, 3);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   switch (ui) {
      case 0: *pvalue = EnumChangeGroupeConnaissanceErrorCode::no_error; break;
      case 1: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_automate; break;
      case 2: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_camp; break;
      case 3: *pvalue = EnumChangeGroupeConnaissanceErrorCode::error_invalid_groupe_connaissance; break;
      default: return LOG_ASN1ERR (ctxt_p, ASN_E_INVENUM);
   }

   rtdiag ("asn1PD_EnumChangeGroupeConnaissanceErrorCode: end\n");

   return (stat);
}

int ASN1C_EnumChangeGroupeConnaissanceErrorCode::Decode ()
{
   return asn1PD_EnumChangeGroupeConnaissanceErrorCode (mpContext->GetPtr(), &msgData);
}

/**************************************************************/
/*                                                            */
/*  MsgChangeGroupeConnaissanceAck                            */
/*                                                            */
/**************************************************************/

ASN1C_MsgChangeGroupeConnaissanceAck::ASN1C_MsgChangeGroupeConnaissanceAck (
   ASN1MessageBuffer& msgBuf, ASN1T_MsgChangeGroupeConnaissanceAck& data) :
   ASN1CType(msgBuf), msgData(data)
{}

EXTERN int asn1PE_MsgChangeGroupeConnaissanceAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissanceAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PE_MsgChangeGroupeConnaissanceAck: start\n");

   /* encode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PE_Automate (ctxt_p, pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PE_Camp (ctxt_p, pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PE_KnowledgeGroup (ctxt_p, pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);

   /* encode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PE_EnumChangeGroupeConnaissanceErrorCode (ctxt_p, pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);
   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PE_MsgChangeGroupeConnaissanceAck: end\n");
   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissanceAck::Encode ()
{
   mMsgBuf.Init ();
   int stat = asn1PE_MsgChangeGroupeConnaissanceAck (mpContext->GetPtr(), &msgData);
   return stat;
}

EXTERN int asn1PD_MsgChangeGroupeConnaissanceAck (ASN1CTXT* ctxt_p, ASN1T_MsgChangeGroupeConnaissanceAck* pvalue)
{
   int stat = ASN_OK;

   rtdiag ("asn1PD_MsgChangeGroupeConnaissanceAck: start\n");

   /* decode oid_automate */

   PU_PUSHNAME (ctxt_p, "oid_automate");

   stat = asn1PD_Automate (ctxt_p, &pvalue->oid_automate);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_camp */

   PU_PUSHNAME (ctxt_p, "oid_camp");

   stat = asn1PD_Camp (ctxt_p, &pvalue->oid_camp);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode oid_groupe_connaissance */

   PU_PUSHNAME (ctxt_p, "oid_groupe_connaissance");

   stat = asn1PD_KnowledgeGroup (ctxt_p, &pvalue->oid_groupe_connaissance);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);

   /* decode error_code */

   PU_PUSHNAME (ctxt_p, "error_code");

   stat = asn1PD_EnumChangeGroupeConnaissanceErrorCode (ctxt_p, &pvalue->error_code);
   if (stat != ASN_OK) return LOG_ASN1ERR (ctxt_p, stat);

   PU_POPNAME (ctxt_p);


   rtdiag ("asn1PD_MsgChangeGroupeConnaissanceAck: end\n");

   return (stat);
}

int ASN1C_MsgChangeGroupeConnaissanceAck::Decode ()
{
   return asn1PD_MsgChangeGroupeConnaissanceAck (mpContext->GetPtr(), &msgData);
}

